// ../dist/index.js
var __create = Object.create;
var __getProtoOf = Object.getPrototypeOf;
var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __toESM = (mod, isNodeMode, target) => {
  target = mod != null ? __create(__getProtoOf(mod)) : {};
  const to = isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target;
  for (let key of __getOwnPropNames(mod))
    if (!__hasOwnProp.call(to, key))
      __defProp(to, key, {
        get: () => mod[key],
        enumerable: true
      });
  return to;
};
var __moduleCache = /* @__PURE__ */ new WeakMap;
var __toCommonJS = (from) => {
  var entry = __moduleCache.get(from), desc;
  if (entry)
    return entry;
  entry = __defProp({}, "__esModule", { value: true });
  if (from && typeof from === "object" || typeof from === "function")
    __getOwnPropNames(from).map((key) => !__hasOwnProp.call(entry, key) && __defProp(entry, key, {
      get: () => from[key],
      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
    }));
  __moduleCache.set(from, entry);
  return entry;
};
var __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {
      get: all[name],
      enumerable: true,
      configurable: true,
      set: (newValue) => all[name] = () => newValue
    });
};
var __esm = (fn, res) => () => (fn && (res = fn(fn = 0)), res);
var require_alea = __commonJS((exports, module) => {
  (function(global2, module2, define2) {
    function Alea(seed) {
      var me = this, mash = Mash();
      me.next = function() {
        var t2 = 2091639 * me.s0 + me.c * 0.00000000023283064365386963;
        me.s0 = me.s1;
        me.s1 = me.s2;
        return me.s2 = t2 - (me.c = t2 | 0);
      };
      me.c = 1;
      me.s0 = mash(" ");
      me.s1 = mash(" ");
      me.s2 = mash(" ");
      me.s0 -= mash(seed);
      if (me.s0 < 0) {
        me.s0 += 1;
      }
      me.s1 -= mash(seed);
      if (me.s1 < 0) {
        me.s1 += 1;
      }
      me.s2 -= mash(seed);
      if (me.s2 < 0) {
        me.s2 += 1;
      }
      mash = null;
    }
    function copy(f4, t2) {
      t2.c = f4.c;
      t2.s0 = f4.s0;
      t2.s1 = f4.s1;
      t2.s2 = f4.s2;
      return t2;
    }
    function impl(seed, opts) {
      var xg = new Alea(seed), state = opts && opts.state, prng = xg.next;
      prng.int32 = function() {
        return xg.next() * 4294967296 | 0;
      };
      prng.double = function() {
        return prng() + (prng() * 2097152 | 0) * 0.00000000000000011102230246251565;
      };
      prng.quick = prng;
      if (state) {
        if (typeof state == "object")
          copy(state, xg);
        prng.state = function() {
          return copy(xg, {});
        };
      }
      return prng;
    }
    function Mash() {
      var n4 = 4022871197;
      var mash = function(data) {
        data = String(data);
        for (var i2 = 0;i2 < data.length; i2++) {
          n4 += data.charCodeAt(i2);
          var h5 = 0.02519603282416938 * n4;
          n4 = h5 >>> 0;
          h5 -= n4;
          h5 *= n4;
          n4 = h5 >>> 0;
          h5 -= n4;
          n4 += h5 * 4294967296;
        }
        return (n4 >>> 0) * 0.00000000023283064365386963;
      };
      return mash;
    }
    if (module2 && module2.exports) {
      module2.exports = impl;
    } else if (define2 && define2.amd) {
      define2(function() {
        return impl;
      });
    } else {
      this.alea = impl;
    }
  })(exports, typeof module == "object" && module, typeof define == "function" && define);
});
var require_xor128 = __commonJS((exports, module) => {
  (function(global2, module2, define2) {
    function XorGen(seed) {
      var me = this, strseed = "";
      me.x = 0;
      me.y = 0;
      me.z = 0;
      me.w = 0;
      me.next = function() {
        var t2 = me.x ^ me.x << 11;
        me.x = me.y;
        me.y = me.z;
        me.z = me.w;
        return me.w ^= me.w >>> 19 ^ t2 ^ t2 >>> 8;
      };
      if (seed === (seed | 0)) {
        me.x = seed;
      } else {
        strseed += seed;
      }
      for (var k2 = 0;k2 < strseed.length + 64; k2++) {
        me.x ^= strseed.charCodeAt(k2) | 0;
        me.next();
      }
    }
    function copy(f4, t2) {
      t2.x = f4.x;
      t2.y = f4.y;
      t2.z = f4.z;
      t2.w = f4.w;
      return t2;
    }
    function impl(seed, opts) {
      var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
        return (xg.next() >>> 0) / 4294967296;
      };
      prng.double = function() {
        do {
          var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
        } while (result === 0);
        return result;
      };
      prng.int32 = xg.next;
      prng.quick = prng;
      if (state) {
        if (typeof state == "object")
          copy(state, xg);
        prng.state = function() {
          return copy(xg, {});
        };
      }
      return prng;
    }
    if (module2 && module2.exports) {
      module2.exports = impl;
    } else if (define2 && define2.amd) {
      define2(function() {
        return impl;
      });
    } else {
      this.xor128 = impl;
    }
  })(exports, typeof module == "object" && module, typeof define == "function" && define);
});
var require_xorwow = __commonJS((exports, module) => {
  (function(global2, module2, define2) {
    function XorGen(seed) {
      var me = this, strseed = "";
      me.next = function() {
        var t2 = me.x ^ me.x >>> 2;
        me.x = me.y;
        me.y = me.z;
        me.z = me.w;
        me.w = me.v;
        return (me.d = me.d + 362437 | 0) + (me.v = me.v ^ me.v << 4 ^ (t2 ^ t2 << 1)) | 0;
      };
      me.x = 0;
      me.y = 0;
      me.z = 0;
      me.w = 0;
      me.v = 0;
      if (seed === (seed | 0)) {
        me.x = seed;
      } else {
        strseed += seed;
      }
      for (var k2 = 0;k2 < strseed.length + 64; k2++) {
        me.x ^= strseed.charCodeAt(k2) | 0;
        if (k2 == strseed.length) {
          me.d = me.x << 10 ^ me.x >>> 4;
        }
        me.next();
      }
    }
    function copy(f4, t2) {
      t2.x = f4.x;
      t2.y = f4.y;
      t2.z = f4.z;
      t2.w = f4.w;
      t2.v = f4.v;
      t2.d = f4.d;
      return t2;
    }
    function impl(seed, opts) {
      var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
        return (xg.next() >>> 0) / 4294967296;
      };
      prng.double = function() {
        do {
          var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
        } while (result === 0);
        return result;
      };
      prng.int32 = xg.next;
      prng.quick = prng;
      if (state) {
        if (typeof state == "object")
          copy(state, xg);
        prng.state = function() {
          return copy(xg, {});
        };
      }
      return prng;
    }
    if (module2 && module2.exports) {
      module2.exports = impl;
    } else if (define2 && define2.amd) {
      define2(function() {
        return impl;
      });
    } else {
      this.xorwow = impl;
    }
  })(exports, typeof module == "object" && module, typeof define == "function" && define);
});
var require_xorshift7 = __commonJS((exports, module) => {
  (function(global2, module2, define2) {
    function XorGen(seed) {
      var me = this;
      me.next = function() {
        var { x: X3, i: i2 } = me, t2, v3, w2;
        t2 = X3[i2];
        t2 ^= t2 >>> 7;
        v3 = t2 ^ t2 << 24;
        t2 = X3[i2 + 1 & 7];
        v3 ^= t2 ^ t2 >>> 10;
        t2 = X3[i2 + 3 & 7];
        v3 ^= t2 ^ t2 >>> 3;
        t2 = X3[i2 + 4 & 7];
        v3 ^= t2 ^ t2 << 7;
        t2 = X3[i2 + 7 & 7];
        t2 = t2 ^ t2 << 13;
        v3 ^= t2 ^ t2 << 9;
        X3[i2] = v3;
        me.i = i2 + 1 & 7;
        return v3;
      };
      function init(me2, seed2) {
        var j2, w2, X3 = [];
        if (seed2 === (seed2 | 0)) {
          w2 = X3[0] = seed2;
        } else {
          seed2 = "" + seed2;
          for (j2 = 0;j2 < seed2.length; ++j2) {
            X3[j2 & 7] = X3[j2 & 7] << 15 ^ seed2.charCodeAt(j2) + X3[j2 + 1 & 7] << 13;
          }
        }
        while (X3.length < 8)
          X3.push(0);
        for (j2 = 0;j2 < 8 && X3[j2] === 0; ++j2)
          ;
        if (j2 == 8)
          w2 = X3[7] = -1;
        else
          w2 = X3[j2];
        me2.x = X3;
        me2.i = 0;
        for (j2 = 256;j2 > 0; --j2) {
          me2.next();
        }
      }
      init(me, seed);
    }
    function copy(f4, t2) {
      t2.x = f4.x.slice();
      t2.i = f4.i;
      return t2;
    }
    function impl(seed, opts) {
      if (seed == null)
        seed = +new Date;
      var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
        return (xg.next() >>> 0) / 4294967296;
      };
      prng.double = function() {
        do {
          var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
        } while (result === 0);
        return result;
      };
      prng.int32 = xg.next;
      prng.quick = prng;
      if (state) {
        if (state.x)
          copy(state, xg);
        prng.state = function() {
          return copy(xg, {});
        };
      }
      return prng;
    }
    if (module2 && module2.exports) {
      module2.exports = impl;
    } else if (define2 && define2.amd) {
      define2(function() {
        return impl;
      });
    } else {
      this.xorshift7 = impl;
    }
  })(exports, typeof module == "object" && module, typeof define == "function" && define);
});
var require_xor4096 = __commonJS((exports, module) => {
  (function(global2, module2, define2) {
    function XorGen(seed) {
      var me = this;
      me.next = function() {
        var { w: w2, X: X3, i: i2 } = me, t2, v3;
        me.w = w2 = w2 + 1640531527 | 0;
        v3 = X3[i2 + 34 & 127];
        t2 = X3[i2 = i2 + 1 & 127];
        v3 ^= v3 << 13;
        t2 ^= t2 << 17;
        v3 ^= v3 >>> 15;
        t2 ^= t2 >>> 12;
        v3 = X3[i2] = v3 ^ t2;
        me.i = i2;
        return v3 + (w2 ^ w2 >>> 16) | 0;
      };
      function init(me2, seed2) {
        var t2, v3, i2, j2, w2, X3 = [], limit = 128;
        if (seed2 === (seed2 | 0)) {
          v3 = seed2;
          seed2 = null;
        } else {
          seed2 = seed2 + "\x00";
          v3 = 0;
          limit = Math.max(limit, seed2.length);
        }
        for (i2 = 0, j2 = -32;j2 < limit; ++j2) {
          if (seed2)
            v3 ^= seed2.charCodeAt((j2 + 32) % seed2.length);
          if (j2 === 0)
            w2 = v3;
          v3 ^= v3 << 10;
          v3 ^= v3 >>> 15;
          v3 ^= v3 << 4;
          v3 ^= v3 >>> 13;
          if (j2 >= 0) {
            w2 = w2 + 1640531527 | 0;
            t2 = X3[j2 & 127] ^= v3 + w2;
            i2 = t2 == 0 ? i2 + 1 : 0;
          }
        }
        if (i2 >= 128) {
          X3[(seed2 && seed2.length || 0) & 127] = -1;
        }
        i2 = 127;
        for (j2 = 4 * 128;j2 > 0; --j2) {
          v3 = X3[i2 + 34 & 127];
          t2 = X3[i2 = i2 + 1 & 127];
          v3 ^= v3 << 13;
          t2 ^= t2 << 17;
          v3 ^= v3 >>> 15;
          t2 ^= t2 >>> 12;
          X3[i2] = v3 ^ t2;
        }
        me2.w = w2;
        me2.X = X3;
        me2.i = i2;
      }
      init(me, seed);
    }
    function copy(f4, t2) {
      t2.i = f4.i;
      t2.w = f4.w;
      t2.X = f4.X.slice();
      return t2;
    }
    function impl(seed, opts) {
      if (seed == null)
        seed = +new Date;
      var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
        return (xg.next() >>> 0) / 4294967296;
      };
      prng.double = function() {
        do {
          var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
        } while (result === 0);
        return result;
      };
      prng.int32 = xg.next;
      prng.quick = prng;
      if (state) {
        if (state.X)
          copy(state, xg);
        prng.state = function() {
          return copy(xg, {});
        };
      }
      return prng;
    }
    if (module2 && module2.exports) {
      module2.exports = impl;
    } else if (define2 && define2.amd) {
      define2(function() {
        return impl;
      });
    } else {
      this.xor4096 = impl;
    }
  })(exports, typeof module == "object" && module, typeof define == "function" && define);
});
var require_tychei = __commonJS((exports, module) => {
  (function(global2, module2, define2) {
    function XorGen(seed) {
      var me = this, strseed = "";
      me.next = function() {
        var { b: b3, c, d: d2, a: a3 } = me;
        b3 = b3 << 25 ^ b3 >>> 7 ^ c;
        c = c - d2 | 0;
        d2 = d2 << 24 ^ d2 >>> 8 ^ a3;
        a3 = a3 - b3 | 0;
        me.b = b3 = b3 << 20 ^ b3 >>> 12 ^ c;
        me.c = c = c - d2 | 0;
        me.d = d2 << 16 ^ c >>> 16 ^ a3;
        return me.a = a3 - b3 | 0;
      };
      me.a = 0;
      me.b = 0;
      me.c = 2654435769 | 0;
      me.d = 1367130551;
      if (seed === Math.floor(seed)) {
        me.a = seed / 4294967296 | 0;
        me.b = seed | 0;
      } else {
        strseed += seed;
      }
      for (var k2 = 0;k2 < strseed.length + 20; k2++) {
        me.b ^= strseed.charCodeAt(k2) | 0;
        me.next();
      }
    }
    function copy(f4, t2) {
      t2.a = f4.a;
      t2.b = f4.b;
      t2.c = f4.c;
      t2.d = f4.d;
      return t2;
    }
    function impl(seed, opts) {
      var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
        return (xg.next() >>> 0) / 4294967296;
      };
      prng.double = function() {
        do {
          var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
        } while (result === 0);
        return result;
      };
      prng.int32 = xg.next;
      prng.quick = prng;
      if (state) {
        if (typeof state == "object")
          copy(state, xg);
        prng.state = function() {
          return copy(xg, {});
        };
      }
      return prng;
    }
    if (module2 && module2.exports) {
      module2.exports = impl;
    } else if (define2 && define2.amd) {
      define2(function() {
        return impl;
      });
    } else {
      this.tychei = impl;
    }
  })(exports, typeof module == "object" && module, typeof define == "function" && define);
});
var exports_crypto = {};
__export(exports_crypto, {
  webcrypto: () => uw,
  timingSafeEqual: () => _02,
  randomUUID: () => sw,
  getRandomValues: () => ow,
  getCurves: () => hw,
  default: () => zq,
  DEFAULT_ENCODING: () => Fq
});
function hw() {
  return Uq;
}
var lw;
var Ya;
var dw;
var cw;
var pw;
var vw;
var A02 = (t2, e2) => () => (t2 && (e2 = t2(t2 = 0)), e2);
var T3 = (t2, e2) => () => (e2 || t2((e2 = { exports: {} }).exports, e2), e2.exports);
var Xa = (t2, e2) => {
  for (var r2 in e2)
    Ya(t2, r2, { get: e2[r2], enumerable: true });
};
var Ga = (t2, e2, r2, o2) => {
  if (e2 && typeof e2 == "object" || typeof e2 == "function")
    for (let f4 of cw(e2))
      !vw.call(t2, f4) && f4 !== r2 && Ya(t2, f4, { get: () => e2[f4], enumerable: !(o2 = dw(e2, f4)) || o2.enumerable });
  return t2;
};
var lt = (t2, e2, r2) => (Ga(t2, e2, "default"), r2 && Ga(r2, e2, "default"));
var rn = (t2, e2, r2) => (r2 = t2 != null ? lw(pw(t2)) : {}, Ga(e2 || !t2 || !t2.__esModule ? Ya(r2, "default", { value: t2, enumerable: true }) : r2, t2));
var ur = (t2) => Ga(Ya({}, "__esModule", { value: true }), t2);
var Td;
var kd;
var Ut;
var Te;
var on;
var Ie;
var ki;
var H02;
var $f;
var lc;
var j02;
var sn;
var Z0;
var $02;
var X02;
var hn;
var lo;
var Jf;
var co;
var Qf;
var po;
var Lc;
var Dc;
var eh;
var ch;
var Yc;
var tp;
var ip;
var vh;
var Eo;
var Ro;
var pn;
var yp;
var _p;
var mh;
var Ap;
var gh;
var Dp;
var To;
var Tt;
var Gr;
var Lo;
var Xt;
var pa;
var Ah;
var pr;
var V_;
var Oi;
var Fi;
var Ui;
var q1;
var yn;
var Zo;
var $o;
var W1;
var Yo;
var Oh;
var ba;
var Xh;
var kv;
var Qr;
var nu;
var au;
var as;
var Xv;
var du;
var sb;
var vu;
var vf;
var M7;
var hb;
var yi;
var bf;
var mb;
var bu;
var yu;
var wu;
var _b;
var Mu;
var _u;
var Su;
var Eu;
var Cb;
var qu;
var Iu;
var ar;
var ps;
var Tu;
var Vb;
var Yb;
var Xb;
var em;
var tm;
var yf;
var nm;
var om;
var hm;
var lm;
var cm;
var Du;
var Cu;
var Ou;
var ys;
var Aa;
var _m;
var Hu;
var Ku;
var Ba;
var km;
var Pm;
var Ss;
var Fm;
var Km;
var ji;
var Gu;
var Vm;
var $m;
var Es;
var el;
var al;
var Qm;
var ig;
var ag;
var sl;
var lg;
var ll;
var kn;
var dl;
var vl;
var Ln;
var Ns;
var Ig;
var kg;
var gl;
var ql;
var Vg;
var Jg;
var e2;
var Hs;
var Ws;
var f22;
var ri;
var Ll;
var or;
var Oa;
var c2;
var b22;
var y22;
var Dl;
var Cr;
var Tf;
var Pl;
var T22;
var Ol;
var P2;
var Hl;
var W2;
var K2;
var Y2;
var J2;
var Qs;
var ty;
var e02;
var oy;
var hy;
var dy;
var by;
var wy;
var _y;
var Ry;
var a02;
var ed;
var s02;
var h02;
var Kf;
var l02;
var d02;
var id;
var Fy;
var ad;
var sd;
var Gy;
var ld;
var Qy;
var t3;
var n32;
var dd;
var h32;
var l32;
var d3;
var p3;
var Ha;
var vd;
var y3;
var x3;
var q3;
var T32;
var L3;
var Md;
var _d;
var y02;
var Sd;
var H3;
var V32;
var $3;
var nw;
var Bd;
var fr;
var Oq;
var Fq = "buffer";
var ow = (t2) => crypto.getRandomValues(t2);
var sw = () => crypto.randomUUID();
var Uq;
var _02;
var uw;
var zq;
var init_crypto = __esm(() => {
  lw = Object.create;
  Ya = Object.defineProperty;
  dw = Object.getOwnPropertyDescriptor;
  cw = Object.getOwnPropertyNames;
  pw = Object.getPrototypeOf;
  vw = Object.prototype.hasOwnProperty;
  Td = T3((Ja) => {
    Ja.byteLength = mw;
    Ja.toByteArray = yw;
    Ja.fromByteArray = _w;
    var jr = [], lr = [], bw = typeof Uint8Array < "u" ? Uint8Array : Array, R02 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (nn = 0, qd = R02.length;nn < qd; ++nn)
      jr[nn] = R02[nn], lr[R02.charCodeAt(nn)] = nn;
    var nn, qd;
    lr[45] = 62;
    lr[95] = 63;
    function Id(t2) {
      var e22 = t2.length;
      if (e22 % 4 > 0)
        throw new Error("Invalid string. Length must be a multiple of 4");
      var r2 = t2.indexOf("=");
      r2 === -1 && (r2 = e22);
      var o2 = r2 === e22 ? 0 : 4 - r2 % 4;
      return [r2, o2];
    }
    function mw(t2) {
      var e22 = Id(t2), r2 = e22[0], o2 = e22[1];
      return (r2 + o2) * 3 / 4 - o2;
    }
    function gw(t2, e22, r2) {
      return (e22 + r2) * 3 / 4 - r2;
    }
    function yw(t2) {
      var e22, r2 = Id(t2), o2 = r2[0], f4 = r2[1], p32 = new bw(gw(t2, o2, f4)), m4 = 0, y32 = f4 > 0 ? o2 - 4 : o2, M3;
      for (M3 = 0;M3 < y32; M3 += 4)
        e22 = lr[t2.charCodeAt(M3)] << 18 | lr[t2.charCodeAt(M3 + 1)] << 12 | lr[t2.charCodeAt(M3 + 2)] << 6 | lr[t2.charCodeAt(M3 + 3)], p32[m4++] = e22 >> 16 & 255, p32[m4++] = e22 >> 8 & 255, p32[m4++] = e22 & 255;
      return f4 === 2 && (e22 = lr[t2.charCodeAt(M3)] << 2 | lr[t2.charCodeAt(M3 + 1)] >> 4, p32[m4++] = e22 & 255), f4 === 1 && (e22 = lr[t2.charCodeAt(M3)] << 10 | lr[t2.charCodeAt(M3 + 1)] << 4 | lr[t2.charCodeAt(M3 + 2)] >> 2, p32[m4++] = e22 >> 8 & 255, p32[m4++] = e22 & 255), p32;
    }
    function ww(t2) {
      return jr[t2 >> 18 & 63] + jr[t2 >> 12 & 63] + jr[t2 >> 6 & 63] + jr[t2 & 63];
    }
    function Mw(t2, e22, r2) {
      for (var o2, f4 = [], p32 = e22;p32 < r2; p32 += 3)
        o2 = (t2[p32] << 16 & 16711680) + (t2[p32 + 1] << 8 & 65280) + (t2[p32 + 2] & 255), f4.push(ww(o2));
      return f4.join("");
    }
    function _w(t2) {
      for (var e22, r2 = t2.length, o2 = r2 % 3, f4 = [], p32 = 16383, m4 = 0, y32 = r2 - o2;m4 < y32; m4 += p32)
        f4.push(Mw(t2, m4, m4 + p32 > y32 ? y32 : m4 + p32));
      return o2 === 1 ? (e22 = t2[r2 - 1], f4.push(jr[e22 >> 2] + jr[e22 << 4 & 63] + "==")) : o2 === 2 && (e22 = (t2[r2 - 2] << 8) + t2[r2 - 1], f4.push(jr[e22 >> 10] + jr[e22 >> 4 & 63] + jr[e22 << 2 & 63] + "=")), f4.join("");
    }
  });
  kd = T3((B02) => {
    B02.read = function(t2, e22, r2, o2, f4) {
      var p32, m4, y32 = f4 * 8 - o2 - 1, M3 = (1 << y32) - 1, x32 = M3 >> 1, S3 = -7, E3 = r2 ? f4 - 1 : 0, B5 = r2 ? -1 : 1, q2 = t2[e22 + E3];
      for (E3 += B5, p32 = q2 & (1 << -S3) - 1, q2 >>= -S3, S3 += y32;S3 > 0; p32 = p32 * 256 + t2[e22 + E3], E3 += B5, S3 -= 8)
        ;
      for (m4 = p32 & (1 << -S3) - 1, p32 >>= -S3, S3 += o2;S3 > 0; m4 = m4 * 256 + t2[e22 + E3], E3 += B5, S3 -= 8)
        ;
      if (p32 === 0)
        p32 = 1 - x32;
      else {
        if (p32 === M3)
          return m4 ? NaN : (q2 ? -1 : 1) * (1 / 0);
        m4 = m4 + Math.pow(2, o2), p32 = p32 - x32;
      }
      return (q2 ? -1 : 1) * m4 * Math.pow(2, p32 - o2);
    };
    B02.write = function(t2, e22, r2, o2, f4, p32) {
      var m4, y32, M3, x32 = p32 * 8 - f4 - 1, S3 = (1 << x32) - 1, E3 = S3 >> 1, B5 = f4 === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, q2 = o2 ? 0 : p32 - 1, L32 = o2 ? 1 : -1, ge = e22 < 0 || e22 === 0 && 1 / e22 < 0 ? 1 : 0;
      for (e22 = Math.abs(e22), isNaN(e22) || e22 === 1 / 0 ? (y32 = isNaN(e22) ? 1 : 0, m4 = S3) : (m4 = Math.floor(Math.log(e22) / Math.LN2), e22 * (M3 = Math.pow(2, -m4)) < 1 && (m4--, M3 *= 2), m4 + E3 >= 1 ? e22 += B5 / M3 : e22 += B5 * Math.pow(2, 1 - E3), e22 * M3 >= 2 && (m4++, M3 /= 2), m4 + E3 >= S3 ? (y32 = 0, m4 = S3) : m4 + E3 >= 1 ? (y32 = (e22 * M3 - 1) * Math.pow(2, f4), m4 = m4 + E3) : (y32 = e22 * Math.pow(2, E3 - 1) * Math.pow(2, f4), m4 = 0));f4 >= 8; t2[r2 + q2] = y32 & 255, q2 += L32, y32 /= 256, f4 -= 8)
        ;
      for (m4 = m4 << f4 | y32, x32 += f4;x32 > 0; t2[r2 + q2] = m4 & 255, q2 += L32, m4 /= 256, x32 -= 8)
        ;
      t2[r2 + q2 - L32] |= ge * 128;
    };
  });
  Ut = T3((Xn) => {
    var q02 = Td(), Gn = kd(), Ld = typeof Symbol == "function" && typeof Symbol.for == "function" ? Symbol.for("nodejs.util.inspect.custom") : null;
    Xn.Buffer = me;
    Xn.SlowBuffer = Bw;
    Xn.INSPECT_MAX_BYTES = 50;
    var Qa = 2147483647;
    Xn.kMaxLength = Qa;
    me.TYPED_ARRAY_SUPPORT = xw();
    !me.TYPED_ARRAY_SUPPORT && typeof console < "u" && typeof console.error == "function" && console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
    function xw() {
      try {
        let t2 = new Uint8Array(1), e22 = { foo: function() {
          return 42;
        } };
        return Object.setPrototypeOf(e22, Uint8Array.prototype), Object.setPrototypeOf(t2, e22), t2.foo() === 42;
      } catch {
        return false;
      }
    }
    Object.defineProperty(me.prototype, "parent", { enumerable: true, get: function() {
      if (!!me.isBuffer(this))
        return this.buffer;
    } });
    Object.defineProperty(me.prototype, "offset", { enumerable: true, get: function() {
      if (!!me.isBuffer(this))
        return this.byteOffset;
    } });
    function li(t2) {
      if (t2 > Qa)
        throw new RangeError('The value "' + t2 + '" is invalid for option "size"');
      let e22 = new Uint8Array(t2);
      return Object.setPrototypeOf(e22, me.prototype), e22;
    }
    function me(t2, e22, r2) {
      if (typeof t2 == "number") {
        if (typeof e22 == "string")
          throw new TypeError('The "string" argument must be of type string. Received type number');
        return L02(t2);
      }
      return Cd(t2, e22, r2);
    }
    me.poolSize = 8192;
    function Cd(t2, e22, r2) {
      if (typeof t2 == "string")
        return Ew(t2, e22);
      if (ArrayBuffer.isView(t2))
        return Aw(t2);
      if (t2 == null)
        throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof t2);
      if (Zr(t2, ArrayBuffer) || t2 && Zr(t2.buffer, ArrayBuffer) || typeof SharedArrayBuffer < "u" && (Zr(t2, SharedArrayBuffer) || t2 && Zr(t2.buffer, SharedArrayBuffer)))
        return T02(t2, e22, r2);
      if (typeof t2 == "number")
        throw new TypeError('The "value" argument must not be of type number. Received type number');
      let o2 = t2.valueOf && t2.valueOf();
      if (o2 != null && o2 !== t2)
        return me.from(o2, e22, r2);
      let f4 = Rw(t2);
      if (f4)
        return f4;
      if (typeof Symbol < "u" && Symbol.toPrimitive != null && typeof t2[Symbol.toPrimitive] == "function")
        return me.from(t2[Symbol.toPrimitive]("string"), e22, r2);
      throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof t2);
    }
    me.from = function(t2, e22, r2) {
      return Cd(t2, e22, r2);
    };
    Object.setPrototypeOf(me.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(me, Uint8Array);
    function Od(t2) {
      if (typeof t2 != "number")
        throw new TypeError('"size" argument must be of type number');
      if (t2 < 0)
        throw new RangeError('The value "' + t2 + '" is invalid for option "size"');
    }
    function Sw(t2, e22, r2) {
      return Od(t2), t2 <= 0 ? li(t2) : e22 !== undefined ? typeof r2 == "string" ? li(t2).fill(e22, r2) : li(t2).fill(e22) : li(t2);
    }
    me.alloc = function(t2, e22, r2) {
      return Sw(t2, e22, r2);
    };
    function L02(t2) {
      return Od(t2), li(t2 < 0 ? 0 : N02(t2) | 0);
    }
    me.allocUnsafe = function(t2) {
      return L02(t2);
    };
    me.allocUnsafeSlow = function(t2) {
      return L02(t2);
    };
    function Ew(t2, e22) {
      if ((typeof e22 != "string" || e22 === "") && (e22 = "utf8"), !me.isEncoding(e22))
        throw new TypeError("Unknown encoding: " + e22);
      let r2 = Fd(t2, e22) | 0, o2 = li(r2), f4 = o2.write(t2, e22);
      return f4 !== r2 && (o2 = o2.slice(0, f4)), o2;
    }
    function I02(t2) {
      let e22 = t2.length < 0 ? 0 : N02(t2.length) | 0, r2 = li(e22);
      for (let o2 = 0;o2 < e22; o2 += 1)
        r2[o2] = t2[o2] & 255;
      return r2;
    }
    function Aw(t2) {
      if (Zr(t2, Uint8Array)) {
        let e22 = new Uint8Array(t2);
        return T02(e22.buffer, e22.byteOffset, e22.byteLength);
      }
      return I02(t2);
    }
    function T02(t2, e22, r2) {
      if (e22 < 0 || t2.byteLength < e22)
        throw new RangeError('"offset" is outside of buffer bounds');
      if (t2.byteLength < e22 + (r2 || 0))
        throw new RangeError('"length" is outside of buffer bounds');
      let o2;
      return e22 === undefined && r2 === undefined ? o2 = new Uint8Array(t2) : r2 === undefined ? o2 = new Uint8Array(t2, e22) : o2 = new Uint8Array(t2, e22, r2), Object.setPrototypeOf(o2, me.prototype), o2;
    }
    function Rw(t2) {
      if (me.isBuffer(t2)) {
        let e22 = N02(t2.length) | 0, r2 = li(e22);
        return r2.length === 0 || t2.copy(r2, 0, 0, e22), r2;
      }
      if (t2.length !== undefined)
        return typeof t2.length != "number" || P02(t2.length) ? li(0) : I02(t2);
      if (t2.type === "Buffer" && Array.isArray(t2.data))
        return I02(t2.data);
    }
    function N02(t2) {
      if (t2 >= Qa)
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + Qa.toString(16) + " bytes");
      return t2 | 0;
    }
    function Bw(t2) {
      return +t2 != t2 && (t2 = 0), me.alloc(+t2);
    }
    me.isBuffer = function(e22) {
      return e22 != null && e22._isBuffer === true && e22 !== me.prototype;
    };
    me.compare = function(e22, r2) {
      if (Zr(e22, Uint8Array) && (e22 = me.from(e22, e22.offset, e22.byteLength)), Zr(r2, Uint8Array) && (r2 = me.from(r2, r2.offset, r2.byteLength)), !me.isBuffer(e22) || !me.isBuffer(r2))
        throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
      if (e22 === r2)
        return 0;
      let o2 = e22.length, f4 = r2.length;
      for (let p32 = 0, m4 = Math.min(o2, f4);p32 < m4; ++p32)
        if (e22[p32] !== r2[p32]) {
          o2 = e22[p32], f4 = r2[p32];
          break;
        }
      return o2 < f4 ? -1 : f4 < o2 ? 1 : 0;
    };
    me.isEncoding = function(e22) {
      switch (String(e22).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    me.concat = function(e22, r2) {
      if (!Array.isArray(e22))
        throw new TypeError('"list" argument must be an Array of Buffers');
      if (e22.length === 0)
        return me.alloc(0);
      let o2;
      if (r2 === undefined)
        for (r2 = 0, o2 = 0;o2 < e22.length; ++o2)
          r2 += e22[o2].length;
      let f4 = me.allocUnsafe(r2), p32 = 0;
      for (o2 = 0;o2 < e22.length; ++o2) {
        let m4 = e22[o2];
        if (Zr(m4, Uint8Array))
          p32 + m4.length > f4.length ? (me.isBuffer(m4) || (m4 = me.from(m4)), m4.copy(f4, p32)) : Uint8Array.prototype.set.call(f4, m4, p32);
        else if (me.isBuffer(m4))
          m4.copy(f4, p32);
        else
          throw new TypeError('"list" argument must be an Array of Buffers');
        p32 += m4.length;
      }
      return f4;
    };
    function Fd(t2, e22) {
      if (me.isBuffer(t2))
        return t2.length;
      if (ArrayBuffer.isView(t2) || Zr(t2, ArrayBuffer))
        return t2.byteLength;
      if (typeof t2 != "string")
        throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof t2);
      let r2 = t2.length, o2 = arguments.length > 2 && arguments[2] === true;
      if (!o2 && r2 === 0)
        return 0;
      let f4 = false;
      for (;; )
        switch (e22) {
          case "ascii":
          case "latin1":
          case "binary":
            return r2;
          case "utf8":
          case "utf-8":
            return k02(t2).length;
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return r2 * 2;
          case "hex":
            return r2 >>> 1;
          case "base64":
            return $d(t2).length;
          default:
            if (f4)
              return o2 ? -1 : k02(t2).length;
            e22 = ("" + e22).toLowerCase(), f4 = true;
        }
    }
    me.byteLength = Fd;
    function qw(t2, e22, r2) {
      let o2 = false;
      if ((e22 === undefined || e22 < 0) && (e22 = 0), e22 > this.length || ((r2 === undefined || r2 > this.length) && (r2 = this.length), r2 <= 0) || (r2 >>>= 0, e22 >>>= 0, r2 <= e22))
        return "";
      for (t2 || (t2 = "utf8");; )
        switch (t2) {
          case "hex":
            return Fw(this, e22, r2);
          case "utf8":
          case "utf-8":
            return zd(this, e22, r2);
          case "ascii":
            return Cw(this, e22, r2);
          case "latin1":
          case "binary":
            return Ow(this, e22, r2);
          case "base64":
            return Dw(this, e22, r2);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return Uw(this, e22, r2);
          default:
            if (o2)
              throw new TypeError("Unknown encoding: " + t2);
            t2 = (t2 + "").toLowerCase(), o2 = true;
        }
    }
    me.prototype._isBuffer = true;
    function fn(t2, e22, r2) {
      let o2 = t2[e22];
      t2[e22] = t2[r2], t2[r2] = o2;
    }
    me.prototype.swap16 = function() {
      let e22 = this.length;
      if (e22 % 2 !== 0)
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      for (let r2 = 0;r2 < e22; r2 += 2)
        fn(this, r2, r2 + 1);
      return this;
    };
    me.prototype.swap32 = function() {
      let e22 = this.length;
      if (e22 % 4 !== 0)
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      for (let r2 = 0;r2 < e22; r2 += 4)
        fn(this, r2, r2 + 3), fn(this, r2 + 1, r2 + 2);
      return this;
    };
    me.prototype.swap64 = function() {
      let e22 = this.length;
      if (e22 % 8 !== 0)
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      for (let r2 = 0;r2 < e22; r2 += 8)
        fn(this, r2, r2 + 7), fn(this, r2 + 1, r2 + 6), fn(this, r2 + 2, r2 + 5), fn(this, r2 + 3, r2 + 4);
      return this;
    };
    me.prototype.toString = function() {
      let e22 = this.length;
      return e22 === 0 ? "" : arguments.length === 0 ? zd(this, 0, e22) : qw.apply(this, arguments);
    };
    me.prototype.toLocaleString = me.prototype.toString;
    me.prototype.equals = function(e22) {
      if (!me.isBuffer(e22))
        throw new TypeError("Argument must be a Buffer");
      return this === e22 ? true : me.compare(this, e22) === 0;
    };
    me.prototype.inspect = function() {
      let e22 = "", r2 = Xn.INSPECT_MAX_BYTES;
      return e22 = this.toString("hex", 0, r2).replace(/(.{2})/g, "$1 ").trim(), this.length > r2 && (e22 += " ... "), "<Buffer " + e22 + ">";
    };
    Ld && (me.prototype[Ld] = me.prototype.inspect);
    me.prototype.compare = function(e22, r2, o2, f4, p32) {
      if (Zr(e22, Uint8Array) && (e22 = me.from(e22, e22.offset, e22.byteLength)), !me.isBuffer(e22))
        throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof e22);
      if (r2 === undefined && (r2 = 0), o2 === undefined && (o2 = e22 ? e22.length : 0), f4 === undefined && (f4 = 0), p32 === undefined && (p32 = this.length), r2 < 0 || o2 > e22.length || f4 < 0 || p32 > this.length)
        throw new RangeError("out of range index");
      if (f4 >= p32 && r2 >= o2)
        return 0;
      if (f4 >= p32)
        return -1;
      if (r2 >= o2)
        return 1;
      if (r2 >>>= 0, o2 >>>= 0, f4 >>>= 0, p32 >>>= 0, this === e22)
        return 0;
      let m4 = p32 - f4, y32 = o2 - r2, M3 = Math.min(m4, y32), x32 = this.slice(f4, p32), S3 = e22.slice(r2, o2);
      for (let E3 = 0;E3 < M3; ++E3)
        if (x32[E3] !== S3[E3]) {
          m4 = x32[E3], y32 = S3[E3];
          break;
        }
      return m4 < y32 ? -1 : y32 < m4 ? 1 : 0;
    };
    function Ud(t2, e22, r2, o2, f4) {
      if (t2.length === 0)
        return -1;
      if (typeof r2 == "string" ? (o2 = r2, r2 = 0) : r2 > 2147483647 ? r2 = 2147483647 : r2 < -2147483648 && (r2 = -2147483648), r2 = +r2, P02(r2) && (r2 = f4 ? 0 : t2.length - 1), r2 < 0 && (r2 = t2.length + r2), r2 >= t2.length) {
        if (f4)
          return -1;
        r2 = t2.length - 1;
      } else if (r2 < 0)
        if (f4)
          r2 = 0;
        else
          return -1;
      if (typeof e22 == "string" && (e22 = me.from(e22, o2)), me.isBuffer(e22))
        return e22.length === 0 ? -1 : Nd(t2, e22, r2, o2, f4);
      if (typeof e22 == "number")
        return e22 = e22 & 255, typeof Uint8Array.prototype.indexOf == "function" ? f4 ? Uint8Array.prototype.indexOf.call(t2, e22, r2) : Uint8Array.prototype.lastIndexOf.call(t2, e22, r2) : Nd(t2, [e22], r2, o2, f4);
      throw new TypeError("val must be string, number or Buffer");
    }
    function Nd(t2, e22, r2, o2, f4) {
      let p32 = 1, m4 = t2.length, y32 = e22.length;
      if (o2 !== undefined && (o2 = String(o2).toLowerCase(), o2 === "ucs2" || o2 === "ucs-2" || o2 === "utf16le" || o2 === "utf-16le")) {
        if (t2.length < 2 || e22.length < 2)
          return -1;
        p32 = 2, m4 /= 2, y32 /= 2, r2 /= 2;
      }
      function M3(S3, E3) {
        return p32 === 1 ? S3[E3] : S3.readUInt16BE(E3 * p32);
      }
      let x32;
      if (f4) {
        let S3 = -1;
        for (x32 = r2;x32 < m4; x32++)
          if (M3(t2, x32) === M3(e22, S3 === -1 ? 0 : x32 - S3)) {
            if (S3 === -1 && (S3 = x32), x32 - S3 + 1 === y32)
              return S3 * p32;
          } else
            S3 !== -1 && (x32 -= x32 - S3), S3 = -1;
      } else
        for (r2 + y32 > m4 && (r2 = m4 - y32), x32 = r2;x32 >= 0; x32--) {
          let S3 = true;
          for (let E3 = 0;E3 < y32; E3++)
            if (M3(t2, x32 + E3) !== M3(e22, E3)) {
              S3 = false;
              break;
            }
          if (S3)
            return x32;
        }
      return -1;
    }
    me.prototype.includes = function(e22, r2, o2) {
      return this.indexOf(e22, r2, o2) !== -1;
    };
    me.prototype.indexOf = function(e22, r2, o2) {
      return Ud(this, e22, r2, o2, true);
    };
    me.prototype.lastIndexOf = function(e22, r2, o2) {
      return Ud(this, e22, r2, o2, false);
    };
    function Iw(t2, e22, r2, o2) {
      r2 = Number(r2) || 0;
      let f4 = t2.length - r2;
      o2 ? (o2 = Number(o2), o2 > f4 && (o2 = f4)) : o2 = f4;
      let p32 = e22.length;
      o2 > p32 / 2 && (o2 = p32 / 2);
      let m4;
      for (m4 = 0;m4 < o2; ++m4) {
        let y32 = parseInt(e22.substr(m4 * 2, 2), 16);
        if (P02(y32))
          return m4;
        t2[r2 + m4] = y32;
      }
      return m4;
    }
    function Tw(t2, e22, r2, o2) {
      return eo(k02(e22, t2.length - r2), t2, r2, o2);
    }
    function kw(t2, e22, r2, o2) {
      return eo(Kw(e22), t2, r2, o2);
    }
    function Lw(t2, e22, r2, o2) {
      return eo($d(e22), t2, r2, o2);
    }
    function Nw(t2, e22, r2, o2) {
      return eo(jw(e22, t2.length - r2), t2, r2, o2);
    }
    me.prototype.write = function(e22, r2, o2, f4) {
      if (r2 === undefined)
        f4 = "utf8", o2 = this.length, r2 = 0;
      else if (o2 === undefined && typeof r2 == "string")
        f4 = r2, o2 = this.length, r2 = 0;
      else if (isFinite(r2))
        r2 = r2 >>> 0, isFinite(o2) ? (o2 = o2 >>> 0, f4 === undefined && (f4 = "utf8")) : (f4 = o2, o2 = undefined);
      else
        throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
      let p32 = this.length - r2;
      if ((o2 === undefined || o2 > p32) && (o2 = p32), e22.length > 0 && (o2 < 0 || r2 < 0) || r2 > this.length)
        throw new RangeError("Attempt to write outside buffer bounds");
      f4 || (f4 = "utf8");
      let m4 = false;
      for (;; )
        switch (f4) {
          case "hex":
            return Iw(this, e22, r2, o2);
          case "utf8":
          case "utf-8":
            return Tw(this, e22, r2, o2);
          case "ascii":
          case "latin1":
          case "binary":
            return kw(this, e22, r2, o2);
          case "base64":
            return Lw(this, e22, r2, o2);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return Nw(this, e22, r2, o2);
          default:
            if (m4)
              throw new TypeError("Unknown encoding: " + f4);
            f4 = ("" + f4).toLowerCase(), m4 = true;
        }
    };
    me.prototype.toJSON = function() {
      return { type: "Buffer", data: Array.prototype.slice.call(this._arr || this, 0) };
    };
    function Dw(t2, e22, r2) {
      return e22 === 0 && r2 === t2.length ? q02.fromByteArray(t2) : q02.fromByteArray(t2.slice(e22, r2));
    }
    function zd(t2, e22, r2) {
      r2 = Math.min(t2.length, r2);
      let o2 = [], f4 = e22;
      for (;f4 < r2; ) {
        let p32 = t2[f4], m4 = null, y32 = p32 > 239 ? 4 : p32 > 223 ? 3 : p32 > 191 ? 2 : 1;
        if (f4 + y32 <= r2) {
          let M3, x32, S3, E3;
          switch (y32) {
            case 1:
              p32 < 128 && (m4 = p32);
              break;
            case 2:
              M3 = t2[f4 + 1], (M3 & 192) === 128 && (E3 = (p32 & 31) << 6 | M3 & 63, E3 > 127 && (m4 = E3));
              break;
            case 3:
              M3 = t2[f4 + 1], x32 = t2[f4 + 2], (M3 & 192) === 128 && (x32 & 192) === 128 && (E3 = (p32 & 15) << 12 | (M3 & 63) << 6 | x32 & 63, E3 > 2047 && (E3 < 55296 || E3 > 57343) && (m4 = E3));
              break;
            case 4:
              M3 = t2[f4 + 1], x32 = t2[f4 + 2], S3 = t2[f4 + 3], (M3 & 192) === 128 && (x32 & 192) === 128 && (S3 & 192) === 128 && (E3 = (p32 & 15) << 18 | (M3 & 63) << 12 | (x32 & 63) << 6 | S3 & 63, E3 > 65535 && E3 < 1114112 && (m4 = E3));
          }
        }
        m4 === null ? (m4 = 65533, y32 = 1) : m4 > 65535 && (m4 -= 65536, o2.push(m4 >>> 10 & 1023 | 55296), m4 = 56320 | m4 & 1023), o2.push(m4), f4 += y32;
      }
      return Pw(o2);
    }
    var Dd = 4096;
    function Pw(t2) {
      let e22 = t2.length;
      if (e22 <= Dd)
        return String.fromCharCode.apply(String, t2);
      let r2 = "", o2 = 0;
      for (;o2 < e22; )
        r2 += String.fromCharCode.apply(String, t2.slice(o2, o2 += Dd));
      return r2;
    }
    function Cw(t2, e22, r2) {
      let o2 = "";
      r2 = Math.min(t2.length, r2);
      for (let f4 = e22;f4 < r2; ++f4)
        o2 += String.fromCharCode(t2[f4] & 127);
      return o2;
    }
    function Ow(t2, e22, r2) {
      let o2 = "";
      r2 = Math.min(t2.length, r2);
      for (let f4 = e22;f4 < r2; ++f4)
        o2 += String.fromCharCode(t2[f4]);
      return o2;
    }
    function Fw(t2, e22, r2) {
      let o2 = t2.length;
      (!e22 || e22 < 0) && (e22 = 0), (!r2 || r2 < 0 || r2 > o2) && (r2 = o2);
      let f4 = "";
      for (let p32 = e22;p32 < r2; ++p32)
        f4 += Zw[t2[p32]];
      return f4;
    }
    function Uw(t2, e22, r2) {
      let o2 = t2.slice(e22, r2), f4 = "";
      for (let p32 = 0;p32 < o2.length - 1; p32 += 2)
        f4 += String.fromCharCode(o2[p32] + o2[p32 + 1] * 256);
      return f4;
    }
    me.prototype.slice = function(e22, r2) {
      let o2 = this.length;
      e22 = ~~e22, r2 = r2 === undefined ? o2 : ~~r2, e22 < 0 ? (e22 += o2, e22 < 0 && (e22 = 0)) : e22 > o2 && (e22 = o2), r2 < 0 ? (r2 += o2, r2 < 0 && (r2 = 0)) : r2 > o2 && (r2 = o2), r2 < e22 && (r2 = e22);
      let f4 = this.subarray(e22, r2);
      return Object.setPrototypeOf(f4, me.prototype), f4;
    };
    function Dt(t2, e22, r2) {
      if (t2 % 1 !== 0 || t2 < 0)
        throw new RangeError("offset is not uint");
      if (t2 + e22 > r2)
        throw new RangeError("Trying to access beyond buffer length");
    }
    me.prototype.readUintLE = me.prototype.readUIntLE = function(e22, r2, o2) {
      e22 = e22 >>> 0, r2 = r2 >>> 0, o2 || Dt(e22, r2, this.length);
      let f4 = this[e22], p32 = 1, m4 = 0;
      for (;++m4 < r2 && (p32 *= 256); )
        f4 += this[e22 + m4] * p32;
      return f4;
    };
    me.prototype.readUintBE = me.prototype.readUIntBE = function(e22, r2, o2) {
      e22 = e22 >>> 0, r2 = r2 >>> 0, o2 || Dt(e22, r2, this.length);
      let f4 = this[e22 + --r2], p32 = 1;
      for (;r2 > 0 && (p32 *= 256); )
        f4 += this[e22 + --r2] * p32;
      return f4;
    };
    me.prototype.readUint8 = me.prototype.readUInt8 = function(e22, r2) {
      return e22 = e22 >>> 0, r2 || Dt(e22, 1, this.length), this[e22];
    };
    me.prototype.readUint16LE = me.prototype.readUInt16LE = function(e22, r2) {
      return e22 = e22 >>> 0, r2 || Dt(e22, 2, this.length), this[e22] | this[e22 + 1] << 8;
    };
    me.prototype.readUint16BE = me.prototype.readUInt16BE = function(e22, r2) {
      return e22 = e22 >>> 0, r2 || Dt(e22, 2, this.length), this[e22] << 8 | this[e22 + 1];
    };
    me.prototype.readUint32LE = me.prototype.readUInt32LE = function(e22, r2) {
      return e22 = e22 >>> 0, r2 || Dt(e22, 4, this.length), (this[e22] | this[e22 + 1] << 8 | this[e22 + 2] << 16) + this[e22 + 3] * 16777216;
    };
    me.prototype.readUint32BE = me.prototype.readUInt32BE = function(e22, r2) {
      return e22 = e22 >>> 0, r2 || Dt(e22, 4, this.length), this[e22] * 16777216 + (this[e22 + 1] << 16 | this[e22 + 2] << 8 | this[e22 + 3]);
    };
    me.prototype.readBigUInt64LE = Ti(function(e22) {
      e22 = e22 >>> 0, Yn(e22, "offset");
      let r2 = this[e22], o2 = this[e22 + 7];
      (r2 === undefined || o2 === undefined) && Vf(e22, this.length - 8);
      let f4 = r2 + this[++e22] * 2 ** 8 + this[++e22] * 2 ** 16 + this[++e22] * 2 ** 24, p32 = this[++e22] + this[++e22] * 2 ** 8 + this[++e22] * 2 ** 16 + o2 * 2 ** 24;
      return BigInt(f4) + (BigInt(p32) << BigInt(32));
    });
    me.prototype.readBigUInt64BE = Ti(function(e22) {
      e22 = e22 >>> 0, Yn(e22, "offset");
      let r2 = this[e22], o2 = this[e22 + 7];
      (r2 === undefined || o2 === undefined) && Vf(e22, this.length - 8);
      let f4 = r2 * 2 ** 24 + this[++e22] * 2 ** 16 + this[++e22] * 2 ** 8 + this[++e22], p32 = this[++e22] * 2 ** 24 + this[++e22] * 2 ** 16 + this[++e22] * 2 ** 8 + o2;
      return (BigInt(f4) << BigInt(32)) + BigInt(p32);
    });
    me.prototype.readIntLE = function(e22, r2, o2) {
      e22 = e22 >>> 0, r2 = r2 >>> 0, o2 || Dt(e22, r2, this.length);
      let f4 = this[e22], p32 = 1, m4 = 0;
      for (;++m4 < r2 && (p32 *= 256); )
        f4 += this[e22 + m4] * p32;
      return p32 *= 128, f4 >= p32 && (f4 -= Math.pow(2, 8 * r2)), f4;
    };
    me.prototype.readIntBE = function(e22, r2, o2) {
      e22 = e22 >>> 0, r2 = r2 >>> 0, o2 || Dt(e22, r2, this.length);
      let f4 = r2, p32 = 1, m4 = this[e22 + --f4];
      for (;f4 > 0 && (p32 *= 256); )
        m4 += this[e22 + --f4] * p32;
      return p32 *= 128, m4 >= p32 && (m4 -= Math.pow(2, 8 * r2)), m4;
    };
    me.prototype.readInt8 = function(e22, r2) {
      return e22 = e22 >>> 0, r2 || Dt(e22, 1, this.length), this[e22] & 128 ? (255 - this[e22] + 1) * -1 : this[e22];
    };
    me.prototype.readInt16LE = function(e22, r2) {
      e22 = e22 >>> 0, r2 || Dt(e22, 2, this.length);
      let o2 = this[e22] | this[e22 + 1] << 8;
      return o2 & 32768 ? o2 | 4294901760 : o2;
    };
    me.prototype.readInt16BE = function(e22, r2) {
      e22 = e22 >>> 0, r2 || Dt(e22, 2, this.length);
      let o2 = this[e22 + 1] | this[e22] << 8;
      return o2 & 32768 ? o2 | 4294901760 : o2;
    };
    me.prototype.readInt32LE = function(e22, r2) {
      return e22 = e22 >>> 0, r2 || Dt(e22, 4, this.length), this[e22] | this[e22 + 1] << 8 | this[e22 + 2] << 16 | this[e22 + 3] << 24;
    };
    me.prototype.readInt32BE = function(e22, r2) {
      return e22 = e22 >>> 0, r2 || Dt(e22, 4, this.length), this[e22] << 24 | this[e22 + 1] << 16 | this[e22 + 2] << 8 | this[e22 + 3];
    };
    me.prototype.readBigInt64LE = Ti(function(e22) {
      e22 = e22 >>> 0, Yn(e22, "offset");
      let r2 = this[e22], o2 = this[e22 + 7];
      (r2 === undefined || o2 === undefined) && Vf(e22, this.length - 8);
      let f4 = this[e22 + 4] + this[e22 + 5] * 2 ** 8 + this[e22 + 6] * 2 ** 16 + (o2 << 24);
      return (BigInt(f4) << BigInt(32)) + BigInt(r2 + this[++e22] * 2 ** 8 + this[++e22] * 2 ** 16 + this[++e22] * 2 ** 24);
    });
    me.prototype.readBigInt64BE = Ti(function(e22) {
      e22 = e22 >>> 0, Yn(e22, "offset");
      let r2 = this[e22], o2 = this[e22 + 7];
      (r2 === undefined || o2 === undefined) && Vf(e22, this.length - 8);
      let f4 = (r2 << 24) + this[++e22] * 2 ** 16 + this[++e22] * 2 ** 8 + this[++e22];
      return (BigInt(f4) << BigInt(32)) + BigInt(this[++e22] * 2 ** 24 + this[++e22] * 2 ** 16 + this[++e22] * 2 ** 8 + o2);
    });
    me.prototype.readFloatLE = function(e22, r2) {
      return e22 = e22 >>> 0, r2 || Dt(e22, 4, this.length), Gn.read(this, e22, true, 23, 4);
    };
    me.prototype.readFloatBE = function(e22, r2) {
      return e22 = e22 >>> 0, r2 || Dt(e22, 4, this.length), Gn.read(this, e22, false, 23, 4);
    };
    me.prototype.readDoubleLE = function(e22, r2) {
      return e22 = e22 >>> 0, r2 || Dt(e22, 8, this.length), Gn.read(this, e22, true, 52, 8);
    };
    me.prototype.readDoubleBE = function(e22, r2) {
      return e22 = e22 >>> 0, r2 || Dt(e22, 8, this.length), Gn.read(this, e22, false, 52, 8);
    };
    function Qt(t2, e22, r2, o2, f4, p32) {
      if (!me.isBuffer(t2))
        throw new TypeError('"buffer" argument must be a Buffer instance');
      if (e22 > f4 || e22 < p32)
        throw new RangeError('"value" argument is out of bounds');
      if (r2 + o2 > t2.length)
        throw new RangeError("Index out of range");
    }
    me.prototype.writeUintLE = me.prototype.writeUIntLE = function(e22, r2, o2, f4) {
      if (e22 = +e22, r2 = r2 >>> 0, o2 = o2 >>> 0, !f4) {
        let y32 = Math.pow(2, 8 * o2) - 1;
        Qt(this, e22, r2, o2, y32, 0);
      }
      let p32 = 1, m4 = 0;
      for (this[r2] = e22 & 255;++m4 < o2 && (p32 *= 256); )
        this[r2 + m4] = e22 / p32 & 255;
      return r2 + o2;
    };
    me.prototype.writeUintBE = me.prototype.writeUIntBE = function(e22, r2, o2, f4) {
      if (e22 = +e22, r2 = r2 >>> 0, o2 = o2 >>> 0, !f4) {
        let y32 = Math.pow(2, 8 * o2) - 1;
        Qt(this, e22, r2, o2, y32, 0);
      }
      let p32 = o2 - 1, m4 = 1;
      for (this[r2 + p32] = e22 & 255;--p32 >= 0 && (m4 *= 256); )
        this[r2 + p32] = e22 / m4 & 255;
      return r2 + o2;
    };
    me.prototype.writeUint8 = me.prototype.writeUInt8 = function(e22, r2, o2) {
      return e22 = +e22, r2 = r2 >>> 0, o2 || Qt(this, e22, r2, 1, 255, 0), this[r2] = e22 & 255, r2 + 1;
    };
    me.prototype.writeUint16LE = me.prototype.writeUInt16LE = function(e22, r2, o2) {
      return e22 = +e22, r2 = r2 >>> 0, o2 || Qt(this, e22, r2, 2, 65535, 0), this[r2] = e22 & 255, this[r2 + 1] = e22 >>> 8, r2 + 2;
    };
    me.prototype.writeUint16BE = me.prototype.writeUInt16BE = function(e22, r2, o2) {
      return e22 = +e22, r2 = r2 >>> 0, o2 || Qt(this, e22, r2, 2, 65535, 0), this[r2] = e22 >>> 8, this[r2 + 1] = e22 & 255, r2 + 2;
    };
    me.prototype.writeUint32LE = me.prototype.writeUInt32LE = function(e22, r2, o2) {
      return e22 = +e22, r2 = r2 >>> 0, o2 || Qt(this, e22, r2, 4, 4294967295, 0), this[r2 + 3] = e22 >>> 24, this[r2 + 2] = e22 >>> 16, this[r2 + 1] = e22 >>> 8, this[r2] = e22 & 255, r2 + 4;
    };
    me.prototype.writeUint32BE = me.prototype.writeUInt32BE = function(e22, r2, o2) {
      return e22 = +e22, r2 = r2 >>> 0, o2 || Qt(this, e22, r2, 4, 4294967295, 0), this[r2] = e22 >>> 24, this[r2 + 1] = e22 >>> 16, this[r2 + 2] = e22 >>> 8, this[r2 + 3] = e22 & 255, r2 + 4;
    };
    function Hd(t2, e22, r2, o2, f4) {
      Vd(e22, o2, f4, t2, r2, 7);
      let p32 = Number(e22 & BigInt(4294967295));
      t2[r2++] = p32, p32 = p32 >> 8, t2[r2++] = p32, p32 = p32 >> 8, t2[r2++] = p32, p32 = p32 >> 8, t2[r2++] = p32;
      let m4 = Number(e22 >> BigInt(32) & BigInt(4294967295));
      return t2[r2++] = m4, m4 = m4 >> 8, t2[r2++] = m4, m4 = m4 >> 8, t2[r2++] = m4, m4 = m4 >> 8, t2[r2++] = m4, r2;
    }
    function Wd(t2, e22, r2, o2, f4) {
      Vd(e22, o2, f4, t2, r2, 7);
      let p32 = Number(e22 & BigInt(4294967295));
      t2[r2 + 7] = p32, p32 = p32 >> 8, t2[r2 + 6] = p32, p32 = p32 >> 8, t2[r2 + 5] = p32, p32 = p32 >> 8, t2[r2 + 4] = p32;
      let m4 = Number(e22 >> BigInt(32) & BigInt(4294967295));
      return t2[r2 + 3] = m4, m4 = m4 >> 8, t2[r2 + 2] = m4, m4 = m4 >> 8, t2[r2 + 1] = m4, m4 = m4 >> 8, t2[r2] = m4, r2 + 8;
    }
    me.prototype.writeBigUInt64LE = Ti(function(e22, r2 = 0) {
      return Hd(this, e22, r2, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    me.prototype.writeBigUInt64BE = Ti(function(e22, r2 = 0) {
      return Wd(this, e22, r2, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    me.prototype.writeIntLE = function(e22, r2, o2, f4) {
      if (e22 = +e22, r2 = r2 >>> 0, !f4) {
        let M3 = Math.pow(2, 8 * o2 - 1);
        Qt(this, e22, r2, o2, M3 - 1, -M3);
      }
      let p32 = 0, m4 = 1, y32 = 0;
      for (this[r2] = e22 & 255;++p32 < o2 && (m4 *= 256); )
        e22 < 0 && y32 === 0 && this[r2 + p32 - 1] !== 0 && (y32 = 1), this[r2 + p32] = (e22 / m4 >> 0) - y32 & 255;
      return r2 + o2;
    };
    me.prototype.writeIntBE = function(e22, r2, o2, f4) {
      if (e22 = +e22, r2 = r2 >>> 0, !f4) {
        let M3 = Math.pow(2, 8 * o2 - 1);
        Qt(this, e22, r2, o2, M3 - 1, -M3);
      }
      let p32 = o2 - 1, m4 = 1, y32 = 0;
      for (this[r2 + p32] = e22 & 255;--p32 >= 0 && (m4 *= 256); )
        e22 < 0 && y32 === 0 && this[r2 + p32 + 1] !== 0 && (y32 = 1), this[r2 + p32] = (e22 / m4 >> 0) - y32 & 255;
      return r2 + o2;
    };
    me.prototype.writeInt8 = function(e22, r2, o2) {
      return e22 = +e22, r2 = r2 >>> 0, o2 || Qt(this, e22, r2, 1, 127, -128), e22 < 0 && (e22 = 255 + e22 + 1), this[r2] = e22 & 255, r2 + 1;
    };
    me.prototype.writeInt16LE = function(e22, r2, o2) {
      return e22 = +e22, r2 = r2 >>> 0, o2 || Qt(this, e22, r2, 2, 32767, -32768), this[r2] = e22 & 255, this[r2 + 1] = e22 >>> 8, r2 + 2;
    };
    me.prototype.writeInt16BE = function(e22, r2, o2) {
      return e22 = +e22, r2 = r2 >>> 0, o2 || Qt(this, e22, r2, 2, 32767, -32768), this[r2] = e22 >>> 8, this[r2 + 1] = e22 & 255, r2 + 2;
    };
    me.prototype.writeInt32LE = function(e22, r2, o2) {
      return e22 = +e22, r2 = r2 >>> 0, o2 || Qt(this, e22, r2, 4, 2147483647, -2147483648), this[r2] = e22 & 255, this[r2 + 1] = e22 >>> 8, this[r2 + 2] = e22 >>> 16, this[r2 + 3] = e22 >>> 24, r2 + 4;
    };
    me.prototype.writeInt32BE = function(e22, r2, o2) {
      return e22 = +e22, r2 = r2 >>> 0, o2 || Qt(this, e22, r2, 4, 2147483647, -2147483648), e22 < 0 && (e22 = 4294967295 + e22 + 1), this[r2] = e22 >>> 24, this[r2 + 1] = e22 >>> 16, this[r2 + 2] = e22 >>> 8, this[r2 + 3] = e22 & 255, r2 + 4;
    };
    me.prototype.writeBigInt64LE = Ti(function(e22, r2 = 0) {
      return Hd(this, e22, r2, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    me.prototype.writeBigInt64BE = Ti(function(e22, r2 = 0) {
      return Wd(this, e22, r2, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    function Kd(t2, e22, r2, o2, f4, p32) {
      if (r2 + o2 > t2.length)
        throw new RangeError("Index out of range");
      if (r2 < 0)
        throw new RangeError("Index out of range");
    }
    function jd(t2, e22, r2, o2, f4) {
      return e22 = +e22, r2 = r2 >>> 0, f4 || Kd(t2, e22, r2, 4, 340282346638528860000000000000000000000, -340282346638528860000000000000000000000), Gn.write(t2, e22, r2, o2, 23, 4), r2 + 4;
    }
    me.prototype.writeFloatLE = function(e22, r2, o2) {
      return jd(this, e22, r2, true, o2);
    };
    me.prototype.writeFloatBE = function(e22, r2, o2) {
      return jd(this, e22, r2, false, o2);
    };
    function Zd(t2, e22, r2, o2, f4) {
      return e22 = +e22, r2 = r2 >>> 0, f4 || Kd(t2, e22, rn.write(t2, e22, r2, o2, 52, 8), r2 + 8;
    }
    me.prototype.writeDoubleLE = function(e22, r2, o2) {
      return Zd(this, e22, r2, true, o2);
    };
    me.prototype.writeDoubleBE = function(e22, r2, o2) {
      return Zd(this, e22, r2, false, o2);
    };
    me.prototype.copy = function(e22, r2, o2, f4) {
      if (!me.isBuffer(e22))
        throw new TypeError("argument should be a Buffer");
      if (o2 || (o2 = 0), !f4 && f4 !== 0 && (f4 = this.length), r2 >= e22.length && (r2 = e22.length), r2 || (r2 = 0), f4 > 0 && f4 < o2 && (f4 = o2), f4 === o2 || e22.length === 0 || this.length === 0)
        return 0;
      if (r2 < 0)
        throw new RangeError("targetStart out of bounds");
      if (o2 < 0 || o2 >= this.length)
        throw new RangeError("Index out of range");
      if (f4 < 0)
        throw new RangeError("sourceEnd out of bounds");
      f4 > this.length && (f4 = this.length), e22.length - r2 < f4 - o2 && (f4 = e22.length - r2 + o2);
      let p32 = f4 - o2;
      return this === e22 && typeof Uint8Array.prototype.copyWithin == "function" ? this.copyWithin(r2, o2, f4) : Uint8Array.prototype.set.call(e22, this.subarray(o2, f4), r2), p32;
    };
    me.prototype.fill = function(e22, r2, o2, f4) {
      if (typeof e22 == "string") {
        if (typeof r2 == "string" ? (f4 = r2, r2 = 0, o2 = this.length) : typeof o2 == "string" && (f4 = o2, o2 = this.length), f4 !== undefined && typeof f4 != "string")
          throw new TypeError("encoding must be a string");
        if (typeof f4 == "string" && !me.isEncoding(f4))
          throw new TypeError("Unknown encoding: " + f4);
        if (e22.length === 1) {
          let m4 = e22.charCodeAt(0);
          (f4 === "utf8" && m4 < 128 || f4 === "latin1") && (e22 = m4);
        }
      } else
        typeof e22 == "number" ? e22 = e22 & 255 : typeof e22 == "boolean" && (e22 = Number(e22));
      if (r2 < 0 || this.length < r2 || this.length < o2)
        throw new RangeError("Out of range index");
      if (o2 <= r2)
        return this;
      r2 = r2 >>> 0, o2 = o2 === undefined ? this.length : o2 >>> 0, e22 || (e22 = 0);
      let p32;
      if (typeof e22 == "number")
        for (p32 = r2;p32 < o2; ++p32)
          this[p32] = e22;
      else {
        let m4 = me.isBuffer(e22) ? e22 : me.from(e22, f4), y32 = m4.length;
        if (y32 === 0)
          throw new TypeError('The value "' + e22 + '" is invalid for argument "value"');
        for (p32 = 0;p32 < o2 - r2; ++p32)
          this[p32 + r2] = m4[p32 % y32];
      }
      return this;
    };
    var $n = {};
    function D02(t2, e22, r2) {
      $n[t2] = class extends r2 {
        constructor() {
          super(), Object.defineProperty(this, "message", { value: e22.apply(this, arguments), writable: true, configurable: true }), this.name = `${this.name} [${t2}]`, this.stack, delete this.name;
        }
        get code() {
          return t2;
        }
        set code(f4) {
          Object.defineProperty(this, "code", { configurable: true, enumerable: true, value: f4, writable: true });
        }
        toString() {
          return `${this.name} [${t2}]: ${this.message}`;
        }
      };
    }
    D02("ERR_BUFFER_OUT_OF_BOUNDS", function(t2) {
      return t2 ? `${t2} is outside of buffer bounds` : "Attempt to access memory outside buffer bounds";
    }, RangeError);
    D02("ERR_INVALID_ARG_TYPE", function(t2, e22) {
      return `The "${t2}" argument must be of type number. Received type ${typeof e22}`;
    }, TypeError);
    D02("ERR_OUT_OF_RANGE", function(t2, e22, r2) {
      let o2 = `The value of "${t2}" is out of range.`, f4 = r2;
      return Number.isInteger(r2) && Math.abs(r2) > 2 ** 32 ? f4 = Pd(String(r2)) : typeof r2 == "bigint" && (f4 = String(r2), (r2 > BigInt(2) ** BigInt(32) || r2 < -(BigInt(2) ** BigInt(32))) && (f4 = Pd(f4)), f4 += "n"), o2 += ` It must be ${e22}. Received ${f4}`, o2;
    }, RangeError);
    function Pd(t2) {
      let e22 = "", r2 = t2.length, o2 = t2[0] === "-" ? 1 : 0;
      for (;r2 >= o2 + 4; r2 -= 3)
        e22 = `_${t2.slice(r2 - 3, r2)}${e22}`;
      return `${t2.slice(0, r2)}${e22}`;
    }
    function zw(t2, e22, r2) {
      Yn(e22, "offset"), (t2[e22] === undefined || t2[e22 + r2] === undefined) && Vf(e22, t2.length - (r2 + 1));
    }
    function Vd(t2, e22, r2, o2, f4, p32) {
      if (t2 > r2 || t2 < e22) {
        let m4 = typeof e22 == "bigint" ? "n" : "", y32;
        throw p32 > 3 ? e22 === 0 || e22 === BigInt(0) ? y32 = `>= 0${m4} and < 2${m4} ** ${(p32 + 1) * 8}${m4}` : y32 = `>= -(2${m4} ** ${(p32 + 1) * 8 - 1}${m4}) and < 2 ** ${(p32 + 1) * 8 - 1}${m4}` : y32 = `>= ${e22}${m4} and <= ${r2}${m4}`, new $n.ERR_OUT_OF_RANGE("value", y32, t2);
      }
      zw(o2, f4, p32);
    }
    function Yn(t2, e22) {
      if (typeof t2 != "number")
        throw new $n.ERR_INVALID_ARG_TYPE(e22, "number", t2);
    }
    function Vf(t2, e22, r2) {
      throw Math.floor(t2) !== t2 ? (Yn(t2, r2), new $n.ERR_OUT_OF_RANGE(r2 || "offset", "an integer", t2)) : e22 < 0 ? new $n.ERR_BUFFER_OUT_OF_BOUNDS : new $n.ERR_OUT_OF_RANGE(r2 || "offset", `>= ${r2 ? 1 : 0} and <= ${e22}`, t2);
    }
    var Hw = /[^+/0-9A-Za-z-_]/g;
    function Ww(t2) {
      if (t2 = t2.split("=")[0], t2 = t2.trim().replace(Hw, ""), t2.length < 2)
        return "";
      for (;t2.length % 4 !== 0; )
        t2 = t2 + "=";
      return t2;
    }
    function k02(t2, e22) {
      e22 = e22 || 1 / 0;
      let r2, o2 = t2.length, f4 = null, p32 = [];
      for (let m4 = 0;m4 < o2; ++m4) {
        if (r2 = t2.charCodeAt(m4), r2 > 55295 && r2 < 57344) {
          if (!f4) {
            if (r2 > 56319) {
              (e22 -= 3) > -1 && p32.push(239, 191, 189);
              continue;
            } else if (m4 + 1 === o2) {
              (e22 -= 3) > -1 && p32.push(239, 191, 189);
              continue;
            }
            f4 = r2;
            continue;
          }
          if (r2 < 56320) {
            (e22 -= 3) > -1 && p32.push(239, 191, 189), f4 = r2;
            continue;
          }
          r2 = (f4 - 55296 << 10 | r2 - 56320) + 65536;
        } else
          f4 && (e22 -= 3) > -1 && p32.push(239, 191, 189);
        if (f4 = null, r2 < 128) {
          if ((e22 -= 1) < 0)
            break;
          p32.push(r2);
        } else if (r2 < 2048) {
          if ((e22 -= 2) < 0)
            break;
          p32.push(r2 >> 6 | 192, r2 & 63 | 128);
        } else if (r2 < 65536) {
          if ((e22 -= 3) < 0)
            break;
          p32.push(r2 >> 12 | 224, r2 >> 6 & 63 | 128, r2 & 63 | 128);
        } else if (r2 < 1114112) {
          if ((e22 -= 4) < 0)
            break;
          p32.push(r2 >> 18 | 240, r2 >> 12 & 63 | 128, r2 >> 6 & 63 | 128, r2 & 63 | 128);
        } else
          throw new Error("Invalid code point");
      }
      return p32;
    }
    function Kw(t2) {
      let e22 = [];
      for (let r2 = 0;r2 < t2.length; ++r2)
        e22.push(t2.charCodeAt(r2) & 255);
      return e22;
    }
    function jw(t2, e22) {
      let r2, o2, f4, p32 = [];
      for (let m4 = 0;m4 < t2.length && !((e22 -= 2) < 0); ++m4)
        r2 = t2.charCodeAt(m4), o2 = r2 >> 8, f4 = r2 % 256, p32.push(f4), p32.push(o2);
      return p32;
    }
    function $d(t2) {
      return q02.toByteArray(Ww(t2));
    }
    function eo(t2, e22, r2, o2) {
      let f4;
      for (f4 = 0;f4 < o2 && !(f4 + r2 >= e22.length || f4 >= t2.length); ++f4)
        e22[f4 + r2] = t2[f4];
      return f4;
    }
    function Zr(t2, e22) {
      return t2 instanceof e22 || t2 != null && t2.constructor != null && t2.constructor.name != null && t2.constructor.name === e22.name;
    }
    function P02(t2) {
      return t2 !== t2;
    }
    var Zw = function() {
      let t2 = "0123456789abcdef", e22 = new Array(256);
      for (let r2 = 0;r2 < 16; ++r2) {
        let o2 = r2 * 16;
        for (let f4 = 0;f4 < 16; ++f4)
          e22[o2 + f4] = t2[r2] + t2[f4];
      }
      return e22;
    }();
    function Ti(t2) {
      return typeof BigInt > "u" ? Vw : t2;
    }
    function Vw() {
      throw new Error("BigInt not supported");
    }
  });
  Te = T3((C02, Yd) => {
    var to = Ut(), Vr = to.Buffer;
    function Gd(t2, e22) {
      for (var r2 in t2)
        e22[r2] = t2[r2];
    }
    Vr.from && Vr.alloc && Vr.allocUnsafe && Vr.allocUnsafeSlow ? Yd.exports = to : (Gd(to, C02), C02.Buffer = an);
    function an(t2, e22, r2) {
      return Vr(t2, e22, r2);
    }
    an.prototype = Object.create(Vr.prototype);
    Gd(Vr, an);
    an.from = function(t2, e22, r2) {
      if (typeof t2 == "number")
        throw new TypeError("Argument must not be a number");
      return Vr(t2, e22, r2);
    };
    an.alloc = function(t2, e22, r2) {
      if (typeof t2 != "number")
        throw new TypeError("Argument must be a number");
      var o2 = Vr(t2);
      return e22 !== undefined ? typeof r2 == "string" ? o2.fill(e22, r2) : o2.fill(e22) : o2.fill(0), o2;
    };
    an.allocUnsafe = function(t2) {
      if (typeof t2 != "number")
        throw new TypeError("Argument must be a number");
      return Vr(t2);
    };
    an.allocUnsafeSlow = function(t2) {
      if (typeof t2 != "number")
        throw new TypeError("Argument must be a number");
      return to.SlowBuffer(t2);
    };
  });
  on = T3((Vq, F02) => {
    var O02 = 65536, $w = 4294967295;
    function Gw() {
      throw new Error(`Secure random number generation is not supported by this browser.
Use Chrome, Firefox or Internet Explorer 11`);
    }
    var Yw = Te().Buffer, ro = global.crypto || global.msCrypto;
    ro && ro.getRandomValues ? F02.exports = Xw : F02.exports = Gw;
    function Xw(t2, e22) {
      if (t2 > $w)
        throw new RangeError("requested too many random bytes");
      var r2 = Yw.allocUnsafe(t2);
      if (t2 > 0)
        if (t2 > O02)
          for (var o2 = 0;o2 < t2; o2 += O02)
            ro.getRandomValues(r2.slice(o2, o2 + O02));
        else
          ro.getRandomValues(r2);
      return typeof e22 == "function" ? process.nextTick(function() {
        e22(null, r2);
      }) : r2;
    }
  });
  Ie = T3(($q, U02) => {
    typeof Object.create == "function" ? U02.exports = function(e22, r2) {
      r2 && (e22.super_ = r2, e22.prototype = Object.create(r2.prototype, { constructor: { value: e22, enumerable: false, writable: true, configurable: true } }));
    } : U02.exports = function(e22, r2) {
      if (r2) {
        e22.super_ = r2;
        var o2 = function() {};
        o2.prototype = r2.prototype, e22.prototype = new o2, e22.prototype.constructor = e22;
      }
    };
  });
  ki = T3((Gq, z02) => {
    var Jn = typeof Reflect == "object" ? Reflect : null, Xd = Jn && typeof Jn.apply == "function" ? Jn.apply : function(e22, r2, o2) {
      return Function.prototype.apply.call(e22, r2, o2);
    }, io;
    Jn && typeof Jn.ownKeys == "function" ? io = Jn.ownKeys : Object.getOwnPropertySymbols ? io = function(e22) {
      return Object.getOwnPropertyNames(e22).concat(Object.getOwnPropertySymbols(e22));
    } : io = function(e22) {
      return Object.getOwnPropertyNames(e22);
    };
    function Jw(t2) {
      console && console.warn && console.warn(t2);
    }
    var Qd = Number.isNaN || function(e22) {
      return e22 !== e22;
    };
    function Fe() {
      Fe.init.call(this);
    }
    z02.exports = Fe;
    z02.exports.once = r6;
    Fe.EventEmitter = Fe;
    Fe.prototype._events = undefined;
    Fe.prototype._eventsCount = 0;
    Fe.prototype._maxListeners = undefined;
    var Jd = 10;
    function no(t2) {
      if (typeof t2 != "function")
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof t2);
    }
    Object.defineProperty(Fe, "defaultMaxListeners", { enumerable: true, get: function() {
      return Jd;
    }, set: function(t2) {
      if (typeof t2 != "number" || t2 < 0 || Qd(t2))
        throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + t2 + ".");
      Jd = t2;
    } });
    Fe.init = function() {
      (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) && (this._events = Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || undefined;
    };
    Fe.prototype.setMaxListeners = function(e22) {
      if (typeof e22 != "number" || e22 < 0 || Qd(e22))
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e22 + ".");
      return this._maxListeners = e22, this;
    };
    function ec(t2) {
      return t2._maxListeners === undefined ? Fe.defaultMaxListeners : t2._maxListeners;
    }
    Fe.prototype.getMaxListeners = function() {
      return ec(this);
    };
    Fe.prototype.emit = function(e22) {
      for (var r2 = [], o2 = 1;o2 < arguments.length; o2++)
        r2.push(arguments[o2]);
      var f4 = e22 === "error", p32 = this._events;
      if (p32 !== undefined)
        f4 = f4 && p32.error === undefined;
      else if (!f4)
        return false;
      if (f4) {
        var m4;
        if (r2.length > 0 && (m4 = r2[0]), m4 instanceof Error)
          throw m4;
        var y32 = new Error("Unhandled error." + (m4 ? " (" + m4.message + ")" : ""));
        throw y32.context = m4, y32;
      }
      var M3 = p32[e22];
      if (M3 === undefined)
        return false;
      if (typeof M3 == "function")
        Xd(M3, this, r2);
      else
        for (var x32 = M3.length, S3 = fc(M3, x32), o2 = 0;o2 < x32; ++o2)
          Xd(S3[o2], this, r2);
      return true;
    };
    function tc(t2, e22, r2, o2) {
      var f4, p32, m4;
      if (no(r2), p32 = t2._events, p32 === undefined ? (p32 = t2._events = Object.create(null), t2._eventsCount = 0) : (p32.newListener !== undefined && (t2.emit("newListener", e22, r2.listener ? r2.listener : r2), p32 = t2._events), m4 = p32[e22]), m4 === undefined)
        m4 = p32[e22] = r2, ++t2._eventsCount;
      else if (typeof m4 == "function" ? m4 = p32[e22] = o2 ? [r2, m4] : [m4, r2] : o2 ? m4.unshift(r2) : m4.push(r2), f4 = ec(t2), f4 > 0 && m4.length > f4 && !m4.warned) {
        m4.warned = true;
        var y32 = new Error("Possible EventEmitter memory leak detected. " + m4.length + " " + String(e22) + " listeners added. Use emitter.setMaxListeners() to increase limit");
        y32.name = "MaxListenersExceededWarning", y32.emitter = t2, y32.type = e22, y32.count = m4.length, Jw(y32);
      }
      return t2;
    }
    Fe.prototype.addListener = function(e22, r2) {
      return tc(this, e22, r2, false);
    };
    Fe.prototype.on = Fe.prototype.addListener;
    Fe.prototype.prependListener = function(e22, r2) {
      return tc(this, e22, r2, true);
    };
    function Qw() {
      if (!this.fired)
        return this.target.removeListener(this.type, this.wrapFn), this.fired = true, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
    }
    function rc(t2, e22, r2) {
      var o2 = { fired: false, wrapFn: undefined, target: t2, type: e22, listener: r2 }, f4 = Qw.bind(o2);
      return f4.listener = r2, o2.wrapFn = f4, f4;
    }
    Fe.prototype.once = function(e22, r2) {
      return no(r2), this.on(e22, rc(this, e22, r2)), this;
    };
    Fe.prototype.prependOnceListener = function(e22, r2) {
      return no(r2), this.prependListener(e22, rc(this, e22, r2)), this;
    };
    Fe.prototype.removeListener = function(e22, r2) {
      var o2, f4, p32, m4, y32;
      if (no(r2), f4 = this._events, f4 === undefined)
        return this;
      if (o2 = f4[e22], o2 === undefined)
        return this;
      if (o2 === r2 || o2.listener === r2)
        --this._eventsCount === 0 ? this._events = Object.create(null) : (delete f4[e22], f4.removeListener && this.emit("removeListener", e22, o2.listener || r2));
      else if (typeof o2 != "function") {
        for (p32 = -1, m4 = o2.length - 1;m4 >= 0; m4--)
          if (o2[m4] === r2 || o2[m4].listener === r2) {
            y32 = o2[m4].listener, p32 = m4;
            break;
          }
        if (p32 < 0)
          return this;
        p32 === 0 ? o2.shift() : e6(o2, p32), o2.length === 1 && (f4[e22] = o2[0]), f4.removeListener !== undefined && this.emit("removeListener", e22, y32 || r2);
      }
      return this;
    };
    Fe.prototype.off = Fe.prototype.removeListener;
    Fe.prototype.removeAllListeners = function(e22) {
      var r2, o2, f4;
      if (o2 = this._events, o2 === undefined)
        return this;
      if (o2.removeListener === undefined)
        return arguments.length === 0 ? (this._events = Object.create(null), this._eventsCount = 0) : o2[e22] !== undefined && (--this._eventsCount === 0 ? this._events = Object.create(null) : delete o2[e22]), this;
      if (arguments.length === 0) {
        var p32 = Object.keys(o2), m4;
        for (f4 = 0;f4 < p32.length; ++f4)
          m4 = p32[f4], m4 !== "removeListener" && this.removeAllListeners(m4);
        return this.removeAllListeners("removeListener"), this._events = Object.create(null), this._eventsCount = 0, this;
      }
      if (r2 = o2[e22], typeof r2 == "function")
        this.removeListener(e22, r2);
      else if (r2 !== undefined)
        for (f4 = r2.length - 1;f4 >= 0; f4--)
          this.removeListener(e22, r2[f4]);
      return this;
    };
    function ic(t2, e22, r2) {
      var o2 = t2._events;
      if (o2 === undefined)
        return [];
      var f4 = o2[e22];
      return f4 === undefined ? [] : typeof f4 == "function" ? r2 ? [f4.listener || f4] : [f4] : r2 ? t6(f4) : fc(f4, f4.length);
    }
    Fe.prototype.listeners = function(e22) {
      return ic(this, e22, true);
    };
    Fe.prototype.rawListeners = function(e22) {
      return ic(this, e22, false);
    };
    Fe.listenerCount = function(t2, e22) {
      return typeof t2.listenerCount == "function" ? t2.listenerCount(e22) : nc.call(t2, e22);
    };
    Fe.prototype.listenerCount = nc;
    function nc(t2) {
      var e22 = this._events;
      if (e22 !== undefined) {
        var r2 = e22[t2];
        if (typeof r2 == "function")
          return 1;
        if (r2 !== undefined)
          return r2.length;
      }
      return 0;
    }
    Fe.prototype.eventNames = function() {
      return this._eventsCount > 0 ? io(this._events) : [];
    };
    function fc(t2, e22) {
      for (var r2 = new Array(e22), o2 = 0;o2 < e22; ++o2)
        r2[o2] = t2[o2];
      return r2;
    }
    function e6(t2, e22) {
      for (;e22 + 1 < t2.length; e22++)
        t2[e22] = t2[e22 + 1];
      t2.pop();
    }
    function t6(t2) {
      for (var e22 = new Array(t2.length), r2 = 0;r2 < e22.length; ++r2)
        e22[r2] = t2[r2].listener || t2[r2];
      return e22;
    }
    function r6(t2, e22) {
      return new Promise(function(r2, o2) {
        function f4(m4) {
          t2.removeListener(e22, p32), o2(m4);
        }
        function p32() {
          typeof t2.removeListener == "function" && t2.removeListener("error", f4), r2([].slice.call(arguments));
        }
        ac(t2, e22, p32, { once: true }), e22 !== "error" && i6(t2, f4, { once: true });
      });
    }
    function i6(t2, e22, r2) {
      typeof t2.on == "function" && ac(t2, "error", e22, r2);
    }
    function ac(t2, e22, r2, o2) {
      if (typeof t2.on == "function")
        o2.once ? t2.once(e22, r2) : t2.on(e22, r2);
      else if (typeof t2.addEventListener == "function")
        t2.addEventListener(e22, function f(p32) {
          o2.once && t2.removeEventListener(e22, f), r2(p32);
        });
      else
        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof t2);
    }
  });
  H02 = T3((Yq, oc) => {
    oc.exports = ki().EventEmitter;
  });
  $f = T3(() => {});
  lc = T3((Qq, uc) => {
    function sc(t2, e22) {
      var r2 = Object.keys(t2);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(t2);
        e22 && (o2 = o2.filter(function(f4) {
          return Object.getOwnPropertyDescriptor(t2, f4).enumerable;
        })), r2.push.apply(r2, o2);
      }
      return r2;
    }
    function n6(t2) {
      for (var e22 = 1;e22 < arguments.length; e22++) {
        var r2 = arguments[e22] != null ? arguments[e22] : {};
        e22 % 2 ? sc(Object(r2), true).forEach(function(o2) {
          f6(t2, o2, r2[o2]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t2, Object.getOwnPropertyDescriptors(r2)) : sc(Object(r2)).forEach(function(o2) {
          Object.defineProperty(t2, o2, Object.getOwnPropertyDescriptor(r2, o2));
        });
      }
      return t2;
    }
    function f6(t2, e22, r2) {
      return e22 in t2 ? Object.defineProperty(t2, e22, { value: r2, enumerable: true, configurable: true, writable: true }) : t2[e22] = r2, t2;
    }
    function a6(t2, e22) {
      if (!(t2 instanceof e22))
        throw new TypeError("Cannot call a class as a function");
    }
    function hc(t2, e22) {
      for (var r2 = 0;r2 < e22.length; r2++) {
        var o2 = e22[r2];
        o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(t2, o2.key, o2);
      }
    }
    function o6(t2, e22, r2) {
      return e22 && hc(t2.prototype, e22), r2 && hc(t2, r2), t2;
    }
    var s6 = Ut(), fo = s6.Buffer, h6 = $f(), W02 = h6.inspect, u6 = W02 && W02.custom || "inspect";
    function l6(t2, e22, r2) {
      fo.prototype.copy.call(t2, e22, r2);
    }
    uc.exports = function() {
      function t2() {
        a6(this, t2), this.head = null, this.tail = null, this.length = 0;
      }
      return o6(t2, [{ key: "push", value: function(r2) {
        var o2 = { data: r2, next: null };
        this.length > 0 ? this.tail.next = o2 : this.head = o2, this.tail = o2, ++this.length;
      } }, { key: "unshift", value: function(r2) {
        var o2 = { data: r2, next: this.head };
        this.length === 0 && (this.tail = o2), this.head = o2, ++this.length;
      } }, { key: "shift", value: function() {
        if (this.length !== 0) {
          var r2 = this.head.data;
          return this.length === 1 ? this.head = this.tail = null : this.head = this.head.next, --this.length, r2;
        }
      } }, { key: "clear", value: function() {
        this.head = this.tail = null, this.length = 0;
      } }, { key: "join", value: function(r2) {
        if (this.length === 0)
          return "";
        for (var o2 = this.head, f4 = "" + o2.data;o2 = o2.next; )
          f4 += r2 + o2.data;
        return f4;
      } }, { key: "concat", value: function(r2) {
        if (this.length === 0)
          return fo.alloc(0);
        for (var o2 = fo.allocUnsafe(r2 >>> 0), f4 = this.head, p32 = 0;f4; )
          l6(f4.data, o2, p32), p32 += f4.data.length, f4 = f4.next;
        return o2;
      } }, { key: "consume", value: function(r2, o2) {
        var f4;
        return r2 < this.head.data.length ? (f4 = this.head.data.slice(0, r2), this.head.data = this.head.data.slice(r2)) : r2 === this.head.data.length ? f4 = this.shift() : f4 = o2 ? this._getString(r2) : this._getBuffer(r2), f4;
      } }, { key: "first", value: function() {
        return this.head.data;
      } }, { key: "_getString", value: function(r2) {
        var o2 = this.head, f4 = 1, p32 = o2.data;
        for (r2 -= p32.length;o2 = o2.next; ) {
          var m4 = o2.data, y32 = r2 > m4.length ? m4.length : r2;
          if (y32 === m4.length ? p32 += m4 : p32 += m4.slice(0, r2), r2 -= y32, r2 === 0) {
            y32 === m4.length ? (++f4, o2.next ? this.head = o2.next : this.head = this.tail = null) : (this.head = o2, o2.data = m4.slice(y32));
            break;
          }
          ++f4;
        }
        return this.length -= f4, p32;
      } }, { key: "_getBuffer", value: function(r2) {
        var o2 = fo.allocUnsafe(r2), f4 = this.head, p32 = 1;
        for (f4.data.copy(o2), r2 -= f4.data.length;f4 = f4.next; ) {
          var m4 = f4.data, y32 = r2 > m4.length ? m4.length : r2;
          if (m4.copy(o2, o2.length - r2, 0, y32), r2 -= y32, r2 === 0) {
            y32 === m4.length ? (++p32, f4.next ? this.head = f4.next : this.head = this.tail = null) : (this.head = f4, f4.data = m4.slice(y32));
            break;
          }
          ++p32;
        }
        return this.length -= p32, o2;
      } }, { key: u6, value: function(r2, o2) {
        return W02(this, n6({}, o2, { depth: 0, customInspect: false }));
      } }]), t2;
    }();
  });
  j02 = T3((eI, cc) => {
    function d6(t2, e22) {
      var r2 = this, o2 = this._readableState && this._readableState.destroyed, f4 = this._writableState && this._writableState.destroyed;
      return o2 || f4 ? (e22 ? e22(t2) : t2 && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = true, process.nextTick(K02, this, t2)) : process.nextTick(K02, this, t2)), this) : (this._readableState && (this._readableState.destroyed = true), this._writableState && (this._writableState.destroyed = true), this._destroy(t2 || null, function(p32) {
        !e22 && p32 ? r2._writableState ? r2._writableState.errorEmitted ? process.nextTick(ao, r2) : (r2._writableState.errorEmitted = true, process.nextTick(dc, r2, p32)) : process.nextTick(dc, r2, p32) : e22 ? (process.nextTick(ao, r2), e22(p32)) : process.nextTick(ao, r2);
      }), this);
    }
    function dc(t2, e22) {
      K02(t2, e22), ao(t2);
    }
    function ao(t2) {
      t2._writableState && !t2._writableState.emitClose || t2._readableState && !t2._readableState.emitClose || t2.emit("close");
    }
    function c6() {
      this._readableState && (this._readableState.destroyed = false, this._readableState.reading = false, this._readableState.ended = false, this._readableState.endEmitted = false), this._writableState && (this._writableState.destroyed = false, this._writableState.ended = false, this._writableState.ending = false, this._writableState.finalCalled = false, this._writableState.prefinished = false, this._writableState.finished = false, this._writableState.errorEmitted = false);
    }
    function K02(t2, e22) {
      t2.emit("error", e22);
    }
    function p6(t2, e22) {
      var { _readableState: r2, _writableState: o2 } = t2;
      r2 && r2.autoDestroy || o2 && o2.autoDestroy ? t2.destroy(e22) : t2.emit("error", e22);
    }
    cc.exports = { destroy: d6, undestroy: c6, errorOrDestroy: p6 };
  });
  sn = T3((tI, bc) => {
    function v6(t2, e22) {
      t2.prototype = Object.create(e22.prototype), t2.prototype.constructor = t2, t2.__proto__ = e22;
    }
    var vc = {};
    function dr(t2, e22, r2) {
      r2 || (r2 = Error);
      function o2(p32, m4, y32) {
        return typeof e22 == "string" ? e22 : e22(p32, m4, y32);
      }
      var f4 = function(p32) {
        v6(m4, p32);
        function m4(y32, M3, x32) {
          return p32.call(this, o2(y32, M3, x32)) || this;
        }
        return m4;
      }(r2);
      f4.prototype.name = r2.name, f4.prototype.code = t2, vc[t2] = f4;
    }
    function pc(t2, e22) {
      if (Array.isArray(t2)) {
        var r2 = t2.length;
        return t2 = t2.map(function(o2) {
          return String(o2);
        }), r2 > 2 ? "one of ".concat(e22, " ").concat(t2.slice(0, r2 - 1).join(", "), ", or ") + t2[r2 - 1] : r2 === 2 ? "one of ".concat(e22, " ").concat(t2[0], " or ").concat(t2[1]) : "of ".concat(e22, " ").concat(t2[0]);
      } else
        return "of ".concat(e22, " ").concat(String(t2));
    }
    function b6(t2, e22, r2) {
      return t2.substr(!r2 || r2 < 0 ? 0 : +r2, e22.length) === e22;
    }
    function m6(t2, e22, r2) {
      return (r2 === undefined || r2 > t2.length) && (r2 = t2.length), t2.substring(r2 - e22.length, r2) === e22;
    }
    function g6(t2, e22, r2) {
      return typeof r2 != "number" && (r2 = 0), r2 + e22.length > t2.length ? false : t2.indexOf(e22, r2) !== -1;
    }
    dr("ERR_INVALID_OPT_VALUE", function(t2, e22) {
      return 'The value "' + e22 + '" is invalid for option "' + t2 + '"';
    }, TypeError);
    dr("ERR_INVALID_ARG_TYPE", function(t2, e22, r2) {
      var o2;
      typeof e22 == "string" && b6(e22, "not ") ? (o2 = "must not be", e22 = e22.replace(/^not /, "")) : o2 = "must be";
      var f4;
      if (m6(t2, " argument"))
        f4 = "The ".concat(t2, " ").concat(o2, " ").concat(pc(e22, "type"));
      else {
        var p32 = g6(t2, ".") ? "property" : "argument";
        f4 = 'The "'.concat(t2, '" ').concat(p32, " ").concat(o2, " ").concat(pc(e22, "type"));
      }
      return f4 += ". Received type ".concat(typeof r2), f4;
    }, TypeError);
    dr("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
    dr("ERR_METHOD_NOT_IMPLEMENTED", function(t2) {
      return "The " + t2 + " method is not implemented";
    });
    dr("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
    dr("ERR_STREAM_DESTROYED", function(t2) {
      return "Cannot call " + t2 + " after a stream was destroyed";
    });
    dr("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
    dr("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
    dr("ERR_STREAM_WRITE_AFTER_END", "write after end");
    dr("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
    dr("ERR_UNKNOWN_ENCODING", function(t2) {
      return "Unknown encoding: " + t2;
    }, TypeError);
    dr("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
    bc.exports.codes = vc;
  });
  Z0 = T3((rI, mc) => {
    var y6 = sn().codes.ERR_INVALID_OPT_VALUE;
    function w6(t2, e22, r2) {
      return t2.highWaterMark != null ? t2.highWaterMark : e22 ? t2[r2] : null;
    }
    function M6(t2, e22, r2, o2) {
      var f4 = w6(e22, o2, r2);
      if (f4 != null) {
        if (!(isFinite(f4) && Math.floor(f4) === f4) || f4 < 0) {
          var p32 = o2 ? r2 : "highWaterMark";
          throw new y6(p32, f4);
        }
        return Math.floor(f4);
      }
      return t2.objectMode ? 16 : 16 * 1024;
    }
    mc.exports = { getHighWaterMark: M6 };
  });
  $02 = T3((iI, gc) => {
    gc.exports = _6;
    function _6(t2, e22) {
      if (V02("noDeprecation"))
        return t2;
      var r2 = false;
      function o2() {
        if (!r2) {
          if (V02("throwDeprecation"))
            throw new Error(e22);
          V02("traceDeprecation") ? console.trace(e22) : console.warn(e22), r2 = true;
        }
        return t2.apply(this, arguments);
      }
      return o2;
    }
    function V02(t2) {
      try {
        if (!global.localStorage)
          return false;
      } catch {
        return false;
      }
      var e22 = global.localStorage[t2];
      return e22 == null ? false : String(e22).toLowerCase() === "true";
    }
  });
  X02 = T3((nI, Sc) => {
    Sc.exports = st;
    function wc(t2) {
      var e22 = this;
      this.next = null, this.entry = null, this.finish = function() {
        G6(e22, t2);
      };
    }
    var Qn;
    st.WritableState = Yf;
    var x6 = { deprecate: $02() }, Mc = H02(), so = Ut().Buffer, S6 = global.Uint8Array || function() {};
    function E6(t2) {
      return so.from(t2);
    }
    function A6(t2) {
      return so.isBuffer(t2) || t2 instanceof S6;
    }
    var Y02 = j02(), R6 = Z0(), B6 = R6.getHighWaterMark, Li = sn().codes, q6 = Li.ERR_INVALID_ARG_TYPE, I6 = Li.ERR_METHOD_NOT_IMPLEMENTED, T6 = Li.ERR_MULTIPLE_CALLBACK, k6 = Li.ERR_STREAM_CANNOT_PIPE, L6 = Li.ERR_STREAM_DESTROYED, N6 = Li.ERR_STREAM_NULL_VALUES, D6 = Li.ERR_STREAM_WRITE_AFTER_END, P6 = Li.ERR_UNKNOWN_ENCODING, ef = Y02.errorOrDestroy;
    Ie()(st, Mc);
    function C6() {}
    function Yf(t2, e22, r2) {
      Qn = Qn || hn(), t2 = t2 || {}, typeof r2 != "boolean" && (r2 = e22 instanceof Qn), this.objectMode = !!t2.objectMode, r2 && (this.objectMode = this.objectMode || !!t2.writableObjectMode), this.highWaterMark = B6(this, t2, "writableHighWaterMark", r2), this.finalCalled = false, this.needDrain = false, this.ending = false, this.ended = false, this.finished = false, this.destroyed = false;
      var o2 = t2.decodeStrings === false;
      this.decodeStrings = !o2, this.defaultEncoding = t2.defaultEncoding || "utf8", this.length = 0, this.writing = false, this.corked = 0, this.sync = true, this.bufferProcessing = false, this.onwrite = function(f4) {
        K6(e22, f4);
      }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = false, this.errorEmitted = false, this.emitClose = t2.emitClose !== false, this.autoDestroy = !!t2.autoDestroy, this.bufferedRequestCount = 0, this.corkedRequestsFree = new wc(this);
    }
    Yf.prototype.getBuffer = function() {
      for (var e22 = this.bufferedRequest, r2 = [];e22; )
        r2.push(e22), e22 = e22.next;
      return r2;
    };
    (function() {
      try {
        Object.defineProperty(Yf.prototype, "buffer", { get: x6.deprecate(function() {
          return this.getBuffer();
        }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003") });
      } catch {}
    })();
    var oo;
    typeof Symbol == "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] == "function" ? (oo = Function.prototype[Symbol.hasInstance], Object.defineProperty(st, Symbol.hasInstance, { value: function(e22) {
      return oo.call(this, e22) ? true : this !== st ? false : e22 && e22._writableState instanceof Yf;
    } })) : oo = function(e22) {
      return e22 instanceof this;
    };
    function st(t2) {
      Qn = Qn || hn();
      var e22 = this instanceof Qn;
      if (!e22 && !oo.call(st, this))
        return new st(t2);
      this._writableState = new Yf(t2, this, e22), this.writable = true, t2 && (typeof t2.write == "function" && (this._write = t2.write), typeof t2.writev == "function" && (this._writev = t2.writev), typeof t2.destroy == "function" && (this._destroy = t2.destroy), typeof t2.final == "function" && (this._final = t2.final)), Mc.call(this);
    }
    st.prototype.pipe = function() {
      ef(this, new k6);
    };
    function O6(t2, e22) {
      var r2 = new D6;
      ef(t2, r2), process.nextTick(e22, r2);
    }
    function F6(t2, e22, r2, o2) {
      var f4;
      return r2 === null ? f4 = new N6 : typeof r2 != "string" && !e22.objectMode && (f4 = new q6("chunk", ["string", "Buffer"], r2)), f4 ? (ef(t2, f4), process.nextTick(o2, f4), false) : true;
    }
    st.prototype.write = function(t2, e22, r2) {
      var o2 = this._writableState, f4 = false, p32 = !o2.objectMode && A6(t2);
      return p32 && !so.isBuffer(t2) && (t2 = E6(t2)), typeof e22 == "function" && (r2 = e22, e22 = null), p32 ? e22 = "buffer" : e22 || (e22 = o2.defaultEncoding), typeof r2 != "function" && (r2 = C6), o2.ending ? O6(this, r2) : (p32 || F6(this, o2, t2, r2)) && (o2.pendingcb++, f4 = z6(this, o2, p32, t2, e22, r2)), f4;
    };
    st.prototype.cork = function() {
      this._writableState.corked++;
    };
    st.prototype.uncork = function() {
      var t2 = this._writableState;
      t2.corked && (t2.corked--, !t2.writing && !t2.corked && !t2.bufferProcessing && t2.bufferedRequest && _c(this, t2));
    };
    st.prototype.setDefaultEncoding = function(e22) {
      if (typeof e22 == "string" && (e22 = e22.toLowerCase()), !(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((e22 + "").toLowerCase()) > -1))
        throw new P6(e22);
      return this._writableState.defaultEncoding = e22, this;
    };
    Object.defineProperty(st.prototype, "writableBuffer", { enumerable: false, get: function() {
      return this._writableState && this._writableState.getBuffer();
    } });
    function U6(t2, e22, r2) {
      return !t2.objectMode && t2.decodeStrings !== false && typeof e22 == "string" && (e22 = so.from(e22, r2)), e22;
    }
    Object.defineProperty(st.prototype, "writableHighWaterMark", { enumerable: false, get: function() {
      return this._writableState.highWaterMark;
    } });
    function z6(t2, e22, r2, o2, f4, p32) {
      if (!r2) {
        var m4 = U6(e22, o2, f4);
        o2 !== m4 && (r2 = true, f4 = "buffer", o2 = m4);
      }
      var y32 = e22.objectMode ? 1 : o2.length;
      e22.length += y32;
      var M3 = e22.length < e22.highWaterMark;
      if (M3 || (e22.needDrain = true), e22.writing || e22.corked) {
        var x32 = e22.lastBufferedRequest;
        e22.lastBufferedRequest = { chunk: o2, encoding: f4, isBuf: r2, callback: p32, next: null }, x32 ? x32.next = e22.lastBufferedRequest : e22.bufferedRequest = e22.lastBufferedRequest, e22.bufferedRequestCount += 1;
      } else
        G02(t2, e22, false, y32, o2, f4, p32);
      return M3;
    }
    function G02(t2, e22, r2, o2, f4, p32, m4) {
      e22.writelen = o2, e22.writecb = m4, e22.writing = true, e22.sync = true, e22.destroyed ? e22.onwrite(new L6("write")) : r2 ? t2._writev(f4, e22.onwrite) : t2._write(f4, p32, e22.onwrite), e22.sync = false;
    }
    function H6(t2, e22, r2, o2, f4) {
      --e22.pendingcb, r2 ? (process.nextTick(f4, o2), process.nextTick(Gf, t2, e22), t2._writableState.errorEmitted = true, ef(t2, o2)) : (f4(o2), t2._writableState.errorEmitted = true, ef(t2, o2), Gf(t2, e22));
    }
    function W6(t2) {
      t2.writing = false, t2.writecb = null, t2.length -= t2.writelen, t2.writelen = 0;
    }
    function K6(t2, e22) {
      var r2 = t2._writableState, o2 = r2.sync, f4 = r2.writecb;
      if (typeof f4 != "function")
        throw new T6;
      if (W6(r2), e22)
        H6(t2, r2, o2, e22, f4);
      else {
        var p32 = xc(r2) || t2.destroyed;
        !p32 && !r2.corked && !r2.bufferProcessing && r2.bufferedRequest && _c(t2, r2), o2 ? process.nextTick(yc, t2, r2, p32, f4) : yc(t2, r2, p32, f4);
      }
    }
    function yc(t2, e22, r2, o2) {
      r2 || j6(t2, e22), e22.pendingcb--, o2(), Gf(t2, e22);
    }
    function j6(t2, e22) {
      e22.length === 0 && e22.needDrain && (e22.needDrain = false, t2.emit("drain"));
    }
    function _c(t2, e22) {
      e22.bufferProcessing = true;
      var r2 = e22.bufferedRequest;
      if (t2._writev && r2 && r2.next) {
        var o2 = e22.bufferedRequestCount, f4 = new Array(o2), p32 = e22.corkedRequestsFree;
        p32.entry = r2;
        for (var m4 = 0, y32 = true;r2; )
          f4[m4] = r2, r2.isBuf || (y32 = false), r2 = r2.next, m4 += 1;
        f4.allBuffers = y32, G02(t2, e22, true, e22.length, f4, "", p32.finish), e22.pendingcb++, e22.lastBufferedRequest = null, p32.next ? (e22.corkedRequestsFree = p32.next, p32.next = null) : e22.corkedRequestsFree = new wc(e22), e22.bufferedRequestCount = 0;
      } else {
        for (;r2; ) {
          var { chunk: M3, encoding: x32, callback: S3 } = r2, E3 = e22.objectMode ? 1 : M3.length;
          if (G02(t2, e22, false, E3, M3, x32, S3), r2 = r2.next, e22.bufferedRequestCount--, e22.writing)
            break;
        }
        r2 === null && (e22.lastBufferedRequest = null);
      }
      e22.bufferedRequest = r2, e22.bufferProcessing = false;
    }
    st.prototype._write = function(t2, e22, r2) {
      r2(new I6("_write()"));
    };
    st.prototype._writev = null;
    st.prototype.end = function(t2, e22, r2) {
      var o2 = this._writableState;
      return typeof t2 == "function" ? (r2 = t2, t2 = null, e22 = null) : typeof e22 == "function" && (r2 = e22, e22 = null), t2 != null && this.write(t2, e22), o2.corked && (o2.corked = 1, this.uncork()), o2.ending || $6(this, o2, r2), this;
    };
    Object.defineProperty(st.prototype, "writableLength", { enumerable: false, get: function() {
      return this._writableState.length;
    } });
    function xc(t2) {
      return t2.ending && t2.length === 0 && t2.bufferedRequest === null && !t2.finished && !t2.writing;
    }
    function Z6(t2, e22) {
      t2._final(function(r2) {
        e22.pendingcb--, r2 && ef(t2, r2), e22.prefinished = true, t2.emit("prefinish"), Gf(t2, e22);
      });
    }
    function V6(t2, e22) {
      !e22.prefinished && !e22.finalCalled && (typeof t2._final == "function" && !e22.destroyed ? (e22.pendingcb++, e22.finalCalled = true, process.nextTick(Z6, t2, e22)) : (e22.prefinished = true, t2.emit("prefinish")));
    }
    function Gf(t2, e22) {
      var r2 = xc(e22);
      if (r2 && (V6(t2, e22), e22.pendingcb === 0 && (e22.finished = true, t2.emit("finish"), e22.autoDestroy))) {
        var o2 = t2._readableState;
        (!o2 || o2.autoDestroy && o2.endEmitted) && t2.destroy();
      }
      return r2;
    }
    function $6(t2, e22, r2) {
      e22.ending = true, Gf(t2, e22), r2 && (e22.finished ? process.nextTick(r2) : t2.once("finish", r2)), e22.ended = true, t2.writable = false;
    }
    function G6(t2, e22, r2) {
      var o2 = t2.entry;
      for (t2.entry = null;o2; ) {
        var f4 = o2.callback;
        e22.pendingcb--, f4(r2), o2 = o2.next;
      }
      e22.corkedRequestsFree.next = t2;
    }
    Object.defineProperty(st.prototype, "destroyed", { enumerable: false, get: function() {
      return this._writableState === undefined ? false : this._writableState.destroyed;
    }, set: function(e22) {
      !this._writableState || (this._writableState.destroyed = e22);
    } });
    st.prototype.destroy = Y02.destroy;
    st.prototype._undestroy = Y02.undestroy;
    st.prototype._destroy = function(t2, e22) {
      e22(t2);
    };
  });
  hn = T3((fI, Ac) => {
    var Y6 = Object.keys || function(t2) {
      var e22 = [];
      for (var r2 in t2)
        e22.push(r2);
      return e22;
    };
    Ac.exports = $r;
    var Ec = eh(), Q0 = X02();
    Ie()($r, Ec);
    for (J02 = Y6(Q0.prototype), ho = 0;ho < J02.length; ho++)
      uo = J02[ho], $r.prototype[uo] || ($r.prototype[uo] = Q0.prototype[uo]);
    var J02, uo, ho;
    function $r(t2) {
      if (!(this instanceof $r))
        return new $r(t2);
      Ec.call(this, t2), Q0.call(this, t2), this.allowHalfOpen = true, t2 && (t2.readable === false && (this.readable = false), t2.writable === false && (this.writable = false), t2.allowHalfOpen === false && (this.allowHalfOpen = false, this.once("end", X6)));
    }
    Object.defineProperty($r.prototype, "writableHighWaterMark", { enumerable: false, get: function() {
      return this._writableState.highWaterMark;
    } });
    Object.defineProperty($r.prototype, "writableBuffer", { enumerable: false, get: function() {
      return this._writableState && this._writableState.getBuffer();
    } });
    Object.defineProperty($r.prototype, "writableLength", { enumerable: false, get: function() {
      return this._writableState.length;
    } });
    function X6() {
      this._writableState.ended || process.nextTick(J6, this);
    }
    function J6(t2) {
      t2.end();
    }
    Object.defineProperty($r.prototype, "destroyed", { enumerable: false, get: function() {
      return this._readableState === undefined || this._writableState === undefined ? false : this._readableState.destroyed && this._writableState.destroyed;
    }, set: function(e22) {
      this._readableState === undefined || this._writableState === undefined || (this._readableState.destroyed = e22, this._writableState.destroyed = e22);
    } });
  });
  lo = T3((Bc) => {
    var rh = Te().Buffer, Rc = rh.isEncoding || function(t2) {
      switch (t2 = "" + t2, t2 && t2.toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
          return true;
        default:
          return false;
      }
    };
    function Q6(t2) {
      if (!t2)
        return "utf8";
      for (var e22;; )
        switch (t2) {
          case "utf8":
          case "utf-8":
            return "utf8";
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return "utf16le";
          case "latin1":
          case "binary":
            return "latin1";
          case "base64":
          case "ascii":
          case "hex":
            return t2;
          default:
            if (e22)
              return;
            t2 = ("" + t2).toLowerCase(), e22 = true;
        }
    }
    function eM(t2) {
      var e22 = Q6(t2);
      if (typeof e22 != "string" && (rh.isEncoding === Rc || !Rc(t2)))
        throw new Error("Unknown encoding: " + t2);
      return e22 || t2;
    }
    Bc.StringDecoder = Xf;
    function Xf(t2) {
      this.encoding = eM(t2);
      var e22;
      switch (this.encoding) {
        case "utf16le":
          this.text = aM, this.end = oM, e22 = 4;
          break;
        case "utf8":
          this.fillLast = iM, e22 = 4;
          break;
        case "base64":
          this.text = sM, this.end = hM, e22 = 3;
          break;
        default:
          this.write = uM, this.end = lM;
          return;
      }
      this.lastNeed = 0, this.lastTotal = 0, this.lastChar = rh.allocUnsafe(e22);
    }
    Xf.prototype.write = function(t2) {
      if (t2.length === 0)
        return "";
      var e22, r2;
      if (this.lastNeed) {
        if (e22 = this.fillLast(t2), e22 === undefined)
          return "";
        r2 = this.lastNeed, this.lastNeed = 0;
      } else
        r2 = 0;
      return r2 < t2.length ? e22 ? e22 + this.text(t2, r2) : this.text(t2, r2) : e22 || "";
    };
    Xf.prototype.end = fM;
    Xf.prototype.text = nM;
    Xf.prototype.fillLast = function(t2) {
      if (this.lastNeed <= t2.length)
        return t2.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
      t2.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, t2.length), this.lastNeed -= t2.length;
    };
    function th(t2) {
      return t2 <= 127 ? 0 : t2 >> 5 === 6 ? 2 : t2 >> 4 === 14 ? 3 : t2 >> 3 === 30 ? 4 : t2 >> 6 === 2 ? -1 : -2;
    }
    function tM(t2, e22, r2) {
      var o2 = e22.length - 1;
      if (o2 < r2)
        return 0;
      var f4 = th(e22[o2]);
      return f4 >= 0 ? (f4 > 0 && (t2.lastNeed = f4 - 1), f4) : --o2 < r2 || f4 === -2 ? 0 : (f4 = th(e22[o2]), f4 >= 0 ? (f4 > 0 && (t2.lastNeed = f4 - 2), f4) : --o2 < r2 || f4 === -2 ? 0 : (f4 = th(e22[o2]), f4 >= 0 ? (f4 > 0 && (f4 === 2 ? f4 = 0 : t2.lastNeed = f4 - 3), f4) : 0));
    }
    function rM(t2, e22, r2) {
      if ((e22[0] & 192) !== 128)
        return t2.lastNeed = 0, "�";
      if (t2.lastNeed > 1 && e22.length > 1) {
        if ((e22[1] & 192) !== 128)
          return t2.lastNeed = 1, "�";
        if (t2.lastNeed > 2 && e22.length > 2 && (e22[2] & 192) !== 128)
          return t2.lastNeed = 2, "�";
      }
    }
    function iM(t2) {
      var e22 = this.lastTotal - this.lastNeed, r2 = rM(this, t2, e22);
      if (r2 !== undefined)
        return r2;
      if (this.lastNeed <= t2.length)
        return t2.copy(this.lastChar, e22, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
      t2.copy(this.lastChar, e22, 0, t2.length), this.lastNeed -= t2.length;
    }
    function nM(t2, e22) {
      var r2 = tM(this, t2, e22);
      if (!this.lastNeed)
        return t2.toString("utf8", e22);
      this.lastTotal = r2;
      var o2 = t2.length - (r2 - this.lastNeed);
      return t2.copy(this.lastChar, 0, o2), t2.toString("utf8", e22, o2);
    }
    function fM(t2) {
      var e22 = t2 && t2.length ? this.write(t2) : "";
      return this.lastNeed ? e22 + "�" : e22;
    }
    function aM(t2, e22) {
      if ((t2.length - e22) % 2 === 0) {
        var r2 = t2.toString("utf16le", e22);
        if (r2) {
          var o2 = r2.charCodeAt(r2.length - 1);
          if (o2 >= 55296 && o2 <= 56319)
            return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = t2[t2.length - 2], this.lastChar[1] = t2[t2.length - 1], r2.slice(0, -1);
        }
        return r2;
      }
      return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = t2[t2.length - 1], t2.toString("utf16le", e22, t2.length - 1);
    }
    function oM(t2) {
      var e22 = t2 && t2.length ? this.write(t2) : "";
      if (this.lastNeed) {
        var r2 = this.lastTotal - this.lastNeed;
        return e22 + this.lastChar.toString("utf16le", 0, r2);
      }
      return e22;
    }
    function sM(t2, e22) {
      var r2 = (t2.length - e22) % 3;
      return r2 === 0 ? t2.toString("base64", e22) : (this.lastNeed = 3 - r2, this.lastTotal = 3, r2 === 1 ? this.lastChar[0] = t2[t2.length - 1] : (this.lastChar[0] = t2[t2.length - 2], this.lastChar[1] = t2[t2.length - 1]), t2.toString("base64", e22, t2.length - r2));
    }
    function hM(t2) {
      var e22 = t2 && t2.length ? this.write(t2) : "";
      return this.lastNeed ? e22 + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : e22;
    }
    function uM(t2) {
      return t2.toString(this.encoding);
    }
    function lM(t2) {
      return t2 && t2.length ? this.write(t2) : "";
    }
  });
  Jf = {};
  Xa(Jf, { StringDecoder: () => co.StringDecoder, default: () => co.StringDecoder });
  Qf = A02(() => {
    co = rn(lo());
  });
  po = T3((oI, Tc) => {
    var qc = sn().codes.ERR_STREAM_PREMATURE_CLOSE;
    function dM(t2) {
      var e22 = false;
      return function() {
        if (!e22) {
          e22 = true;
          for (var r2 = arguments.length, o2 = new Array(r2), f4 = 0;f4 < r2; f4++)
            o2[f4] = arguments[f4];
          t2.apply(this, o2);
        }
      };
    }
    function cM() {}
    function pM(t2) {
      return t2.setHeader && typeof t2.abort == "function";
    }
    function Ic(t2, e22, r2) {
      if (typeof e22 == "function")
        return Ic(t2, null, e22);
      e22 || (e22 = {}), r2 = dM(r2 || cM);
      var o2 = e22.readable || e22.readable !== false && t2.readable, f4 = e22.writable || e22.writable !== false && t2.writable, p32 = function() {
        t2.writable || y32();
      }, m4 = t2._writableState && t2._writableState.finished, y32 = function() {
        f4 = false, m4 = true, o2 || r2.call(t2);
      }, M3 = t2._readableState && t2._readableState.endEmitted, x32 = function() {
        o2 = false, M3 = true, f4 || r2.call(t2);
      }, S3 = function(L32) {
        r2.call(t2, L32);
      }, E3 = function() {
        var L32;
        if (o2 && !M3)
          return (!t2._readableState || !t2._readableState.ended) && (L32 = new qc), r2.call(t2, L32);
        if (f4 && !m4)
          return (!t2._writableState || !t2._writableState.ended) && (L32 = new qc), r2.call(t2, L32);
      }, B5 = function() {
        t2.req.on("finish", y32);
      };
      return pM(t2) ? (t2.on("complete", y32), t2.on("abort", E3), t2.req ? B5() : t2.on("request", B5)) : f4 && !t2._writableState && (t2.on("end", p32), t2.on("close", p32)), t2.on("end", x32), t2.on("finish", y32), e22.error !== false && t2.on("error", S3), t2.on("close", E3), function() {
        t2.removeListener("complete", y32), t2.removeListener("abort", E3), t2.removeListener("request", B5), t2.req && t2.req.removeListener("finish", y32), t2.removeListener("end", p32), t2.removeListener("close", p32), t2.removeListener("finish", y32), t2.removeListener("end", x32), t2.removeListener("error", S3), t2.removeListener("close", E3);
      };
    }
    Tc.exports = Ic;
  });
  Lc = T3((sI, kc) => {
    var vo;
    function Ni(t2, e22, r2) {
      return e22 in t2 ? Object.defineProperty(t2, e22, { value: r2, enumerable: true, configurable: true, writable: true }) : t2[e22] = r2, t2;
    }
    var vM = po(), Di = Symbol("lastResolve"), un = Symbol("lastReject"), ea = Symbol("error"), bo = Symbol("ended"), ln = Symbol("lastPromise"), ih = Symbol("handlePromise"), dn = Symbol("stream");
    function Pi(t2, e22) {
      return { value: t2, done: e22 };
    }
    function bM(t2) {
      var e22 = t2[Di];
      if (e22 !== null) {
        var r2 = t2[dn].read();
        r2 !== null && (t2[ln] = null, t2[Di] = null, t2[un] = null, e22(Pi(r2, false)));
      }
    }
    function mM(t2) {
      process.nextTick(bM, t2);
    }
    function gM(t2, e22) {
      return function(r2, o2) {
        t2.then(function() {
          if (e22[bo]) {
            r2(Pi(undefined, true));
            return;
          }
          e22[ih](r2, o2);
        }, o2);
      };
    }
    var yM = Object.getPrototypeOf(function() {}), wM = Object.setPrototypeOf((vo = { get stream() {
      return this[dn];
    }, next: function() {
      var e22 = this, r2 = this[ea];
      if (r2 !== null)
        return Promise.reject(r2);
      if (this[bo])
        return Promise.resolve(Pi(undefined, true));
      if (this[dn].destroyed)
        return new Promise(function(m4, y32) {
          process.nextTick(function() {
            e22[ea] ? y32(e22[ea]) : m4(Pi(undefined, true));
          });
        });
      var o2 = this[ln], f4;
      if (o2)
        f4 = new Promise(gM(o2, this));
      else {
        var p32 = this[dn].read();
        if (p32 !== null)
          return Promise.resolve(Pi(p32, false));
        f4 = new Promise(this[ih]);
      }
      return this[ln] = f4, f4;
    } }, Ni(vo, Symbol.asyncIterator, function() {
      return this;
    }), Ni(vo, "return", function() {
      var e22 = this;
      return new Promise(function(r2, o2) {
        e22[dn].destroy(null, function(f4) {
          if (f4) {
            o2(f4);
            return;
          }
          r2(Pi(undefined, true));
        });
      });
    }), vo), yM), MM = function(e22) {
      var r2, o2 = Object.create(wM, (r2 = {}, Ni(r2, dn, { value: e22, writable: true }), Ni(r2, Di, { value: null, writable: true }), Ni(r2, un, { value: null, writable: true }), Ni(r2, ea, { value: null, writable: true }), Ni(r2, bo, { value: e22._readableState.endEmitted, writable: true }), Ni(r2, ih, { value: function(p32, m4) {
        var y32 = o2[dn].read();
        y32 ? (o2[ln] = null, o2[Di] = null, o2[un] = null, p32(Pi(y32, false))) : (o2[Di] = p32, o2[un] = m4);
      }, writable: true }), r2));
      return o2[ln] = null, vM(e22, function(f4) {
        if (f4 && f4.code !== "ERR_STREAM_PREMATURE_CLOSE") {
          var p32 = o2[un];
          p32 !== null && (o2[ln] = null, o2[Di] = null, o2[un] = null, p32(f4)), o2[ea] = f4;
          return;
        }
        var m4 = o2[Di];
        m4 !== null && (o2[ln] = null, o2[Di] = null, o2[un] = null, m4(Pi(undefined, true))), o2[bo] = true;
      }), e22.on("readable", mM.bind(null, o2)), o2;
    };
    kc.exports = MM;
  });
  Dc = T3((hI, Nc) => {
    Nc.exports = function() {
      throw new Error("Readable.from is not available in the browser");
    };
  });
  eh = T3((lI, jc) => {
    jc.exports = Ce;
    var tf;
    Ce.ReadableState = Fc;
    var uI = ki().EventEmitter, Oc = function(e22, r2) {
      return e22.listeners(r2).length;
    }, ra = H02(), mo = Ut().Buffer, _M = global.Uint8Array || function() {};
    function xM(t2) {
      return mo.from(t2);
    }
    function SM(t2) {
      return mo.isBuffer(t2) || t2 instanceof _M;
    }
    var nh = $f(), Ne;
    nh && nh.debuglog ? Ne = nh.debuglog("stream") : Ne = function() {};
    var EM = lc(), lh = j02(), AM = Z0(), RM = AM.getHighWaterMark, go = sn().codes, BM = go.ERR_INVALID_ARG_TYPE, qM = go.ERR_STREAM_PUSH_AFTER_EOF, IM = go.ERR_METHOD_NOT_IMPLEMENTED, TM = go.ERR_STREAM_UNSHIFT_AFTER_END_EVENT, rf, fh, ah;
    Ie()(Ce, ra);
    var ta = lh.errorOrDestroy, oh = ["error", "close", "destroy", "pause", "resume"];
    function kM(t2, e22, r2) {
      if (typeof t2.prependListener == "function")
        return t2.prependListener(e22, r2);
      !t2._events || !t2._events[e22] ? t2.on(e22, r2) : Array.isArray(t2._events[e22]) ? t2._events[e22].unshift(r2) : t2._events[e22] = [r2, t2._events[e22]];
    }
    function Fc(t2, e22, r2) {
      tf = tf || hn(), t2 = t2 || {}, typeof r2 != "boolean" && (r2 = e22 instanceof tf), this.objectMode = !!t2.objectMode, r2 && (this.objectMode = this.objectMode || !!t2.readableObjectMode), this.highWaterMark = RM(this, t2, "readableHighWaterMark", r2), this.buffer = new EM, this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = false, this.endEmitted = false, this.reading = false, this.sync = true, this.needReadable = false, this.emittedReadable = false, this.readableListening = false, this.resumeScheduled = false, this.paused = true, this.emitClose = t2.emitClose !== false, this.autoDestroy = !!t2.autoDestroy, this.destroyed = false, this.defaultEncoding = t2.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = false, this.decoder = null, this.encoding = null, t2.encoding && (rf || (rf = (Qf(), ur(Jf)).StringDecoder), this.decoder = new rf(t2.encoding), this.encoding = t2.encoding);
    }
    function Ce(t2) {
      if (tf = tf || hn(), !(this instanceof Ce))
        return new Ce(t2);
      var e22 = this instanceof tf;
      this._readableState = new Fc(t2, this, e22), this.readable = true, t2 && (typeof t2.read == "function" && (this._read = t2.read), typeof t2.destroy == "function" && (this._destroy = t2.destroy)), ra.call(this);
    }
    Object.defineProperty(Ce.prototype, "destroyed", { enumerable: false, get: function() {
      return this._readableState === undefined ? false : this._readableState.destroyed;
    }, set: function(e22) {
      !this._readableState || (this._readableState.destroyed = e22);
    } });
    Ce.prototype.destroy = lh.destroy;
    Ce.prototype._undestroy = lh.undestroy;
    Ce.prototype._destroy = function(t2, e22) {
      e22(t2);
    };
    Ce.prototype.push = function(t2, e22) {
      var r2 = this._readableState, o2;
      return r2.objectMode ? o2 = true : typeof t2 == "string" && (e22 = e22 || r2.defaultEncoding, e22 !== r2.encoding && (t2 = mo.from(t2, e22), e22 = ""), o2 = true), Uc(this, t2, e22, false, o2);
    };
    Ce.prototype.unshift = function(t2) {
      return Uc(this, t2, null, true, false);
    };
    function Uc(t2, e22, r2, o2, f4) {
      Ne("readableAddChunk", e22);
      var p32 = t2._readableState;
      if (e22 === null)
        p32.reading = false, DM(t2, p32);
      else {
        var m4;
        if (f4 || (m4 = LM(p32, e22)), m4)
          ta(t2, m4);
        else if (p32.objectMode || e22 && e22.length > 0)
          if (typeof e22 != "string" && !p32.objectMode && Object.getPrototypeOf(e22) !== mo.prototype && (e22 = xM(e22)), o2)
            p32.endEmitted ? ta(t2, new TM) : sh(t2, p32, e22, true);
          else if (p32.ended)
            ta(t2, new qM);
          else {
            if (p32.destroyed)
              return false;
            p32.reading = false, p32.decoder && !r2 ? (e22 = p32.decoder.write(e22), p32.objectMode || e22.length !== 0 ? sh(t2, p32, e22, false) : uh(t2, p32)) : sh(t2, p32, e22, false);
          }
        else
          o2 || (p32.reading = false, uh(t2, p32));
      }
      return !p32.ended && (p32.length < p32.highWaterMark || p32.length === 0);
    }
    function sh(t2, e22, r2, o2) {
      e22.flowing && e22.length === 0 && !e22.sync ? (e22.awaitDrain = 0, t2.emit("data", r2)) : (e22.length += e22.objectMode ? 1 : r2.length, o2 ? e22.buffer.unshift(r2) : e22.buffer.push(r2), e22.needReadable && yo(t2)), uh(t2, e22);
    }
    function LM(t2, e22) {
      var r2;
      return !SM(e22) && typeof e22 != "string" && e22 !== undefined && !t2.objectMode && (r2 = new BM("chunk", ["string", "Buffer", "Uint8Array"], e22)), r2;
    }
    Ce.prototype.isPaused = function() {
      return this._readableState.flowing === false;
    };
    Ce.prototype.setEncoding = function(t2) {
      rf || (rf = (Qf(), ur(Jf)).StringDecoder);
      var e22 = new rf(t2);
      this._readableState.decoder = e22, this._readableState.encoding = this._readableState.decoder.encoding;
      for (var r2 = this._readableState.buffer.head, o2 = "";r2 !== null; )
        o2 += e22.write(r2.data), r2 = r2.next;
      return this._readableState.buffer.clear(), o2 !== "" && this._readableState.buffer.push(o2), this._readableState.length = o2.length, this;
    };
    var Pc = 1073741824;
    function NM(t2) {
      return t2 >= Pc ? t2 = Pc : (t2--, t2 |= t2 >>> 1, t2 |= t2 >>> 2, t2 |= t2 >>> 4, t2 |= t2 >>> 8, t2 |= t2 >>> 16, t2++), t2;
    }
    function Cc(t2, e22) {
      return t2 <= 0 || e22.length === 0 && e22.ended ? 0 : e22.objectMode ? 1 : t2 !== t2 ? e22.flowing && e22.length ? e22.buffer.head.data.length : e22.length : (t2 > e22.highWaterMark && (e22.highWaterMark = NM(t2)), t2 <= e22.length ? t2 : e22.ended ? e22.length : (e22.needReadable = true, 0));
    }
    Ce.prototype.read = function(t2) {
      Ne("read", t2), t2 = parseInt(t2, 10);
      var e22 = this._readableState, r2 = t2;
      if (t2 !== 0 && (e22.emittedReadable = false), t2 === 0 && e22.needReadable && ((e22.highWaterMark !== 0 ? e22.length >= e22.highWaterMark : e22.length > 0) || e22.ended))
        return Ne("read: emitReadable", e22.length, e22.ended), e22.length === 0 && e22.ended ? hh(this) : yo(this), null;
      if (t2 = Cc(t2, e22), t2 === 0 && e22.ended)
        return e22.length === 0 && hh(this), null;
      var o2 = e22.needReadable;
      Ne("need readable", o2), (e22.length === 0 || e22.length - t2 < e22.highWaterMark) && (o2 = true, Ne("length less than watermark", o2)), e22.ended || e22.reading ? (o2 = false, Ne("reading or ended", o2)) : o2 && (Ne("do read"), e22.reading = true, e22.sync = true, e22.length === 0 && (e22.needReadable = true), this._read(e22.highWaterMark), e22.sync = false, e22.reading || (t2 = Cc(r2, e22)));
      var f4;
      return t2 > 0 ? f4 = Wc(t2, e22) : f4 = null, f4 === null ? (e22.needReadable = e22.length <= e22.highWaterMark, t2 = 0) : (e22.length -= t2, e22.awaitDrain = 0), e22.length === 0 && (e22.ended || (e22.needReadable = true), r2 !== t2 && e22.ended && hh(this)), f4 !== null && this.emit("data", f4), f4;
    };
    function DM(t2, e22) {
      if (Ne("onEofChunk"), !e22.ended) {
        if (e22.decoder) {
          var r2 = e22.decoder.end();
          r2 && r2.length && (e22.buffer.push(r2), e22.length += e22.objectMode ? 1 : r2.length);
        }
        e22.ended = true, e22.sync ? yo(t2) : (e22.needReadable = false, e22.emittedReadable || (e22.emittedReadable = true, zc(t2)));
      }
    }
    function yo(t2) {
      var e22 = t2._readableState;
      Ne("emitReadable", e22.needReadable, e22.emittedReadable), e22.needReadable = false, e22.emittedReadable || (Ne("emitReadable", e22.flowing), e22.emittedReadable = true, process.nextTick(zc, t2));
    }
    function zc(t2) {
      var e22 = t2._readableState;
      Ne("emitReadable_", e22.destroyed, e22.length, e22.ended), !e22.destroyed && (e22.length || e22.ended) && (t2.emit("readable"), e22.emittedReadable = false), e22.needReadable = !e22.flowing && !e22.ended && e22.length <= e22.highWaterMark, dh(t2);
    }
    function uh(t2, e22) {
      e22.readingMore || (e22.readingMore = true, process.nextTick(PM, t2, e22));
    }
    function PM(t2, e22) {
      for (;!e22.reading && !e22.ended && (e22.length < e22.highWaterMark || e22.flowing && e22.length === 0); ) {
        var r2 = e22.length;
        if (Ne("maybeReadMore read 0"), t2.read(0), r2 === e22.length)
          break;
      }
      e22.readingMore = false;
    }
    Ce.prototype._read = function(t2) {
      ta(this, new IM("_read()"));
    };
    Ce.prototype.pipe = function(t2, e22) {
      var r2 = this, o2 = this._readableState;
      switch (o2.pipesCount) {
        case 0:
          o2.pipes = t2;
          break;
        case 1:
          o2.pipes = [o2.pipes, t2];
          break;
        default:
          o2.pipes.push(t2);
          break;
      }
      o2.pipesCount += 1, Ne("pipe count=%d opts=%j", o2.pipesCount, e22);
      var f4 = (!e22 || e22.end !== false) && t2 !== process.stdout && t2 !== process.stderr, p32 = f4 ? y32 : ge;
      o2.endEmitted ? process.nextTick(p32) : r2.once("end", p32), t2.on("unpipe", m4);
      function m4(_e, N3) {
        Ne("onunpipe"), _e === r2 && N3 && N3.hasUnpiped === false && (N3.hasUnpiped = true, S3());
      }
      function y32() {
        Ne("onend"), t2.end();
      }
      var M3 = CM(r2);
      t2.on("drain", M3);
      var x32 = false;
      function S3() {
        Ne("cleanup"), t2.removeListener("close", q2), t2.removeListener("finish", L32), t2.removeListener("drain", M3), t2.removeListener("error", B5), t2.removeListener("unpipe", m4), r2.removeListener("end", y32), r2.removeListener("end", ge), r2.removeListener("data", E3), x32 = true, o2.awaitDrain && (!t2._writableState || t2._writableState.needDrain) && M3();
      }
      r2.on("data", E3);
      function E3(_e) {
        Ne("ondata");
        var N3 = t2.write(_e);
        Ne("dest.write", N3), N3 === false && ((o2.pipesCount === 1 && o2.pipes === t2 || o2.pipesCount > 1 && Kc(o2.pipes, t2) !== -1) && !x32 && (Ne("false write response, pause", o2.awaitDrain), o2.awaitDrain++), r2.pause());
      }
      function B5(_e) {
        Ne("onerror", _e), ge(), t2.removeListener("error", B5), Oc(t2, "error") === 0 && ta(t2, _e);
      }
      kM(t2, "error", B5);
      function q2() {
        t2.removeListener("finish", L32), ge();
      }
      t2.once("close", q2);
      function L32() {
        Ne("onfinish"), t2.removeListener("close", q2), ge();
      }
      t2.once("finish", L32);
      function ge() {
        Ne("unpipe"), r2.unpipe(t2);
      }
      return t2.emit("pipe", r2), o2.flowing || (Ne("pipe resume"), r2.resume()), t2;
    };
    function CM(t2) {
      return function() {
        var r2 = t2._readableState;
        Ne("pipeOnDrain", r2.awaitDrain), r2.awaitDrain && r2.awaitDrain--, r2.awaitDrain === 0 && Oc(t2, "data") && (r2.flowing = true, dh(t2));
      };
    }
    Ce.prototype.unpipe = function(t2) {
      var e22 = this._readableState, r2 = { hasUnpiped: false };
      if (e22.pipesCount === 0)
        return this;
      if (e22.pipesCount === 1)
        return t2 && t2 !== e22.pipes ? this : (t2 || (t2 = e22.pipes), e22.pipes = null, e22.pipesCount = 0, e22.flowing = false, t2 && t2.emit("unpipe", this, r2), this);
      if (!t2) {
        var { pipes: o2, pipesCount: f4 } = e22;
        e22.pipes = null, e22.pipesCount = 0, e22.flowing = false;
        for (var p32 = 0;p32 < f4; p32++)
          o2[p32].emit("unpipe", this, { hasUnpiped: false });
        return this;
      }
      var m4 = Kc(e22.pipes, t2);
      return m4 === -1 ? this : (e22.pipes.splice(m4, 1), e22.pipesCount -= 1, e22.pipesCount === 1 && (e22.pipes = e22.pipes[0]), t2.emit("unpipe", this, r2), this);
    };
    Ce.prototype.on = function(t2, e22) {
      var r2 = ra.prototype.on.call(this, t2, e22), o2 = this._readableState;
      return t2 === "data" ? (o2.readableListening = this.listenerCount("readable") > 0, o2.flowing !== false && this.resume()) : t2 === "readable" && !o2.endEmitted && !o2.readableListening && (o2.readableListening = o2.needReadable = true, o2.flowing = false, o2.emittedReadable = false, Ne("on readable", o2.length, o2.reading), o2.length ? yo(this) : o2.reading || process.nextTick(OM, this)), r2;
    };
    Ce.prototype.addListener = Ce.prototype.on;
    Ce.prototype.removeListener = function(t2, e22) {
      var r2 = ra.prototype.removeListener.call(this, t2, e22);
      return t2 === "readable" && process.nextTick(Hc, this), r2;
    };
    Ce.prototype.removeAllListeners = function(t2) {
      var e22 = ra.prototype.removeAllListeners.apply(this, arguments);
      return (t2 === "readable" || t2 === undefined) && process.nextTick(Hc, this), e22;
    };
    function Hc(t2) {
      var e22 = t2._readableState;
      e22.readableListening = t2.listenerCount("readable") > 0, e22.resumeScheduled && !e22.paused ? e22.flowing = true : t2.listenerCount("data") > 0 && t2.resume();
    }
    function OM(t2) {
      Ne("readable nexttick read 0"), t2.read(0);
    }
    Ce.prototype.resume = function() {
      var t2 = this._readableState;
      return t2.flowing || (Ne("resume"), t2.flowing = !t2.readableListening, FM(this, t2)), t2.paused = false, this;
    };
    function FM(t2, e22) {
      e22.resumeScheduled || (e22.resumeScheduled = true, process.nextTick(UM, t2, e22));
    }
    function UM(t2, e22) {
      Ne("resume", e22.reading), e22.reading || t2.read(0), e22.resumeScheduled = false, t2.emit("resume"), dh(t2), e22.flowing && !e22.reading && t2.read(0);
    }
    Ce.prototype.pause = function() {
      return Ne("call pause flowing=%j", this._readableState.flowing), this._readableState.flowing !== false && (Ne("pause"), this._readableState.flowing = false, this.emit("pause")), this._readableState.paused = true, this;
    };
    function dh(t2) {
      var e22 = t2._readableState;
      for (Ne("flow", e22.flowing);e22.flowing && t2.read() !== null; )
        ;
    }
    Ce.prototype.wrap = function(t2) {
      var e22 = this, r2 = this._readableState, o2 = false;
      t2.on("end", function() {
        if (Ne("wrapped end"), r2.decoder && !r2.ended) {
          var m4 = r2.decoder.end();
          m4 && m4.length && e22.push(m4);
        }
        e22.push(null);
      }), t2.on("data", function(m4) {
        if (Ne("wrapped data"), r2.decoder && (m4 = r2.decoder.write(m4)), !(r2.objectMode && m4 == null) && !(!r2.objectMode && (!m4 || !m4.length))) {
          var y32 = e22.push(m4);
          y32 || (o2 = true, t2.pause());
        }
      });
      for (var f4 in t2)
        this[f4] === undefined && typeof t2[f4] == "function" && (this[f4] = function(y32) {
          return function() {
            return t2[y32].apply(t2, arguments);
          };
        }(f4));
      for (var p32 = 0;p32 < oh.length; p32++)
        t2.on(oh[p32], this.emit.bind(this, oh[p32]));
      return this._read = function(m4) {
        Ne("wrapped _read", m4), o2 && (o2 = false, t2.resume());
      }, this;
    };
    typeof Symbol == "function" && (Ce.prototype[Symbol.asyncIterator] = function() {
      return fh === undefined && (fh = Lc()), fh(this);
    });
    Object.defineProperty(Ce.prototype, "readableHighWaterMark", { enumerable: false, get: function() {
      return this._readableState.highWaterMark;
    } });
    Object.defineProperty(Ce.prototype, "readableBuffer", { enumerable: false, get: function() {
      return this._readableState && this._readableState.buffer;
    } });
    Object.defineProperty(Ce.prototype, "readableFlowing", { enumerable: false, get: function() {
      return this._readableState.flowing;
    }, set: function(e22) {
      this._readableState && (this._readableState.flowing = e22);
    } });
    Ce._fromList = Wc;
    Object.defineProperty(Ce.prototype, "readableLength", { enumerable: false, get: function() {
      return this._readableState.length;
    } });
    function Wc(t2, e22) {
      if (e22.length === 0)
        return null;
      var r2;
      return e22.objectMode ? r2 = e22.buffer.shift() : !t2 || t2 >= e22.length ? (e22.decoder ? r2 = e22.buffer.join("") : e22.buffer.length === 1 ? r2 = e22.buffer.first() : r2 = e22.buffer.concat(e22.length), e22.buffer.clear()) : r2 = e22.buffer.consume(t2, e22.decoder), r2;
    }
    function hh(t2) {
      var e22 = t2._readableState;
      Ne("endReadable", e22.endEmitted), e22.endEmitted || (e22.ended = true, process.nextTick(zM, e22, t2));
    }
    function zM(t2, e22) {
      if (Ne("endReadableNT", t2.endEmitted, t2.length), !t2.endEmitted && t2.length === 0 && (t2.endEmitted = true, e22.readable = false, e22.emit("end"), t2.autoDestroy)) {
        var r2 = e22._writableState;
        (!r2 || r2.autoDestroy && r2.finished) && e22.destroy();
      }
    }
    typeof Symbol == "function" && (Ce.from = function(t2, e22) {
      return ah === undefined && (ah = Dc()), ah(Ce, t2, e22);
    });
    function Kc(t2, e22) {
      for (var r2 = 0, o2 = t2.length;r2 < o2; r2++)
        if (t2[r2] === e22)
          return r2;
      return -1;
    }
  });
  ch = T3((dI, Vc) => {
    Vc.exports = di;
    var wo = sn().codes, HM = wo.ERR_METHOD_NOT_IMPLEMENTED, WM = wo.ERR_MULTIPLE_CALLBACK, KM = wo.ERR_TRANSFORM_ALREADY_TRANSFORMING, jM = wo.ERR_TRANSFORM_WITH_LENGTH_0, Mo = hn();
    Ie()(di, Mo);
    function ZM(t2, e22) {
      var r2 = this._transformState;
      r2.transforming = false;
      var o2 = r2.writecb;
      if (o2 === null)
        return this.emit("error", new WM);
      r2.writechunk = null, r2.writecb = null, e22 != null && this.push(e22), o2(t2);
      var f4 = this._readableState;
      f4.reading = false, (f4.needReadable || f4.length < f4.highWaterMark) && this._read(f4.highWaterMark);
    }
    function di(t2) {
      if (!(this instanceof di))
        return new di(t2);
      Mo.call(this, t2), this._transformState = { afterTransform: ZM.bind(this), needTransform: false, transforming: false, writecb: null, writechunk: null, writeencoding: null }, this._readableState.needReadable = true, this._readableState.sync = false, t2 && (typeof t2.transform == "function" && (this._transform = t2.transform), typeof t2.flush == "function" && (this._flush = t2.flush)), this.on("prefinish", VM);
    }
    function VM() {
      var t2 = this;
      typeof this._flush == "function" && !this._readableState.destroyed ? this._flush(function(e22, r2) {
        Zc(t2, e22, r2);
      }) : Zc(this, null, null);
    }
    di.prototype.push = function(t2, e22) {
      return this._transformState.needTransform = false, Mo.prototype.push.call(this, t2, e22);
    };
    di.prototype._transform = function(t2, e22, r2) {
      r2(new HM("_transform()"));
    };
    di.prototype._write = function(t2, e22, r2) {
      var o2 = this._transformState;
      if (o2.writecb = r2, o2.writechunk = t2, o2.writeencoding = e22, !o2.transforming) {
        var f4 = this._readableState;
        (o2.needTransform || f4.needReadable || f4.length < f4.highWaterMark) && this._read(f4.highWaterMark);
      }
    };
    di.prototype._read = function(t2) {
      var e22 = this._transformState;
      e22.writechunk !== null && !e22.transforming ? (e22.transforming = true, this._transform(e22.writechunk, e22.writeencoding, e22.afterTransform)) : e22.needTransform = true;
    };
    di.prototype._destroy = function(t2, e22) {
      Mo.prototype._destroy.call(this, t2, function(r2) {
        e22(r2);
      });
    };
    function Zc(t2, e22, r2) {
      if (e22)
        return t2.emit("error", e22);
      if (r2 != null && t2.push(r2), t2._writableState.length)
        throw new jM;
      if (t2._transformState.transforming)
        throw new KM;
      return t2.push(null);
    }
  });
  Yc = T3((cI, Gc) => {
    Gc.exports = ia;
    var $c = ch();
    Ie()(ia, $c);
    function ia(t2) {
      if (!(this instanceof ia))
        return new ia(t2);
      $c.call(this, t2);
    }
    ia.prototype._transform = function(t2, e22, r2) {
      r2(null, t2);
    };
  });
  tp = T3((pI, ep) => {
    var ph;
    function $M(t2) {
      var e22 = false;
      return function() {
        e22 || (e22 = true, t2.apply(undefined, arguments));
      };
    }
    var Qc = sn().codes, GM = Qc.ERR_MISSING_ARGS, YM = Qc.ERR_STREAM_DESTROYED;
    function Xc(t2) {
      if (t2)
        throw t2;
    }
    function XM(t2) {
      return t2.setHeader && typeof t2.abort == "function";
    }
    function JM(t2, e22, r2, o2) {
      o2 = $M(o2);
      var f4 = false;
      t2.on("close", function() {
        f4 = true;
      }), ph === undefined && (ph = po()), ph(t2, { readable: e22, writable: r2 }, function(m4) {
        if (m4)
          return o2(m4);
        f4 = true, o2();
      });
      var p32 = false;
      return function(m4) {
        if (!f4 && !p32) {
          if (p32 = true, XM(t2))
            return t2.abort();
          if (typeof t2.destroy == "function")
            return t2.destroy();
          o2(m4 || new YM("pipe"));
        }
      };
    }
    function Jc(t2) {
      t2();
    }
    function QM(t2, e22) {
      return t2.pipe(e22);
    }
    function e4(t2) {
      return !t2.length || typeof t2[t2.length - 1] != "function" ? Xc : t2.pop();
    }
    function t4() {
      for (var t2 = arguments.length, e22 = new Array(t2), r2 = 0;r2 < t2; r2++)
        e22[r2] = arguments[r2];
      var o2 = e4(e22);
      if (Array.isArray(e22[0]) && (e22 = e22[0]), e22.length < 2)
        throw new GM("streams");
      var f4, p32 = e22.map(function(m4, y32) {
        var M3 = y32 < e22.length - 1, x32 = y32 > 0;
        return JM(m4, M3, x32, function(S3) {
          f4 || (f4 = S3), S3 && p32.forEach(Jc), !M3 && (p32.forEach(Jc), o2(f4));
        });
      });
      return e22.reduce(QM);
    }
    ep.exports = t4;
  });
  ip = T3((cr, rp) => {
    cr = rp.exports = eh();
    cr.Stream = cr;
    cr.Readable = cr;
    cr.Writable = X02();
    cr.Duplex = hn();
    cr.Transform = ch();
    cr.PassThrough = Yc();
    cr.finished = po();
    cr.pipeline = tp();
  });
  vh = T3((vI, fp) => {
    var _o = Te().Buffer, np = ip().Transform, r4 = Ie();
    function i4(t2, e22) {
      if (!_o.isBuffer(t2) && typeof t2 != "string")
        throw new TypeError(e22 + " must be a string or a buffer");
    }
    function Ci(t2) {
      np.call(this), this._block = _o.allocUnsafe(t2), this._blockSize = t2, this._blockOffset = 0, this._length = [0, 0, 0, 0], this._finalized = false;
    }
    r4(Ci, np);
    Ci.prototype._transform = function(t2, e22, r2) {
      var o2 = null;
      try {
        this.update(t2, e22);
      } catch (f4) {
        o2 = f4;
      }
      r2(o2);
    };
    Ci.prototype._flush = function(t2) {
      var e22 = null;
      try {
        this.push(this.digest());
      } catch (r2) {
        e22 = r2;
      }
      t2(e22);
    };
    Ci.prototype.update = function(t2, e22) {
      if (i4(t2, "Data"), this._finalized)
        throw new Error("Digest already called");
      _o.isBuffer(t2) || (t2 = _o.from(t2, e22));
      for (var r2 = this._block, o2 = 0;this._blockOffset + t2.length - o2 >= this._blockSize; ) {
        for (var f4 = this._blockOffset;f4 < this._blockSize; )
          r2[f4++] = t2[o2++];
        this._update(), this._blockOffset = 0;
      }
      for (;o2 < t2.length; )
        r2[this._blockOffset++] = t2[o2++];
      for (var p32 = 0, m4 = t2.length * 8;m4 > 0; ++p32)
        this._length[p32] += m4, m4 = this._length[p32] / 4294967296 | 0, m4 > 0 && (this._length[p32] -= 4294967296 * m4);
      return this;
    };
    Ci.prototype._update = function() {
      throw new Error("_update is not implemented");
    };
    Ci.prototype.digest = function(t2) {
      if (this._finalized)
        throw new Error("Digest already called");
      this._finalized = true;
      var e22 = this._digest();
      t2 !== undefined && (e22 = e22.toString(t2)), this._block.fill(0), this._blockOffset = 0;
      for (var r2 = 0;r2 < 4; ++r2)
        this._length[r2] = 0;
      return e22;
    };
    Ci.prototype._digest = function() {
      throw new Error("_digest is not implemented");
    };
    fp.exports = Ci;
  });
  Eo = T3((bI, op) => {
    var n4 = Ie(), ap = vh(), f4 = Te().Buffer, a4 = new Array(16);
    function xo() {
      ap.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878;
    }
    n4(xo, ap);
    xo.prototype._update = function() {
      for (var t2 = a4, e22 = 0;e22 < 16; ++e22)
        t2[e22] = this._block.readInt32LE(e22 * 4);
      var r2 = this._a, o2 = this._b, f5 = this._c, p32 = this._d;
      r2 = jt(r2, o2, f5, p32, t2[0], 3614090360, 7), p32 = jt(p32, r2, o2, f5, t2[1], 3905402710, 12), f5 = jt(f5, p32, r2, o2, t2[2], 606105819, 17), o2 = jt(o2, f5, p32, r2, t2[3], 3250441966, 22), r2 = jt(r2, o2, f5, p32, t2[4], 4118548399, 7), p32 = jt(p32, r2, o2, f5, t2[5], 1200080426, 12), f5 = jt(f5, p32, r2, o2, t2[6], 2821735955, 17), o2 = jt(o2, f5, p32, r2, t2[7], 4249261313, 22), r2 = jt(r2, o2, f5, p32, t2[8], 1770035416, 7), p32 = jt(p32, r2, o2, f5, t2[9], 2336552879, 12), f5 = jt(f5, p32, r2, o2, t2[10], 4294925233, 17), o2 = jt(o2, f5, p32, r2, t2[11], 2304563134, 22), r2 = jt(r2, o2, f5, p32, t2[12], 1804603682, 7), p32 = jt(p32, r2, o2, f5, t2[13], 4254626195, 12), f5 = jt(f5, p32, r2, o2, t2[14], 2792965006, 17), o2 = jt(o2, f5, p32, r2, t2[15], 1236535329, 22), r2 = Zt(r2, o2, f5, p32, t2[1], 4129170786, 5), p32 = Zt(p32, r2, o2, f5, t2[6], 3225465664, 9), f5 = Zt(f5, p32, r2, o2, t2[11], 643717713, 14), o2 = Zt(o2, f5, p32, r2, t2[0], 3921069994, 20), r2 = Zt(r2, o2, f5, p32, t2[5], 3593408605, 5), p32 = Zt(p32, r2, o2, f5, t2[10], 38016083, 9), f5 = Zt(f5, p32, r2, o2, t2[15], 3634488961, 14), o2 = Zt(o2, f5, p32, r2, t2[4], 3889429448, 20), r2 = Zt(r2, o2, f5, p32, t2[9], 568446438, 5), p32 = Zt(p32, r2, o2, f5, t2[14], 3275163606, 9), f5 = Zt(f5, p32, r2, o2, t2[3], 4107603335, 14), o2 = Zt(o2, f5, p32, r2, t2[8], 1163531501, 20), r2 = Zt(r2, o2, f5, p32, t2[13], 2850285829, 5), p32 = Zt(p32, r2, o2, f5, t2[2], 4243563512, 9), f5 = Zt(f5, p32, r2, o2, t2[7], 1735328473, 14), o2 = Zt(o2, f5, p32, r2, t2[12], 2368359562, 20), r2 = Vt(r2, o2, f5, p32, t2[5], 4294588738, 4), p32 = Vt(p32, r2, o2, f5, t2[8], 2272392833, 11), f5 = Vt(f5, p32, r2, o2, t2[11], 1839030562, 16), o2 = Vt(o2, f5, p32, r2, t2[14], 4259657740, 23), r2 = Vt(r2, o2, f5, p32, t2[1], 2763975236, 4), p32 = Vt(p32, r2, o2, f5, t2[4], 1272893353, 11), f5 = Vt(f5, p32, r2, o2, t2[7], 4139469664, 16), o2 = Vt(o2, f5, p32, r2, t2[10], 3200236656, 23), r2 = Vt(r2, o2, f5, p32, t2[13], 681279174, 4), p32 = Vt(p32, r2, o2, f5, t2[0], 3936430074, 11), f5 = Vt(f5, p32, r2, o2, t2[3], 3572445317, 16), o2 = Vt(o2, f5, p32, r2, t2[6], 76029189, 23), r2 = Vt(r2, o2, f5, p32, t2[9], 3654602809, 4), p32 = Vt(p32, r2, o2, f5, t2[12], 3873151461, 11), f5 = Vt(f5, p32, r2, o2, t2[15], 530742520, 16), o2 = Vt(o2, f5, p32, r2, t2[2], 3299628645, 23), r2 = $t(r2, o2, f5, p32, t2[0], 4096336452, 6), p32 = $t(p32, r2, o2, f5, t2[7], 1126891415, 10), f5 = $t(f5, p32, r2, o2, t2[14], 2878612391, 15), o2 = $t(o2, f5, p32, r2, t2[5], 4237533241, 21), r2 = $t(r2, o2, f5, p32, t2[12], 1700485571, 6), p32 = $t(p32, r2, o2, f5, t2[3], 2399980690, 10), f5 = $t(f5, p32, r2, o2, t2[10], 4293915773, 15), o2 = $t(o2, f5, p32, r2, t2[1], 2240044497, 21), r2 = $t(r2, o2, f5, p32, t2[8], 1873313359, 6), p32 = $t(p32, r2, o2, f5, t2[15], 4264355552, 10), f5 = $t(f5, p32, r2, o2, t2[6], 2734768916, 15), o2 = $t(o2, f5, p32, r2, t2[13], 1309151649, 21), r2 = $t(r2, o2, f5, p32, t2[4], 4149444226, 6), p32 = $t(p32, r2, o2, f5, t2[11], 3174756917, 10), f5 = $t(f5, p32, r2, o2, t2[2], 718787259, 15), o2 = $t(o2, f5, p32, r2, t2[9], 3951481745, 21), this._a = this._a + r2 | 0, this._b = this._b + o2 | 0, this._c = this._c + f5 | 0, this._d = this._d + p32 | 0;
    };
    xo.prototype._digest = function() {
      this._block[this._blockOffset++] = 128, this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64), this._update(), this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), this._update();
      var t2 = f4.allocUnsafe(16);
      return t2.writeInt32LE(this._a, 0), t2.writeInt32LE(this._b, 4), t2.writeInt32LE(this._c, 8), t2.writeInt32LE(this._d, 12), t2;
    };
    function So(t2, e22) {
      return t2 << e22 | t2 >>> 32 - e22;
    }
    function jt(t2, e22, r2, o2, f5, p32, m4) {
      return So(t2 + (e22 & r2 | ~e22 & o2) + f5 + p32 | 0, m4) + e22 | 0;
    }
    function Zt(t2, e22, r2, o2, f5, p32, m4) {
      return So(t2 + (e22 & o2 | r2 & ~o2) + f5 + p32 | 0, m4) + e22 | 0;
    }
    function Vt(t2, e22, r2, o2, f5, p32, m4) {
      return So(t2 + (e22 ^ r2 ^ o2) + f5 + p32 | 0, m4) + e22 | 0;
    }
    function $t(t2, e22, r2, o2, f5, p32, m4) {
      return So(t2 + (r2 ^ (e22 | ~o2)) + f5 + p32 | 0, m4) + e22 | 0;
    }
    op.exports = xo;
  });
  Ro = T3((mI, pp) => {
    var bh = Ut().Buffer, o4 = Ie(), cp = vh(), s4 = new Array(16), na = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13], fa = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11], aa = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6], oa = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11], sa = [0, 1518500249, 1859775393, 2400959708, 2840853838], ha = [1352829926, 1548603684, 1836072691, 2053994217, 0];
    function Ao() {
      cp.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520;
    }
    o4(Ao, cp);
    Ao.prototype._update = function() {
      for (var t2 = s4, e22 = 0;e22 < 16; ++e22)
        t2[e22] = this._block.readInt32LE(e22 * 4);
      for (var r2 = this._a | 0, o2 = this._b | 0, f4 = this._c | 0, p32 = this._d | 0, m4 = this._e | 0, y32 = this._a | 0, M3 = this._b | 0, x32 = this._c | 0, S3 = this._d | 0, E3 = this._e | 0, B5 = 0;B5 < 80; B5 += 1) {
        var q2, L32;
        B5 < 16 ? (q2 = sp(r2, o2, f4, p32, m4, t2[na[B5]], sa[0], aa[B5]), L32 = dp(y32, M3, x32, S3, E3, t2[fa[B5]], ha[0], oa[B5])) : B5 < 32 ? (q2 = hp(r2, o2, f4, p32, m4, t2[na[B5]], sa[1], aa[B5]), L32 = lp(y32, M3, x32, S3, E3, t2[fa[B5]], ha[1], oa[B5])) : B5 < 48 ? (q2 = up(r2, o2, f4, p32, m4, t2[na[B5]], sa[2], aa[B5]), L32 = up(y32, M3, x32, S3, E3, t2[fa[B5]], ha[2], oa[B5])) : B5 < 64 ? (q2 = lp(r2, o2, f4, p32, m4, t2[na[B5]], sa[3], aa[B5]), L32 = hp(y32, M3, x32, S3, E3, t2[fa[B5]], ha[3], oa[B5])) : (q2 = dp(r2, o2, f4, p32, m4, t2[na[B5]], sa[4], aa[B5]), L32 = sp(y32, M3, x32, S3, E3, t2[fa[B5]], ha[4], oa[B5])), r2 = m4, m4 = p32, p32 = cn(f4, 10), f4 = o2, o2 = q2, y32 = E3, E3 = S3, S3 = cn(x32, 10), x32 = M3, M3 = L32;
      }
      var ge = this._b + f4 + S3 | 0;
      this._b = this._c + p32 + E3 | 0, this._c = this._d + m4 + y32 | 0, this._d = this._e + r2 + M3 | 0, this._e = this._a + o2 + x32 | 0, this._a = ge;
    };
    Ao.prototype._digest = function() {
      this._block[this._blockOffset++] = 128, this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64), this._update(), this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), this._update();
      var t2 = bh.alloc ? bh.alloc(20) : new bh(20);
      return t2.writeInt32LE(this._a, 0), t2.writeInt32LE(this._b, 4), t2.writeInt32LE(this._c, 8), t2.writeInt32LE(this._d, 12), t2.writeInt32LE(this._e, 16), t2;
    };
    function cn(t2, e22) {
      return t2 << e22 | t2 >>> 32 - e22;
    }
    function sp(t2, e22, r2, o2, f4, p32, m4, y32) {
      return cn(t2 + (e22 ^ r2 ^ o2) + p32 + m4 | 0, y32) + f4 | 0;
    }
    function hp(t2, e22, r2, o2, f4, p32, m4, y32) {
      return cn(t2 + (e22 & r2 | ~e22 & o2) + p32 + m4 | 0, y32) + f4 | 0;
    }
    function up(t2, e22, r2, o2, f4, p32, m4, y32) {
      return cn(t2 + ((e22 | ~r2) ^ o2) + p32 + m4 | 0, y32) + f4 | 0;
    }
    function lp(t2, e22, r2, o2, f4, p32, m4, y32) {
      return cn(t2 + (e22 & o2 | r2 & ~o2) + p32 + m4 | 0, y32) + f4 | 0;
    }
    function dp(t2, e22, r2, o2, f4, p32, m4, y32) {
      return cn(t2 + (e22 ^ (r2 | ~o2)) + p32 + m4 | 0, y32) + f4 | 0;
    }
    pp.exports = Ao;
  });
  pn = T3((gI, bp) => {
    var vp = Te().Buffer;
    function Bo(t2, e22) {
      this._block = vp.alloc(t2), this._finalSize = e22, this._blockSize = t2, this._len = 0;
    }
    Bo.prototype.update = function(t2, e22) {
      typeof t2 == "string" && (e22 = e22 || "utf8", t2 = vp.from(t2, e22));
      for (var r2 = this._block, o2 = this._blockSize, f4 = t2.length, p32 = this._len, m4 = 0;m4 < f4; ) {
        for (var y32 = p32 % o2, M3 = Math.min(f4 - m4, o2 - y32), x32 = 0;x32 < M3; x32++)
          r2[y32 + x32] = t2[m4 + x32];
        p32 += M3, m4 += M3, p32 % o2 === 0 && this._update(r2);
      }
      return this._len += f4, this;
    };
    Bo.prototype.digest = function(t2) {
      var e22 = this._len % this._blockSize;
      this._block[e22] = 128, this._block.fill(0, e22 + 1), e22 >= this._finalSize && (this._update(this._block), this._block.fill(0));
      var r2 = this._len * 8;
      if (r2 <= 4294967295)
        this._block.writeUInt32BE(r2, this._blockSize - 4);
      else {
        var o2 = (r2 & 4294967295) >>> 0, f4 = (r2 - o2) / 4294967296;
        this._block.writeUInt32BE(f4, this._blockSize - 8), this._block.writeUInt32BE(o2, this._blockSize - 4);
      }
      this._update(this._block);
      var p32 = this._hash();
      return t2 ? p32.toString(t2) : p32;
    };
    Bo.prototype._update = function() {
      throw new Error("_update must be implemented by subclass");
    };
    bp.exports = Bo;
  });
  yp = T3((yI, gp) => {
    var h42 = Ie(), mp = pn(), u4 = Te().Buffer, l4 = [1518500249, 1859775393, -1894007588, -899497514], d4 = new Array(80);
    function ua() {
      this.init(), this._w = d4, mp.call(this, 64, 56);
    }
    h42(ua, mp);
    ua.prototype.init = function() {
      return this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520, this;
    };
    function c4(t2) {
      return t2 << 5 | t2 >>> 27;
    }
    function p4(t2) {
      return t2 << 30 | t2 >>> 2;
    }
    function v4(t2, e22, r2, o2) {
      return t2 === 0 ? e22 & r2 | ~e22 & o2 : t2 === 2 ? e22 & r2 | e22 & o2 | r2 & o2 : e22 ^ r2 ^ o2;
    }
    ua.prototype._update = function(t2) {
      for (var e22 = this._w, r2 = this._a | 0, o2 = this._b | 0, f4 = this._c | 0, p32 = this._d | 0, m4 = this._e | 0, y32 = 0;y32 < 16; ++y32)
        e22[y32] = t2.readInt32BE(y32 * 4);
      for (;y32 < 80; ++y32)
        e22[y32] = e22[y32 - 3] ^ e22[y32 - 8] ^ e22[y32 - 14] ^ e22[y32 - 16];
      for (var M3 = 0;M3 < 80; ++M3) {
        var x32 = ~~(M3 / 20), S3 = c4(r2) + v4(x32, o2, f4, p32) + m4 + e22[M3] + l4[x32] | 0;
        m4 = p32, p32 = f4, f4 = p4(o2), o2 = r2, r2 = S3;
      }
      this._a = r2 + this._a | 0, this._b = o2 + this._b | 0, this._c = f4 + this._c | 0, this._d = p32 + this._d | 0, this._e = m4 + this._e | 0;
    };
    ua.prototype._hash = function() {
      var t2 = u4.allocUnsafe(20);
      return t2.writeInt32BE(this._a | 0, 0), t2.writeInt32BE(this._b | 0, 4), t2.writeInt32BE(this._c | 0, 8), t2.writeInt32BE(this._d | 0, 12), t2.writeInt32BE(this._e | 0, 16), t2;
    };
    gp.exports = ua;
  });
  _p = T3((wI, Mp) => {
    var b4 = Ie(), wp = pn(), m4 = Te().Buffer, g4 = [1518500249, 1859775393, -1894007588, -899497514], y4 = new Array(80);
    function la() {
      this.init(), this._w = y4, wp.call(this, 64, 56);
    }
    b4(la, wp);
    la.prototype.init = function() {
      return this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520, this;
    };
    function w4(t2) {
      return t2 << 1 | t2 >>> 31;
    }
    function M4(t2) {
      return t2 << 5 | t2 >>> 27;
    }
    function _4(t2) {
      return t2 << 30 | t2 >>> 2;
    }
    function x4(t2, e22, r2, o2) {
      return t2 === 0 ? e22 & r2 | ~e22 & o2 : t2 === 2 ? e22 & r2 | e22 & o2 | r2 & o2 : e22 ^ r2 ^ o2;
    }
    la.prototype._update = function(t2) {
      for (var e22 = this._w, r2 = this._a | 0, o2 = this._b | 0, f4 = this._c | 0, p32 = this._d | 0, m5 = this._e | 0, y32 = 0;y32 < 16; ++y32)
        e22[y32] = t2.readInt32BE(y32 * 4);
      for (;y32 < 80; ++y32)
        e22[y32] = w4(e22[y32 - 3] ^ e22[y32 - 8] ^ e22[y32 - 14] ^ e22[y32 - 16]);
      for (var M3 = 0;M3 < 80; ++M3) {
        var x32 = ~~(M3 / 20), S3 = M4(r2) + x4(x32, o2, f4, p32) + m5 + e22[M3] + g4[x32] | 0;
        m5 = p32, p32 = f4, f4 = _4(o2), o2 = r2, r2 = S3;
      }
      this._a = r2 + this._a | 0, this._b = o2 + this._b | 0, this._c = f4 + this._c | 0, this._d = p32 + this._d | 0, this._e = m5 + this._e | 0;
    };
    la.prototype._hash = function() {
      var t2 = m4.allocUnsafe(20);
      return t2.writeInt32BE(this._a | 0, 0), t2.writeInt32BE(this._b | 0, 4), t2.writeInt32BE(this._c | 0, 8), t2.writeInt32BE(this._d | 0, 12), t2.writeInt32BE(this._e | 0, 16), t2;
    };
    Mp.exports = la;
  });
  mh = T3((MI, Sp) => {
    var S4 = Ie(), xp = pn(), E4 = Te().Buffer, A42 = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298], R4 = new Array(64);
    function da() {
      this.init(), this._w = R4, xp.call(this, 64, 56);
    }
    S4(da, xp);
    da.prototype.init = function() {
      return this._a = 1779033703, this._b = 3144134277, this._c = 1013904242, this._d = 2773480762, this._e = 1359893119, this._f = 2600822924, this._g = 528734635, this._h = 1541459225, this;
    };
    function B42(t2, e22, r2) {
      return r2 ^ t2 & (e22 ^ r2);
    }
    function q4(t2, e22, r2) {
      return t2 & e22 | r2 & (t2 | e22);
    }
    function I4(t2) {
      return (t2 >>> 2 | t2 << 30) ^ (t2 >>> 13 | t2 << 19) ^ (t2 >>> 22 | t2 << 10);
    }
    function T4(t2) {
      return (t2 >>> 6 | t2 << 26) ^ (t2 >>> 11 | t2 << 21) ^ (t2 >>> 25 | t2 << 7);
    }
    function k4(t2) {
      return (t2 >>> 7 | t2 << 25) ^ (t2 >>> 18 | t2 << 14) ^ t2 >>> 3;
    }
    function L4(t2) {
      return (t2 >>> 17 | t2 << 15) ^ (t2 >>> 19 | t2 << 13) ^ t2 >>> 10;
    }
    da.prototype._update = function(t2) {
      for (var e22 = this._w, r2 = this._a | 0, o2 = this._b | 0, f4 = this._c | 0, p32 = this._d | 0, m4 = this._e | 0, y32 = this._f | 0, M3 = this._g | 0, x32 = this._h | 0, S3 = 0;S3 < 16; ++S3)
        e22[S3] = t2.readInt32BE(S3 * 4);
      for (;S3 < 64; ++S3)
        e22[S3] = L4(e22[S3 - 2]) + e22[S3 - 7] + k4(e22[S3 - 15]) + e22[S3 - 16] | 0;
      for (var E3 = 0;E3 < 64; ++E3) {
        var B5 = x32 + T4(m4) + B42(m4, y32, M3) + A42[E3] + e22[E3] | 0, q2 = I4(r2) + q4(r2, o2, f4) | 0;
        x32 = M3, M3 = y32, y32 = m4, m4 = p32 + B5 | 0, p32 = f4, f4 = o2, o2 = r2, r2 = B5 + q2 | 0;
      }
      this._a = r2 + this._a | 0, this._b = o2 + this._b | 0, this._c = f4 + this._c | 0, this._d = p32 + this._d | 0, this._e = m4 + this._e | 0, this._f = y32 + this._f | 0, this._g = M3 + this._g | 0, this._h = x32 + this._h | 0;
    };
    da.prototype._hash = function() {
      var t2 = E4.allocUnsafe(32);
      return t2.writeInt32BE(this._a, 0), t2.writeInt32BE(this._b, 4), t2.writeInt32BE(this._c, 8), t2.writeInt32BE(this._d, 12), t2.writeInt32BE(this._e, 16), t2.writeInt32BE(this._f, 20), t2.writeInt32BE(this._g, 24), t2.writeInt32BE(this._h, 28), t2;
    };
    Sp.exports = da;
  });
  Ap = T3((_I, Ep) => {
    var N4 = Ie(), D4 = mh(), P4 = pn(), C4 = Te().Buffer, O4 = new Array(64);
    function qo() {
      this.init(), this._w = O4, P4.call(this, 64, 56);
    }
    N4(qo, D4);
    qo.prototype.init = function() {
      return this._a = 3238371032, this._b = 914150663, this._c = 812702999, this._d = 4144912697, this._e = 4290775857, this._f = 1750603025, this._g = 1694076839, this._h = 3204075428, this;
    };
    qo.prototype._hash = function() {
      var t2 = C4.allocUnsafe(28);
      return t2.writeInt32BE(this._a, 0), t2.writeInt32BE(this._b, 4), t2.writeInt32BE(this._c, 8), t2.writeInt32BE(this._d, 12), t2.writeInt32BE(this._e, 16), t2.writeInt32BE(this._f, 20), t2.writeInt32BE(this._g, 24), t2;
    };
    Ep.exports = qo;
  });
  gh = T3((xI, Lp) => {
    var F4 = Ie(), kp = pn(), U4 = Te().Buffer, Rp = [1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591], z4 = new Array(160);
    function ca() {
      this.init(), this._w = z4, kp.call(this, 128, 112);
    }
    F4(ca, kp);
    ca.prototype.init = function() {
      return this._ah = 1779033703, this._bh = 3144134277, this._ch = 1013904242, this._dh = 2773480762, this._eh = 1359893119, this._fh = 2600822924, this._gh = 528734635, this._hh = 1541459225, this._al = 4089235720, this._bl = 2227873595, this._cl = 4271175723, this._dl = 1595750129, this._el = 2917565137, this._fl = 725511199, this._gl = 4215389547, this._hl = 327033209, this;
    };
    function Bp(t2, e22, r2) {
      return r2 ^ t2 & (e22 ^ r2);
    }
    function qp(t2, e22, r2) {
      return t2 & e22 | r2 & (t2 | e22);
    }
    function Ip(t2, e22) {
      return (t2 >>> 28 | e22 << 4) ^ (e22 >>> 2 | t2 << 30) ^ (e22 >>> 7 | t2 << 25);
    }
    function Tp(t2, e22) {
      return (t2 >>> 14 | e22 << 18) ^ (t2 >>> 18 | e22 << 14) ^ (e22 >>> 9 | t2 << 23);
    }
    function H4(t2, e22) {
      return (t2 >>> 1 | e22 << 31) ^ (t2 >>> 8 | e22 << 24) ^ t2 >>> 7;
    }
    function W4(t2, e22) {
      return (t2 >>> 1 | e22 << 31) ^ (t2 >>> 8 | e22 << 24) ^ (t2 >>> 7 | e22 << 25);
    }
    function K4(t2, e22) {
      return (t2 >>> 19 | e22 << 13) ^ (e22 >>> 29 | t2 << 3) ^ t2 >>> 6;
    }
    function j4(t2, e22) {
      return (t2 >>> 19 | e22 << 13) ^ (e22 >>> 29 | t2 << 3) ^ (t2 >>> 6 | e22 << 26);
    }
    function Pt(t2, e22) {
      return t2 >>> 0 < e22 >>> 0 ? 1 : 0;
    }
    ca.prototype._update = function(t2) {
      for (var e22 = this._w, r2 = this._ah | 0, o2 = this._bh | 0, f4 = this._ch | 0, p32 = this._dh | 0, m4 = this._eh | 0, y32 = this._fh | 0, M3 = this._gh | 0, x32 = this._hh | 0, S3 = this._al | 0, E3 = this._bl | 0, B5 = this._cl | 0, q2 = this._dl | 0, L32 = this._el | 0, ge = this._fl | 0, _e = this._gl | 0, N3 = this._hl | 0, we = 0;we < 32; we += 2)
        e22[we] = t2.readInt32BE(we * 4), e22[we + 1] = t2.readInt32BE(we * 4 + 4);
      for (;we < 160; we += 2) {
        var ye = e22[we - 30], xe = e22[we - 15 * 2 + 1], Re = H4(ye, xe), Ee = W4(xe, ye);
        ye = e22[we - 2 * 2], xe = e22[we - 2 * 2 + 1];
        var Ae = K4(ye, xe), P22 = j4(xe, ye), Se = e22[we - 7 * 2], v3 = e22[we - 7 * 2 + 1], i2 = e22[we - 16 * 2], a3 = e22[we - 16 * 2 + 1], h5 = Ee + v3 | 0, s2 = Re + Se + Pt(h5, Ee) | 0;
        h5 = h5 + P22 | 0, s2 = s2 + Ae + Pt(h5, P22) | 0, h5 = h5 + a3 | 0, s2 = s2 + i2 + Pt(h5, a3) | 0, e22[we] = s2, e22[we + 1] = h5;
      }
      for (var u3 = 0;u3 < 160; u3 += 2) {
        s2 = e22[u3], h5 = e22[u3 + 1];
        var c = qp(r2, o2, f4), b3 = qp(S3, E3, B5), l4 = Ip(r2, S3), n4 = Ip(S3, r2), d2 = Tp(m4, L32), w2 = Tp(L32, m4), g2 = Rp[u3], _3 = Rp[u3 + 1], A6 = Bp(m4, y32, M3), R3 = Bp(L32, ge, _e), I2 = N3 + w2 | 0, Me = x32 + d2 + Pt(I2, N3) | 0;
        I2 = I2 + R3 | 0, Me = Me + A6 + Pt(I2, R3) | 0, I2 = I2 + _3 | 0, Me = Me + g2 + Pt(I2, _3) | 0, I2 = I2 + h5 | 0, Me = Me + s2 + Pt(I2, h5) | 0;
        var k2 = n4 + b3 | 0, D2 = l4 + c + Pt(k2, n4) | 0;
        x32 = M3, N3 = _e, M3 = y32, _e = ge, y32 = m4, ge = L32, L32 = q2 + I2 | 0, m4 = p32 + Me + Pt(L32, q2) | 0, p32 = f4, q2 = B5, f4 = o2, B5 = E3, o2 = r2, E3 = S3, S3 = I2 + k2 | 0, r2 = Me + D2 + Pt(S3, I2) | 0;
      }
      this._al = this._al + S3 | 0, this._bl = this._bl + E3 | 0, this._cl = this._cl + B5 | 0, this._dl = this._dl + q2 | 0, this._el = this._el + L32 | 0, this._fl = this._fl + ge | 0, this._gl = this._gl + _e | 0, this._hl = this._hl + N3 | 0, this._ah = this._ah + r2 + Pt(this._al, S3) | 0, this._bh = this._bh + o2 + Pt(this._bl, E3) | 0, this._ch = this._ch + f4 + Pt(this._cl, B5) | 0, this._dh = this._dh + p32 + Pt(this._dl, q2) | 0, this._eh = this._eh + m4 + Pt(this._el, L32) | 0, this._fh = this._fh + y32 + Pt(this._fl, ge) | 0, this._gh = this._gh + M3 + Pt(this._gl, _e) | 0, this._hh = this._hh + x32 + Pt(this._hl, N3) | 0;
    };
    ca.prototype._hash = function() {
      var t2 = U4.allocUnsafe(64);
      function e22(r2, o2, f4) {
        t2.writeInt32BE(r2, f4), t2.writeInt32BE(o2, f4 + 4);
      }
      return e22(this._ah, this._al, 0), e22(this._bh, this._bl, 8), e22(this._ch, this._cl, 16), e22(this._dh, this._dl, 24), e22(this._eh, this._el, 32), e22(this._fh, this._fl, 40), e22(this._gh, this._gl, 48), e22(this._hh, this._hl, 56), t2;
    };
    Lp.exports = ca;
  });
  Dp = T3((SI, Np) => {
    var Z4 = Ie(), V4 = gh(), $4 = pn(), G4 = Te().Buffer, Y4 = new Array(160);
    function Io() {
      this.init(), this._w = Y4, $4.call(this, 128, 112);
    }
    Z4(Io, V4);
    Io.prototype.init = function() {
      return this._ah = 3418070365, this._bh = 1654270250, this._ch = 2438529370, this._dh = 355462360, this._eh = 1731405415, this._fh = 2394180231, this._gh = 3675008525, this._hh = 1203062813, this._al = 3238371032, this._bl = 914150663, this._cl = 812702999, this._dl = 4144912697, this._el = 4290775857, this._fl = 1750603025, this._gl = 1694076839, this._hl = 3204075428, this;
    };
    Io.prototype._hash = function() {
      var t2 = G4.allocUnsafe(48);
      function e22(r2, o2, f4) {
        t2.writeInt32BE(r2, f4), t2.writeInt32BE(o2, f4 + 4);
      }
      return e22(this._ah, this._al, 0), e22(this._bh, this._bl, 8), e22(this._ch, this._cl, 16), e22(this._dh, this._dl, 24), e22(this._eh, this._el, 32), e22(this._fh, this._fl, 40), t2;
    };
    Np.exports = Io;
  });
  To = T3((ci, Pp) => {
    var ci = Pp.exports = function(e22) {
      e22 = e22.toLowerCase();
      var r2 = ci[e22];
      if (!r2)
        throw new Error(e22 + " is not supported (we accept pull requests)");
      return new r2;
    };
    ci.sha = yp();
    ci.sha1 = _p();
    ci.sha224 = Ap();
    ci.sha256 = mh();
    ci.sha384 = Dp();
    ci.sha512 = gh();
  });
  Tt = T3((EI, Cp) => {
    Cp.exports = { ArrayIsArray(t2) {
      return Array.isArray(t2);
    }, ArrayPrototypeIncludes(t2, e22) {
      return t2.includes(e22);
    }, ArrayPrototypeIndexOf(t2, e22) {
      return t2.indexOf(e22);
    }, ArrayPrototypeJoin(t2, e22) {
      return t2.join(e22);
    }, ArrayPrototypeMap(t2, e22) {
      return t2.map(e22);
    }, ArrayPrototypePop(t2, e22) {
      return t2.pop(e22);
    }, ArrayPrototypePush(t2, e22) {
      return t2.push(e22);
    }, ArrayPrototypeSlice(t2, e22, r2) {
      return t2.slice(e22, r2);
    }, Error, FunctionPrototypeCall(t2, e22, ...r2) {
      return t2.call(e22, ...r2);
    }, FunctionPrototypeSymbolHasInstance(t2, e22) {
      return Function.prototype[Symbol.hasInstance].call(t2, e22);
    }, MathFloor: Math.floor, Number, NumberIsInteger: Number.isInteger, NumberIsNaN: Number.isNaN, NumberMAX_SAFE_INTEGER: Number.MAX_SAFE_INTEGER, NumberMIN_SAFE_INTEGER: Number.MIN_SAFE_INTEGER, NumberParseInt: Number.parseInt, ObjectDefineProperties(t2, e22) {
      return Object.defineProperties(t2, e22);
    }, ObjectDefineProperty(t2, e22, r2) {
      return Object.defineProperty(t2, e22, r2);
    }, ObjectGetOwnPropertyDescriptor(t2, e22) {
      return Object.getOwnPropertyDescriptor(t2, e22);
    }, ObjectKeys(t2) {
      return Object.keys(t2);
    }, ObjectSetPrototypeOf(t2, e22) {
      return Object.setPrototypeOf(t2, e22);
    }, Promise, PromisePrototypeCatch(t2, e22) {
      return t2.catch(e22);
    }, PromisePrototypeThen(t2, e22, r2) {
      return t2.then(e22, r2);
    }, PromiseReject(t2) {
      return Promise.reject(t2);
    }, ReflectApply: Reflect.apply, RegExpPrototypeTest(t2, e22) {
      return t2.test(e22);
    }, SafeSet: Set, String, StringPrototypeSlice(t2, e22, r2) {
      return t2.slice(e22, r2);
    }, StringPrototypeToLowerCase(t2) {
      return t2.toLowerCase();
    }, StringPrototypeToUpperCase(t2) {
      return t2.toUpperCase();
    }, StringPrototypeTrim(t2) {
      return t2.trim();
    }, Symbol, SymbolAsyncIterator: Symbol.asyncIterator, SymbolHasInstance: Symbol.hasInstance, SymbolIterator: Symbol.iterator, TypedArrayPrototypeSet(t2, e22, r2) {
      return t2.set(e22, r2);
    }, Uint8Array };
  });
  Gr = T3((AI, wh) => {
    var X4 = Ut(), J4 = Object.getPrototypeOf(async function() {}).constructor, Op = globalThis.Blob || X4.Blob, Q4 = typeof Op < "u" ? function(e22) {
      return e22 instanceof Op;
    } : function(e22) {
      return false;
    }, yh = class extends Error {
      constructor(e22) {
        if (!Array.isArray(e22))
          throw new TypeError(`Expected input to be an Array, got ${typeof e22}`);
        let r2 = "";
        for (let o2 = 0;o2 < e22.length; o2++)
          r2 += `    ${e22[o2].stack}
`;
        super(r2), this.name = "AggregateError", this.errors = e22;
      }
    };
    wh.exports = { AggregateError: yh, kEmptyObject: Object.freeze({}), once(t2) {
      let e22 = false;
      return function(...r2) {
        e22 || (e22 = true, t2.apply(this, r2));
      };
    }, createDeferredPromise: function() {
      let t2, e22;
      return { promise: new Promise((o2, f4) => {
        t2 = o2, e22 = f4;
      }), resolve: t2, reject: e22 };
    }, promisify(t2) {
      return new Promise((e22, r2) => {
        t2((o2, ...f4) => o2 ? r2(o2) : e22(...f4));
      });
    }, debuglog() {
      return function() {};
    }, format(t2, ...e22) {
      return t2.replace(/%([sdifj])/g, function(...[r2, o2]) {
        let f4 = e22.shift();
        return o2 === "f" ? f4.toFixed(6) : o2 === "j" ? JSON.stringify(f4) : o2 === "s" && typeof f4 == "object" ? `${f4.constructor !== Object ? f4.constructor.name : ""} {}`.trim() : f4.toString();
      });
    }, inspect(t2) {
      switch (typeof t2) {
        case "string":
          if (t2.includes("'"))
            if (t2.includes('"')) {
              if (!t2.includes("`") && !t2.includes("${"))
                return `\`${t2}\``;
            } else
              return `"${t2}"`;
          return `'${t2}'`;
        case "number":
          return isNaN(t2) ? "NaN" : Object.is(t2, -0) ? String(t2) : t2;
        case "bigint":
          return `${String(t2)}n`;
        case "boolean":
        case "undefined":
          return String(t2);
        case "object":
          return "{}";
      }
    }, types: { isAsyncFunction(t2) {
      return t2 instanceof J4;
    }, isArrayBufferView(t2) {
      return ArrayBuffer.isView(t2);
    } }, isBlob: Q4 };
    wh.exports.promisify.custom = Symbol.for("nodejs.util.promisify.custom");
  });
  Lo = T3((RI, ko) => {
    var { AbortController: Fp, AbortSignal: e_ } = typeof self < "u" ? self : typeof window < "u" ? window : undefined;
    ko.exports = Fp;
    ko.exports.AbortSignal = e_;
    ko.exports.default = Fp;
  });
  Xt = T3((BI, Hp) => {
    var { format: t_, inspect: No, AggregateError: r_ } = Gr(), i_ = globalThis.AggregateError || r_, n_ = Symbol("kIsNodeError"), f_ = ["string", "function", "number", "object", "Function", "Object", "boolean", "bigint", "symbol"], a_ = /^([A-Z][a-z0-9]*)+$/, o_ = "__node_internal_", Do = {};
    function vn(t2, e22) {
      if (!t2)
        throw new Do.ERR_INTERNAL_ASSERTION(e22);
    }
    function Up(t2) {
      let e22 = "", r2 = t2.length, o2 = t2[0] === "-" ? 1 : 0;
      for (;r2 >= o2 + 4; r2 -= 3)
        e22 = `_${t2.slice(r2 - 3, r2)}${e22}`;
      return `${t2.slice(0, r2)}${e22}`;
    }
    function s_(t2, e22, r2) {
      if (typeof e22 == "function")
        return vn(e22.length <= r2.length, `Code: ${t2}; The provided arguments length (${r2.length}) does not match the required ones (${e22.length}).`), e22(...r2);
      let o2 = (e22.match(/%[dfijoOs]/g) || []).length;
      return vn(o2 === r2.length, `Code: ${t2}; The provided arguments length (${r2.length}) does not match the required ones (${o2}).`), r2.length === 0 ? e22 : t_(e22, ...r2);
    }
    function zt(t2, e22, r2) {
      r2 || (r2 = Error);

      class o2 extends r2 {
        constructor(...p32) {
          super(s_(t2, e22, p32));
        }
        toString() {
          return `${this.name} [${t2}]: ${this.message}`;
        }
      }
      Object.defineProperties(o2.prototype, { name: { value: r2.name, writable: true, enumerable: false, configurable: true }, toString: { value() {
        return `${this.name} [${t2}]: ${this.message}`;
      }, writable: true, enumerable: false, configurable: true } }), o2.prototype.code = t2, o2.prototype[n_] = true, Do[t2] = o2;
    }
    function zp(t2) {
      let e22 = o_ + t2.name;
      return Object.defineProperty(t2, "name", { value: e22 }), t2;
    }
    function h_(t2, e22) {
      if (t2 && e22 && t2 !== e22) {
        if (Array.isArray(e22.errors))
          return e22.errors.push(t2), e22;
        let r2 = new i_([e22, t2], e22.message);
        return r2.code = e22.code, r2;
      }
      return t2 || e22;
    }
    var Mh = class extends Error {
      constructor(e22 = "The operation was aborted", r2 = undefined) {
        if (r2 !== undefined && typeof r2 != "object")
          throw new Do.ERR_INVALID_ARG_TYPE("options", "Object", r2);
        super(e22, r2), this.code = "ABORT_ERR", this.name = "AbortError";
      }
    };
    zt("ERR_ASSERTION", "%s", Error);
    zt("ERR_INVALID_ARG_TYPE", (t2, e22, r2) => {
      vn(typeof t2 == "string", "'name' must be a string"), Array.isArray(e22) || (e22 = [e22]);
      let o2 = "The ";
      t2.endsWith(" argument") ? o2 += `${t2} ` : o2 += `"${t2}" ${t2.includes(".") ? "property" : "argument"} `, o2 += "must be ";
      let f4 = [], p32 = [], m4 = [];
      for (let M3 of e22)
        vn(typeof M3 == "string", "All expected entries have to be of type string"), f_.includes(M3) ? f4.push(M3.toLowerCase()) : a_.test(M3) ? p32.push(M3) : (vn(M3 !== "object", 'The value "object" should be written as "Object"'), m4.push(M3));
      if (p32.length > 0) {
        let M3 = f4.indexOf("object");
        M3 !== -1 && (f4.splice(f4, M3, 1), p32.push("Object"));
      }
      if (f4.length > 0) {
        switch (f4.length) {
          case 1:
            o2 += `of type ${f4[0]}`;
            break;
          case 2:
            o2 += `one of type ${f4[0]} or ${f4[1]}`;
            break;
          default: {
            let M3 = f4.pop();
            o2 += `one of type ${f4.join(", ")}, or ${M3}`;
          }
        }
        (p32.length > 0 || m4.length > 0) && (o2 += " or ");
      }
      if (p32.length > 0) {
        switch (p32.length) {
          case 1:
            o2 += `an instance of ${p32[0]}`;
            break;
          case 2:
            o2 += `an instance of ${p32[0]} or ${p32[1]}`;
            break;
          default: {
            let M3 = p32.pop();
            o2 += `an instance of ${p32.join(", ")}, or ${M3}`;
          }
        }
        m4.length > 0 && (o2 += " or ");
      }
      switch (m4.length) {
        case 0:
          break;
        case 1:
          m4[0].toLowerCase() !== m4[0] && (o2 += "an "), o2 += `${m4[0]}`;
          break;
        case 2:
          o2 += `one of ${m4[0]} or ${m4[1]}`;
          break;
        default: {
          let M3 = m4.pop();
          o2 += `one of ${m4.join(", ")}, or ${M3}`;
        }
      }
      if (r2 == null)
        o2 += `. Received ${r2}`;
      else if (typeof r2 == "function" && r2.name)
        o2 += `. Received function ${r2.name}`;
      else if (typeof r2 == "object") {
        var y32;
        (y32 = r2.constructor) !== null && y32 !== undefined && y32.name ? o2 += `. Received an instance of ${r2.constructor.name}` : o2 += `. Received ${No(r2, { depth: -1 })}`;
      } else {
        let M3 = No(r2, { colors: false });
        M3.length > 25 && (M3 = `${M3.slice(0, 25)}...`), o2 += `. Received type ${typeof r2} (${M3})`;
      }
      return o2;
    }, TypeError);
    zt("ERR_INVALID_ARG_VALUE", (t2, e22, r2 = "is invalid") => {
      let o2 = No(e22);
      return o2.length > 128 && (o2 = o2.slice(0, 128) + "..."), `The ${t2.includes(".") ? "property" : "argument"} '${t2}' ${r2}. Received ${o2}`;
    }, TypeError);
    zt("ERR_INVALID_RETURN_VALUE", (t2, e22, r2) => {
      var o2;
      let f4 = r2 != null && (o2 = r2.constructor) !== null && o2 !== undefined && o2.name ? `instance of ${r2.constructor.name}` : `type ${typeof r2}`;
      return `Expected ${t2} to be returned from the "${e22}" function but got ${f4}.`;
    }, TypeError);
    zt("ERR_MISSING_ARGS", (...t2) => {
      vn(t2.length > 0, "At least one arg needs to be specified");
      let e22, r2 = t2.length;
      switch (t2 = (Array.isArray(t2) ? t2 : [t2]).map((o2) => `"${o2}"`).join(" or "), r2) {
        case 1:
          e22 += `The ${t2[0]} argument`;
          break;
        case 2:
          e22 += `The ${t2[0]} and ${t2[1]} arguments`;
          break;
        default:
          {
            let o2 = t2.pop();
            e22 += `The ${t2.join(", ")}, and ${o2} arguments`;
          }
          break;
      }
      return `${e22} must be specified`;
    }, TypeError);
    zt("ERR_OUT_OF_RANGE", (t2, e22, r2) => {
      vn(e22, 'Missing "range" argument');
      let o2;
      return Number.isInteger(r2) && Math.abs(r2) > 2 ** 32 ? o2 = Up(String(r2)) : typeof r2 == "bigint" ? (o2 = String(r2), (r2 > 2n ** 32n || r2 < -(2n ** 32n)) && (o2 = Up(o2)), o2 += "n") : o2 = No(r2), `The value of "${t2}" is out of range. It must be ${e22}. Received ${o2}`;
    }, RangeError);
    zt("ERR_MULTIPLE_CALLBACK", "Callback called multiple times", Error);
    zt("ERR_METHOD_NOT_IMPLEMENTED", "The %s method is not implemented", Error);
    zt("ERR_STREAM_ALREADY_FINISHED", "Cannot call %s after a stream was finished", Error);
    zt("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable", Error);
    zt("ERR_STREAM_DESTROYED", "Cannot call %s after a stream was destroyed", Error);
    zt("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
    zt("ERR_STREAM_PREMATURE_CLOSE", "Premature close", Error);
    zt("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF", Error);
    zt("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event", Error);
    zt("ERR_STREAM_WRITE_AFTER_END", "write after end", Error);
    zt("ERR_UNKNOWN_ENCODING", "Unknown encoding: %s", TypeError);
    Hp.exports = { AbortError: Mh, aggregateTwoErrors: zp(h_), hideStackFrames: zp, codes: Do };
  });
  pa = T3((qI, Yp) => {
    var { ArrayIsArray: jp, ArrayPrototypeIncludes: Zp, ArrayPrototypeJoin: Vp, ArrayPrototypeMap: u_, NumberIsInteger: xh, NumberIsNaN: l_, NumberMAX_SAFE_INTEGER: d_, NumberMIN_SAFE_INTEGER: c_, NumberParseInt: p_, ObjectPrototypeHasOwnProperty: v_, RegExpPrototypeExec: b_, String: m_, StringPrototypeToUpperCase: g_, StringPrototypeTrim: y_ } = Tt(), { hideStackFrames: Ir, codes: { ERR_SOCKET_BAD_PORT: w_, ERR_INVALID_ARG_TYPE: er, ERR_INVALID_ARG_VALUE: Po, ERR_OUT_OF_RANGE: bn, ERR_UNKNOWN_SIGNAL: Wp } } = Xt(), { normalizeEncoding: M_ } = Gr(), { isAsyncFunction: __, isArrayBufferView: x_ } = Gr().types, Kp = {};
    function S_(t2) {
      return t2 === (t2 | 0);
    }
    function E_(t2) {
      return t2 === t2 >>> 0;
    }
    var A_ = /^[0-7]+$/, R_ = "must be a 32-bit unsigned integer or an octal string";
    function B_(t2, e22, r2) {
      if (typeof t2 > "u" && (t2 = r2), typeof t2 == "string") {
        if (b_(A_, t2) === null)
          throw new Po(e22, t2, R_);
        t2 = p_(t2, 8);
      }
      return $p(t2, e22), t2;
    }
    var q_ = Ir((t2, e22, r2 = c_, o2 = d_) => {
      if (typeof t2 != "number")
        throw new er(e22, "number", t2);
      if (!xh(t2))
        throw new bn(e22, "an integer", t2);
      if (t2 < r2 || t2 > o2)
        throw new bn(e22, `>= ${r2} && <= ${o2}`, t2);
    }), I_ = Ir((t2, e22, r2 = -2147483648, o2 = 2147483647) => {
      if (typeof t2 != "number")
        throw new er(e22, "number", t2);
      if (!xh(t2))
        throw new bn(e22, "an integer", t2);
      if (t2 < r2 || t2 > o2)
        throw new bn(e22, `>= ${r2} && <= ${o2}`, t2);
    }), $p = Ir((t2, e22, r2 = false) => {
      if (typeof t2 != "number")
        throw new er(e22, "number", t2);
      if (!xh(t2))
        throw new bn(e22, "an integer", t2);
      let o2 = r2 ? 1 : 0, f4 = 4294967295;
      if (t2 < o2 || t2 > f4)
        throw new bn(e22, `>= ${o2} && <= ${f4}`, t2);
    });
    function Gp(t2, e22) {
      if (typeof t2 != "string")
        throw new er(e22, "string", t2);
    }
    function T_(t2, e22, r2 = undefined, o2) {
      if (typeof t2 != "number")
        throw new er(e22, "number", t2);
      if (r2 != null && t2 < r2 || o2 != null && t2 > o2 || (r2 != null || o2 != null) && l_(t2))
        throw new bn(e22, `${r2 != null ? `>= ${r2}` : ""}${r2 != null && o2 != null ? " && " : ""}${o2 != null ? `<= ${o2}` : ""}`, t2);
    }
    var k_ = Ir((t2, e22, r2) => {
      if (!Zp(r2, t2)) {
        let o2 = Vp(u_(r2, (p32) => typeof p32 == "string" ? `'${p32}'` : m_(p32)), ", "), f4 = "must be one of: " + o2;
        throw new Po(e22, t2, f4);
      }
    });
    function L_(t2, e22) {
      if (typeof t2 != "boolean")
        throw new er(e22, "boolean", t2);
    }
    function _h(t2, e22, r2) {
      return t2 == null || !v_(t2, e22) ? r2 : t2[e22];
    }
    var N_ = Ir((t2, e22, r2 = null) => {
      let o2 = _h(r2, "allowArray", false), f4 = _h(r2, "allowFunction", false);
      if (!_h(r2, "nullable", false) && t2 === null || !o2 && jp(t2) || typeof t2 != "object" && (!f4 || typeof t2 != "function"))
        throw new er(e22, "Object", t2);
    }), D_ = Ir((t2, e22, r2 = 0) => {
      if (!jp(t2))
        throw new er(e22, "Array", t2);
      if (t2.length < r2) {
        let o2 = `must be longer than ${r2}`;
        throw new Po(e22, t2, o2);
      }
    });
    function P_(t2, e22 = "signal") {
      if (Gp(t2, e22), Kp[t2] === undefined)
        throw Kp[g_(t2)] !== undefined ? new Wp(t2 + " (signals must use all capital letters)") : new Wp(t2);
    }
    var C_ = Ir((t2, e22 = "buffer") => {
      if (!x_(t2))
        throw new er(e22, ["Buffer", "TypedArray", "DataView"], t2);
    });
    function O_(t2, e22) {
      let r2 = M_(e22), o2 = t2.length;
      if (r2 === "hex" && o2 % 2 !== 0)
        throw new Po("encoding", e22, `is invalid for data of length ${o2}`);
    }
    function F_(t2, e22 = "Port", r2 = true) {
      if (typeof t2 != "number" && typeof t2 != "string" || typeof t2 == "string" && y_(t2).length === 0 || +t2 !== +t2 >>> 0 || t2 > 65535 || t2 === 0 && !r2)
        throw new w_(e22, t2, r2);
      return t2 | 0;
    }
    var U_ = Ir((t2, e22) => {
      if (t2 !== undefined && (t2 === null || typeof t2 != "object" || !("aborted" in t2)))
        throw new er(e22, "AbortSignal", t2);
    }), z_ = Ir((t2, e22) => {
      if (typeof t2 != "function")
        throw new er(e22, "Function", t2);
    }), H_ = Ir((t2, e22) => {
      if (typeof t2 != "function" || __(t2))
        throw new er(e22, "Function", t2);
    }), W_ = Ir((t2, e22) => {
      if (t2 !== undefined)
        throw new er(e22, "undefined", t2);
    });
    function K_(t2, e22, r2) {
      if (!Zp(r2, t2))
        throw new er(e22, `('${Vp(r2, "|")}')`, t2);
    }
    Yp.exports = { isInt32: S_, isUint32: E_, parseFileMode: B_, validateArray: D_, validateBoolean: L_, validateBuffer: C_, validateEncoding: O_, validateFunction: z_, validateInt32: I_, validateInteger: q_, validateNumber: T_, validateObject: N_, validateOneOf: k_, validatePlainFunction: H_, validatePort: F_, validateSignalName: P_, validateString: Gp, validateUint32: $p, validateUndefined: W_, validateUnion: K_, validateAbortSignal: U_ };
  });
  Ah = T3((II, e1) => {
    var dt = e1.exports = {}, Yr, Xr;
    function Sh() {
      throw new Error("setTimeout has not been defined");
    }
    function Eh() {
      throw new Error("clearTimeout has not been defined");
    }
    (function() {
      try {
        typeof setTimeout == "function" ? Yr = setTimeout : Yr = Sh;
      } catch {
        Yr = Sh;
      }
      try {
        typeof clearTimeout == "function" ? Xr = clearTimeout : Xr = Eh;
      } catch {
        Xr = Eh;
      }
    })();
    function Xp(t2) {
      if (Yr === setTimeout)
        return setTimeout(t2, 0);
      if ((Yr === Sh || !Yr) && setTimeout)
        return Yr = setTimeout, setTimeout(t2, 0);
      try {
        return Yr(t2, 0);
      } catch {
        try {
          return Yr.call(null, t2, 0);
        } catch {
          return Yr.call(this, t2, 0);
        }
      }
    }
    function j_(t2) {
      if (Xr === clearTimeout)
        return clearTimeout(t2);
      if ((Xr === Eh || !Xr) && clearTimeout)
        return Xr = clearTimeout, clearTimeout(t2);
      try {
        return Xr(t2);
      } catch {
        try {
          return Xr.call(null, t2);
        } catch {
          return Xr.call(this, t2);
        }
      }
    }
    var pi = [], nf = false, mn, Co = -1;
    function Z_() {
      !nf || !mn || (nf = false, mn.length ? pi = mn.concat(pi) : Co = -1, pi.length && Jp());
    }
    function Jp() {
      if (!nf) {
        var t2 = Xp(Z_);
        nf = true;
        for (var e22 = pi.length;e22; ) {
          for (mn = pi, pi = [];++Co < e22; )
            mn && mn[Co].run();
          Co = -1, e22 = pi.length;
        }
        mn = null, nf = false, j_(t2);
      }
    }
    dt.nextTick = function(t2) {
      var e22 = new Array(arguments.length - 1);
      if (arguments.length > 1)
        for (var r2 = 1;r2 < arguments.length; r2++)
          e22[r2 - 1] = arguments[r2];
      pi.push(new Qp(t2, e22)), pi.length === 1 && !nf && Xp(Jp);
    };
    function Qp(t2, e22) {
      this.fun = t2, this.array = e22;
    }
    Qp.prototype.run = function() {
      this.fun.apply(null, this.array);
    };
    dt.title = "browser";
    dt.browser = true;
    dt.env = {};
    dt.argv = [];
    dt.version = "";
    dt.versions = {};
    function vi() {}
    dt.on = vi;
    dt.addListener = vi;
    dt.once = vi;
    dt.off = vi;
    dt.removeListener = vi;
    dt.removeAllListeners = vi;
    dt.emit = vi;
    dt.prependListener = vi;
    dt.prependOnceListener = vi;
    dt.listeners = function(t2) {
      return [];
    };
    dt.binding = function(t2) {
      throw new Error("process.binding is not supported");
    };
    dt.cwd = function() {
      return "/";
    };
    dt.chdir = function(t2) {
      throw new Error("process.chdir is not supported");
    };
    dt.umask = function() {
      return 0;
    };
  });
  pr = {};
  Xa(pr, { default: () => V_ });
  Oi = A02(() => {
    lt(pr, rn(Ah()));
    V_ = rn(Ah());
  });
  Fi = T3((kI, d1) => {
    var { Symbol: Oo, SymbolAsyncIterator: t1, SymbolIterator: r1 } = Tt(), i1 = Oo("kDestroyed"), n1 = Oo("kIsErrored"), Rh = Oo("kIsReadable"), f1 = Oo("kIsDisturbed");
    function Fo(t2, e22 = false) {
      var r2;
      return !!(t2 && typeof t2.pipe == "function" && typeof t2.on == "function" && (!e22 || typeof t2.pause == "function" && typeof t2.resume == "function") && (!t2._writableState || ((r2 = t2._readableState) === null || r2 === undefined ? undefined : r2.readable) !== false) && (!t2._writableState || t2._readableState));
    }
    function Uo(t2) {
      var e22;
      return !!(t2 && typeof t2.write == "function" && typeof t2.on == "function" && (!t2._readableState || ((e22 = t2._writableState) === null || e22 === undefined ? undefined : e22.writable) !== false));
    }
    function $_(t2) {
      return !!(t2 && typeof t2.pipe == "function" && t2._readableState && typeof t2.on == "function" && typeof t2.write == "function");
    }
    function gn(t2) {
      return t2 && (t2._readableState || t2._writableState || typeof t2.write == "function" && typeof t2.on == "function" || typeof t2.pipe == "function" && typeof t2.on == "function");
    }
    function G_(t2, e22) {
      return t2 == null ? false : e22 === true ? typeof t2[t1] == "function" : e22 === false ? typeof t2[r1] == "function" : typeof t2[t1] == "function" || typeof t2[r1] == "function";
    }
    function zo(t2) {
      if (!gn(t2))
        return null;
      let { _writableState: e22, _readableState: r2 } = t2, o2 = e22 || r2;
      return !!(t2.destroyed || t2[i1] || o2 != null && o2.destroyed);
    }
    function a1(t2) {
      if (!Uo(t2))
        return null;
      if (t2.writableEnded === true)
        return true;
      let e22 = t2._writableState;
      return e22 != null && e22.errored ? false : typeof e22?.ended != "boolean" ? null : e22.ended;
    }
    function Y_(t2, e22) {
      if (!Uo(t2))
        return null;
      if (t2.writableFinished === true)
        return true;
      let r2 = t2._writableState;
      return r2 != null && r2.errored ? false : typeof r2?.finished != "boolean" ? null : !!(r2.finished || e22 === false && r2.ended === true && r2.length === 0);
    }
    function X_(t2) {
      if (!Fo(t2))
        return null;
      if (t2.readableEnded === true)
        return true;
      let e22 = t2._readableState;
      return !e22 || e22.errored ? false : typeof e22?.ended != "boolean" ? null : e22.ended;
    }
    function o1(t2, e22) {
      if (!Fo(t2))
        return null;
      let r2 = t2._readableState;
      return r2 != null && r2.errored ? false : typeof r2?.endEmitted != "boolean" ? null : !!(r2.endEmitted || e22 === false && r2.ended === true && r2.length === 0);
    }
    function s1(t2) {
      return t2 && t2[Rh] != null ? t2[Rh] : typeof t2?.readable != "boolean" ? null : zo(t2) ? false : Fo(t2) && t2.readable && !o1(t2);
    }
    function h1(t2) {
      return typeof t2?.writable != "boolean" ? null : zo(t2) ? false : Uo(t2) && t2.writable && !a1(t2);
    }
    function J_(t2, e22) {
      return gn(t2) ? zo(t2) ? true : !(e22?.readable !== false && s1(t2) || e22?.writable !== false && h1(t2)) : null;
    }
    function Q_(t2) {
      var e22, r2;
      return gn(t2) ? t2.writableErrored ? t2.writableErrored : (e22 = (r2 = t2._writableState) === null || r2 === undefined ? undefined : r2.errored) !== null && e22 !== undefined ? e22 : null : null;
    }
    function e8(t2) {
      var e22, r2;
      return gn(t2) ? t2.readableErrored ? t2.readableErrored : (e22 = (r2 = t2._readableState) === null || r2 === undefined ? undefined : r2.errored) !== null && e22 !== undefined ? e22 : null : null;
    }
    function t8(t2) {
      if (!gn(t2))
        return null;
      if (typeof t2.closed == "boolean")
        return t2.closed;
      let { _writableState: e22, _readableState: r2 } = t2;
      return typeof e22?.closed == "boolean" || typeof r2?.closed == "boolean" ? e22?.closed || r2?.closed : typeof t2._closed == "boolean" && u1(t2) ? t2._closed : null;
    }
    function u1(t2) {
      return typeof t2._closed == "boolean" && typeof t2._defaultKeepAlive == "boolean" && typeof t2._removedConnection == "boolean" && typeof t2._removedContLen == "boolean";
    }
    function l1(t2) {
      return typeof t2._sent100 == "boolean" && u1(t2);
    }
    function r8(t2) {
      var e22;
      return typeof t2._consuming == "boolean" && typeof t2._dumped == "boolean" && ((e22 = t2.req) === null || e22 === undefined ? undefined : e22.upgradeOrConnect) === undefined;
    }
    function i8(t2) {
      if (!gn(t2))
        return null;
      let { _writableState: e22, _readableState: r2 } = t2, o2 = e22 || r2;
      return !o2 && l1(t2) || !!(o2 && o2.autoDestroy && o2.emitClose && o2.closed === false);
    }
    function n8(t2) {
      var e22;
      return !!(t2 && ((e22 = t2[f1]) !== null && e22 !== undefined ? e22 : t2.readableDidRead || t2.readableAborted));
    }
    function f8(t2) {
      var e22, r2, o2, f4, p32, m4, y32, M3, x32, S3;
      return !!(t2 && ((e22 = (r2 = (o2 = (f4 = (p32 = (m4 = t2[n1]) !== null && m4 !== undefined ? m4 : t2.readableErrored) !== null && p32 !== undefined ? p32 : t2.writableErrored) !== null && f4 !== undefined ? f4 : (y32 = t2._readableState) === null || y32 === undefined ? undefined : y32.errorEmitted) !== null && o2 !== undefined ? o2 : (M3 = t2._writableState) === null || M3 === undefined ? undefined : M3.errorEmitted) !== null && r2 !== undefined ? r2 : (x32 = t2._readableState) === null || x32 === undefined ? undefined : x32.errored) !== null && e22 !== undefined ? e22 : (S3 = t2._writableState) === null || S3 === undefined ? undefined : S3.errored));
    }
    d1.exports = { kDestroyed: i1, isDisturbed: n8, kIsDisturbed: f1, isErrored: f8, kIsErrored: n1, isReadable: s1, kIsReadable: Rh, isClosed: t8, isDestroyed: zo, isDuplexNodeStream: $_, isFinished: J_, isIterable: G_, isReadableNodeStream: Fo, isReadableEnded: X_, isReadableFinished: o1, isReadableErrored: e8, isNodeStream: gn, isWritable: h1, isWritableNodeStream: Uo, isWritableEnded: a1, isWritableFinished: Y_, isWritableErrored: Q_, isServerRequest: r8, isServerResponse: l1, willEmitClose: i8 };
  });
  Ui = T3((LI, qh) => {
    var ff = (Oi(), ur(pr)), { AbortError: a8, codes: o8 } = Xt(), { ERR_INVALID_ARG_TYPE: s8, ERR_STREAM_PREMATURE_CLOSE: c1 } = o8, { kEmptyObject: p1, once: v1 } = Gr(), { validateAbortSignal: h8, validateFunction: u8, validateObject: l8 } = pa(), { Promise: d8 } = Tt(), { isClosed: c8, isReadable: b1, isReadableNodeStream: Bh, isReadableFinished: m1, isReadableErrored: p8, isWritable: g1, isWritableNodeStream: y1, isWritableFinished: w1, isWritableErrored: v8, isNodeStream: b8, willEmitClose: m8 } = Fi();
    function g8(t2) {
      return t2.setHeader && typeof t2.abort == "function";
    }
    var y8 = () => {};
    function M1(t2, e22, r2) {
      var o2, f4;
      arguments.length === 2 ? (r2 = e22, e22 = p1) : e22 == null ? e22 = p1 : l8(e22, "options"), u8(r2, "callback"), h8(e22.signal, "options.signal"), r2 = v1(r2);
      let p32 = (o2 = e22.readable) !== null && o2 !== undefined ? o2 : Bh(t2), m4 = (f4 = e22.writable) !== null && f4 !== undefined ? f4 : y1(t2);
      if (!b8(t2))
        throw new s8("stream", "Stream", t2);
      let { _writableState: y32, _readableState: M3 } = t2, x32 = () => {
        t2.writable || B5();
      }, S3 = m8(t2) && Bh(t2) === p32 && y1(t2) === m4, E3 = w1(t2, false), B5 = () => {
        E3 = true, t2.destroyed && (S3 = false), !(S3 && (!t2.readable || p32)) && (!p32 || q2) && r2.call(t2);
      }, q2 = m1(t2, false), L32 = () => {
        q2 = true, t2.destroyed && (S3 = false), !(S3 && (!t2.writable || m4)) && (!m4 || E3) && r2.call(t2);
      }, ge = (xe) => {
        r2.call(t2, xe);
      }, _e = c8(t2), N3 = () => {
        _e = true;
        let xe = v8(t2) || p8(t2);
        if (xe && typeof xe != "boolean")
          return r2.call(t2, xe);
        if (p32 && !q2 && Bh(t2, true) && !m1(t2, false))
          return r2.call(t2, new c1);
        if (m4 && !E3 && !w1(t2, false))
          return r2.call(t2, new c1);
        r2.call(t2);
      }, we = () => {
        t2.req.on("finish", B5);
      };
      g8(t2) ? (t2.on("complete", B5), S3 || t2.on("abort", N3), t2.req ? we() : t2.on("request", we)) : m4 && !y32 && (t2.on("end", x32), t2.on("close", x32)), !S3 && typeof t2.aborted == "boolean" && t2.on("aborted", N3), t2.on("end", L32), t2.on("finish", B5), e22.error !== false && t2.on("error", ge), t2.on("close", N3), _e ? ff.nextTick(N3) : y32 != null && y32.errorEmitted || M3 != null && M3.errorEmitted ? S3 || ff.nextTick(N3) : (!p32 && (!S3 || b1(t2)) && (E3 || g1(t2) === false) || !m4 && (!S3 || g1(t2)) && (q2 || b1(t2) === false) || M3 && t2.req && t2.aborted) && ff.nextTick(N3);
      let ye = () => {
        r2 = y8, t2.removeListener("aborted", N3), t2.removeListener("complete", B5), t2.removeListener("abort", N3), t2.removeListener("request", we), t2.req && t2.req.removeListener("finish", B5), t2.removeListener("end", x32), t2.removeListener("close", x32), t2.removeListener("finish", B5), t2.removeListener("end", L32), t2.removeListener("error", ge), t2.removeListener("close", N3);
      };
      if (e22.signal && !_e) {
        let xe = () => {
          let Re = r2;
          ye(), Re.call(t2, new a8(undefined, { cause: e22.signal.reason }));
        };
        if (e22.signal.aborted)
          ff.nextTick(xe);
        else {
          let Re = r2;
          r2 = v1((...Ee) => {
            e22.signal.removeEventListener("abort", xe), Re.apply(t2, Ee);
          }), e22.signal.addEventListener("abort", xe);
        }
      }
      return ye;
    }
    function w8(t2, e22) {
      return new d8((r2, o2) => {
        M1(t2, e22, (f4) => {
          f4 ? o2(f4) : r2();
        });
      });
    }
    qh.exports = M1;
    qh.exports.finished = w8;
  });
  q1 = T3((NI, kh) => {
    var E1 = globalThis.AbortController || Lo().AbortController, { codes: { ERR_INVALID_ARG_TYPE: va, ERR_MISSING_ARGS: M8, ERR_OUT_OF_RANGE: _8 }, AbortError: Jr } = Xt(), { validateAbortSignal: af, validateInteger: x8, validateObject: of } = pa(), S8 = Tt().Symbol("kWeak"), { finished: E8 } = Ui(), { ArrayPrototypePush: A8, MathFloor: R8, Number: B8, NumberIsNaN: q8, Promise: _1, PromiseReject: x1, PromisePrototypeThen: I8, Symbol: A1 } = Tt(), Ho = A1("kEmpty"), S1 = A1("kEof");
    function Wo(t2, e22) {
      if (typeof t2 != "function")
        throw new va("fn", ["Function", "AsyncFunction"], t2);
      e22 != null && of(e22, "options"), e22?.signal != null && af(e22.signal, "options.signal");
      let r2 = 1;
      return e22?.concurrency != null && (r2 = R8(e22.concurrency)), x8(r2, "concurrency", 1), async function* () {
        var f4, p32;
        let m4 = new E1, y32 = this, M3 = [], x32 = m4.signal, S3 = { signal: x32 }, E3 = () => m4.abort();
        e22 != null && (f4 = e22.signal) !== null && f4 !== undefined && f4.aborted && E3(), e22 == null || (p32 = e22.signal) === null || p32 === undefined || p32.addEventListener("abort", E3);
        let B5, q2, L32 = false;
        function ge() {
          L32 = true;
        }
        async function _e() {
          try {
            for await (let ye of y32) {
              var N3;
              if (L32)
                return;
              if (x32.aborted)
                throw new Jr;
              try {
                ye = t2(ye, S3);
              } catch (xe) {
                ye = x1(xe);
              }
              ye !== Ho && (typeof ((N3 = ye) === null || N3 === undefined ? undefined : N3.catch) == "function" && ye.catch(ge), M3.push(ye), B5 && (B5(), B5 = null), !L32 && M3.length && M3.length >= r2 && await new _1((xe) => {
                q2 = xe;
              }));
            }
            M3.push(S1);
          } catch (ye) {
            let xe = x1(ye);
            I8(xe, undefined, ge), M3.push(xe);
          } finally {
            var we;
            L32 = true, B5 && (B5(), B5 = null), e22 == null || (we = e22.signal) === null || we === undefined || we.removeEventListener("abort", E3);
          }
        }
        _e();
        try {
          for (;; ) {
            for (;M3.length > 0; ) {
              let N3 = await M3[0];
              if (N3 === S1)
                return;
              if (x32.aborted)
                throw new Jr;
              N3 !== Ho && (yield N3), M3.shift(), q2 && (q2(), q2 = null);
            }
            await new _1((N3) => {
              B5 = N3;
            });
          }
        } finally {
          m4.abort(), L32 = true, q2 && (q2(), q2 = null);
        }
      }.call(this);
    }
    function T8(t2 = undefined) {
      return t2 != null && of(t2, "options"), t2?.signal != null && af(t2.signal, "options.signal"), async function* () {
        let r2 = 0;
        for await (let f4 of this) {
          var o2;
          if (t2 != null && (o2 = t2.signal) !== null && o2 !== undefined && o2.aborted)
            throw new Jr({ cause: t2.signal.reason });
          yield [r2++, f4];
        }
      }.call(this);
    }
    async function R1(t2, e22 = undefined) {
      for await (let r2 of Th.call(this, t2, e22))
        return true;
      return false;
    }
    async function k8(t2, e22 = undefined) {
      if (typeof t2 != "function")
        throw new va("fn", ["Function", "AsyncFunction"], t2);
      return !await R1.call(this, async (...r2) => !await t2(...r2), e22);
    }
    async function L8(t2, e22) {
      for await (let r2 of Th.call(this, t2, e22))
        return r2;
    }
    async function N8(t2, e22) {
      if (typeof t2 != "function")
        throw new va("fn", ["Function", "AsyncFunction"], t2);
      async function r2(o2, f4) {
        return await t2(o2, f4), Ho;
      }
      for await (let o2 of Wo.call(this, r2, e22))
        ;
    }
    function Th(t2, e22) {
      if (typeof t2 != "function")
        throw new va("fn", ["Function", "AsyncFunction"], t2);
      async function r2(o2, f4) {
        return await t2(o2, f4) ? o2 : Ho;
      }
      return Wo.call(this, r2, e22);
    }
    var Ih = class extends M8 {
      constructor() {
        super("reduce"), this.message = "Reduce of an empty stream requires an initial value";
      }
    };
    async function D8(t2, e22, r2) {
      var o2;
      if (typeof t2 != "function")
        throw new va("reducer", ["Function", "AsyncFunction"], t2);
      r2 != null && of(r2, "options"), r2?.signal != null && af(r2.signal, "options.signal");
      let f4 = arguments.length > 1;
      if (r2 != null && (o2 = r2.signal) !== null && o2 !== undefined && o2.aborted) {
        let x32 = new Jr(undefined, { cause: r2.signal.reason });
        throw this.once("error", () => {}), await E8(this.destroy(x32)), x32;
      }
      let p32 = new E1, m4 = p32.signal;
      if (r2 != null && r2.signal) {
        let x32 = { once: true, [S8]: this };
        r2.signal.addEventListener("abort", () => p32.abort(), x32);
      }
      let y32 = false;
      try {
        for await (let x32 of this) {
          var M3;
          if (y32 = true, r2 != null && (M3 = r2.signal) !== null && M3 !== undefined && M3.aborted)
            throw new Jr;
          f4 ? e22 = await t2(e22, x32, { signal: m4 }) : (e22 = x32, f4 = true);
        }
        if (!y32 && !f4)
          throw new Ih;
      } finally {
        p32.abort();
      }
      return e22;
    }
    async function P8(t2) {
      t2 != null && of(t2, "options"), t2?.signal != null && af(t2.signal, "options.signal");
      let e22 = [];
      for await (let o2 of this) {
        var r2;
        if (t2 != null && (r2 = t2.signal) !== null && r2 !== undefined && r2.aborted)
          throw new Jr(undefined, { cause: t2.signal.reason });
        A8(e22, o2);
      }
      return e22;
    }
    function C8(t2, e22) {
      let r2 = Wo.call(this, t2, e22);
      return async function* () {
        for await (let f4 of r2)
          yield* f4;
      }.call(this);
    }
    function B1(t2) {
      if (t2 = B8(t2), q8(t2))
        return 0;
      if (t2 < 0)
        throw new _8("number", ">= 0", t2);
      return t2;
    }
    function O8(t2, e22 = undefined) {
      return e22 != null && of(e22, "options"), e22?.signal != null && af(e22.signal, "options.signal"), t2 = B1(t2), async function* () {
        var o2;
        if (e22 != null && (o2 = e22.signal) !== null && o2 !== undefined && o2.aborted)
          throw new Jr;
        for await (let p32 of this) {
          var f4;
          if (e22 != null && (f4 = e22.signal) !== null && f4 !== undefined && f4.aborted)
            throw new Jr;
          t2-- <= 0 && (yield p32);
        }
      }.call(this);
    }
    function F8(t2, e22 = undefined) {
      return e22 != null && of(e22, "options"), e22?.signal != null && af(e22.signal, "options.signal"), t2 = B1(t2), async function* () {
        var o2;
        if (e22 != null && (o2 = e22.signal) !== null && o2 !== undefined && o2.aborted)
          throw new Jr;
        for await (let p32 of this) {
          var f4;
          if (e22 != null && (f4 = e22.signal) !== null && f4 !== undefined && f4.aborted)
            throw new Jr;
          if (t2-- > 0)
            yield p32;
          else
            return;
        }
      }.call(this);
    }
    kh.exports.streamReturningOperators = { asIndexedPairs: T8, drop: O8, filter: Th, flatMap: C8, map: Wo, take: F8 };
    kh.exports.promiseReturningOperators = { every: k8, forEach: N8, reduce: D8, toArray: P8, some: R1, find: L8 };
  });
  yn = T3((DI, C1) => {
    var zi = (Oi(), ur(pr)), { aggregateTwoErrors: U8, codes: { ERR_MULTIPLE_CALLBACK: z8 }, AbortError: H8 } = Xt(), { Symbol: k1 } = Tt(), { kDestroyed: W8, isDestroyed: K8, isFinished: j8, isServerRequest: Z8 } = Fi(), L1 = k1("kDestroy"), Lh = k1("kConstruct");
    function N1(t2, e22, r2) {
      t2 && (t2.stack, e22 && !e22.errored && (e22.errored = t2), r2 && !r2.errored && (r2.errored = t2));
    }
    function V8(t2, e22) {
      let r2 = this._readableState, o2 = this._writableState, f4 = o2 || r2;
      return o2 && o2.destroyed || r2 && r2.destroyed ? (typeof e22 == "function" && e22(), this) : (N1(t2, o2, r2), o2 && (o2.destroyed = true), r2 && (r2.destroyed = true), f4.constructed ? I1(this, t2, e22) : this.once(L1, function(p32) {
        I1(this, U8(p32, t2), e22);
      }), this);
    }
    function I1(t2, e22, r2) {
      let o2 = false;
      function f4(p32) {
        if (o2)
          return;
        o2 = true;
        let { _readableState: m4, _writableState: y32 } = t2;
        N1(p32, y32, m4), y32 && (y32.closed = true), m4 && (m4.closed = true), typeof r2 == "function" && r2(p32), p32 ? zi.nextTick($8, t2, p32) : zi.nextTick(D1, t2);
      }
      try {
        t2._destroy(e22 || null, f4);
      } catch (p32) {
        f4(p32);
      }
    }
    function $8(t2, e22) {
      Nh(t2, e22), D1(t2);
    }
    function D1(t2) {
      let { _readableState: e22, _writableState: r2 } = t2;
      r2 && (r2.closeEmitted = true), e22 && (e22.closeEmitted = true), (r2 && r2.emitClose || e22 && e22.emitClose) && t2.emit("close");
    }
    function Nh(t2, e22) {
      let { _readableState: r2, _writableState: o2 } = t2;
      o2 && o2.errorEmitted || r2 && r2.errorEmitted || (o2 && (o2.errorEmitted = true), r2 && (r2.errorEmitted = true), t2.emit("error", e22));
    }
    function G8() {
      let t2 = this._readableState, e22 = this._writableState;
      t2 && (t2.constructed = true, t2.closed = false, t2.closeEmitted = false, t2.destroyed = false, t2.errored = null, t2.errorEmitted = false, t2.reading = false, t2.ended = t2.readable === false, t2.endEmitted = t2.readable === false), e22 && (e22.constructed = true, e22.destroyed = false, e22.closed = false, e22.closeEmitted = false, e22.errored = null, e22.errorEmitted = false, e22.finalCalled = false, e22.prefinished = false, e22.ended = e22.writable === false, e22.ending = e22.writable === false, e22.finished = e22.writable === false);
    }
    function Dh(t2, e22, r2) {
      let { _readableState: o2, _writableState: f4 } = t2;
      if (f4 && f4.destroyed || o2 && o2.destroyed)
        return this;
      o2 && o2.autoDestroy || f4 && f4.autoDestroy ? t2.destroy(e22) : e22 && (e22.stack, f4 && !f4.errored && (f4.errored = e22), o2 && !o2.errored && (o2.errored = e22), r2 ? zi.nextTick(Nh, t2, e22) : Nh(t2, e22));
    }
    function Y8(t2, e22) {
      if (typeof t2._construct != "function")
        return;
      let { _readableState: r2, _writableState: o2 } = t2;
      r2 && (r2.constructed = false), o2 && (o2.constructed = false), t2.once(Lh, e22), !(t2.listenerCount(Lh) > 1) && zi.nextTick(X8, t2);
    }
    function X8(t2) {
      let e22 = false;
      function r2(o2) {
        if (e22) {
          Dh(t2, o2 ?? new z8);
          return;
        }
        e22 = true;
        let { _readableState: f4, _writableState: p32 } = t2, m4 = p32 || f4;
        f4 && (f4.constructed = true), p32 && (p32.constructed = true), m4.destroyed ? t2.emit(L1, o2) : o2 ? Dh(t2, o2, true) : zi.nextTick(J8, t2);
      }
      try {
        t2._construct(r2);
      } catch (o2) {
        r2(o2);
      }
    }
    function J8(t2) {
      t2.emit(Lh);
    }
    function T1(t2) {
      return t2 && t2.setHeader && typeof t2.abort == "function";
    }
    function P1(t2) {
      t2.emit("close");
    }
    function Q8(t2, e22) {
      t2.emit("error", e22), zi.nextTick(P1, t2);
    }
    function e5(t2, e22) {
      !t2 || K8(t2) || (!e22 && !j8(t2) && (e22 = new H8), Z8(t2) ? (t2.socket = null, t2.destroy(e22)) : T1(t2) ? t2.abort() : T1(t2.req) ? t2.req.abort() : typeof t2.destroy == "function" ? t2.destroy(e22) : typeof t2.close == "function" ? t2.close() : e22 ? zi.nextTick(Q8, t2, e22) : zi.nextTick(P1, t2), t2.destroyed || (t2[W8] = true));
    }
    C1.exports = { construct: Y8, destroyer: e5, destroy: V8, undestroy: G8, errorOrDestroy: Dh };
  });
  Zo = T3((PI, F1) => {
    var { ArrayIsArray: t5, ObjectSetPrototypeOf: O1 } = Tt(), { EventEmitter: Ko } = ki();
    function jo(t2) {
      Ko.call(this, t2);
    }
    O1(jo.prototype, Ko.prototype);
    O1(jo, Ko);
    jo.prototype.pipe = function(t2, e22) {
      let r2 = this;
      function o2(S3) {
        t2.writable && t2.write(S3) === false && r2.pause && r2.pause();
      }
      r2.on("data", o2);
      function f4() {
        r2.readable && r2.resume && r2.resume();
      }
      t2.on("drain", f4), !t2._isStdio && (!e22 || e22.end !== false) && (r2.on("end", m4), r2.on("close", y32));
      let p32 = false;
      function m4() {
        p32 || (p32 = true, t2.end());
      }
      function y32() {
        p32 || (p32 = true, typeof t2.destroy == "function" && t2.destroy());
      }
      function M3(S3) {
        x32(), Ko.listenerCount(this, "error") === 0 && this.emit("error", S3);
      }
      Ph(r2, "error", M3), Ph(t2, "error", M3);
      function x32() {
        r2.removeListener("data", o2), t2.removeListener("drain", f4), r2.removeListener("end", m4), r2.removeListener("close", y32), r2.removeListener("error", M3), t2.removeListener("error", M3), r2.removeListener("end", x32), r2.removeListener("close", x32), t2.removeListener("close", x32);
      }
      return r2.on("end", x32), r2.on("close", x32), t2.on("close", x32), t2.emit("pipe", r2), t2;
    };
    function Ph(t2, e22, r2) {
      if (typeof t2.prependListener == "function")
        return t2.prependListener(e22, r2);
      !t2._events || !t2._events[e22] ? t2.on(e22, r2) : t5(t2._events[e22]) ? t2._events[e22].unshift(r2) : t2._events[e22] = [r2, t2._events[e22]];
    }
    F1.exports = { Stream: jo, prependListener: Ph };
  });
  $o = T3((CI, Vo) => {
    var { AbortError: r5, codes: i5 } = Xt(), n5 = Ui(), { ERR_INVALID_ARG_TYPE: U1 } = i5, f5 = (t2, e22) => {
      if (typeof t2 != "object" || !("aborted" in t2))
        throw new U1(e22, "AbortSignal", t2);
    };
    function a5(t2) {
      return !!(t2 && typeof t2.pipe == "function");
    }
    Vo.exports.addAbortSignal = function(e22, r2) {
      if (f5(e22, "signal"), !a5(r2))
        throw new U1("stream", "stream.Stream", r2);
      return Vo.exports.addAbortSignalNoValidate(e22, r2);
    };
    Vo.exports.addAbortSignalNoValidate = function(t2, e22) {
      if (typeof t2 != "object" || !("aborted" in t2))
        return e22;
      let r2 = () => {
        e22.destroy(new r5(undefined, { cause: t2.reason }));
      };
      return t2.aborted ? r2() : (t2.addEventListener("abort", r2), n5(e22, () => t2.removeEventListener("abort", r2))), e22;
    };
  });
  W1 = T3((FI, H1) => {
    var { StringPrototypeSlice: z1, SymbolIterator: o5, TypedArrayPrototypeSet: Go, Uint8Array: s5 } = Tt(), { Buffer: Ch } = Ut(), { inspect: h5 } = Gr();
    H1.exports = class {
      constructor() {
        this.head = null, this.tail = null, this.length = 0;
      }
      push(e22) {
        let r2 = { data: e22, next: null };
        this.length > 0 ? this.tail.next = r2 : this.head = r2, this.tail = r2, ++this.length;
      }
      unshift(e22) {
        let r2 = { data: e22, next: this.head };
        this.length === 0 && (this.tail = r2), this.head = r2, ++this.length;
      }
      shift() {
        if (this.length === 0)
          return;
        let e22 = this.head.data;
        return this.length === 1 ? this.head = this.tail = null : this.head = this.head.next, --this.length, e22;
      }
      clear() {
        this.head = this.tail = null, this.length = 0;
      }
      join(e22) {
        if (this.length === 0)
          return "";
        let r2 = this.head, o2 = "" + r2.data;
        for (;(r2 = r2.next) !== null; )
          o2 += e22 + r2.data;
        return o2;
      }
      concat(e22) {
        if (this.length === 0)
          return Ch.alloc(0);
        let r2 = Ch.allocUnsafe(e22 >>> 0), o2 = this.head, f4 = 0;
        for (;o2; )
          Go(r2, o2.data, f4), f4 += o2.data.length, o2 = o2.next;
        return r2;
      }
      consume(e22, r2) {
        let o2 = this.head.data;
        if (e22 < o2.length) {
          let f4 = o2.slice(0, e22);
          return this.head.data = o2.slice(e22), f4;
        }
        return e22 === o2.length ? this.shift() : r2 ? this._getString(e22) : this._getBuffer(e22);
      }
      first() {
        return this.head.data;
      }
      *[o5]() {
        for (let e22 = this.head;e22; e22 = e22.next)
          yield e22.data;
      }
      _getString(e22) {
        let r2 = "", o2 = this.head, f4 = 0;
        do {
          let p32 = o2.data;
          if (e22 > p32.length)
            r2 += p32, e22 -= p32.length;
          else {
            e22 === p32.length ? (r2 += p32, ++f4, o2.next ? this.head = o2.next : this.head = this.tail = null) : (r2 += z1(p32, 0, e22), this.head = o2, o2.data = z1(p32, e22));
            break;
          }
          ++f4;
        } while ((o2 = o2.next) !== null);
        return this.length -= f4, r2;
      }
      _getBuffer(e22) {
        let r2 = Ch.allocUnsafe(e22), o2 = e22, f4 = this.head, p32 = 0;
        do {
          let m4 = f4.data;
          if (e22 > m4.length)
            Go(r2, m4, o2 - e22), e22 -= m4.length;
          else {
            e22 === m4.length ? (Go(r2, m4, o2 - e22), ++p32, f4.next ? this.head = f4.next : this.head = this.tail = null) : (Go(r2, new s5(m4.buffer, m4.byteOffset, e22), o2 - e22), this.head = f4, f4.data = m4.slice(e22));
            break;
          }
          ++p32;
        } while ((f4 = f4.next) !== null);
        return this.length -= p32, r2;
      }
      [Symbol.for("nodejs.util.inspect.custom")](e22, r2) {
        return h5(this, { ...r2, depth: 0, customInspect: false });
      }
    };
  });
  Yo = T3((UI, j1) => {
    var { MathFloor: u5, NumberIsInteger: l5 } = Tt(), { ERR_INVALID_ARG_VALUE: d5 } = Xt().codes;
    function c5(t2, e22, r2) {
      return t2.highWaterMark != null ? t2.highWaterMark : e22 ? t2[r2] : null;
    }
    function K1(t2) {
      return t2 ? 16 : 16 * 1024;
    }
    function p5(t2, e22, r2, o2) {
      let f4 = c5(e22, o2, r2);
      if (f4 != null) {
        if (!l5(f4) || f4 < 0) {
          let p32 = o2 ? `options.${r2}` : "options.highWaterMark";
          throw new d5(p32, f4);
        }
        return u5(f4);
      }
      return K1(t2.objectMode);
    }
    j1.exports = { getHighWaterMark: p5, getDefaultHighWaterMark: K1 };
  });
  Oh = T3((zI, G1) => {
    var Z1 = (Oi(), ur(pr)), { PromisePrototypeThen: v5, SymbolAsyncIterator: V1, SymbolIterator: $1 } = Tt(), { Buffer: b5 } = Ut(), { ERR_INVALID_ARG_TYPE: m5, ERR_STREAM_NULL_VALUES: g5 } = Xt().codes;
    function y5(t2, e22, r2) {
      let o2;
      if (typeof e22 == "string" || e22 instanceof b5)
        return new t2({ objectMode: true, ...r2, read() {
          this.push(e22), this.push(null);
        } });
      let f4;
      if (e22 && e22[V1])
        f4 = true, o2 = e22[V1]();
      else if (e22 && e22[$1])
        f4 = false, o2 = e22[$1]();
      else
        throw new m5("iterable", ["Iterable"], e22);
      let p32 = new t2({ objectMode: true, highWaterMark: 1, ...r2 }), m4 = false;
      p32._read = function() {
        m4 || (m4 = true, M3());
      }, p32._destroy = function(x32, S3) {
        v5(y32(x32), () => Z1.nextTick(S3, x32), (E3) => Z1.nextTick(S3, E3 || x32));
      };
      async function y32(x32) {
        let S3 = x32 != null, E3 = typeof o2.throw == "function";
        if (S3 && E3) {
          let { value: B5, done: q2 } = await o2.throw(x32);
          if (await B5, q2)
            return;
        }
        if (typeof o2.return == "function") {
          let { value: B5 } = await o2.return();
          await B5;
        }
      }
      async function M3() {
        for (;; ) {
          try {
            let { value: x32, done: S3 } = f4 ? await o2.next() : o2.next();
            if (S3)
              p32.push(null);
            else {
              let E3 = x32 && typeof x32.then == "function" ? await x32 : x32;
              if (E3 === null)
                throw m4 = false, new g5;
              if (p32.push(E3))
                continue;
              m4 = false;
            }
          } catch (x32) {
            p32.destroy(x32);
          }
          break;
        }
      }
      return p32;
    }
    G1.exports = y5;
  });
  ba = T3((HI, sv) => {
    var Tr = (Oi(), ur(pr)), { ArrayPrototypeIndexOf: w5, NumberIsInteger: M5, NumberIsNaN: _5, NumberParseInt: x5, ObjectDefineProperties: J1, ObjectKeys: S5, ObjectSetPrototypeOf: Q1, Promise: E5, SafeSet: A52, SymbolAsyncIterator: R5, Symbol: B5 } = Tt();
    sv.exports = Le;
    Le.ReadableState = Kh;
    var { EventEmitter: q5 } = ki(), { Stream: Hi, prependListener: I5 } = Zo(), { Buffer: Fh } = Ut(), { addAbortSignal: T5 } = $o(), k5 = Ui(), Pe = Gr().debuglog("stream", (t2) => {
      Pe = t2;
    }), L5 = W1(), hf = yn(), { getHighWaterMark: N5, getDefaultHighWaterMark: D5 } = Yo(), { aggregateTwoErrors: Y1, codes: { ERR_INVALID_ARG_TYPE: P5, ERR_METHOD_NOT_IMPLEMENTED: C5, ERR_OUT_OF_RANGE: O5, ERR_STREAM_PUSH_AFTER_EOF: F5, ERR_STREAM_UNSHIFT_AFTER_END_EVENT: U5 } } = Xt(), { validateObject: z5 } = pa(), wn = B5("kPaused"), { StringDecoder: ev } = lo(), H5 = Oh();
    Q1(Le.prototype, Hi.prototype);
    Q1(Le, Hi);
    var Uh = () => {}, { errorOrDestroy: sf } = hf;
    function Kh(t2, e22, r2) {
      typeof r2 != "boolean" && (r2 = e22 instanceof Qr()), this.objectMode = !!(t2 && t2.objectMode), r2 && (this.objectMode = this.objectMode || !!(t2 && t2.readableObjectMode)), this.highWaterMark = t2 ? N5(this, t2, "readableHighWaterMark", r2) : D5(false), this.buffer = new L5, this.length = 0, this.pipes = [], this.flowing = null, this.ended = false, this.endEmitted = false, this.reading = false, this.constructed = true, this.sync = true, this.needReadable = false, this.emittedReadable = false, this.readableListening = false, this.resumeScheduled = false, this[wn] = null, this.errorEmitted = false, this.emitClose = !t2 || t2.emitClose !== false, this.autoDestroy = !t2 || t2.autoDestroy !== false, this.destroyed = false, this.errored = null, this.closed = false, this.closeEmitted = false, this.defaultEncoding = t2 && t2.defaultEncoding || "utf8", this.awaitDrainWriters = null, this.multiAwaitDrain = false, this.readingMore = false, this.dataEmitted = false, this.decoder = null, this.encoding = null, t2 && t2.encoding && (this.decoder = new ev(t2.encoding), this.encoding = t2.encoding);
    }
    function Le(t2) {
      if (!(this instanceof Le))
        return new Le(t2);
      let e22 = this instanceof Qr();
      this._readableState = new Kh(t2, this, e22), t2 && (typeof t2.read == "function" && (this._read = t2.read), typeof t2.destroy == "function" && (this._destroy = t2.destroy), typeof t2.construct == "function" && (this._construct = t2.construct), t2.signal && !e22 && T5(t2.signal, this)), Hi.call(this, t2), hf.construct(this, () => {
        this._readableState.needReadable && Xo(this, this._readableState);
      });
    }
    Le.prototype.destroy = hf.destroy;
    Le.prototype._undestroy = hf.undestroy;
    Le.prototype._destroy = function(t2, e22) {
      e22(t2);
    };
    Le.prototype[q5.captureRejectionSymbol] = function(t2) {
      this.destroy(t2);
    };
    Le.prototype.push = function(t2, e22) {
      return tv(this, t2, e22, false);
    };
    Le.prototype.unshift = function(t2, e22) {
      return tv(this, t2, e22, true);
    };
    function tv(t2, e22, r2, o2) {
      Pe("readableAddChunk", e22);
      let f4 = t2._readableState, p32;
      if (f4.objectMode || (typeof e22 == "string" ? (r2 = r2 || f4.defaultEncoding, f4.encoding !== r2 && (o2 && f4.encoding ? e22 = Fh.from(e22, r2).toString(f4.encoding) : (e22 = Fh.from(e22, r2), r2 = ""))) : e22 instanceof Fh ? r2 = "" : Hi._isUint8Array(e22) ? (e22 = Hi._uint8ArrayToBuffer(e22), r2 = "") : e22 != null && (p32 = new P5("chunk", ["string", "Buffer", "Uint8Array"], e22))), p32)
        sf(t2, p32);
      else if (e22 === null)
        f4.reading = false, j5(t2, f4);
      else if (f4.objectMode || e22 && e22.length > 0)
        if (o2)
          if (f4.endEmitted)
            sf(t2, new U5);
          else {
            if (f4.destroyed || f4.errored)
              return false;
            zh(t2, f4, e22, true);
          }
        else if (f4.ended)
          sf(t2, new F5);
        else {
          if (f4.destroyed || f4.errored)
            return false;
          f4.reading = false, f4.decoder && !r2 ? (e22 = f4.decoder.write(e22), f4.objectMode || e22.length !== 0 ? zh(t2, f4, e22, false) : Xo(t2, f4)) : zh(t2, f4, e22, false);
        }
      else
        o2 || (f4.reading = false, Xo(t2, f4));
      return !f4.ended && (f4.length < f4.highWaterMark || f4.length === 0);
    }
    function zh(t2, e22, r2, o2) {
      e22.flowing && e22.length === 0 && !e22.sync && t2.listenerCount("data") > 0 ? (e22.multiAwaitDrain ? e22.awaitDrainWriters.clear() : e22.awaitDrainWriters = null, e22.dataEmitted = true, t2.emit("data", r2)) : (e22.length += e22.objectMode ? 1 : r2.length, o2 ? e22.buffer.unshift(r2) : e22.buffer.push(r2), e22.needReadable && Jo(t2)), Xo(t2, e22);
    }
    Le.prototype.isPaused = function() {
      let t2 = this._readableState;
      return t2[wn] === true || t2.flowing === false;
    };
    Le.prototype.setEncoding = function(t2) {
      let e22 = new ev(t2);
      this._readableState.decoder = e22, this._readableState.encoding = this._readableState.decoder.encoding;
      let r2 = this._readableState.buffer, o2 = "";
      for (let f4 of r2)
        o2 += e22.write(f4);
      return r2.clear(), o2 !== "" && r2.push(o2), this._readableState.length = o2.length, this;
    };
    var W5 = 1073741824;
    function K5(t2) {
      if (t2 > W5)
        throw new O5("size", "<= 1GiB", t2);
      return t2--, t2 |= t2 >>> 1, t2 |= t2 >>> 2, t2 |= t2 >>> 4, t2 |= t2 >>> 8, t2 |= t2 >>> 16, t2++, t2;
    }
    function X1(t2, e22) {
      return t2 <= 0 || e22.length === 0 && e22.ended ? 0 : e22.objectMode ? 1 : _5(t2) ? e22.flowing && e22.length ? e22.buffer.first().length : e22.length : t2 <= e22.length ? t2 : e22.ended ? e22.length : 0;
    }
    Le.prototype.read = function(t2) {
      Pe("read", t2), t2 === undefined ? t2 = NaN : M5(t2) || (t2 = x5(t2, 10));
      let e22 = this._readableState, r2 = t2;
      if (t2 > e22.highWaterMark && (e22.highWaterMark = K5(t2)), t2 !== 0 && (e22.emittedReadable = false), t2 === 0 && e22.needReadable && ((e22.highWaterMark !== 0 ? e22.length >= e22.highWaterMark : e22.length > 0) || e22.ended))
        return Pe("read: emitReadable", e22.length, e22.ended), e22.length === 0 && e22.ended ? Hh(this) : Jo(this), null;
      if (t2 = X1(t2, e22), t2 === 0 && e22.ended)
        return e22.length === 0 && Hh(this), null;
      let o2 = e22.needReadable;
      if (Pe("need readable", o2), (e22.length === 0 || e22.length - t2 < e22.highWaterMark) && (o2 = true, Pe("length less than watermark", o2)), e22.ended || e22.reading || e22.destroyed || e22.errored || !e22.constructed)
        o2 = false, Pe("reading, ended or constructing", o2);
      else if (o2) {
        Pe("do read"), e22.reading = true, e22.sync = true, e22.length === 0 && (e22.needReadable = true);
        try {
          this._read(e22.highWaterMark);
        } catch (p32) {
          sf(this, p32);
        }
        e22.sync = false, e22.reading || (t2 = X1(r2, e22));
      }
      let f4;
      return t2 > 0 ? f4 = av(t2, e22) : f4 = null, f4 === null ? (e22.needReadable = e22.length <= e22.highWaterMark, t2 = 0) : (e22.length -= t2, e22.multiAwaitDrain ? e22.awaitDrainWriters.clear() : e22.awaitDrainWriters = null), e22.length === 0 && (e22.ended || (e22.needReadable = true), r2 !== t2 && e22.ended && Hh(this)), f4 !== null && !e22.errorEmitted && !e22.closeEmitted && (e22.dataEmitted = true, this.emit("data", f4)), f4;
    };
    function j5(t2, e22) {
      if (Pe("onEofChunk"), !e22.ended) {
        if (e22.decoder) {
          let r2 = e22.decoder.end();
          r2 && r2.length && (e22.buffer.push(r2), e22.length += e22.objectMode ? 1 : r2.length);
        }
        e22.ended = true, e22.sync ? Jo(t2) : (e22.needReadable = false, e22.emittedReadable = true, rv(t2));
      }
    }
    function Jo(t2) {
      let e22 = t2._readableState;
      Pe("emitReadable", e22.needReadable, e22.emittedReadable), e22.needReadable = false, e22.emittedReadable || (Pe("emitReadable", e22.flowing), e22.emittedReadable = true, Tr.nextTick(rv, t2));
    }
    function rv(t2) {
      let e22 = t2._readableState;
      Pe("emitReadable_", e22.destroyed, e22.length, e22.ended), !e22.destroyed && !e22.errored && (e22.length || e22.ended) && (t2.emit("readable"), e22.emittedReadable = false), e22.needReadable = !e22.flowing && !e22.ended && e22.length <= e22.highWaterMark, nv(t2);
    }
    function Xo(t2, e22) {
      !e22.readingMore && e22.constructed && (e22.readingMore = true, Tr.nextTick(Z5, t2, e22));
    }
    function Z5(t2, e22) {
      for (;!e22.reading && !e22.ended && (e22.length < e22.highWaterMark || e22.flowing && e22.length === 0); ) {
        let r2 = e22.length;
        if (Pe("maybeReadMore read 0"), t2.read(0), r2 === e22.length)
          break;
      }
      e22.readingMore = false;
    }
    Le.prototype._read = function(t2) {
      throw new C5("_read()");
    };
    Le.prototype.pipe = function(t2, e22) {
      let r2 = this, o2 = this._readableState;
      o2.pipes.length === 1 && (o2.multiAwaitDrain || (o2.multiAwaitDrain = true, o2.awaitDrainWriters = new A52(o2.awaitDrainWriters ? [o2.awaitDrainWriters] : []))), o2.pipes.push(t2), Pe("pipe count=%d opts=%j", o2.pipes.length, e22);
      let p32 = (!e22 || e22.end !== false) && t2 !== Tr.stdout && t2 !== Tr.stderr ? y32 : _e;
      o2.endEmitted ? Tr.nextTick(p32) : r2.once("end", p32), t2.on("unpipe", m4);
      function m4(N3, we) {
        Pe("onunpipe"), N3 === r2 && we && we.hasUnpiped === false && (we.hasUnpiped = true, S3());
      }
      function y32() {
        Pe("onend"), t2.end();
      }
      let M3, x32 = false;
      function S3() {
        Pe("cleanup"), t2.removeListener("close", L32), t2.removeListener("finish", ge), M3 && t2.removeListener("drain", M3), t2.removeListener("error", q2), t2.removeListener("unpipe", m4), r2.removeListener("end", y32), r2.removeListener("end", _e), r2.removeListener("data", B6), x32 = true, M3 && o2.awaitDrainWriters && (!t2._writableState || t2._writableState.needDrain) && M3();
      }
      function E3() {
        x32 || (o2.pipes.length === 1 && o2.pipes[0] === t2 ? (Pe("false write response, pause", 0), o2.awaitDrainWriters = t2, o2.multiAwaitDrain = false) : o2.pipes.length > 1 && o2.pipes.includes(t2) && (Pe("false write response, pause", o2.awaitDrainWriters.size), o2.awaitDrainWriters.add(t2)), r2.pause()), M3 || (M3 = V5(r2, t2), t2.on("drain", M3));
      }
      r2.on("data", B6);
      function B6(N3) {
        Pe("ondata");
        let we = t2.write(N3);
        Pe("dest.write", we), we === false && E3();
      }
      function q2(N3) {
        if (Pe("onerror", N3), _e(), t2.removeListener("error", q2), t2.listenerCount("error") === 0) {
          let we = t2._writableState || t2._readableState;
          we && !we.errorEmitted ? sf(t2, N3) : t2.emit("error", N3);
        }
      }
      I5(t2, "error", q2);
      function L32() {
        t2.removeListener("finish", ge), _e();
      }
      t2.once("close", L32);
      function ge() {
        Pe("onfinish"), t2.removeListener("close", L32), _e();
      }
      t2.once("finish", ge);
      function _e() {
        Pe("unpipe"), r2.unpipe(t2);
      }
      return t2.emit("pipe", r2), t2.writableNeedDrain === true ? o2.flowing && E3() : o2.flowing || (Pe("pipe resume"), r2.resume()), t2;
    };
    function V5(t2, e22) {
      return function() {
        let o2 = t2._readableState;
        o2.awaitDrainWriters === e22 ? (Pe("pipeOnDrain", 1), o2.awaitDrainWriters = null) : o2.multiAwaitDrain && (Pe("pipeOnDrain", o2.awaitDrainWriters.size), o2.awaitDrainWriters.delete(e22)), (!o2.awaitDrainWriters || o2.awaitDrainWriters.size === 0) && t2.listenerCount("data") && t2.resume();
      };
    }
    Le.prototype.unpipe = function(t2) {
      let e22 = this._readableState, r2 = { hasUnpiped: false };
      if (e22.pipes.length === 0)
        return this;
      if (!t2) {
        let f4 = e22.pipes;
        e22.pipes = [], this.pause();
        for (let p32 = 0;p32 < f4.length; p32++)
          f4[p32].emit("unpipe", this, { hasUnpiped: false });
        return this;
      }
      let o2 = w5(e22.pipes, t2);
      return o2 === -1 ? this : (e22.pipes.splice(o2, 1), e22.pipes.length === 0 && this.pause(), t2.emit("unpipe", this, r2), this);
    };
    Le.prototype.on = function(t2, e22) {
      let r2 = Hi.prototype.on.call(this, t2, e22), o2 = this._readableState;
      return t2 === "data" ? (o2.readableListening = this.listenerCount("readable") > 0, o2.flowing !== false && this.resume()) : t2 === "readable" && !o2.endEmitted && !o2.readableListening && (o2.readableListening = o2.needReadable = true, o2.flowing = false, o2.emittedReadable = false, Pe("on readable", o2.length, o2.reading), o2.length ? Jo(this) : o2.reading || Tr.nextTick($5, this)), r2;
    };
    Le.prototype.addListener = Le.prototype.on;
    Le.prototype.removeListener = function(t2, e22) {
      let r2 = Hi.prototype.removeListener.call(this, t2, e22);
      return t2 === "readable" && Tr.nextTick(iv, this), r2;
    };
    Le.prototype.off = Le.prototype.removeListener;
    Le.prototype.removeAllListeners = function(t2) {
      let e22 = Hi.prototype.removeAllListeners.apply(this, arguments);
      return (t2 === "readable" || t2 === undefined) && Tr.nextTick(iv, this), e22;
    };
    function iv(t2) {
      let e22 = t2._readableState;
      e22.readableListening = t2.listenerCount("readable") > 0, e22.resumeScheduled && e22[wn] === false ? e22.flowing = true : t2.listenerCount("data") > 0 ? t2.resume() : e22.readableListening || (e22.flowing = null);
    }
    function $5(t2) {
      Pe("readable nexttick read 0"), t2.read(0);
    }
    Le.prototype.resume = function() {
      let t2 = this._readableState;
      return t2.flowing || (Pe("resume"), t2.flowing = !t2.readableListening, G5(this, t2)), t2[wn] = false, this;
    };
    function G5(t2, e22) {
      e22.resumeScheduled || (e22.resumeScheduled = true, Tr.nextTick(Y5, t2, e22));
    }
    function Y5(t2, e22) {
      Pe("resume", e22.reading), e22.reading || t2.read(0), e22.resumeScheduled = false, t2.emit("resume"), nv(t2), e22.flowing && !e22.reading && t2.read(0);
    }
    Le.prototype.pause = function() {
      return Pe("call pause flowing=%j", this._readableState.flowing), this._readableState.flowing !== false && (Pe("pause"), this._readableState.flowing = false, this.emit("pause")), this._readableState[wn] = true, this;
    };
    function nv(t2) {
      let e22 = t2._readableState;
      for (Pe("flow", e22.flowing);e22.flowing && t2.read() !== null; )
        ;
    }
    Le.prototype.wrap = function(t2) {
      let e22 = false;
      t2.on("data", (o2) => {
        !this.push(o2) && t2.pause && (e22 = true, t2.pause());
      }), t2.on("end", () => {
        this.push(null);
      }), t2.on("error", (o2) => {
        sf(this, o2);
      }), t2.on("close", () => {
        this.destroy();
      }), t2.on("destroy", () => {
        this.destroy();
      }), this._read = () => {
        e22 && t2.resume && (e22 = false, t2.resume());
      };
      let r2 = S5(t2);
      for (let o2 = 1;o2 < r2.length; o2++) {
        let f4 = r2[o2];
        this[f4] === undefined && typeof t2[f4] == "function" && (this[f4] = t2[f4].bind(t2));
      }
      return this;
    };
    Le.prototype[R5] = function() {
      return fv(this);
    };
    Le.prototype.iterator = function(t2) {
      return t2 !== undefined && z5(t2, "options"), fv(this, t2);
    };
    function fv(t2, e22) {
      typeof t2.read != "function" && (t2 = Le.wrap(t2, { objectMode: true }));
      let r2 = X5(t2, e22);
      return r2.stream = t2, r2;
    }
    async function* X5(t2, e22) {
      let r2 = Uh;
      function o2(m4) {
        this === t2 ? (r2(), r2 = Uh) : r2 = m4;
      }
      t2.on("readable", o2);
      let f4, p32 = k5(t2, { writable: false }, (m4) => {
        f4 = m4 ? Y1(f4, m4) : null, r2(), r2 = Uh;
      });
      try {
        for (;; ) {
          let m4 = t2.destroyed ? null : t2.read();
          if (m4 !== null)
            yield m4;
          else {
            if (f4)
              throw f4;
            if (f4 === null)
              return;
            await new E5(o2);
          }
        }
      } catch (m4) {
        throw f4 = Y1(f4, m4), f4;
      } finally {
        (f4 || e22?.destroyOnReturn !== false) && (f4 === undefined || t2._readableState.autoDestroy) ? hf.destroyer(t2, null) : (t2.off("readable", o2), p32());
      }
    }
    J1(Le.prototype, { readable: { __proto__: null, get() {
      let t2 = this._readableState;
      return !!t2 && t2.readable !== false && !t2.destroyed && !t2.errorEmitted && !t2.endEmitted;
    }, set(t2) {
      this._readableState && (this._readableState.readable = !!t2);
    } }, readableDidRead: { __proto__: null, enumerable: false, get: function() {
      return this._readableState.dataEmitted;
    } }, readableAborted: { __proto__: null, enumerable: false, get: function() {
      return !!(this._readableState.readable !== false && (this._readableState.destroyed || this._readableState.errored) && !this._readableState.endEmitted);
    } }, readableHighWaterMark: { __proto__: null, enumerable: false, get: function() {
      return this._readableState.highWaterMark;
    } }, readableBuffer: { __proto__: null, enumerable: false, get: function() {
      return this._readableState && this._readableState.buffer;
    } }, readableFlowing: { __proto__: null, enumerable: false, get: function() {
      return this._readableState.flowing;
    }, set: function(t2) {
      this._readableState && (this._readableState.flowing = t2);
    } }, readableLength: { __proto__: null, enumerable: false, get() {
      return this._readableState.length;
    } }, readableObjectMode: { __proto__: null, enumerable: false, get() {
      return this._readableState ? this._readableState.objectMode : false;
    } }, readableEncoding: { __proto__: null, enumerable: false, get() {
      return this._readableState ? this._readableState.encoding : null;
    } }, errored: { __proto__: null, enumerable: false, get() {
      return this._readableState ? this._readableState.errored : null;
    } }, closed: { __proto__: null, get() {
      return this._readableState ? this._readableState.closed : false;
    } }, destroyed: { __proto__: null, enumerable: false, get() {
      return this._readableState ? this._readableState.destroyed : false;
    }, set(t2) {
      !this._readableState || (this._readableState.destroyed = t2);
    } }, readableEnded: { __proto__: null, enumerable: false, get() {
      return this._readableState ? this._readableState.endEmitted : false;
    } } });
    J1(Kh.prototype, { pipesCount: { __proto__: null, get() {
      return this.pipes.length;
    } }, paused: { __proto__: null, get() {
      return this[wn] !== false;
    }, set(t2) {
      this[wn] = !!t2;
    } } });
    Le._fromList = av;
    function av(t2, e22) {
      if (e22.length === 0)
        return null;
      let r2;
      return e22.objectMode ? r2 = e22.buffer.shift() : !t2 || t2 >= e22.length ? (e22.decoder ? r2 = e22.buffer.join("") : e22.buffer.length === 1 ? r2 = e22.buffer.first() : r2 = e22.buffer.concat(e22.length), e22.buffer.clear()) : r2 = e22.buffer.consume(t2, e22.decoder), r2;
    }
    function Hh(t2) {
      let e22 = t2._readableState;
      Pe("endReadable", e22.endEmitted), e22.endEmitted || (e22.ended = true, Tr.nextTick(J5, e22, t2));
    }
    function J5(t2, e22) {
      if (Pe("endReadableNT", t2.endEmitted, t2.length), !t2.errored && !t2.closeEmitted && !t2.endEmitted && t2.length === 0) {
        if (t2.endEmitted = true, e22.emit("end"), e22.writable && e22.allowHalfOpen === false)
          Tr.nextTick(Q5, e22);
        else if (t2.autoDestroy) {
          let r2 = e22._writableState;
          (!r2 || r2.autoDestroy && (r2.finished || r2.writable === false)) && e22.destroy();
        }
      }
    }
    function Q5(t2) {
      t2.writable && !t2.writableEnded && !t2.destroyed && t2.end();
    }
    Le.from = function(t2, e22) {
      return H5(Le, t2, e22);
    };
    var Wh;
    function ov() {
      return Wh === undefined && (Wh = {}), Wh;
    }
    Le.fromWeb = function(t2, e22) {
      return ov().newStreamReadableFromReadableStream(t2, e22);
    };
    Le.toWeb = function(t2, e22) {
      return ov().newReadableStreamFromStreamReadable(t2, e22);
    };
    Le.wrap = function(t2, e22) {
      var r2, o2;
      return new Le({ objectMode: (r2 = (o2 = t2.readableObjectMode) !== null && o2 !== undefined ? o2 : t2.objectMode) !== null && r2 !== undefined ? r2 : true, ...e22, destroy(f4, p32) {
        hf.destroyer(t2, f4), p32(f4);
      } }).wrap(t2);
    };
  });
  Xh = T3((WI, wv) => {
    var Mn = (Oi(), ur(pr)), { ArrayPrototypeSlice: lv, Error: ex, FunctionPrototypeSymbolHasInstance: dv, ObjectDefineProperty: cv, ObjectDefineProperties: tx, ObjectSetPrototypeOf: pv, StringPrototypeToLowerCase: rx, Symbol: ix, SymbolHasInstance: nx } = Tt();
    wv.exports = ot;
    ot.WritableState = ya;
    var { EventEmitter: fx } = ki(), ma = Zo().Stream, { Buffer: Qo } = Ut(), rs = yn(), { addAbortSignal: ax } = $o(), { getHighWaterMark: ox, getDefaultHighWaterMark: sx } = Yo(), { ERR_INVALID_ARG_TYPE: hx, ERR_METHOD_NOT_IMPLEMENTED: ux, ERR_MULTIPLE_CALLBACK: vv, ERR_STREAM_CANNOT_PIPE: lx, ERR_STREAM_DESTROYED: ga, ERR_STREAM_ALREADY_FINISHED: dx, ERR_STREAM_NULL_VALUES: cx, ERR_STREAM_WRITE_AFTER_END: px, ERR_UNKNOWN_ENCODING: bv } = Xt().codes, { errorOrDestroy: uf } = rs;
    pv(ot.prototype, ma.prototype);
    pv(ot, ma);
    function Vh() {}
    var lf = ix("kOnFinished");
    function ya(t2, e22, r2) {
      typeof r2 != "boolean" && (r2 = e22 instanceof Qr()), this.objectMode = !!(t2 && t2.objectMode), r2 && (this.objectMode = this.objectMode || !!(t2 && t2.writableObjectMode)), this.highWaterMark = t2 ? ox(this, t2, "writableHighWaterMark", r2) : sx(false), this.finalCalled = false, this.needDrain = false, this.ending = false, this.ended = false, this.finished = false, this.destroyed = false;
      let o2 = !!(t2 && t2.decodeStrings === false);
      this.decodeStrings = !o2, this.defaultEncoding = t2 && t2.defaultEncoding || "utf8", this.length = 0, this.writing = false, this.corked = 0, this.sync = true, this.bufferProcessing = false, this.onwrite = bx.bind(undefined, e22), this.writecb = null, this.writelen = 0, this.afterWriteTickInfo = null, ts(this), this.pendingcb = 0, this.constructed = true, this.prefinished = false, this.errorEmitted = false, this.emitClose = !t2 || t2.emitClose !== false, this.autoDestroy = !t2 || t2.autoDestroy !== false, this.errored = null, this.closed = false, this.closeEmitted = false, this[lf] = [];
    }
    function ts(t2) {
      t2.buffered = [], t2.bufferedIndex = 0, t2.allBuffers = true, t2.allNoop = true;
    }
    ya.prototype.getBuffer = function() {
      return lv(this.buffered, this.bufferedIndex);
    };
    cv(ya.prototype, "bufferedRequestCount", { __proto__: null, get() {
      return this.buffered.length - this.bufferedIndex;
    } });
    function ot(t2) {
      let e22 = this instanceof Qr();
      if (!e22 && !dv(ot, this))
        return new ot(t2);
      this._writableState = new ya(t2, this, e22), t2 && (typeof t2.write == "function" && (this._write = t2.write), typeof t2.writev == "function" && (this._writev = t2.writev), typeof t2.destroy == "function" && (this._destroy = t2.destroy), typeof t2.final == "function" && (this._final = t2.final), typeof t2.construct == "function" && (this._construct = t2.construct), t2.signal && ax(t2.signal, this)), ma.call(this, t2), rs.construct(this, () => {
        let r2 = this._writableState;
        r2.writing || Gh(this, r2), Yh(this, r2);
      });
    }
    cv(ot, nx, { __proto__: null, value: function(t2) {
      return dv(this, t2) ? true : this !== ot ? false : t2 && t2._writableState instanceof ya;
    } });
    ot.prototype.pipe = function() {
      uf(this, new lx);
    };
    function mv(t2, e22, r2, o2) {
      let f4 = t2._writableState;
      if (typeof r2 == "function")
        o2 = r2, r2 = f4.defaultEncoding;
      else {
        if (!r2)
          r2 = f4.defaultEncoding;
        else if (r2 !== "buffer" && !Qo.isEncoding(r2))
          throw new bv(r2);
        typeof o2 != "function" && (o2 = Vh);
      }
      if (e22 === null)
        throw new cx;
      if (!f4.objectMode)
        if (typeof e22 == "string")
          f4.decodeStrings !== false && (e22 = Qo.from(e22, r2), r2 = "buffer");
        else if (e22 instanceof Qo)
          r2 = "buffer";
        else if (ma._isUint8Array(e22))
          e22 = ma._uint8ArrayToBuffer(e22), r2 = "buffer";
        else
          throw new hx("chunk", ["string", "Buffer", "Uint8Array"], e22);
      let p32;
      return f4.ending ? p32 = new px : f4.destroyed && (p32 = new ga("write")), p32 ? (Mn.nextTick(o2, p32), uf(t2, p32, true), p32) : (f4.pendingcb++, vx(t2, f4, e22, r2, o2));
    }
    ot.prototype.write = function(t2, e22, r2) {
      return mv(this, t2, e22, r2) === true;
    };
    ot.prototype.cork = function() {
      this._writableState.corked++;
    };
    ot.prototype.uncork = function() {
      let t2 = this._writableState;
      t2.corked && (t2.corked--, t2.writing || Gh(this, t2));
    };
    ot.prototype.setDefaultEncoding = function(e22) {
      if (typeof e22 == "string" && (e22 = rx(e22)), !Qo.isEncoding(e22))
        throw new bv(e22);
      return this._writableState.defaultEncoding = e22, this;
    };
    function vx(t2, e22, r2, o2, f4) {
      let p32 = e22.objectMode ? 1 : r2.length;
      e22.length += p32;
      let m4 = e22.length < e22.highWaterMark;
      return m4 || (e22.needDrain = true), e22.writing || e22.corked || e22.errored || !e22.constructed ? (e22.buffered.push({ chunk: r2, encoding: o2, callback: f4 }), e22.allBuffers && o2 !== "buffer" && (e22.allBuffers = false), e22.allNoop && f4 !== Vh && (e22.allNoop = false)) : (e22.writelen = p32, e22.writecb = f4, e22.writing = true, e22.sync = true, t2._write(r2, o2, e22.onwrite), e22.sync = false), m4 && !e22.errored && !e22.destroyed;
    }
    function hv(t2, e22, r2, o2, f4, p32, m4) {
      e22.writelen = o2, e22.writecb = m4, e22.writing = true, e22.sync = true, e22.destroyed ? e22.onwrite(new ga("write")) : r2 ? t2._writev(f4, e22.onwrite) : t2._write(f4, p32, e22.onwrite), e22.sync = false;
    }
    function uv(t2, e22, r2, o2) {
      --e22.pendingcb, o2(r2), $h(e22), uf(t2, r2);
    }
    function bx(t2, e22) {
      let r2 = t2._writableState, o2 = r2.sync, f4 = r2.writecb;
      if (typeof f4 != "function") {
        uf(t2, new vv);
        return;
      }
      r2.writing = false, r2.writecb = null, r2.length -= r2.writelen, r2.writelen = 0, e22 ? (e22.stack, r2.errored || (r2.errored = e22), t2._readableState && !t2._readableState.errored && (t2._readableState.errored = e22), o2 ? Mn.nextTick(uv, t2, r2, e22, f4) : uv(t2, r2, e22, f4)) : (r2.buffered.length > r2.bufferedIndex && Gh(t2, r2), o2 ? r2.afterWriteTickInfo !== null && r2.afterWriteTickInfo.cb === f4 ? r2.afterWriteTickInfo.count++ : (r2.afterWriteTickInfo = { count: 1, cb: f4, stream: t2, state: r2 }, Mn.nextTick(mx, r2.afterWriteTickInfo)) : gv(t2, r2, 1, f4));
    }
    function mx({ stream: t2, state: e22, count: r2, cb: o2 }) {
      return e22.afterWriteTickInfo = null, gv(t2, e22, r2, o2);
    }
    function gv(t2, e22, r2, o2) {
      for (!e22.ending && !t2.destroyed && e22.length === 0 && e22.needDrain && (e22.needDrain = false, t2.emit("drain"));r2-- > 0; )
        e22.pendingcb--, o2();
      e22.destroyed && $h(e22), Yh(t2, e22);
    }
    function $h(t2) {
      if (t2.writing)
        return;
      for (let f4 = t2.bufferedIndex;f4 < t2.buffered.length; ++f4) {
        var e22;
        let { chunk: p32, callback: m4 } = t2.buffered[f4], y32 = t2.objectMode ? 1 : p32.length;
        t2.length -= y32, m4((e22 = t2.errored) !== null && e22 !== undefined ? e22 : new ga("write"));
      }
      let r2 = t2[lf].splice(0);
      for (let f4 = 0;f4 < r2.length; f4++) {
        var o2;
        r2[f4]((o2 = t2.errored) !== null && o2 !== undefined ? o2 : new ga("end"));
      }
      ts(t2);
    }
    function Gh(t2, e22) {
      if (e22.corked || e22.bufferProcessing || e22.destroyed || !e22.constructed)
        return;
      let { buffered: r2, bufferedIndex: o2, objectMode: f4 } = e22, p32 = r2.length - o2;
      if (!p32)
        return;
      let m4 = o2;
      if (e22.bufferProcessing = true, p32 > 1 && t2._writev) {
        e22.pendingcb -= p32 - 1;
        let y32 = e22.allNoop ? Vh : (x32) => {
          for (let S3 = m4;S3 < r2.length; ++S3)
            r2[S3].callback(x32);
        }, M3 = e22.allNoop && m4 === 0 ? r2 : lv(r2, m4);
        M3.allBuffers = e22.allBuffers, hv(t2, e22, true, e22.length, M3, "", y32), ts(e22);
      } else {
        do {
          let { chunk: y32, encoding: M3, callback: x32 } = r2[m4];
          r2[m4++] = null;
          let S3 = f4 ? 1 : y32.length;
          hv(t2, e22, false, S3, y32, M3, x32);
        } while (m4 < r2.length && !e22.writing);
        m4 === r2.length ? ts(e22) : m4 > 256 ? (r2.splice(0, m4), e22.bufferedIndex = 0) : e22.bufferedIndex = m4;
      }
      e22.bufferProcessing = false;
    }
    ot.prototype._write = function(t2, e22, r2) {
      if (this._writev)
        this._writev([{ chunk: t2, encoding: e22 }], r2);
      else
        throw new ux("_write()");
    };
    ot.prototype._writev = null;
    ot.prototype.end = function(t2, e22, r2) {
      let o2 = this._writableState;
      typeof t2 == "function" ? (r2 = t2, t2 = null, e22 = null) : typeof e22 == "function" && (r2 = e22, e22 = null);
      let f4;
      if (t2 != null) {
        let p32 = mv(this, t2, e22);
        p32 instanceof ex && (f4 = p32);
      }
      return o2.corked && (o2.corked = 1, this.uncork()), f4 || (!o2.errored && !o2.ending ? (o2.ending = true, Yh(this, o2, true), o2.ended = true) : o2.finished ? f4 = new dx("end") : o2.destroyed && (f4 = new ga("end"))), typeof r2 == "function" && (f4 || o2.finished ? Mn.nextTick(r2, f4) : o2[lf].push(r2)), this;
    };
    function es(t2) {
      return t2.ending && !t2.destroyed && t2.constructed && t2.length === 0 && !t2.errored && t2.buffered.length === 0 && !t2.finished && !t2.writing && !t2.errorEmitted && !t2.closeEmitted;
    }
    function gx(t2, e22) {
      let r2 = false;
      function o2(f4) {
        if (r2) {
          uf(t2, f4 ?? vv());
          return;
        }
        if (r2 = true, e22.pendingcb--, f4) {
          let p32 = e22[lf].splice(0);
          for (let m4 = 0;m4 < p32.length; m4++)
            p32[m4](f4);
          uf(t2, f4, e22.sync);
        } else
          es(e22) && (e22.prefinished = true, t2.emit("prefinish"), e22.pendingcb++, Mn.nextTick(Zh, t2, e22));
      }
      e22.sync = true, e22.pendingcb++;
      try {
        t2._final(o2);
      } catch (f4) {
        o2(f4);
      }
      e22.sync = false;
    }
    function yx(t2, e22) {
      !e22.prefinished && !e22.finalCalled && (typeof t2._final == "function" && !e22.destroyed ? (e22.finalCalled = true, gx(t2, e22)) : (e22.prefinished = true, t2.emit("prefinish")));
    }
    function Yh(t2, e22, r2) {
      es(e22) && (yx(t2, e22), e22.pendingcb === 0 && (r2 ? (e22.pendingcb++, Mn.nextTick((o2, f4) => {
        es(f4) ? Zh(o2, f4) : f4.pendingcb--;
      }, t2, e22)) : es(e22) && (e22.pendingcb++, Zh(t2, e22))));
    }
    function Zh(t2, e22) {
      e22.pendingcb--, e22.finished = true;
      let r2 = e22[lf].splice(0);
      for (let o2 = 0;o2 < r2.length; o2++)
        r2[o2]();
      if (t2.emit("finish"), e22.autoDestroy) {
        let o2 = t2._readableState;
        (!o2 || o2.autoDestroy && (o2.endEmitted || o2.readable === false)) && t2.destroy();
      }
    }
    tx(ot.prototype, { closed: { __proto__: null, get() {
      return this._writableState ? this._writableState.closed : false;
    } }, destroyed: { __proto__: null, get() {
      return this._writableState ? this._writableState.destroyed : false;
    }, set(t2) {
      this._writableState && (this._writableState.destroyed = t2);
    } }, writable: { __proto__: null, get() {
      let t2 = this._writableState;
      return !!t2 && t2.writable !== false && !t2.destroyed && !t2.errored && !t2.ending && !t2.ended;
    }, set(t2) {
      this._writableState && (this._writableState.writable = !!t2);
    } }, writableFinished: { __proto__: null, get() {
      return this._writableState ? this._writableState.finished : false;
    } }, writableObjectMode: { __proto__: null, get() {
      return this._writableState ? this._writableState.objectMode : false;
    } }, writableBuffer: { __proto__: null, get() {
      return this._writableState && this._writableState.getBuffer();
    } }, writableEnded: { __proto__: null, get() {
      return this._writableState ? this._writableState.ending : false;
    } }, writableNeedDrain: { __proto__: null, get() {
      let t2 = this._writableState;
      return t2 ? !t2.destroyed && !t2.ending && t2.needDrain : false;
    } }, writableHighWaterMark: { __proto__: null, get() {
      return this._writableState && this._writableState.highWaterMark;
    } }, writableCorked: { __proto__: null, get() {
      return this._writableState ? this._writableState.corked : 0;
    } }, writableLength: { __proto__: null, get() {
      return this._writableState && this._writableState.length;
    } }, errored: { __proto__: null, enumerable: false, get() {
      return this._writableState ? this._writableState.errored : null;
    } }, writableAborted: { __proto__: null, enumerable: false, get: function() {
      return !!(this._writableState.writable !== false && (this._writableState.destroyed || this._writableState.errored) && !this._writableState.finished);
    } } });
    var wx = rs.destroy;
    ot.prototype.destroy = function(t2, e22) {
      let r2 = this._writableState;
      return !r2.destroyed && (r2.bufferedIndex < r2.buffered.length || r2[lf].length) && Mn.nextTick($h, r2), wx.call(this, t2, e22), this;
    };
    ot.prototype._undestroy = rs.undestroy;
    ot.prototype._destroy = function(t2, e22) {
      e22(t2);
    };
    ot.prototype[fx.captureRejectionSymbol] = function(t2) {
      this.destroy(t2);
    };
    var jh;
    function yv() {
      return jh === undefined && (jh = {}), jh;
    }
    ot.fromWeb = function(t2, e22) {
      return yv().newStreamWritableFromWritableStream(t2, e22);
    };
    ot.toWeb = function(t2) {
      return yv().newWritableStreamFromStreamWritable(t2);
    };
  });
  kv = T3((KI, Tv) => {
    var Jh = (Oi(), ur(pr)), Mx = Ut(), { isReadable: _x, isWritable: xx, isIterable: Mv, isNodeStream: Sx, isReadableNodeStream: _v, isWritableNodeStream: xv, isDuplexNodeStream: Ex } = Fi(), Sv = Ui(), { AbortError: Iv, codes: { ERR_INVALID_ARG_TYPE: Ax, ERR_INVALID_RETURN_VALUE: Ev } } = Xt(), { destroyer: df } = yn(), Rx = Qr(), Bx = ba(), { createDeferredPromise: Av } = Gr(), Rv = Oh(), Bv = globalThis.Blob || Mx.Blob, qx = typeof Bv < "u" ? function(e22) {
      return e22 instanceof Bv;
    } : function(e22) {
      return false;
    }, Ix = globalThis.AbortController || Lo().AbortController, { FunctionPrototypeCall: qv } = Tt(), _n = class extends Rx {
      constructor(e22) {
        super(e22), e22?.readable === false && (this._readableState.readable = false, this._readableState.ended = true, this._readableState.endEmitted = true), e22?.writable === false && (this._writableState.writable = false, this._writableState.ending = true, this._writableState.ended = true, this._writableState.finished = true);
      }
    };
    Tv.exports = function t(e22, r2) {
      if (Ex(e22))
        return e22;
      if (_v(e22))
        return is({ readable: e22 });
      if (xv(e22))
        return is({ writable: e22 });
      if (Sx(e22))
        return is({ writable: false, readable: false });
      if (typeof e22 == "function") {
        let { value: f4, write: p32, final: m4, destroy: y32 } = Tx(e22);
        if (Mv(f4))
          return Rv(_n, f4, { objectMode: true, write: p32, final: m4, destroy: y32 });
        let M3 = f4?.then;
        if (typeof M3 == "function") {
          let x32, S3 = qv(M3, f4, (E3) => {
            if (E3 != null)
              throw new Ev("nully", "body", E3);
          }, (E3) => {
            df(x32, E3);
          });
          return x32 = new _n({ objectMode: true, readable: false, write: p32, final(E3) {
            m4(async () => {
              try {
                await S3, Jh.nextTick(E3, null);
              } catch (B5) {
                Jh.nextTick(E3, B5);
              }
            });
          }, destroy: y32 });
        }
        throw new Ev("Iterable, AsyncIterable or AsyncFunction", r2, f4);
      }
      if (qx(e22))
        return t(e22.arrayBuffer());
      if (Mv(e22))
        return Rv(_n, e22, { objectMode: true, writable: false });
      if (typeof e22?.writable == "object" || typeof e22?.readable == "object") {
        let f4 = e22 != null && e22.readable ? _v(e22?.readable) ? e22?.readable : t(e22.readable) : undefined, p32 = e22 != null && e22.writable ? xv(e22?.writable) ? e22?.writable : t(e22.writable) : undefined;
        return is({ readable: f4, writable: p32 });
      }
      let o2 = e22?.then;
      if (typeof o2 == "function") {
        let f4;
        return qv(o2, e22, (p32) => {
          p32 != null && f4.push(p32), f4.push(null);
        }, (p32) => {
          df(f4, p32);
        }), f4 = new _n({ objectMode: true, writable: false, read() {} });
      }
      throw new Ax(r2, ["Blob", "ReadableStream", "WritableStream", "Stream", "Iterable", "AsyncIterable", "Function", "{ readable, writable } pair", "Promise"], e22);
    };
    function Tx(t2) {
      let { promise: e22, resolve: r2 } = Av(), o2 = new Ix, f4 = o2.signal;
      return { value: t2(async function* () {
        for (;; ) {
          let m4 = e22;
          e22 = null;
          let { chunk: y32, done: M3, cb: x32 } = await m4;
          if (Jh.nextTick(x32), M3)
            return;
          if (f4.aborted)
            throw new Iv(undefined, { cause: f4.reason });
          ({ promise: e22, resolve: r2 } = Av()), yield y32;
        }
      }(), { signal: f4 }), write(m4, y32, M3) {
        let x32 = r2;
        r2 = null, x32({ chunk: m4, done: false, cb: M3 });
      }, final(m4) {
        let y32 = r2;
        r2 = null, y32({ done: true, cb: m4 });
      }, destroy(m4, y32) {
        o2.abort(), y32(m4);
      } };
    }
    function is(t2) {
      let e22 = t2.readable && typeof t2.readable.read != "function" ? Bx.wrap(t2.readable) : t2.readable, r2 = t2.writable, o2 = !!_x(e22), f4 = !!xx(r2), p32, m4, y32, M3, x32;
      function S3(E3) {
        let B5 = M3;
        M3 = null, B5 ? B5(E3) : E3 ? x32.destroy(E3) : !o2 && !f4 && x32.destroy();
      }
      return x32 = new _n({ readableObjectMode: !!(e22 != null && e22.readableObjectMode), writableObjectMode: !!(r2 != null && r2.writableObjectMode), readable: o2, writable: f4 }), f4 && (Sv(r2, (E3) => {
        f4 = false, E3 && df(e22, E3), S3(E3);
      }), x32._write = function(E3, B5, q2) {
        r2.write(E3, B5) ? q2() : p32 = q2;
      }, x32._final = function(E3) {
        r2.end(), m4 = E3;
      }, r2.on("drain", function() {
        if (p32) {
          let E3 = p32;
          p32 = null, E3();
        }
      }), r2.on("finish", function() {
        if (m4) {
          let E3 = m4;
          m4 = null, E3();
        }
      })), o2 && (Sv(e22, (E3) => {
        o2 = false, E3 && df(e22, E3), S3(E3);
      }), e22.on("readable", function() {
        if (y32) {
          let E3 = y32;
          y32 = null, E3();
        }
      }), e22.on("end", function() {
        x32.push(null);
      }), x32._read = function() {
        for (;; ) {
          let E3 = e22.read();
          if (E3 === null) {
            y32 = x32._read;
            return;
          }
          if (!x32.push(E3))
            return;
        }
      }), x32._destroy = function(E3, B5) {
        !E3 && M3 !== null && (E3 = new Iv), y32 = null, p32 = null, m4 = null, M3 === null ? B5(E3) : (M3 = B5, df(r2, E3), df(e22, E3));
      }, x32;
    }
  });
  Qr = T3((jI, Dv) => {
    var { ObjectDefineProperties: kx, ObjectGetOwnPropertyDescriptor: bi, ObjectKeys: Lx, ObjectSetPrototypeOf: Lv } = Tt();
    Dv.exports = kr;
    var tu = ba(), vr = Xh();
    Lv(kr.prototype, tu.prototype);
    Lv(kr, tu);
    {
      let t2 = Lx(vr.prototype);
      for (let e22 = 0;e22 < t2.length; e22++) {
        let r2 = t2[e22];
        kr.prototype[r2] || (kr.prototype[r2] = vr.prototype[r2]);
      }
    }
    function kr(t2) {
      if (!(this instanceof kr))
        return new kr(t2);
      tu.call(this, t2), vr.call(this, t2), t2 ? (this.allowHalfOpen = t2.allowHalfOpen !== false, t2.readable === false && (this._readableState.readable = false, this._readableState.ended = true, this._readableState.endEmitted = true), t2.writable === false && (this._writableState.writable = false, this._writableState.ending = true, this._writableState.ended = true, this._writableState.finished = true)) : this.allowHalfOpen = true;
    }
    kx(kr.prototype, { writable: { __proto__: null, ...bi(vr.prototype, "writable") }, writableHighWaterMark: { __proto__: null, ...bi(vr.prototype, "writableHighWaterMark") }, writableObjectMode: { __proto__: null, ...bi(vr.prototype, "writableObjectMode") }, writableBuffer: { __proto__: null, ...bi(vr.prototype, "writableBuffer") }, writableLength: { __proto__: null, ...bi(vr.prototype, "writableLength") }, writableFinished: { __proto__: null, ...bi(vr.prototype, "writableFinished") }, writableCorked: { __proto__: null, ...bi(vr.prototype, "writableCorked") }, writableEnded: { __proto__: null, ...bi(vr.prototype, "writableEnded") }, writableNeedDrain: { __proto__: null, ...bi(vr.prototype, "writableNeedDrain") }, destroyed: { __proto__: null, get() {
      return this._readableState === undefined || this._writableState === undefined ? false : this._readableState.destroyed && this._writableState.destroyed;
    }, set(t2) {
      this._readableState && this._writableState && (this._readableState.destroyed = t2, this._writableState.destroyed = t2);
    } } });
    var Qh;
    function Nv() {
      return Qh === undefined && (Qh = {}), Qh;
    }
    kr.fromWeb = function(t2, e22) {
      return Nv().newStreamDuplexFromReadableWritablePair(t2, e22);
    };
    kr.toWeb = function(t2) {
      return Nv().newReadableWritablePairFromDuplex(t2);
    };
    var eu;
    kr.from = function(t2) {
      return eu || (eu = kv()), eu(t2, "body");
    };
  });
  nu = T3((ZI, Cv) => {
    var { ObjectSetPrototypeOf: Pv, Symbol: Nx } = Tt();
    Cv.exports = mi;
    var { ERR_METHOD_NOT_IMPLEMENTED: Dx } = Xt().codes, iu = Qr(), { getHighWaterMark: Px } = Yo();
    Pv(mi.prototype, iu.prototype);
    Pv(mi, iu);
    var wa = Nx("kCallback");
    function mi(t2) {
      if (!(this instanceof mi))
        return new mi(t2);
      let e22 = t2 ? Px(this, t2, "readableHighWaterMark", true) : null;
      e22 === 0 && (t2 = { ...t2, highWaterMark: null, readableHighWaterMark: e22, writableHighWaterMark: t2.writableHighWaterMark || 0 }), iu.call(this, t2), this._readableState.sync = false, this[wa] = null, t2 && (typeof t2.transform == "function" && (this._transform = t2.transform), typeof t2.flush == "function" && (this._flush = t2.flush)), this.on("prefinish", Cx);
    }
    function ru(t2) {
      typeof this._flush == "function" && !this.destroyed ? this._flush((e22, r2) => {
        if (e22) {
          t2 ? t2(e22) : this.destroy(e22);
          return;
        }
        r2 != null && this.push(r2), this.push(null), t2 && t2();
      }) : (this.push(null), t2 && t2());
    }
    function Cx() {
      this._final !== ru && ru.call(this);
    }
    mi.prototype._final = ru;
    mi.prototype._transform = function(t2, e22, r2) {
      throw new Dx("_transform()");
    };
    mi.prototype._write = function(t2, e22, r2) {
      let o2 = this._readableState, f4 = this._writableState, p32 = o2.length;
      this._transform(t2, e22, (m4, y32) => {
        if (m4) {
          r2(m4);
          return;
        }
        y32 != null && this.push(y32), f4.ended || p32 === o2.length || o2.length < o2.highWaterMark ? r2() : this[wa] = r2;
      });
    };
    mi.prototype._read = function() {
      if (this[wa]) {
        let t2 = this[wa];
        this[wa] = null, t2();
      }
    };
  });
  au = T3((VI, Fv) => {
    var { ObjectSetPrototypeOf: Ov } = Tt();
    Fv.exports = cf;
    var fu = nu();
    Ov(cf.prototype, fu.prototype);
    Ov(cf, fu);
    function cf(t2) {
      if (!(this instanceof cf))
        return new cf(t2);
      fu.call(this, t2);
    }
    cf.prototype._transform = function(t2, e22, r2) {
      r2(null, t2);
    };
  });
  as = T3(($I, Zv) => {
    var ns = (Oi(), ur(pr)), { ArrayIsArray: Ox, Promise: Fx, SymbolAsyncIterator: Ux } = Tt(), fs = Ui(), { once: zx } = Gr(), Hx = yn(), Uv = Qr(), { aggregateTwoErrors: Wx, codes: { ERR_INVALID_ARG_TYPE: Kv, ERR_INVALID_RETURN_VALUE: ou, ERR_MISSING_ARGS: Kx, ERR_STREAM_DESTROYED: jx, ERR_STREAM_PREMATURE_CLOSE: Zx }, AbortError: Vx } = Xt(), { validateFunction: $x, validateAbortSignal: Gx } = pa(), { isIterable: pf, isReadable: su, isReadableNodeStream: lu, isNodeStream: zv } = Fi(), Yx = globalThis.AbortController || Lo().AbortController, hu, uu;
    function Hv(t2, e22, r2) {
      let o2 = false;
      t2.on("close", () => {
        o2 = true;
      });
      let f4 = fs(t2, { readable: e22, writable: r2 }, (p32) => {
        o2 = !p32;
      });
      return { destroy: (p32) => {
        o2 || (o2 = true, Hx.destroyer(t2, p32 || new jx("pipe")));
      }, cleanup: f4 };
    }
    function Xx(t2) {
      return $x(t2[t2.length - 1], "streams[stream.length - 1]"), t2.pop();
    }
    function Jx(t2) {
      if (pf(t2))
        return t2;
      if (lu(t2))
        return Qx(t2);
      throw new Kv("val", ["Readable", "Iterable", "AsyncIterable"], t2);
    }
    async function* Qx(t2) {
      uu || (uu = ba()), yield* uu.prototype[Ux].call(t2);
    }
    async function Wv(t2, e22, r2, { end: o2 }) {
      let f4, p32 = null, m4 = (x32) => {
        if (x32 && (f4 = x32), p32) {
          let S3 = p32;
          p32 = null, S3();
        }
      }, y32 = () => new Fx((x32, S3) => {
        f4 ? S3(f4) : p32 = () => {
          f4 ? S3(f4) : x32();
        };
      });
      e22.on("drain", m4);
      let M3 = fs(e22, { readable: false }, m4);
      try {
        e22.writableNeedDrain && await y32();
        for await (let x32 of t2)
          e22.write(x32) || await y32();
        o2 && e22.end(), await y32(), r2();
      } catch (x32) {
        r2(f4 !== x32 ? Wx(f4, x32) : x32);
      } finally {
        M3(), e22.off("drain", m4);
      }
    }
    function e7(...t2) {
      return jv(t2, zx(Xx(t2)));
    }
    function jv(t2, e22, r2) {
      if (t2.length === 1 && Ox(t2[0]) && (t2 = t2[0]), t2.length < 2)
        throw new Kx("streams");
      let o2 = new Yx, f4 = o2.signal, p32 = r2?.signal, m4 = [];
      Gx(p32, "options.signal");
      function y32() {
        q2(new Vx);
      }
      p32?.addEventListener("abort", y32);
      let M3, x32, S3 = [], E3 = 0;
      function B5(N3) {
        q2(N3, --E3 === 0);
      }
      function q2(N3, we) {
        if (N3 && (!M3 || M3.code === "ERR_STREAM_PREMATURE_CLOSE") && (M3 = N3), !(!M3 && !we)) {
          for (;S3.length; )
            S3.shift()(M3);
          p32?.removeEventListener("abort", y32), o2.abort(), we && (M3 || m4.forEach((ye) => ye()), ns.nextTick(e22, M3, x32));
        }
      }
      let L32;
      for (let N3 = 0;N3 < t2.length; N3++) {
        let we = t2[N3], ye = N3 < t2.length - 1, xe = N3 > 0, Re = ye || r2?.end !== false, Ee = N3 === t2.length - 1;
        if (zv(we)) {
          let Ae = function(P22) {
            P22 && P22.name !== "AbortError" && P22.code !== "ERR_STREAM_PREMATURE_CLOSE" && B5(P22);
          };
          var _e = Ae;
          if (Re) {
            let { destroy: P22, cleanup: Se } = Hv(we, ye, xe);
            S3.push(P22), su(we) && Ee && m4.push(Se);
          }
          we.on("error", Ae), su(we) && Ee && m4.push(() => {
            we.removeListener("error", Ae);
          });
        }
        if (N3 === 0)
          if (typeof we == "function") {
            if (L32 = we({ signal: f4 }), !pf(L32))
              throw new ou("Iterable, AsyncIterable or Stream", "source", L32);
          } else
            pf(we) || lu(we) ? L32 = we : L32 = Uv.from(we);
        else if (typeof we == "function")
          if (L32 = Jx(L32), L32 = we(L32, { signal: f4 }), ye) {
            if (!pf(L32, true))
              throw new ou("AsyncIterable", `transform[${N3 - 1}]`, L32);
          } else {
            var ge;
            hu || (hu = au());
            let Ae = new hu({ objectMode: true }), P22 = (ge = L32) === null || ge === undefined ? undefined : ge.then;
            if (typeof P22 == "function")
              E3++, P22.call(L32, (i2) => {
                x32 = i2, i2 != null && Ae.write(i2), Re && Ae.end(), ns.nextTick(B5);
              }, (i2) => {
                Ae.destroy(i2), ns.nextTick(B5, i2);
              });
            else if (pf(L32, true))
              E3++, Wv(L32, Ae, B5, { end: Re });
            else
              throw new ou("AsyncIterable or Promise", "destination", L32);
            L32 = Ae;
            let { destroy: Se, cleanup: v3 } = Hv(L32, false, true);
            S3.push(Se), Ee && m4.push(v3);
          }
        else if (zv(we)) {
          if (lu(L32)) {
            E3 += 2;
            let Ae = t7(L32, we, B5, { end: Re });
            su(we) && Ee && m4.push(Ae);
          } else if (pf(L32))
            E3++, Wv(L32, we, B5, { end: Re });
          else
            throw new Kv("val", ["Readable", "Iterable", "AsyncIterable"], L32);
          L32 = we;
        } else
          L32 = Uv.from(we);
      }
      return (f4 != null && f4.aborted || p32 != null && p32.aborted) && ns.nextTick(y32), L32;
    }
    function t7(t2, e22, r2, { end: o2 }) {
      let f4 = false;
      return e22.on("close", () => {
        f4 || r2(new Zx);
      }), t2.pipe(e22, { end: o2 }), o2 ? t2.once("end", () => {
        f4 = true, e22.end();
      }) : r2(), fs(t2, { readable: true, writable: false }, (p32) => {
        let m4 = t2._readableState;
        p32 && p32.code === "ERR_STREAM_PREMATURE_CLOSE" && m4 && m4.ended && !m4.errored && !m4.errorEmitted ? t2.once("end", r2).once("error", r2) : r2(p32);
      }), fs(e22, { readable: false, writable: true }, r2);
    }
    Zv.exports = { pipelineImpl: jv, pipeline: e7 };
  });
  Xv = T3((GI, Yv) => {
    var { pipeline: r7 } = as(), os = Qr(), { destroyer: i7 } = yn(), { isNodeStream: n7, isReadable: Vv, isWritable: $v } = Fi(), { AbortError: f7, codes: { ERR_INVALID_ARG_VALUE: Gv, ERR_MISSING_ARGS: a7 } } = Xt();
    Yv.exports = function(...e22) {
      if (e22.length === 0)
        throw new a7("streams");
      if (e22.length === 1)
        return os.from(e22[0]);
      let r2 = [...e22];
      if (typeof e22[0] == "function" && (e22[0] = os.from(e22[0])), typeof e22[e22.length - 1] == "function") {
        let q2 = e22.length - 1;
        e22[q2] = os.from(e22[q2]);
      }
      for (let q2 = 0;q2 < e22.length; ++q2)
        if (!!n7(e22[q2])) {
          if (q2 < e22.length - 1 && !Vv(e22[q2]))
            throw new Gv(`streams[${q2}]`, r2[q2], "must be readable");
          if (q2 > 0 && !$v(e22[q2]))
            throw new Gv(`streams[${q2}]`, r2[q2], "must be writable");
        }
      let o2, f4, p32, m4, y32;
      function M3(q2) {
        let L32 = m4;
        m4 = null, L32 ? L32(q2) : q2 ? y32.destroy(q2) : !B5 && !E3 && y32.destroy();
      }
      let x32 = e22[0], S3 = r7(e22, M3), E3 = !!$v(x32), B5 = !!Vv(S3);
      return y32 = new os({ writableObjectMode: !!(x32 != null && x32.writableObjectMode), readableObjectMode: !!(S3 != null && S3.writableObjectMode), writable: E3, readable: B5 }), E3 && (y32._write = function(q2, L32, ge) {
        x32.write(q2, L32) ? ge() : o2 = ge;
      }, y32._final = function(q2) {
        x32.end(), f4 = q2;
      }, x32.on("drain", function() {
        if (o2) {
          let q2 = o2;
          o2 = null, q2();
        }
      }), S3.on("finish", function() {
        if (f4) {
          let q2 = f4;
          f4 = null, q2();
        }
      })), B5 && (S3.on("readable", function() {
        if (p32) {
          let q2 = p32;
          p32 = null, q2();
        }
      }), S3.on("end", function() {
        y32.push(null);
      }), y32._read = function() {
        for (;; ) {
          let q2 = S3.read();
          if (q2 === null) {
            p32 = y32._read;
            return;
          }
          if (!y32.push(q2))
            return;
        }
      }), y32._destroy = function(q2, L32) {
        !q2 && m4 !== null && (q2 = new f7), p32 = null, o2 = null, f4 = null, m4 === null ? L32(q2) : (m4 = L32, i7(S3, q2));
      }, y32;
    };
  });
  du = T3((YI, Jv) => {
    var { ArrayPrototypePop: o7, Promise: s7 } = Tt(), { isIterable: h7, isNodeStream: u7 } = Fi(), { pipelineImpl: l7 } = as(), { finished: d7 } = Ui();
    function c7(...t2) {
      return new s7((e22, r2) => {
        let o2, f4, p32 = t2[t2.length - 1];
        if (p32 && typeof p32 == "object" && !u7(p32) && !h7(p32)) {
          let m4 = o7(t2);
          o2 = m4.signal, f4 = m4.end;
        }
        l7(t2, (m4, y32) => {
          m4 ? r2(m4) : e22(y32);
        }, { signal: o2, end: f4 });
      });
    }
    Jv.exports = { finished: d7, pipeline: c7 };
  });
  sb = T3((XI, ob) => {
    var { Buffer: p7 } = Ut(), { ObjectDefineProperty: gi, ObjectKeys: tb, ReflectApply: rb } = Tt(), { promisify: { custom: ib } } = Gr(), { streamReturningOperators: Qv, promiseReturningOperators: eb } = q1(), { codes: { ERR_ILLEGAL_CONSTRUCTOR: nb } } = Xt(), v7 = Xv(), { pipeline: fb } = as(), { destroyer: b7 } = yn(), ab = Ui(), cu = du(), pu = Fi(), ct = ob.exports = Zo().Stream;
    ct.isDisturbed = pu.isDisturbed;
    ct.isErrored = pu.isErrored;
    ct.isReadable = pu.isReadable;
    ct.Readable = ba();
    for (let t2 of tb(Qv)) {
      let r2 = function(...o2) {
        if (new.target)
          throw nb();
        return ct.Readable.from(rb(e22, this, o2));
      };
      g7 = r2;
      let e22 = Qv[t2];
      gi(r2, "name", { __proto__: null, value: e22.name }), gi(r2, "length", { __proto__: null, value: e22.length }), gi(ct.Readable.prototype, t2, { __proto__: null, value: r2, enumerable: false, configurable: true, writable: true });
    }
    var g7;
    for (let t2 of tb(eb)) {
      let r2 = function(...f4) {
        if (new.target)
          throw nb();
        return rb(e22, this, f4);
      };
      g7 = r2;
      let e22 = eb[t2];
      gi(r2, "name", { __proto__: null, value: e22.name }), gi(r2, "length", { __proto__: null, value: e22.length }), gi(ct.Readable.prototype, t2, { __proto__: null, value: r2, enumerable: false, configurable: true, writable: true });
    }
    var g7;
    ct.Writable = Xh();
    ct.Duplex = Qr();
    ct.Transform = nu();
    ct.PassThrough = au();
    ct.pipeline = fb;
    var { addAbortSignal: m7 } = $o();
    ct.addAbortSignal = m7;
    ct.finished = ab;
    ct.destroy = b7;
    ct.compose = v7;
    gi(ct, "promises", { __proto__: null, configurable: true, enumerable: true, get() {
      return cu;
    } });
    gi(fb, ib, { __proto__: null, enumerable: true, get() {
      return cu.pipeline;
    } });
    gi(ab, ib, { __proto__: null, enumerable: true, get() {
      return cu.finished;
    } });
    ct.Stream = ct;
    ct._isUint8Array = function(e22) {
      return e22 instanceof Uint8Array;
    };
    ct._uint8ArrayToBuffer = function(e22) {
      return p7.from(e22.buffer, e22.byteOffset, e22.byteLength);
    };
  });
  vu = T3((JI, pt) => {
    var Lt = sb(), y7 = du(), w7 = Lt.Readable.destroy;
    pt.exports = Lt.Readable;
    pt.exports._uint8ArrayToBuffer = Lt._uint8ArrayToBuffer;
    pt.exports._isUint8Array = Lt._isUint8Array;
    pt.exports.isDisturbed = Lt.isDisturbed;
    pt.exports.isErrored = Lt.isErrored;
    pt.exports.isReadable = Lt.isReadable;
    pt.exports.Readable = Lt.Readable;
    pt.exports.Writable = Lt.Writable;
    pt.exports.Duplex = Lt.Duplex;
    pt.exports.Transform = Lt.Transform;
    pt.exports.PassThrough = Lt.PassThrough;
    pt.exports.addAbortSignal = Lt.addAbortSignal;
    pt.exports.finished = Lt.finished;
    pt.exports.destroy = Lt.destroy;
    pt.exports.destroy = w7;
    pt.exports.pipeline = Lt.pipeline;
    pt.exports.compose = Lt.compose;
    Object.defineProperty(Lt, "promises", { configurable: true, enumerable: true, get() {
      return y7;
    } });
    pt.exports.Stream = Lt.Stream;
    pt.exports.default = pt.exports;
  });
  vf = {};
  Xa(vf, { default: () => M7 });
  hb = A02(() => {
    lt(vf, rn(vu()));
    M7 = rn(vu());
  });
  yi = T3((eT, db) => {
    var ub = Te().Buffer, lb = (hb(), ur(vf)).Transform, _7 = lo().StringDecoder, x7 = Ie();
    function Lr(t2) {
      lb.call(this), this.hashMode = typeof t2 == "string", this.hashMode ? this[t2] = this._finalOrDigest : this.final = this._finalOrDigest, this._final && (this.__final = this._final, this._final = null), this._decoder = null, this._encoding = null;
    }
    x7(Lr, lb);
    Lr.prototype.update = function(t2, e22, r2) {
      typeof t2 == "string" && (t2 = ub.from(t2, e22));
      var o2 = this._update(t2);
      return this.hashMode ? this : (r2 && (o2 = this._toString(o2, r2)), o2);
    };
    Lr.prototype.setAutoPadding = function() {};
    Lr.prototype.getAuthTag = function() {
      throw new Error("trying to get auth tag in unsupported state");
    };
    Lr.prototype.setAuthTag = function() {
      throw new Error("trying to set auth tag in unsupported state");
    };
    Lr.prototype.setAAD = function() {
      throw new Error("trying to set aad in unsupported state");
    };
    Lr.prototype._transform = function(t2, e22, r2) {
      var o2;
      try {
        this.hashMode ? this._update(t2) : this.push(this._update(t2));
      } catch (f4) {
        o2 = f4;
      } finally {
        r2(o2);
      }
    };
    Lr.prototype._flush = function(t2) {
      var e22;
      try {
        this.push(this.__final());
      } catch (r2) {
        e22 = r2;
      }
      t2(e22);
    };
    Lr.prototype._finalOrDigest = function(t2) {
      var e22 = this.__final() || ub.alloc(0);
      return t2 && (e22 = this._toString(e22, t2, true)), e22;
    };
    Lr.prototype._toString = function(t2, e22, r2) {
      if (this._decoder || (this._decoder = new _7(e22), this._encoding = e22), this._encoding !== e22)
        throw new Error("can't switch encodings");
      var o2 = this._decoder.write(t2);
      return r2 && (o2 += this._decoder.end()), o2;
    };
    db.exports = Lr;
  });
  bf = T3((tT, pb) => {
    var S7 = Ie(), E7 = Eo(), A7 = Ro(), R7 = To(), cb = yi();
    function ss(t2) {
      cb.call(this, "digest"), this._hash = t2;
    }
    S7(ss, cb);
    ss.prototype._update = function(t2) {
      this._hash.update(t2);
    };
    ss.prototype._final = function() {
      return this._hash.digest();
    };
    pb.exports = function(e22) {
      return e22 = e22.toLowerCase(), e22 === "md5" ? new E7 : e22 === "rmd160" || e22 === "ripemd160" ? new A7 : new ss(R7(e22));
    };
  });
  mb = T3((rT, bb) => {
    var B7 = Ie(), xn = Te().Buffer, vb = yi(), q7 = xn.alloc(128), mf = 64;
    function hs(t2, e22) {
      vb.call(this, "digest"), typeof e22 == "string" && (e22 = xn.from(e22)), this._alg = t2, this._key = e22, e22.length > mf ? e22 = t2(e22) : e22.length < mf && (e22 = xn.concat([e22, q7], mf));
      for (var r2 = this._ipad = xn.allocUnsafe(mf), o2 = this._opad = xn.allocUnsafe(mf), f4 = 0;f4 < mf; f4++)
        r2[f4] = e22[f4] ^ 54, o2[f4] = e22[f4] ^ 92;
      this._hash = [r2];
    }
    B7(hs, vb);
    hs.prototype._update = function(t2) {
      this._hash.push(t2);
    };
    hs.prototype._final = function() {
      var t2 = this._alg(xn.concat(this._hash));
      return this._alg(xn.concat([this._opad, t2]));
    };
    bb.exports = hs;
  });
  bu = T3((iT, gb) => {
    var I7 = Eo();
    gb.exports = function(t2) {
      return new I7().update(t2).digest();
    };
  });
  yu = T3((nT, wb) => {
    var T7 = Ie(), k7 = mb(), yb = yi(), Ma = Te().Buffer, L7 = bu(), mu = Ro(), gu = To(), N7 = Ma.alloc(128);
    function _a(t2, e22) {
      yb.call(this, "digest"), typeof e22 == "string" && (e22 = Ma.from(e22));
      var r2 = t2 === "sha512" || t2 === "sha384" ? 128 : 64;
      if (this._alg = t2, this._key = e22, e22.length > r2) {
        var o2 = t2 === "rmd160" ? new mu : gu(t2);
        e22 = o2.update(e22).digest();
      } else
        e22.length < r2 && (e22 = Ma.concat([e22, N7], r2));
      for (var f4 = this._ipad = Ma.allocUnsafe(r2), p32 = this._opad = Ma.allocUnsafe(r2), m4 = 0;m4 < r2; m4++)
        f4[m4] = e22[m4] ^ 54, p32[m4] = e22[m4] ^ 92;
      this._hash = t2 === "rmd160" ? new mu : gu(t2), this._hash.update(f4);
    }
    T7(_a, yb);
    _a.prototype._update = function(t2) {
      this._hash.update(t2);
    };
    _a.prototype._final = function() {
      var t2 = this._hash.digest(), e22 = this._alg === "rmd160" ? new mu : gu(this._alg);
      return e22.update(this._opad).update(t2).digest();
    };
    wb.exports = function(e22, r2) {
      return e22 = e22.toLowerCase(), e22 === "rmd160" || e22 === "ripemd160" ? new _a("rmd160", r2) : e22 === "md5" ? new k7(L7, r2) : new _a(e22, r2);
    };
  });
  wu = T3((fT, D7) => {
    D7.exports = { sha224WithRSAEncryption: { sign: "rsa", hash: "sha224", id: "302d300d06096086480165030402040500041c" }, "RSA-SHA224": { sign: "ecdsa/rsa", hash: "sha224", id: "302d300d06096086480165030402040500041c" }, sha256WithRSAEncryption: { sign: "rsa", hash: "sha256", id: "3031300d060960864801650304020105000420" }, "RSA-SHA256": { sign: "ecdsa/rsa", hash: "sha256", id: "3031300d060960864801650304020105000420" }, sha384WithRSAEncryption: { sign: "rsa", hash: "sha384", id: "3041300d060960864801650304020205000430" }, "RSA-SHA384": { sign: "ecdsa/rsa", hash: "sha384", id: "3041300d060960864801650304020205000430" }, sha512WithRSAEncryption: { sign: "rsa", hash: "sha512", id: "3051300d060960864801650304020305000440" }, "RSA-SHA512": { sign: "ecdsa/rsa", hash: "sha512", id: "3051300d060960864801650304020305000440" }, "RSA-SHA1": { sign: "rsa", hash: "sha1", id: "3021300906052b0e03021a05000414" }, "ecdsa-with-SHA1": { sign: "ecdsa", hash: "sha1", id: "" }, sha256: { sign: "ecdsa", hash: "sha256", id: "" }, sha224: { sign: "ecdsa", hash: "sha224", id: "" }, sha384: { sign: "ecdsa", hash: "sha384", id: "" }, sha512: { sign: "ecdsa", hash: "sha512", id: "" }, "DSA-SHA": { sign: "dsa", hash: "sha1", id: "" }, "DSA-SHA1": { sign: "dsa", hash: "sha1", id: "" }, DSA: { sign: "dsa", hash: "sha1", id: "" }, "DSA-WITH-SHA224": { sign: "dsa", hash: "sha224", id: "" }, "DSA-SHA224": { sign: "dsa", hash: "sha224", id: "" }, "DSA-WITH-SHA256": { sign: "dsa", hash: "sha256", id: "" }, "DSA-SHA256": { sign: "dsa", hash: "sha256", id: "" }, "DSA-WITH-SHA384": { sign: "dsa", hash: "sha384", id: "" }, "DSA-SHA384": { sign: "dsa", hash: "sha384", id: "" }, "DSA-WITH-SHA512": { sign: "dsa", hash: "sha512", id: "" }, "DSA-SHA512": { sign: "dsa", hash: "sha512", id: "" }, "DSA-RIPEMD160": { sign: "dsa", hash: "rmd160", id: "" }, ripemd160WithRSA: { sign: "rsa", hash: "rmd160", id: "3021300906052b2403020105000414" }, "RSA-RIPEMD160": { sign: "rsa", hash: "rmd160", id: "3021300906052b2403020105000414" }, md5WithRSAEncryption: { sign: "rsa", hash: "md5", id: "3020300c06082a864886f70d020505000410" }, "RSA-MD5": { sign: "rsa", hash: "md5", id: "3020300c06082a864886f70d020505000410" } };
  });
  _b = T3((aT, Mb) => {
    Mb.exports = wu();
  });
  Mu = T3((oT, xb) => {
    var P7 = Math.pow(2, 30) - 1;
    xb.exports = function(t2, e22) {
      if (typeof t2 != "number")
        throw new TypeError("Iterations not a number");
      if (t2 < 0)
        throw new TypeError("Bad iterations");
      if (typeof e22 != "number")
        throw new TypeError("Key length not a number");
      if (e22 < 0 || e22 > P7 || e22 !== e22)
        throw new TypeError("Bad key length");
    };
  });
  _u = T3((sT, Eb) => {
    var us;
    global.process && global.process.browser ? us = "utf-8" : global.process && global.process.version ? (Sb = parseInt(process.version.split(".")[0].slice(1), 10), us = Sb >= 6 ? "utf-8" : "binary") : us = "utf-8";
    var Sb;
    Eb.exports = us;
  });
  Su = T3((hT, Ab) => {
    var xu = Te().Buffer;
    Ab.exports = function(t2, e22, r2) {
      if (xu.isBuffer(t2))
        return t2;
      if (typeof t2 == "string")
        return xu.from(t2, e22);
      if (ArrayBuffer.isView(t2))
        return xu.from(t2.buffer);
      throw new TypeError(r2 + " must be a string, a Buffer, a typed array or a DataView");
    };
  });
  Eu = T3((uT, Ib) => {
    var C7 = bu(), O7 = Ro(), F7 = To(), Sn = Te().Buffer, U7 = Mu(), Rb = _u(), Bb = Su(), z7 = Sn.alloc(128), ls = { md5: 16, sha1: 20, sha224: 28, sha256: 32, sha384: 48, sha512: 64, rmd160: 20, ripemd160: 20 };
    function qb(t2, e22, r2) {
      var o2 = H7(t2), f4 = t2 === "sha512" || t2 === "sha384" ? 128 : 64;
      e22.length > f4 ? e22 = o2(e22) : e22.length < f4 && (e22 = Sn.concat([e22, z7], f4));
      for (var p32 = Sn.allocUnsafe(f4 + ls[t2]), m4 = Sn.allocUnsafe(f4 + ls[t2]), y32 = 0;y32 < f4; y32++)
        p32[y32] = e22[y32] ^ 54, m4[y32] = e22[y32] ^ 92;
      var M3 = Sn.allocUnsafe(f4 + r2 + 4);
      p32.copy(M3, 0, 0, f4), this.ipad1 = M3, this.ipad2 = p32, this.opad = m4, this.alg = t2, this.blocksize = f4, this.hash = o2, this.size = ls[t2];
    }
    qb.prototype.run = function(t2, e22) {
      t2.copy(e22, this.blocksize);
      var r2 = this.hash(e22);
      return r2.copy(this.opad, this.blocksize), this.hash(this.opad);
    };
    function H7(t2) {
      function e22(o2) {
        return F7(t2).update(o2).digest();
      }
      function r2(o2) {
        return new O7().update(o2).digest();
      }
      return t2 === "rmd160" || t2 === "ripemd160" ? r2 : t2 === "md5" ? C7 : e22;
    }
    function W7(t2, e22, r2, o2, f4) {
      U7(r2, o2), t2 = Bb(t2, Rb, "Password"), e22 = Bb(e22, Rb, "Salt"), f4 = f4 || "sha1";
      var p32 = new qb(f4, t2, e22.length), m4 = Sn.allocUnsafe(o2), y32 = Sn.allocUnsafe(e22.length + 4);
      e22.copy(y32, 0, 0, e22.length);
      for (var M3 = 0, x32 = ls[f4], S3 = Math.ceil(o2 / x32), E3 = 1;E3 <= S3; E3++) {
        y32.writeUInt32BE(E3, e22.length);
        for (var B5 = p32.run(y32, p32.ipad1), q2 = B5, L32 = 1;L32 < r2; L32++) {
          q2 = p32.run(q2, p32.ipad2);
          for (var ge = 0;ge < x32; ge++)
            B5[ge] ^= q2[ge];
        }
        B5.copy(m4, M3), M3 += x32;
      }
      return m4;
    }
    Ib.exports = W7;
  });
  Cb = T3((lT, Pb) => {
    var Nb = Te().Buffer, K7 = Mu(), Tb = _u(), kb = Eu(), Lb = Su(), ds, xa = global.crypto && global.crypto.subtle, j7 = { sha: "SHA-1", "sha-1": "SHA-1", sha1: "SHA-1", sha256: "SHA-256", "sha-256": "SHA-256", sha384: "SHA-384", "sha-384": "SHA-384", "sha-512": "SHA-512", sha512: "SHA-512" }, Au = [];
    function Z7(t2) {
      if (global.process && !global.process.browser || !xa || !xa.importKey || !xa.deriveBits)
        return Promise.resolve(false);
      if (Au[t2] !== undefined)
        return Au[t2];
      ds = ds || Nb.alloc(8);
      var e22 = Db(ds, ds, 10, 128, t2).then(function() {
        return true;
      }).catch(function() {
        return false;
      });
      return Au[t2] = e22, e22;
    }
    var En;
    function Ru() {
      return En || (global.process && global.process.nextTick ? En = global.process.nextTick : global.queueMicrotask ? En = global.queueMicrotask : global.setImmediate ? En = global.setImmediate : En = global.setTimeout, En);
    }
    function Db(t2, e22, r2, o2, f4) {
      return xa.importKey("raw", t2, { name: "PBKDF2" }, false, ["deriveBits"]).then(function(p32) {
        return xa.deriveBits({ name: "PBKDF2", salt: e22, iterations: r2, hash: { name: f4 } }, p32, o2 << 3);
      }).then(function(p32) {
        return Nb.from(p32);
      });
    }
    function V7(t2, e22) {
      t2.then(function(r2) {
        Ru()(function() {
          e22(null, r2);
        });
      }, function(r2) {
        Ru()(function() {
          e22(r2);
        });
      });
    }
    Pb.exports = function(t2, e22, r2, o2, f4, p32) {
      typeof f4 == "function" && (p32 = f4, f4 = undefined), f4 = f4 || "sha1";
      var m4 = j7[f4.toLowerCase()];
      if (!m4 || typeof global.Promise != "function") {
        Ru()(function() {
          var y32;
          try {
            y32 = kb(t2, e22, r2, o2, f4);
          } catch (M3) {
            return p32(M3);
          }
          p32(null, y32);
        });
        return;
      }
      if (K7(r2, o2), t2 = Lb(t2, Tb, "Password"), e22 = Lb(e22, Tb, "Salt"), typeof p32 != "function")
        throw new Error("No callback provided to pbkdf2");
      V7(Z7(m4).then(function(y32) {
        return y32 ? Db(t2, e22, r2, o2, m4) : kb(t2, e22, r2, o2, f4);
      }), p32);
    };
  });
  qu = T3((Bu) => {
    Bu.pbkdf2 = Cb();
    Bu.pbkdf2Sync = Eu();
  });
  Iu = T3((br) => {
    br.readUInt32BE = function(e22, r2) {
      var o2 = e22[0 + r2] << 24 | e22[1 + r2] << 16 | e22[2 + r2] << 8 | e22[3 + r2];
      return o2 >>> 0;
    };
    br.writeUInt32BE = function(e22, r2, o2) {
      e22[0 + o2] = r2 >>> 24, e22[1 + o2] = r2 >>> 16 & 255, e22[2 + o2] = r2 >>> 8 & 255, e22[3 + o2] = r2 & 255;
    };
    br.ip = function(e22, r2, o2, f4) {
      for (var p32 = 0, m4 = 0, y32 = 6;y32 >= 0; y32 -= 2) {
        for (var M3 = 0;M3 <= 24; M3 += 8)
          p32 <<= 1, p32 |= r2 >>> M3 + y32 & 1;
        for (var M3 = 0;M3 <= 24; M3 += 8)
          p32 <<= 1, p32 |= e22 >>> M3 + y32 & 1;
      }
      for (var y32 = 6;y32 >= 0; y32 -= 2) {
        for (var M3 = 1;M3 <= 25; M3 += 8)
          m4 <<= 1, m4 |= r2 >>> M3 + y32 & 1;
        for (var M3 = 1;M3 <= 25; M3 += 8)
          m4 <<= 1, m4 |= e22 >>> M3 + y32 & 1;
      }
      o2[f4 + 0] = p32 >>> 0, o2[f4 + 1] = m4 >>> 0;
    };
    br.rip = function(e22, r2, o2, f4) {
      for (var p32 = 0, m4 = 0, y32 = 0;y32 < 4; y32++)
        for (var M3 = 24;M3 >= 0; M3 -= 8)
          p32 <<= 1, p32 |= r2 >>> M3 + y32 & 1, p32 <<= 1, p32 |= e22 >>> M3 + y32 & 1;
      for (var y32 = 4;y32 < 8; y32++)
        for (var M3 = 24;M3 >= 0; M3 -= 8)
          m4 <<= 1, m4 |= r2 >>> M3 + y32 & 1, m4 <<= 1, m4 |= e22 >>> M3 + y32 & 1;
      o2[f4 + 0] = p32 >>> 0, o2[f4 + 1] = m4 >>> 0;
    };
    br.pc1 = function(e22, r2, o2, f4) {
      for (var p32 = 0, m4 = 0, y32 = 7;y32 >= 5; y32--) {
        for (var M3 = 0;M3 <= 24; M3 += 8)
          p32 <<= 1, p32 |= r2 >> M3 + y32 & 1;
        for (var M3 = 0;M3 <= 24; M3 += 8)
          p32 <<= 1, p32 |= e22 >> M3 + y32 & 1;
      }
      for (var M3 = 0;M3 <= 24; M3 += 8)
        p32 <<= 1, p32 |= r2 >> M3 + y32 & 1;
      for (var y32 = 1;y32 <= 3; y32++) {
        for (var M3 = 0;M3 <= 24; M3 += 8)
          m4 <<= 1, m4 |= r2 >> M3 + y32 & 1;
        for (var M3 = 0;M3 <= 24; M3 += 8)
          m4 <<= 1, m4 |= e22 >> M3 + y32 & 1;
      }
      for (var M3 = 0;M3 <= 24; M3 += 8)
        m4 <<= 1, m4 |= e22 >> M3 + y32 & 1;
      o2[f4 + 0] = p32 >>> 0, o2[f4 + 1] = m4 >>> 0;
    };
    br.r28shl = function(e22, r2) {
      return e22 << r2 & 268435455 | e22 >>> 28 - r2;
    };
    var cs = [14, 11, 17, 4, 27, 23, 25, 0, 13, 22, 7, 18, 5, 9, 16, 24, 2, 20, 12, 21, 1, 8, 15, 26, 15, 4, 25, 19, 9, 1, 26, 16, 5, 11, 23, 8, 12, 7, 17, 0, 22, 3, 10, 14, 6, 20, 27, 24];
    br.pc2 = function(e22, r2, o2, f4) {
      for (var p32 = 0, m4 = 0, y32 = cs.length >>> 1, M3 = 0;M3 < y32; M3++)
        p32 <<= 1, p32 |= e22 >>> cs[M3] & 1;
      for (var M3 = y32;M3 < cs.length; M3++)
        m4 <<= 1, m4 |= r2 >>> cs[M3] & 1;
      o2[f4 + 0] = p32 >>> 0, o2[f4 + 1] = m4 >>> 0;
    };
    br.expand = function(e22, r2, o2) {
      var f4 = 0, p32 = 0;
      f4 = (e22 & 1) << 5 | e22 >>> 27;
      for (var m4 = 23;m4 >= 15; m4 -= 4)
        f4 <<= 6, f4 |= e22 >>> m4 & 63;
      for (var m4 = 11;m4 >= 3; m4 -= 4)
        p32 |= e22 >>> m4 & 63, p32 <<= 6;
      p32 |= (e22 & 31) << 1 | e22 >>> 31, r2[o2 + 0] = f4 >>> 0, r2[o2 + 1] = p32 >>> 0;
    };
    var Ob = [14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1, 3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8, 4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7, 15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13, 15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14, 9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5, 0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2, 5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9, 10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10, 1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1, 13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7, 11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12, 7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3, 1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9, 10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8, 15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14, 2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1, 8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6, 4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13, 15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3, 12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5, 0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8, 9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10, 7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13, 4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10, 3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6, 1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7, 10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12, 13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4, 10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2, 7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13, 0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11];
    br.substitute = function(e22, r2) {
      for (var o2 = 0, f4 = 0;f4 < 4; f4++) {
        var p32 = e22 >>> 18 - f4 * 6 & 63, m4 = Ob[f4 * 64 + p32];
        o2 <<= 4, o2 |= m4;
      }
      for (var f4 = 0;f4 < 4; f4++) {
        var p32 = r2 >>> 18 - f4 * 6 & 63, m4 = Ob[4 * 64 + f4 * 64 + p32];
        o2 <<= 4, o2 |= m4;
      }
      return o2 >>> 0;
    };
    var Fb = [16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22, 30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7];
    br.permute = function(e22) {
      for (var r2 = 0, o2 = 0;o2 < Fb.length; o2++)
        r2 <<= 1, r2 |= e22 >>> Fb[o2] & 1;
      return r2 >>> 0;
    };
    br.padSplit = function(e22, r2, o2) {
      for (var f4 = e22.toString(2);f4.length < r2; )
        f4 = "0" + f4;
      for (var p32 = [], m4 = 0;m4 < r2; m4 += o2)
        p32.push(f4.slice(m4, m4 + o2));
      return p32.join(" ");
    };
  });
  ar = T3((pT, zb) => {
    zb.exports = Ub;
    function Ub(t2, e22) {
      if (!t2)
        throw new Error(e22 || "Assertion failed");
    }
    Ub.equal = function(e22, r2, o2) {
      if (e22 != r2)
        throw new Error(o2 || "Assertion failed: " + e22 + " != " + r2);
    };
  });
  ps = T3((vT, Hb) => {
    var $7 = ar();
    function mr(t2) {
      this.options = t2, this.type = this.options.type, this.blockSize = 8, this._init(), this.buffer = new Array(this.blockSize), this.bufferOff = 0;
    }
    Hb.exports = mr;
    mr.prototype._init = function() {};
    mr.prototype.update = function(e22) {
      return e22.length === 0 ? [] : this.type === "decrypt" ? this._updateDecrypt(e22) : this._updateEncrypt(e22);
    };
    mr.prototype._buffer = function(e22, r2) {
      for (var o2 = Math.min(this.buffer.length - this.bufferOff, e22.length - r2), f4 = 0;f4 < o2; f4++)
        this.buffer[this.bufferOff + f4] = e22[r2 + f4];
      return this.bufferOff += o2, o2;
    };
    mr.prototype._flushBuffer = function(e22, r2) {
      return this._update(this.buffer, 0, e22, r2), this.bufferOff = 0, this.blockSize;
    };
    mr.prototype._updateEncrypt = function(e22) {
      var r2 = 0, o2 = 0, f4 = (this.bufferOff + e22.length) / this.blockSize | 0, p32 = new Array(f4 * this.blockSize);
      this.bufferOff !== 0 && (r2 += this._buffer(e22, r2), this.bufferOff === this.buffer.length && (o2 += this._flushBuffer(p32, o2)));
      for (var m4 = e22.length - (e22.length - r2) % this.blockSize;r2 < m4; r2 += this.blockSize)
        this._update(e22, r2, p32, o2), o2 += this.blockSize;
      for (;r2 < e22.length; r2++, this.bufferOff++)
        this.buffer[this.bufferOff] = e22[r2];
      return p32;
    };
    mr.prototype._updateDecrypt = function(e22) {
      for (var r2 = 0, o2 = 0, f4 = Math.ceil((this.bufferOff + e22.length) / this.blockSize) - 1, p32 = new Array(f4 * this.blockSize);f4 > 0; f4--)
        r2 += this._buffer(e22, r2), o2 += this._flushBuffer(p32, o2);
      return r2 += this._buffer(e22, r2), p32;
    };
    mr.prototype.final = function(e22) {
      var r2;
      e22 && (r2 = this.update(e22));
      var o2;
      return this.type === "encrypt" ? o2 = this._finalEncrypt() : o2 = this._finalDecrypt(), r2 ? r2.concat(o2) : o2;
    };
    mr.prototype._pad = function(e22, r2) {
      if (r2 === 0)
        return false;
      for (;r2 < e22.length; )
        e22[r2++] = 0;
      return true;
    };
    mr.prototype._finalEncrypt = function() {
      if (!this._pad(this.buffer, this.bufferOff))
        return [];
      var e22 = new Array(this.blockSize);
      return this._update(this.buffer, 0, e22, 0), e22;
    };
    mr.prototype._unpad = function(e22) {
      return e22;
    };
    mr.prototype._finalDecrypt = function() {
      $7.equal(this.bufferOff, this.blockSize, "Not enough data to decrypt");
      var e22 = new Array(this.blockSize);
      return this._flushBuffer(e22, 0), this._unpad(e22);
    };
  });
  Tu = T3((bT, jb) => {
    var Wb = ar(), G7 = Ie(), Nt = Iu(), Kb = ps();
    function Y7() {
      this.tmp = new Array(2), this.keys = null;
    }
    function ei(t2) {
      Kb.call(this, t2);
      var e22 = new Y7;
      this._desState = e22, this.deriveKeys(e22, t2.key);
    }
    G7(ei, Kb);
    jb.exports = ei;
    ei.create = function(e22) {
      return new ei(e22);
    };
    var X7 = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1];
    ei.prototype.deriveKeys = function(e22, r2) {
      e22.keys = new Array(16 * 2), Wb.equal(r2.length, this.blockSize, "Invalid key length");
      var o2 = Nt.readUInt32BE(r2, 0), f4 = Nt.readUInt32BE(r2, 4);
      Nt.pc1(o2, f4, e22.tmp, 0), o2 = e22.tmp[0], f4 = e22.tmp[1];
      for (var p32 = 0;p32 < e22.keys.length; p32 += 2) {
        var m4 = X7[p32 >>> 1];
        o2 = Nt.r28shl(o2, m4), f4 = Nt.r28shl(f4, m4), Nt.pc2(o2, f4, e22.keys, p32);
      }
    };
    ei.prototype._update = function(e22, r2, o2, f4) {
      var p32 = this._desState, m4 = Nt.readUInt32BE(e22, r2), y32 = Nt.readUInt32BE(e22, r2 + 4);
      Nt.ip(m4, y32, p32.tmp, 0), m4 = p32.tmp[0], y32 = p32.tmp[1], this.type === "encrypt" ? this._encrypt(p32, m4, y32, p32.tmp, 0) : this._decrypt(p32, m4, y32, p32.tmp, 0), m4 = p32.tmp[0], y32 = p32.tmp[1], Nt.writeUInt32BE(o2, m4, f4), Nt.writeUInt32BE(o2, y32, f4 + 4);
    };
    ei.prototype._pad = function(e22, r2) {
      for (var o2 = e22.length - r2, f4 = r2;f4 < e22.length; f4++)
        e22[f4] = o2;
      return true;
    };
    ei.prototype._unpad = function(e22) {
      for (var r2 = e22[e22.length - 1], o2 = e22.length - r2;o2 < e22.length; o2++)
        Wb.equal(e22[o2], r2);
      return e22.slice(0, e22.length - r2);
    };
    ei.prototype._encrypt = function(e22, r2, o2, f4, p32) {
      for (var m4 = r2, y32 = o2, M3 = 0;M3 < e22.keys.length; M3 += 2) {
        var x32 = e22.keys[M3], S3 = e22.keys[M3 + 1];
        Nt.expand(y32, e22.tmp, 0), x32 ^= e22.tmp[0], S3 ^= e22.tmp[1];
        var E3 = Nt.substitute(x32, S3), B5 = Nt.permute(E3), q2 = y32;
        y32 = (m4 ^ B5) >>> 0, m4 = q2;
      }
      Nt.rip(y32, m4, f4, p32);
    };
    ei.prototype._decrypt = function(e22, r2, o2, f4, p32) {
      for (var m4 = o2, y32 = r2, M3 = e22.keys.length - 2;M3 >= 0; M3 -= 2) {
        var x32 = e22.keys[M3], S3 = e22.keys[M3 + 1];
        Nt.expand(m4, e22.tmp, 0), x32 ^= e22.tmp[0], S3 ^= e22.tmp[1];
        var E3 = Nt.substitute(x32, S3), B5 = Nt.permute(E3), q2 = m4;
        m4 = (y32 ^ B5) >>> 0, y32 = q2;
      }
      Nt.rip(m4, y32, f4, p32);
    };
  });
  Vb = T3((Zb) => {
    var J7 = ar(), Q7 = Ie(), vs = {};
    function e9(t2) {
      J7.equal(t2.length, 8, "Invalid IV length"), this.iv = new Array(8);
      for (var e22 = 0;e22 < this.iv.length; e22++)
        this.iv[e22] = t2[e22];
    }
    function t9(t2) {
      function e22(p32) {
        t2.call(this, p32), this._cbcInit();
      }
      Q7(e22, t2);
      for (var r2 = Object.keys(vs), o2 = 0;o2 < r2.length; o2++) {
        var f4 = r2[o2];
        e22.prototype[f4] = vs[f4];
      }
      return e22.create = function(m4) {
        return new e22(m4);
      }, e22;
    }
    Zb.instantiate = t9;
    vs._cbcInit = function() {
      var e22 = new e9(this.options.iv);
      this._cbcState = e22;
    };
    vs._update = function(e22, r2, o2, f4) {
      var p32 = this._cbcState, m4 = this.constructor.super_.prototype, y32 = p32.iv;
      if (this.type === "encrypt") {
        for (var M3 = 0;M3 < this.blockSize; M3++)
          y32[M3] ^= e22[r2 + M3];
        m4._update.call(this, y32, 0, o2, f4);
        for (var M3 = 0;M3 < this.blockSize; M3++)
          y32[M3] = o2[f4 + M3];
      } else {
        m4._update.call(this, e22, r2, o2, f4);
        for (var M3 = 0;M3 < this.blockSize; M3++)
          o2[f4 + M3] ^= y32[M3];
        for (var M3 = 0;M3 < this.blockSize; M3++)
          y32[M3] = e22[r2 + M3];
      }
    };
  });
  Yb = T3((gT, Gb) => {
    var r9 = ar(), i9 = Ie(), $b = ps(), Wi = Tu();
    function n9(t2, e22) {
      r9.equal(e22.length, 24, "Invalid key length");
      var r2 = e22.slice(0, 8), o2 = e22.slice(8, 16), f4 = e22.slice(16, 24);
      t2 === "encrypt" ? this.ciphers = [Wi.create({ type: "encrypt", key: r2 }), Wi.create({ type: "decrypt", key: o2 }), Wi.create({ type: "encrypt", key: f4 })] : this.ciphers = [Wi.create({ type: "decrypt", key: f4 }), Wi.create({ type: "encrypt", key: o2 }), Wi.create({ type: "decrypt", key: r2 })];
    }
    function An(t2) {
      $b.call(this, t2);
      var e22 = new n9(this.type, this.options.key);
      this._edeState = e22;
    }
    i9(An, $b);
    Gb.exports = An;
    An.create = function(e22) {
      return new An(e22);
    };
    An.prototype._update = function(e22, r2, o2, f4) {
      var p32 = this._edeState;
      p32.ciphers[0]._update(e22, r2, o2, f4), p32.ciphers[1]._update(o2, f4, o2, f4), p32.ciphers[2]._update(o2, f4, o2, f4);
    };
    An.prototype._pad = Wi.prototype._pad;
    An.prototype._unpad = Wi.prototype._unpad;
  });
  Xb = T3((gf) => {
    gf.utils = Iu();
    gf.Cipher = ps();
    gf.DES = Tu();
    gf.CBC = Vb();
    gf.EDE = Yb();
  });
  em = T3((wT, Qb) => {
    var Jb = yi(), wi = Xb(), f9 = Ie(), Rn = Te().Buffer, Sa = { "des-ede3-cbc": wi.CBC.instantiate(wi.EDE), "des-ede3": wi.EDE, "des-ede-cbc": wi.CBC.instantiate(wi.EDE), "des-ede": wi.EDE, "des-cbc": wi.CBC.instantiate(wi.DES), "des-ecb": wi.DES };
    Sa.des = Sa["des-cbc"];
    Sa.des3 = Sa["des-ede3-cbc"];
    Qb.exports = bs;
    f9(bs, Jb);
    function bs(t2) {
      Jb.call(this);
      var e22 = t2.mode.toLowerCase(), r2 = Sa[e22], o2;
      t2.decrypt ? o2 = "decrypt" : o2 = "encrypt";
      var f4 = t2.key;
      Rn.isBuffer(f4) || (f4 = Rn.from(f4)), (e22 === "des-ede" || e22 === "des-ede-cbc") && (f4 = Rn.concat([f4, f4.slice(0, 8)]));
      var p32 = t2.iv;
      Rn.isBuffer(p32) || (p32 = Rn.from(p32)), this._des = r2.create({ key: f4, iv: p32, type: o2 });
    }
    bs.prototype._update = function(t2) {
      return Rn.from(this._des.update(t2));
    };
    bs.prototype._final = function() {
      return Rn.from(this._des.final());
    };
  });
  tm = T3((ku) => {
    ku.encrypt = function(t2, e22) {
      return t2._cipher.encryptBlock(e22);
    };
    ku.decrypt = function(t2, e22) {
      return t2._cipher.decryptBlock(e22);
    };
  });
  yf = T3((_T, rm) => {
    rm.exports = function(e22, r2) {
      for (var o2 = Math.min(e22.length, r2.length), f4 = new Buffer(o2), p32 = 0;p32 < o2; ++p32)
        f4[p32] = e22[p32] ^ r2[p32];
      return f4;
    };
  });
  nm = T3((Lu) => {
    var im = yf();
    Lu.encrypt = function(t2, e22) {
      var r2 = im(e22, t2._prev);
      return t2._prev = t2._cipher.encryptBlock(r2), t2._prev;
    };
    Lu.decrypt = function(t2, e22) {
      var r2 = t2._prev;
      t2._prev = e22;
      var o2 = t2._cipher.decryptBlock(e22);
      return im(o2, r2);
    };
  });
  om = T3((am) => {
    var Ea = Te().Buffer, a9 = yf();
    function fm(t2, e22, r2) {
      var o2 = e22.length, f4 = a9(e22, t2._cache);
      return t2._cache = t2._cache.slice(o2), t2._prev = Ea.concat([t2._prev, r2 ? e22 : f4]), f4;
    }
    am.encrypt = function(t2, e22, r2) {
      for (var o2 = Ea.allocUnsafe(0), f4;e22.length; )
        if (t2._cache.length === 0 && (t2._cache = t2._cipher.encryptBlock(t2._prev), t2._prev = Ea.allocUnsafe(0)), t2._cache.length <= e22.length)
          f4 = t2._cache.length, o2 = Ea.concat([o2, fm(t2, e22.slice(0, f4), r2)]), e22 = e22.slice(f4);
        else {
          o2 = Ea.concat([o2, fm(t2, e22, r2)]);
          break;
        }
      return o2;
    };
  });
  hm = T3((sm) => {
    var Nu = Te().Buffer;
    function o9(t2, e22, r2) {
      var o2 = t2._cipher.encryptBlock(t2._prev), f4 = o2[0] ^ e22;
      return t2._prev = Nu.concat([t2._prev.slice(1), Nu.from([r2 ? e22 : f4])]), f4;
    }
    sm.encrypt = function(t2, e22, r2) {
      for (var o2 = e22.length, f4 = Nu.allocUnsafe(o2), p32 = -1;++p32 < o2; )
        f4[p32] = o9(t2, e22[p32], r2);
      return f4;
    };
  });
  lm = T3((um) => {
    var ms = Te().Buffer;
    function s9(t2, e22, r2) {
      for (var o2, f4 = -1, p32 = 8, m4 = 0, y32, M3;++f4 < p32; )
        o2 = t2._cipher.encryptBlock(t2._prev), y32 = e22 & 1 << 7 - f4 ? 128 : 0, M3 = o2[0] ^ y32, m4 += (M3 & 128) >> f4 % 8, t2._prev = h9(t2._prev, r2 ? y32 : M3);
      return m4;
    }
    function h9(t2, e22) {
      var r2 = t2.length, o2 = -1, f4 = ms.allocUnsafe(t2.length);
      for (t2 = ms.concat([t2, ms.from([e22])]);++o2 < r2; )
        f4[o2] = t2[o2] << 1 | t2[o2 + 1] >> 7;
      return f4;
    }
    um.encrypt = function(t2, e22, r2) {
      for (var o2 = e22.length, f4 = ms.allocUnsafe(o2), p32 = -1;++p32 < o2; )
        f4[p32] = s9(t2, e22[p32], r2);
      return f4;
    };
  });
  cm = T3((dm) => {
    var u9 = yf();
    function l9(t2) {
      return t2._prev = t2._cipher.encryptBlock(t2._prev), t2._prev;
    }
    dm.encrypt = function(t2, e22) {
      for (;t2._cache.length < e22.length; )
        t2._cache = Buffer.concat([t2._cache, l9(t2)]);
      var r2 = t2._cache.slice(0, e22.length);
      return t2._cache = t2._cache.slice(e22.length), u9(e22, r2);
    };
  });
  Du = T3((BT, pm) => {
    function d9(t2) {
      for (var e22 = t2.length, r2;e22--; )
        if (r2 = t2.readUInt8(e22), r2 === 255)
          t2.writeUInt8(0, e22);
        else {
          r2++, t2.writeUInt8(r2, e22);
          break;
        }
    }
    pm.exports = d9;
  });
  Cu = T3((bm) => {
    var c9 = yf(), vm = Te().Buffer, p9 = Du();
    function v9(t2) {
      var e22 = t2._cipher.encryptBlockRaw(t2._prev);
      return p9(t2._prev), e22;
    }
    var Pu = 16;
    bm.encrypt = function(t2, e22) {
      var r2 = Math.ceil(e22.length / Pu), o2 = t2._cache.length;
      t2._cache = vm.concat([t2._cache, vm.allocUnsafe(r2 * Pu)]);
      for (var f4 = 0;f4 < r2; f4++) {
        var p32 = v9(t2), m4 = o2 + f4 * Pu;
        t2._cache.writeUInt32BE(p32[0], m4 + 0), t2._cache.writeUInt32BE(p32[1], m4 + 4), t2._cache.writeUInt32BE(p32[2], m4 + 8), t2._cache.writeUInt32BE(p32[3], m4 + 12);
      }
      var y32 = t2._cache.slice(0, e22.length);
      return t2._cache = t2._cache.slice(e22.length), c9(e22, y32);
    };
  });
  Ou = T3((IT, b9) => {
    b9.exports = { "aes-128-ecb": { cipher: "AES", key: 128, iv: 0, mode: "ECB", type: "block" }, "aes-192-ecb": { cipher: "AES", key: 192, iv: 0, mode: "ECB", type: "block" }, "aes-256-ecb": { cipher: "AES", key: 256, iv: 0, mode: "ECB", type: "block" }, "aes-128-cbc": { cipher: "AES", key: 128, iv: 16, mode: "CBC", type: "block" }, "aes-192-cbc": { cipher: "AES", key: 192, iv: 16, mode: "CBC", type: "block" }, "aes-256-cbc": { cipher: "AES", key: 256, iv: 16, mode: "CBC", type: "block" }, aes128: { cipher: "AES", key: 128, iv: 16, mode: "CBC", type: "block" }, aes192: { cipher: "AES", key: 192, iv: 16, mode: "CBC", type: "block" }, aes256: { cipher: "AES", key: 256, iv: 16, mode: "CBC", type: "block" }, "aes-128-cfb": { cipher: "AES", key: 128, iv: 16, mode: "CFB", type: "stream" }, "aes-192-cfb": { cipher: "AES", key: 192, iv: 16, mode: "CFB", type: "stream" }, "aes-256-cfb": { cipher: "AES", key: 256, iv: 16, mode: "CFB", type: "stream" }, "aes-128-cfb8": { cipher: "AES", key: 128, iv: 16, mode: "CFB8", type: "stream" }, "aes-192-cfb8": { cipher: "AES", key: 192, iv: 16, mode: "CFB8", type: "stream" }, "aes-256-cfb8": { cipher: "AES", key: 256, iv: 16, mode: "CFB8", type: "stream" }, "aes-128-cfb1": { cipher: "AES", key: 128, iv: 16, mode: "CFB1", type: "stream" }, "aes-192-cfb1": { cipher: "AES", key: 192, iv: 16, mode: "CFB1", type: "stream" }, "aes-256-cfb1": { cipher: "AES", key: 256, iv: 16, mode: "CFB1", type: "stream" }, "aes-128-ofb": { cipher: "AES", key: 128, iv: 16, mode: "OFB", type: "stream" }, "aes-192-ofb": { cipher: "AES", key: 192, iv: 16, mode: "OFB", type: "stream" }, "aes-256-ofb": { cipher: "AES", key: 256, iv: 16, mode: "OFB", type: "stream" }, "aes-128-ctr": { cipher: "AES", key: 128, iv: 16, mode: "CTR", type: "stream" }, "aes-192-ctr": { cipher: "AES", key: 192, iv: 16, mode: "CTR", type: "stream" }, "aes-256-ctr": { cipher: "AES", key: 256, iv: 16, mode: "CTR", type: "stream" }, "aes-128-gcm": { cipher: "AES", key: 128, iv: 12, mode: "GCM", type: "auth" }, "aes-192-gcm": { cipher: "AES", key: 192, iv: 12, mode: "GCM", type: "auth" }, "aes-256-gcm": { cipher: "AES", key: 256, iv: 12, mode: "GCM", type: "auth" } };
  });
  ys = T3((TT, mm) => {
    var m9 = { ECB: tm(), CBC: nm(), CFB: om(), CFB8: hm(), CFB1: lm(), OFB: cm(), CTR: Cu(), GCM: Cu() }, gs = Ou();
    for (Fu in gs)
      gs[Fu].module = m9[gs[Fu].mode];
    var Fu;
    mm.exports = gs;
  });
  Aa = T3((kT, ym) => {
    var ws = Te().Buffer;
    function zu(t2) {
      ws.isBuffer(t2) || (t2 = ws.from(t2));
      for (var e22 = t2.length / 4 | 0, r2 = new Array(e22), o2 = 0;o2 < e22; o2++)
        r2[o2] = t2.readUInt32BE(o2 * 4);
      return r2;
    }
    function Uu(t2) {
      for (var e22 = 0;e22 < t2.length; t2++)
        t2[e22] = 0;
    }
    function gm(t2, e22, r2, o2, f4) {
      for (var p32 = r2[0], m4 = r2[1], y32 = r2[2], M3 = r2[3], x32 = t2[0] ^ e22[0], S3 = t2[1] ^ e22[1], E3 = t2[2] ^ e22[2], B5 = t2[3] ^ e22[3], q2, L32, ge, _e, N3 = 4, we = 1;we < f4; we++)
        q2 = p32[x32 >>> 24] ^ m4[S3 >>> 16 & 255] ^ y32[E3 >>> 8 & 255] ^ M3[B5 & 255] ^ e22[N3++], L32 = p32[S3 >>> 24] ^ m4[E3 >>> 16 & 255] ^ y32[B5 >>> 8 & 255] ^ M3[x32 & 255] ^ e22[N3++], ge = p32[E3 >>> 24] ^ m4[B5 >>> 16 & 255] ^ y32[x32 >>> 8 & 255] ^ M3[S3 & 255] ^ e22[N3++], _e = p32[B5 >>> 24] ^ m4[x32 >>> 16 & 255] ^ y32[S3 >>> 8 & 255] ^ M3[E3 & 255] ^ e22[N3++], x32 = q2, S3 = L32, E3 = ge, B5 = _e;
      return q2 = (o2[x32 >>> 24] << 24 | o2[S3 >>> 16 & 255] << 16 | o2[E3 >>> 8 & 255] << 8 | o2[B5 & 255]) ^ e22[N3++], L32 = (o2[S3 >>> 24] << 24 | o2[E3 >>> 16 & 255] << 16 | o2[B5 >>> 8 & 255] << 8 | o2[x32 & 255]) ^ e22[N3++], ge = (o2[E3 >>> 24] << 24 | o2[B5 >>> 16 & 255] << 16 | o2[x32 >>> 8 & 255] << 8 | o2[S3 & 255]) ^ e22[N3++], _e = (o2[B5 >>> 24] << 24 | o2[x32 >>> 16 & 255] << 16 | o2[S3 >>> 8 & 255] << 8 | o2[E3 & 255]) ^ e22[N3++], q2 = q2 >>> 0, L32 = L32 >>> 0, ge = ge >>> 0, _e = _e >>> 0, [q2, L32, ge, _e];
    }
    var g9 = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54], kt = function() {
      for (var t2 = new Array(256), e22 = 0;e22 < 256; e22++)
        e22 < 128 ? t2[e22] = e22 << 1 : t2[e22] = e22 << 1 ^ 283;
      for (var r2 = [], o2 = [], f4 = [[], [], [], []], p32 = [[], [], [], []], m4 = 0, y32 = 0, M3 = 0;M3 < 256; ++M3) {
        var x32 = y32 ^ y32 << 1 ^ y32 << 2 ^ y32 << 3 ^ y32 << 4;
        x32 = x32 >>> 8 ^ x32 & 255 ^ 99, r2[m4] = x32, o2[x32] = m4;
        var S3 = t2[m4], E3 = t2[S3], B5 = t2[E3], q2 = t2[x32] * 257 ^ x32 * 16843008;
        f4[0][m4] = q2 << 24 | q2 >>> 8, f4[1][m4] = q2 << 16 | q2 >>> 16, f4[2][m4] = q2 << 8 | q2 >>> 24, f4[3][m4] = q2, q2 = B5 * 16843009 ^ E3 * 65537 ^ S3 * 257 ^ m4 * 16843008, p32[0][x32] = q2 << 24 | q2 >>> 8, p32[1][x32] = q2 << 16 | q2 >>> 16, p32[2][x32] = q2 << 8 | q2 >>> 24, p32[3][x32] = q2, m4 === 0 ? m4 = y32 = 1 : (m4 = S3 ^ t2[t2[t2[B5 ^ S3]]], y32 ^= t2[t2[y32]]);
      }
      return { SBOX: r2, INV_SBOX: o2, SUB_MIX: f4, INV_SUB_MIX: p32 };
    }();
    function gr(t2) {
      this._key = zu(t2), this._reset();
    }
    gr.blockSize = 4 * 4;
    gr.keySize = 256 / 8;
    gr.prototype.blockSize = gr.blockSize;
    gr.prototype.keySize = gr.keySize;
    gr.prototype._reset = function() {
      for (var t2 = this._key, e22 = t2.length, r2 = e22 + 6, o2 = (r2 + 1) * 4, f4 = [], p32 = 0;p32 < e22; p32++)
        f4[p32] = t2[p32];
      for (p32 = e22;p32 < o2; p32++) {
        var m4 = f4[p32 - 1];
        p32 % e22 === 0 ? (m4 = m4 << 8 | m4 >>> 24, m4 = kt.SBOX[m4 >>> 24] << 24 | kt.SBOX[m4 >>> 16 & 255] << 16 | kt.SBOX[m4 >>> 8 & 255] << 8 | kt.SBOX[m4 & 255], m4 ^= g9[p32 / e22 | 0] << 24) : e22 > 6 && p32 % e22 === 4 && (m4 = kt.SBOX[m4 >>> 24] << 24 | kt.SBOX[m4 >>> 16 & 255] << 16 | kt.SBOX[m4 >>> 8 & 255] << 8 | kt.SBOX[m4 & 255]), f4[p32] = f4[p32 - e22] ^ m4;
      }
      for (var y32 = [], M3 = 0;M3 < o2; M3++) {
        var x32 = o2 - M3, S3 = f4[x32 - (M3 % 4 ? 0 : 4)];
        M3 < 4 || x32 <= 4 ? y32[M3] = S3 : y32[M3] = kt.INV_SUB_MIX[0][kt.SBOX[S3 >>> 24]] ^ kt.INV_SUB_MIX[1][kt.SBOX[S3 >>> 16 & 255]] ^ kt.INV_SUB_MIX[2][kt.SBOX[S3 >>> 8 & 255]] ^ kt.INV_SUB_MIX[3][kt.SBOX[S3 & 255]];
      }
      this._nRounds = r2, this._keySchedule = f4, this._invKeySchedule = y32;
    };
    gr.prototype.encryptBlockRaw = function(t2) {
      return t2 = zu(t2), gm(t2, this._keySchedule, kt.SUB_MIX, kt.SBOX, this._nRounds);
    };
    gr.prototype.encryptBlock = function(t2) {
      var e22 = this.encryptBlockRaw(t2), r2 = ws.allocUnsafe(16);
      return r2.writeUInt32BE(e22[0], 0), r2.writeUInt32BE(e22[1], 4), r2.writeUInt32BE(e22[2], 8), r2.writeUInt32BE(e22[3], 12), r2;
    };
    gr.prototype.decryptBlock = function(t2) {
      t2 = zu(t2);
      var e22 = t2[1];
      t2[1] = t2[3], t2[3] = e22;
      var r2 = gm(t2, this._invKeySchedule, kt.INV_SUB_MIX, kt.INV_SBOX, this._nRounds), o2 = ws.allocUnsafe(16);
      return o2.writeUInt32BE(r2[0], 0), o2.writeUInt32BE(r2[3], 4), o2.writeUInt32BE(r2[2], 8), o2.writeUInt32BE(r2[1], 12), o2;
    };
    gr.prototype.scrub = function() {
      Uu(this._keySchedule), Uu(this._invKeySchedule), Uu(this._key);
    };
    ym.exports.AES = gr;
  });
  _m = T3((LT, Mm) => {
    var wf = Te().Buffer, y9 = wf.alloc(16, 0);
    function w9(t2) {
      return [t2.readUInt32BE(0), t2.readUInt32BE(4), t2.readUInt32BE(8), t2.readUInt32BE(12)];
    }
    function wm(t2) {
      var e22 = wf.allocUnsafe(16);
      return e22.writeUInt32BE(t2[0] >>> 0, 0), e22.writeUInt32BE(t2[1] >>> 0, 4), e22.writeUInt32BE(t2[2] >>> 0, 8), e22.writeUInt32BE(t2[3] >>> 0, 12), e22;
    }
    function Ra(t2) {
      this.h = t2, this.state = wf.alloc(16, 0), this.cache = wf.allocUnsafe(0);
    }
    Ra.prototype.ghash = function(t2) {
      for (var e22 = -1;++e22 < t2.length; )
        this.state[e22] ^= t2[e22];
      this._multiply();
    };
    Ra.prototype._multiply = function() {
      for (var t2 = w9(this.h), e22 = [0, 0, 0, 0], r2, o2, f4, p32 = -1;++p32 < 128; ) {
        for (o2 = (this.state[~~(p32 / 8)] & 1 << 7 - p32 % 8) !== 0, o2 && (e22[0] ^= t2[0], e22[1] ^= t2[1], e22[2] ^= t2[2], e22[3] ^= t2[3]), f4 = (t2[3] & 1) !== 0, r2 = 3;r2 > 0; r2--)
          t2[r2] = t2[r2] >>> 1 | (t2[r2 - 1] & 1) << 31;
        t2[0] = t2[0] >>> 1, f4 && (t2[0] = t2[0] ^ 225 << 24);
      }
      this.state = wm(e22);
    };
    Ra.prototype.update = function(t2) {
      this.cache = wf.concat([this.cache, t2]);
      for (var e22;this.cache.length >= 16; )
        e22 = this.cache.slice(0, 16), this.cache = this.cache.slice(16), this.ghash(e22);
    };
    Ra.prototype.final = function(t2, e22) {
      return this.cache.length && this.ghash(wf.concat([this.cache, y9], 16)), this.ghash(wm([0, t2, 0, e22])), this.state;
    };
    Mm.exports = Ra;
  });
  Hu = T3((NT, Em) => {
    var M9 = Aa(), tr = Te().Buffer, xm = yi(), _9 = Ie(), Sm = _m(), x9 = yf(), S9 = Du();
    function E9(t2, e22) {
      var r2 = 0;
      t2.length !== e22.length && r2++;
      for (var o2 = Math.min(t2.length, e22.length), f4 = 0;f4 < o2; ++f4)
        r2 += t2[f4] ^ e22[f4];
      return r2;
    }
    function A9(t2, e22, r2) {
      if (e22.length === 12)
        return t2._finID = tr.concat([e22, tr.from([0, 0, 0, 1])]), tr.concat([e22, tr.from([0, 0, 0, 2])]);
      var o2 = new Sm(r2), f4 = e22.length, p32 = f4 % 16;
      o2.update(e22), p32 && (p32 = 16 - p32, o2.update(tr.alloc(p32, 0))), o2.update(tr.alloc(8, 0));
      var m4 = f4 * 8, y32 = tr.alloc(8);
      y32.writeUIntBE(m4, 0, 8), o2.update(y32), t2._finID = o2.state;
      var M3 = tr.from(t2._finID);
      return S9(M3), M3;
    }
    function Bn(t2, e22, r2, o2) {
      xm.call(this);
      var f4 = tr.alloc(4, 0);
      this._cipher = new M9.AES(e22);
      var p32 = this._cipher.encryptBlock(f4);
      this._ghash = new Sm(p32), r2 = A9(this, r2, p32), this._prev = tr.from(r2), this._cache = tr.allocUnsafe(0), this._secCache = tr.allocUnsafe(0), this._decrypt = o2, this._alen = 0, this._len = 0, this._mode = t2, this._authTag = null, this._called = false;
    }
    _9(Bn, xm);
    Bn.prototype._update = function(t2) {
      if (!this._called && this._alen) {
        var e22 = 16 - this._alen % 16;
        e22 < 16 && (e22 = tr.alloc(e22, 0), this._ghash.update(e22));
      }
      this._called = true;
      var r2 = this._mode.encrypt(this, t2);
      return this._decrypt ? this._ghash.update(t2) : this._ghash.update(r2), this._len += t2.length, r2;
    };
    Bn.prototype._final = function() {
      if (this._decrypt && !this._authTag)
        throw new Error("Unsupported state or unable to authenticate data");
      var t2 = x9(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
      if (this._decrypt && E9(t2, this._authTag))
        throw new Error("Unsupported state or unable to authenticate data");
      this._authTag = t2, this._cipher.scrub();
    };
    Bn.prototype.getAuthTag = function() {
      if (this._decrypt || !tr.isBuffer(this._authTag))
        throw new Error("Attempting to get auth tag in unsupported state");
      return this._authTag;
    };
    Bn.prototype.setAuthTag = function(e22) {
      if (!this._decrypt)
        throw new Error("Attempting to set auth tag in unsupported state");
      this._authTag = e22;
    };
    Bn.prototype.setAAD = function(e22) {
      if (this._called)
        throw new Error("Attempting to set AAD in unsupported state");
      this._ghash.update(e22), this._alen += e22.length;
    };
    Em.exports = Bn;
  });
  Ku = T3((DT, Rm) => {
    var R9 = Aa(), Wu = Te().Buffer, Am = yi(), B9 = Ie();
    function Ms(t2, e22, r2, o2) {
      Am.call(this), this._cipher = new R9.AES(e22), this._prev = Wu.from(r2), this._cache = Wu.allocUnsafe(0), this._secCache = Wu.allocUnsafe(0), this._decrypt = o2, this._mode = t2;
    }
    B9(Ms, Am);
    Ms.prototype._update = function(t2) {
      return this._mode.encrypt(this, t2, this._decrypt);
    };
    Ms.prototype._final = function() {
      this._cipher.scrub();
    };
    Rm.exports = Ms;
  });
  Ba = T3((PT, Bm) => {
    var qn = Te().Buffer, q9 = Eo();
    function I9(t2, e22, r2, o2) {
      if (qn.isBuffer(t2) || (t2 = qn.from(t2, "binary")), e22 && (qn.isBuffer(e22) || (e22 = qn.from(e22, "binary")), e22.length !== 8))
        throw new RangeError("salt should be Buffer with 8 byte length");
      for (var f4 = r2 / 8, p32 = qn.alloc(f4), m4 = qn.alloc(o2 || 0), y32 = qn.alloc(0);f4 > 0 || o2 > 0; ) {
        var M3 = new q9;
        M3.update(y32), M3.update(t2), e22 && M3.update(e22), y32 = M3.digest();
        var x32 = 0;
        if (f4 > 0) {
          var S3 = p32.length - f4;
          x32 = Math.min(f4, y32.length), y32.copy(p32, S3, 0, x32), f4 -= x32;
        }
        if (x32 < y32.length && o2 > 0) {
          var E3 = m4.length - o2, B5 = Math.min(o2, y32.length - x32);
          y32.copy(m4, E3, x32, x32 + B5), o2 -= B5;
        }
      }
      return y32.fill(0), { key: p32, iv: m4 };
    }
    Bm.exports = I9;
  });
  km = T3((ju) => {
    var qm = ys(), T9 = Hu(), Mi = Te().Buffer, k9 = Ku(), Im = yi(), L9 = Aa(), N9 = Ba(), D9 = Ie();
    function qa(t2, e22, r2) {
      Im.call(this), this._cache = new _s, this._cipher = new L9.AES(e22), this._prev = Mi.from(r2), this._mode = t2, this._autopadding = true;
    }
    D9(qa, Im);
    qa.prototype._update = function(t2) {
      this._cache.add(t2);
      for (var e22, r2, o2 = [];e22 = this._cache.get(); )
        r2 = this._mode.encrypt(this, e22), o2.push(r2);
      return Mi.concat(o2);
    };
    var P9 = Mi.alloc(16, 16);
    qa.prototype._final = function() {
      var t2 = this._cache.flush();
      if (this._autopadding)
        return t2 = this._mode.encrypt(this, t2), this._cipher.scrub(), t2;
      if (!t2.equals(P9))
        throw this._cipher.scrub(), new Error("data not multiple of block length");
    };
    qa.prototype.setAutoPadding = function(t2) {
      return this._autopadding = !!t2, this;
    };
    function _s() {
      this.cache = Mi.allocUnsafe(0);
    }
    _s.prototype.add = function(t2) {
      this.cache = Mi.concat([this.cache, t2]);
    };
    _s.prototype.get = function() {
      if (this.cache.length > 15) {
        var t2 = this.cache.slice(0, 16);
        return this.cache = this.cache.slice(16), t2;
      }
      return null;
    };
    _s.prototype.flush = function() {
      for (var t2 = 16 - this.cache.length, e22 = Mi.allocUnsafe(t2), r2 = -1;++r2 < t2; )
        e22.writeUInt8(t2, r2);
      return Mi.concat([this.cache, e22]);
    };
    function Tm(t2, e22, r2) {
      var o2 = qm[t2.toLowerCase()];
      if (!o2)
        throw new TypeError("invalid suite type");
      if (typeof e22 == "string" && (e22 = Mi.from(e22)), e22.length !== o2.key / 8)
        throw new TypeError("invalid key length " + e22.length);
      if (typeof r2 == "string" && (r2 = Mi.from(r2)), o2.mode !== "GCM" && r2.length !== o2.iv)
        throw new TypeError("invalid iv length " + r2.length);
      return o2.type === "stream" ? new k9(o2.module, e22, r2) : o2.type === "auth" ? new T9(o2.module, e22, r2) : new qa(o2.module, e22, r2);
    }
    function C9(t2, e22) {
      var r2 = qm[t2.toLowerCase()];
      if (!r2)
        throw new TypeError("invalid suite type");
      var o2 = N9(e22, false, r2.key, r2.iv);
      return Tm(t2, o2.key, o2.iv);
    }
    ju.createCipheriv = Tm;
    ju.createCipher = C9;
  });
  Pm = T3((Zu) => {
    var O9 = Hu(), Mf = Te().Buffer, Lm = ys(), F9 = Ku(), Nm = yi(), U9 = Aa(), z9 = Ba(), H9 = Ie();
    function Ia(t2, e22, r2) {
      Nm.call(this), this._cache = new xs, this._last = undefined, this._cipher = new U9.AES(e22), this._prev = Mf.from(r2), this._mode = t2, this._autopadding = true;
    }
    H9(Ia, Nm);
    Ia.prototype._update = function(t2) {
      this._cache.add(t2);
      for (var e22, r2, o2 = [];e22 = this._cache.get(this._autopadding); )
        r2 = this._mode.decrypt(this, e22), o2.push(r2);
      return Mf.concat(o2);
    };
    Ia.prototype._final = function() {
      var t2 = this._cache.flush();
      if (this._autopadding)
        return W9(this._mode.decrypt(this, t2));
      if (t2)
        throw new Error("data not multiple of block length");
    };
    Ia.prototype.setAutoPadding = function(t2) {
      return this._autopadding = !!t2, this;
    };
    function xs() {
      this.cache = Mf.allocUnsafe(0);
    }
    xs.prototype.add = function(t2) {
      this.cache = Mf.concat([this.cache, t2]);
    };
    xs.prototype.get = function(t2) {
      var e22;
      if (t2) {
        if (this.cache.length > 16)
          return e22 = this.cache.slice(0, 16), this.cache = this.cache.slice(16), e22;
      } else if (this.cache.length >= 16)
        return e22 = this.cache.slice(0, 16), this.cache = this.cache.slice(16), e22;
      return null;
    };
    xs.prototype.flush = function() {
      if (this.cache.length)
        return this.cache;
    };
    function W9(t2) {
      var e22 = t2[15];
      if (e22 < 1 || e22 > 16)
        throw new Error("unable to decrypt data");
      for (var r2 = -1;++r2 < e22; )
        if (t2[r2 + (16 - e22)] !== e22)
          throw new Error("unable to decrypt data");
      if (e22 !== 16)
        return t2.slice(0, 16 - e22);
    }
    function Dm(t2, e22, r2) {
      var o2 = Lm[t2.toLowerCase()];
      if (!o2)
        throw new TypeError("invalid suite type");
      if (typeof r2 == "string" && (r2 = Mf.from(r2)), o2.mode !== "GCM" && r2.length !== o2.iv)
        throw new TypeError("invalid iv length " + r2.length);
      if (typeof e22 == "string" && (e22 = Mf.from(e22)), e22.length !== o2.key / 8)
        throw new TypeError("invalid key length " + e22.length);
      return o2.type === "stream" ? new F9(o2.module, e22, r2, true) : o2.type === "auth" ? new O9(o2.module, e22, r2, true) : new Ia(o2.module, e22, r2);
    }
    function K9(t2, e22) {
      var r2 = Lm[t2.toLowerCase()];
      if (!r2)
        throw new TypeError("invalid suite type");
      var o2 = z9(e22, false, r2.key, r2.iv);
      return Dm(t2, o2.key, o2.iv);
    }
    Zu.createDecipher = K9;
    Zu.createDecipheriv = Dm;
  });
  Ss = T3((Nr) => {
    var Cm = km(), Om = Pm(), j9 = Ou();
    function Z9() {
      return Object.keys(j9);
    }
    Nr.createCipher = Nr.Cipher = Cm.createCipher;
    Nr.createCipheriv = Nr.Cipheriv = Cm.createCipheriv;
    Nr.createDecipher = Nr.Decipher = Om.createDecipher;
    Nr.createDecipheriv = Nr.Decipheriv = Om.createDecipheriv;
    Nr.listCiphers = Nr.getCiphers = Z9;
  });
  Fm = T3((_i) => {
    _i["des-ecb"] = { key: 8, iv: 0 };
    _i["des-cbc"] = _i.des = { key: 8, iv: 8 };
    _i["des-ede3-cbc"] = _i.des3 = { key: 24, iv: 8 };
    _i["des-ede3"] = { key: 24, iv: 0 };
    _i["des-ede-cbc"] = { key: 16, iv: 8 };
    _i["des-ede"] = { key: 16, iv: 0 };
  });
  Km = T3((Dr) => {
    var Um = em(), Vu = Ss(), Ki = ys(), xi = Fm(), zm = Ba();
    function V9(t2, e22) {
      t2 = t2.toLowerCase();
      var r2, o2;
      if (Ki[t2])
        r2 = Ki[t2].key, o2 = Ki[t2].iv;
      else if (xi[t2])
        r2 = xi[t2].key * 8, o2 = xi[t2].iv;
      else
        throw new TypeError("invalid suite type");
      var f4 = zm(e22, false, r2, o2);
      return Hm(t2, f4.key, f4.iv);
    }
    function $9(t2, e22) {
      t2 = t2.toLowerCase();
      var r2, o2;
      if (Ki[t2])
        r2 = Ki[t2].key, o2 = Ki[t2].iv;
      else if (xi[t2])
        r2 = xi[t2].key * 8, o2 = xi[t2].iv;
      else
        throw new TypeError("invalid suite type");
      var f4 = zm(e22, false, r2, o2);
      return Wm(t2, f4.key, f4.iv);
    }
    function Hm(t2, e22, r2) {
      if (t2 = t2.toLowerCase(), Ki[t2])
        return Vu.createCipheriv(t2, e22, r2);
      if (xi[t2])
        return new Um({ key: e22, iv: r2, mode: t2 });
      throw new TypeError("invalid suite type");
    }
    function Wm(t2, e22, r2) {
      if (t2 = t2.toLowerCase(), Ki[t2])
        return Vu.createDecipheriv(t2, e22, r2);
      if (xi[t2])
        return new Um({ key: e22, iv: r2, mode: t2, decrypt: true });
      throw new TypeError("invalid suite type");
    }
    function G9() {
      return Object.keys(xi).concat(Vu.getCiphers());
    }
    Dr.createCipher = Dr.Cipher = V9;
    Dr.createCipheriv = Dr.Cipheriv = Hm;
    Dr.createDecipher = Dr.Decipher = $9;
    Dr.createDecipheriv = Dr.Decipheriv = Wm;
    Dr.listCiphers = Dr.getCiphers = G9;
  });
  ji = T3(() => {});
  Gu = T3((jm, $u) => {
    (function(t2, e22) {
      function r2(v3, i2) {
        if (!v3)
          throw new Error(i2 || "Assertion failed");
      }
      function o2(v3, i2) {
        v3.super_ = i2;
        var a3 = function() {};
        a3.prototype = i2.prototype, v3.prototype = new a3, v3.prototype.constructor = v3;
      }
      function f4(v3, i2, a3) {
        if (f4.isBN(v3))
          return v3;
        this.negative = 0, this.words = null, this.length = 0, this.red = null, v3 !== null && ((i2 === "le" || i2 === "be") && (a3 = i2, i2 = 10), this._init(v3 || 0, i2 || 10, a3 || "be"));
      }
      typeof t2 == "object" ? t2.exports = f4 : e22.BN = f4, f4.BN = f4, f4.wordSize = 26;
      var p32;
      try {
        typeof window < "u" && typeof window.Buffer < "u" ? p32 = window.Buffer : p32 = ji().Buffer;
      } catch {}
      f4.isBN = function(i2) {
        return i2 instanceof f4 ? true : i2 !== null && typeof i2 == "object" && i2.constructor.wordSize === f4.wordSize && Array.isArray(i2.words);
      }, f4.max = function(i2, a3) {
        return i2.cmp(a3) > 0 ? i2 : a3;
      }, f4.min = function(i2, a3) {
        return i2.cmp(a3) < 0 ? i2 : a3;
      }, f4.prototype._init = function(i2, a3, h5) {
        if (typeof i2 == "number")
          return this._initNumber(i2, a3, h5);
        if (typeof i2 == "object")
          return this._initArray(i2, a3, h5);
        a3 === "hex" && (a3 = 16), r2(a3 === (a3 | 0) && a3 >= 2 && a3 <= 36), i2 = i2.toString().replace(/\s+/g, "");
        var s2 = 0;
        i2[0] === "-" && (s2++, this.negative = 1), s2 < i2.length && (a3 === 16 ? this._parseHex(i2, s2, h5) : (this._parseBase(i2, a3, s2), h5 === "le" && this._initArray(this.toArray(), a3, h5)));
      }, f4.prototype._initNumber = function(i2, a3, h5) {
        i2 < 0 && (this.negative = 1, i2 = -i2), i2 < 67108864 ? (this.words = [i2 & 67108863], this.length = 1) : i2 < 4503599627370496 ? (this.words = [i2 & 67108863, i2 / 67108864 & 67108863], this.length = 2) : (r2(i2 < 9007199254740992), this.words = [i2 & 67108863, i2 / 67108864 & 67108863, 1], this.length = 3), h5 === "le" && this._initArray(this.toArray(), a3, h5);
      }, f4.prototype._initArray = function(i2, a3, h5) {
        if (r2(typeof i2.length == "number"), i2.length <= 0)
          return this.words = [0], this.length = 1, this;
        this.length = Math.ceil(i2.length / 3), this.words = new Array(this.length);
        for (var s2 = 0;s2 < this.length; s2++)
          this.words[s2] = 0;
        var u3, c, b3 = 0;
        if (h5 === "be")
          for (s2 = i2.length - 1, u3 = 0;s2 >= 0; s2 -= 3)
            c = i2[s2] | i2[s2 - 1] << 8 | i2[s2 - 2] << 16, this.words[u3] |= c << b3 & 67108863, this.words[u3 + 1] = c >>> 26 - b3 & 67108863, b3 += 24, b3 >= 26 && (b3 -= 26, u3++);
        else if (h5 === "le")
          for (s2 = 0, u3 = 0;s2 < i2.length; s2 += 3)
            c = i2[s2] | i2[s2 + 1] << 8 | i2[s2 + 2] << 16, this.words[u3] |= c << b3 & 67108863, this.words[u3 + 1] = c >>> 26 - b3 & 67108863, b3 += 24, b3 >= 26 && (b3 -= 26, u3++);
        return this.strip();
      };
      function m4(v3, i2) {
        var a3 = v3.charCodeAt(i2);
        return a3 >= 65 && a3 <= 70 ? a3 - 55 : a3 >= 97 && a3 <= 102 ? a3 - 87 : a3 - 48 & 15;
      }
      function y32(v3, i2, a3) {
        var h5 = m4(v3, a3);
        return a3 - 1 >= i2 && (h5 |= m4(v3, a3 - 1) << 4), h5;
      }
      f4.prototype._parseHex = function(i2, a3, h5) {
        this.length = Math.ceil((i2.length - a3) / 6), this.words = new Array(this.length);
        for (var s2 = 0;s2 < this.length; s2++)
          this.words[s2] = 0;
        var u3 = 0, c = 0, b3;
        if (h5 === "be")
          for (s2 = i2.length - 1;s2 >= a3; s2 -= 2)
            b3 = y32(i2, a3, s2) << u3, this.words[c] |= b3 & 67108863, u3 >= 18 ? (u3 -= 18, c += 1, this.words[c] |= b3 >>> 26) : u3 += 8;
        else {
          var l4 = i2.length - a3;
          for (s2 = l4 % 2 === 0 ? a3 + 1 : a3;s2 < i2.length; s2 += 2)
            b3 = y32(i2, a3, s2) << u3, this.words[c] |= b3 & 67108863, u3 >= 18 ? (u3 -= 18, c += 1, this.words[c] |= b3 >>> 26) : u3 += 8;
        }
        this.strip();
      };
      function M3(v3, i2, a3, h5) {
        for (var s2 = 0, u3 = Math.min(v3.length, a3), c = i2;c < u3; c++) {
          var b3 = v3.charCodeAt(c) - 48;
          s2 *= h5, b3 >= 49 ? s2 += b3 - 49 + 10 : b3 >= 17 ? s2 += b3 - 17 + 10 : s2 += b3;
        }
        return s2;
      }
      f4.prototype._parseBase = function(i2, a3, h5) {
        this.words = [0], this.length = 1;
        for (var s2 = 0, u3 = 1;u3 <= 67108863; u3 *= a3)
          s2++;
        s2--, u3 = u3 / a3 | 0;
        for (var c = i2.length - h5, b3 = c % s2, l4 = Math.min(c, c - b3) + h5, n4 = 0, d2 = h5;d2 < l4; d2 += s2)
          n4 = M3(i2, d2, d2 + s2, a3), this.imuln(u3), this.words[0] + n4 < 67108864 ? this.words[0] += n4 : this._iaddn(n4);
        if (b3 !== 0) {
          var w2 = 1;
          for (n4 = M3(i2, d2, i2.length, a3), d2 = 0;d2 < b3; d2++)
            w2 *= a3;
          this.imuln(w2), this.words[0] + n4 < 67108864 ? this.words[0] += n4 : this._iaddn(n4);
        }
        this.strip();
      }, f4.prototype.copy = function(i2) {
        i2.words = new Array(this.length);
        for (var a3 = 0;a3 < this.length; a3++)
          i2.words[a3] = this.words[a3];
        i2.length = this.length, i2.negative = this.negative, i2.red = this.red;
      }, f4.prototype.clone = function() {
        var i2 = new f4(null);
        return this.copy(i2), i2;
      }, f4.prototype._expand = function(i2) {
        for (;this.length < i2; )
          this.words[this.length++] = 0;
        return this;
      }, f4.prototype.strip = function() {
        for (;this.length > 1 && this.words[this.length - 1] === 0; )
          this.length--;
        return this._normSign();
      }, f4.prototype._normSign = function() {
        return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
      }, f4.prototype.inspect = function() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var x32 = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"], S3 = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], E3 = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
      f4.prototype.toString = function(i2, a3) {
        i2 = i2 || 10, a3 = a3 | 0 || 1;
        var h5;
        if (i2 === 16 || i2 === "hex") {
          h5 = "";
          for (var s2 = 0, u3 = 0, c = 0;c < this.length; c++) {
            var b3 = this.words[c], l4 = ((b3 << s2 | u3) & 16777215).toString(16);
            u3 = b3 >>> 24 - s2 & 16777215, u3 !== 0 || c !== this.length - 1 ? h5 = x32[6 - l4.length] + l4 + h5 : h5 = l4 + h5, s2 += 2, s2 >= 26 && (s2 -= 26, c--);
          }
          for (u3 !== 0 && (h5 = u3.toString(16) + h5);h5.length % a3 !== 0; )
            h5 = "0" + h5;
          return this.negative !== 0 && (h5 = "-" + h5), h5;
        }
        if (i2 === (i2 | 0) && i2 >= 2 && i2 <= 36) {
          var n4 = S3[i2], d2 = E3[i2];
          h5 = "";
          var w2 = this.clone();
          for (w2.negative = 0;!w2.isZero(); ) {
            var g2 = w2.modn(d2).toString(i2);
            w2 = w2.idivn(d2), w2.isZero() ? h5 = g2 + h5 : h5 = x32[n4 - g2.length] + g2 + h5;
          }
          for (this.isZero() && (h5 = "0" + h5);h5.length % a3 !== 0; )
            h5 = "0" + h5;
          return this.negative !== 0 && (h5 = "-" + h5), h5;
        }
        r2(false, "Base should be between 2 and 36");
      }, f4.prototype.toNumber = function() {
        var i2 = this.words[0];
        return this.length === 2 ? i2 += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? i2 += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && r2(false, "Number can only safely store up to 53 bits"), this.negative !== 0 ? -i2 : i2;
      }, f4.prototype.toJSON = function() {
        return this.toString(16);
      }, f4.prototype.toBuffer = function(i2, a3) {
        return r2(typeof p32 < "u"), this.toArrayLike(p32, i2, a3);
      }, f4.prototype.toArray = function(i2, a3) {
        return this.toArrayLike(Array, i2, a3);
      }, f4.prototype.toArrayLike = function(i2, a3, h5) {
        var s2 = this.byteLength(), u3 = h5 || Math.max(1, s2);
        r2(s2 <= u3, "byte array longer than desired length"), r2(u3 > 0, "Requested array length <= 0"), this.strip();
        var c = a3 === "le", b3 = new i2(u3), l4, n4, d2 = this.clone();
        if (c) {
          for (n4 = 0;!d2.isZero(); n4++)
            l4 = d2.andln(255), d2.iushrn(8), b3[n4] = l4;
          for (;n4 < u3; n4++)
            b3[n4] = 0;
        } else {
          for (n4 = 0;n4 < u3 - s2; n4++)
            b3[n4] = 0;
          for (n4 = 0;!d2.isZero(); n4++)
            l4 = d2.andln(255), d2.iushrn(8), b3[u3 - n4 - 1] = l4;
        }
        return b3;
      }, Math.clz32 ? f4.prototype._countBits = function(i2) {
        return 32 - Math.clz32(i2);
      } : f4.prototype._countBits = function(i2) {
        var a3 = i2, h5 = 0;
        return a3 >= 4096 && (h5 += 13, a3 >>>= 13), a3 >= 64 && (h5 += 7, a3 >>>= 7), a3 >= 8 && (h5 += 4, a3 >>>= 4), a3 >= 2 && (h5 += 2, a3 >>>= 2), h5 + a3;
      }, f4.prototype._zeroBits = function(i2) {
        if (i2 === 0)
          return 26;
        var a3 = i2, h5 = 0;
        return (a3 & 8191) === 0 && (h5 += 13, a3 >>>= 13), (a3 & 127) === 0 && (h5 += 7, a3 >>>= 7), (a3 & 15) === 0 && (h5 += 4, a3 >>>= 4), (a3 & 3) === 0 && (h5 += 2, a3 >>>= 2), (a3 & 1) === 0 && h5++, h5;
      }, f4.prototype.bitLength = function() {
        var i2 = this.words[this.length - 1], a3 = this._countBits(i2);
        return (this.length - 1) * 26 + a3;
      };
      function B5(v3) {
        for (var i2 = new Array(v3.bitLength()), a3 = 0;a3 < i2.length; a3++) {
          var h5 = a3 / 26 | 0, s2 = a3 % 26;
          i2[a3] = (v3.words[h5] & 1 << s2) >>> s2;
        }
        return i2;
      }
      f4.prototype.zeroBits = function() {
        if (this.isZero())
          return 0;
        for (var i2 = 0, a3 = 0;a3 < this.length; a3++) {
          var h5 = this._zeroBits(this.words[a3]);
          if (i2 += h5, h5 !== 26)
            break;
        }
        return i2;
      }, f4.prototype.byteLength = function() {
        return Math.ceil(this.bitLength() / 8);
      }, f4.prototype.toTwos = function(i2) {
        return this.negative !== 0 ? this.abs().inotn(i2).iaddn(1) : this.clone();
      }, f4.prototype.fromTwos = function(i2) {
        return this.testn(i2 - 1) ? this.notn(i2).iaddn(1).ineg() : this.clone();
      }, f4.prototype.isNeg = function() {
        return this.negative !== 0;
      }, f4.prototype.neg = function() {
        return this.clone().ineg();
      }, f4.prototype.ineg = function() {
        return this.isZero() || (this.negative ^= 1), this;
      }, f4.prototype.iuor = function(i2) {
        for (;this.length < i2.length; )
          this.words[this.length++] = 0;
        for (var a3 = 0;a3 < i2.length; a3++)
          this.words[a3] = this.words[a3] | i2.words[a3];
        return this.strip();
      }, f4.prototype.ior = function(i2) {
        return r2((this.negative | i2.negative) === 0), this.iuor(i2);
      }, f4.prototype.or = function(i2) {
        return this.length > i2.length ? this.clone().ior(i2) : i2.clone().ior(this);
      }, f4.prototype.uor = function(i2) {
        return this.length > i2.length ? this.clone().iuor(i2) : i2.clone().iuor(this);
      }, f4.prototype.iuand = function(i2) {
        var a3;
        this.length > i2.length ? a3 = i2 : a3 = this;
        for (var h5 = 0;h5 < a3.length; h5++)
          this.words[h5] = this.words[h5] & i2.words[h5];
        return this.length = a3.length, this.strip();
      }, f4.prototype.iand = function(i2) {
        return r2((this.negative | i2.negative) === 0), this.iuand(i2);
      }, f4.prototype.and = function(i2) {
        return this.length > i2.length ? this.clone().iand(i2) : i2.clone().iand(this);
      }, f4.prototype.uand = function(i2) {
        return this.length > i2.length ? this.clone().iuand(i2) : i2.clone().iuand(this);
      }, f4.prototype.iuxor = function(i2) {
        var a3, h5;
        this.length > i2.length ? (a3 = this, h5 = i2) : (a3 = i2, h5 = this);
        for (var s2 = 0;s2 < h5.length; s2++)
          this.words[s2] = a3.words[s2] ^ h5.words[s2];
        if (this !== a3)
          for (;s2 < a3.length; s2++)
            this.words[s2] = a3.words[s2];
        return this.length = a3.length, this.strip();
      }, f4.prototype.ixor = function(i2) {
        return r2((this.negative | i2.negative) === 0), this.iuxor(i2);
      }, f4.prototype.xor = function(i2) {
        return this.length > i2.length ? this.clone().ixor(i2) : i2.clone().ixor(this);
      }, f4.prototype.uxor = function(i2) {
        return this.length > i2.length ? this.clone().iuxor(i2) : i2.clone().iuxor(this);
      }, f4.prototype.inotn = function(i2) {
        r2(typeof i2 == "number" && i2 >= 0);
        var a3 = Math.ceil(i2 / 26) | 0, h5 = i2 % 26;
        this._expand(a3), h5 > 0 && a3--;
        for (var s2 = 0;s2 < a3; s2++)
          this.words[s2] = ~this.words[s2] & 67108863;
        return h5 > 0 && (this.words[s2] = ~this.words[s2] & 67108863 >> 26 - h5), this.strip();
      }, f4.prototype.notn = function(i2) {
        return this.clone().inotn(i2);
      }, f4.prototype.setn = function(i2, a3) {
        r2(typeof i2 == "number" && i2 >= 0);
        var h5 = i2 / 26 | 0, s2 = i2 % 26;
        return this._expand(h5 + 1), a3 ? this.words[h5] = this.words[h5] | 1 << s2 : this.words[h5] = this.words[h5] & ~(1 << s2), this.strip();
      }, f4.prototype.iadd = function(i2) {
        var a3;
        if (this.negative !== 0 && i2.negative === 0)
          return this.negative = 0, a3 = this.isub(i2), this.negative ^= 1, this._normSign();
        if (this.negative === 0 && i2.negative !== 0)
          return i2.negative = 0, a3 = this.isub(i2), i2.negative = 1, a3._normSign();
        var h5, s2;
        this.length > i2.length ? (h5 = this, s2 = i2) : (h5 = i2, s2 = this);
        for (var u3 = 0, c = 0;c < s2.length; c++)
          a3 = (h5.words[c] | 0) + (s2.words[c] | 0) + u3, this.words[c] = a3 & 67108863, u3 = a3 >>> 26;
        for (;u3 !== 0 && c < h5.length; c++)
          a3 = (h5.words[c] | 0) + u3, this.words[c] = a3 & 67108863, u3 = a3 >>> 26;
        if (this.length = h5.length, u3 !== 0)
          this.words[this.length] = u3, this.length++;
        else if (h5 !== this)
          for (;c < h5.length; c++)
            this.words[c] = h5.words[c];
        return this;
      }, f4.prototype.add = function(i2) {
        var a3;
        return i2.negative !== 0 && this.negative === 0 ? (i2.negative = 0, a3 = this.sub(i2), i2.negative ^= 1, a3) : i2.negative === 0 && this.negative !== 0 ? (this.negative = 0, a3 = i2.sub(this), this.negative = 1, a3) : this.length > i2.length ? this.clone().iadd(i2) : i2.clone().iadd(this);
      }, f4.prototype.isub = function(i2) {
        if (i2.negative !== 0) {
          i2.negative = 0;
          var a3 = this.iadd(i2);
          return i2.negative = 1, a3._normSign();
        } else if (this.negative !== 0)
          return this.negative = 0, this.iadd(i2), this.negative = 1, this._normSign();
        var h5 = this.cmp(i2);
        if (h5 === 0)
          return this.negative = 0, this.length = 1, this.words[0] = 0, this;
        var s2, u3;
        h5 > 0 ? (s2 = this, u3 = i2) : (s2 = i2, u3 = this);
        for (var c = 0, b3 = 0;b3 < u3.length; b3++)
          a3 = (s2.words[b3] | 0) - (u3.words[b3] | 0) + c, c = a3 >> 26, this.words[b3] = a3 & 67108863;
        for (;c !== 0 && b3 < s2.length; b3++)
          a3 = (s2.words[b3] | 0) + c, c = a3 >> 26, this.words[b3] = a3 & 67108863;
        if (c === 0 && b3 < s2.length && s2 !== this)
          for (;b3 < s2.length; b3++)
            this.words[b3] = s2.words[b3];
        return this.length = Math.max(this.length, b3), s2 !== this && (this.negative = 1), this.strip();
      }, f4.prototype.sub = function(i2) {
        return this.clone().isub(i2);
      };
      function q2(v3, i2, a3) {
        a3.negative = i2.negative ^ v3.negative;
        var h5 = v3.length + i2.length | 0;
        a3.length = h5, h5 = h5 - 1 | 0;
        var s2 = v3.words[0] | 0, u3 = i2.words[0] | 0, c = s2 * u3, b3 = c & 67108863, l4 = c / 67108864 | 0;
        a3.words[0] = b3;
        for (var n4 = 1;n4 < h5; n4++) {
          for (var d2 = l4 >>> 26, w2 = l4 & 67108863, g2 = Math.min(n4, i2.length - 1), _3 = Math.max(0, n4 - v3.length + 1);_3 <= g2; _3++) {
            var A6 = n4 - _3 | 0;
            s2 = v3.words[A6] | 0, u3 = i2.words[_3] | 0, c = s2 * u3 + w2, d2 += c / 67108864 | 0, w2 = c & 67108863;
          }
          a3.words[n4] = w2 | 0, l4 = d2 | 0;
        }
        return l4 !== 0 ? a3.words[n4] = l4 | 0 : a3.length--, a3.strip();
      }
      var L32 = function(i2, a3, h5) {
        var s2 = i2.words, u3 = a3.words, c = h5.words, b3 = 0, l4, n4, d2, w2 = s2[0] | 0, g2 = w2 & 8191, _3 = w2 >>> 13, A6 = s2[1] | 0, R3 = A6 & 8191, I2 = A6 >>> 13, Me = s2[2] | 0, k2 = Me & 8191, D2 = Me >>> 13, nt = s2[3] | 0, C3 = nt & 8191, O2 = nt >>> 13, vt = s2[4] | 0, F = vt & 8191, U3 = vt >>> 13, bt = s2[5] | 0, z3 = bt & 8191, H32 = bt >>> 13, mt = s2[6] | 0, W22 = mt & 8191, K = mt >>> 13, gt = s2[7] | 0, j2 = gt & 8191, Z3 = gt >>> 13, yt = s2[8] | 0, V4 = yt & 8191, $32 = yt >>> 13, wt = s2[9] | 0, G4 = wt & 8191, Y = wt >>> 13, Mt = u3[0] | 0, X3 = Mt & 8191, J = Mt >>> 13, _t = u3[1] | 0, Q3 = _t & 8191, ee = _t >>> 13, xt = u3[2] | 0, te = xt & 8191, re = xt >>> 13, St = u3[3] | 0, ie = St & 8191, ne = St >>> 13, Et = u3[4] | 0, fe = Et & 8191, ae = Et >>> 13, At = u3[5] | 0, oe = At & 8191, se = At >>> 13, Rt = u3[6] | 0, he = Rt & 8191, ue = Rt >>> 13, Bt = u3[7] | 0, le = Bt & 8191, de = Bt >>> 13, qt = u3[8] | 0, ce = qt & 8191, pe = qt >>> 13, It = u3[9] | 0, ve = It & 8191, be = It >>> 13;
        h5.negative = i2.negative ^ a3.negative, h5.length = 19, l4 = Math.imul(g2, X3), n4 = Math.imul(g2, J), n4 = n4 + Math.imul(_3, X3) | 0, d2 = Math.imul(_3, J);
        var ft = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (ft >>> 26) | 0, ft &= 67108863, l4 = Math.imul(R3, X3), n4 = Math.imul(R3, J), n4 = n4 + Math.imul(I2, X3) | 0, d2 = Math.imul(I2, J), l4 = l4 + Math.imul(g2, Q3) | 0, n4 = n4 + Math.imul(g2, ee) | 0, n4 = n4 + Math.imul(_3, Q3) | 0, d2 = d2 + Math.imul(_3, ee) | 0;
        var Be = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Be >>> 26) | 0, Be &= 67108863, l4 = Math.imul(k2, X3), n4 = Math.imul(k2, J), n4 = n4 + Math.imul(D2, X3) | 0, d2 = Math.imul(D2, J), l4 = l4 + Math.imul(R3, Q3) | 0, n4 = n4 + Math.imul(R3, ee) | 0, n4 = n4 + Math.imul(I2, Q3) | 0, d2 = d2 + Math.imul(I2, ee) | 0, l4 = l4 + Math.imul(g2, te) | 0, n4 = n4 + Math.imul(g2, re) | 0, n4 = n4 + Math.imul(_3, te) | 0, d2 = d2 + Math.imul(_3, re) | 0;
        var qe = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (qe >>> 26) | 0, qe &= 67108863, l4 = Math.imul(C3, X3), n4 = Math.imul(C3, J), n4 = n4 + Math.imul(O2, X3) | 0, d2 = Math.imul(O2, J), l4 = l4 + Math.imul(k2, Q3) | 0, n4 = n4 + Math.imul(k2, ee) | 0, n4 = n4 + Math.imul(D2, Q3) | 0, d2 = d2 + Math.imul(D2, ee) | 0, l4 = l4 + Math.imul(R3, te) | 0, n4 = n4 + Math.imul(R3, re) | 0, n4 = n4 + Math.imul(I2, te) | 0, d2 = d2 + Math.imul(I2, re) | 0, l4 = l4 + Math.imul(g2, ie) | 0, n4 = n4 + Math.imul(g2, ne) | 0, n4 = n4 + Math.imul(_3, ie) | 0, d2 = d2 + Math.imul(_3, ne) | 0;
        var ze = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (ze >>> 26) | 0, ze &= 67108863, l4 = Math.imul(F, X3), n4 = Math.imul(F, J), n4 = n4 + Math.imul(U3, X3) | 0, d2 = Math.imul(U3, J), l4 = l4 + Math.imul(C3, Q3) | 0, n4 = n4 + Math.imul(C3, ee) | 0, n4 = n4 + Math.imul(O2, Q3) | 0, d2 = d2 + Math.imul(O2, ee) | 0, l4 = l4 + Math.imul(k2, te) | 0, n4 = n4 + Math.imul(k2, re) | 0, n4 = n4 + Math.imul(D2, te) | 0, d2 = d2 + Math.imul(D2, re) | 0, l4 = l4 + Math.imul(R3, ie) | 0, n4 = n4 + Math.imul(R3, ne) | 0, n4 = n4 + Math.imul(I2, ie) | 0, d2 = d2 + Math.imul(I2, ne) | 0, l4 = l4 + Math.imul(g2, fe) | 0, n4 = n4 + Math.imul(g2, ae) | 0, n4 = n4 + Math.imul(_3, fe) | 0, d2 = d2 + Math.imul(_3, ae) | 0;
        var He = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (He >>> 26) | 0, He &= 67108863, l4 = Math.imul(z3, X3), n4 = Math.imul(z3, J), n4 = n4 + Math.imul(H32, X3) | 0, d2 = Math.imul(H32, J), l4 = l4 + Math.imul(F, Q3) | 0, n4 = n4 + Math.imul(F, ee) | 0, n4 = n4 + Math.imul(U3, Q3) | 0, d2 = d2 + Math.imul(U3, ee) | 0, l4 = l4 + Math.imul(C3, te) | 0, n4 = n4 + Math.imul(C3, re) | 0, n4 = n4 + Math.imul(O2, te) | 0, d2 = d2 + Math.imul(O2, re) | 0, l4 = l4 + Math.imul(k2, ie) | 0, n4 = n4 + Math.imul(k2, ne) | 0, n4 = n4 + Math.imul(D2, ie) | 0, d2 = d2 + Math.imul(D2, ne) | 0, l4 = l4 + Math.imul(R3, fe) | 0, n4 = n4 + Math.imul(R3, ae) | 0, n4 = n4 + Math.imul(I2, fe) | 0, d2 = d2 + Math.imul(I2, ae) | 0, l4 = l4 + Math.imul(g2, oe) | 0, n4 = n4 + Math.imul(g2, se) | 0, n4 = n4 + Math.imul(_3, oe) | 0, d2 = d2 + Math.imul(_3, se) | 0;
        var We = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (We >>> 26) | 0, We &= 67108863, l4 = Math.imul(W22, X3), n4 = Math.imul(W22, J), n4 = n4 + Math.imul(K, X3) | 0, d2 = Math.imul(K, J), l4 = l4 + Math.imul(z3, Q3) | 0, n4 = n4 + Math.imul(z3, ee) | 0, n4 = n4 + Math.imul(H32, Q3) | 0, d2 = d2 + Math.imul(H32, ee) | 0, l4 = l4 + Math.imul(F, te) | 0, n4 = n4 + Math.imul(F, re) | 0, n4 = n4 + Math.imul(U3, te) | 0, d2 = d2 + Math.imul(U3, re) | 0, l4 = l4 + Math.imul(C3, ie) | 0, n4 = n4 + Math.imul(C3, ne) | 0, n4 = n4 + Math.imul(O2, ie) | 0, d2 = d2 + Math.imul(O2, ne) | 0, l4 = l4 + Math.imul(k2, fe) | 0, n4 = n4 + Math.imul(k2, ae) | 0, n4 = n4 + Math.imul(D2, fe) | 0, d2 = d2 + Math.imul(D2, ae) | 0, l4 = l4 + Math.imul(R3, oe) | 0, n4 = n4 + Math.imul(R3, se) | 0, n4 = n4 + Math.imul(I2, oe) | 0, d2 = d2 + Math.imul(I2, se) | 0, l4 = l4 + Math.imul(g2, he) | 0, n4 = n4 + Math.imul(g2, ue) | 0, n4 = n4 + Math.imul(_3, he) | 0, d2 = d2 + Math.imul(_3, ue) | 0;
        var Ke = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ke >>> 26) | 0, Ke &= 67108863, l4 = Math.imul(j2, X3), n4 = Math.imul(j2, J), n4 = n4 + Math.imul(Z3, X3) | 0, d2 = Math.imul(Z3, J), l4 = l4 + Math.imul(W22, Q3) | 0, n4 = n4 + Math.imul(W22, ee) | 0, n4 = n4 + Math.imul(K, Q3) | 0, d2 = d2 + Math.imul(K, ee) | 0, l4 = l4 + Math.imul(z3, te) | 0, n4 = n4 + Math.imul(z3, re) | 0, n4 = n4 + Math.imul(H32, te) | 0, d2 = d2 + Math.imul(H32, re) | 0, l4 = l4 + Math.imul(F, ie) | 0, n4 = n4 + Math.imul(F, ne) | 0, n4 = n4 + Math.imul(U3, ie) | 0, d2 = d2 + Math.imul(U3, ne) | 0, l4 = l4 + Math.imul(C3, fe) | 0, n4 = n4 + Math.imul(C3, ae) | 0, n4 = n4 + Math.imul(O2, fe) | 0, d2 = d2 + Math.imul(O2, ae) | 0, l4 = l4 + Math.imul(k2, oe) | 0, n4 = n4 + Math.imul(k2, se) | 0, n4 = n4 + Math.imul(D2, oe) | 0, d2 = d2 + Math.imul(D2, se) | 0, l4 = l4 + Math.imul(R3, he) | 0, n4 = n4 + Math.imul(R3, ue) | 0, n4 = n4 + Math.imul(I2, he) | 0, d2 = d2 + Math.imul(I2, ue) | 0, l4 = l4 + Math.imul(g2, le) | 0, n4 = n4 + Math.imul(g2, de) | 0, n4 = n4 + Math.imul(_3, le) | 0, d2 = d2 + Math.imul(_3, de) | 0;
        var je = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (je >>> 26) | 0, je &= 67108863, l4 = Math.imul(V4, X3), n4 = Math.imul(V4, J), n4 = n4 + Math.imul($32, X3) | 0, d2 = Math.imul($32, J), l4 = l4 + Math.imul(j2, Q3) | 0, n4 = n4 + Math.imul(j2, ee) | 0, n4 = n4 + Math.imul(Z3, Q3) | 0, d2 = d2 + Math.imul(Z3, ee) | 0, l4 = l4 + Math.imul(W22, te) | 0, n4 = n4 + Math.imul(W22, re) | 0, n4 = n4 + Math.imul(K, te) | 0, d2 = d2 + Math.imul(K, re) | 0, l4 = l4 + Math.imul(z3, ie) | 0, n4 = n4 + Math.imul(z3, ne) | 0, n4 = n4 + Math.imul(H32, ie) | 0, d2 = d2 + Math.imul(H32, ne) | 0, l4 = l4 + Math.imul(F, fe) | 0, n4 = n4 + Math.imul(F, ae) | 0, n4 = n4 + Math.imul(U3, fe) | 0, d2 = d2 + Math.imul(U3, ae) | 0, l4 = l4 + Math.imul(C3, oe) | 0, n4 = n4 + Math.imul(C3, se) | 0, n4 = n4 + Math.imul(O2, oe) | 0, d2 = d2 + Math.imul(O2, se) | 0, l4 = l4 + Math.imul(k2, he) | 0, n4 = n4 + Math.imul(k2, ue) | 0, n4 = n4 + Math.imul(D2, he) | 0, d2 = d2 + Math.imul(D2, ue) | 0, l4 = l4 + Math.imul(R3, le) | 0, n4 = n4 + Math.imul(R3, de) | 0, n4 = n4 + Math.imul(I2, le) | 0, d2 = d2 + Math.imul(I2, de) | 0, l4 = l4 + Math.imul(g2, ce) | 0, n4 = n4 + Math.imul(g2, pe) | 0, n4 = n4 + Math.imul(_3, ce) | 0, d2 = d2 + Math.imul(_3, pe) | 0;
        var Ze = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ze >>> 26) | 0, Ze &= 67108863, l4 = Math.imul(G4, X3), n4 = Math.imul(G4, J), n4 = n4 + Math.imul(Y, X3) | 0, d2 = Math.imul(Y, J), l4 = l4 + Math.imul(V4, Q3) | 0, n4 = n4 + Math.imul(V4, ee) | 0, n4 = n4 + Math.imul($32, Q3) | 0, d2 = d2 + Math.imul($32, ee) | 0, l4 = l4 + Math.imul(j2, te) | 0, n4 = n4 + Math.imul(j2, re) | 0, n4 = n4 + Math.imul(Z3, te) | 0, d2 = d2 + Math.imul(Z3, re) | 0, l4 = l4 + Math.imul(W22, ie) | 0, n4 = n4 + Math.imul(W22, ne) | 0, n4 = n4 + Math.imul(K, ie) | 0, d2 = d2 + Math.imul(K, ne) | 0, l4 = l4 + Math.imul(z3, fe) | 0, n4 = n4 + Math.imul(z3, ae) | 0, n4 = n4 + Math.imul(H32, fe) | 0, d2 = d2 + Math.imul(H32, ae) | 0, l4 = l4 + Math.imul(F, oe) | 0, n4 = n4 + Math.imul(F, se) | 0, n4 = n4 + Math.imul(U3, oe) | 0, d2 = d2 + Math.imul(U3, se) | 0, l4 = l4 + Math.imul(C3, he) | 0, n4 = n4 + Math.imul(C3, ue) | 0, n4 = n4 + Math.imul(O2, he) | 0, d2 = d2 + Math.imul(O2, ue) | 0, l4 = l4 + Math.imul(k2, le) | 0, n4 = n4 + Math.imul(k2, de) | 0, n4 = n4 + Math.imul(D2, le) | 0, d2 = d2 + Math.imul(D2, de) | 0, l4 = l4 + Math.imul(R3, ce) | 0, n4 = n4 + Math.imul(R3, pe) | 0, n4 = n4 + Math.imul(I2, ce) | 0, d2 = d2 + Math.imul(I2, pe) | 0, l4 = l4 + Math.imul(g2, ve) | 0, n4 = n4 + Math.imul(g2, be) | 0, n4 = n4 + Math.imul(_3, ve) | 0, d2 = d2 + Math.imul(_3, be) | 0;
        var Ve = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ve >>> 26) | 0, Ve &= 67108863, l4 = Math.imul(G4, Q3), n4 = Math.imul(G4, ee), n4 = n4 + Math.imul(Y, Q3) | 0, d2 = Math.imul(Y, ee), l4 = l4 + Math.imul(V4, te) | 0, n4 = n4 + Math.imul(V4, re) | 0, n4 = n4 + Math.imul($32, te) | 0, d2 = d2 + Math.imul($32, re) | 0, l4 = l4 + Math.imul(j2, ie) | 0, n4 = n4 + Math.imul(j2, ne) | 0, n4 = n4 + Math.imul(Z3, ie) | 0, d2 = d2 + Math.imul(Z3, ne) | 0, l4 = l4 + Math.imul(W22, fe) | 0, n4 = n4 + Math.imul(W22, ae) | 0, n4 = n4 + Math.imul(K, fe) | 0, d2 = d2 + Math.imul(K, ae) | 0, l4 = l4 + Math.imul(z3, oe) | 0, n4 = n4 + Math.imul(z3, se) | 0, n4 = n4 + Math.imul(H32, oe) | 0, d2 = d2 + Math.imul(H32, se) | 0, l4 = l4 + Math.imul(F, he) | 0, n4 = n4 + Math.imul(F, ue) | 0, n4 = n4 + Math.imul(U3, he) | 0, d2 = d2 + Math.imul(U3, ue) | 0, l4 = l4 + Math.imul(C3, le) | 0, n4 = n4 + Math.imul(C3, de) | 0, n4 = n4 + Math.imul(O2, le) | 0, d2 = d2 + Math.imul(O2, de) | 0, l4 = l4 + Math.imul(k2, ce) | 0, n4 = n4 + Math.imul(k2, pe) | 0, n4 = n4 + Math.imul(D2, ce) | 0, d2 = d2 + Math.imul(D2, pe) | 0, l4 = l4 + Math.imul(R3, ve) | 0, n4 = n4 + Math.imul(R3, be) | 0, n4 = n4 + Math.imul(I2, ve) | 0, d2 = d2 + Math.imul(I2, be) | 0;
        var $e = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + ($e >>> 26) | 0, $e &= 67108863, l4 = Math.imul(G4, te), n4 = Math.imul(G4, re), n4 = n4 + Math.imul(Y, te) | 0, d2 = Math.imul(Y, re), l4 = l4 + Math.imul(V4, ie) | 0, n4 = n4 + Math.imul(V4, ne) | 0, n4 = n4 + Math.imul($32, ie) | 0, d2 = d2 + Math.imul($32, ne) | 0, l4 = l4 + Math.imul(j2, fe) | 0, n4 = n4 + Math.imul(j2, ae) | 0, n4 = n4 + Math.imul(Z3, fe) | 0, d2 = d2 + Math.imul(Z3, ae) | 0, l4 = l4 + Math.imul(W22, oe) | 0, n4 = n4 + Math.imul(W22, se) | 0, n4 = n4 + Math.imul(K, oe) | 0, d2 = d2 + Math.imul(K, se) | 0, l4 = l4 + Math.imul(z3, he) | 0, n4 = n4 + Math.imul(z3, ue) | 0, n4 = n4 + Math.imul(H32, he) | 0, d2 = d2 + Math.imul(H32, ue) | 0, l4 = l4 + Math.imul(F, le) | 0, n4 = n4 + Math.imul(F, de) | 0, n4 = n4 + Math.imul(U3, le) | 0, d2 = d2 + Math.imul(U3, de) | 0, l4 = l4 + Math.imul(C3, ce) | 0, n4 = n4 + Math.imul(C3, pe) | 0, n4 = n4 + Math.imul(O2, ce) | 0, d2 = d2 + Math.imul(O2, pe) | 0, l4 = l4 + Math.imul(k2, ve) | 0, n4 = n4 + Math.imul(k2, be) | 0, n4 = n4 + Math.imul(D2, ve) | 0, d2 = d2 + Math.imul(D2, be) | 0;
        var Ge = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ge >>> 26) | 0, Ge &= 67108863, l4 = Math.imul(G4, ie), n4 = Math.imul(G4, ne), n4 = n4 + Math.imul(Y, ie) | 0, d2 = Math.imul(Y, ne), l4 = l4 + Math.imul(V4, fe) | 0, n4 = n4 + Math.imul(V4, ae) | 0, n4 = n4 + Math.imul($32, fe) | 0, d2 = d2 + Math.imul($32, ae) | 0, l4 = l4 + Math.imul(j2, oe) | 0, n4 = n4 + Math.imul(j2, se) | 0, n4 = n4 + Math.imul(Z3, oe) | 0, d2 = d2 + Math.imul(Z3, se) | 0, l4 = l4 + Math.imul(W22, he) | 0, n4 = n4 + Math.imul(W22, ue) | 0, n4 = n4 + Math.imul(K, he) | 0, d2 = d2 + Math.imul(K, ue) | 0, l4 = l4 + Math.imul(z3, le) | 0, n4 = n4 + Math.imul(z3, de) | 0, n4 = n4 + Math.imul(H32, le) | 0, d2 = d2 + Math.imul(H32, de) | 0, l4 = l4 + Math.imul(F, ce) | 0, n4 = n4 + Math.imul(F, pe) | 0, n4 = n4 + Math.imul(U3, ce) | 0, d2 = d2 + Math.imul(U3, pe) | 0, l4 = l4 + Math.imul(C3, ve) | 0, n4 = n4 + Math.imul(C3, be) | 0, n4 = n4 + Math.imul(O2, ve) | 0, d2 = d2 + Math.imul(O2, be) | 0;
        var Ye = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ye >>> 26) | 0, Ye &= 67108863, l4 = Math.imul(G4, fe), n4 = Math.imul(G4, ae), n4 = n4 + Math.imul(Y, fe) | 0, d2 = Math.imul(Y, ae), l4 = l4 + Math.imul(V4, oe) | 0, n4 = n4 + Math.imul(V4, se) | 0, n4 = n4 + Math.imul($32, oe) | 0, d2 = d2 + Math.imul($32, se) | 0, l4 = l4 + Math.imul(j2, he) | 0, n4 = n4 + Math.imul(j2, ue) | 0, n4 = n4 + Math.imul(Z3, he) | 0, d2 = d2 + Math.imul(Z3, ue) | 0, l4 = l4 + Math.imul(W22, le) | 0, n4 = n4 + Math.imul(W22, de) | 0, n4 = n4 + Math.imul(K, le) | 0, d2 = d2 + Math.imul(K, de) | 0, l4 = l4 + Math.imul(z3, ce) | 0, n4 = n4 + Math.imul(z3, pe) | 0, n4 = n4 + Math.imul(H32, ce) | 0, d2 = d2 + Math.imul(H32, pe) | 0, l4 = l4 + Math.imul(F, ve) | 0, n4 = n4 + Math.imul(F, be) | 0, n4 = n4 + Math.imul(U3, ve) | 0, d2 = d2 + Math.imul(U3, be) | 0;
        var Xe = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Xe >>> 26) | 0, Xe &= 67108863, l4 = Math.imul(G4, oe), n4 = Math.imul(G4, se), n4 = n4 + Math.imul(Y, oe) | 0, d2 = Math.imul(Y, se), l4 = l4 + Math.imul(V4, he) | 0, n4 = n4 + Math.imul(V4, ue) | 0, n4 = n4 + Math.imul($32, he) | 0, d2 = d2 + Math.imul($32, ue) | 0, l4 = l4 + Math.imul(j2, le) | 0, n4 = n4 + Math.imul(j2, de) | 0, n4 = n4 + Math.imul(Z3, le) | 0, d2 = d2 + Math.imul(Z3, de) | 0, l4 = l4 + Math.imul(W22, ce) | 0, n4 = n4 + Math.imul(W22, pe) | 0, n4 = n4 + Math.imul(K, ce) | 0, d2 = d2 + Math.imul(K, pe) | 0, l4 = l4 + Math.imul(z3, ve) | 0, n4 = n4 + Math.imul(z3, be) | 0, n4 = n4 + Math.imul(H32, ve) | 0, d2 = d2 + Math.imul(H32, be) | 0;
        var Je = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Je >>> 26) | 0, Je &= 67108863, l4 = Math.imul(G4, he), n4 = Math.imul(G4, ue), n4 = n4 + Math.imul(Y, he) | 0, d2 = Math.imul(Y, ue), l4 = l4 + Math.imul(V4, le) | 0, n4 = n4 + Math.imul(V4, de) | 0, n4 = n4 + Math.imul($32, le) | 0, d2 = d2 + Math.imul($32, de) | 0, l4 = l4 + Math.imul(j2, ce) | 0, n4 = n4 + Math.imul(j2, pe) | 0, n4 = n4 + Math.imul(Z3, ce) | 0, d2 = d2 + Math.imul(Z3, pe) | 0, l4 = l4 + Math.imul(W22, ve) | 0, n4 = n4 + Math.imul(W22, be) | 0, n4 = n4 + Math.imul(K, ve) | 0, d2 = d2 + Math.imul(K, be) | 0;
        var Qe = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Qe >>> 26) | 0, Qe &= 67108863, l4 = Math.imul(G4, le), n4 = Math.imul(G4, de), n4 = n4 + Math.imul(Y, le) | 0, d2 = Math.imul(Y, de), l4 = l4 + Math.imul(V4, ce) | 0, n4 = n4 + Math.imul(V4, pe) | 0, n4 = n4 + Math.imul($32, ce) | 0, d2 = d2 + Math.imul($32, pe) | 0, l4 = l4 + Math.imul(j2, ve) | 0, n4 = n4 + Math.imul(j2, be) | 0, n4 = n4 + Math.imul(Z3, ve) | 0, d2 = d2 + Math.imul(Z3, be) | 0;
        var et = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (et >>> 26) | 0, et &= 67108863, l4 = Math.imul(G4, ce), n4 = Math.imul(G4, pe), n4 = n4 + Math.imul(Y, ce) | 0, d2 = Math.imul(Y, pe), l4 = l4 + Math.imul(V4, ve) | 0, n4 = n4 + Math.imul(V4, be) | 0, n4 = n4 + Math.imul($32, ve) | 0, d2 = d2 + Math.imul($32, be) | 0;
        var tt = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (tt >>> 26) | 0, tt &= 67108863, l4 = Math.imul(G4, ve), n4 = Math.imul(G4, be), n4 = n4 + Math.imul(Y, ve) | 0, d2 = Math.imul(Y, be);
        var rt = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        return b3 = (d2 + (n4 >>> 13) | 0) + (rt >>> 26) | 0, rt &= 67108863, c[0] = ft, c[1] = Be, c[2] = qe, c[3] = ze, c[4] = He, c[5] = We, c[6] = Ke, c[7] = je, c[8] = Ze, c[9] = Ve, c[10] = $e, c[11] = Ge, c[12] = Ye, c[13] = Xe, c[14] = Je, c[15] = Qe, c[16] = et, c[17] = tt, c[18] = rt, b3 !== 0 && (c[19] = b3, h5.length++), h5;
      };
      Math.imul || (L32 = q2);
      function ge(v3, i2, a3) {
        a3.negative = i2.negative ^ v3.negative, a3.length = v3.length + i2.length;
        for (var h5 = 0, s2 = 0, u3 = 0;u3 < a3.length - 1; u3++) {
          var c = s2;
          s2 = 0;
          for (var b3 = h5 & 67108863, l4 = Math.min(u3, i2.length - 1), n4 = Math.max(0, u3 - v3.length + 1);n4 <= l4; n4++) {
            var d2 = u3 - n4, w2 = v3.words[d2] | 0, g2 = i2.words[n4] | 0, _3 = w2 * g2, A6 = _3 & 67108863;
            c = c + (_3 / 67108864 | 0) | 0, A6 = A6 + b3 | 0, b3 = A6 & 67108863, c = c + (A6 >>> 26) | 0, s2 += c >>> 26, c &= 67108863;
          }
          a3.words[u3] = b3, h5 = c, c = s2;
        }
        return h5 !== 0 ? a3.words[u3] = h5 : a3.length--, a3.strip();
      }
      function _e(v3, i2, a3) {
        var h5 = new N3;
        return h5.mulp(v3, i2, a3);
      }
      f4.prototype.mulTo = function(i2, a3) {
        var h5, s2 = this.length + i2.length;
        return this.length === 10 && i2.length === 10 ? h5 = L32(this, i2, a3) : s2 < 63 ? h5 = q2(this, i2, a3) : s2 < 1024 ? h5 = ge(this, i2, a3) : h5 = _e(this, i2, a3), h5;
      };
      function N3(v3, i2) {
        this.x = v3, this.y = i2;
      }
      N3.prototype.makeRBT = function(i2) {
        for (var a3 = new Array(i2), h5 = f4.prototype._countBits(i2) - 1, s2 = 0;s2 < i2; s2++)
          a3[s2] = this.revBin(s2, h5, i2);
        return a3;
      }, N3.prototype.revBin = function(i2, a3, h5) {
        if (i2 === 0 || i2 === h5 - 1)
          return i2;
        for (var s2 = 0, u3 = 0;u3 < a3; u3++)
          s2 |= (i2 & 1) << a3 - u3 - 1, i2 >>= 1;
        return s2;
      }, N3.prototype.permute = function(i2, a3, h5, s2, u3, c) {
        for (var b3 = 0;b3 < c; b3++)
          s2[b3] = a3[i2[b3]], u3[b3] = h5[i2[b3]];
      }, N3.prototype.transform = function(i2, a3, h5, s2, u3, c) {
        this.permute(c, i2, a3, h5, s2, u3);
        for (var b3 = 1;b3 < u3; b3 <<= 1)
          for (var l4 = b3 << 1, n4 = Math.cos(2 * Math.PI / l4), d2 = Math.sin(2 * Math.PI / l4), w2 = 0;w2 < u3; w2 += l4)
            for (var g2 = n4, _3 = d2, A6 = 0;A6 < b3; A6++) {
              var R3 = h5[w2 + A6], I2 = s2[w2 + A6], Me = h5[w2 + A6 + b3], k2 = s2[w2 + A6 + b3], D2 = g2 * Me - _3 * k2;
              k2 = g2 * k2 + _3 * Me, Me = D2, h5[w2 + A6] = R3 + Me, s2[w2 + A6] = I2 + k2, h5[w2 + A6 + b3] = R3 - Me, s2[w2 + A6 + b3] = I2 - k2, A6 !== l4 && (D2 = n4 * g2 - d2 * _3, _3 = n4 * _3 + d2 * g2, g2 = D2);
            }
      }, N3.prototype.guessLen13b = function(i2, a3) {
        var h5 = Math.max(a3, i2) | 1, s2 = h5 & 1, u3 = 0;
        for (h5 = h5 / 2 | 0;h5; h5 = h5 >>> 1)
          u3++;
        return 1 << u3 + 1 + s2;
      }, N3.prototype.conjugate = function(i2, a3, h5) {
        if (!(h5 <= 1))
          for (var s2 = 0;s2 < h5 / 2; s2++) {
            var u3 = i2[s2];
            i2[s2] = i2[h5 - s2 - 1], i2[h5 - s2 - 1] = u3, u3 = a3[s2], a3[s2] = -a3[h5 - s2 - 1], a3[h5 - s2 - 1] = -u3;
          }
      }, N3.prototype.normalize13b = function(i2, a3) {
        for (var h5 = 0, s2 = 0;s2 < a3 / 2; s2++) {
          var u3 = Math.round(i2[2 * s2 + 1] / a3) * 8192 + Math.round(i2[2 * s2] / a3) + h5;
          i2[s2] = u3 & 67108863, u3 < 67108864 ? h5 = 0 : h5 = u3 / 67108864 | 0;
        }
        return i2;
      }, N3.prototype.convert13b = function(i2, a3, h5, s2) {
        for (var u3 = 0, c = 0;c < a3; c++)
          u3 = u3 + (i2[c] | 0), h5[2 * c] = u3 & 8191, u3 = u3 >>> 13, h5[2 * c + 1] = u3 & 8191, u3 = u3 >>> 13;
        for (c = 2 * a3;c < s2; ++c)
          h5[c] = 0;
        r2(u3 === 0), r2((u3 & -8192) === 0);
      }, N3.prototype.stub = function(i2) {
        for (var a3 = new Array(i2), h5 = 0;h5 < i2; h5++)
          a3[h5] = 0;
        return a3;
      }, N3.prototype.mulp = function(i2, a3, h5) {
        var s2 = 2 * this.guessLen13b(i2.length, a3.length), u3 = this.makeRBT(s2), c = this.stub(s2), b3 = new Array(s2), l4 = new Array(s2), n4 = new Array(s2), d2 = new Array(s2), w2 = new Array(s2), g2 = new Array(s2), _3 = h5.words;
        _3.length = s2, this.convert13b(i2.words, i2.length, b3, s2), this.convert13b(a3.words, a3.length, d2, s2), this.transform(b3, c, l4, n4, s2, u3), this.transform(d2, c, w2, g2, s2, u3);
        for (var A6 = 0;A6 < s2; A6++) {
          var R3 = l4[A6] * w2[A6] - n4[A6] * g2[A6];
          n4[A6] = l4[A6] * g2[A6] + n4[A6] * w2[A6], l4[A6] = R3;
        }
        return this.conjugate(l4, n4, s2), this.transform(l4, n4, _3, c, s2, u3), this.conjugate(_3, c, s2), this.normalize13b(_3, s2), h5.negative = i2.negative ^ a3.negative, h5.length = i2.length + a3.length, h5.strip();
      }, f4.prototype.mul = function(i2) {
        var a3 = new f4(null);
        return a3.words = new Array(this.length + i2.length), this.mulTo(i2, a3);
      }, f4.prototype.mulf = function(i2) {
        var a3 = new f4(null);
        return a3.words = new Array(this.length + i2.length), _e(this, i2, a3);
      }, f4.prototype.imul = function(i2) {
        return this.clone().mulTo(i2, this);
      }, f4.prototype.imuln = function(i2) {
        r2(typeof i2 == "number"), r2(i2 < 67108864);
        for (var a3 = 0, h5 = 0;h5 < this.length; h5++) {
          var s2 = (this.words[h5] | 0) * i2, u3 = (s2 & 67108863) + (a3 & 67108863);
          a3 >>= 26, a3 += s2 / 67108864 | 0, a3 += u3 >>> 26, this.words[h5] = u3 & 67108863;
        }
        return a3 !== 0 && (this.words[h5] = a3, this.length++), this;
      }, f4.prototype.muln = function(i2) {
        return this.clone().imuln(i2);
      }, f4.prototype.sqr = function() {
        return this.mul(this);
      }, f4.prototype.isqr = function() {
        return this.imul(this.clone());
      }, f4.prototype.pow = function(i2) {
        var a3 = B5(i2);
        if (a3.length === 0)
          return new f4(1);
        for (var h5 = this, s2 = 0;s2 < a3.length && a3[s2] === 0; s2++, h5 = h5.sqr())
          ;
        if (++s2 < a3.length)
          for (var u3 = h5.sqr();s2 < a3.length; s2++, u3 = u3.sqr())
            a3[s2] !== 0 && (h5 = h5.mul(u3));
        return h5;
      }, f4.prototype.iushln = function(i2) {
        r2(typeof i2 == "number" && i2 >= 0);
        var a3 = i2 % 26, h5 = (i2 - a3) / 26, s2 = 67108863 >>> 26 - a3 << 26 - a3, u3;
        if (a3 !== 0) {
          var c = 0;
          for (u3 = 0;u3 < this.length; u3++) {
            var b3 = this.words[u3] & s2, l4 = (this.words[u3] | 0) - b3 << a3;
            this.words[u3] = l4 | c, c = b3 >>> 26 - a3;
          }
          c && (this.words[u3] = c, this.length++);
        }
        if (h5 !== 0) {
          for (u3 = this.length - 1;u3 >= 0; u3--)
            this.words[u3 + h5] = this.words[u3];
          for (u3 = 0;u3 < h5; u3++)
            this.words[u3] = 0;
          this.length += h5;
        }
        return this.strip();
      }, f4.prototype.ishln = function(i2) {
        return r2(this.negative === 0), this.iushln(i2);
      }, f4.prototype.iushrn = function(i2, a3, h5) {
        r2(typeof i2 == "number" && i2 >= 0);
        var s2;
        a3 ? s2 = (a3 - a3 % 26) / 26 : s2 = 0;
        var u3 = i2 % 26, c = Math.min((i2 - u3) / 26, this.length), b3 = 67108863 ^ 67108863 >>> u3 << u3, l4 = h5;
        if (s2 -= c, s2 = Math.max(0, s2), l4) {
          for (var n4 = 0;n4 < c; n4++)
            l4.words[n4] = this.words[n4];
          l4.length = c;
        }
        if (c !== 0)
          if (this.length > c)
            for (this.length -= c, n4 = 0;n4 < this.length; n4++)
              this.words[n4] = this.words[n4 + c];
          else
            this.words[0] = 0, this.length = 1;
        var d2 = 0;
        for (n4 = this.length - 1;n4 >= 0 && (d2 !== 0 || n4 >= s2); n4--) {
          var w2 = this.words[n4] | 0;
          this.words[n4] = d2 << 26 - u3 | w2 >>> u3, d2 = w2 & b3;
        }
        return l4 && d2 !== 0 && (l4.words[l4.length++] = d2), this.length === 0 && (this.words[0] = 0, this.length = 1), this.strip();
      }, f4.prototype.ishrn = function(i2, a3, h5) {
        return r2(this.negative === 0), this.iushrn(i2, a3, h5);
      }, f4.prototype.shln = function(i2) {
        return this.clone().ishln(i2);
      }, f4.prototype.ushln = function(i2) {
        return this.clone().iushln(i2);
      }, f4.prototype.shrn = function(i2) {
        return this.clone().ishrn(i2);
      }, f4.prototype.ushrn = function(i2) {
        return this.clone().iushrn(i2);
      }, f4.prototype.testn = function(i2) {
        r2(typeof i2 == "number" && i2 >= 0);
        var a3 = i2 % 26, h5 = (i2 - a3) / 26, s2 = 1 << a3;
        if (this.length <= h5)
          return false;
        var u3 = this.words[h5];
        return !!(u3 & s2);
      }, f4.prototype.imaskn = function(i2) {
        r2(typeof i2 == "number" && i2 >= 0);
        var a3 = i2 % 26, h5 = (i2 - a3) / 26;
        if (r2(this.negative === 0, "imaskn works only with positive numbers"), this.length <= h5)
          return this;
        if (a3 !== 0 && h5++, this.length = Math.min(h5, this.length), a3 !== 0) {
          var s2 = 67108863 ^ 67108863 >>> a3 << a3;
          this.words[this.length - 1] &= s2;
        }
        return this.strip();
      }, f4.prototype.maskn = function(i2) {
        return this.clone().imaskn(i2);
      }, f4.prototype.iaddn = function(i2) {
        return r2(typeof i2 == "number"), r2(i2 < 67108864), i2 < 0 ? this.isubn(-i2) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) < i2 ? (this.words[0] = i2 - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(i2), this.negative = 1, this) : this._iaddn(i2);
      }, f4.prototype._iaddn = function(i2) {
        this.words[0] += i2;
        for (var a3 = 0;a3 < this.length && this.words[a3] >= 67108864; a3++)
          this.words[a3] -= 67108864, a3 === this.length - 1 ? this.words[a3 + 1] = 1 : this.words[a3 + 1]++;
        return this.length = Math.max(this.length, a3 + 1), this;
      }, f4.prototype.isubn = function(i2) {
        if (r2(typeof i2 == "number"), r2(i2 < 67108864), i2 < 0)
          return this.iaddn(-i2);
        if (this.negative !== 0)
          return this.negative = 0, this.iaddn(i2), this.negative = 1, this;
        if (this.words[0] -= i2, this.length === 1 && this.words[0] < 0)
          this.words[0] = -this.words[0], this.negative = 1;
        else
          for (var a3 = 0;a3 < this.length && this.words[a3] < 0; a3++)
            this.words[a3] += 67108864, this.words[a3 + 1] -= 1;
        return this.strip();
      }, f4.prototype.addn = function(i2) {
        return this.clone().iaddn(i2);
      }, f4.prototype.subn = function(i2) {
        return this.clone().isubn(i2);
      }, f4.prototype.iabs = function() {
        return this.negative = 0, this;
      }, f4.prototype.abs = function() {
        return this.clone().iabs();
      }, f4.prototype._ishlnsubmul = function(i2, a3, h5) {
        var s2 = i2.length + h5, u3;
        this._expand(s2);
        var c, b3 = 0;
        for (u3 = 0;u3 < i2.length; u3++) {
          c = (this.words[u3 + h5] | 0) + b3;
          var l4 = (i2.words[u3] | 0) * a3;
          c -= l4 & 67108863, b3 = (c >> 26) - (l4 / 67108864 | 0), this.words[u3 + h5] = c & 67108863;
        }
        for (;u3 < this.length - h5; u3++)
          c = (this.words[u3 + h5] | 0) + b3, b3 = c >> 26, this.words[u3 + h5] = c & 67108863;
        if (b3 === 0)
          return this.strip();
        for (r2(b3 === -1), b3 = 0, u3 = 0;u3 < this.length; u3++)
          c = -(this.words[u3] | 0) + b3, b3 = c >> 26, this.words[u3] = c & 67108863;
        return this.negative = 1, this.strip();
      }, f4.prototype._wordDiv = function(i2, a3) {
        var h5 = this.length - i2.length, s2 = this.clone(), u3 = i2, c = u3.words[u3.length - 1] | 0, b3 = this._countBits(c);
        h5 = 26 - b3, h5 !== 0 && (u3 = u3.ushln(h5), s2.iushln(h5), c = u3.words[u3.length - 1] | 0);
        var l4 = s2.length - u3.length, n4;
        if (a3 !== "mod") {
          n4 = new f4(null), n4.length = l4 + 1, n4.words = new Array(n4.length);
          for (var d2 = 0;d2 < n4.length; d2++)
            n4.words[d2] = 0;
        }
        var w2 = s2.clone()._ishlnsubmul(u3, 1, l4);
        w2.negative === 0 && (s2 = w2, n4 && (n4.words[l4] = 1));
        for (var g2 = l4 - 1;g2 >= 0; g2--) {
          var _3 = (s2.words[u3.length + g2] | 0) * 67108864 + (s2.words[u3.length + g2 - 1] | 0);
          for (_3 = Math.min(_3 / c | 0, 67108863), s2._ishlnsubmul(u3, _3, g2);s2.negative !== 0; )
            _3--, s2.negative = 0, s2._ishlnsubmul(u3, 1, g2), s2.isZero() || (s2.negative ^= 1);
          n4 && (n4.words[g2] = _3);
        }
        return n4 && n4.strip(), s2.strip(), a3 !== "div" && h5 !== 0 && s2.iushrn(h5), { div: n4 || null, mod: s2 };
      }, f4.prototype.divmod = function(i2, a3, h5) {
        if (r2(!i2.isZero()), this.isZero())
          return { div: new f4(0), mod: new f4(0) };
        var s2, u3, c;
        return this.negative !== 0 && i2.negative === 0 ? (c = this.neg().divmod(i2, a3), a3 !== "mod" && (s2 = c.div.neg()), a3 !== "div" && (u3 = c.mod.neg(), h5 && u3.negative !== 0 && u3.iadd(i2)), { div: s2, mod: u3 }) : this.negative === 0 && i2.negative !== 0 ? (c = this.divmod(i2.neg(), a3), a3 !== "mod" && (s2 = c.div.neg()), { div: s2, mod: c.mod }) : (this.negative & i2.negative) !== 0 ? (c = this.neg().divmod(i2.neg(), a3), a3 !== "div" && (u3 = c.mod.neg(), h5 && u3.negative !== 0 && u3.isub(i2)), { div: c.div, mod: u3 }) : i2.length > this.length || this.cmp(i2) < 0 ? { div: new f4(0), mod: this } : i2.length === 1 ? a3 === "div" ? { div: this.divn(i2.words[0]), mod: null } : a3 === "mod" ? { div: null, mod: new f4(this.modn(i2.words[0])) } : { div: this.divn(i2.words[0]), mod: new f4(this.modn(i2.words[0])) } : this._wordDiv(i2, a3);
      }, f4.prototype.div = function(i2) {
        return this.divmod(i2, "div", false).div;
      }, f4.prototype.mod = function(i2) {
        return this.divmod(i2, "mod", false).mod;
      }, f4.prototype.umod = function(i2) {
        return this.divmod(i2, "mod", true).mod;
      }, f4.prototype.divRound = function(i2) {
        var a3 = this.divmod(i2);
        if (a3.mod.isZero())
          return a3.div;
        var h5 = a3.div.negative !== 0 ? a3.mod.isub(i2) : a3.mod, s2 = i2.ushrn(1), u3 = i2.andln(1), c = h5.cmp(s2);
        return c < 0 || u3 === 1 && c === 0 ? a3.div : a3.div.negative !== 0 ? a3.div.isubn(1) : a3.div.iaddn(1);
      }, f4.prototype.modn = function(i2) {
        r2(i2 <= 67108863);
        for (var a3 = (1 << 26) % i2, h5 = 0, s2 = this.length - 1;s2 >= 0; s2--)
          h5 = (a3 * h5 + (this.words[s2] | 0)) % i2;
        return h5;
      }, f4.prototype.idivn = function(i2) {
        r2(i2 <= 67108863);
        for (var a3 = 0, h5 = this.length - 1;h5 >= 0; h5--) {
          var s2 = (this.words[h5] | 0) + a3 * 67108864;
          this.words[h5] = s2 / i2 | 0, a3 = s2 % i2;
        }
        return this.strip();
      }, f4.prototype.divn = function(i2) {
        return this.clone().idivn(i2);
      }, f4.prototype.egcd = function(i2) {
        r2(i2.negative === 0), r2(!i2.isZero());
        var a3 = this, h5 = i2.clone();
        a3.negative !== 0 ? a3 = a3.umod(i2) : a3 = a3.clone();
        for (var s2 = new f4(1), u3 = new f4(0), c = new f4(0), b3 = new f4(1), l4 = 0;a3.isEven() && h5.isEven(); )
          a3.iushrn(1), h5.iushrn(1), ++l4;
        for (var n4 = h5.clone(), d2 = a3.clone();!a3.isZero(); ) {
          for (var w2 = 0, g2 = 1;(a3.words[0] & g2) === 0 && w2 < 26; ++w2, g2 <<= 1)
            ;
          if (w2 > 0)
            for (a3.iushrn(w2);w2-- > 0; )
              (s2.isOdd() || u3.isOdd()) && (s2.iadd(n4), u3.isub(d2)), s2.iushrn(1), u3.iushrn(1);
          for (var _3 = 0, A6 = 1;(h5.words[0] & A6) === 0 && _3 < 26; ++_3, A6 <<= 1)
            ;
          if (_3 > 0)
            for (h5.iushrn(_3);_3-- > 0; )
              (c.isOdd() || b3.isOdd()) && (c.iadd(n4), b3.isub(d2)), c.iushrn(1), b3.iushrn(1);
          a3.cmp(h5) >= 0 ? (a3.isub(h5), s2.isub(c), u3.isub(b3)) : (h5.isub(a3), c.isub(s2), b3.isub(u3));
        }
        return { a: c, b: b3, gcd: h5.iushln(l4) };
      }, f4.prototype._invmp = function(i2) {
        r2(i2.negative === 0), r2(!i2.isZero());
        var a3 = this, h5 = i2.clone();
        a3.negative !== 0 ? a3 = a3.umod(i2) : a3 = a3.clone();
        for (var s2 = new f4(1), u3 = new f4(0), c = h5.clone();a3.cmpn(1) > 0 && h5.cmpn(1) > 0; ) {
          for (var b3 = 0, l4 = 1;(a3.words[0] & l4) === 0 && b3 < 26; ++b3, l4 <<= 1)
            ;
          if (b3 > 0)
            for (a3.iushrn(b3);b3-- > 0; )
              s2.isOdd() && s2.iadd(c), s2.iushrn(1);
          for (var n4 = 0, d2 = 1;(h5.words[0] & d2) === 0 && n4 < 26; ++n4, d2 <<= 1)
            ;
          if (n4 > 0)
            for (h5.iushrn(n4);n4-- > 0; )
              u3.isOdd() && u3.iadd(c), u3.iushrn(1);
          a3.cmp(h5) >= 0 ? (a3.isub(h5), s2.isub(u3)) : (h5.isub(a3), u3.isub(s2));
        }
        var w2;
        return a3.cmpn(1) === 0 ? w2 = s2 : w2 = u3, w2.cmpn(0) < 0 && w2.iadd(i2), w2;
      }, f4.prototype.gcd = function(i2) {
        if (this.isZero())
          return i2.abs();
        if (i2.isZero())
          return this.abs();
        var a3 = this.clone(), h5 = i2.clone();
        a3.negative = 0, h5.negative = 0;
        for (var s2 = 0;a3.isEven() && h5.isEven(); s2++)
          a3.iushrn(1), h5.iushrn(1);
        do {
          for (;a3.isEven(); )
            a3.iushrn(1);
          for (;h5.isEven(); )
            h5.iushrn(1);
          var u3 = a3.cmp(h5);
          if (u3 < 0) {
            var c = a3;
            a3 = h5, h5 = c;
          } else if (u3 === 0 || h5.cmpn(1) === 0)
            break;
          a3.isub(h5);
        } while (true);
        return h5.iushln(s2);
      }, f4.prototype.invm = function(i2) {
        return this.egcd(i2).a.umod(i2);
      }, f4.prototype.isEven = function() {
        return (this.words[0] & 1) === 0;
      }, f4.prototype.isOdd = function() {
        return (this.words[0] & 1) === 1;
      }, f4.prototype.andln = function(i2) {
        return this.words[0] & i2;
      }, f4.prototype.bincn = function(i2) {
        r2(typeof i2 == "number");
        var a3 = i2 % 26, h5 = (i2 - a3) / 26, s2 = 1 << a3;
        if (this.length <= h5)
          return this._expand(h5 + 1), this.words[h5] |= s2, this;
        for (var u3 = s2, c = h5;u3 !== 0 && c < this.length; c++) {
          var b3 = this.words[c] | 0;
          b3 += u3, u3 = b3 >>> 26, b3 &= 67108863, this.words[c] = b3;
        }
        return u3 !== 0 && (this.words[c] = u3, this.length++), this;
      }, f4.prototype.isZero = function() {
        return this.length === 1 && this.words[0] === 0;
      }, f4.prototype.cmpn = function(i2) {
        var a3 = i2 < 0;
        if (this.negative !== 0 && !a3)
          return -1;
        if (this.negative === 0 && a3)
          return 1;
        this.strip();
        var h5;
        if (this.length > 1)
          h5 = 1;
        else {
          a3 && (i2 = -i2), r2(i2 <= 67108863, "Number is too big");
          var s2 = this.words[0] | 0;
          h5 = s2 === i2 ? 0 : s2 < i2 ? -1 : 1;
        }
        return this.negative !== 0 ? -h5 | 0 : h5;
      }, f4.prototype.cmp = function(i2) {
        if (this.negative !== 0 && i2.negative === 0)
          return -1;
        if (this.negative === 0 && i2.negative !== 0)
          return 1;
        var a3 = this.ucmp(i2);
        return this.negative !== 0 ? -a3 | 0 : a3;
      }, f4.prototype.ucmp = function(i2) {
        if (this.length > i2.length)
          return 1;
        if (this.length < i2.length)
          return -1;
        for (var a3 = 0, h5 = this.length - 1;h5 >= 0; h5--) {
          var s2 = this.words[h5] | 0, u3 = i2.words[h5] | 0;
          if (s2 !== u3) {
            s2 < u3 ? a3 = -1 : s2 > u3 && (a3 = 1);
            break;
          }
        }
        return a3;
      }, f4.prototype.gtn = function(i2) {
        return this.cmpn(i2) === 1;
      }, f4.prototype.gt = function(i2) {
        return this.cmp(i2) === 1;
      }, f4.prototype.gten = function(i2) {
        return this.cmpn(i2) >= 0;
      }, f4.prototype.gte = function(i2) {
        return this.cmp(i2) >= 0;
      }, f4.prototype.ltn = function(i2) {
        return this.cmpn(i2) === -1;
      }, f4.prototype.lt = function(i2) {
        return this.cmp(i2) === -1;
      }, f4.prototype.lten = function(i2) {
        return this.cmpn(i2) <= 0;
      }, f4.prototype.lte = function(i2) {
        return this.cmp(i2) <= 0;
      }, f4.prototype.eqn = function(i2) {
        return this.cmpn(i2) === 0;
      }, f4.prototype.eq = function(i2) {
        return this.cmp(i2) === 0;
      }, f4.red = function(i2) {
        return new P22(i2);
      }, f4.prototype.toRed = function(i2) {
        return r2(!this.red, "Already a number in reduction context"), r2(this.negative === 0, "red works only with positives"), i2.convertTo(this)._forceRed(i2);
      }, f4.prototype.fromRed = function() {
        return r2(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
      }, f4.prototype._forceRed = function(i2) {
        return this.red = i2, this;
      }, f4.prototype.forceRed = function(i2) {
        return r2(!this.red, "Already a number in reduction context"), this._forceRed(i2);
      }, f4.prototype.redAdd = function(i2) {
        return r2(this.red, "redAdd works only with red numbers"), this.red.add(this, i2);
      }, f4.prototype.redIAdd = function(i2) {
        return r2(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, i2);
      }, f4.prototype.redSub = function(i2) {
        return r2(this.red, "redSub works only with red numbers"), this.red.sub(this, i2);
      }, f4.prototype.redISub = function(i2) {
        return r2(this.red, "redISub works only with red numbers"), this.red.isub(this, i2);
      }, f4.prototype.redShl = function(i2) {
        return r2(this.red, "redShl works only with red numbers"), this.red.shl(this, i2);
      }, f4.prototype.redMul = function(i2) {
        return r2(this.red, "redMul works only with red numbers"), this.red._verify2(this, i2), this.red.mul(this, i2);
      }, f4.prototype.redIMul = function(i2) {
        return r2(this.red, "redMul works only with red numbers"), this.red._verify2(this, i2), this.red.imul(this, i2);
      }, f4.prototype.redSqr = function() {
        return r2(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
      }, f4.prototype.redISqr = function() {
        return r2(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
      }, f4.prototype.redSqrt = function() {
        return r2(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
      }, f4.prototype.redInvm = function() {
        return r2(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
      }, f4.prototype.redNeg = function() {
        return r2(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
      }, f4.prototype.redPow = function(i2) {
        return r2(this.red && !i2.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, i2);
      };
      var we = { k256: null, p224: null, p192: null, p25519: null };
      function ye(v3, i2) {
        this.name = v3, this.p = new f4(i2, 16), this.n = this.p.bitLength(), this.k = new f4(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
      }
      ye.prototype._tmp = function() {
        var i2 = new f4(null);
        return i2.words = new Array(Math.ceil(this.n / 13)), i2;
      }, ye.prototype.ireduce = function(i2) {
        var a3 = i2, h5;
        do
          this.split(a3, this.tmp), a3 = this.imulK(a3), a3 = a3.iadd(this.tmp), h5 = a3.bitLength();
        while (h5 > this.n);
        var s2 = h5 < this.n ? -1 : a3.ucmp(this.p);
        return s2 === 0 ? (a3.words[0] = 0, a3.length = 1) : s2 > 0 ? a3.isub(this.p) : a3.strip !== undefined ? a3.strip() : a3._strip(), a3;
      }, ye.prototype.split = function(i2, a3) {
        i2.iushrn(this.n, 0, a3);
      }, ye.prototype.imulK = function(i2) {
        return i2.imul(this.k);
      };
      function xe() {
        ye.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      o2(xe, ye), xe.prototype.split = function(i2, a3) {
        for (var h5 = 4194303, s2 = Math.min(i2.length, 9), u3 = 0;u3 < s2; u3++)
          a3.words[u3] = i2.words[u3];
        if (a3.length = s2, i2.length <= 9) {
          i2.words[0] = 0, i2.length = 1;
          return;
        }
        var c = i2.words[9];
        for (a3.words[a3.length++] = c & h5, u3 = 10;u3 < i2.length; u3++) {
          var b3 = i2.words[u3] | 0;
          i2.words[u3 - 10] = (b3 & h5) << 4 | c >>> 22, c = b3;
        }
        c >>>= 22, i2.words[u3 - 10] = c, c === 0 && i2.length > 10 ? i2.length -= 10 : i2.length -= 9;
      }, xe.prototype.imulK = function(i2) {
        i2.words[i2.length] = 0, i2.words[i2.length + 1] = 0, i2.length += 2;
        for (var a3 = 0, h5 = 0;h5 < i2.length; h5++) {
          var s2 = i2.words[h5] | 0;
          a3 += s2 * 977, i2.words[h5] = a3 & 67108863, a3 = s2 * 64 + (a3 / 67108864 | 0);
        }
        return i2.words[i2.length - 1] === 0 && (i2.length--, i2.words[i2.length - 1] === 0 && i2.length--), i2;
      };
      function Re() {
        ye.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      o2(Re, ye);
      function Ee() {
        ye.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      o2(Ee, ye);
      function Ae() {
        ye.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      o2(Ae, ye), Ae.prototype.imulK = function(i2) {
        for (var a3 = 0, h5 = 0;h5 < i2.length; h5++) {
          var s2 = (i2.words[h5] | 0) * 19 + a3, u3 = s2 & 67108863;
          s2 >>>= 26, i2.words[h5] = u3, a3 = s2;
        }
        return a3 !== 0 && (i2.words[i2.length++] = a3), i2;
      }, f4._prime = function(i2) {
        if (we[i2])
          return we[i2];
        var a3;
        if (i2 === "k256")
          a3 = new xe;
        else if (i2 === "p224")
          a3 = new Re;
        else if (i2 === "p192")
          a3 = new Ee;
        else if (i2 === "p25519")
          a3 = new Ae;
        else
          throw new Error("Unknown prime " + i2);
        return we[i2] = a3, a3;
      };
      function P22(v3) {
        if (typeof v3 == "string") {
          var i2 = f4._prime(v3);
          this.m = i2.p, this.prime = i2;
        } else
          r2(v3.gtn(1), "modulus must be greater than 1"), this.m = v3, this.prime = null;
      }
      P22.prototype._verify1 = function(i2) {
        r2(i2.negative === 0, "red works only with positives"), r2(i2.red, "red works only with red numbers");
      }, P22.prototype._verify2 = function(i2, a3) {
        r2((i2.negative | a3.negative) === 0, "red works only with positives"), r2(i2.red && i2.red === a3.red, "red works only with red numbers");
      }, P22.prototype.imod = function(i2) {
        return this.prime ? this.prime.ireduce(i2)._forceRed(this) : i2.umod(this.m)._forceRed(this);
      }, P22.prototype.neg = function(i2) {
        return i2.isZero() ? i2.clone() : this.m.sub(i2)._forceRed(this);
      }, P22.prototype.add = function(i2, a3) {
        this._verify2(i2, a3);
        var h5 = i2.add(a3);
        return h5.cmp(this.m) >= 0 && h5.isub(this.m), h5._forceRed(this);
      }, P22.prototype.iadd = function(i2, a3) {
        this._verify2(i2, a3);
        var h5 = i2.iadd(a3);
        return h5.cmp(this.m) >= 0 && h5.isub(this.m), h5;
      }, P22.prototype.sub = function(i2, a3) {
        this._verify2(i2, a3);
        var h5 = i2.sub(a3);
        return h5.cmpn(0) < 0 && h5.iadd(this.m), h5._forceRed(this);
      }, P22.prototype.isub = function(i2, a3) {
        this._verify2(i2, a3);
        var h5 = i2.isub(a3);
        return h5.cmpn(0) < 0 && h5.iadd(this.m), h5;
      }, P22.prototype.shl = function(i2, a3) {
        return this._verify1(i2), this.imod(i2.ushln(a3));
      }, P22.prototype.imul = function(i2, a3) {
        return this._verify2(i2, a3), this.imod(i2.imul(a3));
      }, P22.prototype.mul = function(i2, a3) {
        return this._verify2(i2, a3), this.imod(i2.mul(a3));
      }, P22.prototype.isqr = function(i2) {
        return this.imul(i2, i2.clone());
      }, P22.prototype.sqr = function(i2) {
        return this.mul(i2, i2);
      }, P22.prototype.sqrt = function(i2) {
        if (i2.isZero())
          return i2.clone();
        var a3 = this.m.andln(3);
        if (r2(a3 % 2 === 1), a3 === 3) {
          var h5 = this.m.add(new f4(1)).iushrn(2);
          return this.pow(i2, h5);
        }
        for (var s2 = this.m.subn(1), u3 = 0;!s2.isZero() && s2.andln(1) === 0; )
          u3++, s2.iushrn(1);
        r2(!s2.isZero());
        var c = new f4(1).toRed(this), b3 = c.redNeg(), l4 = this.m.subn(1).iushrn(1), n4 = this.m.bitLength();
        for (n4 = new f4(2 * n4 * n4).toRed(this);this.pow(n4, l4).cmp(b3) !== 0; )
          n4.redIAdd(b3);
        for (var d2 = this.pow(n4, s2), w2 = this.pow(i2, s2.addn(1).iushrn(1)), g2 = this.pow(i2, s2), _3 = u3;g2.cmp(c) !== 0; ) {
          for (var A6 = g2, R3 = 0;A6.cmp(c) !== 0; R3++)
            A6 = A6.redSqr();
          r2(R3 < _3);
          var I2 = this.pow(d2, new f4(1).iushln(_3 - R3 - 1));
          w2 = w2.redMul(I2), d2 = I2.redSqr(), g2 = g2.redMul(d2), _3 = R3;
        }
        return w2;
      }, P22.prototype.invm = function(i2) {
        var a3 = i2._invmp(this.m);
        return a3.negative !== 0 ? (a3.negative = 0, this.imod(a3).redNeg()) : this.imod(a3);
      }, P22.prototype.pow = function(i2, a3) {
        if (a3.isZero())
          return new f4(1).toRed(this);
        if (a3.cmpn(1) === 0)
          return i2.clone();
        var h5 = 4, s2 = new Array(1 << h5);
        s2[0] = new f4(1).toRed(this), s2[1] = i2;
        for (var u3 = 2;u3 < s2.length; u3++)
          s2[u3] = this.mul(s2[u3 - 1], i2);
        var c = s2[0], b3 = 0, l4 = 0, n4 = a3.bitLength() % 26;
        for (n4 === 0 && (n4 = 26), u3 = a3.length - 1;u3 >= 0; u3--) {
          for (var d2 = a3.words[u3], w2 = n4 - 1;w2 >= 0; w2--) {
            var g2 = d2 >> w2 & 1;
            if (c !== s2[0] && (c = this.sqr(c)), g2 === 0 && b3 === 0) {
              l4 = 0;
              continue;
            }
            b3 <<= 1, b3 |= g2, l4++, !(l4 !== h5 && (u3 !== 0 || w2 !== 0)) && (c = this.mul(c, s2[b3]), l4 = 0, b3 = 0);
          }
          n4 = 26;
        }
        return c;
      }, P22.prototype.convertTo = function(i2) {
        var a3 = i2.umod(this.m);
        return a3 === i2 ? a3.clone() : a3;
      }, P22.prototype.convertFrom = function(i2) {
        var a3 = i2.clone();
        return a3.red = null, a3;
      }, f4.mont = function(i2) {
        return new Se(i2);
      };
      function Se(v3) {
        P22.call(this, v3), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new f4(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
      }
      o2(Se, P22), Se.prototype.convertTo = function(i2) {
        return this.imod(i2.ushln(this.shift));
      }, Se.prototype.convertFrom = function(i2) {
        var a3 = this.imod(i2.mul(this.rinv));
        return a3.red = null, a3;
      }, Se.prototype.imul = function(i2, a3) {
        if (i2.isZero() || a3.isZero())
          return i2.words[0] = 0, i2.length = 1, i2;
        var h5 = i2.imul(a3), s2 = h5.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u3 = h5.isub(s2).iushrn(this.shift), c = u3;
        return u3.cmp(this.m) >= 0 ? c = u3.isub(this.m) : u3.cmpn(0) < 0 && (c = u3.iadd(this.m)), c._forceRed(this);
      }, Se.prototype.mul = function(i2, a3) {
        if (i2.isZero() || a3.isZero())
          return new f4(0)._forceRed(this);
        var h5 = i2.mul(a3), s2 = h5.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u3 = h5.isub(s2).iushrn(this.shift), c = u3;
        return u3.cmp(this.m) >= 0 ? c = u3.isub(this.m) : u3.cmpn(0) < 0 && (c = u3.iadd(this.m)), c._forceRed(this);
      }, Se.prototype.invm = function(i2) {
        var a3 = this.imod(i2._invmp(this.m).mul(this.r2));
        return a3._forceRed(this);
      };
    })(typeof $u > "u" || $u, jm);
  });
  Vm = T3((Zm, Yu) => {
    (function(t2, e22) {
      function r2(v3, i2) {
        if (!v3)
          throw new Error(i2 || "Assertion failed");
      }
      function o2(v3, i2) {
        v3.super_ = i2;
        var a3 = function() {};
        a3.prototype = i2.prototype, v3.prototype = new a3, v3.prototype.constructor = v3;
      }
      function f4(v3, i2, a3) {
        if (f4.isBN(v3))
          return v3;
        this.negative = 0, this.words = null, this.length = 0, this.red = null, v3 !== null && ((i2 === "le" || i2 === "be") && (a3 = i2, i2 = 10), this._init(v3 || 0, i2 || 10, a3 || "be"));
      }
      typeof t2 == "object" ? t2.exports = f4 : e22.BN = f4, f4.BN = f4, f4.wordSize = 26;
      var p32;
      try {
        typeof window < "u" && typeof window.Buffer < "u" ? p32 = window.Buffer : p32 = ji().Buffer;
      } catch {}
      f4.isBN = function(i2) {
        return i2 instanceof f4 ? true : i2 !== null && typeof i2 == "object" && i2.constructor.wordSize === f4.wordSize && Array.isArray(i2.words);
      }, f4.max = function(i2, a3) {
        return i2.cmp(a3) > 0 ? i2 : a3;
      }, f4.min = function(i2, a3) {
        return i2.cmp(a3) < 0 ? i2 : a3;
      }, f4.prototype._init = function(i2, a3, h5) {
        if (typeof i2 == "number")
          return this._initNumber(i2, a3, h5);
        if (typeof i2 == "object")
          return this._initArray(i2, a3, h5);
        a3 === "hex" && (a3 = 16), r2(a3 === (a3 | 0) && a3 >= 2 && a3 <= 36), i2 = i2.toString().replace(/\s+/g, "");
        var s2 = 0;
        i2[0] === "-" && (s2++, this.negative = 1), s2 < i2.length && (a3 === 16 ? this._parseHex(i2, s2, h5) : (this._parseBase(i2, a3, s2), h5 === "le" && this._initArray(this.toArray(), a3, h5)));
      }, f4.prototype._initNumber = function(i2, a3, h5) {
        i2 < 0 && (this.negative = 1, i2 = -i2), i2 < 67108864 ? (this.words = [i2 & 67108863], this.length = 1) : i2 < 4503599627370496 ? (this.words = [i2 & 67108863, i2 / 67108864 & 67108863], this.length = 2) : (r2(i2 < 9007199254740992), this.words = [i2 & 67108863, i2 / 67108864 & 67108863, 1], this.length = 3), h5 === "le" && this._initArray(this.toArray(), a3, h5);
      }, f4.prototype._initArray = function(i2, a3, h5) {
        if (r2(typeof i2.length == "number"), i2.length <= 0)
          return this.words = [0], this.length = 1, this;
        this.length = Math.ceil(i2.length / 3), this.words = new Array(this.length);
        for (var s2 = 0;s2 < this.length; s2++)
          this.words[s2] = 0;
        var u3, c, b3 = 0;
        if (h5 === "be")
          for (s2 = i2.length - 1, u3 = 0;s2 >= 0; s2 -= 3)
            c = i2[s2] | i2[s2 - 1] << 8 | i2[s2 - 2] << 16, this.words[u3] |= c << b3 & 67108863, this.words[u3 + 1] = c >>> 26 - b3 & 67108863, b3 += 24, b3 >= 26 && (b3 -= 26, u3++);
        else if (h5 === "le")
          for (s2 = 0, u3 = 0;s2 < i2.length; s2 += 3)
            c = i2[s2] | i2[s2 + 1] << 8 | i2[s2 + 2] << 16, this.words[u3] |= c << b3 & 67108863, this.words[u3 + 1] = c >>> 26 - b3 & 67108863, b3 += 24, b3 >= 26 && (b3 -= 26, u3++);
        return this.strip();
      };
      function m4(v3, i2) {
        var a3 = v3.charCodeAt(i2);
        return a3 >= 65 && a3 <= 70 ? a3 - 55 : a3 >= 97 && a3 <= 102 ? a3 - 87 : a3 - 48 & 15;
      }
      function y32(v3, i2, a3) {
        var h5 = m4(v3, a3);
        return a3 - 1 >= i2 && (h5 |= m4(v3, a3 - 1) << 4), h5;
      }
      f4.prototype._parseHex = function(i2, a3, h5) {
        this.length = Math.ceil((i2.length - a3) / 6), this.words = new Array(this.length);
        for (var s2 = 0;s2 < this.length; s2++)
          this.words[s2] = 0;
        var u3 = 0, c = 0, b3;
        if (h5 === "be")
          for (s2 = i2.length - 1;s2 >= a3; s2 -= 2)
            b3 = y32(i2, a3, s2) << u3, this.words[c] |= b3 & 67108863, u3 >= 18 ? (u3 -= 18, c += 1, this.words[c] |= b3 >>> 26) : u3 += 8;
        else {
          var l4 = i2.length - a3;
          for (s2 = l4 % 2 === 0 ? a3 + 1 : a3;s2 < i2.length; s2 += 2)
            b3 = y32(i2, a3, s2) << u3, this.words[c] |= b3 & 67108863, u3 >= 18 ? (u3 -= 18, c += 1, this.words[c] |= b3 >>> 26) : u3 += 8;
        }
        this.strip();
      };
      function M3(v3, i2, a3, h5) {
        for (var s2 = 0, u3 = Math.min(v3.length, a3), c = i2;c < u3; c++) {
          var b3 = v3.charCodeAt(c) - 48;
          s2 *= h5, b3 >= 49 ? s2 += b3 - 49 + 10 : b3 >= 17 ? s2 += b3 - 17 + 10 : s2 += b3;
        }
        return s2;
      }
      f4.prototype._parseBase = function(i2, a3, h5) {
        this.words = [0], this.length = 1;
        for (var s2 = 0, u3 = 1;u3 <= 67108863; u3 *= a3)
          s2++;
        s2--, u3 = u3 / a3 | 0;
        for (var c = i2.length - h5, b3 = c % s2, l4 = Math.min(c, c - b3) + h5, n4 = 0, d2 = h5;d2 < l4; d2 += s2)
          n4 = M3(i2, d2, d2 + s2, a3), this.imuln(u3), this.words[0] + n4 < 67108864 ? this.words[0] += n4 : this._iaddn(n4);
        if (b3 !== 0) {
          var w2 = 1;
          for (n4 = M3(i2, d2, i2.length, a3), d2 = 0;d2 < b3; d2++)
            w2 *= a3;
          this.imuln(w2), this.words[0] + n4 < 67108864 ? this.words[0] += n4 : this._iaddn(n4);
        }
        this.strip();
      }, f4.prototype.copy = function(i2) {
        i2.words = new Array(this.length);
        for (var a3 = 0;a3 < this.length; a3++)
          i2.words[a3] = this.words[a3];
        i2.length = this.length, i2.negative = this.negative, i2.red = this.red;
      }, f4.prototype.clone = function() {
        var i2 = new f4(null);
        return this.copy(i2), i2;
      }, f4.prototype._expand = function(i2) {
        for (;this.length < i2; )
          this.words[this.length++] = 0;
        return this;
      }, f4.prototype.strip = function() {
        for (;this.length > 1 && this.words[this.length - 1] === 0; )
          this.length--;
        return this._normSign();
      }, f4.prototype._normSign = function() {
        return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
      }, f4.prototype.inspect = function() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var x32 = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"], S3 = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], E3 = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
      f4.prototype.toString = function(i2, a3) {
        i2 = i2 || 10, a3 = a3 | 0 || 1;
        var h5;
        if (i2 === 16 || i2 === "hex") {
          h5 = "";
          for (var s2 = 0, u3 = 0, c = 0;c < this.length; c++) {
            var b3 = this.words[c], l4 = ((b3 << s2 | u3) & 16777215).toString(16);
            u3 = b3 >>> 24 - s2 & 16777215, u3 !== 0 || c !== this.length - 1 ? h5 = x32[6 - l4.length] + l4 + h5 : h5 = l4 + h5, s2 += 2, s2 >= 26 && (s2 -= 26, c--);
          }
          for (u3 !== 0 && (h5 = u3.toString(16) + h5);h5.length % a3 !== 0; )
            h5 = "0" + h5;
          return this.negative !== 0 && (h5 = "-" + h5), h5;
        }
        if (i2 === (i2 | 0) && i2 >= 2 && i2 <= 36) {
          var n4 = S3[i2], d2 = E3[i2];
          h5 = "";
          var w2 = this.clone();
          for (w2.negative = 0;!w2.isZero(); ) {
            var g2 = w2.modn(d2).toString(i2);
            w2 = w2.idivn(d2), w2.isZero() ? h5 = g2 + h5 : h5 = x32[n4 - g2.length] + g2 + h5;
          }
          for (this.isZero() && (h5 = "0" + h5);h5.length % a3 !== 0; )
            h5 = "0" + h5;
          return this.negative !== 0 && (h5 = "-" + h5), h5;
        }
        r2(false, "Base should be between 2 and 36");
      }, f4.prototype.toNumber = function() {
        var i2 = this.words[0];
        return this.length === 2 ? i2 += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? i2 += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && r2(false, "Number can only safely store up to 53 bits"), this.negative !== 0 ? -i2 : i2;
      }, f4.prototype.toJSON = function() {
        return this.toString(16);
      }, f4.prototype.toBuffer = function(i2, a3) {
        return r2(typeof p32 < "u"), this.toArrayLike(p32, i2, a3);
      }, f4.prototype.toArray = function(i2, a3) {
        return this.toArrayLike(Array, i2, a3);
      }, f4.prototype.toArrayLike = function(i2, a3, h5) {
        var s2 = this.byteLength(), u3 = h5 || Math.max(1, s2);
        r2(s2 <= u3, "byte array longer than desired length"), r2(u3 > 0, "Requested array length <= 0"), this.strip();
        var c = a3 === "le", b3 = new i2(u3), l4, n4, d2 = this.clone();
        if (c) {
          for (n4 = 0;!d2.isZero(); n4++)
            l4 = d2.andln(255), d2.iushrn(8), b3[n4] = l4;
          for (;n4 < u3; n4++)
            b3[n4] = 0;
        } else {
          for (n4 = 0;n4 < u3 - s2; n4++)
            b3[n4] = 0;
          for (n4 = 0;!d2.isZero(); n4++)
            l4 = d2.andln(255), d2.iushrn(8), b3[u3 - n4 - 1] = l4;
        }
        return b3;
      }, Math.clz32 ? f4.prototype._countBits = function(i2) {
        return 32 - Math.clz32(i2);
      } : f4.prototype._countBits = function(i2) {
        var a3 = i2, h5 = 0;
        return a3 >= 4096 && (h5 += 13, a3 >>>= 13), a3 >= 64 && (h5 += 7, a3 >>>= 7), a3 >= 8 && (h5 += 4, a3 >>>= 4), a3 >= 2 && (h5 += 2, a3 >>>= 2), h5 + a3;
      }, f4.prototype._zeroBits = function(i2) {
        if (i2 === 0)
          return 26;
        var a3 = i2, h5 = 0;
        return (a3 & 8191) === 0 && (h5 += 13, a3 >>>= 13), (a3 & 127) === 0 && (h5 += 7, a3 >>>= 7), (a3 & 15) === 0 && (h5 += 4, a3 >>>= 4), (a3 & 3) === 0 && (h5 += 2, a3 >>>= 2), (a3 & 1) === 0 && h5++, h5;
      }, f4.prototype.bitLength = function() {
        var i2 = this.words[this.length - 1], a3 = this._countBits(i2);
        return (this.length - 1) * 26 + a3;
      };
      function B5(v3) {
        for (var i2 = new Array(v3.bitLength()), a3 = 0;a3 < i2.length; a3++) {
          var h5 = a3 / 26 | 0, s2 = a3 % 26;
          i2[a3] = (v3.words[h5] & 1 << s2) >>> s2;
        }
        return i2;
      }
      f4.prototype.zeroBits = function() {
        if (this.isZero())
          return 0;
        for (var i2 = 0, a3 = 0;a3 < this.length; a3++) {
          var h5 = this._zeroBits(this.words[a3]);
          if (i2 += h5, h5 !== 26)
            break;
        }
        return i2;
      }, f4.prototype.byteLength = function() {
        return Math.ceil(this.bitLength() / 8);
      }, f4.prototype.toTwos = function(i2) {
        return this.negative !== 0 ? this.abs().inotn(i2).iaddn(1) : this.clone();
      }, f4.prototype.fromTwos = function(i2) {
        return this.testn(i2 - 1) ? this.notn(i2).iaddn(1).ineg() : this.clone();
      }, f4.prototype.isNeg = function() {
        return this.negative !== 0;
      }, f4.prototype.neg = function() {
        return this.clone().ineg();
      }, f4.prototype.ineg = function() {
        return this.isZero() || (this.negative ^= 1), this;
      }, f4.prototype.iuor = function(i2) {
        for (;this.length < i2.length; )
          this.words[this.length++] = 0;
        for (var a3 = 0;a3 < i2.length; a3++)
          this.words[a3] = this.words[a3] | i2.words[a3];
        return this.strip();
      }, f4.prototype.ior = function(i2) {
        return r2((this.negative | i2.negative) === 0), this.iuor(i2);
      }, f4.prototype.or = function(i2) {
        return this.length > i2.length ? this.clone().ior(i2) : i2.clone().ior(this);
      }, f4.prototype.uor = function(i2) {
        return this.length > i2.length ? this.clone().iuor(i2) : i2.clone().iuor(this);
      }, f4.prototype.iuand = function(i2) {
        var a3;
        this.length > i2.length ? a3 = i2 : a3 = this;
        for (var h5 = 0;h5 < a3.length; h5++)
          this.words[h5] = this.words[h5] & i2.words[h5];
        return this.length = a3.length, this.strip();
      }, f4.prototype.iand = function(i2) {
        return r2((this.negative | i2.negative) === 0), this.iuand(i2);
      }, f4.prototype.and = function(i2) {
        return this.length > i2.length ? this.clone().iand(i2) : i2.clone().iand(this);
      }, f4.prototype.uand = function(i2) {
        return this.length > i2.length ? this.clone().iuand(i2) : i2.clone().iuand(this);
      }, f4.prototype.iuxor = function(i2) {
        var a3, h5;
        this.length > i2.length ? (a3 = this, h5 = i2) : (a3 = i2, h5 = this);
        for (var s2 = 0;s2 < h5.length; s2++)
          this.words[s2] = a3.words[s2] ^ h5.words[s2];
        if (this !== a3)
          for (;s2 < a3.length; s2++)
            this.words[s2] = a3.words[s2];
        return this.length = a3.length, this.strip();
      }, f4.prototype.ixor = function(i2) {
        return r2((this.negative | i2.negative) === 0), this.iuxor(i2);
      }, f4.prototype.xor = function(i2) {
        return this.length > i2.length ? this.clone().ixor(i2) : i2.clone().ixor(this);
      }, f4.prototype.uxor = function(i2) {
        return this.length > i2.length ? this.clone().iuxor(i2) : i2.clone().iuxor(this);
      }, f4.prototype.inotn = function(i2) {
        r2(typeof i2 == "number" && i2 >= 0);
        var a3 = Math.ceil(i2 / 26) | 0, h5 = i2 % 26;
        this._expand(a3), h5 > 0 && a3--;
        for (var s2 = 0;s2 < a3; s2++)
          this.words[s2] = ~this.words[s2] & 67108863;
        return h5 > 0 && (this.words[s2] = ~this.words[s2] & 67108863 >> 26 - h5), this.strip();
      }, f4.prototype.notn = function(i2) {
        return this.clone().inotn(i2);
      }, f4.prototype.setn = function(i2, a3) {
        r2(typeof i2 == "number" && i2 >= 0);
        var h5 = i2 / 26 | 0, s2 = i2 % 26;
        return this._expand(h5 + 1), a3 ? this.words[h5] = this.words[h5] | 1 << s2 : this.words[h5] = this.words[h5] & ~(1 << s2), this.strip();
      }, f4.prototype.iadd = function(i2) {
        var a3;
        if (this.negative !== 0 && i2.negative === 0)
          return this.negative = 0, a3 = this.isub(i2), this.negative ^= 1, this._normSign();
        if (this.negative === 0 && i2.negative !== 0)
          return i2.negative = 0, a3 = this.isub(i2), i2.negative = 1, a3._normSign();
        var h5, s2;
        this.length > i2.length ? (h5 = this, s2 = i2) : (h5 = i2, s2 = this);
        for (var u3 = 0, c = 0;c < s2.length; c++)
          a3 = (h5.words[c] | 0) + (s2.words[c] | 0) + u3, this.words[c] = a3 & 67108863, u3 = a3 >>> 26;
        for (;u3 !== 0 && c < h5.length; c++)
          a3 = (h5.words[c] | 0) + u3, this.words[c] = a3 & 67108863, u3 = a3 >>> 26;
        if (this.length = h5.length, u3 !== 0)
          this.words[this.length] = u3, this.length++;
        else if (h5 !== this)
          for (;c < h5.length; c++)
            this.words[c] = h5.words[c];
        return this;
      }, f4.prototype.add = function(i2) {
        var a3;
        return i2.negative !== 0 && this.negative === 0 ? (i2.negative = 0, a3 = this.sub(i2), i2.negative ^= 1, a3) : i2.negative === 0 && this.negative !== 0 ? (this.negative = 0, a3 = i2.sub(this), this.negative = 1, a3) : this.length > i2.length ? this.clone().iadd(i2) : i2.clone().iadd(this);
      }, f4.prototype.isub = function(i2) {
        if (i2.negative !== 0) {
          i2.negative = 0;
          var a3 = this.iadd(i2);
          return i2.negative = 1, a3._normSign();
        } else if (this.negative !== 0)
          return this.negative = 0, this.iadd(i2), this.negative = 1, this._normSign();
        var h5 = this.cmp(i2);
        if (h5 === 0)
          return this.negative = 0, this.length = 1, this.words[0] = 0, this;
        var s2, u3;
        h5 > 0 ? (s2 = this, u3 = i2) : (s2 = i2, u3 = this);
        for (var c = 0, b3 = 0;b3 < u3.length; b3++)
          a3 = (s2.words[b3] | 0) - (u3.words[b3] | 0) + c, c = a3 >> 26, this.words[b3] = a3 & 67108863;
        for (;c !== 0 && b3 < s2.length; b3++)
          a3 = (s2.words[b3] | 0) + c, c = a3 >> 26, this.words[b3] = a3 & 67108863;
        if (c === 0 && b3 < s2.length && s2 !== this)
          for (;b3 < s2.length; b3++)
            this.words[b3] = s2.words[b3];
        return this.length = Math.max(this.length, b3), s2 !== this && (this.negative = 1), this.strip();
      }, f4.prototype.sub = function(i2) {
        return this.clone().isub(i2);
      };
      function q2(v3, i2, a3) {
        a3.negative = i2.negative ^ v3.negative;
        var h5 = v3.length + i2.length | 0;
        a3.length = h5, h5 = h5 - 1 | 0;
        var s2 = v3.words[0] | 0, u3 = i2.words[0] | 0, c = s2 * u3, b3 = c & 67108863, l4 = c / 67108864 | 0;
        a3.words[0] = b3;
        for (var n4 = 1;n4 < h5; n4++) {
          for (var d2 = l4 >>> 26, w2 = l4 & 67108863, g2 = Math.min(n4, i2.length - 1), _3 = Math.max(0, n4 - v3.length + 1);_3 <= g2; _3++) {
            var A6 = n4 - _3 | 0;
            s2 = v3.words[A6] | 0, u3 = i2.words[_3] | 0, c = s2 * u3 + w2, d2 += c / 67108864 | 0, w2 = c & 67108863;
          }
          a3.words[n4] = w2 | 0, l4 = d2 | 0;
        }
        return l4 !== 0 ? a3.words[n4] = l4 | 0 : a3.length--, a3.strip();
      }
      var L32 = function(i2, a3, h5) {
        var s2 = i2.words, u3 = a3.words, c = h5.words, b3 = 0, l4, n4, d2, w2 = s2[0] | 0, g2 = w2 & 8191, _3 = w2 >>> 13, A6 = s2[1] | 0, R3 = A6 & 8191, I2 = A6 >>> 13, Me = s2[2] | 0, k2 = Me & 8191, D2 = Me >>> 13, nt = s2[3] | 0, C3 = nt & 8191, O2 = nt >>> 13, vt = s2[4] | 0, F = vt & 8191, U3 = vt >>> 13, bt = s2[5] | 0, z3 = bt & 8191, H32 = bt >>> 13, mt = s2[6] | 0, W22 = mt & 8191, K = mt >>> 13, gt = s2[7] | 0, j2 = gt & 8191, Z3 = gt >>> 13, yt = s2[8] | 0, V4 = yt & 8191, $32 = yt >>> 13, wt = s2[9] | 0, G4 = wt & 8191, Y = wt >>> 13, Mt = u3[0] | 0, X3 = Mt & 8191, J = Mt >>> 13, _t = u3[1] | 0, Q3 = _t & 8191, ee = _t >>> 13, xt = u3[2] | 0, te = xt & 8191, re = xt >>> 13, St = u3[3] | 0, ie = St & 8191, ne = St >>> 13, Et = u3[4] | 0, fe = Et & 8191, ae = Et >>> 13, At = u3[5] | 0, oe = At & 8191, se = At >>> 13, Rt = u3[6] | 0, he = Rt & 8191, ue = Rt >>> 13, Bt = u3[7] | 0, le = Bt & 8191, de = Bt >>> 13, qt = u3[8] | 0, ce = qt & 8191, pe = qt >>> 13, It = u3[9] | 0, ve = It & 8191, be = It >>> 13;
        h5.negative = i2.negative ^ a3.negative, h5.length = 19, l4 = Math.imul(g2, X3), n4 = Math.imul(g2, J), n4 = n4 + Math.imul(_3, X3) | 0, d2 = Math.imul(_3, J);
        var ft = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (ft >>> 26) | 0, ft &= 67108863, l4 = Math.imul(R3, X3), n4 = Math.imul(R3, J), n4 = n4 + Math.imul(I2, X3) | 0, d2 = Math.imul(I2, J), l4 = l4 + Math.imul(g2, Q3) | 0, n4 = n4 + Math.imul(g2, ee) | 0, n4 = n4 + Math.imul(_3, Q3) | 0, d2 = d2 + Math.imul(_3, ee) | 0;
        var Be = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Be >>> 26) | 0, Be &= 67108863, l4 = Math.imul(k2, X3), n4 = Math.imul(k2, J), n4 = n4 + Math.imul(D2, X3) | 0, d2 = Math.imul(D2, J), l4 = l4 + Math.imul(R3, Q3) | 0, n4 = n4 + Math.imul(R3, ee) | 0, n4 = n4 + Math.imul(I2, Q3) | 0, d2 = d2 + Math.imul(I2, ee) | 0, l4 = l4 + Math.imul(g2, te) | 0, n4 = n4 + Math.imul(g2, re) | 0, n4 = n4 + Math.imul(_3, te) | 0, d2 = d2 + Math.imul(_3, re) | 0;
        var qe = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (qe >>> 26) | 0, qe &= 67108863, l4 = Math.imul(C3, X3), n4 = Math.imul(C3, J), n4 = n4 + Math.imul(O2, X3) | 0, d2 = Math.imul(O2, J), l4 = l4 + Math.imul(k2, Q3) | 0, n4 = n4 + Math.imul(k2, ee) | 0, n4 = n4 + Math.imul(D2, Q3) | 0, d2 = d2 + Math.imul(D2, ee) | 0, l4 = l4 + Math.imul(R3, te) | 0, n4 = n4 + Math.imul(R3, re) | 0, n4 = n4 + Math.imul(I2, te) | 0, d2 = d2 + Math.imul(I2, re) | 0, l4 = l4 + Math.imul(g2, ie) | 0, n4 = n4 + Math.imul(g2, ne) | 0, n4 = n4 + Math.imul(_3, ie) | 0, d2 = d2 + Math.imul(_3, ne) | 0;
        var ze = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (ze >>> 26) | 0, ze &= 67108863, l4 = Math.imul(F, X3), n4 = Math.imul(F, J), n4 = n4 + Math.imul(U3, X3) | 0, d2 = Math.imul(U3, J), l4 = l4 + Math.imul(C3, Q3) | 0, n4 = n4 + Math.imul(C3, ee) | 0, n4 = n4 + Math.imul(O2, Q3) | 0, d2 = d2 + Math.imul(O2, ee) | 0, l4 = l4 + Math.imul(k2, te) | 0, n4 = n4 + Math.imul(k2, re) | 0, n4 = n4 + Math.imul(D2, te) | 0, d2 = d2 + Math.imul(D2, re) | 0, l4 = l4 + Math.imul(R3, ie) | 0, n4 = n4 + Math.imul(R3, ne) | 0, n4 = n4 + Math.imul(I2, ie) | 0, d2 = d2 + Math.imul(I2, ne) | 0, l4 = l4 + Math.imul(g2, fe) | 0, n4 = n4 + Math.imul(g2, ae) | 0, n4 = n4 + Math.imul(_3, fe) | 0, d2 = d2 + Math.imul(_3, ae) | 0;
        var He = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (He >>> 26) | 0, He &= 67108863, l4 = Math.imul(z3, X3), n4 = Math.imul(z3, J), n4 = n4 + Math.imul(H32, X3) | 0, d2 = Math.imul(H32, J), l4 = l4 + Math.imul(F, Q3) | 0, n4 = n4 + Math.imul(F, ee) | 0, n4 = n4 + Math.imul(U3, Q3) | 0, d2 = d2 + Math.imul(U3, ee) | 0, l4 = l4 + Math.imul(C3, te) | 0, n4 = n4 + Math.imul(C3, re) | 0, n4 = n4 + Math.imul(O2, te) | 0, d2 = d2 + Math.imul(O2, re) | 0, l4 = l4 + Math.imul(k2, ie) | 0, n4 = n4 + Math.imul(k2, ne) | 0, n4 = n4 + Math.imul(D2, ie) | 0, d2 = d2 + Math.imul(D2, ne) | 0, l4 = l4 + Math.imul(R3, fe) | 0, n4 = n4 + Math.imul(R3, ae) | 0, n4 = n4 + Math.imul(I2, fe) | 0, d2 = d2 + Math.imul(I2, ae) | 0, l4 = l4 + Math.imul(g2, oe) | 0, n4 = n4 + Math.imul(g2, se) | 0, n4 = n4 + Math.imul(_3, oe) | 0, d2 = d2 + Math.imul(_3, se) | 0;
        var We = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (We >>> 26) | 0, We &= 67108863, l4 = Math.imul(W22, X3), n4 = Math.imul(W22, J), n4 = n4 + Math.imul(K, X3) | 0, d2 = Math.imul(K, J), l4 = l4 + Math.imul(z3, Q3) | 0, n4 = n4 + Math.imul(z3, ee) | 0, n4 = n4 + Math.imul(H32, Q3) | 0, d2 = d2 + Math.imul(H32, ee) | 0, l4 = l4 + Math.imul(F, te) | 0, n4 = n4 + Math.imul(F, re) | 0, n4 = n4 + Math.imul(U3, te) | 0, d2 = d2 + Math.imul(U3, re) | 0, l4 = l4 + Math.imul(C3, ie) | 0, n4 = n4 + Math.imul(C3, ne) | 0, n4 = n4 + Math.imul(O2, ie) | 0, d2 = d2 + Math.imul(O2, ne) | 0, l4 = l4 + Math.imul(k2, fe) | 0, n4 = n4 + Math.imul(k2, ae) | 0, n4 = n4 + Math.imul(D2, fe) | 0, d2 = d2 + Math.imul(D2, ae) | 0, l4 = l4 + Math.imul(R3, oe) | 0, n4 = n4 + Math.imul(R3, se) | 0, n4 = n4 + Math.imul(I2, oe) | 0, d2 = d2 + Math.imul(I2, se) | 0, l4 = l4 + Math.imul(g2, he) | 0, n4 = n4 + Math.imul(g2, ue) | 0, n4 = n4 + Math.imul(_3, he) | 0, d2 = d2 + Math.imul(_3, ue) | 0;
        var Ke = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ke >>> 26) | 0, Ke &= 67108863, l4 = Math.imul(j2, X3), n4 = Math.imul(j2, J), n4 = n4 + Math.imul(Z3, X3) | 0, d2 = Math.imul(Z3, J), l4 = l4 + Math.imul(W22, Q3) | 0, n4 = n4 + Math.imul(W22, ee) | 0, n4 = n4 + Math.imul(K, Q3) | 0, d2 = d2 + Math.imul(K, ee) | 0, l4 = l4 + Math.imul(z3, te) | 0, n4 = n4 + Math.imul(z3, re) | 0, n4 = n4 + Math.imul(H32, te) | 0, d2 = d2 + Math.imul(H32, re) | 0, l4 = l4 + Math.imul(F, ie) | 0, n4 = n4 + Math.imul(F, ne) | 0, n4 = n4 + Math.imul(U3, ie) | 0, d2 = d2 + Math.imul(U3, ne) | 0, l4 = l4 + Math.imul(C3, fe) | 0, n4 = n4 + Math.imul(C3, ae) | 0, n4 = n4 + Math.imul(O2, fe) | 0, d2 = d2 + Math.imul(O2, ae) | 0, l4 = l4 + Math.imul(k2, oe) | 0, n4 = n4 + Math.imul(k2, se) | 0, n4 = n4 + Math.imul(D2, oe) | 0, d2 = d2 + Math.imul(D2, se) | 0, l4 = l4 + Math.imul(R3, he) | 0, n4 = n4 + Math.imul(R3, ue) | 0, n4 = n4 + Math.imul(I2, he) | 0, d2 = d2 + Math.imul(I2, ue) | 0, l4 = l4 + Math.imul(g2, le) | 0, n4 = n4 + Math.imul(g2, de) | 0, n4 = n4 + Math.imul(_3, le) | 0, d2 = d2 + Math.imul(_3, de) | 0;
        var je = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (je >>> 26) | 0, je &= 67108863, l4 = Math.imul(V4, X3), n4 = Math.imul(V4, J), n4 = n4 + Math.imul($32, X3) | 0, d2 = Math.imul($32, J), l4 = l4 + Math.imul(j2, Q3) | 0, n4 = n4 + Math.imul(j2, ee) | 0, n4 = n4 + Math.imul(Z3, Q3) | 0, d2 = d2 + Math.imul(Z3, ee) | 0, l4 = l4 + Math.imul(W22, te) | 0, n4 = n4 + Math.imul(W22, re) | 0, n4 = n4 + Math.imul(K, te) | 0, d2 = d2 + Math.imul(K, re) | 0, l4 = l4 + Math.imul(z3, ie) | 0, n4 = n4 + Math.imul(z3, ne) | 0, n4 = n4 + Math.imul(H32, ie) | 0, d2 = d2 + Math.imul(H32, ne) | 0, l4 = l4 + Math.imul(F, fe) | 0, n4 = n4 + Math.imul(F, ae) | 0, n4 = n4 + Math.imul(U3, fe) | 0, d2 = d2 + Math.imul(U3, ae) | 0, l4 = l4 + Math.imul(C3, oe) | 0, n4 = n4 + Math.imul(C3, se) | 0, n4 = n4 + Math.imul(O2, oe) | 0, d2 = d2 + Math.imul(O2, se) | 0, l4 = l4 + Math.imul(k2, he) | 0, n4 = n4 + Math.imul(k2, ue) | 0, n4 = n4 + Math.imul(D2, he) | 0, d2 = d2 + Math.imul(D2, ue) | 0, l4 = l4 + Math.imul(R3, le) | 0, n4 = n4 + Math.imul(R3, de) | 0, n4 = n4 + Math.imul(I2, le) | 0, d2 = d2 + Math.imul(I2, de) | 0, l4 = l4 + Math.imul(g2, ce) | 0, n4 = n4 + Math.imul(g2, pe) | 0, n4 = n4 + Math.imul(_3, ce) | 0, d2 = d2 + Math.imul(_3, pe) | 0;
        var Ze = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ze >>> 26) | 0, Ze &= 67108863, l4 = Math.imul(G4, X3), n4 = Math.imul(G4, J), n4 = n4 + Math.imul(Y, X3) | 0, d2 = Math.imul(Y, J), l4 = l4 + Math.imul(V4, Q3) | 0, n4 = n4 + Math.imul(V4, ee) | 0, n4 = n4 + Math.imul($32, Q3) | 0, d2 = d2 + Math.imul($32, ee) | 0, l4 = l4 + Math.imul(j2, te) | 0, n4 = n4 + Math.imul(j2, re) | 0, n4 = n4 + Math.imul(Z3, te) | 0, d2 = d2 + Math.imul(Z3, re) | 0, l4 = l4 + Math.imul(W22, ie) | 0, n4 = n4 + Math.imul(W22, ne) | 0, n4 = n4 + Math.imul(K, ie) | 0, d2 = d2 + Math.imul(K, ne) | 0, l4 = l4 + Math.imul(z3, fe) | 0, n4 = n4 + Math.imul(z3, ae) | 0, n4 = n4 + Math.imul(H32, fe) | 0, d2 = d2 + Math.imul(H32, ae) | 0, l4 = l4 + Math.imul(F, oe) | 0, n4 = n4 + Math.imul(F, se) | 0, n4 = n4 + Math.imul(U3, oe) | 0, d2 = d2 + Math.imul(U3, se) | 0, l4 = l4 + Math.imul(C3, he) | 0, n4 = n4 + Math.imul(C3, ue) | 0, n4 = n4 + Math.imul(O2, he) | 0, d2 = d2 + Math.imul(O2, ue) | 0, l4 = l4 + Math.imul(k2, le) | 0, n4 = n4 + Math.imul(k2, de) | 0, n4 = n4 + Math.imul(D2, le) | 0, d2 = d2 + Math.imul(D2, de) | 0, l4 = l4 + Math.imul(R3, ce) | 0, n4 = n4 + Math.imul(R3, pe) | 0, n4 = n4 + Math.imul(I2, ce) | 0, d2 = d2 + Math.imul(I2, pe) | 0, l4 = l4 + Math.imul(g2, ve) | 0, n4 = n4 + Math.imul(g2, be) | 0, n4 = n4 + Math.imul(_3, ve) | 0, d2 = d2 + Math.imul(_3, be) | 0;
        var Ve = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ve >>> 26) | 0, Ve &= 67108863, l4 = Math.imul(G4, Q3), n4 = Math.imul(G4, ee), n4 = n4 + Math.imul(Y, Q3) | 0, d2 = Math.imul(Y, ee), l4 = l4 + Math.imul(V4, te) | 0, n4 = n4 + Math.imul(V4, re) | 0, n4 = n4 + Math.imul($32, te) | 0, d2 = d2 + Math.imul($32, re) | 0, l4 = l4 + Math.imul(j2, ie) | 0, n4 = n4 + Math.imul(j2, ne) | 0, n4 = n4 + Math.imul(Z3, ie) | 0, d2 = d2 + Math.imul(Z3, ne) | 0, l4 = l4 + Math.imul(W22, fe) | 0, n4 = n4 + Math.imul(W22, ae) | 0, n4 = n4 + Math.imul(K, fe) | 0, d2 = d2 + Math.imul(K, ae) | 0, l4 = l4 + Math.imul(z3, oe) | 0, n4 = n4 + Math.imul(z3, se) | 0, n4 = n4 + Math.imul(H32, oe) | 0, d2 = d2 + Math.imul(H32, se) | 0, l4 = l4 + Math.imul(F, he) | 0, n4 = n4 + Math.imul(F, ue) | 0, n4 = n4 + Math.imul(U3, he) | 0, d2 = d2 + Math.imul(U3, ue) | 0, l4 = l4 + Math.imul(C3, le) | 0, n4 = n4 + Math.imul(C3, de) | 0, n4 = n4 + Math.imul(O2, le) | 0, d2 = d2 + Math.imul(O2, de) | 0, l4 = l4 + Math.imul(k2, ce) | 0, n4 = n4 + Math.imul(k2, pe) | 0, n4 = n4 + Math.imul(D2, ce) | 0, d2 = d2 + Math.imul(D2, pe) | 0, l4 = l4 + Math.imul(R3, ve) | 0, n4 = n4 + Math.imul(R3, be) | 0, n4 = n4 + Math.imul(I2, ve) | 0, d2 = d2 + Math.imul(I2, be) | 0;
        var $e = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + ($e >>> 26) | 0, $e &= 67108863, l4 = Math.imul(G4, te), n4 = Math.imul(G4, re), n4 = n4 + Math.imul(Y, te) | 0, d2 = Math.imul(Y, re), l4 = l4 + Math.imul(V4, ie) | 0, n4 = n4 + Math.imul(V4, ne) | 0, n4 = n4 + Math.imul($32, ie) | 0, d2 = d2 + Math.imul($32, ne) | 0, l4 = l4 + Math.imul(j2, fe) | 0, n4 = n4 + Math.imul(j2, ae) | 0, n4 = n4 + Math.imul(Z3, fe) | 0, d2 = d2 + Math.imul(Z3, ae) | 0, l4 = l4 + Math.imul(W22, oe) | 0, n4 = n4 + Math.imul(W22, se) | 0, n4 = n4 + Math.imul(K, oe) | 0, d2 = d2 + Math.imul(K, se) | 0, l4 = l4 + Math.imul(z3, he) | 0, n4 = n4 + Math.imul(z3, ue) | 0, n4 = n4 + Math.imul(H32, he) | 0, d2 = d2 + Math.imul(H32, ue) | 0, l4 = l4 + Math.imul(F, le) | 0, n4 = n4 + Math.imul(F, de) | 0, n4 = n4 + Math.imul(U3, le) | 0, d2 = d2 + Math.imul(U3, de) | 0, l4 = l4 + Math.imul(C3, ce) | 0, n4 = n4 + Math.imul(C3, pe) | 0, n4 = n4 + Math.imul(O2, ce) | 0, d2 = d2 + Math.imul(O2, pe) | 0, l4 = l4 + Math.imul(k2, ve) | 0, n4 = n4 + Math.imul(k2, be) | 0, n4 = n4 + Math.imul(D2, ve) | 0, d2 = d2 + Math.imul(D2, be) | 0;
        var Ge = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ge >>> 26) | 0, Ge &= 67108863, l4 = Math.imul(G4, ie), n4 = Math.imul(G4, ne), n4 = n4 + Math.imul(Y, ie) | 0, d2 = Math.imul(Y, ne), l4 = l4 + Math.imul(V4, fe) | 0, n4 = n4 + Math.imul(V4, ae) | 0, n4 = n4 + Math.imul($32, fe) | 0, d2 = d2 + Math.imul($32, ae) | 0, l4 = l4 + Math.imul(j2, oe) | 0, n4 = n4 + Math.imul(j2, se) | 0, n4 = n4 + Math.imul(Z3, oe) | 0, d2 = d2 + Math.imul(Z3, se) | 0, l4 = l4 + Math.imul(W22, he) | 0, n4 = n4 + Math.imul(W22, ue) | 0, n4 = n4 + Math.imul(K, he) | 0, d2 = d2 + Math.imul(K, ue) | 0, l4 = l4 + Math.imul(z3, le) | 0, n4 = n4 + Math.imul(z3, de) | 0, n4 = n4 + Math.imul(H32, le) | 0, d2 = d2 + Math.imul(H32, de) | 0, l4 = l4 + Math.imul(F, ce) | 0, n4 = n4 + Math.imul(F, pe) | 0, n4 = n4 + Math.imul(U3, ce) | 0, d2 = d2 + Math.imul(U3, pe) | 0, l4 = l4 + Math.imul(C3, ve) | 0, n4 = n4 + Math.imul(C3, be) | 0, n4 = n4 + Math.imul(O2, ve) | 0, d2 = d2 + Math.imul(O2, be) | 0;
        var Ye = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ye >>> 26) | 0, Ye &= 67108863, l4 = Math.imul(G4, fe), n4 = Math.imul(G4, ae), n4 = n4 + Math.imul(Y, fe) | 0, d2 = Math.imul(Y, ae), l4 = l4 + Math.imul(V4, oe) | 0, n4 = n4 + Math.imul(V4, se) | 0, n4 = n4 + Math.imul($32, oe) | 0, d2 = d2 + Math.imul($32, se) | 0, l4 = l4 + Math.imul(j2, he) | 0, n4 = n4 + Math.imul(j2, ue) | 0, n4 = n4 + Math.imul(Z3, he) | 0, d2 = d2 + Math.imul(Z3, ue) | 0, l4 = l4 + Math.imul(W22, le) | 0, n4 = n4 + Math.imul(W22, de) | 0, n4 = n4 + Math.imul(K, le) | 0, d2 = d2 + Math.imul(K, de) | 0, l4 = l4 + Math.imul(z3, ce) | 0, n4 = n4 + Math.imul(z3, pe) | 0, n4 = n4 + Math.imul(H32, ce) | 0, d2 = d2 + Math.imul(H32, pe) | 0, l4 = l4 + Math.imul(F, ve) | 0, n4 = n4 + Math.imul(F, be) | 0, n4 = n4 + Math.imul(U3, ve) | 0, d2 = d2 + Math.imul(U3, be) | 0;
        var Xe = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Xe >>> 26) | 0, Xe &= 67108863, l4 = Math.imul(G4, oe), n4 = Math.imul(G4, se), n4 = n4 + Math.imul(Y, oe) | 0, d2 = Math.imul(Y, se), l4 = l4 + Math.imul(V4, he) | 0, n4 = n4 + Math.imul(V4, ue) | 0, n4 = n4 + Math.imul($32, he) | 0, d2 = d2 + Math.imul($32, ue) | 0, l4 = l4 + Math.imul(j2, le) | 0, n4 = n4 + Math.imul(j2, de) | 0, n4 = n4 + Math.imul(Z3, le) | 0, d2 = d2 + Math.imul(Z3, de) | 0, l4 = l4 + Math.imul(W22, ce) | 0, n4 = n4 + Math.imul(W22, pe) | 0, n4 = n4 + Math.imul(K, ce) | 0, d2 = d2 + Math.imul(K, pe) | 0, l4 = l4 + Math.imul(z3, ve) | 0, n4 = n4 + Math.imul(z3, be) | 0, n4 = n4 + Math.imul(H32, ve) | 0, d2 = d2 + Math.imul(H32, be) | 0;
        var Je = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Je >>> 26) | 0, Je &= 67108863, l4 = Math.imul(G4, he), n4 = Math.imul(G4, ue), n4 = n4 + Math.imul(Y, he) | 0, d2 = Math.imul(Y, ue), l4 = l4 + Math.imul(V4, le) | 0, n4 = n4 + Math.imul(V4, de) | 0, n4 = n4 + Math.imul($32, le) | 0, d2 = d2 + Math.imul($32, de) | 0, l4 = l4 + Math.imul(j2, ce) | 0, n4 = n4 + Math.imul(j2, pe) | 0, n4 = n4 + Math.imul(Z3, ce) | 0, d2 = d2 + Math.imul(Z3, pe) | 0, l4 = l4 + Math.imul(W22, ve) | 0, n4 = n4 + Math.imul(W22, be) | 0, n4 = n4 + Math.imul(K, ve) | 0, d2 = d2 + Math.imul(K, be) | 0;
        var Qe = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Qe >>> 26) | 0, Qe &= 67108863, l4 = Math.imul(G4, le), n4 = Math.imul(G4, de), n4 = n4 + Math.imul(Y, le) | 0, d2 = Math.imul(Y, de), l4 = l4 + Math.imul(V4, ce) | 0, n4 = n4 + Math.imul(V4, pe) | 0, n4 = n4 + Math.imul($32, ce) | 0, d2 = d2 + Math.imul($32, pe) | 0, l4 = l4 + Math.imul(j2, ve) | 0, n4 = n4 + Math.imul(j2, be) | 0, n4 = n4 + Math.imul(Z3, ve) | 0, d2 = d2 + Math.imul(Z3, be) | 0;
        var et = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (et >>> 26) | 0, et &= 67108863, l4 = Math.imul(G4, ce), n4 = Math.imul(G4, pe), n4 = n4 + Math.imul(Y, ce) | 0, d2 = Math.imul(Y, pe), l4 = l4 + Math.imul(V4, ve) | 0, n4 = n4 + Math.imul(V4, be) | 0, n4 = n4 + Math.imul($32, ve) | 0, d2 = d2 + Math.imul($32, be) | 0;
        var tt = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (tt >>> 26) | 0, tt &= 67108863, l4 = Math.imul(G4, ve), n4 = Math.imul(G4, be), n4 = n4 + Math.imul(Y, ve) | 0, d2 = Math.imul(Y, be);
        var rt = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        return b3 = (d2 + (n4 >>> 13) | 0) + (rt >>> 26) | 0, rt &= 67108863, c[0] = ft, c[1] = Be, c[2] = qe, c[3] = ze, c[4] = He, c[5] = We, c[6] = Ke, c[7] = je, c[8] = Ze, c[9] = Ve, c[10] = $e, c[11] = Ge, c[12] = Ye, c[13] = Xe, c[14] = Je, c[15] = Qe, c[16] = et, c[17] = tt, c[18] = rt, b3 !== 0 && (c[19] = b3, h5.length++), h5;
      };
      Math.imul || (L32 = q2);
      function ge(v3, i2, a3) {
        a3.negative = i2.negative ^ v3.negative, a3.length = v3.length + i2.length;
        for (var h5 = 0, s2 = 0, u3 = 0;u3 < a3.length - 1; u3++) {
          var c = s2;
          s2 = 0;
          for (var b3 = h5 & 67108863, l4 = Math.min(u3, i2.length - 1), n4 = Math.max(0, u3 - v3.length + 1);n4 <= l4; n4++) {
            var d2 = u3 - n4, w2 = v3.words[d2] | 0, g2 = i2.words[n4] | 0, _3 = w2 * g2, A6 = _3 & 67108863;
            c = c + (_3 / 67108864 | 0) | 0, A6 = A6 + b3 | 0, b3 = A6 & 67108863, c = c + (A6 >>> 26) | 0, s2 += c >>> 26, c &= 67108863;
          }
          a3.words[u3] = b3, h5 = c, c = s2;
        }
        return h5 !== 0 ? a3.words[u3] = h5 : a3.length--, a3.strip();
      }
      function _e(v3, i2, a3) {
        var h5 = new N3;
        return h5.mulp(v3, i2, a3);
      }
      f4.prototype.mulTo = function(i2, a3) {
        var h5, s2 = this.length + i2.length;
        return this.length === 10 && i2.length === 10 ? h5 = L32(this, i2, a3) : s2 < 63 ? h5 = q2(this, i2, a3) : s2 < 1024 ? h5 = ge(this, i2, a3) : h5 = _e(this, i2, a3), h5;
      };
      function N3(v3, i2) {
        this.x = v3, this.y = i2;
      }
      N3.prototype.makeRBT = function(i2) {
        for (var a3 = new Array(i2), h5 = f4.prototype._countBits(i2) - 1, s2 = 0;s2 < i2; s2++)
          a3[s2] = this.revBin(s2, h5, i2);
        return a3;
      }, N3.prototype.revBin = function(i2, a3, h5) {
        if (i2 === 0 || i2 === h5 - 1)
          return i2;
        for (var s2 = 0, u3 = 0;u3 < a3; u3++)
          s2 |= (i2 & 1) << a3 - u3 - 1, i2 >>= 1;
        return s2;
      }, N3.prototype.permute = function(i2, a3, h5, s2, u3, c) {
        for (var b3 = 0;b3 < c; b3++)
          s2[b3] = a3[i2[b3]], u3[b3] = h5[i2[b3]];
      }, N3.prototype.transform = function(i2, a3, h5, s2, u3, c) {
        this.permute(c, i2, a3, h5, s2, u3);
        for (var b3 = 1;b3 < u3; b3 <<= 1)
          for (var l4 = b3 << 1, n4 = Math.cos(2 * Math.PI / l4), d2 = Math.sin(2 * Math.PI / l4), w2 = 0;w2 < u3; w2 += l4)
            for (var g2 = n4, _3 = d2, A6 = 0;A6 < b3; A6++) {
              var R3 = h5[w2 + A6], I2 = s2[w2 + A6], Me = h5[w2 + A6 + b3], k2 = s2[w2 + A6 + b3], D2 = g2 * Me - _3 * k2;
              k2 = g2 * k2 + _3 * Me, Me = D2, h5[w2 + A6] = R3 + Me, s2[w2 + A6] = I2 + k2, h5[w2 + A6 + b3] = R3 - Me, s2[w2 + A6 + b3] = I2 - k2, A6 !== l4 && (D2 = n4 * g2 - d2 * _3, _3 = n4 * _3 + d2 * g2, g2 = D2);
            }
      }, N3.prototype.guessLen13b = function(i2, a3) {
        var h5 = Math.max(a3, i2) | 1, s2 = h5 & 1, u3 = 0;
        for (h5 = h5 / 2 | 0;h5; h5 = h5 >>> 1)
          u3++;
        return 1 << u3 + 1 + s2;
      }, N3.prototype.conjugate = function(i2, a3, h5) {
        if (!(h5 <= 1))
          for (var s2 = 0;s2 < h5 / 2; s2++) {
            var u3 = i2[s2];
            i2[s2] = i2[h5 - s2 - 1], i2[h5 - s2 - 1] = u3, u3 = a3[s2], a3[s2] = -a3[h5 - s2 - 1], a3[h5 - s2 - 1] = -u3;
          }
      }, N3.prototype.normalize13b = function(i2, a3) {
        for (var h5 = 0, s2 = 0;s2 < a3 / 2; s2++) {
          var u3 = Math.round(i2[2 * s2 + 1] / a3) * 8192 + Math.round(i2[2 * s2] / a3) + h5;
          i2[s2] = u3 & 67108863, u3 < 67108864 ? h5 = 0 : h5 = u3 / 67108864 | 0;
        }
        return i2;
      }, N3.prototype.convert13b = function(i2, a3, h5, s2) {
        for (var u3 = 0, c = 0;c < a3; c++)
          u3 = u3 + (i2[c] | 0), h5[2 * c] = u3 & 8191, u3 = u3 >>> 13, h5[2 * c + 1] = u3 & 8191, u3 = u3 >>> 13;
        for (c = 2 * a3;c < s2; ++c)
          h5[c] = 0;
        r2(u3 === 0), r2((u3 & -8192) === 0);
      }, N3.prototype.stub = function(i2) {
        for (var a3 = new Array(i2), h5 = 0;h5 < i2; h5++)
          a3[h5] = 0;
        return a3;
      }, N3.prototype.mulp = function(i2, a3, h5) {
        var s2 = 2 * this.guessLen13b(i2.length, a3.length), u3 = this.makeRBT(s2), c = this.stub(s2), b3 = new Array(s2), l4 = new Array(s2), n4 = new Array(s2), d2 = new Array(s2), w2 = new Array(s2), g2 = new Array(s2), _3 = h5.words;
        _3.length = s2, this.convert13b(i2.words, i2.length, b3, s2), this.convert13b(a3.words, a3.length, d2, s2), this.transform(b3, c, l4, n4, s2, u3), this.transform(d2, c, w2, g2, s2, u3);
        for (var A6 = 0;A6 < s2; A6++) {
          var R3 = l4[A6] * w2[A6] - n4[A6] * g2[A6];
          n4[A6] = l4[A6] * g2[A6] + n4[A6] * w2[A6], l4[A6] = R3;
        }
        return this.conjugate(l4, n4, s2), this.transform(l4, n4, _3, c, s2, u3), this.conjugate(_3, c, s2), this.normalize13b(_3, s2), h5.negative = i2.negative ^ a3.negative, h5.length = i2.length + a3.length, h5.strip();
      }, f4.prototype.mul = function(i2) {
        var a3 = new f4(null);
        return a3.words = new Array(this.length + i2.length), this.mulTo(i2, a3);
      }, f4.prototype.mulf = function(i2) {
        var a3 = new f4(null);
        return a3.words = new Array(this.length + i2.length), _e(this, i2, a3);
      }, f4.prototype.imul = function(i2) {
        return this.clone().mulTo(i2, this);
      }, f4.prototype.imuln = function(i2) {
        r2(typeof i2 == "number"), r2(i2 < 67108864);
        for (var a3 = 0, h5 = 0;h5 < this.length; h5++) {
          var s2 = (this.words[h5] | 0) * i2, u3 = (s2 & 67108863) + (a3 & 67108863);
          a3 >>= 26, a3 += s2 / 67108864 | 0, a3 += u3 >>> 26, this.words[h5] = u3 & 67108863;
        }
        return a3 !== 0 && (this.words[h5] = a3, this.length++), this;
      }, f4.prototype.muln = function(i2) {
        return this.clone().imuln(i2);
      }, f4.prototype.sqr = function() {
        return this.mul(this);
      }, f4.prototype.isqr = function() {
        return this.imul(this.clone());
      }, f4.prototype.pow = function(i2) {
        var a3 = B5(i2);
        if (a3.length === 0)
          return new f4(1);
        for (var h5 = this, s2 = 0;s2 < a3.length && a3[s2] === 0; s2++, h5 = h5.sqr())
          ;
        if (++s2 < a3.length)
          for (var u3 = h5.sqr();s2 < a3.length; s2++, u3 = u3.sqr())
            a3[s2] !== 0 && (h5 = h5.mul(u3));
        return h5;
      }, f4.prototype.iushln = function(i2) {
        r2(typeof i2 == "number" && i2 >= 0);
        var a3 = i2 % 26, h5 = (i2 - a3) / 26, s2 = 67108863 >>> 26 - a3 << 26 - a3, u3;
        if (a3 !== 0) {
          var c = 0;
          for (u3 = 0;u3 < this.length; u3++) {
            var b3 = this.words[u3] & s2, l4 = (this.words[u3] | 0) - b3 << a3;
            this.words[u3] = l4 | c, c = b3 >>> 26 - a3;
          }
          c && (this.words[u3] = c, this.length++);
        }
        if (h5 !== 0) {
          for (u3 = this.length - 1;u3 >= 0; u3--)
            this.words[u3 + h5] = this.words[u3];
          for (u3 = 0;u3 < h5; u3++)
            this.words[u3] = 0;
          this.length += h5;
        }
        return this.strip();
      }, f4.prototype.ishln = function(i2) {
        return r2(this.negative === 0), this.iushln(i2);
      }, f4.prototype.iushrn = function(i2, a3, h5) {
        r2(typeof i2 == "number" && i2 >= 0);
        var s2;
        a3 ? s2 = (a3 - a3 % 26) / 26 : s2 = 0;
        var u3 = i2 % 26, c = Math.min((i2 - u3) / 26, this.length), b3 = 67108863 ^ 67108863 >>> u3 << u3, l4 = h5;
        if (s2 -= c, s2 = Math.max(0, s2), l4) {
          for (var n4 = 0;n4 < c; n4++)
            l4.words[n4] = this.words[n4];
          l4.length = c;
        }
        if (c !== 0)
          if (this.length > c)
            for (this.length -= c, n4 = 0;n4 < this.length; n4++)
              this.words[n4] = this.words[n4 + c];
          else
            this.words[0] = 0, this.length = 1;
        var d2 = 0;
        for (n4 = this.length - 1;n4 >= 0 && (d2 !== 0 || n4 >= s2); n4--) {
          var w2 = this.words[n4] | 0;
          this.words[n4] = d2 << 26 - u3 | w2 >>> u3, d2 = w2 & b3;
        }
        return l4 && d2 !== 0 && (l4.words[l4.length++] = d2), this.length === 0 && (this.words[0] = 0, this.length = 1), this.strip();
      }, f4.prototype.ishrn = function(i2, a3, h5) {
        return r2(this.negative === 0), this.iushrn(i2, a3, h5);
      }, f4.prototype.shln = function(i2) {
        return this.clone().ishln(i2);
      }, f4.prototype.ushln = function(i2) {
        return this.clone().iushln(i2);
      }, f4.prototype.shrn = function(i2) {
        return this.clone().ishrn(i2);
      }, f4.prototype.ushrn = function(i2) {
        return this.clone().iushrn(i2);
      }, f4.prototype.testn = function(i2) {
        r2(typeof i2 == "number" && i2 >= 0);
        var a3 = i2 % 26, h5 = (i2 - a3) / 26, s2 = 1 << a3;
        if (this.length <= h5)
          return false;
        var u3 = this.words[h5];
        return !!(u3 & s2);
      }, f4.prototype.imaskn = function(i2) {
        r2(typeof i2 == "number" && i2 >= 0);
        var a3 = i2 % 26, h5 = (i2 - a3) / 26;
        if (r2(this.negative === 0, "imaskn works only with positive numbers"), this.length <= h5)
          return this;
        if (a3 !== 0 && h5++, this.length = Math.min(h5, this.length), a3 !== 0) {
          var s2 = 67108863 ^ 67108863 >>> a3 << a3;
          this.words[this.length - 1] &= s2;
        }
        return this.strip();
      }, f4.prototype.maskn = function(i2) {
        return this.clone().imaskn(i2);
      }, f4.prototype.iaddn = function(i2) {
        return r2(typeof i2 == "number"), r2(i2 < 67108864), i2 < 0 ? this.isubn(-i2) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) < i2 ? (this.words[0] = i2 - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(i2), this.negative = 1, this) : this._iaddn(i2);
      }, f4.prototype._iaddn = function(i2) {
        this.words[0] += i2;
        for (var a3 = 0;a3 < this.length && this.words[a3] >= 67108864; a3++)
          this.words[a3] -= 67108864, a3 === this.length - 1 ? this.words[a3 + 1] = 1 : this.words[a3 + 1]++;
        return this.length = Math.max(this.length, a3 + 1), this;
      }, f4.prototype.isubn = function(i2) {
        if (r2(typeof i2 == "number"), r2(i2 < 67108864), i2 < 0)
          return this.iaddn(-i2);
        if (this.negative !== 0)
          return this.negative = 0, this.iaddn(i2), this.negative = 1, this;
        if (this.words[0] -= i2, this.length === 1 && this.words[0] < 0)
          this.words[0] = -this.words[0], this.negative = 1;
        else
          for (var a3 = 0;a3 < this.length && this.words[a3] < 0; a3++)
            this.words[a3] += 67108864, this.words[a3 + 1] -= 1;
        return this.strip();
      }, f4.prototype.addn = function(i2) {
        return this.clone().iaddn(i2);
      }, f4.prototype.subn = function(i2) {
        return this.clone().isubn(i2);
      }, f4.prototype.iabs = function() {
        return this.negative = 0, this;
      }, f4.prototype.abs = function() {
        return this.clone().iabs();
      }, f4.prototype._ishlnsubmul = function(i2, a3, h5) {
        var s2 = i2.length + h5, u3;
        this._expand(s2);
        var c, b3 = 0;
        for (u3 = 0;u3 < i2.length; u3++) {
          c = (this.words[u3 + h5] | 0) + b3;
          var l4 = (i2.words[u3] | 0) * a3;
          c -= l4 & 67108863, b3 = (c >> 26) - (l4 / 67108864 | 0), this.words[u3 + h5] = c & 67108863;
        }
        for (;u3 < this.length - h5; u3++)
          c = (this.words[u3 + h5] | 0) + b3, b3 = c >> 26, this.words[u3 + h5] = c & 67108863;
        if (b3 === 0)
          return this.strip();
        for (r2(b3 === -1), b3 = 0, u3 = 0;u3 < this.length; u3++)
          c = -(this.words[u3] | 0) + b3, b3 = c >> 26, this.words[u3] = c & 67108863;
        return this.negative = 1, this.strip();
      }, f4.prototype._wordDiv = function(i2, a3) {
        var h5 = this.length - i2.length, s2 = this.clone(), u3 = i2, c = u3.words[u3.length - 1] | 0, b3 = this._countBits(c);
        h5 = 26 - b3, h5 !== 0 && (u3 = u3.ushln(h5), s2.iushln(h5), c = u3.words[u3.length - 1] | 0);
        var l4 = s2.length - u3.length, n4;
        if (a3 !== "mod") {
          n4 = new f4(null), n4.length = l4 + 1, n4.words = new Array(n4.length);
          for (var d2 = 0;d2 < n4.length; d2++)
            n4.words[d2] = 0;
        }
        var w2 = s2.clone()._ishlnsubmul(u3, 1, l4);
        w2.negative === 0 && (s2 = w2, n4 && (n4.words[l4] = 1));
        for (var g2 = l4 - 1;g2 >= 0; g2--) {
          var _3 = (s2.words[u3.length + g2] | 0) * 67108864 + (s2.words[u3.length + g2 - 1] | 0);
          for (_3 = Math.min(_3 / c | 0, 67108863), s2._ishlnsubmul(u3, _3, g2);s2.negative !== 0; )
            _3--, s2.negative = 0, s2._ishlnsubmul(u3, 1, g2), s2.isZero() || (s2.negative ^= 1);
          n4 && (n4.words[g2] = _3);
        }
        return n4 && n4.strip(), s2.strip(), a3 !== "div" && h5 !== 0 && s2.iushrn(h5), { div: n4 || null, mod: s2 };
      }, f4.prototype.divmod = function(i2, a3, h5) {
        if (r2(!i2.isZero()), this.isZero())
          return { div: new f4(0), mod: new f4(0) };
        var s2, u3, c;
        return this.negative !== 0 && i2.negative === 0 ? (c = this.neg().divmod(i2, a3), a3 !== "mod" && (s2 = c.div.neg()), a3 !== "div" && (u3 = c.mod.neg(), h5 && u3.negative !== 0 && u3.iadd(i2)), { div: s2, mod: u3 }) : this.negative === 0 && i2.negative !== 0 ? (c = this.divmod(i2.neg(), a3), a3 !== "mod" && (s2 = c.div.neg()), { div: s2, mod: c.mod }) : (this.negative & i2.negative) !== 0 ? (c = this.neg().divmod(i2.neg(), a3), a3 !== "div" && (u3 = c.mod.neg(), h5 && u3.negative !== 0 && u3.isub(i2)), { div: c.div, mod: u3 }) : i2.length > this.length || this.cmp(i2) < 0 ? { div: new f4(0), mod: this } : i2.length === 1 ? a3 === "div" ? { div: this.divn(i2.words[0]), mod: null } : a3 === "mod" ? { div: null, mod: new f4(this.modn(i2.words[0])) } : { div: this.divn(i2.words[0]), mod: new f4(this.modn(i2.words[0])) } : this._wordDiv(i2, a3);
      }, f4.prototype.div = function(i2) {
        return this.divmod(i2, "div", false).div;
      }, f4.prototype.mod = function(i2) {
        return this.divmod(i2, "mod", false).mod;
      }, f4.prototype.umod = function(i2) {
        return this.divmod(i2, "mod", true).mod;
      }, f4.prototype.divRound = function(i2) {
        var a3 = this.divmod(i2);
        if (a3.mod.isZero())
          return a3.div;
        var h5 = a3.div.negative !== 0 ? a3.mod.isub(i2) : a3.mod, s2 = i2.ushrn(1), u3 = i2.andln(1), c = h5.cmp(s2);
        return c < 0 || u3 === 1 && c === 0 ? a3.div : a3.div.negative !== 0 ? a3.div.isubn(1) : a3.div.iaddn(1);
      }, f4.prototype.modn = function(i2) {
        r2(i2 <= 67108863);
        for (var a3 = (1 << 26) % i2, h5 = 0, s2 = this.length - 1;s2 >= 0; s2--)
          h5 = (a3 * h5 + (this.words[s2] | 0)) % i2;
        return h5;
      }, f4.prototype.idivn = function(i2) {
        r2(i2 <= 67108863);
        for (var a3 = 0, h5 = this.length - 1;h5 >= 0; h5--) {
          var s2 = (this.words[h5] | 0) + a3 * 67108864;
          this.words[h5] = s2 / i2 | 0, a3 = s2 % i2;
        }
        return this.strip();
      }, f4.prototype.divn = function(i2) {
        return this.clone().idivn(i2);
      }, f4.prototype.egcd = function(i2) {
        r2(i2.negative === 0), r2(!i2.isZero());
        var a3 = this, h5 = i2.clone();
        a3.negative !== 0 ? a3 = a3.umod(i2) : a3 = a3.clone();
        for (var s2 = new f4(1), u3 = new f4(0), c = new f4(0), b3 = new f4(1), l4 = 0;a3.isEven() && h5.isEven(); )
          a3.iushrn(1), h5.iushrn(1), ++l4;
        for (var n4 = h5.clone(), d2 = a3.clone();!a3.isZero(); ) {
          for (var w2 = 0, g2 = 1;(a3.words[0] & g2) === 0 && w2 < 26; ++w2, g2 <<= 1)
            ;
          if (w2 > 0)
            for (a3.iushrn(w2);w2-- > 0; )
              (s2.isOdd() || u3.isOdd()) && (s2.iadd(n4), u3.isub(d2)), s2.iushrn(1), u3.iushrn(1);
          for (var _3 = 0, A6 = 1;(h5.words[0] & A6) === 0 && _3 < 26; ++_3, A6 <<= 1)
            ;
          if (_3 > 0)
            for (h5.iushrn(_3);_3-- > 0; )
              (c.isOdd() || b3.isOdd()) && (c.iadd(n4), b3.isub(d2)), c.iushrn(1), b3.iushrn(1);
          a3.cmp(h5) >= 0 ? (a3.isub(h5), s2.isub(c), u3.isub(b3)) : (h5.isub(a3), c.isub(s2), b3.isub(u3));
        }
        return { a: c, b: b3, gcd: h5.iushln(l4) };
      }, f4.prototype._invmp = function(i2) {
        r2(i2.negative === 0), r2(!i2.isZero());
        var a3 = this, h5 = i2.clone();
        a3.negative !== 0 ? a3 = a3.umod(i2) : a3 = a3.clone();
        for (var s2 = new f4(1), u3 = new f4(0), c = h5.clone();a3.cmpn(1) > 0 && h5.cmpn(1) > 0; ) {
          for (var b3 = 0, l4 = 1;(a3.words[0] & l4) === 0 && b3 < 26; ++b3, l4 <<= 1)
            ;
          if (b3 > 0)
            for (a3.iushrn(b3);b3-- > 0; )
              s2.isOdd() && s2.iadd(c), s2.iushrn(1);
          for (var n4 = 0, d2 = 1;(h5.words[0] & d2) === 0 && n4 < 26; ++n4, d2 <<= 1)
            ;
          if (n4 > 0)
            for (h5.iushrn(n4);n4-- > 0; )
              u3.isOdd() && u3.iadd(c), u3.iushrn(1);
          a3.cmp(h5) >= 0 ? (a3.isub(h5), s2.isub(u3)) : (h5.isub(a3), u3.isub(s2));
        }
        var w2;
        return a3.cmpn(1) === 0 ? w2 = s2 : w2 = u3, w2.cmpn(0) < 0 && w2.iadd(i2), w2;
      }, f4.prototype.gcd = function(i2) {
        if (this.isZero())
          return i2.abs();
        if (i2.isZero())
          return this.abs();
        var a3 = this.clone(), h5 = i2.clone();
        a3.negative = 0, h5.negative = 0;
        for (var s2 = 0;a3.isEven() && h5.isEven(); s2++)
          a3.iushrn(1), h5.iushrn(1);
        do {
          for (;a3.isEven(); )
            a3.iushrn(1);
          for (;h5.isEven(); )
            h5.iushrn(1);
          var u3 = a3.cmp(h5);
          if (u3 < 0) {
            var c = a3;
            a3 = h5, h5 = c;
          } else if (u3 === 0 || h5.cmpn(1) === 0)
            break;
          a3.isub(h5);
        } while (true);
        return h5.iushln(s2);
      }, f4.prototype.invm = function(i2) {
        return this.egcd(i2).a.umod(i2);
      }, f4.prototype.isEven = function() {
        return (this.words[0] & 1) === 0;
      }, f4.prototype.isOdd = function() {
        return (this.words[0] & 1) === 1;
      }, f4.prototype.andln = function(i2) {
        return this.words[0] & i2;
      }, f4.prototype.bincn = function(i2) {
        r2(typeof i2 == "number");
        var a3 = i2 % 26, h5 = (i2 - a3) / 26, s2 = 1 << a3;
        if (this.length <= h5)
          return this._expand(h5 + 1), this.words[h5] |= s2, this;
        for (var u3 = s2, c = h5;u3 !== 0 && c < this.length; c++) {
          var b3 = this.words[c] | 0;
          b3 += u3, u3 = b3 >>> 26, b3 &= 67108863, this.words[c] = b3;
        }
        return u3 !== 0 && (this.words[c] = u3, this.length++), this;
      }, f4.prototype.isZero = function() {
        return this.length === 1 && this.words[0] === 0;
      }, f4.prototype.cmpn = function(i2) {
        var a3 = i2 < 0;
        if (this.negative !== 0 && !a3)
          return -1;
        if (this.negative === 0 && a3)
          return 1;
        this.strip();
        var h5;
        if (this.length > 1)
          h5 = 1;
        else {
          a3 && (i2 = -i2), r2(i2 <= 67108863, "Number is too big");
          var s2 = this.words[0] | 0;
          h5 = s2 === i2 ? 0 : s2 < i2 ? -1 : 1;
        }
        return this.negative !== 0 ? -h5 | 0 : h5;
      }, f4.prototype.cmp = function(i2) {
        if (this.negative !== 0 && i2.negative === 0)
          return -1;
        if (this.negative === 0 && i2.negative !== 0)
          return 1;
        var a3 = this.ucmp(i2);
        return this.negative !== 0 ? -a3 | 0 : a3;
      }, f4.prototype.ucmp = function(i2) {
        if (this.length > i2.length)
          return 1;
        if (this.length < i2.length)
          return -1;
        for (var a3 = 0, h5 = this.length - 1;h5 >= 0; h5--) {
          var s2 = this.words[h5] | 0, u3 = i2.words[h5] | 0;
          if (s2 !== u3) {
            s2 < u3 ? a3 = -1 : s2 > u3 && (a3 = 1);
            break;
          }
        }
        return a3;
      }, f4.prototype.gtn = function(i2) {
        return this.cmpn(i2) === 1;
      }, f4.prototype.gt = function(i2) {
        return this.cmp(i2) === 1;
      }, f4.prototype.gten = function(i2) {
        return this.cmpn(i2) >= 0;
      }, f4.prototype.gte = function(i2) {
        return this.cmp(i2) >= 0;
      }, f4.prototype.ltn = function(i2) {
        return this.cmpn(i2) === -1;
      }, f4.prototype.lt = function(i2) {
        return this.cmp(i2) === -1;
      }, f4.prototype.lten = function(i2) {
        return this.cmpn(i2) <= 0;
      }, f4.prototype.lte = function(i2) {
        return this.cmp(i2) <= 0;
      }, f4.prototype.eqn = function(i2) {
        return this.cmpn(i2) === 0;
      }, f4.prototype.eq = function(i2) {
        return this.cmp(i2) === 0;
      }, f4.red = function(i2) {
        return new P22(i2);
      }, f4.prototype.toRed = function(i2) {
        return r2(!this.red, "Already a number in reduction context"), r2(this.negative === 0, "red works only with positives"), i2.convertTo(this)._forceRed(i2);
      }, f4.prototype.fromRed = function() {
        return r2(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
      }, f4.prototype._forceRed = function(i2) {
        return this.red = i2, this;
      }, f4.prototype.forceRed = function(i2) {
        return r2(!this.red, "Already a number in reduction context"), this._forceRed(i2);
      }, f4.prototype.redAdd = function(i2) {
        return r2(this.red, "redAdd works only with red numbers"), this.red.add(this, i2);
      }, f4.prototype.redIAdd = function(i2) {
        return r2(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, i2);
      }, f4.prototype.redSub = function(i2) {
        return r2(this.red, "redSub works only with red numbers"), this.red.sub(this, i2);
      }, f4.prototype.redISub = function(i2) {
        return r2(this.red, "redISub works only with red numbers"), this.red.isub(this, i2);
      }, f4.prototype.redShl = function(i2) {
        return r2(this.red, "redShl works only with red numbers"), this.red.shl(this, i2);
      }, f4.prototype.redMul = function(i2) {
        return r2(this.red, "redMul works only with red numbers"), this.red._verify2(this, i2), this.red.mul(this, i2);
      }, f4.prototype.redIMul = function(i2) {
        return r2(this.red, "redMul works only with red numbers"), this.red._verify2(this, i2), this.red.imul(this, i2);
      }, f4.prototype.redSqr = function() {
        return r2(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
      }, f4.prototype.redISqr = function() {
        return r2(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
      }, f4.prototype.redSqrt = function() {
        return r2(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
      }, f4.prototype.redInvm = function() {
        return r2(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
      }, f4.prototype.redNeg = function() {
        return r2(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
      }, f4.prototype.redPow = function(i2) {
        return r2(this.red && !i2.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, i2);
      };
      var we = { k256: null, p224: null, p192: null, p25519: null };
      function ye(v3, i2) {
        this.name = v3, this.p = new f4(i2, 16), this.n = this.p.bitLength(), this.k = new f4(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
      }
      ye.prototype._tmp = function() {
        var i2 = new f4(null);
        return i2.words = new Array(Math.ceil(this.n / 13)), i2;
      }, ye.prototype.ireduce = function(i2) {
        var a3 = i2, h5;
        do
          this.split(a3, this.tmp), a3 = this.imulK(a3), a3 = a3.iadd(this.tmp), h5 = a3.bitLength();
        while (h5 > this.n);
        var s2 = h5 < this.n ? -1 : a3.ucmp(this.p);
        return s2 === 0 ? (a3.words[0] = 0, a3.length = 1) : s2 > 0 ? a3.isub(this.p) : a3.strip !== undefined ? a3.strip() : a3._strip(), a3;
      }, ye.prototype.split = function(i2, a3) {
        i2.iushrn(this.n, 0, a3);
      }, ye.prototype.imulK = function(i2) {
        return i2.imul(this.k);
      };
      function xe() {
        ye.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      o2(xe, ye), xe.prototype.split = function(i2, a3) {
        for (var h5 = 4194303, s2 = Math.min(i2.length, 9), u3 = 0;u3 < s2; u3++)
          a3.words[u3] = i2.words[u3];
        if (a3.length = s2, i2.length <= 9) {
          i2.words[0] = 0, i2.length = 1;
          return;
        }
        var c = i2.words[9];
        for (a3.words[a3.length++] = c & h5, u3 = 10;u3 < i2.length; u3++) {
          var b3 = i2.words[u3] | 0;
          i2.words[u3 - 10] = (b3 & h5) << 4 | c >>> 22, c = b3;
        }
        c >>>= 22, i2.words[u3 - 10] = c, c === 0 && i2.length > 10 ? i2.length -= 10 : i2.length -= 9;
      }, xe.prototype.imulK = function(i2) {
        i2.words[i2.length] = 0, i2.words[i2.length + 1] = 0, i2.length += 2;
        for (var a3 = 0, h5 = 0;h5 < i2.length; h5++) {
          var s2 = i2.words[h5] | 0;
          a3 += s2 * 977, i2.words[h5] = a3 & 67108863, a3 = s2 * 64 + (a3 / 67108864 | 0);
        }
        return i2.words[i2.length - 1] === 0 && (i2.length--, i2.words[i2.length - 1] === 0 && i2.length--), i2;
      };
      function Re() {
        ye.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      o2(Re, ye);
      function Ee() {
        ye.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      o2(Ee, ye);
      function Ae() {
        ye.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      o2(Ae, ye), Ae.prototype.imulK = function(i2) {
        for (var a3 = 0, h5 = 0;h5 < i2.length; h5++) {
          var s2 = (i2.words[h5] | 0) * 19 + a3, u3 = s2 & 67108863;
          s2 >>>= 26, i2.words[h5] = u3, a3 = s2;
        }
        return a3 !== 0 && (i2.words[i2.length++] = a3), i2;
      }, f4._prime = function(i2) {
        if (we[i2])
          return we[i2];
        var a3;
        if (i2 === "k256")
          a3 = new xe;
        else if (i2 === "p224")
          a3 = new Re;
        else if (i2 === "p192")
          a3 = new Ee;
        else if (i2 === "p25519")
          a3 = new Ae;
        else
          throw new Error("Unknown prime " + i2);
        return we[i2] = a3, a3;
      };
      function P22(v3) {
        if (typeof v3 == "string") {
          var i2 = f4._prime(v3);
          this.m = i2.p, this.prime = i2;
        } else
          r2(v3.gtn(1), "modulus must be greater than 1"), this.m = v3, this.prime = null;
      }
      P22.prototype._verify1 = function(i2) {
        r2(i2.negative === 0, "red works only with positives"), r2(i2.red, "red works only with red numbers");
      }, P22.prototype._verify2 = function(i2, a3) {
        r2((i2.negative | a3.negative) === 0, "red works only with positives"), r2(i2.red && i2.red === a3.red, "red works only with red numbers");
      }, P22.prototype.imod = function(i2) {
        return this.prime ? this.prime.ireduce(i2)._forceRed(this) : i2.umod(this.m)._forceRed(this);
      }, P22.prototype.neg = function(i2) {
        return i2.isZero() ? i2.clone() : this.m.sub(i2)._forceRed(this);
      }, P22.prototype.add = function(i2, a3) {
        this._verify2(i2, a3);
        var h5 = i2.add(a3);
        return h5.cmp(this.m) >= 0 && h5.isub(this.m), h5._forceRed(this);
      }, P22.prototype.iadd = function(i2, a3) {
        this._verify2(i2, a3);
        var h5 = i2.iadd(a3);
        return h5.cmp(this.m) >= 0 && h5.isub(this.m), h5;
      }, P22.prototype.sub = function(i2, a3) {
        this._verify2(i2, a3);
        var h5 = i2.sub(a3);
        return h5.cmpn(0) < 0 && h5.iadd(this.m), h5._forceRed(this);
      }, P22.prototype.isub = function(i2, a3) {
        this._verify2(i2, a3);
        var h5 = i2.isub(a3);
        return h5.cmpn(0) < 0 && h5.iadd(this.m), h5;
      }, P22.prototype.shl = function(i2, a3) {
        return this._verify1(i2), this.imod(i2.ushln(a3));
      }, P22.prototype.imul = function(i2, a3) {
        return this._verify2(i2, a3), this.imod(i2.imul(a3));
      }, P22.prototype.mul = function(i2, a3) {
        return this._verify2(i2, a3), this.imod(i2.mul(a3));
      }, P22.prototype.isqr = function(i2) {
        return this.imul(i2, i2.clone());
      }, P22.prototype.sqr = function(i2) {
        return this.mul(i2, i2);
      }, P22.prototype.sqrt = function(i2) {
        if (i2.isZero())
          return i2.clone();
        var a3 = this.m.andln(3);
        if (r2(a3 % 2 === 1), a3 === 3) {
          var h5 = this.m.add(new f4(1)).iushrn(2);
          return this.pow(i2, h5);
        }
        for (var s2 = this.m.subn(1), u3 = 0;!s2.isZero() && s2.andln(1) === 0; )
          u3++, s2.iushrn(1);
        r2(!s2.isZero());
        var c = new f4(1).toRed(this), b3 = c.redNeg(), l4 = this.m.subn(1).iushrn(1), n4 = this.m.bitLength();
        for (n4 = new f4(2 * n4 * n4).toRed(this);this.pow(n4, l4).cmp(b3) !== 0; )
          n4.redIAdd(b3);
        for (var d2 = this.pow(n4, s2), w2 = this.pow(i2, s2.addn(1).iushrn(1)), g2 = this.pow(i2, s2), _3 = u3;g2.cmp(c) !== 0; ) {
          for (var A6 = g2, R3 = 0;A6.cmp(c) !== 0; R3++)
            A6 = A6.redSqr();
          r2(R3 < _3);
          var I2 = this.pow(d2, new f4(1).iushln(_3 - R3 - 1));
          w2 = w2.redMul(I2), d2 = I2.redSqr(), g2 = g2.redMul(d2), _3 = R3;
        }
        return w2;
      }, P22.prototype.invm = function(i2) {
        var a3 = i2._invmp(this.m);
        return a3.negative !== 0 ? (a3.negative = 0, this.imod(a3).redNeg()) : this.imod(a3);
      }, P22.prototype.pow = function(i2, a3) {
        if (a3.isZero())
          return new f4(1).toRed(this);
        if (a3.cmpn(1) === 0)
          return i2.clone();
        var h5 = 4, s2 = new Array(1 << h5);
        s2[0] = new f4(1).toRed(this), s2[1] = i2;
        for (var u3 = 2;u3 < s2.length; u3++)
          s2[u3] = this.mul(s2[u3 - 1], i2);
        var c = s2[0], b3 = 0, l4 = 0, n4 = a3.bitLength() % 26;
        for (n4 === 0 && (n4 = 26), u3 = a3.length - 1;u3 >= 0; u3--) {
          for (var d2 = a3.words[u3], w2 = n4 - 1;w2 >= 0; w2--) {
            var g2 = d2 >> w2 & 1;
            if (c !== s2[0] && (c = this.sqr(c)), g2 === 0 && b3 === 0) {
              l4 = 0;
              continue;
            }
            b3 <<= 1, b3 |= g2, l4++, !(l4 !== h5 && (u3 !== 0 || w2 !== 0)) && (c = this.mul(c, s2[b3]), l4 = 0, b3 = 0);
          }
          n4 = 26;
        }
        return c;
      }, P22.prototype.convertTo = function(i2) {
        var a3 = i2.umod(this.m);
        return a3 === i2 ? a3.clone() : a3;
      }, P22.prototype.convertFrom = function(i2) {
        var a3 = i2.clone();
        return a3.red = null, a3;
      }, f4.mont = function(i2) {
        return new Se(i2);
      };
      function Se(v3) {
        P22.call(this, v3), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new f4(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
      }
      o2(Se, P22), Se.prototype.convertTo = function(i2) {
        return this.imod(i2.ushln(this.shift));
      }, Se.prototype.convertFrom = function(i2) {
        var a3 = this.imod(i2.mul(this.rinv));
        return a3.red = null, a3;
      }, Se.prototype.imul = function(i2, a3) {
        if (i2.isZero() || a3.isZero())
          return i2.words[0] = 0, i2.length = 1, i2;
        var h5 = i2.imul(a3), s2 = h5.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u3 = h5.isub(s2).iushrn(this.shift), c = u3;
        return u3.cmp(this.m) >= 0 ? c = u3.isub(this.m) : u3.cmpn(0) < 0 && (c = u3.iadd(this.m)), c._forceRed(this);
      }, Se.prototype.mul = function(i2, a3) {
        if (i2.isZero() || a3.isZero())
          return new f4(0)._forceRed(this);
        var h5 = i2.mul(a3), s2 = h5.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u3 = h5.isub(s2).iushrn(this.shift), c = u3;
        return u3.cmp(this.m) >= 0 ? c = u3.isub(this.m) : u3.cmpn(0) < 0 && (c = u3.iadd(this.m)), c._forceRed(this);
      }, Se.prototype.invm = function(i2) {
        var a3 = this.imod(i2._invmp(this.m).mul(this.r2));
        return a3._forceRed(this);
      };
    })(typeof Yu > "u" || Yu, Zm);
  });
  $m = T3(() => {});
  Es = T3((ZT, Qu) => {
    var Xu;
    Qu.exports = function(e22) {
      return Xu || (Xu = new Zi(null)), Xu.generate(e22);
    };
    function Zi(t2) {
      this.rand = t2;
    }
    Qu.exports.Rand = Zi;
    Zi.prototype.generate = function(e22) {
      return this._rand(e22);
    };
    Zi.prototype._rand = function(e22) {
      if (this.rand.getBytes)
        return this.rand.getBytes(e22);
      for (var r2 = new Uint8Array(e22), o2 = 0;o2 < r2.length; o2++)
        r2[o2] = this.rand.getByte();
      return r2;
    };
    if (typeof self == "object")
      self.crypto && self.crypto.getRandomValues ? Zi.prototype._rand = function(e22) {
        var r2 = new Uint8Array(e22);
        return self.crypto.getRandomValues(r2), r2;
      } : self.msCrypto && self.msCrypto.getRandomValues ? Zi.prototype._rand = function(e22) {
        var r2 = new Uint8Array(e22);
        return self.msCrypto.getRandomValues(r2), r2;
      } : typeof window == "object" && (Zi.prototype._rand = function() {
        throw new Error("Not implemented yet");
      });
    else
      try {
        if (Ju = $m(), typeof Ju.randomBytes != "function")
          throw new Error("Not supported");
        Zi.prototype._rand = function(e22) {
          return Ju.randomBytes(e22);
        };
      } catch {}
    var Ju;
  });
  el = T3((VT, Gm) => {
    var In = Vm(), Y9 = Es();
    function Tn(t2) {
      this.rand = t2 || new Y9.Rand;
    }
    Gm.exports = Tn;
    Tn.create = function(e22) {
      return new Tn(e22);
    };
    Tn.prototype._randbelow = function(e22) {
      var r2 = e22.bitLength(), o2 = Math.ceil(r2 / 8);
      do
        var f4 = new In(this.rand.generate(o2));
      while (f4.cmp(e22) >= 0);
      return f4;
    };
    Tn.prototype._randrange = function(e22, r2) {
      var o2 = r2.sub(e22);
      return e22.add(this._randbelow(o2));
    };
    Tn.prototype.test = function(e22, r2, o2) {
      var f4 = e22.bitLength(), p32 = In.mont(e22), m4 = new In(1).toRed(p32);
      r2 || (r2 = Math.max(1, f4 / 48 | 0));
      for (var y32 = e22.subn(1), M3 = 0;!y32.testn(M3); M3++)
        ;
      for (var x32 = e22.shrn(M3), S3 = y32.toRed(p32), E3 = true;r2 > 0; r2--) {
        var B5 = this._randrange(new In(2), y32);
        o2 && o2(B5);
        var q2 = B5.toRed(p32).redPow(x32);
        if (!(q2.cmp(m4) === 0 || q2.cmp(S3) === 0)) {
          for (var L32 = 1;L32 < M3; L32++) {
            if (q2 = q2.redSqr(), q2.cmp(m4) === 0)
              return false;
            if (q2.cmp(S3) === 0)
              break;
          }
          if (L32 === M3)
            return false;
        }
      }
      return E3;
    };
    Tn.prototype.getDivisor = function(e22, r2) {
      var o2 = e22.bitLength(), f4 = In.mont(e22), p32 = new In(1).toRed(f4);
      r2 || (r2 = Math.max(1, o2 / 48 | 0));
      for (var m4 = e22.subn(1), y32 = 0;!m4.testn(y32); y32++)
        ;
      for (var M3 = e22.shrn(y32), x32 = m4.toRed(f4);r2 > 0; r2--) {
        var S3 = this._randrange(new In(2), m4), E3 = e22.gcd(S3);
        if (E3.cmpn(1) !== 0)
          return E3;
        var B5 = S3.toRed(f4).redPow(M3);
        if (!(B5.cmp(p32) === 0 || B5.cmp(x32) === 0)) {
          for (var q2 = 1;q2 < y32; q2++) {
            if (B5 = B5.redSqr(), B5.cmp(p32) === 0)
              return B5.fromRed().subn(1).gcd(e22);
            if (B5.cmp(x32) === 0)
              break;
          }
          if (q2 === y32)
            return B5 = B5.redSqr(), B5.fromRed().subn(1).gcd(e22);
        }
      }
      return false;
    };
  });
  al = T3((JT, Jm) => {
    var X9 = on();
    Jm.exports = fl;
    fl.simpleSieve = il;
    fl.fermatTest = nl;
    var Ht = Gu(), J9 = new Ht(24), Q9 = el(), Ym = new Q9, eS = new Ht(1), rl = new Ht(2), tS = new Ht(5), $T = new Ht(16), GT = new Ht(8), rS = new Ht(10), iS = new Ht(3), YT = new Ht(7), nS = new Ht(11), Xm = new Ht(4), XT = new Ht(12), tl = null;
    function fS() {
      if (tl !== null)
        return tl;
      var t2 = 1048576, e22 = [];
      e22[0] = 2;
      for (var r2 = 1, o2 = 3;o2 < t2; o2 += 2) {
        for (var f4 = Math.ceil(Math.sqrt(o2)), p32 = 0;p32 < r2 && e22[p32] <= f4 && o2 % e22[p32] !== 0; p32++)
          ;
        r2 !== p32 && e22[p32] <= f4 || (e22[r2++] = o2);
      }
      return tl = e22, e22;
    }
    function il(t2) {
      for (var e22 = fS(), r2 = 0;r2 < e22.length; r2++)
        if (t2.modn(e22[r2]) === 0)
          return t2.cmpn(e22[r2]) === 0;
      return true;
    }
    function nl(t2) {
      var e22 = Ht.mont(t2);
      return rl.toRed(e22).redPow(t2.subn(1)).fromRed().cmpn(1) === 0;
    }
    function fl(t2, e22) {
      if (t2 < 16)
        return e22 === 2 || e22 === 5 ? new Ht([140, 123]) : new Ht([140, 39]);
      e22 = new Ht(e22);
      for (var r2, o2;; ) {
        for (r2 = new Ht(X9(Math.ceil(t2 / 8)));r2.bitLength() > t2; )
          r2.ishrn(1);
        if (r2.isEven() && r2.iadd(eS), r2.testn(1) || r2.iadd(rl), e22.cmp(rl)) {
          if (!e22.cmp(tS))
            for (;r2.mod(rS).cmp(iS); )
              r2.iadd(Xm);
        } else
          for (;r2.mod(J9).cmp(nS); )
            r2.iadd(Xm);
        if (o2 = r2.shrn(1), il(o2) && il(r2) && nl(o2) && nl(r2) && Ym.test(o2) && Ym.test(r2))
          return r2;
      }
    }
  });
  Qm = T3((QT, aS) => {
    aS.exports = { modp1: { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff" }, modp2: { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff" }, modp5: { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff" }, modp14: { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff" }, modp15: { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff" }, modp16: { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff" }, modp17: { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff" }, modp18: { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff" } };
  });
  ig = T3((ek, rg) => {
    var yr = Gu(), oS = el(), eg = new oS, sS = new yr(24), hS = new yr(11), uS = new yr(10), lS = new yr(3), dS = new yr(7), tg = al(), cS = on();
    rg.exports = Si;
    function pS(t2, e22) {
      return e22 = e22 || "utf8", Buffer.isBuffer(t2) || (t2 = new Buffer(t2, e22)), this._pub = new yr(t2), this;
    }
    function vS(t2, e22) {
      return e22 = e22 || "utf8", Buffer.isBuffer(t2) || (t2 = new Buffer(t2, e22)), this._priv = new yr(t2), this;
    }
    var As = {};
    function bS(t2, e22) {
      var r2 = e22.toString("hex"), o2 = [r2, t2.toString(16)].join("_");
      if (o2 in As)
        return As[o2];
      var f4 = 0;
      if (t2.isEven() || !tg.simpleSieve || !tg.fermatTest(t2) || !eg.test(t2))
        return f4 += 1, r2 === "02" || r2 === "05" ? f4 += 8 : f4 += 4, As[o2] = f4, f4;
      eg.test(t2.shrn(1)) || (f4 += 2);
      var p32;
      switch (r2) {
        case "02":
          t2.mod(sS).cmp(hS) && (f4 += 8);
          break;
        case "05":
          p32 = t2.mod(uS), p32.cmp(lS) && p32.cmp(dS) && (f4 += 8);
          break;
        default:
          f4 += 4;
      }
      return As[o2] = f4, f4;
    }
    function Si(t2, e22, r2) {
      this.setGenerator(e22), this.__prime = new yr(t2), this._prime = yr.mont(this.__prime), this._primeLen = t2.length, this._pub = undefined, this._priv = undefined, this._primeCode = undefined, r2 ? (this.setPublicKey = pS, this.setPrivateKey = vS) : this._primeCode = 8;
    }
    Object.defineProperty(Si.prototype, "verifyError", { enumerable: true, get: function() {
      return typeof this._primeCode != "number" && (this._primeCode = bS(this.__prime, this.__gen)), this._primeCode;
    } });
    Si.prototype.generateKeys = function() {
      return this._priv || (this._priv = new yr(cS(this._primeLen))), this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed(), this.getPublicKey();
    };
    Si.prototype.computeSecret = function(t2) {
      t2 = new yr(t2), t2 = t2.toRed(this._prime);
      var e22 = t2.redPow(this._priv).fromRed(), r2 = new Buffer(e22.toArray()), o2 = this.getPrime();
      if (r2.length < o2.length) {
        var f4 = new Buffer(o2.length - r2.length);
        f4.fill(0), r2 = Buffer.concat([f4, r2]);
      }
      return r2;
    };
    Si.prototype.getPublicKey = function(e22) {
      return Rs(this._pub, e22);
    };
    Si.prototype.getPrivateKey = function(e22) {
      return Rs(this._priv, e22);
    };
    Si.prototype.getPrime = function(t2) {
      return Rs(this.__prime, t2);
    };
    Si.prototype.getGenerator = function(t2) {
      return Rs(this._gen, t2);
    };
    Si.prototype.setGenerator = function(t2, e22) {
      return e22 = e22 || "utf8", Buffer.isBuffer(t2) || (t2 = new Buffer(t2, e22)), this.__gen = t2, this._gen = new yr(t2), this;
    };
    function Rs(t2, e22) {
      var r2 = new Buffer(t2.toArray());
      return e22 ? r2.toString(e22) : r2;
    }
  });
  ag = T3((_f) => {
    var mS = al(), ng = Qm(), ol = ig();
    function gS(t2) {
      var e22 = new Buffer(ng[t2].prime, "hex"), r2 = new Buffer(ng[t2].gen, "hex");
      return new ol(e22, r2);
    }
    var yS = { binary: true, hex: true, base64: true };
    function fg(t2, e22, r2, o2) {
      return Buffer.isBuffer(e22) || yS[e22] === undefined ? fg(t2, "binary", e22, r2) : (e22 = e22 || "binary", o2 = o2 || "binary", r2 = r2 || new Buffer([2]), Buffer.isBuffer(r2) || (r2 = new Buffer(r2, o2)), typeof t2 == "number" ? new ol(mS(t2, r2), r2, true) : (Buffer.isBuffer(t2) || (t2 = new Buffer(t2, e22)), new ol(t2, r2, true)));
    }
    _f.DiffieHellmanGroup = _f.createDiffieHellmanGroup = _f.getDiffieHellman = gS;
    _f.createDiffieHellman = _f.DiffieHellman = fg;
  });
  sl = T3((rk, og) => {
    og.exports = ki().EventEmitter;
  });
  lg = T3((ik, ug) => {
    function sg(t2, e22) {
      var r2 = Object.keys(t2);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(t2);
        e22 && (o2 = o2.filter(function(f4) {
          return Object.getOwnPropertyDescriptor(t2, f4).enumerable;
        })), r2.push.apply(r2, o2);
      }
      return r2;
    }
    function wS(t2) {
      for (var e22 = 1;e22 < arguments.length; e22++) {
        var r2 = arguments[e22] != null ? arguments[e22] : {};
        e22 % 2 ? sg(Object(r2), true).forEach(function(o2) {
          MS(t2, o2, r2[o2]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t2, Object.getOwnPropertyDescriptors(r2)) : sg(Object(r2)).forEach(function(o2) {
          Object.defineProperty(t2, o2, Object.getOwnPropertyDescriptor(r2, o2));
        });
      }
      return t2;
    }
    function MS(t2, e22, r2) {
      return e22 in t2 ? Object.defineProperty(t2, e22, { value: r2, enumerable: true, configurable: true, writable: true }) : t2[e22] = r2, t2;
    }
    function _S(t2, e22) {
      if (!(t2 instanceof e22))
        throw new TypeError("Cannot call a class as a function");
    }
    function hg(t2, e22) {
      for (var r2 = 0;r2 < e22.length; r2++) {
        var o2 = e22[r2];
        o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(t2, o2.key, o2);
      }
    }
    function xS(t2, e22, r2) {
      return e22 && hg(t2.prototype, e22), r2 && hg(t2, r2), t2;
    }
    var SS = Ut(), Bs = SS.Buffer, ES = $f(), hl = ES.inspect, AS = hl && hl.custom || "inspect";
    function RS(t2, e22, r2) {
      Bs.prototype.copy.call(t2, e22, r2);
    }
    ug.exports = function() {
      function t2() {
        _S(this, t2), this.head = null, this.tail = null, this.length = 0;
      }
      return xS(t2, [{ key: "push", value: function(r2) {
        var o2 = { data: r2, next: null };
        this.length > 0 ? this.tail.next = o2 : this.head = o2, this.tail = o2, ++this.length;
      } }, { key: "unshift", value: function(r2) {
        var o2 = { data: r2, next: this.head };
        this.length === 0 && (this.tail = o2), this.head = o2, ++this.length;
      } }, { key: "shift", value: function() {
        if (this.length !== 0) {
          var r2 = this.head.data;
          return this.length === 1 ? this.head = this.tail = null : this.head = this.head.next, --this.length, r2;
        }
      } }, { key: "clear", value: function() {
        this.head = this.tail = null, this.length = 0;
      } }, { key: "join", value: function(r2) {
        if (this.length === 0)
          return "";
        for (var o2 = this.head, f4 = "" + o2.data;o2 = o2.next; )
          f4 += r2 + o2.data;
        return f4;
      } }, { key: "concat", value: function(r2) {
        if (this.length === 0)
          return Bs.alloc(0);
        for (var o2 = Bs.allocUnsafe(r2 >>> 0), f4 = this.head, p32 = 0;f4; )
          RS(f4.data, o2, p32), p32 += f4.data.length, f4 = f4.next;
        return o2;
      } }, { key: "consume", value: function(r2, o2) {
        var f4;
        return r2 < this.head.data.length ? (f4 = this.head.data.slice(0, r2), this.head.data = this.head.data.slice(r2)) : r2 === this.head.data.length ? f4 = this.shift() : f4 = o2 ? this._getString(r2) : this._getBuffer(r2), f4;
      } }, { key: "first", value: function() {
        return this.head.data;
      } }, { key: "_getString", value: function(r2) {
        var o2 = this.head, f4 = 1, p32 = o2.data;
        for (r2 -= p32.length;o2 = o2.next; ) {
          var m4 = o2.data, y32 = r2 > m4.length ? m4.length : r2;
          if (y32 === m4.length ? p32 += m4 : p32 += m4.slice(0, r2), r2 -= y32, r2 === 0) {
            y32 === m4.length ? (++f4, o2.next ? this.head = o2.next : this.head = this.tail = null) : (this.head = o2, o2.data = m4.slice(y32));
            break;
          }
          ++f4;
        }
        return this.length -= f4, p32;
      } }, { key: "_getBuffer", value: function(r2) {
        var o2 = Bs.allocUnsafe(r2), f4 = this.head, p32 = 1;
        for (f4.data.copy(o2), r2 -= f4.data.length;f4 = f4.next; ) {
          var m4 = f4.data, y32 = r2 > m4.length ? m4.length : r2;
          if (m4.copy(o2, o2.length - r2, 0, y32), r2 -= y32, r2 === 0) {
            y32 === m4.length ? (++p32, f4.next ? this.head = f4.next : this.head = this.tail = null) : (this.head = f4, f4.data = m4.slice(y32));
            break;
          }
          ++p32;
        }
        return this.length -= p32, o2;
      } }, { key: AS, value: function(r2, o2) {
        return hl(this, wS({}, o2, { depth: 0, customInspect: false }));
      } }]), t2;
    }();
  });
  ll = T3((nk, cg) => {
    function BS(t2, e22) {
      var r2 = this, o2 = this._readableState && this._readableState.destroyed, f4 = this._writableState && this._writableState.destroyed;
      return o2 || f4 ? (e22 ? e22(t2) : t2 && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = true, process.nextTick(ul, this, t2)) : process.nextTick(ul, this, t2)), this) : (this._readableState && (this._readableState.destroyed = true), this._writableState && (this._writableState.destroyed = true), this._destroy(t2 || null, function(p32) {
        !e22 && p32 ? r2._writableState ? r2._writableState.errorEmitted ? process.nextTick(qs, r2) : (r2._writableState.errorEmitted = true, process.nextTick(dg, r2, p32)) : process.nextTick(dg, r2, p32) : e22 ? (process.nextTick(qs, r2), e22(p32)) : process.nextTick(qs, r2);
      }), this);
    }
    function dg(t2, e22) {
      ul(t2, e22), qs(t2);
    }
    function qs(t2) {
      t2._writableState && !t2._writableState.emitClose || t2._readableState && !t2._readableState.emitClose || t2.emit("close");
    }
    function qS() {
      this._readableState && (this._readableState.destroyed = false, this._readableState.reading = false, this._readableState.ended = false, this._readableState.endEmitted = false), this._writableState && (this._writableState.destroyed = false, this._writableState.ended = false, this._writableState.ending = false, this._writableState.finalCalled = false, this._writableState.prefinished = false, this._writableState.finished = false, this._writableState.errorEmitted = false);
    }
    function ul(t2, e22) {
      t2.emit("error", e22);
    }
    function IS(t2, e22) {
      var { _readableState: r2, _writableState: o2 } = t2;
      r2 && r2.autoDestroy || o2 && o2.autoDestroy ? t2.destroy(e22) : t2.emit("error", e22);
    }
    cg.exports = { destroy: BS, undestroy: qS, errorOrDestroy: IS };
  });
  kn = T3((fk, bg) => {
    function TS(t2, e22) {
      t2.prototype = Object.create(e22.prototype), t2.prototype.constructor = t2, t2.__proto__ = e22;
    }
    var vg = {};
    function wr(t2, e22, r2) {
      r2 || (r2 = Error);
      function o2(p32, m4, y32) {
        return typeof e22 == "string" ? e22 : e22(p32, m4, y32);
      }
      var f4 = function(p32) {
        TS(m4, p32);
        function m4(y32, M3, x32) {
          return p32.call(this, o2(y32, M3, x32)) || this;
        }
        return m4;
      }(r2);
      f4.prototype.name = r2.name, f4.prototype.code = t2, vg[t2] = f4;
    }
    function pg(t2, e22) {
      if (Array.isArray(t2)) {
        var r2 = t2.length;
        return t2 = t2.map(function(o2) {
          return String(o2);
        }), r2 > 2 ? "one of ".concat(e22, " ").concat(t2.slice(0, r2 - 1).join(", "), ", or ") + t2[r2 - 1] : r2 === 2 ? "one of ".concat(e22, " ").concat(t2[0], " or ").concat(t2[1]) : "of ".concat(e22, " ").concat(t2[0]);
      } else
        return "of ".concat(e22, " ").concat(String(t2));
    }
    function kS(t2, e22, r2) {
      return t2.substr(!r2 || r2 < 0 ? 0 : +r2, e22.length) === e22;
    }
    function LS(t2, e22, r2) {
      return (r2 === undefined || r2 > t2.length) && (r2 = t2.length), t2.substring(r2 - e22.length, r2) === e22;
    }
    function NS(t2, e22, r2) {
      return typeof r2 != "number" && (r2 = 0), r2 + e22.length > t2.length ? false : t2.indexOf(e22, r2) !== -1;
    }
    wr("ERR_INVALID_OPT_VALUE", function(t2, e22) {
      return 'The value "' + e22 + '" is invalid for option "' + t2 + '"';
    }, TypeError);
    wr("ERR_INVALID_ARG_TYPE", function(t2, e22, r2) {
      var o2;
      typeof e22 == "string" && kS(e22, "not ") ? (o2 = "must not be", e22 = e22.replace(/^not /, "")) : o2 = "must be";
      var f4;
      if (LS(t2, " argument"))
        f4 = "The ".concat(t2, " ").concat(o2, " ").concat(pg(e22, "type"));
      else {
        var p32 = NS(t2, ".") ? "property" : "argument";
        f4 = 'The "'.concat(t2, '" ').concat(p32, " ").concat(o2, " ").concat(pg(e22, "type"));
      }
      return f4 += ". Received type ".concat(typeof r2), f4;
    }, TypeError);
    wr("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
    wr("ERR_METHOD_NOT_IMPLEMENTED", function(t2) {
      return "The " + t2 + " method is not implemented";
    });
    wr("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
    wr("ERR_STREAM_DESTROYED", function(t2) {
      return "Cannot call " + t2 + " after a stream was destroyed";
    });
    wr("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
    wr("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
    wr("ERR_STREAM_WRITE_AFTER_END", "write after end");
    wr("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
    wr("ERR_UNKNOWN_ENCODING", function(t2) {
      return "Unknown encoding: " + t2;
    }, TypeError);
    wr("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
    bg.exports.codes = vg;
  });
  dl = T3((ak, mg) => {
    var DS = kn().codes.ERR_INVALID_OPT_VALUE;
    function PS(t2, e22, r2) {
      return t2.highWaterMark != null ? t2.highWaterMark : e22 ? t2[r2] : null;
    }
    function CS(t2, e22, r2, o2) {
      var f4 = PS(e22, o2, r2);
      if (f4 != null) {
        if (!(isFinite(f4) && Math.floor(f4) === f4) || f4 < 0) {
          var p32 = o2 ? r2 : "highWaterMark";
          throw new DS(p32, f4);
        }
        return Math.floor(f4);
      }
      return t2.objectMode ? 16 : 16 * 1024;
    }
    mg.exports = { getHighWaterMark: CS };
  });
  vl = T3((ok, xg) => {
    xg.exports = ht;
    function yg(t2) {
      var e22 = this;
      this.next = null, this.entry = null, this.finish = function() {
        uE(e22, t2);
      };
    }
    var xf;
    ht.WritableState = ka;
    var OS = { deprecate: $02() }, wg = sl(), Ts = Ut().Buffer, FS = global.Uint8Array || function() {};
    function US(t2) {
      return Ts.from(t2);
    }
    function zS(t2) {
      return Ts.isBuffer(t2) || t2 instanceof FS;
    }
    var pl = ll(), HS = dl(), WS = HS.getHighWaterMark, Vi = kn().codes, KS = Vi.ERR_INVALID_ARG_TYPE, jS = Vi.ERR_METHOD_NOT_IMPLEMENTED, ZS = Vi.ERR_MULTIPLE_CALLBACK, VS = Vi.ERR_STREAM_CANNOT_PIPE, $S = Vi.ERR_STREAM_DESTROYED, GS = Vi.ERR_STREAM_NULL_VALUES, YS = Vi.ERR_STREAM_WRITE_AFTER_END, XS = Vi.ERR_UNKNOWN_ENCODING, Sf = pl.errorOrDestroy;
    Ie()(ht, wg);
    function JS() {}
    function ka(t2, e22, r2) {
      xf = xf || Ln(), t2 = t2 || {}, typeof r2 != "boolean" && (r2 = e22 instanceof xf), this.objectMode = !!t2.objectMode, r2 && (this.objectMode = this.objectMode || !!t2.writableObjectMode), this.highWaterMark = WS(this, t2, "writableHighWaterMark", r2), this.finalCalled = false, this.needDrain = false, this.ending = false, this.ended = false, this.finished = false, this.destroyed = false;
      var o2 = t2.decodeStrings === false;
      this.decodeStrings = !o2, this.defaultEncoding = t2.defaultEncoding || "utf8", this.length = 0, this.writing = false, this.corked = 0, this.sync = true, this.bufferProcessing = false, this.onwrite = function(f4) {
        fE(e22, f4);
      }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = false, this.errorEmitted = false, this.emitClose = t2.emitClose !== false, this.autoDestroy = !!t2.autoDestroy, this.bufferedRequestCount = 0, this.corkedRequestsFree = new yg(this);
    }
    ka.prototype.getBuffer = function() {
      for (var e22 = this.bufferedRequest, r2 = [];e22; )
        r2.push(e22), e22 = e22.next;
      return r2;
    };
    (function() {
      try {
        Object.defineProperty(ka.prototype, "buffer", { get: OS.deprecate(function() {
          return this.getBuffer();
        }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003") });
      } catch {}
    })();
    var Is;
    typeof Symbol == "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] == "function" ? (Is = Function.prototype[Symbol.hasInstance], Object.defineProperty(ht, Symbol.hasInstance, { value: function(e22) {
      return Is.call(this, e22) ? true : this !== ht ? false : e22 && e22._writableState instanceof ka;
    } })) : Is = function(e22) {
      return e22 instanceof this;
    };
    function ht(t2) {
      xf = xf || Ln();
      var e22 = this instanceof xf;
      if (!e22 && !Is.call(ht, this))
        return new ht(t2);
      this._writableState = new ka(t2, this, e22), this.writable = true, t2 && (typeof t2.write == "function" && (this._write = t2.write), typeof t2.writev == "function" && (this._writev = t2.writev), typeof t2.destroy == "function" && (this._destroy = t2.destroy), typeof t2.final == "function" && (this._final = t2.final)), wg.call(this);
    }
    ht.prototype.pipe = function() {
      Sf(this, new VS);
    };
    function QS(t2, e22) {
      var r2 = new YS;
      Sf(t2, r2), process.nextTick(e22, r2);
    }
    function eE(t2, e22, r2, o2) {
      var f4;
      return r2 === null ? f4 = new GS : typeof r2 != "string" && !e22.objectMode && (f4 = new KS("chunk", ["string", "Buffer"], r2)), f4 ? (Sf(t2, f4), process.nextTick(o2, f4), false) : true;
    }
    ht.prototype.write = function(t2, e22, r2) {
      var o2 = this._writableState, f4 = false, p32 = !o2.objectMode && zS(t2);
      return p32 && !Ts.isBuffer(t2) && (t2 = US(t2)), typeof e22 == "function" && (r2 = e22, e22 = null), p32 ? e22 = "buffer" : e22 || (e22 = o2.defaultEncoding), typeof r2 != "function" && (r2 = JS), o2.ending ? QS(this, r2) : (p32 || eE(this, o2, t2, r2)) && (o2.pendingcb++, f4 = rE(this, o2, p32, t2, e22, r2)), f4;
    };
    ht.prototype.cork = function() {
      this._writableState.corked++;
    };
    ht.prototype.uncork = function() {
      var t2 = this._writableState;
      t2.corked && (t2.corked--, !t2.writing && !t2.corked && !t2.bufferProcessing && t2.bufferedRequest && Mg(this, t2));
    };
    ht.prototype.setDefaultEncoding = function(e22) {
      if (typeof e22 == "string" && (e22 = e22.toLowerCase()), !(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((e22 + "").toLowerCase()) > -1))
        throw new XS(e22);
      return this._writableState.defaultEncoding = e22, this;
    };
    Object.defineProperty(ht.prototype, "writableBuffer", { enumerable: false, get: function() {
      return this._writableState && this._writableState.getBuffer();
    } });
    function tE(t2, e22, r2) {
      return !t2.objectMode && t2.decodeStrings !== false && typeof e22 == "string" && (e22 = Ts.from(e22, r2)), e22;
    }
    Object.defineProperty(ht.prototype, "writableHighWaterMark", { enumerable: false, get: function() {
      return this._writableState.highWaterMark;
    } });
    function rE(t2, e22, r2, o2, f4, p32) {
      if (!r2) {
        var m4 = tE(e22, o2, f4);
        o2 !== m4 && (r2 = true, f4 = "buffer", o2 = m4);
      }
      var y32 = e22.objectMode ? 1 : o2.length;
      e22.length += y32;
      var M3 = e22.length < e22.highWaterMark;
      if (M3 || (e22.needDrain = true), e22.writing || e22.corked) {
        var x32 = e22.lastBufferedRequest;
        e22.lastBufferedRequest = { chunk: o2, encoding: f4, isBuf: r2, callback: p32, next: null }, x32 ? x32.next = e22.lastBufferedRequest : e22.bufferedRequest = e22.lastBufferedRequest, e22.bufferedRequestCount += 1;
      } else
        cl(t2, e22, false, y32, o2, f4, p32);
      return M3;
    }
    function cl(t2, e22, r2, o2, f4, p32, m4) {
      e22.writelen = o2, e22.writecb = m4, e22.writing = true, e22.sync = true, e22.destroyed ? e22.onwrite(new $S("write")) : r2 ? t2._writev(f4, e22.onwrite) : t2._write(f4, p32, e22.onwrite), e22.sync = false;
    }
    function iE(t2, e22, r2, o2, f4) {
      --e22.pendingcb, r2 ? (process.nextTick(f4, o2), process.nextTick(Ta, t2, e22), t2._writableState.errorEmitted = true, Sf(t2, o2)) : (f4(o2), t2._writableState.errorEmitted = true, Sf(t2, o2), Ta(t2, e22));
    }
    function nE(t2) {
      t2.writing = false, t2.writecb = null, t2.length -= t2.writelen, t2.writelen = 0;
    }
    function fE(t2, e22) {
      var r2 = t2._writableState, o2 = r2.sync, f4 = r2.writecb;
      if (typeof f4 != "function")
        throw new ZS;
      if (nE(r2), e22)
        iE(t2, r2, o2, e22, f4);
      else {
        var p32 = _g(r2) || t2.destroyed;
        !p32 && !r2.corked && !r2.bufferProcessing && r2.bufferedRequest && Mg(t2, r2), o2 ? process.nextTick(gg, t2, r2, p32, f4) : gg(t2, r2, p32, f4);
      }
    }
    function gg(t2, e22, r2, o2) {
      r2 || aE(t2, e22), e22.pendingcb--, o2(), Ta(t2, e22);
    }
    function aE(t2, e22) {
      e22.length === 0 && e22.needDrain && (e22.needDrain = false, t2.emit("drain"));
    }
    function Mg(t2, e22) {
      e22.bufferProcessing = true;
      var r2 = e22.bufferedRequest;
      if (t2._writev && r2 && r2.next) {
        var o2 = e22.bufferedRequestCount, f4 = new Array(o2), p32 = e22.corkedRequestsFree;
        p32.entry = r2;
        for (var m4 = 0, y32 = true;r2; )
          f4[m4] = r2, r2.isBuf || (y32 = false), r2 = r2.next, m4 += 1;
        f4.allBuffers = y32, cl(t2, e22, true, e22.length, f4, "", p32.finish), e22.pendingcb++, e22.lastBufferedRequest = null, p32.next ? (e22.corkedRequestsFree = p32.next, p32.next = null) : e22.corkedRequestsFree = new yg(e22), e22.bufferedRequestCount = 0;
      } else {
        for (;r2; ) {
          var { chunk: M3, encoding: x32, callback: S3 } = r2, E3 = e22.objectMode ? 1 : M3.length;
          if (cl(t2, e22, false, E3, M3, x32, S3), r2 = r2.next, e22.bufferedRequestCount--, e22.writing)
            break;
        }
        r2 === null && (e22.lastBufferedRequest = null);
      }
      e22.bufferedRequest = r2, e22.bufferProcessing = false;
    }
    ht.prototype._write = function(t2, e22, r2) {
      r2(new jS("_write()"));
    };
    ht.prototype._writev = null;
    ht.prototype.end = function(t2, e22, r2) {
      var o2 = this._writableState;
      return typeof t2 == "function" ? (r2 = t2, t2 = null, e22 = null) : typeof e22 == "function" && (r2 = e22, e22 = null), t2 != null && this.write(t2, e22), o2.corked && (o2.corked = 1, this.uncork()), o2.ending || hE(this, o2, r2), this;
    };
    Object.defineProperty(ht.prototype, "writableLength", { enumerable: false, get: function() {
      return this._writableState.length;
    } });
    function _g(t2) {
      return t2.ending && t2.length === 0 && t2.bufferedRequest === null && !t2.finished && !t2.writing;
    }
    function oE(t2, e22) {
      t2._final(function(r2) {
        e22.pendingcb--, r2 && Sf(t2, r2), e22.prefinished = true, t2.emit("prefinish"), Ta(t2, e22);
      });
    }
    function sE(t2, e22) {
      !e22.prefinished && !e22.finalCalled && (typeof t2._final == "function" && !e22.destroyed ? (e22.pendingcb++, e22.finalCalled = true, process.nextTick(oE, t2, e22)) : (e22.prefinished = true, t2.emit("prefinish")));
    }
    function Ta(t2, e22) {
      var r2 = _g(e22);
      if (r2 && (sE(t2, e22), e22.pendingcb === 0 && (e22.finished = true, t2.emit("finish"), e22.autoDestroy))) {
        var o2 = t2._readableState;
        (!o2 || o2.autoDestroy && o2.endEmitted) && t2.destroy();
      }
      return r2;
    }
    function hE(t2, e22, r2) {
      e22.ending = true, Ta(t2, e22), r2 && (e22.finished ? process.nextTick(r2) : t2.once("finish", r2)), e22.ended = true, t2.writable = false;
    }
    function uE(t2, e22, r2) {
      var o2 = t2.entry;
      for (t2.entry = null;o2; ) {
        var f4 = o2.callback;
        e22.pendingcb--, f4(r2), o2 = o2.next;
      }
      e22.corkedRequestsFree.next = t2;
    }
    Object.defineProperty(ht.prototype, "destroyed", { enumerable: false, get: function() {
      return this._writableState === undefined ? false : this._writableState.destroyed;
    }, set: function(e22) {
      !this._writableState || (this._writableState.destroyed = e22);
    } });
    ht.prototype.destroy = pl.destroy;
    ht.prototype._undestroy = pl.undestroy;
    ht.prototype._destroy = function(t2, e22) {
      e22(t2);
    };
  });
  Ln = T3((sk, Eg) => {
    var lE = Object.keys || function(t2) {
      var e22 = [];
      for (var r2 in t2)
        e22.push(r2);
      return e22;
    };
    Eg.exports = ti;
    var Sg = gl(), ml = vl();
    Ie()(ti, Sg);
    for (bl = lE(ml.prototype), ks = 0;ks < bl.length; ks++)
      Ls = bl[ks], ti.prototype[Ls] || (ti.prototype[Ls] = ml.prototype[Ls]);
    var bl, Ls, ks;
    function ti(t2) {
      if (!(this instanceof ti))
        return new ti(t2);
      Sg.call(this, t2), ml.call(this, t2), this.allowHalfOpen = true, t2 && (t2.readable === false && (this.readable = false), t2.writable === false && (this.writable = false), t2.allowHalfOpen === false && (this.allowHalfOpen = false, this.once("end", dE)));
    }
    Object.defineProperty(ti.prototype, "writableHighWaterMark", { enumerable: false, get: function() {
      return this._writableState.highWaterMark;
    } });
    Object.defineProperty(ti.prototype, "writableBuffer", { enumerable: false, get: function() {
      return this._writableState && this._writableState.getBuffer();
    } });
    Object.defineProperty(ti.prototype, "writableLength", { enumerable: false, get: function() {
      return this._writableState.length;
    } });
    function dE() {
      this._writableState.ended || process.nextTick(cE, this);
    }
    function cE(t2) {
      t2.end();
    }
    Object.defineProperty(ti.prototype, "destroyed", { enumerable: false, get: function() {
      return this._readableState === undefined || this._writableState === undefined ? false : this._readableState.destroyed && this._writableState.destroyed;
    }, set: function(e22) {
      this._readableState === undefined || this._writableState === undefined || (this._readableState.destroyed = e22, this._writableState.destroyed = e22);
    } });
  });
  Ns = T3((hk, Bg) => {
    var Ag = kn().codes.ERR_STREAM_PREMATURE_CLOSE;
    function pE(t2) {
      var e22 = false;
      return function() {
        if (!e22) {
          e22 = true;
          for (var r2 = arguments.length, o2 = new Array(r2), f4 = 0;f4 < r2; f4++)
            o2[f4] = arguments[f4];
          t2.apply(this, o2);
        }
      };
    }
    function vE() {}
    function bE(t2) {
      return t2.setHeader && typeof t2.abort == "function";
    }
    function Rg(t2, e22, r2) {
      if (typeof e22 == "function")
        return Rg(t2, null, e22);
      e22 || (e22 = {}), r2 = pE(r2 || vE);
      var o2 = e22.readable || e22.readable !== false && t2.readable, f4 = e22.writable || e22.writable !== false && t2.writable, p32 = function() {
        t2.writable || y32();
      }, m4 = t2._writableState && t2._writableState.finished, y32 = function() {
        f4 = false, m4 = true, o2 || r2.call(t2);
      }, M3 = t2._readableState && t2._readableState.endEmitted, x32 = function() {
        o2 = false, M3 = true, f4 || r2.call(t2);
      }, S3 = function(L32) {
        r2.call(t2, L32);
      }, E3 = function() {
        var L32;
        if (o2 && !M3)
          return (!t2._readableState || !t2._readableState.ended) && (L32 = new Ag), r2.call(t2, L32);
        if (f4 && !m4)
          return (!t2._writableState || !t2._writableState.ended) && (L32 = new Ag), r2.call(t2, L32);
      }, B5 = function() {
        t2.req.on("finish", y32);
      };
      return bE(t2) ? (t2.on("complete", y32), t2.on("abort", E3), t2.req ? B5() : t2.on("request", B5)) : f4 && !t2._writableState && (t2.on("end", p32), t2.on("close", p32)), t2.on("end", x32), t2.on("finish", y32), e22.error !== false && t2.on("error", S3), t2.on("close", E3), function() {
        t2.removeListener("complete", y32), t2.removeListener("abort", E3), t2.removeListener("request", B5), t2.req && t2.req.removeListener("finish", y32), t2.removeListener("end", p32), t2.removeListener("close", p32), t2.removeListener("finish", y32), t2.removeListener("end", x32), t2.removeListener("error", S3), t2.removeListener("close", E3);
      };
    }
    Bg.exports = Rg;
  });
  Ig = T3((uk, qg) => {
    var Ds;
    function $i(t2, e22, r2) {
      return e22 in t2 ? Object.defineProperty(t2, e22, { value: r2, enumerable: true, configurable: true, writable: true }) : t2[e22] = r2, t2;
    }
    var mE = Ns(), Gi = Symbol("lastResolve"), Nn = Symbol("lastReject"), La = Symbol("error"), Ps = Symbol("ended"), Dn = Symbol("lastPromise"), yl = Symbol("handlePromise"), Pn = Symbol("stream");
    function Yi(t2, e22) {
      return { value: t2, done: e22 };
    }
    function gE(t2) {
      var e22 = t2[Gi];
      if (e22 !== null) {
        var r2 = t2[Pn].read();
        r2 !== null && (t2[Dn] = null, t2[Gi] = null, t2[Nn] = null, e22(Yi(r2, false)));
      }
    }
    function yE(t2) {
      process.nextTick(gE, t2);
    }
    function wE(t2, e22) {
      return function(r2, o2) {
        t2.then(function() {
          if (e22[Ps]) {
            r2(Yi(undefined, true));
            return;
          }
          e22[yl](r2, o2);
        }, o2);
      };
    }
    var ME = Object.getPrototypeOf(function() {}), _E = Object.setPrototypeOf((Ds = { get stream() {
      return this[Pn];
    }, next: function() {
      var e22 = this, r2 = this[La];
      if (r2 !== null)
        return Promise.reject(r2);
      if (this[Ps])
        return Promise.resolve(Yi(undefined, true));
      if (this[Pn].destroyed)
        return new Promise(function(m4, y32) {
          process.nextTick(function() {
            e22[La] ? y32(e22[La]) : m4(Yi(undefined, true));
          });
        });
      var o2 = this[Dn], f4;
      if (o2)
        f4 = new Promise(wE(o2, this));
      else {
        var p32 = this[Pn].read();
        if (p32 !== null)
          return Promise.resolve(Yi(p32, false));
        f4 = new Promise(this[yl]);
      }
      return this[Dn] = f4, f4;
    } }, $i(Ds, Symbol.asyncIterator, function() {
      return this;
    }), $i(Ds, "return", function() {
      var e22 = this;
      return new Promise(function(r2, o2) {
        e22[Pn].destroy(null, function(f4) {
          if (f4) {
            o2(f4);
            return;
          }
          r2(Yi(undefined, true));
        });
      });
    }), Ds), ME), xE = function(e22) {
      var r2, o2 = Object.create(_E, (r2 = {}, $i(r2, Pn, { value: e22, writable: true }), $i(r2, Gi, { value: null, writable: true }), $i(r2, Nn, { value: null, writable: true }), $i(r2, La, { value: null, writable: true }), $i(r2, Ps, { value: e22._readableState.endEmitted, writable: true }), $i(r2, yl, { value: function(p32, m4) {
        var y32 = o2[Pn].read();
        y32 ? (o2[Dn] = null, o2[Gi] = null, o2[Nn] = null, p32(Yi(y32, false))) : (o2[Gi] = p32, o2[Nn] = m4);
      }, writable: true }), r2));
      return o2[Dn] = null, mE(e22, function(f4) {
        if (f4 && f4.code !== "ERR_STREAM_PREMATURE_CLOSE") {
          var p32 = o2[Nn];
          p32 !== null && (o2[Dn] = null, o2[Gi] = null, o2[Nn] = null, p32(f4)), o2[La] = f4;
          return;
        }
        var m4 = o2[Gi];
        m4 !== null && (o2[Dn] = null, o2[Gi] = null, o2[Nn] = null, m4(Yi(undefined, true))), o2[Ps] = true;
      }), e22.on("readable", yE.bind(null, o2)), o2;
    };
    qg.exports = xE;
  });
  kg = T3((lk, Tg) => {
    Tg.exports = function() {
      throw new Error("Readable.from is not available in the browser");
    };
  });
  gl = T3((ck, Hg) => {
    Hg.exports = Oe;
    var Ef;
    Oe.ReadableState = Pg;
    var dk = ki().EventEmitter, Dg = function(e22, r2) {
      return e22.listeners(r2).length;
    }, Da = sl(), Cs = Ut().Buffer, SE = global.Uint8Array || function() {};
    function EE(t2) {
      return Cs.from(t2);
    }
    function AE(t2) {
      return Cs.isBuffer(t2) || t2 instanceof SE;
    }
    var wl = $f(), De;
    wl && wl.debuglog ? De = wl.debuglog("stream") : De = function() {};
    var RE = lg(), Rl = ll(), BE = dl(), qE = BE.getHighWaterMark, Os = kn().codes, IE = Os.ERR_INVALID_ARG_TYPE, TE = Os.ERR_STREAM_PUSH_AFTER_EOF, kE = Os.ERR_METHOD_NOT_IMPLEMENTED, LE = Os.ERR_STREAM_UNSHIFT_AFTER_END_EVENT, Af, Ml, _l;
    Ie()(Oe, Da);
    var Na = Rl.errorOrDestroy, xl = ["error", "close", "destroy", "pause", "resume"];
    function NE(t2, e22, r2) {
      if (typeof t2.prependListener == "function")
        return t2.prependListener(e22, r2);
      !t2._events || !t2._events[e22] ? t2.on(e22, r2) : Array.isArray(t2._events[e22]) ? t2._events[e22].unshift(r2) : t2._events[e22] = [r2, t2._events[e22]];
    }
    function Pg(t2, e22, r2) {
      Ef = Ef || Ln(), t2 = t2 || {}, typeof r2 != "boolean" && (r2 = e22 instanceof Ef), this.objectMode = !!t2.objectMode, r2 && (this.objectMode = this.objectMode || !!t2.readableObjectMode), this.highWaterMark = qE(this, t2, "readableHighWaterMark", r2), this.buffer = new RE, this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = false, this.endEmitted = false, this.reading = false, this.sync = true, this.needReadable = false, this.emittedReadable = false, this.readableListening = false, this.resumeScheduled = false, this.paused = true, this.emitClose = t2.emitClose !== false, this.autoDestroy = !!t2.autoDestroy, this.destroyed = false, this.defaultEncoding = t2.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = false, this.decoder = null, this.encoding = null, t2.encoding && (Af || (Af = (Qf(), ur(Jf)).StringDecoder), this.decoder = new Af(t2.encoding), this.encoding = t2.encoding);
    }
    function Oe(t2) {
      if (Ef = Ef || Ln(), !(this instanceof Oe))
        return new Oe(t2);
      var e22 = this instanceof Ef;
      this._readableState = new Pg(t2, this, e22), this.readable = true, t2 && (typeof t2.read == "function" && (this._read = t2.read), typeof t2.destroy == "function" && (this._destroy = t2.destroy)), Da.call(this);
    }
    Object.defineProperty(Oe.prototype, "destroyed", { enumerable: false, get: function() {
      return this._readableState === undefined ? false : this._readableState.destroyed;
    }, set: function(e22) {
      !this._readableState || (this._readableState.destroyed = e22);
    } });
    Oe.prototype.destroy = Rl.destroy;
    Oe.prototype._undestroy = Rl.undestroy;
    Oe.prototype._destroy = function(t2, e22) {
      e22(t2);
    };
    Oe.prototype.push = function(t2, e22) {
      var r2 = this._readableState, o2;
      return r2.objectMode ? o2 = true : typeof t2 == "string" && (e22 = e22 || r2.defaultEncoding, e22 !== r2.encoding && (t2 = Cs.from(t2, e22), e22 = ""), o2 = true), Cg(this, t2, e22, false, o2);
    };
    Oe.prototype.unshift = function(t2) {
      return Cg(this, t2, null, true, false);
    };
    function Cg(t2, e22, r2, o2, f4) {
      De("readableAddChunk", e22);
      var p32 = t2._readableState;
      if (e22 === null)
        p32.reading = false, CE(t2, p32);
      else {
        var m4;
        if (f4 || (m4 = DE(p32, e22)), m4)
          Na(t2, m4);
        else if (p32.objectMode || e22 && e22.length > 0)
          if (typeof e22 != "string" && !p32.objectMode && Object.getPrototypeOf(e22) !== Cs.prototype && (e22 = EE(e22)), o2)
            p32.endEmitted ? Na(t2, new LE) : Sl(t2, p32, e22, true);
          else if (p32.ended)
            Na(t2, new TE);
          else {
            if (p32.destroyed)
              return false;
            p32.reading = false, p32.decoder && !r2 ? (e22 = p32.decoder.write(e22), p32.objectMode || e22.length !== 0 ? Sl(t2, p32, e22, false) : Al(t2, p32)) : Sl(t2, p32, e22, false);
          }
        else
          o2 || (p32.reading = false, Al(t2, p32));
      }
      return !p32.ended && (p32.length < p32.highWaterMark || p32.length === 0);
    }
    function Sl(t2, e22, r2, o2) {
      e22.flowing && e22.length === 0 && !e22.sync ? (e22.awaitDrain = 0, t2.emit("data", r2)) : (e22.length += e22.objectMode ? 1 : r2.length, o2 ? e22.buffer.unshift(r2) : e22.buffer.push(r2), e22.needReadable && Fs(t2)), Al(t2, e22);
    }
    function DE(t2, e22) {
      var r2;
      return !AE(e22) && typeof e22 != "string" && e22 !== undefined && !t2.objectMode && (r2 = new IE("chunk", ["string", "Buffer", "Uint8Array"], e22)), r2;
    }
    Oe.prototype.isPaused = function() {
      return this._readableState.flowing === false;
    };
    Oe.prototype.setEncoding = function(t2) {
      Af || (Af = (Qf(), ur(Jf)).StringDecoder);
      var e22 = new Af(t2);
      this._readableState.decoder = e22, this._readableState.encoding = this._readableState.decoder.encoding;
      for (var r2 = this._readableState.buffer.head, o2 = "";r2 !== null; )
        o2 += e22.write(r2.data), r2 = r2.next;
      return this._readableState.buffer.clear(), o2 !== "" && this._readableState.buffer.push(o2), this._readableState.length = o2.length, this;
    };
    var Lg = 1073741824;
    function PE(t2) {
      return t2 >= Lg ? t2 = Lg : (t2--, t2 |= t2 >>> 1, t2 |= t2 >>> 2, t2 |= t2 >>> 4, t2 |= t2 >>> 8, t2 |= t2 >>> 16, t2++), t2;
    }
    function Ng(t2, e22) {
      return t2 <= 0 || e22.length === 0 && e22.ended ? 0 : e22.objectMode ? 1 : t2 !== t2 ? e22.flowing && e22.length ? e22.buffer.head.data.length : e22.length : (t2 > e22.highWaterMark && (e22.highWaterMark = PE(t2)), t2 <= e22.length ? t2 : e22.ended ? e22.length : (e22.needReadable = true, 0));
    }
    Oe.prototype.read = function(t2) {
      De("read", t2), t2 = parseInt(t2, 10);
      var e22 = this._readableState, r2 = t2;
      if (t2 !== 0 && (e22.emittedReadable = false), t2 === 0 && e22.needReadable && ((e22.highWaterMark !== 0 ? e22.length >= e22.highWaterMark : e22.length > 0) || e22.ended))
        return De("read: emitReadable", e22.length, e22.ended), e22.length === 0 && e22.ended ? El(this) : Fs(this), null;
      if (t2 = Ng(t2, e22), t2 === 0 && e22.ended)
        return e22.length === 0 && El(this), null;
      var o2 = e22.needReadable;
      De("need readable", o2), (e22.length === 0 || e22.length - t2 < e22.highWaterMark) && (o2 = true, De("length less than watermark", o2)), e22.ended || e22.reading ? (o2 = false, De("reading or ended", o2)) : o2 && (De("do read"), e22.reading = true, e22.sync = true, e22.length === 0 && (e22.needReadable = true), this._read(e22.highWaterMark), e22.sync = false, e22.reading || (t2 = Ng(r2, e22)));
      var f4;
      return t2 > 0 ? f4 = Ug(t2, e22) : f4 = null, f4 === null ? (e22.needReadable = e22.length <= e22.highWaterMark, t2 = 0) : (e22.length -= t2, e22.awaitDrain = 0), e22.length === 0 && (e22.ended || (e22.needReadable = true), r2 !== t2 && e22.ended && El(this)), f4 !== null && this.emit("data", f4), f4;
    };
    function CE(t2, e22) {
      if (De("onEofChunk"), !e22.ended) {
        if (e22.decoder) {
          var r2 = e22.decoder.end();
          r2 && r2.length && (e22.buffer.push(r2), e22.length += e22.objectMode ? 1 : r2.length);
        }
        e22.ended = true, e22.sync ? Fs(t2) : (e22.needReadable = false, e22.emittedReadable || (e22.emittedReadable = true, Og(t2)));
      }
    }
    function Fs(t2) {
      var e22 = t2._readableState;
      De("emitReadable", e22.needReadable, e22.emittedReadable), e22.needReadable = false, e22.emittedReadable || (De("emitReadable", e22.flowing), e22.emittedReadable = true, process.nextTick(Og, t2));
    }
    function Og(t2) {
      var e22 = t2._readableState;
      De("emitReadable_", e22.destroyed, e22.length, e22.ended), !e22.destroyed && (e22.length || e22.ended) && (t2.emit("readable"), e22.emittedReadable = false), e22.needReadable = !e22.flowing && !e22.ended && e22.length <= e22.highWaterMark, Bl(t2);
    }
    function Al(t2, e22) {
      e22.readingMore || (e22.readingMore = true, process.nextTick(OE, t2, e22));
    }
    function OE(t2, e22) {
      for (;!e22.reading && !e22.ended && (e22.length < e22.highWaterMark || e22.flowing && e22.length === 0); ) {
        var r2 = e22.length;
        if (De("maybeReadMore read 0"), t2.read(0), r2 === e22.length)
          break;
      }
      e22.readingMore = false;
    }
    Oe.prototype._read = function(t2) {
      Na(this, new kE("_read()"));
    };
    Oe.prototype.pipe = function(t2, e22) {
      var r2 = this, o2 = this._readableState;
      switch (o2.pipesCount) {
        case 0:
          o2.pipes = t2;
          break;
        case 1:
          o2.pipes = [o2.pipes, t2];
          break;
        default:
          o2.pipes.push(t2);
          break;
      }
      o2.pipesCount += 1, De("pipe count=%d opts=%j", o2.pipesCount, e22);
      var f4 = (!e22 || e22.end !== false) && t2 !== process.stdout && t2 !== process.stderr, p32 = f4 ? y32 : ge;
      o2.endEmitted ? process.nextTick(p32) : r2.once("end", p32), t2.on("unpipe", m4);
      function m4(_e, N3) {
        De("onunpipe"), _e === r2 && N3 && N3.hasUnpiped === false && (N3.hasUnpiped = true, S3());
      }
      function y32() {
        De("onend"), t2.end();
      }
      var M3 = FE(r2);
      t2.on("drain", M3);
      var x32 = false;
      function S3() {
        De("cleanup"), t2.removeListener("close", q2), t2.removeListener("finish", L32), t2.removeListener("drain", M3), t2.removeListener("error", B5), t2.removeListener("unpipe", m4), r2.removeListener("end", y32), r2.removeListener("end", ge), r2.removeListener("data", E3), x32 = true, o2.awaitDrain && (!t2._writableState || t2._writableState.needDrain) && M3();
      }
      r2.on("data", E3);
      function E3(_e) {
        De("ondata");
        var N3 = t2.write(_e);
        De("dest.write", N3), N3 === false && ((o2.pipesCount === 1 && o2.pipes === t2 || o2.pipesCount > 1 && zg(o2.pipes, t2) !== -1) && !x32 && (De("false write response, pause", o2.awaitDrain), o2.awaitDrain++), r2.pause());
      }
      function B5(_e) {
        De("onerror", _e), ge(), t2.removeListener("error", B5), Dg(t2, "error") === 0 && Na(t2, _e);
      }
      NE(t2, "error", B5);
      function q2() {
        t2.removeListener("finish", L32), ge();
      }
      t2.once("close", q2);
      function L32() {
        De("onfinish"), t2.removeListener("close", q2), ge();
      }
      t2.once("finish", L32);
      function ge() {
        De("unpipe"), r2.unpipe(t2);
      }
      return t2.emit("pipe", r2), o2.flowing || (De("pipe resume"), r2.resume()), t2;
    };
    function FE(t2) {
      return function() {
        var r2 = t2._readableState;
        De("pipeOnDrain", r2.awaitDrain), r2.awaitDrain && r2.awaitDrain--, r2.awaitDrain === 0 && Dg(t2, "data") && (r2.flowing = true, Bl(t2));
      };
    }
    Oe.prototype.unpipe = function(t2) {
      var e22 = this._readableState, r2 = { hasUnpiped: false };
      if (e22.pipesCount === 0)
        return this;
      if (e22.pipesCount === 1)
        return t2 && t2 !== e22.pipes ? this : (t2 || (t2 = e22.pipes), e22.pipes = null, e22.pipesCount = 0, e22.flowing = false, t2 && t2.emit("unpipe", this, r2), this);
      if (!t2) {
        var { pipes: o2, pipesCount: f4 } = e22;
        e22.pipes = null, e22.pipesCount = 0, e22.flowing = false;
        for (var p32 = 0;p32 < f4; p32++)
          o2[p32].emit("unpipe", this, { hasUnpiped: false });
        return this;
      }
      var m4 = zg(e22.pipes, t2);
      return m4 === -1 ? this : (e22.pipes.splice(m4, 1), e22.pipesCount -= 1, e22.pipesCount === 1 && (e22.pipes = e22.pipes[0]), t2.emit("unpipe", this, r2), this);
    };
    Oe.prototype.on = function(t2, e22) {
      var r2 = Da.prototype.on.call(this, t2, e22), o2 = this._readableState;
      return t2 === "data" ? (o2.readableListening = this.listenerCount("readable") > 0, o2.flowing !== false && this.resume()) : t2 === "readable" && !o2.endEmitted && !o2.readableListening && (o2.readableListening = o2.needReadable = true, o2.flowing = false, o2.emittedReadable = false, De("on readable", o2.length, o2.reading), o2.length ? Fs(this) : o2.reading || process.nextTick(UE, this)), r2;
    };
    Oe.prototype.addListener = Oe.prototype.on;
    Oe.prototype.removeListener = function(t2, e22) {
      var r2 = Da.prototype.removeListener.call(this, t2, e22);
      return t2 === "readable" && process.nextTick(Fg, this), r2;
    };
    Oe.prototype.removeAllListeners = function(t2) {
      var e22 = Da.prototype.removeAllListeners.apply(this, arguments);
      return (t2 === "readable" || t2 === undefined) && process.nextTick(Fg, this), e22;
    };
    function Fg(t2) {
      var e22 = t2._readableState;
      e22.readableListening = t2.listenerCount("readable") > 0, e22.resumeScheduled && !e22.paused ? e22.flowing = true : t2.listenerCount("data") > 0 && t2.resume();
    }
    function UE(t2) {
      De("readable nexttick read 0"), t2.read(0);
    }
    Oe.prototype.resume = function() {
      var t2 = this._readableState;
      return t2.flowing || (De("resume"), t2.flowing = !t2.readableListening, zE(this, t2)), t2.paused = false, this;
    };
    function zE(t2, e22) {
      e22.resumeScheduled || (e22.resumeScheduled = true, process.nextTick(HE, t2, e22));
    }
    function HE(t2, e22) {
      De("resume", e22.reading), e22.reading || t2.read(0), e22.resumeScheduled = false, t2.emit("resume"), Bl(t2), e22.flowing && !e22.reading && t2.read(0);
    }
    Oe.prototype.pause = function() {
      return De("call pause flowing=%j", this._readableState.flowing), this._readableState.flowing !== false && (De("pause"), this._readableState.flowing = false, this.emit("pause")), this._readableState.paused = true, this;
    };
    function Bl(t2) {
      var e22 = t2._readableState;
      for (De("flow", e22.flowing);e22.flowing && t2.read() !== null; )
        ;
    }
    Oe.prototype.wrap = function(t2) {
      var e22 = this, r2 = this._readableState, o2 = false;
      t2.on("end", function() {
        if (De("wrapped end"), r2.decoder && !r2.ended) {
          var m4 = r2.decoder.end();
          m4 && m4.length && e22.push(m4);
        }
        e22.push(null);
      }), t2.on("data", function(m4) {
        if (De("wrapped data"), r2.decoder && (m4 = r2.decoder.write(m4)), !(r2.objectMode && m4 == null) && !(!r2.objectMode && (!m4 || !m4.length))) {
          var y32 = e22.push(m4);
          y32 || (o2 = true, t2.pause());
        }
      });
      for (var f4 in t2)
        this[f4] === undefined && typeof t2[f4] == "function" && (this[f4] = function(y32) {
          return function() {
            return t2[y32].apply(t2, arguments);
          };
        }(f4));
      for (var p32 = 0;p32 < xl.length; p32++)
        t2.on(xl[p32], this.emit.bind(this, xl[p32]));
      return this._read = function(m4) {
        De("wrapped _read", m4), o2 && (o2 = false, t2.resume());
      }, this;
    };
    typeof Symbol == "function" && (Oe.prototype[Symbol.asyncIterator] = function() {
      return Ml === undefined && (Ml = Ig()), Ml(this);
    });
    Object.defineProperty(Oe.prototype, "readableHighWaterMark", { enumerable: false, get: function() {
      return this._readableState.highWaterMark;
    } });
    Object.defineProperty(Oe.prototype, "readableBuffer", { enumerable: false, get: function() {
      return this._readableState && this._readableState.buffer;
    } });
    Object.defineProperty(Oe.prototype, "readableFlowing", { enumerable: false, get: function() {
      return this._readableState.flowing;
    }, set: function(e22) {
      this._readableState && (this._readableState.flowing = e22);
    } });
    Oe._fromList = Ug;
    Object.defineProperty(Oe.prototype, "readableLength", { enumerable: false, get: function() {
      return this._readableState.length;
    } });
    function Ug(t2, e22) {
      if (e22.length === 0)
        return null;
      var r2;
      return e22.objectMode ? r2 = e22.buffer.shift() : !t2 || t2 >= e22.length ? (e22.decoder ? r2 = e22.buffer.join("") : e22.buffer.length === 1 ? r2 = e22.buffer.first() : r2 = e22.buffer.concat(e22.length), e22.buffer.clear()) : r2 = e22.buffer.consume(t2, e22.decoder), r2;
    }
    function El(t2) {
      var e22 = t2._readableState;
      De("endReadable", e22.endEmitted), e22.endEmitted || (e22.ended = true, process.nextTick(WE, e22, t2));
    }
    function WE(t2, e22) {
      if (De("endReadableNT", t2.endEmitted, t2.length), !t2.endEmitted && t2.length === 0 && (t2.endEmitted = true, e22.readable = false, e22.emit("end"), t2.autoDestroy)) {
        var r2 = e22._writableState;
        (!r2 || r2.autoDestroy && r2.finished) && e22.destroy();
      }
    }
    typeof Symbol == "function" && (Oe.from = function(t2, e22) {
      return _l === undefined && (_l = kg()), _l(Oe, t2, e22);
    });
    function zg(t2, e22) {
      for (var r2 = 0, o2 = t2.length;r2 < o2; r2++)
        if (t2[r2] === e22)
          return r2;
      return -1;
    }
  });
  ql = T3((pk, Kg) => {
    Kg.exports = Ei;
    var Us = kn().codes, KE = Us.ERR_METHOD_NOT_IMPLEMENTED, jE = Us.ERR_MULTIPLE_CALLBACK, ZE = Us.ERR_TRANSFORM_ALREADY_TRANSFORMING, VE = Us.ERR_TRANSFORM_WITH_LENGTH_0, zs = Ln();
    Ie()(Ei, zs);
    function $E(t2, e22) {
      var r2 = this._transformState;
      r2.transforming = false;
      var o2 = r2.writecb;
      if (o2 === null)
        return this.emit("error", new jE);
      r2.writechunk = null, r2.writecb = null, e22 != null && this.push(e22), o2(t2);
      var f4 = this._readableState;
      f4.reading = false, (f4.needReadable || f4.length < f4.highWaterMark) && this._read(f4.highWaterMark);
    }
    function Ei(t2) {
      if (!(this instanceof Ei))
        return new Ei(t2);
      zs.call(this, t2), this._transformState = { afterTransform: $E.bind(this), needTransform: false, transforming: false, writecb: null, writechunk: null, writeencoding: null }, this._readableState.needReadable = true, this._readableState.sync = false, t2 && (typeof t2.transform == "function" && (this._transform = t2.transform), typeof t2.flush == "function" && (this._flush = t2.flush)), this.on("prefinish", GE);
    }
    function GE() {
      var t2 = this;
      typeof this._flush == "function" && !this._readableState.destroyed ? this._flush(function(e22, r2) {
        Wg(t2, e22, r2);
      }) : Wg(this, null, null);
    }
    Ei.prototype.push = function(t2, e22) {
      return this._transformState.needTransform = false, zs.prototype.push.call(this, t2, e22);
    };
    Ei.prototype._transform = function(t2, e22, r2) {
      r2(new KE("_transform()"));
    };
    Ei.prototype._write = function(t2, e22, r2) {
      var o2 = this._transformState;
      if (o2.writecb = r2, o2.writechunk = t2, o2.writeencoding = e22, !o2.transforming) {
        var f4 = this._readableState;
        (o2.needTransform || f4.needReadable || f4.length < f4.highWaterMark) && this._read(f4.highWaterMark);
      }
    };
    Ei.prototype._read = function(t2) {
      var e22 = this._transformState;
      e22.writechunk !== null && !e22.transforming ? (e22.transforming = true, this._transform(e22.writechunk, e22.writeencoding, e22.afterTransform)) : e22.needTransform = true;
    };
    Ei.prototype._destroy = function(t2, e22) {
      zs.prototype._destroy.call(this, t2, function(r2) {
        e22(r2);
      });
    };
    function Wg(t2, e22, r2) {
      if (e22)
        return t2.emit("error", e22);
      if (r2 != null && t2.push(r2), t2._writableState.length)
        throw new VE;
      if (t2._transformState.transforming)
        throw new ZE;
      return t2.push(null);
    }
  });
  Vg = T3((vk, Zg) => {
    Zg.exports = Pa;
    var jg = ql();
    Ie()(Pa, jg);
    function Pa(t2) {
      if (!(this instanceof Pa))
        return new Pa(t2);
      jg.call(this, t2);
    }
    Pa.prototype._transform = function(t2, e22, r2) {
      r2(null, t2);
    };
  });
  Jg = T3((bk, Xg) => {
    var Il;
    function YE(t2) {
      var e22 = false;
      return function() {
        e22 || (e22 = true, t2.apply(undefined, arguments));
      };
    }
    var Yg = kn().codes, XE = Yg.ERR_MISSING_ARGS, JE = Yg.ERR_STREAM_DESTROYED;
    function $g(t2) {
      if (t2)
        throw t2;
    }
    function QE(t2) {
      return t2.setHeader && typeof t2.abort == "function";
    }
    function eA(t2, e22, r2, o2) {
      o2 = YE(o2);
      var f4 = false;
      t2.on("close", function() {
        f4 = true;
      }), Il === undefined && (Il = Ns()), Il(t2, { readable: e22, writable: r2 }, function(m4) {
        if (m4)
          return o2(m4);
        f4 = true, o2();
      });
      var p32 = false;
      return function(m4) {
        if (!f4 && !p32) {
          if (p32 = true, QE(t2))
            return t2.abort();
          if (typeof t2.destroy == "function")
            return t2.destroy();
          o2(m4 || new JE("pipe"));
        }
      };
    }
    function Gg(t2) {
      t2();
    }
    function tA(t2, e22) {
      return t2.pipe(e22);
    }
    function rA(t2) {
      return !t2.length || typeof t2[t2.length - 1] != "function" ? $g : t2.pop();
    }
    function iA() {
      for (var t2 = arguments.length, e22 = new Array(t2), r2 = 0;r2 < t2; r2++)
        e22[r2] = arguments[r2];
      var o2 = rA(e22);
      if (Array.isArray(e22[0]) && (e22 = e22[0]), e22.length < 2)
        throw new XE("streams");
      var f4, p32 = e22.map(function(m4, y32) {
        var M3 = y32 < e22.length - 1, x32 = y32 > 0;
        return eA(m4, M3, x32, function(S3) {
          f4 || (f4 = S3), S3 && p32.forEach(Gg), !M3 && (p32.forEach(Gg), o2(f4));
        });
      });
      return e22.reduce(tA);
    }
    Xg.exports = iA;
  });
  e2 = T3((Mr, Qg) => {
    Mr = Qg.exports = gl();
    Mr.Stream = Mr;
    Mr.Readable = Mr;
    Mr.Writable = vl();
    Mr.Duplex = Ln();
    Mr.Transform = ql();
    Mr.PassThrough = Vg();
    Mr.finished = Ns();
    Mr.pipeline = Jg();
  });
  Hs = T3((t2, Tl) => {
    (function(t32, e3) {
      function r2(h5, s2) {
        if (!h5)
          throw new Error(s2 || "Assertion failed");
      }
      function o2(h5, s2) {
        h5.super_ = s2;
        var u3 = function() {};
        u3.prototype = s2.prototype, h5.prototype = new u3, h5.prototype.constructor = h5;
      }
      function f4(h5, s2, u3) {
        if (f4.isBN(h5))
          return h5;
        this.negative = 0, this.words = null, this.length = 0, this.red = null, h5 !== null && ((s2 === "le" || s2 === "be") && (u3 = s2, s2 = 10), this._init(h5 || 0, s2 || 10, u3 || "be"));
      }
      typeof t32 == "object" ? t32.exports = f4 : e3.BN = f4, f4.BN = f4, f4.wordSize = 26;
      var p32;
      try {
        typeof window < "u" && typeof window.Buffer < "u" ? p32 = window.Buffer : p32 = ji().Buffer;
      } catch {}
      f4.isBN = function(s2) {
        return s2 instanceof f4 ? true : s2 !== null && typeof s2 == "object" && s2.constructor.wordSize === f4.wordSize && Array.isArray(s2.words);
      }, f4.max = function(s2, u3) {
        return s2.cmp(u3) > 0 ? s2 : u3;
      }, f4.min = function(s2, u3) {
        return s2.cmp(u3) < 0 ? s2 : u3;
      }, f4.prototype._init = function(s2, u3, c) {
        if (typeof s2 == "number")
          return this._initNumber(s2, u3, c);
        if (typeof s2 == "object")
          return this._initArray(s2, u3, c);
        u3 === "hex" && (u3 = 16), r2(u3 === (u3 | 0) && u3 >= 2 && u3 <= 36), s2 = s2.toString().replace(/\s+/g, "");
        var b3 = 0;
        s2[0] === "-" && (b3++, this.negative = 1), b3 < s2.length && (u3 === 16 ? this._parseHex(s2, b3, c) : (this._parseBase(s2, u3, b3), c === "le" && this._initArray(this.toArray(), u3, c)));
      }, f4.prototype._initNumber = function(s2, u3, c) {
        s2 < 0 && (this.negative = 1, s2 = -s2), s2 < 67108864 ? (this.words = [s2 & 67108863], this.length = 1) : s2 < 4503599627370496 ? (this.words = [s2 & 67108863, s2 / 67108864 & 67108863], this.length = 2) : (r2(s2 < 9007199254740992), this.words = [s2 & 67108863, s2 / 67108864 & 67108863, 1], this.length = 3), c === "le" && this._initArray(this.toArray(), u3, c);
      }, f4.prototype._initArray = function(s2, u3, c) {
        if (r2(typeof s2.length == "number"), s2.length <= 0)
          return this.words = [0], this.length = 1, this;
        this.length = Math.ceil(s2.length / 3), this.words = new Array(this.length);
        for (var b3 = 0;b3 < this.length; b3++)
          this.words[b3] = 0;
        var l4, n4, d2 = 0;
        if (c === "be")
          for (b3 = s2.length - 1, l4 = 0;b3 >= 0; b3 -= 3)
            n4 = s2[b3] | s2[b3 - 1] << 8 | s2[b3 - 2] << 16, this.words[l4] |= n4 << d2 & 67108863, this.words[l4 + 1] = n4 >>> 26 - d2 & 67108863, d2 += 24, d2 >= 26 && (d2 -= 26, l4++);
        else if (c === "le")
          for (b3 = 0, l4 = 0;b3 < s2.length; b3 += 3)
            n4 = s2[b3] | s2[b3 + 1] << 8 | s2[b3 + 2] << 16, this.words[l4] |= n4 << d2 & 67108863, this.words[l4 + 1] = n4 >>> 26 - d2 & 67108863, d2 += 24, d2 >= 26 && (d2 -= 26, l4++);
        return this._strip();
      };
      function m4(h5, s2) {
        var u3 = h5.charCodeAt(s2);
        if (u3 >= 48 && u3 <= 57)
          return u3 - 48;
        if (u3 >= 65 && u3 <= 70)
          return u3 - 55;
        if (u3 >= 97 && u3 <= 102)
          return u3 - 87;
        r2(false, "Invalid character in " + h5);
      }
      function y32(h5, s2, u3) {
        var c = m4(h5, u3);
        return u3 - 1 >= s2 && (c |= m4(h5, u3 - 1) << 4), c;
      }
      f4.prototype._parseHex = function(s2, u3, c) {
        this.length = Math.ceil((s2.length - u3) / 6), this.words = new Array(this.length);
        for (var b3 = 0;b3 < this.length; b3++)
          this.words[b3] = 0;
        var l4 = 0, n4 = 0, d2;
        if (c === "be")
          for (b3 = s2.length - 1;b3 >= u3; b3 -= 2)
            d2 = y32(s2, u3, b3) << l4, this.words[n4] |= d2 & 67108863, l4 >= 18 ? (l4 -= 18, n4 += 1, this.words[n4] |= d2 >>> 26) : l4 += 8;
        else {
          var w2 = s2.length - u3;
          for (b3 = w2 % 2 === 0 ? u3 + 1 : u3;b3 < s2.length; b3 += 2)
            d2 = y32(s2, u3, b3) << l4, this.words[n4] |= d2 & 67108863, l4 >= 18 ? (l4 -= 18, n4 += 1, this.words[n4] |= d2 >>> 26) : l4 += 8;
        }
        this._strip();
      };
      function M3(h5, s2, u3, c) {
        for (var b3 = 0, l4 = 0, n4 = Math.min(h5.length, u3), d2 = s2;d2 < n4; d2++) {
          var w2 = h5.charCodeAt(d2) - 48;
          b3 *= c, w2 >= 49 ? l4 = w2 - 49 + 10 : w2 >= 17 ? l4 = w2 - 17 + 10 : l4 = w2, r2(w2 >= 0 && l4 < c, "Invalid character"), b3 += l4;
        }
        return b3;
      }
      f4.prototype._parseBase = function(s2, u3, c) {
        this.words = [0], this.length = 1;
        for (var b3 = 0, l4 = 1;l4 <= 67108863; l4 *= u3)
          b3++;
        b3--, l4 = l4 / u3 | 0;
        for (var n4 = s2.length - c, d2 = n4 % b3, w2 = Math.min(n4, n4 - d2) + c, g2 = 0, _3 = c;_3 < w2; _3 += b3)
          g2 = M3(s2, _3, _3 + b3, u3), this.imuln(l4), this.words[0] + g2 < 67108864 ? this.words[0] += g2 : this._iaddn(g2);
        if (d2 !== 0) {
          var A6 = 1;
          for (g2 = M3(s2, _3, s2.length, u3), _3 = 0;_3 < d2; _3++)
            A6 *= u3;
          this.imuln(A6), this.words[0] + g2 < 67108864 ? this.words[0] += g2 : this._iaddn(g2);
        }
        this._strip();
      }, f4.prototype.copy = function(s2) {
        s2.words = new Array(this.length);
        for (var u3 = 0;u3 < this.length; u3++)
          s2.words[u3] = this.words[u3];
        s2.length = this.length, s2.negative = this.negative, s2.red = this.red;
      };
      function x32(h5, s2) {
        h5.words = s2.words, h5.length = s2.length, h5.negative = s2.negative, h5.red = s2.red;
      }
      if (f4.prototype._move = function(s2) {
        x32(s2, this);
      }, f4.prototype.clone = function() {
        var s2 = new f4(null);
        return this.copy(s2), s2;
      }, f4.prototype._expand = function(s2) {
        for (;this.length < s2; )
          this.words[this.length++] = 0;
        return this;
      }, f4.prototype._strip = function() {
        for (;this.length > 1 && this.words[this.length - 1] === 0; )
          this.length--;
        return this._normSign();
      }, f4.prototype._normSign = function() {
        return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
      }, typeof Symbol < "u" && typeof Symbol.for == "function")
        try {
          f4.prototype[Symbol.for("nodejs.util.inspect.custom")] = S3;
        } catch {
          f4.prototype.inspect = S3;
        }
      else
        f4.prototype.inspect = S3;
      function S3() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var E3 = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"], B5 = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], q2 = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
      f4.prototype.toString = function(s2, u3) {
        s2 = s2 || 10, u3 = u3 | 0 || 1;
        var c;
        if (s2 === 16 || s2 === "hex") {
          c = "";
          for (var b3 = 0, l4 = 0, n4 = 0;n4 < this.length; n4++) {
            var d2 = this.words[n4], w2 = ((d2 << b3 | l4) & 16777215).toString(16);
            l4 = d2 >>> 24 - b3 & 16777215, b3 += 2, b3 >= 26 && (b3 -= 26, n4--), l4 !== 0 || n4 !== this.length - 1 ? c = E3[6 - w2.length] + w2 + c : c = w2 + c;
          }
          for (l4 !== 0 && (c = l4.toString(16) + c);c.length % u3 !== 0; )
            c = "0" + c;
          return this.negative !== 0 && (c = "-" + c), c;
        }
        if (s2 === (s2 | 0) && s2 >= 2 && s2 <= 36) {
          var g2 = B5[s2], _3 = q2[s2];
          c = "";
          var A6 = this.clone();
          for (A6.negative = 0;!A6.isZero(); ) {
            var R3 = A6.modrn(_3).toString(s2);
            A6 = A6.idivn(_3), A6.isZero() ? c = R3 + c : c = E3[g2 - R3.length] + R3 + c;
          }
          for (this.isZero() && (c = "0" + c);c.length % u3 !== 0; )
            c = "0" + c;
          return this.negative !== 0 && (c = "-" + c), c;
        }
        r2(false, "Base should be between 2 and 36");
      }, f4.prototype.toNumber = function() {
        var s2 = this.words[0];
        return this.length === 2 ? s2 += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? s2 += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && r2(false, "Number can only safely store up to 53 bits"), this.negative !== 0 ? -s2 : s2;
      }, f4.prototype.toJSON = function() {
        return this.toString(16, 2);
      }, p32 && (f4.prototype.toBuffer = function(s2, u3) {
        return this.toArrayLike(p32, s2, u3);
      }), f4.prototype.toArray = function(s2, u3) {
        return this.toArrayLike(Array, s2, u3);
      };
      var L32 = function(s2, u3) {
        return s2.allocUnsafe ? s2.allocUnsafe(u3) : new s2(u3);
      };
      f4.prototype.toArrayLike = function(s2, u3, c) {
        this._strip();
        var b3 = this.byteLength(), l4 = c || Math.max(1, b3);
        r2(b3 <= l4, "byte array longer than desired length"), r2(l4 > 0, "Requested array length <= 0");
        var n4 = L32(s2, l4), d2 = u3 === "le" ? "LE" : "BE";
        return this["_toArrayLike" + d2](n4, b3), n4;
      }, f4.prototype._toArrayLikeLE = function(s2, u3) {
        for (var c = 0, b3 = 0, l4 = 0, n4 = 0;l4 < this.length; l4++) {
          var d2 = this.words[l4] << n4 | b3;
          s2[c++] = d2 & 255, c < s2.length && (s2[c++] = d2 >> 8 & 255), c < s2.length && (s2[c++] = d2 >> 16 & 255), n4 === 6 ? (c < s2.length && (s2[c++] = d2 >> 24 & 255), b3 = 0, n4 = 0) : (b3 = d2 >>> 24, n4 += 2);
        }
        if (c < s2.length)
          for (s2[c++] = b3;c < s2.length; )
            s2[c++] = 0;
      }, f4.prototype._toArrayLikeBE = function(s2, u3) {
        for (var c = s2.length - 1, b3 = 0, l4 = 0, n4 = 0;l4 < this.length; l4++) {
          var d2 = this.words[l4] << n4 | b3;
          s2[c--] = d2 & 255, c >= 0 && (s2[c--] = d2 >> 8 & 255), c >= 0 && (s2[c--] = d2 >> 16 & 255), n4 === 6 ? (c >= 0 && (s2[c--] = d2 >> 24 & 255), b3 = 0, n4 = 0) : (b3 = d2 >>> 24, n4 += 2);
        }
        if (c >= 0)
          for (s2[c--] = b3;c >= 0; )
            s2[c--] = 0;
      }, Math.clz32 ? f4.prototype._countBits = function(s2) {
        return 32 - Math.clz32(s2);
      } : f4.prototype._countBits = function(s2) {
        var u3 = s2, c = 0;
        return u3 >= 4096 && (c += 13, u3 >>>= 13), u3 >= 64 && (c += 7, u3 >>>= 7), u3 >= 8 && (c += 4, u3 >>>= 4), u3 >= 2 && (c += 2, u3 >>>= 2), c + u3;
      }, f4.prototype._zeroBits = function(s2) {
        if (s2 === 0)
          return 26;
        var u3 = s2, c = 0;
        return (u3 & 8191) === 0 && (c += 13, u3 >>>= 13), (u3 & 127) === 0 && (c += 7, u3 >>>= 7), (u3 & 15) === 0 && (c += 4, u3 >>>= 4), (u3 & 3) === 0 && (c += 2, u3 >>>= 2), (u3 & 1) === 0 && c++, c;
      }, f4.prototype.bitLength = function() {
        var s2 = this.words[this.length - 1], u3 = this._countBits(s2);
        return (this.length - 1) * 26 + u3;
      };
      function ge(h5) {
        for (var s2 = new Array(h5.bitLength()), u3 = 0;u3 < s2.length; u3++) {
          var c = u3 / 26 | 0, b3 = u3 % 26;
          s2[u3] = h5.words[c] >>> b3 & 1;
        }
        return s2;
      }
      f4.prototype.zeroBits = function() {
        if (this.isZero())
          return 0;
        for (var s2 = 0, u3 = 0;u3 < this.length; u3++) {
          var c = this._zeroBits(this.words[u3]);
          if (s2 += c, c !== 26)
            break;
        }
        return s2;
      }, f4.prototype.byteLength = function() {
        return Math.ceil(this.bitLength() / 8);
      }, f4.prototype.toTwos = function(s2) {
        return this.negative !== 0 ? this.abs().inotn(s2).iaddn(1) : this.clone();
      }, f4.prototype.fromTwos = function(s2) {
        return this.testn(s2 - 1) ? this.notn(s2).iaddn(1).ineg() : this.clone();
      }, f4.prototype.isNeg = function() {
        return this.negative !== 0;
      }, f4.prototype.neg = function() {
        return this.clone().ineg();
      }, f4.prototype.ineg = function() {
        return this.isZero() || (this.negative ^= 1), this;
      }, f4.prototype.iuor = function(s2) {
        for (;this.length < s2.length; )
          this.words[this.length++] = 0;
        for (var u3 = 0;u3 < s2.length; u3++)
          this.words[u3] = this.words[u3] | s2.words[u3];
        return this._strip();
      }, f4.prototype.ior = function(s2) {
        return r2((this.negative | s2.negative) === 0), this.iuor(s2);
      }, f4.prototype.or = function(s2) {
        return this.length > s2.length ? this.clone().ior(s2) : s2.clone().ior(this);
      }, f4.prototype.uor = function(s2) {
        return this.length > s2.length ? this.clone().iuor(s2) : s2.clone().iuor(this);
      }, f4.prototype.iuand = function(s2) {
        var u3;
        this.length > s2.length ? u3 = s2 : u3 = this;
        for (var c = 0;c < u3.length; c++)
          this.words[c] = this.words[c] & s2.words[c];
        return this.length = u3.length, this._strip();
      }, f4.prototype.iand = function(s2) {
        return r2((this.negative | s2.negative) === 0), this.iuand(s2);
      }, f4.prototype.and = function(s2) {
        return this.length > s2.length ? this.clone().iand(s2) : s2.clone().iand(this);
      }, f4.prototype.uand = function(s2) {
        return this.length > s2.length ? this.clone().iuand(s2) : s2.clone().iuand(this);
      }, f4.prototype.iuxor = function(s2) {
        var u3, c;
        this.length > s2.length ? (u3 = this, c = s2) : (u3 = s2, c = this);
        for (var b3 = 0;b3 < c.length; b3++)
          this.words[b3] = u3.words[b3] ^ c.words[b3];
        if (this !== u3)
          for (;b3 < u3.length; b3++)
            this.words[b3] = u3.words[b3];
        return this.length = u3.length, this._strip();
      }, f4.prototype.ixor = function(s2) {
        return r2((this.negative | s2.negative) === 0), this.iuxor(s2);
      }, f4.prototype.xor = function(s2) {
        return this.length > s2.length ? this.clone().ixor(s2) : s2.clone().ixor(this);
      }, f4.prototype.uxor = function(s2) {
        return this.length > s2.length ? this.clone().iuxor(s2) : s2.clone().iuxor(this);
      }, f4.prototype.inotn = function(s2) {
        r2(typeof s2 == "number" && s2 >= 0);
        var u3 = Math.ceil(s2 / 26) | 0, c = s2 % 26;
        this._expand(u3), c > 0 && u3--;
        for (var b3 = 0;b3 < u3; b3++)
          this.words[b3] = ~this.words[b3] & 67108863;
        return c > 0 && (this.words[b3] = ~this.words[b3] & 67108863 >> 26 - c), this._strip();
      }, f4.prototype.notn = function(s2) {
        return this.clone().inotn(s2);
      }, f4.prototype.setn = function(s2, u3) {
        r2(typeof s2 == "number" && s2 >= 0);
        var c = s2 / 26 | 0, b3 = s2 % 26;
        return this._expand(c + 1), u3 ? this.words[c] = this.words[c] | 1 << b3 : this.words[c] = this.words[c] & ~(1 << b3), this._strip();
      }, f4.prototype.iadd = function(s2) {
        var u3;
        if (this.negative !== 0 && s2.negative === 0)
          return this.negative = 0, u3 = this.isub(s2), this.negative ^= 1, this._normSign();
        if (this.negative === 0 && s2.negative !== 0)
          return s2.negative = 0, u3 = this.isub(s2), s2.negative = 1, u3._normSign();
        var c, b3;
        this.length > s2.length ? (c = this, b3 = s2) : (c = s2, b3 = this);
        for (var l4 = 0, n4 = 0;n4 < b3.length; n4++)
          u3 = (c.words[n4] | 0) + (b3.words[n4] | 0) + l4, this.words[n4] = u3 & 67108863, l4 = u3 >>> 26;
        for (;l4 !== 0 && n4 < c.length; n4++)
          u3 = (c.words[n4] | 0) + l4, this.words[n4] = u3 & 67108863, l4 = u3 >>> 26;
        if (this.length = c.length, l4 !== 0)
          this.words[this.length] = l4, this.length++;
        else if (c !== this)
          for (;n4 < c.length; n4++)
            this.words[n4] = c.words[n4];
        return this;
      }, f4.prototype.add = function(s2) {
        var u3;
        return s2.negative !== 0 && this.negative === 0 ? (s2.negative = 0, u3 = this.sub(s2), s2.negative ^= 1, u3) : s2.negative === 0 && this.negative !== 0 ? (this.negative = 0, u3 = s2.sub(this), this.negative = 1, u3) : this.length > s2.length ? this.clone().iadd(s2) : s2.clone().iadd(this);
      }, f4.prototype.isub = function(s2) {
        if (s2.negative !== 0) {
          s2.negative = 0;
          var u3 = this.iadd(s2);
          return s2.negative = 1, u3._normSign();
        } else if (this.negative !== 0)
          return this.negative = 0, this.iadd(s2), this.negative = 1, this._normSign();
        var c = this.cmp(s2);
        if (c === 0)
          return this.negative = 0, this.length = 1, this.words[0] = 0, this;
        var b3, l4;
        c > 0 ? (b3 = this, l4 = s2) : (b3 = s2, l4 = this);
        for (var n4 = 0, d2 = 0;d2 < l4.length; d2++)
          u3 = (b3.words[d2] | 0) - (l4.words[d2] | 0) + n4, n4 = u3 >> 26, this.words[d2] = u3 & 67108863;
        for (;n4 !== 0 && d2 < b3.length; d2++)
          u3 = (b3.words[d2] | 0) + n4, n4 = u3 >> 26, this.words[d2] = u3 & 67108863;
        if (n4 === 0 && d2 < b3.length && b3 !== this)
          for (;d2 < b3.length; d2++)
            this.words[d2] = b3.words[d2];
        return this.length = Math.max(this.length, d2), b3 !== this && (this.negative = 1), this._strip();
      }, f4.prototype.sub = function(s2) {
        return this.clone().isub(s2);
      };
      function _e(h5, s2, u3) {
        u3.negative = s2.negative ^ h5.negative;
        var c = h5.length + s2.length | 0;
        u3.length = c, c = c - 1 | 0;
        var b3 = h5.words[0] | 0, l4 = s2.words[0] | 0, n4 = b3 * l4, d2 = n4 & 67108863, w2 = n4 / 67108864 | 0;
        u3.words[0] = d2;
        for (var g2 = 1;g2 < c; g2++) {
          for (var _3 = w2 >>> 26, A6 = w2 & 67108863, R3 = Math.min(g2, s2.length - 1), I2 = Math.max(0, g2 - h5.length + 1);I2 <= R3; I2++) {
            var Me = g2 - I2 | 0;
            b3 = h5.words[Me] | 0, l4 = s2.words[I2] | 0, n4 = b3 * l4 + A6, _3 += n4 / 67108864 | 0, A6 = n4 & 67108863;
          }
          u3.words[g2] = A6 | 0, w2 = _3 | 0;
        }
        return w2 !== 0 ? u3.words[g2] = w2 | 0 : u3.length--, u3._strip();
      }
      var N3 = function(s2, u3, c) {
        var b3 = s2.words, l4 = u3.words, n4 = c.words, d2 = 0, w2, g2, _3, A6 = b3[0] | 0, R3 = A6 & 8191, I2 = A6 >>> 13, Me = b3[1] | 0, k2 = Me & 8191, D2 = Me >>> 13, nt = b3[2] | 0, C3 = nt & 8191, O2 = nt >>> 13, vt = b3[3] | 0, F = vt & 8191, U3 = vt >>> 13, bt = b3[4] | 0, z3 = bt & 8191, H32 = bt >>> 13, mt = b3[5] | 0, W22 = mt & 8191, K = mt >>> 13, gt = b3[6] | 0, j2 = gt & 8191, Z3 = gt >>> 13, yt = b3[7] | 0, V4 = yt & 8191, $32 = yt >>> 13, wt = b3[8] | 0, G4 = wt & 8191, Y = wt >>> 13, Mt = b3[9] | 0, X3 = Mt & 8191, J = Mt >>> 13, _t = l4[0] | 0, Q3 = _t & 8191, ee = _t >>> 13, xt = l4[1] | 0, te = xt & 8191, re = xt >>> 13, St = l4[2] | 0, ie = St & 8191, ne = St >>> 13, Et = l4[3] | 0, fe = Et & 8191, ae = Et >>> 13, At = l4[4] | 0, oe = At & 8191, se = At >>> 13, Rt = l4[5] | 0, he = Rt & 8191, ue = Rt >>> 13, Bt = l4[6] | 0, le = Bt & 8191, de = Bt >>> 13, qt = l4[7] | 0, ce = qt & 8191, pe = qt >>> 13, It = l4[8] | 0, ve = It & 8191, be = It >>> 13, ft = l4[9] | 0, Be = ft & 8191, qe = ft >>> 13;
        c.negative = s2.negative ^ u3.negative, c.length = 19, w2 = Math.imul(R3, Q3), g2 = Math.imul(R3, ee), g2 = g2 + Math.imul(I2, Q3) | 0, _3 = Math.imul(I2, ee);
        var ze = (d2 + w2 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_3 + (g2 >>> 13) | 0) + (ze >>> 26) | 0, ze &= 67108863, w2 = Math.imul(k2, Q3), g2 = Math.imul(k2, ee), g2 = g2 + Math.imul(D2, Q3) | 0, _3 = Math.imul(D2, ee), w2 = w2 + Math.imul(R3, te) | 0, g2 = g2 + Math.imul(R3, re) | 0, g2 = g2 + Math.imul(I2, te) | 0, _3 = _3 + Math.imul(I2, re) | 0;
        var He = (d2 + w2 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_3 + (g2 >>> 13) | 0) + (He >>> 26) | 0, He &= 67108863, w2 = Math.imul(C3, Q3), g2 = Math.imul(C3, ee), g2 = g2 + Math.imul(O2, Q3) | 0, _3 = Math.imul(O2, ee), w2 = w2 + Math.imul(k2, te) | 0, g2 = g2 + Math.imul(k2, re) | 0, g2 = g2 + Math.imul(D2, te) | 0, _3 = _3 + Math.imul(D2, re) | 0, w2 = w2 + Math.imul(R3, ie) | 0, g2 = g2 + Math.imul(R3, ne) | 0, g2 = g2 + Math.imul(I2, ie) | 0, _3 = _3 + Math.imul(I2, ne) | 0;
        var We = (d2 + w2 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_3 + (g2 >>> 13) | 0) + (We >>> 26) | 0, We &= 67108863, w2 = Math.imul(F, Q3), g2 = Math.imul(F, ee), g2 = g2 + Math.imul(U3, Q3) | 0, _3 = Math.imul(U3, ee), w2 = w2 + Math.imul(C3, te) | 0, g2 = g2 + Math.imul(C3, re) | 0, g2 = g2 + Math.imul(O2, te) | 0, _3 = _3 + Math.imul(O2, re) | 0, w2 = w2 + Math.imul(k2, ie) | 0, g2 = g2 + Math.imul(k2, ne) | 0, g2 = g2 + Math.imul(D2, ie) | 0, _3 = _3 + Math.imul(D2, ne) | 0, w2 = w2 + Math.imul(R3, fe) | 0, g2 = g2 + Math.imul(R3, ae) | 0, g2 = g2 + Math.imul(I2, fe) | 0, _3 = _3 + Math.imul(I2, ae) | 0;
        var Ke = (d2 + w2 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_3 + (g2 >>> 13) | 0) + (Ke >>> 26) | 0, Ke &= 67108863, w2 = Math.imul(z3, Q3), g2 = Math.imul(z3, ee), g2 = g2 + Math.imul(H32, Q3) | 0, _3 = Math.imul(H32, ee), w2 = w2 + Math.imul(F, te) | 0, g2 = g2 + Math.imul(F, re) | 0, g2 = g2 + Math.imul(U3, te) | 0, _3 = _3 + Math.imul(U3, re) | 0, w2 = w2 + Math.imul(C3, ie) | 0, g2 = g2 + Math.imul(C3, ne) | 0, g2 = g2 + Math.imul(O2, ie) | 0, _3 = _3 + Math.imul(O2, ne) | 0, w2 = w2 + Math.imul(k2, fe) | 0, g2 = g2 + Math.imul(k2, ae) | 0, g2 = g2 + Math.imul(D2, fe) | 0, _3 = _3 + Math.imul(D2, ae) | 0, w2 = w2 + Math.imul(R3, oe) | 0, g2 = g2 + Math.imul(R3, se) | 0, g2 = g2 + Math.imul(I2, oe) | 0, _3 = _3 + Math.imul(I2, se) | 0;
        var je = (d2 + w2 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_3 + (g2 >>> 13) | 0) + (je >>> 26) | 0, je &= 67108863, w2 = Math.imul(W22, Q3), g2 = Math.imul(W22, ee), g2 = g2 + Math.imul(K, Q3) | 0, _3 = Math.imul(K, ee), w2 = w2 + Math.imul(z3, te) | 0, g2 = g2 + Math.imul(z3, re) | 0, g2 = g2 + Math.imul(H32, te) | 0, _3 = _3 + Math.imul(H32, re) | 0, w2 = w2 + Math.imul(F, ie) | 0, g2 = g2 + Math.imul(F, ne) | 0, g2 = g2 + Math.imul(U3, ie) | 0, _3 = _3 + Math.imul(U3, ne) | 0, w2 = w2 + Math.imul(C3, fe) | 0, g2 = g2 + Math.imul(C3, ae) | 0, g2 = g2 + Math.imul(O2, fe) | 0, _3 = _3 + Math.imul(O2, ae) | 0, w2 = w2 + Math.imul(k2, oe) | 0, g2 = g2 + Math.imul(k2, se) | 0, g2 = g2 + Math.imul(D2, oe) | 0, _3 = _3 + Math.imul(D2, se) | 0, w2 = w2 + Math.imul(R3, he) | 0, g2 = g2 + Math.imul(R3, ue) | 0, g2 = g2 + Math.imul(I2, he) | 0, _3 = _3 + Math.imul(I2, ue) | 0;
        var Ze = (d2 + w2 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_3 + (g2 >>> 13) | 0) + (Ze >>> 26) | 0, Ze &= 67108863, w2 = Math.imul(j2, Q3), g2 = Math.imul(j2, ee), g2 = g2 + Math.imul(Z3, Q3) | 0, _3 = Math.imul(Z3, ee), w2 = w2 + Math.imul(W22, te) | 0, g2 = g2 + Math.imul(W22, re) | 0, g2 = g2 + Math.imul(K, te) | 0, _3 = _3 + Math.imul(K, re) | 0, w2 = w2 + Math.imul(z3, ie) | 0, g2 = g2 + Math.imul(z3, ne) | 0, g2 = g2 + Math.imul(H32, ie) | 0, _3 = _3 + Math.imul(H32, ne) | 0, w2 = w2 + Math.imul(F, fe) | 0, g2 = g2 + Math.imul(F, ae) | 0, g2 = g2 + Math.imul(U3, fe) | 0, _3 = _3 + Math.imul(U3, ae) | 0, w2 = w2 + Math.imul(C3, oe) | 0, g2 = g2 + Math.imul(C3, se) | 0, g2 = g2 + Math.imul(O2, oe) | 0, _3 = _3 + Math.imul(O2, se) | 0, w2 = w2 + Math.imul(k2, he) | 0, g2 = g2 + Math.imul(k2, ue) | 0, g2 = g2 + Math.imul(D2, he) | 0, _3 = _3 + Math.imul(D2, ue) | 0, w2 = w2 + Math.imul(R3, le) | 0, g2 = g2 + Math.imul(R3, de) | 0, g2 = g2 + Math.imul(I2, le) | 0, _3 = _3 + Math.imul(I2, de) | 0;
        var Ve = (d2 + w2 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_3 + (g2 >>> 13) | 0) + (Ve >>> 26) | 0, Ve &= 67108863, w2 = Math.imul(V4, Q3), g2 = Math.imul(V4, ee), g2 = g2 + Math.imul($32, Q3) | 0, _3 = Math.imul($32, ee), w2 = w2 + Math.imul(j2, te) | 0, g2 = g2 + Math.imul(j2, re) | 0, g2 = g2 + Math.imul(Z3, te) | 0, _3 = _3 + Math.imul(Z3, re) | 0, w2 = w2 + Math.imul(W22, ie) | 0, g2 = g2 + Math.imul(W22, ne) | 0, g2 = g2 + Math.imul(K, ie) | 0, _3 = _3 + Math.imul(K, ne) | 0, w2 = w2 + Math.imul(z3, fe) | 0, g2 = g2 + Math.imul(z3, ae) | 0, g2 = g2 + Math.imul(H32, fe) | 0, _3 = _3 + Math.imul(H32, ae) | 0, w2 = w2 + Math.imul(F, oe) | 0, g2 = g2 + Math.imul(F, se) | 0, g2 = g2 + Math.imul(U3, oe) | 0, _3 = _3 + Math.imul(U3, se) | 0, w2 = w2 + Math.imul(C3, he) | 0, g2 = g2 + Math.imul(C3, ue) | 0, g2 = g2 + Math.imul(O2, he) | 0, _3 = _3 + Math.imul(O2, ue) | 0, w2 = w2 + Math.imul(k2, le) | 0, g2 = g2 + Math.imul(k2, de) | 0, g2 = g2 + Math.imul(D2, le) | 0, _3 = _3 + Math.imul(D2, de) | 0, w2 = w2 + Math.imul(R3, ce) | 0, g2 = g2 + Math.imul(R3, pe) | 0, g2 = g2 + Math.imul(I2, ce) | 0, _3 = _3 + Math.imul(I2, pe) | 0;
        var $e = (d2 + w2 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_3 + (g2 >>> 13) | 0) + ($e >>> 26) | 0, $e &= 67108863, w2 = Math.imul(G4, Q3), g2 = Math.imul(G4, ee), g2 = g2 + Math.imul(Y, Q3) | 0, _3 = Math.imul(Y, ee), w2 = w2 + Math.imul(V4, te) | 0, g2 = g2 + Math.imul(V4, re) | 0, g2 = g2 + Math.imul($32, te) | 0, _3 = _3 + Math.imul($32, re) | 0, w2 = w2 + Math.imul(j2, ie) | 0, g2 = g2 + Math.imul(j2, ne) | 0, g2 = g2 + Math.imul(Z3, ie) | 0, _3 = _3 + Math.imul(Z3, ne) | 0, w2 = w2 + Math.imul(W22, fe) | 0, g2 = g2 + Math.imul(W22, ae) | 0, g2 = g2 + Math.imul(K, fe) | 0, _3 = _3 + Math.imul(K, ae) | 0, w2 = w2 + Math.imul(z3, oe) | 0, g2 = g2 + Math.imul(z3, se) | 0, g2 = g2 + Math.imul(H32, oe) | 0, _3 = _3 + Math.imul(H32, se) | 0, w2 = w2 + Math.imul(F, he) | 0, g2 = g2 + Math.imul(F, ue) | 0, g2 = g2 + Math.imul(U3, he) | 0, _3 = _3 + Math.imul(U3, ue) | 0, w2 = w2 + Math.imul(C3, le) | 0, g2 = g2 + Math.imul(C3, de) | 0, g2 = g2 + Math.imul(O2, le) | 0, _3 = _3 + Math.imul(O2, de) | 0, w2 = w2 + Math.imul(k2, ce) | 0, g2 = g2 + Math.imul(k2, pe) | 0, g2 = g2 + Math.imul(D2, ce) | 0, _3 = _3 + Math.imul(D2, pe) | 0, w2 = w2 + Math.imul(R3, ve) | 0, g2 = g2 + Math.imul(R3, be) | 0, g2 = g2 + Math.imul(I2, ve) | 0, _3 = _3 + Math.imul(I2, be) | 0;
        var Ge = (d2 + w2 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_3 + (g2 >>> 13) | 0) + (Ge >>> 26) | 0, Ge &= 67108863, w2 = Math.imul(X3, Q3), g2 = Math.imul(X3, ee), g2 = g2 + Math.imul(J, Q3) | 0, _3 = Math.imul(J, ee), w2 = w2 + Math.imul(G4, te) | 0, g2 = g2 + Math.imul(G4, re) | 0, g2 = g2 + Math.imul(Y, te) | 0, _3 = _3 + Math.imul(Y, re) | 0, w2 = w2 + Math.imul(V4, ie) | 0, g2 = g2 + Math.imul(V4, ne) | 0, g2 = g2 + Math.imul($32, ie) | 0, _3 = _3 + Math.imul($32, ne) | 0, w2 = w2 + Math.imul(j2, fe) | 0, g2 = g2 + Math.imul(j2, ae) | 0, g2 = g2 + Math.imul(Z3, fe) | 0, _3 = _3 + Math.imul(Z3, ae) | 0, w2 = w2 + Math.imul(W22, oe) | 0, g2 = g2 + Math.imul(W22, se) | 0, g2 = g2 + Math.imul(K, oe) | 0, _3 = _3 + Math.imul(K, se) | 0, w2 = w2 + Math.imul(z3, he) | 0, g2 = g2 + Math.imul(z3, ue) | 0, g2 = g2 + Math.imul(H32, he) | 0, _3 = _3 + Math.imul(H32, ue) | 0, w2 = w2 + Math.imul(F, le) | 0, g2 = g2 + Math.imul(F, de) | 0, g2 = g2 + Math.imul(U3, le) | 0, _3 = _3 + Math.imul(U3, de) | 0, w2 = w2 + Math.imul(C3, ce) | 0, g2 = g2 + Math.imul(C3, pe) | 0, g2 = g2 + Math.imul(O2, ce) | 0, _3 = _3 + Math.imul(O2, pe) | 0, w2 = w2 + Math.imul(k2, ve) | 0, g2 = g2 + Math.imul(k2, be) | 0, g2 = g2 + Math.imul(D2, ve) | 0, _3 = _3 + Math.imul(D2, be) | 0, w2 = w2 + Math.imul(R3, Be) | 0, g2 = g2 + Math.imul(R3, qe) | 0, g2 = g2 + Math.imul(I2, Be) | 0, _3 = _3 + Math.imul(I2, qe) | 0;
        var Ye = (d2 + w2 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_3 + (g2 >>> 13) | 0) + (Ye >>> 26) | 0, Ye &= 67108863, w2 = Math.imul(X3, te), g2 = Math.imul(X3, re), g2 = g2 + Math.imul(J, te) | 0, _3 = Math.imul(J, re), w2 = w2 + Math.imul(G4, ie) | 0, g2 = g2 + Math.imul(G4, ne) | 0, g2 = g2 + Math.imul(Y, ie) | 0, _3 = _3 + Math.imul(Y, ne) | 0, w2 = w2 + Math.imul(V4, fe) | 0, g2 = g2 + Math.imul(V4, ae) | 0, g2 = g2 + Math.imul($32, fe) | 0, _3 = _3 + Math.imul($32, ae) | 0, w2 = w2 + Math.imul(j2, oe) | 0, g2 = g2 + Math.imul(j2, se) | 0, g2 = g2 + Math.imul(Z3, oe) | 0, _3 = _3 + Math.imul(Z3, se) | 0, w2 = w2 + Math.imul(W22, he) | 0, g2 = g2 + Math.imul(W22, ue) | 0, g2 = g2 + Math.imul(K, he) | 0, _3 = _3 + Math.imul(K, ue) | 0, w2 = w2 + Math.imul(z3, le) | 0, g2 = g2 + Math.imul(z3, de) | 0, g2 = g2 + Math.imul(H32, le) | 0, _3 = _3 + Math.imul(H32, de) | 0, w2 = w2 + Math.imul(F, ce) | 0, g2 = g2 + Math.imul(F, pe) | 0, g2 = g2 + Math.imul(U3, ce) | 0, _3 = _3 + Math.imul(U3, pe) | 0, w2 = w2 + Math.imul(C3, ve) | 0, g2 = g2 + Math.imul(C3, be) | 0, g2 = g2 + Math.imul(O2, ve) | 0, _3 = _3 + Math.imul(O2, be) | 0, w2 = w2 + Math.imul(k2, Be) | 0, g2 = g2 + Math.imul(k2, qe) | 0, g2 = g2 + Math.imul(D2, Be) | 0, _3 = _3 + Math.imul(D2, qe) | 0;
        var Xe = (d2 + w2 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_3 + (g2 >>> 13) | 0) + (Xe >>> 26) | 0, Xe &= 67108863, w2 = Math.imul(X3, ie), g2 = Math.imul(X3, ne), g2 = g2 + Math.imul(J, ie) | 0, _3 = Math.imul(J, ne), w2 = w2 + Math.imul(G4, fe) | 0, g2 = g2 + Math.imul(G4, ae) | 0, g2 = g2 + Math.imul(Y, fe) | 0, _3 = _3 + Math.imul(Y, ae) | 0, w2 = w2 + Math.imul(V4, oe) | 0, g2 = g2 + Math.imul(V4, se) | 0, g2 = g2 + Math.imul($32, oe) | 0, _3 = _3 + Math.imul($32, se) | 0, w2 = w2 + Math.imul(j2, he) | 0, g2 = g2 + Math.imul(j2, ue) | 0, g2 = g2 + Math.imul(Z3, he) | 0, _3 = _3 + Math.imul(Z3, ue) | 0, w2 = w2 + Math.imul(W22, le) | 0, g2 = g2 + Math.imul(W22, de) | 0, g2 = g2 + Math.imul(K, le) | 0, _3 = _3 + Math.imul(K, de) | 0, w2 = w2 + Math.imul(z3, ce) | 0, g2 = g2 + Math.imul(z3, pe) | 0, g2 = g2 + Math.imul(H32, ce) | 0, _3 = _3 + Math.imul(H32, pe) | 0, w2 = w2 + Math.imul(F, ve) | 0, g2 = g2 + Math.imul(F, be) | 0, g2 = g2 + Math.imul(U3, ve) | 0, _3 = _3 + Math.imul(U3, be) | 0, w2 = w2 + Math.imul(C3, Be) | 0, g2 = g2 + Math.imul(C3, qe) | 0, g2 = g2 + Math.imul(O2, Be) | 0, _3 = _3 + Math.imul(O2, qe) | 0;
        var Je = (d2 + w2 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_3 + (g2 >>> 13) | 0) + (Je >>> 26) | 0, Je &= 67108863, w2 = Math.imul(X3, fe), g2 = Math.imul(X3, ae), g2 = g2 + Math.imul(J, fe) | 0, _3 = Math.imul(J, ae), w2 = w2 + Math.imul(G4, oe) | 0, g2 = g2 + Math.imul(G4, se) | 0, g2 = g2 + Math.imul(Y, oe) | 0, _3 = _3 + Math.imul(Y, se) | 0, w2 = w2 + Math.imul(V4, he) | 0, g2 = g2 + Math.imul(V4, ue) | 0, g2 = g2 + Math.imul($32, he) | 0, _3 = _3 + Math.imul($32, ue) | 0, w2 = w2 + Math.imul(j2, le) | 0, g2 = g2 + Math.imul(j2, de) | 0, g2 = g2 + Math.imul(Z3, le) | 0, _3 = _3 + Math.imul(Z3, de) | 0, w2 = w2 + Math.imul(W22, ce) | 0, g2 = g2 + Math.imul(W22, pe) | 0, g2 = g2 + Math.imul(K, ce) | 0, _3 = _3 + Math.imul(K, pe) | 0, w2 = w2 + Math.imul(z3, ve) | 0, g2 = g2 + Math.imul(z3, be) | 0, g2 = g2 + Math.imul(H32, ve) | 0, _3 = _3 + Math.imul(H32, be) | 0, w2 = w2 + Math.imul(F, Be) | 0, g2 = g2 + Math.imul(F, qe) | 0, g2 = g2 + Math.imul(U3, Be) | 0, _3 = _3 + Math.imul(U3, qe) | 0;
        var Qe = (d2 + w2 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_3 + (g2 >>> 13) | 0) + (Qe >>> 26) | 0, Qe &= 67108863, w2 = Math.imul(X3, oe), g2 = Math.imul(X3, se), g2 = g2 + Math.imul(J, oe) | 0, _3 = Math.imul(J, se), w2 = w2 + Math.imul(G4, he) | 0, g2 = g2 + Math.imul(G4, ue) | 0, g2 = g2 + Math.imul(Y, he) | 0, _3 = _3 + Math.imul(Y, ue) | 0, w2 = w2 + Math.imul(V4, le) | 0, g2 = g2 + Math.imul(V4, de) | 0, g2 = g2 + Math.imul($32, le) | 0, _3 = _3 + Math.imul($32, de) | 0, w2 = w2 + Math.imul(j2, ce) | 0, g2 = g2 + Math.imul(j2, pe) | 0, g2 = g2 + Math.imul(Z3, ce) | 0, _3 = _3 + Math.imul(Z3, pe) | 0, w2 = w2 + Math.imul(W22, ve) | 0, g2 = g2 + Math.imul(W22, be) | 0, g2 = g2 + Math.imul(K, ve) | 0, _3 = _3 + Math.imul(K, be) | 0, w2 = w2 + Math.imul(z3, Be) | 0, g2 = g2 + Math.imul(z3, qe) | 0, g2 = g2 + Math.imul(H32, Be) | 0, _3 = _3 + Math.imul(H32, qe) | 0;
        var et = (d2 + w2 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_3 + (g2 >>> 13) | 0) + (et >>> 26) | 0, et &= 67108863, w2 = Math.imul(X3, he), g2 = Math.imul(X3, ue), g2 = g2 + Math.imul(J, he) | 0, _3 = Math.imul(J, ue), w2 = w2 + Math.imul(G4, le) | 0, g2 = g2 + Math.imul(G4, de) | 0, g2 = g2 + Math.imul(Y, le) | 0, _3 = _3 + Math.imul(Y, de) | 0, w2 = w2 + Math.imul(V4, ce) | 0, g2 = g2 + Math.imul(V4, pe) | 0, g2 = g2 + Math.imul($32, ce) | 0, _3 = _3 + Math.imul($32, pe) | 0, w2 = w2 + Math.imul(j2, ve) | 0, g2 = g2 + Math.imul(j2, be) | 0, g2 = g2 + Math.imul(Z3, ve) | 0, _3 = _3 + Math.imul(Z3, be) | 0, w2 = w2 + Math.imul(W22, Be) | 0, g2 = g2 + Math.imul(W22, qe) | 0, g2 = g2 + Math.imul(K, Be) | 0, _3 = _3 + Math.imul(K, qe) | 0;
        var tt = (d2 + w2 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_3 + (g2 >>> 13) | 0) + (tt >>> 26) | 0, tt &= 67108863, w2 = Math.imul(X3, le), g2 = Math.imul(X3, de), g2 = g2 + Math.imul(J, le) | 0, _3 = Math.imul(J, de), w2 = w2 + Math.imul(G4, ce) | 0, g2 = g2 + Math.imul(G4, pe) | 0, g2 = g2 + Math.imul(Y, ce) | 0, _3 = _3 + Math.imul(Y, pe) | 0, w2 = w2 + Math.imul(V4, ve) | 0, g2 = g2 + Math.imul(V4, be) | 0, g2 = g2 + Math.imul($32, ve) | 0, _3 = _3 + Math.imul($32, be) | 0, w2 = w2 + Math.imul(j2, Be) | 0, g2 = g2 + Math.imul(j2, qe) | 0, g2 = g2 + Math.imul(Z3, Be) | 0, _3 = _3 + Math.imul(Z3, qe) | 0;
        var rt = (d2 + w2 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_3 + (g2 >>> 13) | 0) + (rt >>> 26) | 0, rt &= 67108863, w2 = Math.imul(X3, ce), g2 = Math.imul(X3, pe), g2 = g2 + Math.imul(J, ce) | 0, _3 = Math.imul(J, pe), w2 = w2 + Math.imul(G4, ve) | 0, g2 = g2 + Math.imul(G4, be) | 0, g2 = g2 + Math.imul(Y, ve) | 0, _3 = _3 + Math.imul(Y, be) | 0, w2 = w2 + Math.imul(V4, Be) | 0, g2 = g2 + Math.imul(V4, qe) | 0, g2 = g2 + Math.imul($32, Be) | 0, _3 = _3 + Math.imul($32, qe) | 0;
        var x02 = (d2 + w2 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_3 + (g2 >>> 13) | 0) + (x02 >>> 26) | 0, x02 &= 67108863, w2 = Math.imul(X3, ve), g2 = Math.imul(X3, be), g2 = g2 + Math.imul(J, ve) | 0, _3 = Math.imul(J, be), w2 = w2 + Math.imul(G4, Be) | 0, g2 = g2 + Math.imul(G4, qe) | 0, g2 = g2 + Math.imul(Y, Be) | 0, _3 = _3 + Math.imul(Y, qe) | 0;
        var S02 = (d2 + w2 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_3 + (g2 >>> 13) | 0) + (S02 >>> 26) | 0, S02 &= 67108863, w2 = Math.imul(X3, Be), g2 = Math.imul(X3, qe), g2 = g2 + Math.imul(J, Be) | 0, _3 = Math.imul(J, qe);
        var E02 = (d2 + w2 | 0) + ((g2 & 8191) << 13) | 0;
        return d2 = (_3 + (g2 >>> 13) | 0) + (E02 >>> 26) | 0, E02 &= 67108863, n4[0] = ze, n4[1] = He, n4[2] = We, n4[3] = Ke, n4[4] = je, n4[5] = Ze, n4[6] = Ve, n4[7] = $e, n4[8] = Ge, n4[9] = Ye, n4[10] = Xe, n4[11] = Je, n4[12] = Qe, n4[13] = et, n4[14] = tt, n4[15] = rt, n4[16] = x02, n4[17] = S02, n4[18] = E02, d2 !== 0 && (n4[19] = d2, c.length++), c;
      };
      Math.imul || (N3 = _e);
      function we(h5, s2, u3) {
        u3.negative = s2.negative ^ h5.negative, u3.length = h5.length + s2.length;
        for (var c = 0, b3 = 0, l4 = 0;l4 < u3.length - 1; l4++) {
          var n4 = b3;
          b3 = 0;
          for (var d2 = c & 67108863, w2 = Math.min(l4, s2.length - 1), g2 = Math.max(0, l4 - h5.length + 1);g2 <= w2; g2++) {
            var _3 = l4 - g2, A6 = h5.words[_3] | 0, R3 = s2.words[g2] | 0, I2 = A6 * R3, Me = I2 & 67108863;
            n4 = n4 + (I2 / 67108864 | 0) | 0, Me = Me + d2 | 0, d2 = Me & 67108863, n4 = n4 + (Me >>> 26) | 0, b3 += n4 >>> 26, n4 &= 67108863;
          }
          u3.words[l4] = d2, c = n4, n4 = b3;
        }
        return c !== 0 ? u3.words[l4] = c : u3.length--, u3._strip();
      }
      function ye(h5, s2, u3) {
        return we(h5, s2, u3);
      }
      f4.prototype.mulTo = function(s2, u3) {
        var c, b3 = this.length + s2.length;
        return this.length === 10 && s2.length === 10 ? c = N3(this, s2, u3) : b3 < 63 ? c = _e(this, s2, u3) : b3 < 1024 ? c = we(this, s2, u3) : c = ye(this, s2, u3), c;
      };
      function xe(h5, s2) {
        this.x = h5, this.y = s2;
      }
      xe.prototype.makeRBT = function(s2) {
        for (var u3 = new Array(s2), c = f4.prototype._countBits(s2) - 1, b3 = 0;b3 < s2; b3++)
          u3[b3] = this.revBin(b3, c, s2);
        return u3;
      }, xe.prototype.revBin = function(s2, u3, c) {
        if (s2 === 0 || s2 === c - 1)
          return s2;
        for (var b3 = 0, l4 = 0;l4 < u3; l4++)
          b3 |= (s2 & 1) << u3 - l4 - 1, s2 >>= 1;
        return b3;
      }, xe.prototype.permute = function(s2, u3, c, b3, l4, n4) {
        for (var d2 = 0;d2 < n4; d2++)
          b3[d2] = u3[s2[d2]], l4[d2] = c[s2[d2]];
      }, xe.prototype.transform = function(s2, u3, c, b3, l4, n4) {
        this.permute(n4, s2, u3, c, b3, l4);
        for (var d2 = 1;d2 < l4; d2 <<= 1)
          for (var w2 = d2 << 1, g2 = Math.cos(2 * Math.PI / w2), _3 = Math.sin(2 * Math.PI / w2), A6 = 0;A6 < l4; A6 += w2)
            for (var R3 = g2, I2 = _3, Me = 0;Me < d2; Me++) {
              var k2 = c[A6 + Me], D2 = b3[A6 + Me], nt = c[A6 + Me + d2], C3 = b3[A6 + Me + d2], O2 = R3 * nt - I2 * C3;
              C3 = R3 * C3 + I2 * nt, nt = O2, c[A6 + Me] = k2 + nt, b3[A6 + Me] = D2 + C3, c[A6 + Me + d2] = k2 - nt, b3[A6 + Me + d2] = D2 - C3, Me !== w2 && (O2 = g2 * R3 - _3 * I2, I2 = g2 * I2 + _3 * R3, R3 = O2);
            }
      }, xe.prototype.guessLen13b = function(s2, u3) {
        var c = Math.max(u3, s2) | 1, b3 = c & 1, l4 = 0;
        for (c = c / 2 | 0;c; c = c >>> 1)
          l4++;
        return 1 << l4 + 1 + b3;
      }, xe.prototype.conjugate = function(s2, u3, c) {
        if (!(c <= 1))
          for (var b3 = 0;b3 < c / 2; b3++) {
            var l4 = s2[b3];
            s2[b3] = s2[c - b3 - 1], s2[c - b3 - 1] = l4, l4 = u3[b3], u3[b3] = -u3[c - b3 - 1], u3[c - b3 - 1] = -l4;
          }
      }, xe.prototype.normalize13b = function(s2, u3) {
        for (var c = 0, b3 = 0;b3 < u3 / 2; b3++) {
          var l4 = Math.round(s2[2 * b3 + 1] / u3) * 8192 + Math.round(s2[2 * b3] / u3) + c;
          s2[b3] = l4 & 67108863, l4 < 67108864 ? c = 0 : c = l4 / 67108864 | 0;
        }
        return s2;
      }, xe.prototype.convert13b = function(s2, u3, c, b3) {
        for (var l4 = 0, n4 = 0;n4 < u3; n4++)
          l4 = l4 + (s2[n4] | 0), c[2 * n4] = l4 & 8191, l4 = l4 >>> 13, c[2 * n4 + 1] = l4 & 8191, l4 = l4 >>> 13;
        for (n4 = 2 * u3;n4 < b3; ++n4)
          c[n4] = 0;
        r2(l4 === 0), r2((l4 & -8192) === 0);
      }, xe.prototype.stub = function(s2) {
        for (var u3 = new Array(s2), c = 0;c < s2; c++)
          u3[c] = 0;
        return u3;
      }, xe.prototype.mulp = function(s2, u3, c) {
        var b3 = 2 * this.guessLen13b(s2.length, u3.length), l4 = this.makeRBT(b3), n4 = this.stub(b3), d2 = new Array(b3), w2 = new Array(b3), g2 = new Array(b3), _3 = new Array(b3), A6 = new Array(b3), R3 = new Array(b3), I2 = c.words;
        I2.length = b3, this.convert13b(s2.words, s2.length, d2, b3), this.convert13b(u3.words, u3.length, _3, b3), this.transform(d2, n4, w2, g2, b3, l4), this.transform(_3, n4, A6, R3, b3, l4);
        for (var Me = 0;Me < b3; Me++) {
          var k2 = w2[Me] * A6[Me] - g2[Me] * R3[Me];
          g2[Me] = w2[Me] * R3[Me] + g2[Me] * A6[Me], w2[Me] = k2;
        }
        return this.conjugate(w2, g2, b3), this.transform(w2, g2, I2, n4, b3, l4), this.conjugate(I2, n4, b3), this.normalize13b(I2, b3), c.negative = s2.negative ^ u3.negative, c.length = s2.length + u3.length, c._strip();
      }, f4.prototype.mul = function(s2) {
        var u3 = new f4(null);
        return u3.words = new Array(this.length + s2.length), this.mulTo(s2, u3);
      }, f4.prototype.mulf = function(s2) {
        var u3 = new f4(null);
        return u3.words = new Array(this.length + s2.length), ye(this, s2, u3);
      }, f4.prototype.imul = function(s2) {
        return this.clone().mulTo(s2, this);
      }, f4.prototype.imuln = function(s2) {
        var u3 = s2 < 0;
        u3 && (s2 = -s2), r2(typeof s2 == "number"), r2(s2 < 67108864);
        for (var c = 0, b3 = 0;b3 < this.length; b3++) {
          var l4 = (this.words[b3] | 0) * s2, n4 = (l4 & 67108863) + (c & 67108863);
          c >>= 26, c += l4 / 67108864 | 0, c += n4 >>> 26, this.words[b3] = n4 & 67108863;
        }
        return c !== 0 && (this.words[b3] = c, this.length++), u3 ? this.ineg() : this;
      }, f4.prototype.muln = function(s2) {
        return this.clone().imuln(s2);
      }, f4.prototype.sqr = function() {
        return this.mul(this);
      }, f4.prototype.isqr = function() {
        return this.imul(this.clone());
      }, f4.prototype.pow = function(s2) {
        var u3 = ge(s2);
        if (u3.length === 0)
          return new f4(1);
        for (var c = this, b3 = 0;b3 < u3.length && u3[b3] === 0; b3++, c = c.sqr())
          ;
        if (++b3 < u3.length)
          for (var l4 = c.sqr();b3 < u3.length; b3++, l4 = l4.sqr())
            u3[b3] !== 0 && (c = c.mul(l4));
        return c;
      }, f4.prototype.iushln = function(s2) {
        r2(typeof s2 == "number" && s2 >= 0);
        var u3 = s2 % 26, c = (s2 - u3) / 26, b3 = 67108863 >>> 26 - u3 << 26 - u3, l4;
        if (u3 !== 0) {
          var n4 = 0;
          for (l4 = 0;l4 < this.length; l4++) {
            var d2 = this.words[l4] & b3, w2 = (this.words[l4] | 0) - d2 << u3;
            this.words[l4] = w2 | n4, n4 = d2 >>> 26 - u3;
          }
          n4 && (this.words[l4] = n4, this.length++);
        }
        if (c !== 0) {
          for (l4 = this.length - 1;l4 >= 0; l4--)
            this.words[l4 + c] = this.words[l4];
          for (l4 = 0;l4 < c; l4++)
            this.words[l4] = 0;
          this.length += c;
        }
        return this._strip();
      }, f4.prototype.ishln = function(s2) {
        return r2(this.negative === 0), this.iushln(s2);
      }, f4.prototype.iushrn = function(s2, u3, c) {
        r2(typeof s2 == "number" && s2 >= 0);
        var b3;
        u3 ? b3 = (u3 - u3 % 26) / 26 : b3 = 0;
        var l4 = s2 % 26, n4 = Math.min((s2 - l4) / 26, this.length), d2 = 67108863 ^ 67108863 >>> l4 << l4, w2 = c;
        if (b3 -= n4, b3 = Math.max(0, b3), w2) {
          for (var g2 = 0;g2 < n4; g2++)
            w2.words[g2] = this.words[g2];
          w2.length = n4;
        }
        if (n4 !== 0)
          if (this.length > n4)
            for (this.length -= n4, g2 = 0;g2 < this.length; g2++)
              this.words[g2] = this.words[g2 + n4];
          else
            this.words[0] = 0, this.length = 1;
        var _3 = 0;
        for (g2 = this.length - 1;g2 >= 0 && (_3 !== 0 || g2 >= b3); g2--) {
          var A6 = this.words[g2] | 0;
          this.words[g2] = _3 << 26 - l4 | A6 >>> l4, _3 = A6 & d2;
        }
        return w2 && _3 !== 0 && (w2.words[w2.length++] = _3), this.length === 0 && (this.words[0] = 0, this.length = 1), this._strip();
      }, f4.prototype.ishrn = function(s2, u3, c) {
        return r2(this.negative === 0), this.iushrn(s2, u3, c);
      }, f4.prototype.shln = function(s2) {
        return this.clone().ishln(s2);
      }, f4.prototype.ushln = function(s2) {
        return this.clone().iushln(s2);
      }, f4.prototype.shrn = function(s2) {
        return this.clone().ishrn(s2);
      }, f4.prototype.ushrn = function(s2) {
        return this.clone().iushrn(s2);
      }, f4.prototype.testn = function(s2) {
        r2(typeof s2 == "number" && s2 >= 0);
        var u3 = s2 % 26, c = (s2 - u3) / 26, b3 = 1 << u3;
        if (this.length <= c)
          return false;
        var l4 = this.words[c];
        return !!(l4 & b3);
      }, f4.prototype.imaskn = function(s2) {
        r2(typeof s2 == "number" && s2 >= 0);
        var u3 = s2 % 26, c = (s2 - u3) / 26;
        if (r2(this.negative === 0, "imaskn works only with positive numbers"), this.length <= c)
          return this;
        if (u3 !== 0 && c++, this.length = Math.min(c, this.length), u3 !== 0) {
          var b3 = 67108863 ^ 67108863 >>> u3 << u3;
          this.words[this.length - 1] &= b3;
        }
        return this._strip();
      }, f4.prototype.maskn = function(s2) {
        return this.clone().imaskn(s2);
      }, f4.prototype.iaddn = function(s2) {
        return r2(typeof s2 == "number"), r2(s2 < 67108864), s2 < 0 ? this.isubn(-s2) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) <= s2 ? (this.words[0] = s2 - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(s2), this.negative = 1, this) : this._iaddn(s2);
      }, f4.prototype._iaddn = function(s2) {
        this.words[0] += s2;
        for (var u3 = 0;u3 < this.length && this.words[u3] >= 67108864; u3++)
          this.words[u3] -= 67108864, u3 === this.length - 1 ? this.words[u3 + 1] = 1 : this.words[u3 + 1]++;
        return this.length = Math.max(this.length, u3 + 1), this;
      }, f4.prototype.isubn = function(s2) {
        if (r2(typeof s2 == "number"), r2(s2 < 67108864), s2 < 0)
          return this.iaddn(-s2);
        if (this.negative !== 0)
          return this.negative = 0, this.iaddn(s2), this.negative = 1, this;
        if (this.words[0] -= s2, this.length === 1 && this.words[0] < 0)
          this.words[0] = -this.words[0], this.negative = 1;
        else
          for (var u3 = 0;u3 < this.length && this.words[u3] < 0; u3++)
            this.words[u3] += 67108864, this.words[u3 + 1] -= 1;
        return this._strip();
      }, f4.prototype.addn = function(s2) {
        return this.clone().iaddn(s2);
      }, f4.prototype.subn = function(s2) {
        return this.clone().isubn(s2);
      }, f4.prototype.iabs = function() {
        return this.negative = 0, this;
      }, f4.prototype.abs = function() {
        return this.clone().iabs();
      }, f4.prototype._ishlnsubmul = function(s2, u3, c) {
        var b3 = s2.length + c, l4;
        this._expand(b3);
        var n4, d2 = 0;
        for (l4 = 0;l4 < s2.length; l4++) {
          n4 = (this.words[l4 + c] | 0) + d2;
          var w2 = (s2.words[l4] | 0) * u3;
          n4 -= w2 & 67108863, d2 = (n4 >> 26) - (w2 / 67108864 | 0), this.words[l4 + c] = n4 & 67108863;
        }
        for (;l4 < this.length - c; l4++)
          n4 = (this.words[l4 + c] | 0) + d2, d2 = n4 >> 26, this.words[l4 + c] = n4 & 67108863;
        if (d2 === 0)
          return this._strip();
        for (r2(d2 === -1), d2 = 0, l4 = 0;l4 < this.length; l4++)
          n4 = -(this.words[l4] | 0) + d2, d2 = n4 >> 26, this.words[l4] = n4 & 67108863;
        return this.negative = 1, this._strip();
      }, f4.prototype._wordDiv = function(s2, u3) {
        var c = this.length - s2.length, b3 = this.clone(), l4 = s2, n4 = l4.words[l4.length - 1] | 0, d2 = this._countBits(n4);
        c = 26 - d2, c !== 0 && (l4 = l4.ushln(c), b3.iushln(c), n4 = l4.words[l4.length - 1] | 0);
        var w2 = b3.length - l4.length, g2;
        if (u3 !== "mod") {
          g2 = new f4(null), g2.length = w2 + 1, g2.words = new Array(g2.length);
          for (var _3 = 0;_3 < g2.length; _3++)
            g2.words[_3] = 0;
        }
        var A6 = b3.clone()._ishlnsubmul(l4, 1, w2);
        A6.negative === 0 && (b3 = A6, g2 && (g2.words[w2] = 1));
        for (var R3 = w2 - 1;R3 >= 0; R3--) {
          var I2 = (b3.words[l4.length + R3] | 0) * 67108864 + (b3.words[l4.length + R3 - 1] | 0);
          for (I2 = Math.min(I2 / n4 | 0, 67108863), b3._ishlnsubmul(l4, I2, R3);b3.negative !== 0; )
            I2--, b3.negative = 0, b3._ishlnsubmul(l4, 1, R3), b3.isZero() || (b3.negative ^= 1);
          g2 && (g2.words[R3] = I2);
        }
        return g2 && g2._strip(), b3._strip(), u3 !== "div" && c !== 0 && b3.iushrn(c), { div: g2 || null, mod: b3 };
      }, f4.prototype.divmod = function(s2, u3, c) {
        if (r2(!s2.isZero()), this.isZero())
          return { div: new f4(0), mod: new f4(0) };
        var b3, l4, n4;
        return this.negative !== 0 && s2.negative === 0 ? (n4 = this.neg().divmod(s2, u3), u3 !== "mod" && (b3 = n4.div.neg()), u3 !== "div" && (l4 = n4.mod.neg(), c && l4.negative !== 0 && l4.iadd(s2)), { div: b3, mod: l4 }) : this.negative === 0 && s2.negative !== 0 ? (n4 = this.divmod(s2.neg(), u3), u3 !== "mod" && (b3 = n4.div.neg()), { div: b3, mod: n4.mod }) : (this.negative & s2.negative) !== 0 ? (n4 = this.neg().divmod(s2.neg(), u3), u3 !== "div" && (l4 = n4.mod.neg(), c && l4.negative !== 0 && l4.isub(s2)), { div: n4.div, mod: l4 }) : s2.length > this.length || this.cmp(s2) < 0 ? { div: new f4(0), mod: this } : s2.length === 1 ? u3 === "div" ? { div: this.divn(s2.words[0]), mod: null } : u3 === "mod" ? { div: null, mod: new f4(this.modrn(s2.words[0])) } : { div: this.divn(s2.words[0]), mod: new f4(this.modrn(s2.words[0])) } : this._wordDiv(s2, u3);
      }, f4.prototype.div = function(s2) {
        return this.divmod(s2, "div", false).div;
      }, f4.prototype.mod = function(s2) {
        return this.divmod(s2, "mod", false).mod;
      }, f4.prototype.umod = function(s2) {
        return this.divmod(s2, "mod", true).mod;
      }, f4.prototype.divRound = function(s2) {
        var u3 = this.divmod(s2);
        if (u3.mod.isZero())
          return u3.div;
        var c = u3.div.negative !== 0 ? u3.mod.isub(s2) : u3.mod, b3 = s2.ushrn(1), l4 = s2.andln(1), n4 = c.cmp(b3);
        return n4 < 0 || l4 === 1 && n4 === 0 ? u3.div : u3.div.negative !== 0 ? u3.div.isubn(1) : u3.div.iaddn(1);
      }, f4.prototype.modrn = function(s2) {
        var u3 = s2 < 0;
        u3 && (s2 = -s2), r2(s2 <= 67108863);
        for (var c = (1 << 26) % s2, b3 = 0, l4 = this.length - 1;l4 >= 0; l4--)
          b3 = (c * b3 + (this.words[l4] | 0)) % s2;
        return u3 ? -b3 : b3;
      }, f4.prototype.modn = function(s2) {
        return this.modrn(s2);
      }, f4.prototype.idivn = function(s2) {
        var u3 = s2 < 0;
        u3 && (s2 = -s2), r2(s2 <= 67108863);
        for (var c = 0, b3 = this.length - 1;b3 >= 0; b3--) {
          var l4 = (this.words[b3] | 0) + c * 67108864;
          this.words[b3] = l4 / s2 | 0, c = l4 % s2;
        }
        return this._strip(), u3 ? this.ineg() : this;
      }, f4.prototype.divn = function(s2) {
        return this.clone().idivn(s2);
      }, f4.prototype.egcd = function(s2) {
        r2(s2.negative === 0), r2(!s2.isZero());
        var u3 = this, c = s2.clone();
        u3.negative !== 0 ? u3 = u3.umod(s2) : u3 = u3.clone();
        for (var b3 = new f4(1), l4 = new f4(0), n4 = new f4(0), d2 = new f4(1), w2 = 0;u3.isEven() && c.isEven(); )
          u3.iushrn(1), c.iushrn(1), ++w2;
        for (var g2 = c.clone(), _3 = u3.clone();!u3.isZero(); ) {
          for (var A6 = 0, R3 = 1;(u3.words[0] & R3) === 0 && A6 < 26; ++A6, R3 <<= 1)
            ;
          if (A6 > 0)
            for (u3.iushrn(A6);A6-- > 0; )
              (b3.isOdd() || l4.isOdd()) && (b3.iadd(g2), l4.isub(_3)), b3.iushrn(1), l4.iushrn(1);
          for (var I2 = 0, Me = 1;(c.words[0] & Me) === 0 && I2 < 26; ++I2, Me <<= 1)
            ;
          if (I2 > 0)
            for (c.iushrn(I2);I2-- > 0; )
              (n4.isOdd() || d2.isOdd()) && (n4.iadd(g2), d2.isub(_3)), n4.iushrn(1), d2.iushrn(1);
          u3.cmp(c) >= 0 ? (u3.isub(c), b3.isub(n4), l4.isub(d2)) : (c.isub(u3), n4.isub(b3), d2.isub(l4));
        }
        return { a: n4, b: d2, gcd: c.iushln(w2) };
      }, f4.prototype._invmp = function(s2) {
        r2(s2.negative === 0), r2(!s2.isZero());
        var u3 = this, c = s2.clone();
        u3.negative !== 0 ? u3 = u3.umod(s2) : u3 = u3.clone();
        for (var b3 = new f4(1), l4 = new f4(0), n4 = c.clone();u3.cmpn(1) > 0 && c.cmpn(1) > 0; ) {
          for (var d2 = 0, w2 = 1;(u3.words[0] & w2) === 0 && d2 < 26; ++d2, w2 <<= 1)
            ;
          if (d2 > 0)
            for (u3.iushrn(d2);d2-- > 0; )
              b3.isOdd() && b3.iadd(n4), b3.iushrn(1);
          for (var g2 = 0, _3 = 1;(c.words[0] & _3) === 0 && g2 < 26; ++g2, _3 <<= 1)
            ;
          if (g2 > 0)
            for (c.iushrn(g2);g2-- > 0; )
              l4.isOdd() && l4.iadd(n4), l4.iushrn(1);
          u3.cmp(c) >= 0 ? (u3.isub(c), b3.isub(l4)) : (c.isub(u3), l4.isub(b3));
        }
        var A6;
        return u3.cmpn(1) === 0 ? A6 = b3 : A6 = l4, A6.cmpn(0) < 0 && A6.iadd(s2), A6;
      }, f4.prototype.gcd = function(s2) {
        if (this.isZero())
          return s2.abs();
        if (s2.isZero())
          return this.abs();
        var u3 = this.clone(), c = s2.clone();
        u3.negative = 0, c.negative = 0;
        for (var b3 = 0;u3.isEven() && c.isEven(); b3++)
          u3.iushrn(1), c.iushrn(1);
        do {
          for (;u3.isEven(); )
            u3.iushrn(1);
          for (;c.isEven(); )
            c.iushrn(1);
          var l4 = u3.cmp(c);
          if (l4 < 0) {
            var n4 = u3;
            u3 = c, c = n4;
          } else if (l4 === 0 || c.cmpn(1) === 0)
            break;
          u3.isub(c);
        } while (true);
        return c.iushln(b3);
      }, f4.prototype.invm = function(s2) {
        return this.egcd(s2).a.umod(s2);
      }, f4.prototype.isEven = function() {
        return (this.words[0] & 1) === 0;
      }, f4.prototype.isOdd = function() {
        return (this.words[0] & 1) === 1;
      }, f4.prototype.andln = function(s2) {
        return this.words[0] & s2;
      }, f4.prototype.bincn = function(s2) {
        r2(typeof s2 == "number");
        var u3 = s2 % 26, c = (s2 - u3) / 26, b3 = 1 << u3;
        if (this.length <= c)
          return this._expand(c + 1), this.words[c] |= b3, this;
        for (var l4 = b3, n4 = c;l4 !== 0 && n4 < this.length; n4++) {
          var d2 = this.words[n4] | 0;
          d2 += l4, l4 = d2 >>> 26, d2 &= 67108863, this.words[n4] = d2;
        }
        return l4 !== 0 && (this.words[n4] = l4, this.length++), this;
      }, f4.prototype.isZero = function() {
        return this.length === 1 && this.words[0] === 0;
      }, f4.prototype.cmpn = function(s2) {
        var u3 = s2 < 0;
        if (this.negative !== 0 && !u3)
          return -1;
        if (this.negative === 0 && u3)
          return 1;
        this._strip();
        var c;
        if (this.length > 1)
          c = 1;
        else {
          u3 && (s2 = -s2), r2(s2 <= 67108863, "Number is too big");
          var b3 = this.words[0] | 0;
          c = b3 === s2 ? 0 : b3 < s2 ? -1 : 1;
        }
        return this.negative !== 0 ? -c | 0 : c;
      }, f4.prototype.cmp = function(s2) {
        if (this.negative !== 0 && s2.negative === 0)
          return -1;
        if (this.negative === 0 && s2.negative !== 0)
          return 1;
        var u3 = this.ucmp(s2);
        return this.negative !== 0 ? -u3 | 0 : u3;
      }, f4.prototype.ucmp = function(s2) {
        if (this.length > s2.length)
          return 1;
        if (this.length < s2.length)
          return -1;
        for (var u3 = 0, c = this.length - 1;c >= 0; c--) {
          var b3 = this.words[c] | 0, l4 = s2.words[c] | 0;
          if (b3 !== l4) {
            b3 < l4 ? u3 = -1 : b3 > l4 && (u3 = 1);
            break;
          }
        }
        return u3;
      }, f4.prototype.gtn = function(s2) {
        return this.cmpn(s2) === 1;
      }, f4.prototype.gt = function(s2) {
        return this.cmp(s2) === 1;
      }, f4.prototype.gten = function(s2) {
        return this.cmpn(s2) >= 0;
      }, f4.prototype.gte = function(s2) {
        return this.cmp(s2) >= 0;
      }, f4.prototype.ltn = function(s2) {
        return this.cmpn(s2) === -1;
      }, f4.prototype.lt = function(s2) {
        return this.cmp(s2) === -1;
      }, f4.prototype.lten = function(s2) {
        return this.cmpn(s2) <= 0;
      }, f4.prototype.lte = function(s2) {
        return this.cmp(s2) <= 0;
      }, f4.prototype.eqn = function(s2) {
        return this.cmpn(s2) === 0;
      }, f4.prototype.eq = function(s2) {
        return this.cmp(s2) === 0;
      }, f4.red = function(s2) {
        return new i2(s2);
      }, f4.prototype.toRed = function(s2) {
        return r2(!this.red, "Already a number in reduction context"), r2(this.negative === 0, "red works only with positives"), s2.convertTo(this)._forceRed(s2);
      }, f4.prototype.fromRed = function() {
        return r2(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
      }, f4.prototype._forceRed = function(s2) {
        return this.red = s2, this;
      }, f4.prototype.forceRed = function(s2) {
        return r2(!this.red, "Already a number in reduction context"), this._forceRed(s2);
      }, f4.prototype.redAdd = function(s2) {
        return r2(this.red, "redAdd works only with red numbers"), this.red.add(this, s2);
      }, f4.prototype.redIAdd = function(s2) {
        return r2(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, s2);
      }, f4.prototype.redSub = function(s2) {
        return r2(this.red, "redSub works only with red numbers"), this.red.sub(this, s2);
      }, f4.prototype.redISub = function(s2) {
        return r2(this.red, "redISub works only with red numbers"), this.red.isub(this, s2);
      }, f4.prototype.redShl = function(s2) {
        return r2(this.red, "redShl works only with red numbers"), this.red.shl(this, s2);
      }, f4.prototype.redMul = function(s2) {
        return r2(this.red, "redMul works only with red numbers"), this.red._verify2(this, s2), this.red.mul(this, s2);
      }, f4.prototype.redIMul = function(s2) {
        return r2(this.red, "redMul works only with red numbers"), this.red._verify2(this, s2), this.red.imul(this, s2);
      }, f4.prototype.redSqr = function() {
        return r2(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
      }, f4.prototype.redISqr = function() {
        return r2(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
      }, f4.prototype.redSqrt = function() {
        return r2(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
      }, f4.prototype.redInvm = function() {
        return r2(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
      }, f4.prototype.redNeg = function() {
        return r2(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
      }, f4.prototype.redPow = function(s2) {
        return r2(this.red && !s2.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, s2);
      };
      var Re = { k256: null, p224: null, p192: null, p25519: null };
      function Ee(h5, s2) {
        this.name = h5, this.p = new f4(s2, 16), this.n = this.p.bitLength(), this.k = new f4(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
      }
      Ee.prototype._tmp = function() {
        var s2 = new f4(null);
        return s2.words = new Array(Math.ceil(this.n / 13)), s2;
      }, Ee.prototype.ireduce = function(s2) {
        var u3 = s2, c;
        do
          this.split(u3, this.tmp), u3 = this.imulK(u3), u3 = u3.iadd(this.tmp), c = u3.bitLength();
        while (c > this.n);
        var b3 = c < this.n ? -1 : u3.ucmp(this.p);
        return b3 === 0 ? (u3.words[0] = 0, u3.length = 1) : b3 > 0 ? u3.isub(this.p) : u3.strip !== undefined ? u3.strip() : u3._strip(), u3;
      }, Ee.prototype.split = function(s2, u3) {
        s2.iushrn(this.n, 0, u3);
      }, Ee.prototype.imulK = function(s2) {
        return s2.imul(this.k);
      };
      function Ae() {
        Ee.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      o2(Ae, Ee), Ae.prototype.split = function(s2, u3) {
        for (var c = 4194303, b3 = Math.min(s2.length, 9), l4 = 0;l4 < b3; l4++)
          u3.words[l4] = s2.words[l4];
        if (u3.length = b3, s2.length <= 9) {
          s2.words[0] = 0, s2.length = 1;
          return;
        }
        var n4 = s2.words[9];
        for (u3.words[u3.length++] = n4 & c, l4 = 10;l4 < s2.length; l4++) {
          var d2 = s2.words[l4] | 0;
          s2.words[l4 - 10] = (d2 & c) << 4 | n4 >>> 22, n4 = d2;
        }
        n4 >>>= 22, s2.words[l4 - 10] = n4, n4 === 0 && s2.length > 10 ? s2.length -= 10 : s2.length -= 9;
      }, Ae.prototype.imulK = function(s2) {
        s2.words[s2.length] = 0, s2.words[s2.length + 1] = 0, s2.length += 2;
        for (var u3 = 0, c = 0;c < s2.length; c++) {
          var b3 = s2.words[c] | 0;
          u3 += b3 * 977, s2.words[c] = u3 & 67108863, u3 = b3 * 64 + (u3 / 67108864 | 0);
        }
        return s2.words[s2.length - 1] === 0 && (s2.length--, s2.words[s2.length - 1] === 0 && s2.length--), s2;
      };
      function P22() {
        Ee.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      o2(P22, Ee);
      function Se() {
        Ee.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      o2(Se, Ee);
      function v3() {
        Ee.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      o2(v3, Ee), v3.prototype.imulK = function(s2) {
        for (var u3 = 0, c = 0;c < s2.length; c++) {
          var b3 = (s2.words[c] | 0) * 19 + u3, l4 = b3 & 67108863;
          b3 >>>= 26, s2.words[c] = l4, u3 = b3;
        }
        return u3 !== 0 && (s2.words[s2.length++] = u3), s2;
      }, f4._prime = function(s2) {
        if (Re[s2])
          return Re[s2];
        var u3;
        if (s2 === "k256")
          u3 = new Ae;
        else if (s2 === "p224")
          u3 = new P22;
        else if (s2 === "p192")
          u3 = new Se;
        else if (s2 === "p25519")
          u3 = new v3;
        else
          throw new Error("Unknown prime " + s2);
        return Re[s2] = u3, u3;
      };
      function i2(h5) {
        if (typeof h5 == "string") {
          var s2 = f4._prime(h5);
          this.m = s2.p, this.prime = s2;
        } else
          r2(h5.gtn(1), "modulus must be greater than 1"), this.m = h5, this.prime = null;
      }
      i2.prototype._verify1 = function(s2) {
        r2(s2.negative === 0, "red works only with positives"), r2(s2.red, "red works only with red numbers");
      }, i2.prototype._verify2 = function(s2, u3) {
        r2((s2.negative | u3.negative) === 0, "red works only with positives"), r2(s2.red && s2.red === u3.red, "red works only with red numbers");
      }, i2.prototype.imod = function(s2) {
        return this.prime ? this.prime.ireduce(s2)._forceRed(this) : (x32(s2, s2.umod(this.m)._forceRed(this)), s2);
      }, i2.prototype.neg = function(s2) {
        return s2.isZero() ? s2.clone() : this.m.sub(s2)._forceRed(this);
      }, i2.prototype.add = function(s2, u3) {
        this._verify2(s2, u3);
        var c = s2.add(u3);
        return c.cmp(this.m) >= 0 && c.isub(this.m), c._forceRed(this);
      }, i2.prototype.iadd = function(s2, u3) {
        this._verify2(s2, u3);
        var c = s2.iadd(u3);
        return c.cmp(this.m) >= 0 && c.isub(this.m), c;
      }, i2.prototype.sub = function(s2, u3) {
        this._verify2(s2, u3);
        var c = s2.sub(u3);
        return c.cmpn(0) < 0 && c.iadd(this.m), c._forceRed(this);
      }, i2.prototype.isub = function(s2, u3) {
        this._verify2(s2, u3);
        var c = s2.isub(u3);
        return c.cmpn(0) < 0 && c.iadd(this.m), c;
      }, i2.prototype.shl = function(s2, u3) {
        return this._verify1(s2), this.imod(s2.ushln(u3));
      }, i2.prototype.imul = function(s2, u3) {
        return this._verify2(s2, u3), this.imod(s2.imul(u3));
      }, i2.prototype.mul = function(s2, u3) {
        return this._verify2(s2, u3), this.imod(s2.mul(u3));
      }, i2.prototype.isqr = function(s2) {
        return this.imul(s2, s2.clone());
      }, i2.prototype.sqr = function(s2) {
        return this.mul(s2, s2);
      }, i2.prototype.sqrt = function(s2) {
        if (s2.isZero())
          return s2.clone();
        var u3 = this.m.andln(3);
        if (r2(u3 % 2 === 1), u3 === 3) {
          var c = this.m.add(new f4(1)).iushrn(2);
          return this.pow(s2, c);
        }
        for (var b3 = this.m.subn(1), l4 = 0;!b3.isZero() && b3.andln(1) === 0; )
          l4++, b3.iushrn(1);
        r2(!b3.isZero());
        var n4 = new f4(1).toRed(this), d2 = n4.redNeg(), w2 = this.m.subn(1).iushrn(1), g2 = this.m.bitLength();
        for (g2 = new f4(2 * g2 * g2).toRed(this);this.pow(g2, w2).cmp(d2) !== 0; )
          g2.redIAdd(d2);
        for (var _3 = this.pow(g2, b3), A6 = this.pow(s2, b3.addn(1).iushrn(1)), R3 = this.pow(s2, b3), I2 = l4;R3.cmp(n4) !== 0; ) {
          for (var Me = R3, k2 = 0;Me.cmp(n4) !== 0; k2++)
            Me = Me.redSqr();
          r2(k2 < I2);
          var D2 = this.pow(_3, new f4(1).iushln(I2 - k2 - 1));
          A6 = A6.redMul(D2), _3 = D2.redSqr(), R3 = R3.redMul(_3), I2 = k2;
        }
        return A6;
      }, i2.prototype.invm = function(s2) {
        var u3 = s2._invmp(this.m);
        return u3.negative !== 0 ? (u3.negative = 0, this.imod(u3).redNeg()) : this.imod(u3);
      }, i2.prototype.pow = function(s2, u3) {
        if (u3.isZero())
          return new f4(1).toRed(this);
        if (u3.cmpn(1) === 0)
          return s2.clone();
        var c = 4, b3 = new Array(1 << c);
        b3[0] = new f4(1).toRed(this), b3[1] = s2;
        for (var l4 = 2;l4 < b3.length; l4++)
          b3[l4] = this.mul(b3[l4 - 1], s2);
        var n4 = b3[0], d2 = 0, w2 = 0, g2 = u3.bitLength() % 26;
        for (g2 === 0 && (g2 = 26), l4 = u3.length - 1;l4 >= 0; l4--) {
          for (var _3 = u3.words[l4], A6 = g2 - 1;A6 >= 0; A6--) {
            var R3 = _3 >> A6 & 1;
            if (n4 !== b3[0] && (n4 = this.sqr(n4)), R3 === 0 && d2 === 0) {
              w2 = 0;
              continue;
            }
            d2 <<= 1, d2 |= R3, w2++, !(w2 !== c && (l4 !== 0 || A6 !== 0)) && (n4 = this.mul(n4, b3[d2]), w2 = 0, d2 = 0);
          }
          g2 = 26;
        }
        return n4;
      }, i2.prototype.convertTo = function(s2) {
        var u3 = s2.umod(this.m);
        return u3 === s2 ? u3.clone() : u3;
      }, i2.prototype.convertFrom = function(s2) {
        var u3 = s2.clone();
        return u3.red = null, u3;
      }, f4.mont = function(s2) {
        return new a3(s2);
      };
      function a3(h5) {
        i2.call(this, h5), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new f4(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
      }
      o2(a3, i2), a3.prototype.convertTo = function(s2) {
        return this.imod(s2.ushln(this.shift));
      }, a3.prototype.convertFrom = function(s2) {
        var u3 = this.imod(s2.mul(this.rinv));
        return u3.red = null, u3;
      }, a3.prototype.imul = function(s2, u3) {
        if (s2.isZero() || u3.isZero())
          return s2.words[0] = 0, s2.length = 1, s2;
        var c = s2.imul(u3), b3 = c.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), l4 = c.isub(b3).iushrn(this.shift), n4 = l4;
        return l4.cmp(this.m) >= 0 ? n4 = l4.isub(this.m) : l4.cmpn(0) < 0 && (n4 = l4.iadd(this.m)), n4._forceRed(this);
      }, a3.prototype.mul = function(s2, u3) {
        if (s2.isZero() || u3.isZero())
          return new f4(0)._forceRed(this);
        var c = s2.mul(u3), b3 = c.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), l4 = c.isub(b3).iushrn(this.shift), n4 = l4;
        return l4.cmp(this.m) >= 0 ? n4 = l4.isub(this.m) : l4.cmpn(0) < 0 && (n4 = l4.iadd(this.m)), n4._forceRed(this);
      }, a3.prototype.invm = function(s2) {
        var u3 = this.imod(s2._invmp(this.m).mul(this.r2));
        return u3._forceRed(this);
      };
    })(typeof Tl > "u" || Tl, t2);
  });
  Ws = T3((mk, n22) => {
    var Rf = Hs(), nA = on();
    function fA(t2) {
      var e3 = r2(t2), r3 = e3.toRed(Rf.mont(t2.modulus)).redPow(new Rf(t2.publicExponent)).fromRed();
      return { blinder: r3, unblinder: e3.invm(t2.modulus) };
    }
    function r2(t2) {
      var e3 = t2.modulus.byteLength(), r3;
      do
        r3 = new Rf(nA(e3));
      while (r3.cmp(t2.modulus) >= 0 || !r3.umod(t2.prime1) || !r3.umod(t2.prime2));
      return r3;
    }
    function i2(t2, e3) {
      var r3 = fA(e3), o2 = e3.modulus.byteLength(), f4 = new Rf(t2).mul(r3.blinder).umod(e3.modulus), p32 = f4.toRed(Rf.mont(e3.prime1)), m4 = f4.toRed(Rf.mont(e3.prime2)), y32 = e3.coefficient, M3 = e3.prime1, x32 = e3.prime2, S3 = p32.redPow(e3.exponent1).fromRed(), E3 = m4.redPow(e3.exponent2).fromRed(), B5 = S3.isub(E3).imul(y32).umod(M3).imul(x32);
      return E3.iadd(B5).imul(r3.unblinder).umod(e3.modulus).toArrayLike(Buffer, "be", o2);
    }
    i2.getr = r2;
    n22.exports = i2;
  });
  f22 = T3((gk, aA) => {
    aA.exports = { name: "elliptic", version: "6.5.4", description: "EC cryptography", main: "lib/elliptic.js", files: ["lib"], scripts: { lint: "eslint lib test", "lint:fix": "npm run lint -- --fix", unit: "istanbul test _mocha --reporter=spec test/index.js", test: "npm run lint && npm run unit", version: "grunt dist && git add dist/" }, repository: { type: "git", url: "git@github.com:indutny/elliptic" }, keywords: ["EC", "Elliptic", "curve", "Cryptography"], author: "Fedor Indutny <fedor@indutny.com>", license: "MIT", bugs: { url: "https://github.com/indutny/elliptic/issues" }, homepage: "https://github.com/indutny/elliptic", devDependencies: { brfs: "^2.0.2", coveralls: "^3.1.0", eslint: "^7.6.0", grunt: "^1.2.1", "grunt-browserify": "^5.3.0", "grunt-cli": "^1.3.2", "grunt-contrib-connect": "^3.0.0", "grunt-contrib-copy": "^1.0.0", "grunt-contrib-uglify": "^5.0.0", "grunt-mocha-istanbul": "^5.0.2", "grunt-saucelabs": "^9.0.1", istanbul: "^0.4.5", mocha: "^8.0.1" }, dependencies: { "bn.js": "^4.11.9", brorand: "^1.1.0", "hash.js": "^1.0.0", "hmac-drbg": "^1.0.1", inherits: "^2.0.4", "minimalistic-assert": "^1.0.1", "minimalistic-crypto-utils": "^1.0.1" } };
  });
  ri = T3((a22, kl) => {
    (function(t2, e3) {
      function r2(v3, i2) {
        if (!v3)
          throw new Error(i2 || "Assertion failed");
      }
      function o2(v3, i2) {
        v3.super_ = i2;
        var a3 = function() {};
        a3.prototype = i2.prototype, v3.prototype = new a3, v3.prototype.constructor = v3;
      }
      function f4(v3, i2, a3) {
        if (f4.isBN(v3))
          return v3;
        this.negative = 0, this.words = null, this.length = 0, this.red = null, v3 !== null && ((i2 === "le" || i2 === "be") && (a3 = i2, i2 = 10), this._init(v3 || 0, i2 || 10, a3 || "be"));
      }
      typeof t2 == "object" ? t2.exports = f4 : e3.BN = f4, f4.BN = f4, f4.wordSize = 26;
      var p32;
      try {
        typeof window < "u" && typeof window.Buffer < "u" ? p32 = window.Buffer : p32 = ji().Buffer;
      } catch {}
      f4.isBN = function(i2) {
        return i2 instanceof f4 ? true : i2 !== null && typeof i2 == "object" && i2.constructor.wordSize === f4.wordSize && Array.isArray(i2.words);
      }, f4.max = function(i2, a3) {
        return i2.cmp(a3) > 0 ? i2 : a3;
      }, f4.min = function(i2, a3) {
        return i2.cmp(a3) < 0 ? i2 : a3;
      }, f4.prototype._init = function(i2, a3, h5) {
        if (typeof i2 == "number")
          return this._initNumber(i2, a3, h5);
        if (typeof i2 == "object")
          return this._initArray(i2, a3, h5);
        a3 === "hex" && (a3 = 16), r2(a3 === (a3 | 0) && a3 >= 2 && a3 <= 36), i2 = i2.toString().replace(/\s+/g, "");
        var s2 = 0;
        i2[0] === "-" && (s2++, this.negative = 1), s2 < i2.length && (a3 === 16 ? this._parseHex(i2, s2, h5) : (this._parseBase(i2, a3, s2), h5 === "le" && this._initArray(this.toArray(), a3, h5)));
      }, f4.prototype._initNumber = function(i2, a3, h5) {
        i2 < 0 && (this.negative = 1, i2 = -i2), i2 < 67108864 ? (this.words = [i2 & 67108863], this.length = 1) : i2 < 4503599627370496 ? (this.words = [i2 & 67108863, i2 / 67108864 & 67108863], this.length = 2) : (r2(i2 < 9007199254740992), this.words = [i2 & 67108863, i2 / 67108864 & 67108863, 1], this.length = 3), h5 === "le" && this._initArray(this.toArray(), a3, h5);
      }, f4.prototype._initArray = function(i2, a3, h5) {
        if (r2(typeof i2.length == "number"), i2.length <= 0)
          return this.words = [0], this.length = 1, this;
        this.length = Math.ceil(i2.length / 3), this.words = new Array(this.length);
        for (var s2 = 0;s2 < this.length; s2++)
          this.words[s2] = 0;
        var u3, c, b3 = 0;
        if (h5 === "be")
          for (s2 = i2.length - 1, u3 = 0;s2 >= 0; s2 -= 3)
            c = i2[s2] | i2[s2 - 1] << 8 | i2[s2 - 2] << 16, this.words[u3] |= c << b3 & 67108863, this.words[u3 + 1] = c >>> 26 - b3 & 67108863, b3 += 24, b3 >= 26 && (b3 -= 26, u3++);
        else if (h5 === "le")
          for (s2 = 0, u3 = 0;s2 < i2.length; s2 += 3)
            c = i2[s2] | i2[s2 + 1] << 8 | i2[s2 + 2] << 16, this.words[u3] |= c << b3 & 67108863, this.words[u3 + 1] = c >>> 26 - b3 & 67108863, b3 += 24, b3 >= 26 && (b3 -= 26, u3++);
        return this.strip();
      };
      function m4(v3, i2) {
        var a3 = v3.charCodeAt(i2);
        return a3 >= 65 && a3 <= 70 ? a3 - 55 : a3 >= 97 && a3 <= 102 ? a3 - 87 : a3 - 48 & 15;
      }
      function y32(v3, i2, a3) {
        var h5 = m4(v3, a3);
        return a3 - 1 >= i2 && (h5 |= m4(v3, a3 - 1) << 4), h5;
      }
      f4.prototype._parseHex = function(i2, a3, h5) {
        this.length = Math.ceil((i2.length - a3) / 6), this.words = new Array(this.length);
        for (var s2 = 0;s2 < this.length; s2++)
          this.words[s2] = 0;
        var u3 = 0, c = 0, b3;
        if (h5 === "be")
          for (s2 = i2.length - 1;s2 >= a3; s2 -= 2)
            b3 = y32(i2, a3, s2) << u3, this.words[c] |= b3 & 67108863, u3 >= 18 ? (u3 -= 18, c += 1, this.words[c] |= b3 >>> 26) : u3 += 8;
        else {
          var l4 = i2.length - a3;
          for (s2 = l4 % 2 === 0 ? a3 + 1 : a3;s2 < i2.length; s2 += 2)
            b3 = y32(i2, a3, s2) << u3, this.words[c] |= b3 & 67108863, u3 >= 18 ? (u3 -= 18, c += 1, this.words[c] |= b3 >>> 26) : u3 += 8;
        }
        this.strip();
      };
      function M3(v3, i2, a3, h5) {
        for (var s2 = 0, u3 = Math.min(v3.length, a3), c = i2;c < u3; c++) {
          var b3 = v3.charCodeAt(c) - 48;
          s2 *= h5, b3 >= 49 ? s2 += b3 - 49 + 10 : b3 >= 17 ? s2 += b3 - 17 + 10 : s2 += b3;
        }
        return s2;
      }
      f4.prototype._parseBase = function(i2, a3, h5) {
        this.words = [0], this.length = 1;
        for (var s2 = 0, u3 = 1;u3 <= 67108863; u3 *= a3)
          s2++;
        s2--, u3 = u3 / a3 | 0;
        for (var c = i2.length - h5, b3 = c % s2, l4 = Math.min(c, c - b3) + h5, n4 = 0, d2 = h5;d2 < l4; d2 += s2)
          n4 = M3(i2, d2, d2 + s2, a3), this.imuln(u3), this.words[0] + n4 < 67108864 ? this.words[0] += n4 : this._iaddn(n4);
        if (b3 !== 0) {
          var w2 = 1;
          for (n4 = M3(i2, d2, i2.length, a3), d2 = 0;d2 < b3; d2++)
            w2 *= a3;
          this.imuln(w2), this.words[0] + n4 < 67108864 ? this.words[0] += n4 : this._iaddn(n4);
        }
        this.strip();
      }, f4.prototype.copy = function(i2) {
        i2.words = new Array(this.length);
        for (var a3 = 0;a3 < this.length; a3++)
          i2.words[a3] = this.words[a3];
        i2.length = this.length, i2.negative = this.negative, i2.red = this.red;
      }, f4.prototype.clone = function() {
        var i2 = new f4(null);
        return this.copy(i2), i2;
      }, f4.prototype._expand = function(i2) {
        for (;this.length < i2; )
          this.words[this.length++] = 0;
        return this;
      }, f4.prototype.strip = function() {
        for (;this.length > 1 && this.words[this.length - 1] === 0; )
          this.length--;
        return this._normSign();
      }, f4.prototype._normSign = function() {
        return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
      }, f4.prototype.inspect = function() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var x32 = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"], S3 = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], E3 = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
      f4.prototype.toString = function(i2, a3) {
        i2 = i2 || 10, a3 = a3 | 0 || 1;
        var h5;
        if (i2 === 16 || i2 === "hex") {
          h5 = "";
          for (var s2 = 0, u3 = 0, c = 0;c < this.length; c++) {
            var b3 = this.words[c], l4 = ((b3 << s2 | u3) & 16777215).toString(16);
            u3 = b3 >>> 24 - s2 & 16777215, u3 !== 0 || c !== this.length - 1 ? h5 = x32[6 - l4.length] + l4 + h5 : h5 = l4 + h5, s2 += 2, s2 >= 26 && (s2 -= 26, c--);
          }
          for (u3 !== 0 && (h5 = u3.toString(16) + h5);h5.length % a3 !== 0; )
            h5 = "0" + h5;
          return this.negative !== 0 && (h5 = "-" + h5), h5;
        }
        if (i2 === (i2 | 0) && i2 >= 2 && i2 <= 36) {
          var n4 = S3[i2], d2 = E3[i2];
          h5 = "";
          var w2 = this.clone();
          for (w2.negative = 0;!w2.isZero(); ) {
            var g2 = w2.modn(d2).toString(i2);
            w2 = w2.idivn(d2), w2.isZero() ? h5 = g2 + h5 : h5 = x32[n4 - g2.length] + g2 + h5;
          }
          for (this.isZero() && (h5 = "0" + h5);h5.length % a3 !== 0; )
            h5 = "0" + h5;
          return this.negative !== 0 && (h5 = "-" + h5), h5;
        }
        r2(false, "Base should be between 2 and 36");
      }, f4.prototype.toNumber = function() {
        var i2 = this.words[0];
        return this.length === 2 ? i2 += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? i2 += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && r2(false, "Number can only safely store up to 53 bits"), this.negative !== 0 ? -i2 : i2;
      }, f4.prototype.toJSON = function() {
        return this.toString(16);
      }, f4.prototype.toBuffer = function(i2, a3) {
        return r2(typeof p32 < "u"), this.toArrayLike(p32, i2, a3);
      }, f4.prototype.toArray = function(i2, a3) {
        return this.toArrayLike(Array, i2, a3);
      }, f4.prototype.toArrayLike = function(i2, a3, h5) {
        var s2 = this.byteLength(), u3 = h5 || Math.max(1, s2);
        r2(s2 <= u3, "byte array longer than desired length"), r2(u3 > 0, "Requested array length <= 0"), this.strip();
        var c = a3 === "le", b3 = new i2(u3), l4, n4, d2 = this.clone();
        if (c) {
          for (n4 = 0;!d2.isZero(); n4++)
            l4 = d2.andln(255), d2.iushrn(8), b3[n4] = l4;
          for (;n4 < u3; n4++)
            b3[n4] = 0;
        } else {
          for (n4 = 0;n4 < u3 - s2; n4++)
            b3[n4] = 0;
          for (n4 = 0;!d2.isZero(); n4++)
            l4 = d2.andln(255), d2.iushrn(8), b3[u3 - n4 - 1] = l4;
        }
        return b3;
      }, Math.clz32 ? f4.prototype._countBits = function(i2) {
        return 32 - Math.clz32(i2);
      } : f4.prototype._countBits = function(i2) {
        var a3 = i2, h5 = 0;
        return a3 >= 4096 && (h5 += 13, a3 >>>= 13), a3 >= 64 && (h5 += 7, a3 >>>= 7), a3 >= 8 && (h5 += 4, a3 >>>= 4), a3 >= 2 && (h5 += 2, a3 >>>= 2), h5 + a3;
      }, f4.prototype._zeroBits = function(i2) {
        if (i2 === 0)
          return 26;
        var a3 = i2, h5 = 0;
        return (a3 & 8191) === 0 && (h5 += 13, a3 >>>= 13), (a3 & 127) === 0 && (h5 += 7, a3 >>>= 7), (a3 & 15) === 0 && (h5 += 4, a3 >>>= 4), (a3 & 3) === 0 && (h5 += 2, a3 >>>= 2), (a3 & 1) === 0 && h5++, h5;
      }, f4.prototype.bitLength = function() {
        var i2 = this.words[this.length - 1], a3 = this._countBits(i2);
        return (this.length - 1) * 26 + a3;
      };
      function B5(v3) {
        for (var i2 = new Array(v3.bitLength()), a3 = 0;a3 < i2.length; a3++) {
          var h5 = a3 / 26 | 0, s2 = a3 % 26;
          i2[a3] = (v3.words[h5] & 1 << s2) >>> s2;
        }
        return i2;
      }
      f4.prototype.zeroBits = function() {
        if (this.isZero())
          return 0;
        for (var i2 = 0, a3 = 0;a3 < this.length; a3++) {
          var h5 = this._zeroBits(this.words[a3]);
          if (i2 += h5, h5 !== 26)
            break;
        }
        return i2;
      }, f4.prototype.byteLength = function() {
        return Math.ceil(this.bitLength() / 8);
      }, f4.prototype.toTwos = function(i2) {
        return this.negative !== 0 ? this.abs().inotn(i2).iaddn(1) : this.clone();
      }, f4.prototype.fromTwos = function(i2) {
        return this.testn(i2 - 1) ? this.notn(i2).iaddn(1).ineg() : this.clone();
      }, f4.prototype.isNeg = function() {
        return this.negative !== 0;
      }, f4.prototype.neg = function() {
        return this.clone().ineg();
      }, f4.prototype.ineg = function() {
        return this.isZero() || (this.negative ^= 1), this;
      }, f4.prototype.iuor = function(i2) {
        for (;this.length < i2.length; )
          this.words[this.length++] = 0;
        for (var a3 = 0;a3 < i2.length; a3++)
          this.words[a3] = this.words[a3] | i2.words[a3];
        return this.strip();
      }, f4.prototype.ior = function(i2) {
        return r2((this.negative | i2.negative) === 0), this.iuor(i2);
      }, f4.prototype.or = function(i2) {
        return this.length > i2.length ? this.clone().ior(i2) : i2.clone().ior(this);
      }, f4.prototype.uor = function(i2) {
        return this.length > i2.length ? this.clone().iuor(i2) : i2.clone().iuor(this);
      }, f4.prototype.iuand = function(i2) {
        var a3;
        this.length > i2.length ? a3 = i2 : a3 = this;
        for (var h5 = 0;h5 < a3.length; h5++)
          this.words[h5] = this.words[h5] & i2.words[h5];
        return this.length = a3.length, this.strip();
      }, f4.prototype.iand = function(i2) {
        return r2((this.negative | i2.negative) === 0), this.iuand(i2);
      }, f4.prototype.and = function(i2) {
        return this.length > i2.length ? this.clone().iand(i2) : i2.clone().iand(this);
      }, f4.prototype.uand = function(i2) {
        return this.length > i2.length ? this.clone().iuand(i2) : i2.clone().iuand(this);
      }, f4.prototype.iuxor = function(i2) {
        var a3, h5;
        this.length > i2.length ? (a3 = this, h5 = i2) : (a3 = i2, h5 = this);
        for (var s2 = 0;s2 < h5.length; s2++)
          this.words[s2] = a3.words[s2] ^ h5.words[s2];
        if (this !== a3)
          for (;s2 < a3.length; s2++)
            this.words[s2] = a3.words[s2];
        return this.length = a3.length, this.strip();
      }, f4.prototype.ixor = function(i2) {
        return r2((this.negative | i2.negative) === 0), this.iuxor(i2);
      }, f4.prototype.xor = function(i2) {
        return this.length > i2.length ? this.clone().ixor(i2) : i2.clone().ixor(this);
      }, f4.prototype.uxor = function(i2) {
        return this.length > i2.length ? this.clone().iuxor(i2) : i2.clone().iuxor(this);
      }, f4.prototype.inotn = function(i2) {
        r2(typeof i2 == "number" && i2 >= 0);
        var a3 = Math.ceil(i2 / 26) | 0, h5 = i2 % 26;
        this._expand(a3), h5 > 0 && a3--;
        for (var s2 = 0;s2 < a3; s2++)
          this.words[s2] = ~this.words[s2] & 67108863;
        return h5 > 0 && (this.words[s2] = ~this.words[s2] & 67108863 >> 26 - h5), this.strip();
      }, f4.prototype.notn = function(i2) {
        return this.clone().inotn(i2);
      }, f4.prototype.setn = function(i2, a3) {
        r2(typeof i2 == "number" && i2 >= 0);
        var h5 = i2 / 26 | 0, s2 = i2 % 26;
        return this._expand(h5 + 1), a3 ? this.words[h5] = this.words[h5] | 1 << s2 : this.words[h5] = this.words[h5] & ~(1 << s2), this.strip();
      }, f4.prototype.iadd = function(i2) {
        var a3;
        if (this.negative !== 0 && i2.negative === 0)
          return this.negative = 0, a3 = this.isub(i2), this.negative ^= 1, this._normSign();
        if (this.negative === 0 && i2.negative !== 0)
          return i2.negative = 0, a3 = this.isub(i2), i2.negative = 1, a3._normSign();
        var h5, s2;
        this.length > i2.length ? (h5 = this, s2 = i2) : (h5 = i2, s2 = this);
        for (var u3 = 0, c = 0;c < s2.length; c++)
          a3 = (h5.words[c] | 0) + (s2.words[c] | 0) + u3, this.words[c] = a3 & 67108863, u3 = a3 >>> 26;
        for (;u3 !== 0 && c < h5.length; c++)
          a3 = (h5.words[c] | 0) + u3, this.words[c] = a3 & 67108863, u3 = a3 >>> 26;
        if (this.length = h5.length, u3 !== 0)
          this.words[this.length] = u3, this.length++;
        else if (h5 !== this)
          for (;c < h5.length; c++)
            this.words[c] = h5.words[c];
        return this;
      }, f4.prototype.add = function(i2) {
        var a3;
        return i2.negative !== 0 && this.negative === 0 ? (i2.negative = 0, a3 = this.sub(i2), i2.negative ^= 1, a3) : i2.negative === 0 && this.negative !== 0 ? (this.negative = 0, a3 = i2.sub(this), this.negative = 1, a3) : this.length > i2.length ? this.clone().iadd(i2) : i2.clone().iadd(this);
      }, f4.prototype.isub = function(i2) {
        if (i2.negative !== 0) {
          i2.negative = 0;
          var a3 = this.iadd(i2);
          return i2.negative = 1, a3._normSign();
        } else if (this.negative !== 0)
          return this.negative = 0, this.iadd(i2), this.negative = 1, this._normSign();
        var h5 = this.cmp(i2);
        if (h5 === 0)
          return this.negative = 0, this.length = 1, this.words[0] = 0, this;
        var s2, u3;
        h5 > 0 ? (s2 = this, u3 = i2) : (s2 = i2, u3 = this);
        for (var c = 0, b3 = 0;b3 < u3.length; b3++)
          a3 = (s2.words[b3] | 0) - (u3.words[b3] | 0) + c, c = a3 >> 26, this.words[b3] = a3 & 67108863;
        for (;c !== 0 && b3 < s2.length; b3++)
          a3 = (s2.words[b3] | 0) + c, c = a3 >> 26, this.words[b3] = a3 & 67108863;
        if (c === 0 && b3 < s2.length && s2 !== this)
          for (;b3 < s2.length; b3++)
            this.words[b3] = s2.words[b3];
        return this.length = Math.max(this.length, b3), s2 !== this && (this.negative = 1), this.strip();
      }, f4.prototype.sub = function(i2) {
        return this.clone().isub(i2);
      };
      function q2(v3, i2, a3) {
        a3.negative = i2.negative ^ v3.negative;
        var h5 = v3.length + i2.length | 0;
        a3.length = h5, h5 = h5 - 1 | 0;
        var s2 = v3.words[0] | 0, u3 = i2.words[0] | 0, c = s2 * u3, b3 = c & 67108863, l4 = c / 67108864 | 0;
        a3.words[0] = b3;
        for (var n4 = 1;n4 < h5; n4++) {
          for (var d2 = l4 >>> 26, w2 = l4 & 67108863, g2 = Math.min(n4, i2.length - 1), _3 = Math.max(0, n4 - v3.length + 1);_3 <= g2; _3++) {
            var A6 = n4 - _3 | 0;
            s2 = v3.words[A6] | 0, u3 = i2.words[_3] | 0, c = s2 * u3 + w2, d2 += c / 67108864 | 0, w2 = c & 67108863;
          }
          a3.words[n4] = w2 | 0, l4 = d2 | 0;
        }
        return l4 !== 0 ? a3.words[n4] = l4 | 0 : a3.length--, a3.strip();
      }
      var L32 = function(i2, a3, h5) {
        var s2 = i2.words, u3 = a3.words, c = h5.words, b3 = 0, l4, n4, d2, w2 = s2[0] | 0, g2 = w2 & 8191, _3 = w2 >>> 13, A6 = s2[1] | 0, R3 = A6 & 8191, I2 = A6 >>> 13, Me = s2[2] | 0, k2 = Me & 8191, D2 = Me >>> 13, nt = s2[3] | 0, C3 = nt & 8191, O2 = nt >>> 13, vt = s2[4] | 0, F = vt & 8191, U3 = vt >>> 13, bt = s2[5] | 0, z3 = bt & 8191, H32 = bt >>> 13, mt = s2[6] | 0, W22 = mt & 8191, K = mt >>> 13, gt = s2[7] | 0, j2 = gt & 8191, Z3 = gt >>> 13, yt = s2[8] | 0, V4 = yt & 8191, $32 = yt >>> 13, wt = s2[9] | 0, G4 = wt & 8191, Y = wt >>> 13, Mt = u3[0] | 0, X3 = Mt & 8191, J = Mt >>> 13, _t = u3[1] | 0, Q3 = _t & 8191, ee = _t >>> 13, xt = u3[2] | 0, te = xt & 8191, re = xt >>> 13, St = u3[3] | 0, ie = St & 8191, ne = St >>> 13, Et = u3[4] | 0, fe = Et & 8191, ae = Et >>> 13, At = u3[5] | 0, oe = At & 8191, se = At >>> 13, Rt = u3[6] | 0, he = Rt & 8191, ue = Rt >>> 13, Bt = u3[7] | 0, le = Bt & 8191, de = Bt >>> 13, qt = u3[8] | 0, ce = qt & 8191, pe = qt >>> 13, It = u3[9] | 0, ve = It & 8191, be = It >>> 13;
        h5.negative = i2.negative ^ a3.negative, h5.length = 19, l4 = Math.imul(g2, X3), n4 = Math.imul(g2, J), n4 = n4 + Math.imul(_3, X3) | 0, d2 = Math.imul(_3, J);
        var ft = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (ft >>> 26) | 0, ft &= 67108863, l4 = Math.imul(R3, X3), n4 = Math.imul(R3, J), n4 = n4 + Math.imul(I2, X3) | 0, d2 = Math.imul(I2, J), l4 = l4 + Math.imul(g2, Q3) | 0, n4 = n4 + Math.imul(g2, ee) | 0, n4 = n4 + Math.imul(_3, Q3) | 0, d2 = d2 + Math.imul(_3, ee) | 0;
        var Be = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Be >>> 26) | 0, Be &= 67108863, l4 = Math.imul(k2, X3), n4 = Math.imul(k2, J), n4 = n4 + Math.imul(D2, X3) | 0, d2 = Math.imul(D2, J), l4 = l4 + Math.imul(R3, Q3) | 0, n4 = n4 + Math.imul(R3, ee) | 0, n4 = n4 + Math.imul(I2, Q3) | 0, d2 = d2 + Math.imul(I2, ee) | 0, l4 = l4 + Math.imul(g2, te) | 0, n4 = n4 + Math.imul(g2, re) | 0, n4 = n4 + Math.imul(_3, te) | 0, d2 = d2 + Math.imul(_3, re) | 0;
        var qe = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (qe >>> 26) | 0, qe &= 67108863, l4 = Math.imul(C3, X3), n4 = Math.imul(C3, J), n4 = n4 + Math.imul(O2, X3) | 0, d2 = Math.imul(O2, J), l4 = l4 + Math.imul(k2, Q3) | 0, n4 = n4 + Math.imul(k2, ee) | 0, n4 = n4 + Math.imul(D2, Q3) | 0, d2 = d2 + Math.imul(D2, ee) | 0, l4 = l4 + Math.imul(R3, te) | 0, n4 = n4 + Math.imul(R3, re) | 0, n4 = n4 + Math.imul(I2, te) | 0, d2 = d2 + Math.imul(I2, re) | 0, l4 = l4 + Math.imul(g2, ie) | 0, n4 = n4 + Math.imul(g2, ne) | 0, n4 = n4 + Math.imul(_3, ie) | 0, d2 = d2 + Math.imul(_3, ne) | 0;
        var ze = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (ze >>> 26) | 0, ze &= 67108863, l4 = Math.imul(F, X3), n4 = Math.imul(F, J), n4 = n4 + Math.imul(U3, X3) | 0, d2 = Math.imul(U3, J), l4 = l4 + Math.imul(C3, Q3) | 0, n4 = n4 + Math.imul(C3, ee) | 0, n4 = n4 + Math.imul(O2, Q3) | 0, d2 = d2 + Math.imul(O2, ee) | 0, l4 = l4 + Math.imul(k2, te) | 0, n4 = n4 + Math.imul(k2, re) | 0, n4 = n4 + Math.imul(D2, te) | 0, d2 = d2 + Math.imul(D2, re) | 0, l4 = l4 + Math.imul(R3, ie) | 0, n4 = n4 + Math.imul(R3, ne) | 0, n4 = n4 + Math.imul(I2, ie) | 0, d2 = d2 + Math.imul(I2, ne) | 0, l4 = l4 + Math.imul(g2, fe) | 0, n4 = n4 + Math.imul(g2, ae) | 0, n4 = n4 + Math.imul(_3, fe) | 0, d2 = d2 + Math.imul(_3, ae) | 0;
        var He = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (He >>> 26) | 0, He &= 67108863, l4 = Math.imul(z3, X3), n4 = Math.imul(z3, J), n4 = n4 + Math.imul(H32, X3) | 0, d2 = Math.imul(H32, J), l4 = l4 + Math.imul(F, Q3) | 0, n4 = n4 + Math.imul(F, ee) | 0, n4 = n4 + Math.imul(U3, Q3) | 0, d2 = d2 + Math.imul(U3, ee) | 0, l4 = l4 + Math.imul(C3, te) | 0, n4 = n4 + Math.imul(C3, re) | 0, n4 = n4 + Math.imul(O2, te) | 0, d2 = d2 + Math.imul(O2, re) | 0, l4 = l4 + Math.imul(k2, ie) | 0, n4 = n4 + Math.imul(k2, ne) | 0, n4 = n4 + Math.imul(D2, ie) | 0, d2 = d2 + Math.imul(D2, ne) | 0, l4 = l4 + Math.imul(R3, fe) | 0, n4 = n4 + Math.imul(R3, ae) | 0, n4 = n4 + Math.imul(I2, fe) | 0, d2 = d2 + Math.imul(I2, ae) | 0, l4 = l4 + Math.imul(g2, oe) | 0, n4 = n4 + Math.imul(g2, se) | 0, n4 = n4 + Math.imul(_3, oe) | 0, d2 = d2 + Math.imul(_3, se) | 0;
        var We = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (We >>> 26) | 0, We &= 67108863, l4 = Math.imul(W22, X3), n4 = Math.imul(W22, J), n4 = n4 + Math.imul(K, X3) | 0, d2 = Math.imul(K, J), l4 = l4 + Math.imul(z3, Q3) | 0, n4 = n4 + Math.imul(z3, ee) | 0, n4 = n4 + Math.imul(H32, Q3) | 0, d2 = d2 + Math.imul(H32, ee) | 0, l4 = l4 + Math.imul(F, te) | 0, n4 = n4 + Math.imul(F, re) | 0, n4 = n4 + Math.imul(U3, te) | 0, d2 = d2 + Math.imul(U3, re) | 0, l4 = l4 + Math.imul(C3, ie) | 0, n4 = n4 + Math.imul(C3, ne) | 0, n4 = n4 + Math.imul(O2, ie) | 0, d2 = d2 + Math.imul(O2, ne) | 0, l4 = l4 + Math.imul(k2, fe) | 0, n4 = n4 + Math.imul(k2, ae) | 0, n4 = n4 + Math.imul(D2, fe) | 0, d2 = d2 + Math.imul(D2, ae) | 0, l4 = l4 + Math.imul(R3, oe) | 0, n4 = n4 + Math.imul(R3, se) | 0, n4 = n4 + Math.imul(I2, oe) | 0, d2 = d2 + Math.imul(I2, se) | 0, l4 = l4 + Math.imul(g2, he) | 0, n4 = n4 + Math.imul(g2, ue) | 0, n4 = n4 + Math.imul(_3, he) | 0, d2 = d2 + Math.imul(_3, ue) | 0;
        var Ke = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ke >>> 26) | 0, Ke &= 67108863, l4 = Math.imul(j2, X3), n4 = Math.imul(j2, J), n4 = n4 + Math.imul(Z3, X3) | 0, d2 = Math.imul(Z3, J), l4 = l4 + Math.imul(W22, Q3) | 0, n4 = n4 + Math.imul(W22, ee) | 0, n4 = n4 + Math.imul(K, Q3) | 0, d2 = d2 + Math.imul(K, ee) | 0, l4 = l4 + Math.imul(z3, te) | 0, n4 = n4 + Math.imul(z3, re) | 0, n4 = n4 + Math.imul(H32, te) | 0, d2 = d2 + Math.imul(H32, re) | 0, l4 = l4 + Math.imul(F, ie) | 0, n4 = n4 + Math.imul(F, ne) | 0, n4 = n4 + Math.imul(U3, ie) | 0, d2 = d2 + Math.imul(U3, ne) | 0, l4 = l4 + Math.imul(C3, fe) | 0, n4 = n4 + Math.imul(C3, ae) | 0, n4 = n4 + Math.imul(O2, fe) | 0, d2 = d2 + Math.imul(O2, ae) | 0, l4 = l4 + Math.imul(k2, oe) | 0, n4 = n4 + Math.imul(k2, se) | 0, n4 = n4 + Math.imul(D2, oe) | 0, d2 = d2 + Math.imul(D2, se) | 0, l4 = l4 + Math.imul(R3, he) | 0, n4 = n4 + Math.imul(R3, ue) | 0, n4 = n4 + Math.imul(I2, he) | 0, d2 = d2 + Math.imul(I2, ue) | 0, l4 = l4 + Math.imul(g2, le) | 0, n4 = n4 + Math.imul(g2, de) | 0, n4 = n4 + Math.imul(_3, le) | 0, d2 = d2 + Math.imul(_3, de) | 0;
        var je = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (je >>> 26) | 0, je &= 67108863, l4 = Math.imul(V4, X3), n4 = Math.imul(V4, J), n4 = n4 + Math.imul($32, X3) | 0, d2 = Math.imul($32, J), l4 = l4 + Math.imul(j2, Q3) | 0, n4 = n4 + Math.imul(j2, ee) | 0, n4 = n4 + Math.imul(Z3, Q3) | 0, d2 = d2 + Math.imul(Z3, ee) | 0, l4 = l4 + Math.imul(W22, te) | 0, n4 = n4 + Math.imul(W22, re) | 0, n4 = n4 + Math.imul(K, te) | 0, d2 = d2 + Math.imul(K, re) | 0, l4 = l4 + Math.imul(z3, ie) | 0, n4 = n4 + Math.imul(z3, ne) | 0, n4 = n4 + Math.imul(H32, ie) | 0, d2 = d2 + Math.imul(H32, ne) | 0, l4 = l4 + Math.imul(F, fe) | 0, n4 = n4 + Math.imul(F, ae) | 0, n4 = n4 + Math.imul(U3, fe) | 0, d2 = d2 + Math.imul(U3, ae) | 0, l4 = l4 + Math.imul(C3, oe) | 0, n4 = n4 + Math.imul(C3, se) | 0, n4 = n4 + Math.imul(O2, oe) | 0, d2 = d2 + Math.imul(O2, se) | 0, l4 = l4 + Math.imul(k2, he) | 0, n4 = n4 + Math.imul(k2, ue) | 0, n4 = n4 + Math.imul(D2, he) | 0, d2 = d2 + Math.imul(D2, ue) | 0, l4 = l4 + Math.imul(R3, le) | 0, n4 = n4 + Math.imul(R3, de) | 0, n4 = n4 + Math.imul(I2, le) | 0, d2 = d2 + Math.imul(I2, de) | 0, l4 = l4 + Math.imul(g2, ce) | 0, n4 = n4 + Math.imul(g2, pe) | 0, n4 = n4 + Math.imul(_3, ce) | 0, d2 = d2 + Math.imul(_3, pe) | 0;
        var Ze = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ze >>> 26) | 0, Ze &= 67108863, l4 = Math.imul(G4, X3), n4 = Math.imul(G4, J), n4 = n4 + Math.imul(Y, X3) | 0, d2 = Math.imul(Y, J), l4 = l4 + Math.imul(V4, Q3) | 0, n4 = n4 + Math.imul(V4, ee) | 0, n4 = n4 + Math.imul($32, Q3) | 0, d2 = d2 + Math.imul($32, ee) | 0, l4 = l4 + Math.imul(j2, te) | 0, n4 = n4 + Math.imul(j2, re) | 0, n4 = n4 + Math.imul(Z3, te) | 0, d2 = d2 + Math.imul(Z3, re) | 0, l4 = l4 + Math.imul(W22, ie) | 0, n4 = n4 + Math.imul(W22, ne) | 0, n4 = n4 + Math.imul(K, ie) | 0, d2 = d2 + Math.imul(K, ne) | 0, l4 = l4 + Math.imul(z3, fe) | 0, n4 = n4 + Math.imul(z3, ae) | 0, n4 = n4 + Math.imul(H32, fe) | 0, d2 = d2 + Math.imul(H32, ae) | 0, l4 = l4 + Math.imul(F, oe) | 0, n4 = n4 + Math.imul(F, se) | 0, n4 = n4 + Math.imul(U3, oe) | 0, d2 = d2 + Math.imul(U3, se) | 0, l4 = l4 + Math.imul(C3, he) | 0, n4 = n4 + Math.imul(C3, ue) | 0, n4 = n4 + Math.imul(O2, he) | 0, d2 = d2 + Math.imul(O2, ue) | 0, l4 = l4 + Math.imul(k2, le) | 0, n4 = n4 + Math.imul(k2, de) | 0, n4 = n4 + Math.imul(D2, le) | 0, d2 = d2 + Math.imul(D2, de) | 0, l4 = l4 + Math.imul(R3, ce) | 0, n4 = n4 + Math.imul(R3, pe) | 0, n4 = n4 + Math.imul(I2, ce) | 0, d2 = d2 + Math.imul(I2, pe) | 0, l4 = l4 + Math.imul(g2, ve) | 0, n4 = n4 + Math.imul(g2, be) | 0, n4 = n4 + Math.imul(_3, ve) | 0, d2 = d2 + Math.imul(_3, be) | 0;
        var Ve = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ve >>> 26) | 0, Ve &= 67108863, l4 = Math.imul(G4, Q3), n4 = Math.imul(G4, ee), n4 = n4 + Math.imul(Y, Q3) | 0, d2 = Math.imul(Y, ee), l4 = l4 + Math.imul(V4, te) | 0, n4 = n4 + Math.imul(V4, re) | 0, n4 = n4 + Math.imul($32, te) | 0, d2 = d2 + Math.imul($32, re) | 0, l4 = l4 + Math.imul(j2, ie) | 0, n4 = n4 + Math.imul(j2, ne) | 0, n4 = n4 + Math.imul(Z3, ie) | 0, d2 = d2 + Math.imul(Z3, ne) | 0, l4 = l4 + Math.imul(W22, fe) | 0, n4 = n4 + Math.imul(W22, ae) | 0, n4 = n4 + Math.imul(K, fe) | 0, d2 = d2 + Math.imul(K, ae) | 0, l4 = l4 + Math.imul(z3, oe) | 0, n4 = n4 + Math.imul(z3, se) | 0, n4 = n4 + Math.imul(H32, oe) | 0, d2 = d2 + Math.imul(H32, se) | 0, l4 = l4 + Math.imul(F, he) | 0, n4 = n4 + Math.imul(F, ue) | 0, n4 = n4 + Math.imul(U3, he) | 0, d2 = d2 + Math.imul(U3, ue) | 0, l4 = l4 + Math.imul(C3, le) | 0, n4 = n4 + Math.imul(C3, de) | 0, n4 = n4 + Math.imul(O2, le) | 0, d2 = d2 + Math.imul(O2, de) | 0, l4 = l4 + Math.imul(k2, ce) | 0, n4 = n4 + Math.imul(k2, pe) | 0, n4 = n4 + Math.imul(D2, ce) | 0, d2 = d2 + Math.imul(D2, pe) | 0, l4 = l4 + Math.imul(R3, ve) | 0, n4 = n4 + Math.imul(R3, be) | 0, n4 = n4 + Math.imul(I2, ve) | 0, d2 = d2 + Math.imul(I2, be) | 0;
        var $e = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + ($e >>> 26) | 0, $e &= 67108863, l4 = Math.imul(G4, te), n4 = Math.imul(G4, re), n4 = n4 + Math.imul(Y, te) | 0, d2 = Math.imul(Y, re), l4 = l4 + Math.imul(V4, ie) | 0, n4 = n4 + Math.imul(V4, ne) | 0, n4 = n4 + Math.imul($32, ie) | 0, d2 = d2 + Math.imul($32, ne) | 0, l4 = l4 + Math.imul(j2, fe) | 0, n4 = n4 + Math.imul(j2, ae) | 0, n4 = n4 + Math.imul(Z3, fe) | 0, d2 = d2 + Math.imul(Z3, ae) | 0, l4 = l4 + Math.imul(W22, oe) | 0, n4 = n4 + Math.imul(W22, se) | 0, n4 = n4 + Math.imul(K, oe) | 0, d2 = d2 + Math.imul(K, se) | 0, l4 = l4 + Math.imul(z3, he) | 0, n4 = n4 + Math.imul(z3, ue) | 0, n4 = n4 + Math.imul(H32, he) | 0, d2 = d2 + Math.imul(H32, ue) | 0, l4 = l4 + Math.imul(F, le) | 0, n4 = n4 + Math.imul(F, de) | 0, n4 = n4 + Math.imul(U3, le) | 0, d2 = d2 + Math.imul(U3, de) | 0, l4 = l4 + Math.imul(C3, ce) | 0, n4 = n4 + Math.imul(C3, pe) | 0, n4 = n4 + Math.imul(O2, ce) | 0, d2 = d2 + Math.imul(O2, pe) | 0, l4 = l4 + Math.imul(k2, ve) | 0, n4 = n4 + Math.imul(k2, be) | 0, n4 = n4 + Math.imul(D2, ve) | 0, d2 = d2 + Math.imul(D2, be) | 0;
        var Ge = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ge >>> 26) | 0, Ge &= 67108863, l4 = Math.imul(G4, ie), n4 = Math.imul(G4, ne), n4 = n4 + Math.imul(Y, ie) | 0, d2 = Math.imul(Y, ne), l4 = l4 + Math.imul(V4, fe) | 0, n4 = n4 + Math.imul(V4, ae) | 0, n4 = n4 + Math.imul($32, fe) | 0, d2 = d2 + Math.imul($32, ae) | 0, l4 = l4 + Math.imul(j2, oe) | 0, n4 = n4 + Math.imul(j2, se) | 0, n4 = n4 + Math.imul(Z3, oe) | 0, d2 = d2 + Math.imul(Z3, se) | 0, l4 = l4 + Math.imul(W22, he) | 0, n4 = n4 + Math.imul(W22, ue) | 0, n4 = n4 + Math.imul(K, he) | 0, d2 = d2 + Math.imul(K, ue) | 0, l4 = l4 + Math.imul(z3, le) | 0, n4 = n4 + Math.imul(z3, de) | 0, n4 = n4 + Math.imul(H32, le) | 0, d2 = d2 + Math.imul(H32, de) | 0, l4 = l4 + Math.imul(F, ce) | 0, n4 = n4 + Math.imul(F, pe) | 0, n4 = n4 + Math.imul(U3, ce) | 0, d2 = d2 + Math.imul(U3, pe) | 0, l4 = l4 + Math.imul(C3, ve) | 0, n4 = n4 + Math.imul(C3, be) | 0, n4 = n4 + Math.imul(O2, ve) | 0, d2 = d2 + Math.imul(O2, be) | 0;
        var Ye = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ye >>> 26) | 0, Ye &= 67108863, l4 = Math.imul(G4, fe), n4 = Math.imul(G4, ae), n4 = n4 + Math.imul(Y, fe) | 0, d2 = Math.imul(Y, ae), l4 = l4 + Math.imul(V4, oe) | 0, n4 = n4 + Math.imul(V4, se) | 0, n4 = n4 + Math.imul($32, oe) | 0, d2 = d2 + Math.imul($32, se) | 0, l4 = l4 + Math.imul(j2, he) | 0, n4 = n4 + Math.imul(j2, ue) | 0, n4 = n4 + Math.imul(Z3, he) | 0, d2 = d2 + Math.imul(Z3, ue) | 0, l4 = l4 + Math.imul(W22, le) | 0, n4 = n4 + Math.imul(W22, de) | 0, n4 = n4 + Math.imul(K, le) | 0, d2 = d2 + Math.imul(K, de) | 0, l4 = l4 + Math.imul(z3, ce) | 0, n4 = n4 + Math.imul(z3, pe) | 0, n4 = n4 + Math.imul(H32, ce) | 0, d2 = d2 + Math.imul(H32, pe) | 0, l4 = l4 + Math.imul(F, ve) | 0, n4 = n4 + Math.imul(F, be) | 0, n4 = n4 + Math.imul(U3, ve) | 0, d2 = d2 + Math.imul(U3, be) | 0;
        var Xe = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Xe >>> 26) | 0, Xe &= 67108863, l4 = Math.imul(G4, oe), n4 = Math.imul(G4, se), n4 = n4 + Math.imul(Y, oe) | 0, d2 = Math.imul(Y, se), l4 = l4 + Math.imul(V4, he) | 0, n4 = n4 + Math.imul(V4, ue) | 0, n4 = n4 + Math.imul($32, he) | 0, d2 = d2 + Math.imul($32, ue) | 0, l4 = l4 + Math.imul(j2, le) | 0, n4 = n4 + Math.imul(j2, de) | 0, n4 = n4 + Math.imul(Z3, le) | 0, d2 = d2 + Math.imul(Z3, de) | 0, l4 = l4 + Math.imul(W22, ce) | 0, n4 = n4 + Math.imul(W22, pe) | 0, n4 = n4 + Math.imul(K, ce) | 0, d2 = d2 + Math.imul(K, pe) | 0, l4 = l4 + Math.imul(z3, ve) | 0, n4 = n4 + Math.imul(z3, be) | 0, n4 = n4 + Math.imul(H32, ve) | 0, d2 = d2 + Math.imul(H32, be) | 0;
        var Je = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Je >>> 26) | 0, Je &= 67108863, l4 = Math.imul(G4, he), n4 = Math.imul(G4, ue), n4 = n4 + Math.imul(Y, he) | 0, d2 = Math.imul(Y, ue), l4 = l4 + Math.imul(V4, le) | 0, n4 = n4 + Math.imul(V4, de) | 0, n4 = n4 + Math.imul($32, le) | 0, d2 = d2 + Math.imul($32, de) | 0, l4 = l4 + Math.imul(j2, ce) | 0, n4 = n4 + Math.imul(j2, pe) | 0, n4 = n4 + Math.imul(Z3, ce) | 0, d2 = d2 + Math.imul(Z3, pe) | 0, l4 = l4 + Math.imul(W22, ve) | 0, n4 = n4 + Math.imul(W22, be) | 0, n4 = n4 + Math.imul(K, ve) | 0, d2 = d2 + Math.imul(K, be) | 0;
        var Qe = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Qe >>> 26) | 0, Qe &= 67108863, l4 = Math.imul(G4, le), n4 = Math.imul(G4, de), n4 = n4 + Math.imul(Y, le) | 0, d2 = Math.imul(Y, de), l4 = l4 + Math.imul(V4, ce) | 0, n4 = n4 + Math.imul(V4, pe) | 0, n4 = n4 + Math.imul($32, ce) | 0, d2 = d2 + Math.imul($32, pe) | 0, l4 = l4 + Math.imul(j2, ve) | 0, n4 = n4 + Math.imul(j2, be) | 0, n4 = n4 + Math.imul(Z3, ve) | 0, d2 = d2 + Math.imul(Z3, be) | 0;
        var et = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (et >>> 26) | 0, et &= 67108863, l4 = Math.imul(G4, ce), n4 = Math.imul(G4, pe), n4 = n4 + Math.imul(Y, ce) | 0, d2 = Math.imul(Y, pe), l4 = l4 + Math.imul(V4, ve) | 0, n4 = n4 + Math.imul(V4, be) | 0, n4 = n4 + Math.imul($32, ve) | 0, d2 = d2 + Math.imul($32, be) | 0;
        var tt = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (tt >>> 26) | 0, tt &= 67108863, l4 = Math.imul(G4, ve), n4 = Math.imul(G4, be), n4 = n4 + Math.imul(Y, ve) | 0, d2 = Math.imul(Y, be);
        var rt = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        return b3 = (d2 + (n4 >>> 13) | 0) + (rt >>> 26) | 0, rt &= 67108863, c[0] = ft, c[1] = Be, c[2] = qe, c[3] = ze, c[4] = He, c[5] = We, c[6] = Ke, c[7] = je, c[8] = Ze, c[9] = Ve, c[10] = $e, c[11] = Ge, c[12] = Ye, c[13] = Xe, c[14] = Je, c[15] = Qe, c[16] = et, c[17] = tt, c[18] = rt, b3 !== 0 && (c[19] = b3, h5.length++), h5;
      };
      Math.imul || (L32 = q2);
      function ge(v3, i2, a3) {
        a3.negative = i2.negative ^ v3.negative, a3.length = v3.length + i2.length;
        for (var h5 = 0, s2 = 0, u3 = 0;u3 < a3.length - 1; u3++) {
          var c = s2;
          s2 = 0;
          for (var b3 = h5 & 67108863, l4 = Math.min(u3, i2.length - 1), n4 = Math.max(0, u3 - v3.length + 1);n4 <= l4; n4++) {
            var d2 = u3 - n4, w2 = v3.words[d2] | 0, g2 = i2.words[n4] | 0, _3 = w2 * g2, A6 = _3 & 67108863;
            c = c + (_3 / 67108864 | 0) | 0, A6 = A6 + b3 | 0, b3 = A6 & 67108863, c = c + (A6 >>> 26) | 0, s2 += c >>> 26, c &= 67108863;
          }
          a3.words[u3] = b3, h5 = c, c = s2;
        }
        return h5 !== 0 ? a3.words[u3] = h5 : a3.length--, a3.strip();
      }
      function _e(v3, i2, a3) {
        var h5 = new N3;
        return h5.mulp(v3, i2, a3);
      }
      f4.prototype.mulTo = function(i2, a3) {
        var h5, s2 = this.length + i2.length;
        return this.length === 10 && i2.length === 10 ? h5 = L32(this, i2, a3) : s2 < 63 ? h5 = q2(this, i2, a3) : s2 < 1024 ? h5 = ge(this, i2, a3) : h5 = _e(this, i2, a3), h5;
      };
      function N3(v3, i2) {
        this.x = v3, this.y = i2;
      }
      N3.prototype.makeRBT = function(i2) {
        for (var a3 = new Array(i2), h5 = f4.prototype._countBits(i2) - 1, s2 = 0;s2 < i2; s2++)
          a3[s2] = this.revBin(s2, h5, i2);
        return a3;
      }, N3.prototype.revBin = function(i2, a3, h5) {
        if (i2 === 0 || i2 === h5 - 1)
          return i2;
        for (var s2 = 0, u3 = 0;u3 < a3; u3++)
          s2 |= (i2 & 1) << a3 - u3 - 1, i2 >>= 1;
        return s2;
      }, N3.prototype.permute = function(i2, a3, h5, s2, u3, c) {
        for (var b3 = 0;b3 < c; b3++)
          s2[b3] = a3[i2[b3]], u3[b3] = h5[i2[b3]];
      }, N3.prototype.transform = function(i2, a3, h5, s2, u3, c) {
        this.permute(c, i2, a3, h5, s2, u3);
        for (var b3 = 1;b3 < u3; b3 <<= 1)
          for (var l4 = b3 << 1, n4 = Math.cos(2 * Math.PI / l4), d2 = Math.sin(2 * Math.PI / l4), w2 = 0;w2 < u3; w2 += l4)
            for (var g2 = n4, _3 = d2, A6 = 0;A6 < b3; A6++) {
              var R3 = h5[w2 + A6], I2 = s2[w2 + A6], Me = h5[w2 + A6 + b3], k2 = s2[w2 + A6 + b3], D2 = g2 * Me - _3 * k2;
              k2 = g2 * k2 + _3 * Me, Me = D2, h5[w2 + A6] = R3 + Me, s2[w2 + A6] = I2 + k2, h5[w2 + A6 + b3] = R3 - Me, s2[w2 + A6 + b3] = I2 - k2, A6 !== l4 && (D2 = n4 * g2 - d2 * _3, _3 = n4 * _3 + d2 * g2, g2 = D2);
            }
      }, N3.prototype.guessLen13b = function(i2, a3) {
        var h5 = Math.max(a3, i2) | 1, s2 = h5 & 1, u3 = 0;
        for (h5 = h5 / 2 | 0;h5; h5 = h5 >>> 1)
          u3++;
        return 1 << u3 + 1 + s2;
      }, N3.prototype.conjugate = function(i2, a3, h5) {
        if (!(h5 <= 1))
          for (var s2 = 0;s2 < h5 / 2; s2++) {
            var u3 = i2[s2];
            i2[s2] = i2[h5 - s2 - 1], i2[h5 - s2 - 1] = u3, u3 = a3[s2], a3[s2] = -a3[h5 - s2 - 1], a3[h5 - s2 - 1] = -u3;
          }
      }, N3.prototype.normalize13b = function(i2, a3) {
        for (var h5 = 0, s2 = 0;s2 < a3 / 2; s2++) {
          var u3 = Math.round(i2[2 * s2 + 1] / a3) * 8192 + Math.round(i2[2 * s2] / a3) + h5;
          i2[s2] = u3 & 67108863, u3 < 67108864 ? h5 = 0 : h5 = u3 / 67108864 | 0;
        }
        return i2;
      }, N3.prototype.convert13b = function(i2, a3, h5, s2) {
        for (var u3 = 0, c = 0;c < a3; c++)
          u3 = u3 + (i2[c] | 0), h5[2 * c] = u3 & 8191, u3 = u3 >>> 13, h5[2 * c + 1] = u3 & 8191, u3 = u3 >>> 13;
        for (c = 2 * a3;c < s2; ++c)
          h5[c] = 0;
        r2(u3 === 0), r2((u3 & -8192) === 0);
      }, N3.prototype.stub = function(i2) {
        for (var a3 = new Array(i2), h5 = 0;h5 < i2; h5++)
          a3[h5] = 0;
        return a3;
      }, N3.prototype.mulp = function(i2, a3, h5) {
        var s2 = 2 * this.guessLen13b(i2.length, a3.length), u3 = this.makeRBT(s2), c = this.stub(s2), b3 = new Array(s2), l4 = new Array(s2), n4 = new Array(s2), d2 = new Array(s2), w2 = new Array(s2), g2 = new Array(s2), _3 = h5.words;
        _3.length = s2, this.convert13b(i2.words, i2.length, b3, s2), this.convert13b(a3.words, a3.length, d2, s2), this.transform(b3, c, l4, n4, s2, u3), this.transform(d2, c, w2, g2, s2, u3);
        for (var A6 = 0;A6 < s2; A6++) {
          var R3 = l4[A6] * w2[A6] - n4[A6] * g2[A6];
          n4[A6] = l4[A6] * g2[A6] + n4[A6] * w2[A6], l4[A6] = R3;
        }
        return this.conjugate(l4, n4, s2), this.transform(l4, n4, _3, c, s2, u3), this.conjugate(_3, c, s2), this.normalize13b(_3, s2), h5.negative = i2.negative ^ a3.negative, h5.length = i2.length + a3.length, h5.strip();
      }, f4.prototype.mul = function(i2) {
        var a3 = new f4(null);
        return a3.words = new Array(this.length + i2.length), this.mulTo(i2, a3);
      }, f4.prototype.mulf = function(i2) {
        var a3 = new f4(null);
        return a3.words = new Array(this.length + i2.length), _e(this, i2, a3);
      }, f4.prototype.imul = function(i2) {
        return this.clone().mulTo(i2, this);
      }, f4.prototype.imuln = function(i2) {
        r2(typeof i2 == "number"), r2(i2 < 67108864);
        for (var a3 = 0, h5 = 0;h5 < this.length; h5++) {
          var s2 = (this.words[h5] | 0) * i2, u3 = (s2 & 67108863) + (a3 & 67108863);
          a3 >>= 26, a3 += s2 / 67108864 | 0, a3 += u3 >>> 26, this.words[h5] = u3 & 67108863;
        }
        return a3 !== 0 && (this.words[h5] = a3, this.length++), this;
      }, f4.prototype.muln = function(i2) {
        return this.clone().imuln(i2);
      }, f4.prototype.sqr = function() {
        return this.mul(this);
      }, f4.prototype.isqr = function() {
        return this.imul(this.clone());
      }, f4.prototype.pow = function(i2) {
        var a3 = B5(i2);
        if (a3.length === 0)
          return new f4(1);
        for (var h5 = this, s2 = 0;s2 < a3.length && a3[s2] === 0; s2++, h5 = h5.sqr())
          ;
        if (++s2 < a3.length)
          for (var u3 = h5.sqr();s2 < a3.length; s2++, u3 = u3.sqr())
            a3[s2] !== 0 && (h5 = h5.mul(u3));
        return h5;
      }, f4.prototype.iushln = function(i2) {
        r2(typeof i2 == "number" && i2 >= 0);
        var a3 = i2 % 26, h5 = (i2 - a3) / 26, s2 = 67108863 >>> 26 - a3 << 26 - a3, u3;
        if (a3 !== 0) {
          var c = 0;
          for (u3 = 0;u3 < this.length; u3++) {
            var b3 = this.words[u3] & s2, l4 = (this.words[u3] | 0) - b3 << a3;
            this.words[u3] = l4 | c, c = b3 >>> 26 - a3;
          }
          c && (this.words[u3] = c, this.length++);
        }
        if (h5 !== 0) {
          for (u3 = this.length - 1;u3 >= 0; u3--)
            this.words[u3 + h5] = this.words[u3];
          for (u3 = 0;u3 < h5; u3++)
            this.words[u3] = 0;
          this.length += h5;
        }
        return this.strip();
      }, f4.prototype.ishln = function(i2) {
        return r2(this.negative === 0), this.iushln(i2);
      }, f4.prototype.iushrn = function(i2, a3, h5) {
        r2(typeof i2 == "number" && i2 >= 0);
        var s2;
        a3 ? s2 = (a3 - a3 % 26) / 26 : s2 = 0;
        var u3 = i2 % 26, c = Math.min((i2 - u3) / 26, this.length), b3 = 67108863 ^ 67108863 >>> u3 << u3, l4 = h5;
        if (s2 -= c, s2 = Math.max(0, s2), l4) {
          for (var n4 = 0;n4 < c; n4++)
            l4.words[n4] = this.words[n4];
          l4.length = c;
        }
        if (c !== 0)
          if (this.length > c)
            for (this.length -= c, n4 = 0;n4 < this.length; n4++)
              this.words[n4] = this.words[n4 + c];
          else
            this.words[0] = 0, this.length = 1;
        var d2 = 0;
        for (n4 = this.length - 1;n4 >= 0 && (d2 !== 0 || n4 >= s2); n4--) {
          var w2 = this.words[n4] | 0;
          this.words[n4] = d2 << 26 - u3 | w2 >>> u3, d2 = w2 & b3;
        }
        return l4 && d2 !== 0 && (l4.words[l4.length++] = d2), this.length === 0 && (this.words[0] = 0, this.length = 1), this.strip();
      }, f4.prototype.ishrn = function(i2, a3, h5) {
        return r2(this.negative === 0), this.iushrn(i2, a3, h5);
      }, f4.prototype.shln = function(i2) {
        return this.clone().ishln(i2);
      }, f4.prototype.ushln = function(i2) {
        return this.clone().iushln(i2);
      }, f4.prototype.shrn = function(i2) {
        return this.clone().ishrn(i2);
      }, f4.prototype.ushrn = function(i2) {
        return this.clone().iushrn(i2);
      }, f4.prototype.testn = function(i2) {
        r2(typeof i2 == "number" && i2 >= 0);
        var a3 = i2 % 26, h5 = (i2 - a3) / 26, s2 = 1 << a3;
        if (this.length <= h5)
          return false;
        var u3 = this.words[h5];
        return !!(u3 & s2);
      }, f4.prototype.imaskn = function(i2) {
        r2(typeof i2 == "number" && i2 >= 0);
        var a3 = i2 % 26, h5 = (i2 - a3) / 26;
        if (r2(this.negative === 0, "imaskn works only with positive numbers"), this.length <= h5)
          return this;
        if (a3 !== 0 && h5++, this.length = Math.min(h5, this.length), a3 !== 0) {
          var s2 = 67108863 ^ 67108863 >>> a3 << a3;
          this.words[this.length - 1] &= s2;
        }
        return this.strip();
      }, f4.prototype.maskn = function(i2) {
        return this.clone().imaskn(i2);
      }, f4.prototype.iaddn = function(i2) {
        return r2(typeof i2 == "number"), r2(i2 < 67108864), i2 < 0 ? this.isubn(-i2) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) < i2 ? (this.words[0] = i2 - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(i2), this.negative = 1, this) : this._iaddn(i2);
      }, f4.prototype._iaddn = function(i2) {
        this.words[0] += i2;
        for (var a3 = 0;a3 < this.length && this.words[a3] >= 67108864; a3++)
          this.words[a3] -= 67108864, a3 === this.length - 1 ? this.words[a3 + 1] = 1 : this.words[a3 + 1]++;
        return this.length = Math.max(this.length, a3 + 1), this;
      }, f4.prototype.isubn = function(i2) {
        if (r2(typeof i2 == "number"), r2(i2 < 67108864), i2 < 0)
          return this.iaddn(-i2);
        if (this.negative !== 0)
          return this.negative = 0, this.iaddn(i2), this.negative = 1, this;
        if (this.words[0] -= i2, this.length === 1 && this.words[0] < 0)
          this.words[0] = -this.words[0], this.negative = 1;
        else
          for (var a3 = 0;a3 < this.length && this.words[a3] < 0; a3++)
            this.words[a3] += 67108864, this.words[a3 + 1] -= 1;
        return this.strip();
      }, f4.prototype.addn = function(i2) {
        return this.clone().iaddn(i2);
      }, f4.prototype.subn = function(i2) {
        return this.clone().isubn(i2);
      }, f4.prototype.iabs = function() {
        return this.negative = 0, this;
      }, f4.prototype.abs = function() {
        return this.clone().iabs();
      }, f4.prototype._ishlnsubmul = function(i2, a3, h5) {
        var s2 = i2.length + h5, u3;
        this._expand(s2);
        var c, b3 = 0;
        for (u3 = 0;u3 < i2.length; u3++) {
          c = (this.words[u3 + h5] | 0) + b3;
          var l4 = (i2.words[u3] | 0) * a3;
          c -= l4 & 67108863, b3 = (c >> 26) - (l4 / 67108864 | 0), this.words[u3 + h5] = c & 67108863;
        }
        for (;u3 < this.length - h5; u3++)
          c = (this.words[u3 + h5] | 0) + b3, b3 = c >> 26, this.words[u3 + h5] = c & 67108863;
        if (b3 === 0)
          return this.strip();
        for (r2(b3 === -1), b3 = 0, u3 = 0;u3 < this.length; u3++)
          c = -(this.words[u3] | 0) + b3, b3 = c >> 26, this.words[u3] = c & 67108863;
        return this.negative = 1, this.strip();
      }, f4.prototype._wordDiv = function(i2, a3) {
        var h5 = this.length - i2.length, s2 = this.clone(), u3 = i2, c = u3.words[u3.length - 1] | 0, b3 = this._countBits(c);
        h5 = 26 - b3, h5 !== 0 && (u3 = u3.ushln(h5), s2.iushln(h5), c = u3.words[u3.length - 1] | 0);
        var l4 = s2.length - u3.length, n4;
        if (a3 !== "mod") {
          n4 = new f4(null), n4.length = l4 + 1, n4.words = new Array(n4.length);
          for (var d2 = 0;d2 < n4.length; d2++)
            n4.words[d2] = 0;
        }
        var w2 = s2.clone()._ishlnsubmul(u3, 1, l4);
        w2.negative === 0 && (s2 = w2, n4 && (n4.words[l4] = 1));
        for (var g2 = l4 - 1;g2 >= 0; g2--) {
          var _3 = (s2.words[u3.length + g2] | 0) * 67108864 + (s2.words[u3.length + g2 - 1] | 0);
          for (_3 = Math.min(_3 / c | 0, 67108863), s2._ishlnsubmul(u3, _3, g2);s2.negative !== 0; )
            _3--, s2.negative = 0, s2._ishlnsubmul(u3, 1, g2), s2.isZero() || (s2.negative ^= 1);
          n4 && (n4.words[g2] = _3);
        }
        return n4 && n4.strip(), s2.strip(), a3 !== "div" && h5 !== 0 && s2.iushrn(h5), { div: n4 || null, mod: s2 };
      }, f4.prototype.divmod = function(i2, a3, h5) {
        if (r2(!i2.isZero()), this.isZero())
          return { div: new f4(0), mod: new f4(0) };
        var s2, u3, c;
        return this.negative !== 0 && i2.negative === 0 ? (c = this.neg().divmod(i2, a3), a3 !== "mod" && (s2 = c.div.neg()), a3 !== "div" && (u3 = c.mod.neg(), h5 && u3.negative !== 0 && u3.iadd(i2)), { div: s2, mod: u3 }) : this.negative === 0 && i2.negative !== 0 ? (c = this.divmod(i2.neg(), a3), a3 !== "mod" && (s2 = c.div.neg()), { div: s2, mod: c.mod }) : (this.negative & i2.negative) !== 0 ? (c = this.neg().divmod(i2.neg(), a3), a3 !== "div" && (u3 = c.mod.neg(), h5 && u3.negative !== 0 && u3.isub(i2)), { div: c.div, mod: u3 }) : i2.length > this.length || this.cmp(i2) < 0 ? { div: new f4(0), mod: this } : i2.length === 1 ? a3 === "div" ? { div: this.divn(i2.words[0]), mod: null } : a3 === "mod" ? { div: null, mod: new f4(this.modn(i2.words[0])) } : { div: this.divn(i2.words[0]), mod: new f4(this.modn(i2.words[0])) } : this._wordDiv(i2, a3);
      }, f4.prototype.div = function(i2) {
        return this.divmod(i2, "div", false).div;
      }, f4.prototype.mod = function(i2) {
        return this.divmod(i2, "mod", false).mod;
      }, f4.prototype.umod = function(i2) {
        return this.divmod(i2, "mod", true).mod;
      }, f4.prototype.divRound = function(i2) {
        var a3 = this.divmod(i2);
        if (a3.mod.isZero())
          return a3.div;
        var h5 = a3.div.negative !== 0 ? a3.mod.isub(i2) : a3.mod, s2 = i2.ushrn(1), u3 = i2.andln(1), c = h5.cmp(s2);
        return c < 0 || u3 === 1 && c === 0 ? a3.div : a3.div.negative !== 0 ? a3.div.isubn(1) : a3.div.iaddn(1);
      }, f4.prototype.modn = function(i2) {
        r2(i2 <= 67108863);
        for (var a3 = (1 << 26) % i2, h5 = 0, s2 = this.length - 1;s2 >= 0; s2--)
          h5 = (a3 * h5 + (this.words[s2] | 0)) % i2;
        return h5;
      }, f4.prototype.idivn = function(i2) {
        r2(i2 <= 67108863);
        for (var a3 = 0, h5 = this.length - 1;h5 >= 0; h5--) {
          var s2 = (this.words[h5] | 0) + a3 * 67108864;
          this.words[h5] = s2 / i2 | 0, a3 = s2 % i2;
        }
        return this.strip();
      }, f4.prototype.divn = function(i2) {
        return this.clone().idivn(i2);
      }, f4.prototype.egcd = function(i2) {
        r2(i2.negative === 0), r2(!i2.isZero());
        var a3 = this, h5 = i2.clone();
        a3.negative !== 0 ? a3 = a3.umod(i2) : a3 = a3.clone();
        for (var s2 = new f4(1), u3 = new f4(0), c = new f4(0), b3 = new f4(1), l4 = 0;a3.isEven() && h5.isEven(); )
          a3.iushrn(1), h5.iushrn(1), ++l4;
        for (var n4 = h5.clone(), d2 = a3.clone();!a3.isZero(); ) {
          for (var w2 = 0, g2 = 1;(a3.words[0] & g2) === 0 && w2 < 26; ++w2, g2 <<= 1)
            ;
          if (w2 > 0)
            for (a3.iushrn(w2);w2-- > 0; )
              (s2.isOdd() || u3.isOdd()) && (s2.iadd(n4), u3.isub(d2)), s2.iushrn(1), u3.iushrn(1);
          for (var _3 = 0, A6 = 1;(h5.words[0] & A6) === 0 && _3 < 26; ++_3, A6 <<= 1)
            ;
          if (_3 > 0)
            for (h5.iushrn(_3);_3-- > 0; )
              (c.isOdd() || b3.isOdd()) && (c.iadd(n4), b3.isub(d2)), c.iushrn(1), b3.iushrn(1);
          a3.cmp(h5) >= 0 ? (a3.isub(h5), s2.isub(c), u3.isub(b3)) : (h5.isub(a3), c.isub(s2), b3.isub(u3));
        }
        return { a: c, b: b3, gcd: h5.iushln(l4) };
      }, f4.prototype._invmp = function(i2) {
        r2(i2.negative === 0), r2(!i2.isZero());
        var a3 = this, h5 = i2.clone();
        a3.negative !== 0 ? a3 = a3.umod(i2) : a3 = a3.clone();
        for (var s2 = new f4(1), u3 = new f4(0), c = h5.clone();a3.cmpn(1) > 0 && h5.cmpn(1) > 0; ) {
          for (var b3 = 0, l4 = 1;(a3.words[0] & l4) === 0 && b3 < 26; ++b3, l4 <<= 1)
            ;
          if (b3 > 0)
            for (a3.iushrn(b3);b3-- > 0; )
              s2.isOdd() && s2.iadd(c), s2.iushrn(1);
          for (var n4 = 0, d2 = 1;(h5.words[0] & d2) === 0 && n4 < 26; ++n4, d2 <<= 1)
            ;
          if (n4 > 0)
            for (h5.iushrn(n4);n4-- > 0; )
              u3.isOdd() && u3.iadd(c), u3.iushrn(1);
          a3.cmp(h5) >= 0 ? (a3.isub(h5), s2.isub(u3)) : (h5.isub(a3), u3.isub(s2));
        }
        var w2;
        return a3.cmpn(1) === 0 ? w2 = s2 : w2 = u3, w2.cmpn(0) < 0 && w2.iadd(i2), w2;
      }, f4.prototype.gcd = function(i2) {
        if (this.isZero())
          return i2.abs();
        if (i2.isZero())
          return this.abs();
        var a3 = this.clone(), h5 = i2.clone();
        a3.negative = 0, h5.negative = 0;
        for (var s2 = 0;a3.isEven() && h5.isEven(); s2++)
          a3.iushrn(1), h5.iushrn(1);
        do {
          for (;a3.isEven(); )
            a3.iushrn(1);
          for (;h5.isEven(); )
            h5.iushrn(1);
          var u3 = a3.cmp(h5);
          if (u3 < 0) {
            var c = a3;
            a3 = h5, h5 = c;
          } else if (u3 === 0 || h5.cmpn(1) === 0)
            break;
          a3.isub(h5);
        } while (true);
        return h5.iushln(s2);
      }, f4.prototype.invm = function(i2) {
        return this.egcd(i2).a.umod(i2);
      }, f4.prototype.isEven = function() {
        return (this.words[0] & 1) === 0;
      }, f4.prototype.isOdd = function() {
        return (this.words[0] & 1) === 1;
      }, f4.prototype.andln = function(i2) {
        return this.words[0] & i2;
      }, f4.prototype.bincn = function(i2) {
        r2(typeof i2 == "number");
        var a3 = i2 % 26, h5 = (i2 - a3) / 26, s2 = 1 << a3;
        if (this.length <= h5)
          return this._expand(h5 + 1), this.words[h5] |= s2, this;
        for (var u3 = s2, c = h5;u3 !== 0 && c < this.length; c++) {
          var b3 = this.words[c] | 0;
          b3 += u3, u3 = b3 >>> 26, b3 &= 67108863, this.words[c] = b3;
        }
        return u3 !== 0 && (this.words[c] = u3, this.length++), this;
      }, f4.prototype.isZero = function() {
        return this.length === 1 && this.words[0] === 0;
      }, f4.prototype.cmpn = function(i2) {
        var a3 = i2 < 0;
        if (this.negative !== 0 && !a3)
          return -1;
        if (this.negative === 0 && a3)
          return 1;
        this.strip();
        var h5;
        if (this.length > 1)
          h5 = 1;
        else {
          a3 && (i2 = -i2), r2(i2 <= 67108863, "Number is too big");
          var s2 = this.words[0] | 0;
          h5 = s2 === i2 ? 0 : s2 < i2 ? -1 : 1;
        }
        return this.negative !== 0 ? -h5 | 0 : h5;
      }, f4.prototype.cmp = function(i2) {
        if (this.negative !== 0 && i2.negative === 0)
          return -1;
        if (this.negative === 0 && i2.negative !== 0)
          return 1;
        var a3 = this.ucmp(i2);
        return this.negative !== 0 ? -a3 | 0 : a3;
      }, f4.prototype.ucmp = function(i2) {
        if (this.length > i2.length)
          return 1;
        if (this.length < i2.length)
          return -1;
        for (var a3 = 0, h5 = this.length - 1;h5 >= 0; h5--) {
          var s2 = this.words[h5] | 0, u3 = i2.words[h5] | 0;
          if (s2 !== u3) {
            s2 < u3 ? a3 = -1 : s2 > u3 && (a3 = 1);
            break;
          }
        }
        return a3;
      }, f4.prototype.gtn = function(i2) {
        return this.cmpn(i2) === 1;
      }, f4.prototype.gt = function(i2) {
        return this.cmp(i2) === 1;
      }, f4.prototype.gten = function(i2) {
        return this.cmpn(i2) >= 0;
      }, f4.prototype.gte = function(i2) {
        return this.cmp(i2) >= 0;
      }, f4.prototype.ltn = function(i2) {
        return this.cmpn(i2) === -1;
      }, f4.prototype.lt = function(i2) {
        return this.cmp(i2) === -1;
      }, f4.prototype.lten = function(i2) {
        return this.cmpn(i2) <= 0;
      }, f4.prototype.lte = function(i2) {
        return this.cmp(i2) <= 0;
      }, f4.prototype.eqn = function(i2) {
        return this.cmpn(i2) === 0;
      }, f4.prototype.eq = function(i2) {
        return this.cmp(i2) === 0;
      }, f4.red = function(i2) {
        return new P22(i2);
      }, f4.prototype.toRed = function(i2) {
        return r2(!this.red, "Already a number in reduction context"), r2(this.negative === 0, "red works only with positives"), i2.convertTo(this)._forceRed(i2);
      }, f4.prototype.fromRed = function() {
        return r2(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
      }, f4.prototype._forceRed = function(i2) {
        return this.red = i2, this;
      }, f4.prototype.forceRed = function(i2) {
        return r2(!this.red, "Already a number in reduction context"), this._forceRed(i2);
      }, f4.prototype.redAdd = function(i2) {
        return r2(this.red, "redAdd works only with red numbers"), this.red.add(this, i2);
      }, f4.prototype.redIAdd = function(i2) {
        return r2(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, i2);
      }, f4.prototype.redSub = function(i2) {
        return r2(this.red, "redSub works only with red numbers"), this.red.sub(this, i2);
      }, f4.prototype.redISub = function(i2) {
        return r2(this.red, "redISub works only with red numbers"), this.red.isub(this, i2);
      }, f4.prototype.redShl = function(i2) {
        return r2(this.red, "redShl works only with red numbers"), this.red.shl(this, i2);
      }, f4.prototype.redMul = function(i2) {
        return r2(this.red, "redMul works only with red numbers"), this.red._verify2(this, i2), this.red.mul(this, i2);
      }, f4.prototype.redIMul = function(i2) {
        return r2(this.red, "redMul works only with red numbers"), this.red._verify2(this, i2), this.red.imul(this, i2);
      }, f4.prototype.redSqr = function() {
        return r2(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
      }, f4.prototype.redISqr = function() {
        return r2(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
      }, f4.prototype.redSqrt = function() {
        return r2(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
      }, f4.prototype.redInvm = function() {
        return r2(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
      }, f4.prototype.redNeg = function() {
        return r2(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
      }, f4.prototype.redPow = function(i2) {
        return r2(this.red && !i2.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, i2);
      };
      var we = { k256: null, p224: null, p192: null, p25519: null };
      function ye(v3, i2) {
        this.name = v3, this.p = new f4(i2, 16), this.n = this.p.bitLength(), this.k = new f4(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
      }
      ye.prototype._tmp = function() {
        var i2 = new f4(null);
        return i2.words = new Array(Math.ceil(this.n / 13)), i2;
      }, ye.prototype.ireduce = function(i2) {
        var a3 = i2, h5;
        do
          this.split(a3, this.tmp), a3 = this.imulK(a3), a3 = a3.iadd(this.tmp), h5 = a3.bitLength();
        while (h5 > this.n);
        var s2 = h5 < this.n ? -1 : a3.ucmp(this.p);
        return s2 === 0 ? (a3.words[0] = 0, a3.length = 1) : s2 > 0 ? a3.isub(this.p) : a3.strip !== undefined ? a3.strip() : a3._strip(), a3;
      }, ye.prototype.split = function(i2, a3) {
        i2.iushrn(this.n, 0, a3);
      }, ye.prototype.imulK = function(i2) {
        return i2.imul(this.k);
      };
      function xe() {
        ye.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      o2(xe, ye), xe.prototype.split = function(i2, a3) {
        for (var h5 = 4194303, s2 = Math.min(i2.length, 9), u3 = 0;u3 < s2; u3++)
          a3.words[u3] = i2.words[u3];
        if (a3.length = s2, i2.length <= 9) {
          i2.words[0] = 0, i2.length = 1;
          return;
        }
        var c = i2.words[9];
        for (a3.words[a3.length++] = c & h5, u3 = 10;u3 < i2.length; u3++) {
          var b3 = i2.words[u3] | 0;
          i2.words[u3 - 10] = (b3 & h5) << 4 | c >>> 22, c = b3;
        }
        c >>>= 22, i2.words[u3 - 10] = c, c === 0 && i2.length > 10 ? i2.length -= 10 : i2.length -= 9;
      }, xe.prototype.imulK = function(i2) {
        i2.words[i2.length] = 0, i2.words[i2.length + 1] = 0, i2.length += 2;
        for (var a3 = 0, h5 = 0;h5 < i2.length; h5++) {
          var s2 = i2.words[h5] | 0;
          a3 += s2 * 977, i2.words[h5] = a3 & 67108863, a3 = s2 * 64 + (a3 / 67108864 | 0);
        }
        return i2.words[i2.length - 1] === 0 && (i2.length--, i2.words[i2.length - 1] === 0 && i2.length--), i2;
      };
      function Re() {
        ye.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      o2(Re, ye);
      function Ee() {
        ye.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      o2(Ee, ye);
      function Ae() {
        ye.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      o2(Ae, ye), Ae.prototype.imulK = function(i2) {
        for (var a3 = 0, h5 = 0;h5 < i2.length; h5++) {
          var s2 = (i2.words[h5] | 0) * 19 + a3, u3 = s2 & 67108863;
          s2 >>>= 26, i2.words[h5] = u3, a3 = s2;
        }
        return a3 !== 0 && (i2.words[i2.length++] = a3), i2;
      }, f4._prime = function(i2) {
        if (we[i2])
          return we[i2];
        var a3;
        if (i2 === "k256")
          a3 = new xe;
        else if (i2 === "p224")
          a3 = new Re;
        else if (i2 === "p192")
          a3 = new Ee;
        else if (i2 === "p25519")
          a3 = new Ae;
        else
          throw new Error("Unknown prime " + i2);
        return we[i2] = a3, a3;
      };
      function P22(v3) {
        if (typeof v3 == "string") {
          var i2 = f4._prime(v3);
          this.m = i2.p, this.prime = i2;
        } else
          r2(v3.gtn(1), "modulus must be greater than 1"), this.m = v3, this.prime = null;
      }
      P22.prototype._verify1 = function(i2) {
        r2(i2.negative === 0, "red works only with positives"), r2(i2.red, "red works only with red numbers");
      }, P22.prototype._verify2 = function(i2, a3) {
        r2((i2.negative | a3.negative) === 0, "red works only with positives"), r2(i2.red && i2.red === a3.red, "red works only with red numbers");
      }, P22.prototype.imod = function(i2) {
        return this.prime ? this.prime.ireduce(i2)._forceRed(this) : i2.umod(this.m)._forceRed(this);
      }, P22.prototype.neg = function(i2) {
        return i2.isZero() ? i2.clone() : this.m.sub(i2)._forceRed(this);
      }, P22.prototype.add = function(i2, a3) {
        this._verify2(i2, a3);
        var h5 = i2.add(a3);
        return h5.cmp(this.m) >= 0 && h5.isub(this.m), h5._forceRed(this);
      }, P22.prototype.iadd = function(i2, a3) {
        this._verify2(i2, a3);
        var h5 = i2.iadd(a3);
        return h5.cmp(this.m) >= 0 && h5.isub(this.m), h5;
      }, P22.prototype.sub = function(i2, a3) {
        this._verify2(i2, a3);
        var h5 = i2.sub(a3);
        return h5.cmpn(0) < 0 && h5.iadd(this.m), h5._forceRed(this);
      }, P22.prototype.isub = function(i2, a3) {
        this._verify2(i2, a3);
        var h5 = i2.isub(a3);
        return h5.cmpn(0) < 0 && h5.iadd(this.m), h5;
      }, P22.prototype.shl = function(i2, a3) {
        return this._verify1(i2), this.imod(i2.ushln(a3));
      }, P22.prototype.imul = function(i2, a3) {
        return this._verify2(i2, a3), this.imod(i2.imul(a3));
      }, P22.prototype.mul = function(i2, a3) {
        return this._verify2(i2, a3), this.imod(i2.mul(a3));
      }, P22.prototype.isqr = function(i2) {
        return this.imul(i2, i2.clone());
      }, P22.prototype.sqr = function(i2) {
        return this.mul(i2, i2);
      }, P22.prototype.sqrt = function(i2) {
        if (i2.isZero())
          return i2.clone();
        var a3 = this.m.andln(3);
        if (r2(a3 % 2 === 1), a3 === 3) {
          var h5 = this.m.add(new f4(1)).iushrn(2);
          return this.pow(i2, h5);
        }
        for (var s2 = this.m.subn(1), u3 = 0;!s2.isZero() && s2.andln(1) === 0; )
          u3++, s2.iushrn(1);
        r2(!s2.isZero());
        var c = new f4(1).toRed(this), b3 = c.redNeg(), l4 = this.m.subn(1).iushrn(1), n4 = this.m.bitLength();
        for (n4 = new f4(2 * n4 * n4).toRed(this);this.pow(n4, l4).cmp(b3) !== 0; )
          n4.redIAdd(b3);
        for (var d2 = this.pow(n4, s2), w2 = this.pow(i2, s2.addn(1).iushrn(1)), g2 = this.pow(i2, s2), _3 = u3;g2.cmp(c) !== 0; ) {
          for (var A6 = g2, R3 = 0;A6.cmp(c) !== 0; R3++)
            A6 = A6.redSqr();
          r2(R3 < _3);
          var I2 = this.pow(d2, new f4(1).iushln(_3 - R3 - 1));
          w2 = w2.redMul(I2), d2 = I2.redSqr(), g2 = g2.redMul(d2), _3 = R3;
        }
        return w2;
      }, P22.prototype.invm = function(i2) {
        var a3 = i2._invmp(this.m);
        return a3.negative !== 0 ? (a3.negative = 0, this.imod(a3).redNeg()) : this.imod(a3);
      }, P22.prototype.pow = function(i2, a3) {
        if (a3.isZero())
          return new f4(1).toRed(this);
        if (a3.cmpn(1) === 0)
          return i2.clone();
        var h5 = 4, s2 = new Array(1 << h5);
        s2[0] = new f4(1).toRed(this), s2[1] = i2;
        for (var u3 = 2;u3 < s2.length; u3++)
          s2[u3] = this.mul(s2[u3 - 1], i2);
        var c = s2[0], b3 = 0, l4 = 0, n4 = a3.bitLength() % 26;
        for (n4 === 0 && (n4 = 26), u3 = a3.length - 1;u3 >= 0; u3--) {
          for (var d2 = a3.words[u3], w2 = n4 - 1;w2 >= 0; w2--) {
            var g2 = d2 >> w2 & 1;
            if (c !== s2[0] && (c = this.sqr(c)), g2 === 0 && b3 === 0) {
              l4 = 0;
              continue;
            }
            b3 <<= 1, b3 |= g2, l4++, !(l4 !== h5 && (u3 !== 0 || w2 !== 0)) && (c = this.mul(c, s2[b3]), l4 = 0, b3 = 0);
          }
          n4 = 26;
        }
        return c;
      }, P22.prototype.convertTo = function(i2) {
        var a3 = i2.umod(this.m);
        return a3 === i2 ? a3.clone() : a3;
      }, P22.prototype.convertFrom = function(i2) {
        var a3 = i2.clone();
        return a3.red = null, a3;
      }, f4.mont = function(i2) {
        return new Se(i2);
      };
      function Se(v3) {
        P22.call(this, v3), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new f4(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
      }
      o2(Se, P22), Se.prototype.convertTo = function(i2) {
        return this.imod(i2.ushln(this.shift));
      }, Se.prototype.convertFrom = function(i2) {
        var a3 = this.imod(i2.mul(this.rinv));
        return a3.red = null, a3;
      }, Se.prototype.imul = function(i2, a3) {
        if (i2.isZero() || a3.isZero())
          return i2.words[0] = 0, i2.length = 1, i2;
        var h5 = i2.imul(a3), s2 = h5.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u3 = h5.isub(s2).iushrn(this.shift), c = u3;
        return u3.cmp(this.m) >= 0 ? c = u3.isub(this.m) : u3.cmpn(0) < 0 && (c = u3.iadd(this.m)), c._forceRed(this);
      }, Se.prototype.mul = function(i2, a3) {
        if (i2.isZero() || a3.isZero())
          return new f4(0)._forceRed(this);
        var h5 = i2.mul(a3), s2 = h5.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u3 = h5.isub(s2).iushrn(this.shift), c = u3;
        return u3.cmp(this.m) >= 0 ? c = u3.isub(this.m) : u3.cmpn(0) < 0 && (c = u3.iadd(this.m)), c._forceRed(this);
      }, Se.prototype.invm = function(i2) {
        var a3 = this.imod(i2._invmp(this.m).mul(this.r2));
        return a3._forceRed(this);
      };
    })(typeof kl > "u" || kl, a22);
  });
  Ll = T3((h22) => {
    var Ks = h22;
    function oA(t2, e3) {
      if (Array.isArray(t2))
        return t2.slice();
      if (!t2)
        return [];
      var r2 = [];
      if (typeof t2 != "string") {
        for (var o3 = 0;o3 < t2.length; o3++)
          r2[o3] = t2[o3] | 0;
        return r2;
      }
      if (e3 === "hex") {
        t2 = t2.replace(/[^a-z0-9]+/ig, ""), t2.length % 2 !== 0 && (t2 = "0" + t2);
        for (var o3 = 0;o3 < t2.length; o3 += 2)
          r2.push(parseInt(t2[o3] + t2[o3 + 1], 16));
      } else
        for (var o3 = 0;o3 < t2.length; o3++) {
          var f4 = t2.charCodeAt(o3), p32 = f4 >> 8, m4 = f4 & 255;
          p32 ? r2.push(p32, m4) : r2.push(m4);
        }
      return r2;
    }
    Ks.toArray = oA;
    function o2(t2) {
      return t2.length === 1 ? "0" + t2 : t2;
    }
    Ks.zero2 = o2;
    function s2(t2) {
      for (var e3 = "", r2 = 0;r2 < t2.length; r2++)
        e3 += o2(t2[r2].toString(16));
      return e3;
    }
    Ks.toHex = s2;
    Ks.encode = function(e3, r2) {
      return r2 === "hex" ? s2(e3) : e3;
    };
  });
  or = T3((u22) => {
    var Pr = u22, sA = ri(), hA = ar(), js = Ll();
    Pr.assert = hA;
    Pr.toArray = js.toArray;
    Pr.zero2 = js.zero2;
    Pr.toHex = js.toHex;
    Pr.encode = js.encode;
    function uA(t2, e3, r2) {
      var o2 = new Array(Math.max(t2.bitLength(), r2) + 1);
      o2.fill(0);
      for (var f4 = 1 << e3 + 1, p32 = t2.clone(), m4 = 0;m4 < o2.length; m4++) {
        var y32, M3 = p32.andln(f4 - 1);
        p32.isOdd() ? (M3 > (f4 >> 1) - 1 ? y32 = (f4 >> 1) - M3 : y32 = M3, p32.isubn(y32)) : y32 = 0, o2[m4] = y32, p32.iushrn(1);
      }
      return o2;
    }
    Pr.getNAF = uA;
    function lA(t2, e3) {
      var r2 = [[], []];
      t2 = t2.clone(), e3 = e3.clone();
      for (var o2 = 0, f4 = 0, p32;t2.cmpn(-o2) > 0 || e3.cmpn(-f4) > 0; ) {
        var m4 = t2.andln(3) + o2 & 3, y32 = e3.andln(3) + f4 & 3;
        m4 === 3 && (m4 = -1), y32 === 3 && (y32 = -1);
        var M3;
        (m4 & 1) === 0 ? M3 = 0 : (p32 = t2.andln(7) + o2 & 7, (p32 === 3 || p32 === 5) && y32 === 2 ? M3 = -m4 : M3 = m4), r2[0].push(M3);
        var x32;
        (y32 & 1) === 0 ? x32 = 0 : (p32 = e3.andln(7) + f4 & 7, (p32 === 3 || p32 === 5) && m4 === 2 ? x32 = -y32 : x32 = y32), r2[1].push(x32), 2 * o2 === M3 + 1 && (o2 = 1 - o2), 2 * f4 === x32 + 1 && (f4 = 1 - f4), t2.iushrn(1), e3.iushrn(1);
      }
      return r2;
    }
    Pr.getJSF = lA;
    function dA(t2, e3, r2) {
      var o2 = "_" + e3;
      t2.prototype[e3] = function() {
        return this[o2] !== undefined ? this[o2] : this[o2] = r2.call(this);
      };
    }
    Pr.cachedProperty = dA;
    function cA(t2) {
      return typeof t2 == "string" ? Pr.toArray(t2, "hex") : t2;
    }
    Pr.parseBytes = cA;
    function pA(t2) {
      return new sA(t2, "hex", "le");
    }
    Pr.intFromLE = pA;
  });
  Oa = T3((Mk, l22) => {
    var Cn = ri(), Ca = or(), Zs = Ca.getNAF, vA = Ca.getJSF, Vs = Ca.assert;
    function Xi(t2, e3) {
      this.type = t2, this.p = new Cn(e3.p, 16), this.red = e3.prime ? Cn.red(e3.prime) : Cn.mont(this.p), this.zero = new Cn(0).toRed(this.red), this.one = new Cn(1).toRed(this.red), this.two = new Cn(2).toRed(this.red), this.n = e3.n && new Cn(e3.n, 16), this.g = e3.g && this.pointFromJSON(e3.g, e3.gRed), this._wnafT1 = new Array(4), this._wnafT2 = new Array(4), this._wnafT3 = new Array(4), this._wnafT4 = new Array(4), this._bitLength = this.n ? this.n.bitLength() : 0;
      var r2 = this.n && this.p.div(this.n);
      !r2 || r2.cmpn(100) > 0 ? this.redN = null : (this._maxwellTrick = true, this.redN = this.n.toRed(this.red));
    }
    l22.exports = Xi;
    Xi.prototype.point = function() {
      throw new Error("Not implemented");
    };
    Xi.prototype.validate = function() {
      throw new Error("Not implemented");
    };
    Xi.prototype._fixedNafMul = function(e3, r2) {
      Vs(e3.precomputed);
      var o2 = e3._getDoubles(), f4 = Zs(r2, 1, this._bitLength), p32 = (1 << o2.step + 1) - (o2.step % 2 === 0 ? 2 : 1);
      p32 /= 3;
      var m4 = [], y32, M3;
      for (y32 = 0;y32 < f4.length; y32 += o2.step) {
        M3 = 0;
        for (var x32 = y32 + o2.step - 1;x32 >= y32; x32--)
          M3 = (M3 << 1) + f4[x32];
        m4.push(M3);
      }
      for (var S3 = this.jpoint(null, null, null), E3 = this.jpoint(null, null, null), B5 = p32;B5 > 0; B5--) {
        for (y32 = 0;y32 < m4.length; y32++)
          M3 = m4[y32], M3 === B5 ? E3 = E3.mixedAdd(o2.points[y32]) : M3 === -B5 && (E3 = E3.mixedAdd(o2.points[y32].neg()));
        S3 = S3.add(E3);
      }
      return S3.toP();
    };
    Xi.prototype._wnafMul = function(e3, r2) {
      var o2 = 4, f4 = e3._getNAFPoints(o2);
      o2 = f4.wnd;
      for (var p32 = f4.points, m4 = Zs(r2, o2, this._bitLength), y32 = this.jpoint(null, null, null), M3 = m4.length - 1;M3 >= 0; M3--) {
        for (var x32 = 0;M3 >= 0 && m4[M3] === 0; M3--)
          x32++;
        if (M3 >= 0 && x32++, y32 = y32.dblp(x32), M3 < 0)
          break;
        var S3 = m4[M3];
        Vs(S3 !== 0), e3.type === "affine" ? S3 > 0 ? y32 = y32.mixedAdd(p32[S3 - 1 >> 1]) : y32 = y32.mixedAdd(p32[-S3 - 1 >> 1].neg()) : S3 > 0 ? y32 = y32.add(p32[S3 - 1 >> 1]) : y32 = y32.add(p32[-S3 - 1 >> 1].neg());
      }
      return e3.type === "affine" ? y32.toP() : y32;
    };
    Xi.prototype._wnafMulAdd = function(e3, r2, o2, f4, p32) {
      var m4 = this._wnafT1, y32 = this._wnafT2, M3 = this._wnafT3, x32 = 0, S3, E3, B5;
      for (S3 = 0;S3 < f4; S3++) {
        B5 = r2[S3];
        var q2 = B5._getNAFPoints(e3);
        m4[S3] = q2.wnd, y32[S3] = q2.points;
      }
      for (S3 = f4 - 1;S3 >= 1; S3 -= 2) {
        var L32 = S3 - 1, ge = S3;
        if (m4[L32] !== 1 || m4[ge] !== 1) {
          M3[L32] = Zs(o2[L32], m4[L32], this._bitLength), M3[ge] = Zs(o2[ge], m4[ge], this._bitLength), x32 = Math.max(M3[L32].length, x32), x32 = Math.max(M3[ge].length, x32);
          continue;
        }
        var _e = [r2[L32], null, null, r2[ge]];
        r2[L32].y.cmp(r2[ge].y) === 0 ? (_e[1] = r2[L32].add(r2[ge]), _e[2] = r2[L32].toJ().mixedAdd(r2[ge].neg())) : r2[L32].y.cmp(r2[ge].y.redNeg()) === 0 ? (_e[1] = r2[L32].toJ().mixedAdd(r2[ge]), _e[2] = r2[L32].add(r2[ge].neg())) : (_e[1] = r2[L32].toJ().mixedAdd(r2[ge]), _e[2] = r2[L32].toJ().mixedAdd(r2[ge].neg()));
        var N3 = [-3, -1, -5, -7, 0, 7, 5, 1, 3], we = vA(o2[L32], o2[ge]);
        for (x32 = Math.max(we[0].length, x32), M3[L32] = new Array(x32), M3[ge] = new Array(x32), E3 = 0;E3 < x32; E3++) {
          var ye = we[0][E3] | 0, xe = we[1][E3] | 0;
          M3[L32][E3] = N3[(ye + 1) * 3 + (xe + 1)], M3[ge][E3] = 0, y32[L32] = _e;
        }
      }
      var Re = this.jpoint(null, null, null), Ee = this._wnafT4;
      for (S3 = x32;S3 >= 0; S3--) {
        for (var Ae = 0;S3 >= 0; ) {
          var P22 = true;
          for (E3 = 0;E3 < f4; E3++)
            Ee[E3] = M3[E3][S3] | 0, Ee[E3] !== 0 && (P22 = false);
          if (!P22)
            break;
          Ae++, S3--;
        }
        if (S3 >= 0 && Ae++, Re = Re.dblp(Ae), S3 < 0)
          break;
        for (E3 = 0;E3 < f4; E3++) {
          var Se = Ee[E3];
          Se !== 0 && (Se > 0 ? B5 = y32[E3][Se - 1 >> 1] : Se < 0 && (B5 = y32[E3][-Se - 1 >> 1].neg()), B5.type === "affine" ? Re = Re.mixedAdd(B5) : Re = Re.add(B5));
        }
      }
      for (S3 = 0;S3 < f4; S3++)
        y32[S3] = null;
      return p32 ? Re : Re.toP();
    };
    function _r(t2, e3) {
      this.curve = t2, this.type = e3, this.precomputed = null;
    }
    Xi.BasePoint = _r;
    _r.prototype.eq = function() {
      throw new Error("Not implemented");
    };
    _r.prototype.validate = function() {
      return this.curve.validate(this);
    };
    Xi.prototype.decodePoint = function(e3, r2) {
      e3 = Ca.toArray(e3, r2);
      var o2 = this.p.byteLength();
      if ((e3[0] === 4 || e3[0] === 6 || e3[0] === 7) && e3.length - 1 === 2 * o2) {
        e3[0] === 6 ? Vs(e3[e3.length - 1] % 2 === 0) : e3[0] === 7 && Vs(e3[e3.length - 1] % 2 === 1);
        var f4 = this.point(e3.slice(1, 1 + o2), e3.slice(1 + o2, 1 + 2 * o2));
        return f4;
      } else if ((e3[0] === 2 || e3[0] === 3) && e3.length - 1 === o2)
        return this.pointFromX(e3.slice(1, 1 + o2), e3[0] === 3);
      throw new Error("Unknown point format");
    };
    _r.prototype.encodeCompressed = function(e3) {
      return this.encode(e3, true);
    };
    _r.prototype._encode = function(e3) {
      var r2 = this.curve.p.byteLength(), o2 = this.getX().toArray("be", r2);
      return e3 ? [this.getY().isEven() ? 2 : 3].concat(o2) : [4].concat(o2, this.getY().toArray("be", r2));
    };
    _r.prototype.encode = function(e3, r2) {
      return Ca.encode(this._encode(r2), e3);
    };
    _r.prototype.precompute = function(e3) {
      if (this.precomputed)
        return this;
      var r2 = { doubles: null, naf: null, beta: null };
      return r2.naf = this._getNAFPoints(8), r2.doubles = this._getDoubles(4, e3), r2.beta = this._getBeta(), this.precomputed = r2, this;
    };
    _r.prototype._hasDoubles = function(e3) {
      if (!this.precomputed)
        return false;
      var r2 = this.precomputed.doubles;
      return r2 ? r2.points.length >= Math.ceil((e3.bitLength() + 1) / r2.step) : false;
    };
    _r.prototype._getDoubles = function(e3, r2) {
      if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;
      for (var o2 = [this], f4 = this, p32 = 0;p32 < r2; p32 += e3) {
        for (var m4 = 0;m4 < e3; m4++)
          f4 = f4.dbl();
        o2.push(f4);
      }
      return { step: e3, points: o2 };
    };
    _r.prototype._getNAFPoints = function(e3) {
      if (this.precomputed && this.precomputed.naf)
        return this.precomputed.naf;
      for (var r2 = [this], o2 = (1 << e3) - 1, f4 = o2 === 1 ? null : this.dbl(), p32 = 1;p32 < o2; p32++)
        r2[p32] = r2[p32 - 1].add(f4);
      return { wnd: e3, points: r2 };
    };
    _r.prototype._getBeta = function() {
      return null;
    };
    _r.prototype.dblp = function(e3) {
      for (var r2 = this, o2 = 0;o2 < e3; o2++)
        r2 = r2.dbl();
      return r2;
    };
  });
  c2 = T3((_k, d2) => {
    var bA = or(), ut = ri(), Nl = Ie(), Bf = Oa(), mA = bA.assert;
    function xr(t2) {
      Bf.call(this, "short", t2), this.a = new ut(t2.a, 16).toRed(this.red), this.b = new ut(t2.b, 16).toRed(this.red), this.tinv = this.two.redInvm(), this.zeroA = this.a.fromRed().cmpn(0) === 0, this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0, this.endo = this._getEndomorphism(t2), this._endoWnafT1 = new Array(4), this._endoWnafT2 = new Array(4);
    }
    Nl(xr, Bf);
    d2.exports = xr;
    xr.prototype._getEndomorphism = function(e3) {
      if (!(!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)) {
        var r2, o2;
        if (e3.beta)
          r2 = new ut(e3.beta, 16).toRed(this.red);
        else {
          var f4 = this._getEndoRoots(this.p);
          r2 = f4[0].cmp(f4[1]) < 0 ? f4[0] : f4[1], r2 = r2.toRed(this.red);
        }
        if (e3.lambda)
          o2 = new ut(e3.lambda, 16);
        else {
          var p32 = this._getEndoRoots(this.n);
          this.g.mul(p32[0]).x.cmp(this.g.x.redMul(r2)) === 0 ? o2 = p32[0] : (o2 = p32[1], mA(this.g.mul(o2).x.cmp(this.g.x.redMul(r2)) === 0));
        }
        var m4;
        return e3.basis ? m4 = e3.basis.map(function(y32) {
          return { a: new ut(y32.a, 16), b: new ut(y32.b, 16) };
        }) : m4 = this._getEndoBasis(o2), { beta: r2, lambda: o2, basis: m4 };
      }
    };
    xr.prototype._getEndoRoots = function(e3) {
      var r2 = e3 === this.p ? this.red : ut.mont(e3), o2 = new ut(2).toRed(r2).redInvm(), f4 = o2.redNeg(), p32 = new ut(3).toRed(r2).redNeg().redSqrt().redMul(o2), m4 = f4.redAdd(p32).fromRed(), y32 = f4.redSub(p32).fromRed();
      return [m4, y32];
    };
    xr.prototype._getEndoBasis = function(e3) {
      for (var r2 = this.n.ushrn(Math.floor(this.n.bitLength() / 2)), o2 = e3, f4 = this.n.clone(), p32 = new ut(1), m4 = new ut(0), y32 = new ut(0), M3 = new ut(1), x32, S3, E3, B5, q2, L32, ge, _e = 0, N3, we;o2.cmpn(0) !== 0; ) {
        var ye = f4.div(o2);
        N3 = f4.sub(ye.mul(o2)), we = y32.sub(ye.mul(p32));
        var xe = M3.sub(ye.mul(m4));
        if (!E3 && N3.cmp(r2) < 0)
          x32 = ge.neg(), S3 = p32, E3 = N3.neg(), B5 = we;
        else if (E3 && ++_e === 2)
          break;
        ge = N3, f4 = o2, o2 = N3, y32 = p32, p32 = we, M3 = m4, m4 = xe;
      }
      q2 = N3.neg(), L32 = we;
      var Re = E3.sqr().add(B5.sqr()), Ee = q2.sqr().add(L32.sqr());
      return Ee.cmp(Re) >= 0 && (q2 = x32, L32 = S3), E3.negative && (E3 = E3.neg(), B5 = B5.neg()), q2.negative && (q2 = q2.neg(), L32 = L32.neg()), [{ a: E3, b: B5 }, { a: q2, b: L32 }];
    };
    xr.prototype._endoSplit = function(e3) {
      var r2 = this.endo.basis, o2 = r2[0], f4 = r2[1], p32 = f4.b.mul(e3).divRound(this.n), m4 = o2.b.neg().mul(e3).divRound(this.n), y32 = p32.mul(o2.a), M3 = m4.mul(f4.a), x32 = p32.mul(o2.b), S3 = m4.mul(f4.b), E3 = e3.sub(y32).sub(M3), B5 = x32.add(S3).neg();
      return { k1: E3, k2: B5 };
    };
    xr.prototype.pointFromX = function(e3, r2) {
      e3 = new ut(e3, 16), e3.red || (e3 = e3.toRed(this.red));
      var o2 = e3.redSqr().redMul(e3).redIAdd(e3.redMul(this.a)).redIAdd(this.b), f4 = o2.redSqrt();
      if (f4.redSqr().redSub(o2).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      var p32 = f4.fromRed().isOdd();
      return (r2 && !p32 || !r2 && p32) && (f4 = f4.redNeg()), this.point(e3, f4);
    };
    xr.prototype.validate = function(e3) {
      if (e3.inf)
        return true;
      var { x: r2, y: o2 } = e3, f4 = this.a.redMul(r2), p32 = r2.redSqr().redMul(r2).redIAdd(f4).redIAdd(this.b);
      return o2.redSqr().redISub(p32).cmpn(0) === 0;
    };
    xr.prototype._endoWnafMulAdd = function(e3, r2, o2) {
      for (var f4 = this._endoWnafT1, p32 = this._endoWnafT2, m4 = 0;m4 < e3.length; m4++) {
        var y32 = this._endoSplit(r2[m4]), M3 = e3[m4], x32 = M3._getBeta();
        y32.k1.negative && (y32.k1.ineg(), M3 = M3.neg(true)), y32.k2.negative && (y32.k2.ineg(), x32 = x32.neg(true)), f4[m4 * 2] = M3, f4[m4 * 2 + 1] = x32, p32[m4 * 2] = y32.k1, p32[m4 * 2 + 1] = y32.k2;
      }
      for (var S3 = this._wnafMulAdd(1, f4, p32, m4 * 2, o2), E3 = 0;E3 < m4 * 2; E3++)
        f4[E3] = null, p32[E3] = null;
      return S3;
    };
    function Ct(t2, e3, r2, o2) {
      Bf.BasePoint.call(this, t2, "affine"), e3 === null && r2 === null ? (this.x = null, this.y = null, this.inf = true) : (this.x = new ut(e3, 16), this.y = new ut(r2, 16), o2 && (this.x.forceRed(this.curve.red), this.y.forceRed(this.curve.red)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.inf = false);
    }
    Nl(Ct, Bf.BasePoint);
    xr.prototype.point = function(e3, r2, o2) {
      return new Ct(this, e3, r2, o2);
    };
    xr.prototype.pointFromJSON = function(e3, r2) {
      return Ct.fromJSON(this, e3, r2);
    };
    Ct.prototype._getBeta = function() {
      if (!!this.curve.endo) {
        var e3 = this.precomputed;
        if (e3 && e3.beta)
          return e3.beta;
        var r2 = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
        if (e3) {
          var o2 = this.curve, f4 = function(p32) {
            return o2.point(p32.x.redMul(o2.endo.beta), p32.y);
          };
          e3.beta = r2, r2.precomputed = { beta: null, naf: e3.naf && { wnd: e3.naf.wnd, points: e3.naf.points.map(f4) }, doubles: e3.doubles && { step: e3.doubles.step, points: e3.doubles.points.map(f4) } };
        }
        return r2;
      }
    };
    Ct.prototype.toJSON = function() {
      return this.precomputed ? [this.x, this.y, this.precomputed && { doubles: this.precomputed.doubles && { step: this.precomputed.doubles.step, points: this.precomputed.doubles.points.slice(1) }, naf: this.precomputed.naf && { wnd: this.precomputed.naf.wnd, points: this.precomputed.naf.points.slice(1) } }] : [this.x, this.y];
    };
    Ct.fromJSON = function(e3, r2, o2) {
      typeof r2 == "string" && (r2 = JSON.parse(r2));
      var f4 = e3.point(r2[0], r2[1], o2);
      if (!r2[2])
        return f4;
      function p32(y32) {
        return e3.point(y32[0], y32[1], o2);
      }
      var m4 = r2[2];
      return f4.precomputed = { beta: null, doubles: m4.doubles && { step: m4.doubles.step, points: [f4].concat(m4.doubles.points.map(p32)) }, naf: m4.naf && { wnd: m4.naf.wnd, points: [f4].concat(m4.naf.points.map(p32)) } }, f4;
    };
    Ct.prototype.inspect = function() {
      return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
    };
    Ct.prototype.isInfinity = function() {
      return this.inf;
    };
    Ct.prototype.add = function(e3) {
      if (this.inf)
        return e3;
      if (e3.inf)
        return this;
      if (this.eq(e3))
        return this.dbl();
      if (this.neg().eq(e3))
        return this.curve.point(null, null);
      if (this.x.cmp(e3.x) === 0)
        return this.curve.point(null, null);
      var r2 = this.y.redSub(e3.y);
      r2.cmpn(0) !== 0 && (r2 = r2.redMul(this.x.redSub(e3.x).redInvm()));
      var o2 = r2.redSqr().redISub(this.x).redISub(e3.x), f4 = r2.redMul(this.x.redSub(o2)).redISub(this.y);
      return this.curve.point(o2, f4);
    };
    Ct.prototype.dbl = function() {
      if (this.inf)
        return this;
      var e3 = this.y.redAdd(this.y);
      if (e3.cmpn(0) === 0)
        return this.curve.point(null, null);
      var r2 = this.curve.a, o2 = this.x.redSqr(), f4 = e3.redInvm(), p32 = o2.redAdd(o2).redIAdd(o2).redIAdd(r2).redMul(f4), m4 = p32.redSqr().redISub(this.x.redAdd(this.x)), y32 = p32.redMul(this.x.redSub(m4)).redISub(this.y);
      return this.curve.point(m4, y32);
    };
    Ct.prototype.getX = function() {
      return this.x.fromRed();
    };
    Ct.prototype.getY = function() {
      return this.y.fromRed();
    };
    Ct.prototype.mul = function(e3) {
      return e3 = new ut(e3, 16), this.isInfinity() ? this : this._hasDoubles(e3) ? this.curve._fixedNafMul(this, e3) : this.curve.endo ? this.curve._endoWnafMulAdd([this], [e3]) : this.curve._wnafMul(this, e3);
    };
    Ct.prototype.mulAdd = function(e3, r2, o2) {
      var f4 = [this, r2], p32 = [e3, o2];
      return this.curve.endo ? this.curve._endoWnafMulAdd(f4, p32) : this.curve._wnafMulAdd(1, f4, p32, 2);
    };
    Ct.prototype.jmulAdd = function(e3, r2, o2) {
      var f4 = [this, r2], p32 = [e3, o2];
      return this.curve.endo ? this.curve._endoWnafMulAdd(f4, p32, true) : this.curve._wnafMulAdd(1, f4, p32, 2, true);
    };
    Ct.prototype.eq = function(e3) {
      return this === e3 || this.inf === e3.inf && (this.inf || this.x.cmp(e3.x) === 0 && this.y.cmp(e3.y) === 0);
    };
    Ct.prototype.neg = function(e3) {
      if (this.inf)
        return this;
      var r2 = this.curve.point(this.x, this.y.redNeg());
      if (e3 && this.precomputed) {
        var o2 = this.precomputed, f4 = function(p32) {
          return p32.neg();
        };
        r2.precomputed = { naf: o2.naf && { wnd: o2.naf.wnd, points: o2.naf.points.map(f4) }, doubles: o2.doubles && { step: o2.doubles.step, points: o2.doubles.points.map(f4) } };
      }
      return r2;
    };
    Ct.prototype.toJ = function() {
      if (this.inf)
        return this.curve.jpoint(null, null, null);
      var e3 = this.curve.jpoint(this.x, this.y, this.curve.one);
      return e3;
    };
    function Wt(t2, e3, r2, o2) {
      Bf.BasePoint.call(this, t2, "jacobian"), e3 === null && r2 === null && o2 === null ? (this.x = this.curve.one, this.y = this.curve.one, this.z = new ut(0)) : (this.x = new ut(e3, 16), this.y = new ut(r2, 16), this.z = new ut(o2, 16)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.zOne = this.z === this.curve.one;
    }
    Nl(Wt, Bf.BasePoint);
    xr.prototype.jpoint = function(e3, r2, o2) {
      return new Wt(this, e3, r2, o2);
    };
    Wt.prototype.toP = function() {
      if (this.isInfinity())
        return this.curve.point(null, null);
      var e3 = this.z.redInvm(), r2 = e3.redSqr(), o2 = this.x.redMul(r2), f4 = this.y.redMul(r2).redMul(e3);
      return this.curve.point(o2, f4);
    };
    Wt.prototype.neg = function() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };
    Wt.prototype.add = function(e3) {
      if (this.isInfinity())
        return e3;
      if (e3.isInfinity())
        return this;
      var r2 = e3.z.redSqr(), o2 = this.z.redSqr(), f4 = this.x.redMul(r2), p32 = e3.x.redMul(o2), m4 = this.y.redMul(r2.redMul(e3.z)), y32 = e3.y.redMul(o2.redMul(this.z)), M3 = f4.redSub(p32), x32 = m4.redSub(y32);
      if (M3.cmpn(0) === 0)
        return x32.cmpn(0) !== 0 ? this.curve.jpoint(null, null, null) : this.dbl();
      var S3 = M3.redSqr(), E3 = S3.redMul(M3), B5 = f4.redMul(S3), q2 = x32.redSqr().redIAdd(E3).redISub(B5).redISub(B5), L32 = x32.redMul(B5.redISub(q2)).redISub(m4.redMul(E3)), ge = this.z.redMul(e3.z).redMul(M3);
      return this.curve.jpoint(q2, L32, ge);
    };
    Wt.prototype.mixedAdd = function(e3) {
      if (this.isInfinity())
        return e3.toJ();
      if (e3.isInfinity())
        return this;
      var r2 = this.z.redSqr(), o2 = this.x, f4 = e3.x.redMul(r2), p32 = this.y, m4 = e3.y.redMul(r2).redMul(this.z), y32 = o2.redSub(f4), M3 = p32.redSub(m4);
      if (y32.cmpn(0) === 0)
        return M3.cmpn(0) !== 0 ? this.curve.jpoint(null, null, null) : this.dbl();
      var x32 = y32.redSqr(), S3 = x32.redMul(y32), E3 = o2.redMul(x32), B5 = M3.redSqr().redIAdd(S3).redISub(E3).redISub(E3), q2 = M3.redMul(E3.redISub(B5)).redISub(p32.redMul(S3)), L32 = this.z.redMul(y32);
      return this.curve.jpoint(B5, q2, L32);
    };
    Wt.prototype.dblp = function(e3) {
      if (e3 === 0)
        return this;
      if (this.isInfinity())
        return this;
      if (!e3)
        return this.dbl();
      var r2;
      if (this.curve.zeroA || this.curve.threeA) {
        var o2 = this;
        for (r2 = 0;r2 < e3; r2++)
          o2 = o2.dbl();
        return o2;
      }
      var f4 = this.curve.a, p32 = this.curve.tinv, m4 = this.x, y32 = this.y, M3 = this.z, x32 = M3.redSqr().redSqr(), S3 = y32.redAdd(y32);
      for (r2 = 0;r2 < e3; r2++) {
        var E3 = m4.redSqr(), B5 = S3.redSqr(), q2 = B5.redSqr(), L32 = E3.redAdd(E3).redIAdd(E3).redIAdd(f4.redMul(x32)), ge = m4.redMul(B5), _e = L32.redSqr().redISub(ge.redAdd(ge)), N3 = ge.redISub(_e), we = L32.redMul(N3);
        we = we.redIAdd(we).redISub(q2);
        var ye = S3.redMul(M3);
        r2 + 1 < e3 && (x32 = x32.redMul(q2)), m4 = _e, M3 = ye, S3 = we;
      }
      return this.curve.jpoint(m4, S3.redMul(p32), M3);
    };
    Wt.prototype.dbl = function() {
      return this.isInfinity() ? this : this.curve.zeroA ? this._zeroDbl() : this.curve.threeA ? this._threeDbl() : this._dbl();
    };
    Wt.prototype._zeroDbl = function() {
      var e3, r2, o2;
      if (this.zOne) {
        var f4 = this.x.redSqr(), p32 = this.y.redSqr(), m4 = p32.redSqr(), y32 = this.x.redAdd(p32).redSqr().redISub(f4).redISub(m4);
        y32 = y32.redIAdd(y32);
        var M3 = f4.redAdd(f4).redIAdd(f4), x32 = M3.redSqr().redISub(y32).redISub(y32), S3 = m4.redIAdd(m4);
        S3 = S3.redIAdd(S3), S3 = S3.redIAdd(S3), e3 = x32, r2 = M3.redMul(y32.redISub(x32)).redISub(S3), o2 = this.y.redAdd(this.y);
      } else {
        var E3 = this.x.redSqr(), B5 = this.y.redSqr(), q2 = B5.redSqr(), L32 = this.x.redAdd(B5).redSqr().redISub(E3).redISub(q2);
        L32 = L32.redIAdd(L32);
        var ge = E3.redAdd(E3).redIAdd(E3), _e = ge.redSqr(), N3 = q2.redIAdd(q2);
        N3 = N3.redIAdd(N3), N3 = N3.redIAdd(N3), e3 = _e.redISub(L32).redISub(L32), r2 = ge.redMul(L32.redISub(e3)).redISub(N3), o2 = this.y.redMul(this.z), o2 = o2.redIAdd(o2);
      }
      return this.curve.jpoint(e3, r2, o2);
    };
    Wt.prototype._threeDbl = function() {
      var e3, r2, o2;
      if (this.zOne) {
        var f4 = this.x.redSqr(), p32 = this.y.redSqr(), m4 = p32.redSqr(), y32 = this.x.redAdd(p32).redSqr().redISub(f4).redISub(m4);
        y32 = y32.redIAdd(y32);
        var M3 = f4.redAdd(f4).redIAdd(f4).redIAdd(this.curve.a), x32 = M3.redSqr().redISub(y32).redISub(y32);
        e3 = x32;
        var S3 = m4.redIAdd(m4);
        S3 = S3.redIAdd(S3), S3 = S3.redIAdd(S3), r2 = M3.redMul(y32.redISub(x32)).redISub(S3), o2 = this.y.redAdd(this.y);
      } else {
        var E3 = this.z.redSqr(), B5 = this.y.redSqr(), q2 = this.x.redMul(B5), L32 = this.x.redSub(E3).redMul(this.x.redAdd(E3));
        L32 = L32.redAdd(L32).redIAdd(L32);
        var ge = q2.redIAdd(q2);
        ge = ge.redIAdd(ge);
        var _e = ge.redAdd(ge);
        e3 = L32.redSqr().redISub(_e), o2 = this.y.redAdd(this.z).redSqr().redISub(B5).redISub(E3);
        var N3 = B5.redSqr();
        N3 = N3.redIAdd(N3), N3 = N3.redIAdd(N3), N3 = N3.redIAdd(N3), r2 = L32.redMul(ge.redISub(e3)).redISub(N3);
      }
      return this.curve.jpoint(e3, r2, o2);
    };
    Wt.prototype._dbl = function() {
      var e3 = this.curve.a, r2 = this.x, o2 = this.y, f4 = this.z, p32 = f4.redSqr().redSqr(), m4 = r2.redSqr(), y32 = o2.redSqr(), M3 = m4.redAdd(m4).redIAdd(m4).redIAdd(e3.redMul(p32)), x32 = r2.redAdd(r2);
      x32 = x32.redIAdd(x32);
      var S3 = x32.redMul(y32), E3 = M3.redSqr().redISub(S3.redAdd(S3)), B5 = S3.redISub(E3), q2 = y32.redSqr();
      q2 = q2.redIAdd(q2), q2 = q2.redIAdd(q2), q2 = q2.redIAdd(q2);
      var L32 = M3.redMul(B5).redISub(q2), ge = o2.redAdd(o2).redMul(f4);
      return this.curve.jpoint(E3, L32, ge);
    };
    Wt.prototype.trpl = function() {
      if (!this.curve.zeroA)
        return this.dbl().add(this);
      var e3 = this.x.redSqr(), r2 = this.y.redSqr(), o2 = this.z.redSqr(), f4 = r2.redSqr(), p32 = e3.redAdd(e3).redIAdd(e3), m4 = p32.redSqr(), y32 = this.x.redAdd(r2).redSqr().redISub(e3).redISub(f4);
      y32 = y32.redIAdd(y32), y32 = y32.redAdd(y32).redIAdd(y32), y32 = y32.redISub(m4);
      var M3 = y32.redSqr(), x32 = f4.redIAdd(f4);
      x32 = x32.redIAdd(x32), x32 = x32.redIAdd(x32), x32 = x32.redIAdd(x32);
      var S3 = p32.redIAdd(y32).redSqr().redISub(m4).redISub(M3).redISub(x32), E3 = r2.redMul(S3);
      E3 = E3.redIAdd(E3), E3 = E3.redIAdd(E3);
      var B5 = this.x.redMul(M3).redISub(E3);
      B5 = B5.redIAdd(B5), B5 = B5.redIAdd(B5);
      var q2 = this.y.redMul(S3.redMul(x32.redISub(S3)).redISub(y32.redMul(M3)));
      q2 = q2.redIAdd(q2), q2 = q2.redIAdd(q2), q2 = q2.redIAdd(q2);
      var L32 = this.z.redAdd(y32).redSqr().redISub(o2).redISub(M3);
      return this.curve.jpoint(B5, q2, L32);
    };
    Wt.prototype.mul = function(e3, r2) {
      return e3 = new ut(e3, r2), this.curve._wnafMul(this, e3);
    };
    Wt.prototype.eq = function(e3) {
      if (e3.type === "affine")
        return this.eq(e3.toJ());
      if (this === e3)
        return true;
      var r2 = this.z.redSqr(), o2 = e3.z.redSqr();
      if (this.x.redMul(o2).redISub(e3.x.redMul(r2)).cmpn(0) !== 0)
        return false;
      var f4 = r2.redMul(this.z), p32 = o2.redMul(e3.z);
      return this.y.redMul(p32).redISub(e3.y.redMul(f4)).cmpn(0) === 0;
    };
    Wt.prototype.eqXToP = function(e3) {
      var r2 = this.z.redSqr(), o2 = e3.toRed(this.curve.red).redMul(r2);
      if (this.x.cmp(o2) === 0)
        return true;
      for (var f4 = e3.clone(), p32 = this.curve.redN.redMul(r2);; ) {
        if (f4.iadd(this.curve.n), f4.cmp(this.curve.p) >= 0)
          return false;
        if (o2.redIAdd(p32), this.x.cmp(o2) === 0)
          return true;
      }
    };
    Wt.prototype.inspect = function() {
      return this.isInfinity() ? "<EC JPoint Infinity>" : "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
    };
    Wt.prototype.isInfinity = function() {
      return this.z.cmpn(0) === 0;
    };
  });
  b22 = T3((xk, v22) => {
    var qf = ri(), p22 = Ie(), $s = Oa(), gA = or();
    function If(t2) {
      $s.call(this, "mont", t2), this.a = new qf(t2.a, 16).toRed(this.red), this.b = new qf(t2.b, 16).toRed(this.red), this.i4 = new qf(4).toRed(this.red).redInvm(), this.two = new qf(2).toRed(this.red), this.a24 = this.i4.redMul(this.a.redAdd(this.two));
    }
    p22(If, $s);
    v22.exports = If;
    If.prototype.validate = function(e3) {
      var r2 = e3.normalize().x, o2 = r2.redSqr(), f4 = o2.redMul(r2).redAdd(o2.redMul(this.a)).redAdd(r2), p32 = f4.redSqrt();
      return p32.redSqr().cmp(f4) === 0;
    };
    function Ot(t2, e3, r2) {
      $s.BasePoint.call(this, t2, "projective"), e3 === null && r2 === null ? (this.x = this.curve.one, this.z = this.curve.zero) : (this.x = new qf(e3, 16), this.z = new qf(r2, 16), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)));
    }
    p22(Ot, $s.BasePoint);
    If.prototype.decodePoint = function(e3, r2) {
      return this.point(gA.toArray(e3, r2), 1);
    };
    If.prototype.point = function(e3, r2) {
      return new Ot(this, e3, r2);
    };
    If.prototype.pointFromJSON = function(e3) {
      return Ot.fromJSON(this, e3);
    };
    Ot.prototype.precompute = function() {};
    Ot.prototype._encode = function() {
      return this.getX().toArray("be", this.curve.p.byteLength());
    };
    Ot.fromJSON = function(e3, r2) {
      return new Ot(e3, r2[0], r2[1] || e3.one);
    };
    Ot.prototype.inspect = function() {
      return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    };
    Ot.prototype.isInfinity = function() {
      return this.z.cmpn(0) === 0;
    };
    Ot.prototype.dbl = function() {
      var e3 = this.x.redAdd(this.z), r2 = e3.redSqr(), o2 = this.x.redSub(this.z), f4 = o2.redSqr(), p32 = r2.redSub(f4), m4 = r2.redMul(f4), y32 = p32.redMul(f4.redAdd(this.curve.a24.redMul(p32)));
      return this.curve.point(m4, y32);
    };
    Ot.prototype.add = function() {
      throw new Error("Not supported on Montgomery curve");
    };
    Ot.prototype.diffAdd = function(e3, r2) {
      var o2 = this.x.redAdd(this.z), f4 = this.x.redSub(this.z), p32 = e3.x.redAdd(e3.z), m4 = e3.x.redSub(e3.z), y32 = m4.redMul(o2), M3 = p32.redMul(f4), x32 = r2.z.redMul(y32.redAdd(M3).redSqr()), S3 = r2.x.redMul(y32.redISub(M3).redSqr());
      return this.curve.point(x32, S3);
    };
    Ot.prototype.mul = function(e3) {
      for (var r2 = e3.clone(), o2 = this, f4 = this.curve.point(null, null), p32 = this, m4 = [];r2.cmpn(0) !== 0; r2.iushrn(1))
        m4.push(r2.andln(1));
      for (var y32 = m4.length - 1;y32 >= 0; y32--)
        m4[y32] === 0 ? (o2 = o2.diffAdd(f4, p32), f4 = f4.dbl()) : (f4 = o2.diffAdd(f4, p32), o2 = o2.dbl());
      return f4;
    };
    Ot.prototype.mulAdd = function() {
      throw new Error("Not supported on Montgomery curve");
    };
    Ot.prototype.jumlAdd = function() {
      throw new Error("Not supported on Montgomery curve");
    };
    Ot.prototype.eq = function(e3) {
      return this.getX().cmp(e3.getX()) === 0;
    };
    Ot.prototype.normalize = function() {
      return this.x = this.x.redMul(this.z.redInvm()), this.z = this.curve.one, this;
    };
    Ot.prototype.getX = function() {
      return this.normalize(), this.x.fromRed();
    };
  });
  y22 = T3((Sk, g2) => {
    var yA = or(), Ai = ri(), m22 = Ie(), Gs = Oa(), wA = yA.assert;
    function ii(t2) {
      this.twisted = (t2.a | 0) !== 1, this.mOneA = this.twisted && (t2.a | 0) === -1, this.extended = this.mOneA, Gs.call(this, "edwards", t2), this.a = new Ai(t2.a, 16).umod(this.red.m), this.a = this.a.toRed(this.red), this.c = new Ai(t2.c, 16).toRed(this.red), this.c2 = this.c.redSqr(), this.d = new Ai(t2.d, 16).toRed(this.red), this.dd = this.d.redAdd(this.d), wA(!this.twisted || this.c.fromRed().cmpn(1) === 0), this.oneC = (t2.c | 0) === 1;
    }
    m22(ii, Gs);
    g2.exports = ii;
    ii.prototype._mulA = function(e3) {
      return this.mOneA ? e3.redNeg() : this.a.redMul(e3);
    };
    ii.prototype._mulC = function(e3) {
      return this.oneC ? e3 : this.c.redMul(e3);
    };
    ii.prototype.jpoint = function(e3, r2, o2, f4) {
      return this.point(e3, r2, o2, f4);
    };
    ii.prototype.pointFromX = function(e3, r2) {
      e3 = new Ai(e3, 16), e3.red || (e3 = e3.toRed(this.red));
      var o2 = e3.redSqr(), f4 = this.c2.redSub(this.a.redMul(o2)), p32 = this.one.redSub(this.c2.redMul(this.d).redMul(o2)), m4 = f4.redMul(p32.redInvm()), y32 = m4.redSqrt();
      if (y32.redSqr().redSub(m4).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      var M3 = y32.fromRed().isOdd();
      return (r2 && !M3 || !r2 && M3) && (y32 = y32.redNeg()), this.point(e3, y32);
    };
    ii.prototype.pointFromY = function(e3, r2) {
      e3 = new Ai(e3, 16), e3.red || (e3 = e3.toRed(this.red));
      var o2 = e3.redSqr(), f4 = o2.redSub(this.c2), p32 = o2.redMul(this.d).redMul(this.c2).redSub(this.a), m4 = f4.redMul(p32.redInvm());
      if (m4.cmp(this.zero) === 0) {
        if (r2)
          throw new Error("invalid point");
        return this.point(this.zero, e3);
      }
      var y32 = m4.redSqrt();
      if (y32.redSqr().redSub(m4).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      return y32.fromRed().isOdd() !== r2 && (y32 = y32.redNeg()), this.point(y32, e3);
    };
    ii.prototype.validate = function(e3) {
      if (e3.isInfinity())
        return true;
      e3.normalize();
      var r2 = e3.x.redSqr(), o2 = e3.y.redSqr(), f4 = r2.redMul(this.a).redAdd(o2), p32 = this.c2.redMul(this.one.redAdd(this.d.redMul(r2).redMul(o2)));
      return f4.cmp(p32) === 0;
    };
    function at(t2, e3, r2, o2, f4) {
      Gs.BasePoint.call(this, t2, "projective"), e3 === null && r2 === null && o2 === null ? (this.x = this.curve.zero, this.y = this.curve.one, this.z = this.curve.one, this.t = this.curve.zero, this.zOne = true) : (this.x = new Ai(e3, 16), this.y = new Ai(r2, 16), this.z = o2 ? new Ai(o2, 16) : this.curve.one, this.t = f4 && new Ai(f4, 16), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.t && !this.t.red && (this.t = this.t.toRed(this.curve.red)), this.zOne = this.z === this.curve.one, this.curve.extended && !this.t && (this.t = this.x.redMul(this.y), this.zOne || (this.t = this.t.redMul(this.z.redInvm()))));
    }
    m22(at, Gs.BasePoint);
    ii.prototype.pointFromJSON = function(e3) {
      return at.fromJSON(this, e3);
    };
    ii.prototype.point = function(e3, r2, o2, f4) {
      return new at(this, e3, r2, o2, f4);
    };
    at.fromJSON = function(e3, r2) {
      return new at(e3, r2[0], r2[1], r2[2]);
    };
    at.prototype.inspect = function() {
      return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    };
    at.prototype.isInfinity = function() {
      return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
    };
    at.prototype._extDbl = function() {
      var e3 = this.x.redSqr(), r2 = this.y.redSqr(), o2 = this.z.redSqr();
      o2 = o2.redIAdd(o2);
      var f4 = this.curve._mulA(e3), p32 = this.x.redAdd(this.y).redSqr().redISub(e3).redISub(r2), m4 = f4.redAdd(r2), y32 = m4.redSub(o2), M3 = f4.redSub(r2), x32 = p32.redMul(y32), S3 = m4.redMul(M3), E3 = p32.redMul(M3), B5 = y32.redMul(m4);
      return this.curve.point(x32, S3, B5, E3);
    };
    at.prototype._projDbl = function() {
      var e3 = this.x.redAdd(this.y).redSqr(), r2 = this.x.redSqr(), o2 = this.y.redSqr(), f4, p32, m4, y32, M3, x32;
      if (this.curve.twisted) {
        y32 = this.curve._mulA(r2);
        var S3 = y32.redAdd(o2);
        this.zOne ? (f4 = e3.redSub(r2).redSub(o2).redMul(S3.redSub(this.curve.two)), p32 = S3.redMul(y32.redSub(o2)), m4 = S3.redSqr().redSub(S3).redSub(S3)) : (M3 = this.z.redSqr(), x32 = S3.redSub(M3).redISub(M3), f4 = e3.redSub(r2).redISub(o2).redMul(x32), p32 = S3.redMul(y32.redSub(o2)), m4 = S3.redMul(x32));
      } else
        y32 = r2.redAdd(o2), M3 = this.curve._mulC(this.z).redSqr(), x32 = y32.redSub(M3).redSub(M3), f4 = this.curve._mulC(e3.redISub(y32)).redMul(x32), p32 = this.curve._mulC(y32).redMul(r2.redISub(o2)), m4 = y32.redMul(x32);
      return this.curve.point(f4, p32, m4);
    };
    at.prototype.dbl = function() {
      return this.isInfinity() ? this : this.curve.extended ? this._extDbl() : this._projDbl();
    };
    at.prototype._extAdd = function(e3) {
      var r2 = this.y.redSub(this.x).redMul(e3.y.redSub(e3.x)), o2 = this.y.redAdd(this.x).redMul(e3.y.redAdd(e3.x)), f4 = this.t.redMul(this.curve.dd).redMul(e3.t), p32 = this.z.redMul(e3.z.redAdd(e3.z)), m4 = o2.redSub(r2), y32 = p32.redSub(f4), M3 = p32.redAdd(f4), x32 = o2.redAdd(r2), S3 = m4.redMul(y32), E3 = M3.redMul(x32), B5 = m4.redMul(x32), q2 = y32.redMul(M3);
      return this.curve.point(S3, E3, q2, B5);
    };
    at.prototype._projAdd = function(e3) {
      var r2 = this.z.redMul(e3.z), o2 = r2.redSqr(), f4 = this.x.redMul(e3.x), p32 = this.y.redMul(e3.y), m4 = this.curve.d.redMul(f4).redMul(p32), y32 = o2.redSub(m4), M3 = o2.redAdd(m4), x32 = this.x.redAdd(this.y).redMul(e3.x.redAdd(e3.y)).redISub(f4).redISub(p32), S3 = r2.redMul(y32).redMul(x32), E3, B5;
      return this.curve.twisted ? (E3 = r2.redMul(M3).redMul(p32.redSub(this.curve._mulA(f4))), B5 = y32.redMul(M3)) : (E3 = r2.redMul(M3).redMul(p32.redSub(f4)), B5 = this.curve._mulC(y32).redMul(M3)), this.curve.point(S3, E3, B5);
    };
    at.prototype.add = function(e3) {
      return this.isInfinity() ? e3 : e3.isInfinity() ? this : this.curve.extended ? this._extAdd(e3) : this._projAdd(e3);
    };
    at.prototype.mul = function(e3) {
      return this._hasDoubles(e3) ? this.curve._fixedNafMul(this, e3) : this.curve._wnafMul(this, e3);
    };
    at.prototype.mulAdd = function(e3, r2, o2) {
      return this.curve._wnafMulAdd(1, [this, r2], [e3, o2], 2, false);
    };
    at.prototype.jmulAdd = function(e3, r2, o2) {
      return this.curve._wnafMulAdd(1, [this, r2], [e3, o2], 2, true);
    };
    at.prototype.normalize = function() {
      if (this.zOne)
        return this;
      var e3 = this.z.redInvm();
      return this.x = this.x.redMul(e3), this.y = this.y.redMul(e3), this.t && (this.t = this.t.redMul(e3)), this.z = this.curve.one, this.zOne = true, this;
    };
    at.prototype.neg = function() {
      return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
    };
    at.prototype.getX = function() {
      return this.normalize(), this.x.fromRed();
    };
    at.prototype.getY = function() {
      return this.normalize(), this.y.fromRed();
    };
    at.prototype.eq = function(e3) {
      return this === e3 || this.getX().cmp(e3.getX()) === 0 && this.getY().cmp(e3.getY()) === 0;
    };
    at.prototype.eqXToP = function(e3) {
      var r2 = e3.toRed(this.curve.red).redMul(this.z);
      if (this.x.cmp(r2) === 0)
        return true;
      for (var o2 = e3.clone(), f4 = this.curve.redN.redMul(this.z);; ) {
        if (o2.iadd(this.curve.n), o2.cmp(this.curve.p) >= 0)
          return false;
        if (r2.redIAdd(f4), this.x.cmp(r2) === 0)
          return true;
      }
    };
    at.prototype.toP = at.prototype.normalize;
    at.prototype.mixedAdd = at.prototype.add;
  });
  Dl = T3((w2) => {
    var Ys = w2;
    Ys.base = Oa();
    Ys.short = c2();
    Ys.mont = b22();
    Ys.edwards = y22();
  });
  Cr = T3((it) => {
    var MA = ar(), _A = Ie();
    it.inherits = _A;
    function xA(t2, e3) {
      return (t2.charCodeAt(e3) & 64512) !== 55296 || e3 < 0 || e3 + 1 >= t2.length ? false : (t2.charCodeAt(e3 + 1) & 64512) === 56320;
    }
    function SA(t2, e3) {
      if (Array.isArray(t2))
        return t2.slice();
      if (!t2)
        return [];
      var r2 = [];
      if (typeof t2 == "string")
        if (e3) {
          if (e3 === "hex")
            for (t2 = t2.replace(/[^a-z0-9]+/ig, ""), t2.length % 2 !== 0 && (t2 = "0" + t2), f4 = 0;f4 < t2.length; f4 += 2)
              r2.push(parseInt(t2[f4] + t2[f4 + 1], 16));
        } else
          for (var o2 = 0, f4 = 0;f4 < t2.length; f4++) {
            var p32 = t2.charCodeAt(f4);
            p32 < 128 ? r2[o2++] = p32 : p32 < 2048 ? (r2[o2++] = p32 >> 6 | 192, r2[o2++] = p32 & 63 | 128) : xA(t2, f4) ? (p32 = 65536 + ((p32 & 1023) << 10) + (t2.charCodeAt(++f4) & 1023), r2[o2++] = p32 >> 18 | 240, r2[o2++] = p32 >> 12 & 63 | 128, r2[o2++] = p32 >> 6 & 63 | 128, r2[o2++] = p32 & 63 | 128) : (r2[o2++] = p32 >> 12 | 224, r2[o2++] = p32 >> 6 & 63 | 128, r2[o2++] = p32 & 63 | 128);
          }
      else
        for (f4 = 0;f4 < t2.length; f4++)
          r2[f4] = t2[f4] | 0;
      return r2;
    }
    it.toArray = SA;
    function EA(t2) {
      for (var e3 = "", r2 = 0;r2 < t2.length; r2++)
        e3 += _22(t2[r2].toString(16));
      return e3;
    }
    it.toHex = EA;
    function M22(t2) {
      var e3 = t2 >>> 24 | t2 >>> 8 & 65280 | t2 << 8 & 16711680 | (t2 & 255) << 24;
      return e3 >>> 0;
    }
    it.htonl = M22;
    function AA(t2, e3) {
      for (var r2 = "", o2 = 0;o2 < t2.length; o2++) {
        var f4 = t2[o2];
        e3 === "little" && (f4 = M22(f4)), r2 += x22(f4.toString(16));
      }
      return r2;
    }
    it.toHex32 = AA;
    function _22(t2) {
      return t2.length === 1 ? "0" + t2 : t2;
    }
    it.zero2 = _22;
    function x22(t2) {
      return t2.length === 7 ? "0" + t2 : t2.length === 6 ? "00" + t2 : t2.length === 5 ? "000" + t2 : t2.length === 4 ? "0000" + t2 : t2.length === 3 ? "00000" + t2 : t2.length === 2 ? "000000" + t2 : t2.length === 1 ? "0000000" + t2 : t2;
    }
    it.zero8 = x22;
    function RA(t2, e3, r2, o2) {
      var f4 = r2 - e3;
      MA(f4 % 4 === 0);
      for (var p32 = new Array(f4 / 4), m4 = 0, y32 = e3;m4 < p32.length; m4++, y32 += 4) {
        var M3;
        o2 === "big" ? M3 = t2[y32] << 24 | t2[y32 + 1] << 16 | t2[y32 + 2] << 8 | t2[y32 + 3] : M3 = t2[y32 + 3] << 24 | t2[y32 + 2] << 16 | t2[y32 + 1] << 8 | t2[y32], p32[m4] = M3 >>> 0;
      }
      return p32;
    }
    it.join32 = RA;
    function BA(t2, e3) {
      for (var r2 = new Array(t2.length * 4), o2 = 0, f4 = 0;o2 < t2.length; o2++, f4 += 4) {
        var p32 = t2[o2];
        e3 === "big" ? (r2[f4] = p32 >>> 24, r2[f4 + 1] = p32 >>> 16 & 255, r2[f4 + 2] = p32 >>> 8 & 255, r2[f4 + 3] = p32 & 255) : (r2[f4 + 3] = p32 >>> 24, r2[f4 + 2] = p32 >>> 16 & 255, r2[f4 + 1] = p32 >>> 8 & 255, r2[f4] = p32 & 255);
      }
      return r2;
    }
    it.split32 = BA;
    function qA(t2, e3) {
      return t2 >>> e3 | t2 << 32 - e3;
    }
    it.rotr32 = qA;
    function IA(t2, e3) {
      return t2 << e3 | t2 >>> 32 - e3;
    }
    it.rotl32 = IA;
    function TA(t2, e3) {
      return t2 + e3 >>> 0;
    }
    it.sum32 = TA;
    function kA(t2, e3, r2) {
      return t2 + e3 + r2 >>> 0;
    }
    it.sum32_3 = kA;
    function LA(t2, e3, r2, o2) {
      return t2 + e3 + r2 + o2 >>> 0;
    }
    it.sum32_4 = LA;
    function NA(t2, e3, r2, o2, f4) {
      return t2 + e3 + r2 + o2 + f4 >>> 0;
    }
    it.sum32_5 = NA;
    function DA(t2, e3, r2, o2) {
      var f4 = t2[e3], p32 = t2[e3 + 1], m4 = o2 + p32 >>> 0, y32 = (m4 < o2 ? 1 : 0) + r2 + f4;
      t2[e3] = y32 >>> 0, t2[e3 + 1] = m4;
    }
    it.sum64 = DA;
    function PA(t2, e3, r2, o2) {
      var f4 = e3 + o2 >>> 0, p32 = (f4 < e3 ? 1 : 0) + t2 + r2;
      return p32 >>> 0;
    }
    it.sum64_hi = PA;
    function CA(t2, e3, r2, o2) {
      var f4 = e3 + o2;
      return f4 >>> 0;
    }
    it.sum64_lo = CA;
    function OA(t2, e3, r2, o2, f4, p32, m4, y32) {
      var M3 = 0, x32 = e3;
      x32 = x32 + o2 >>> 0, M3 += x32 < e3 ? 1 : 0, x32 = x32 + p32 >>> 0, M3 += x32 < p32 ? 1 : 0, x32 = x32 + y32 >>> 0, M3 += x32 < y32 ? 1 : 0;
      var S3 = t2 + r2 + f4 + m4 + M3;
      return S3 >>> 0;
    }
    it.sum64_4_hi = OA;
    function FA(t2, e3, r2, o2, f4, p32, m4, y32) {
      var M3 = e3 + o2 + p32 + y32;
      return M3 >>> 0;
    }
    it.sum64_4_lo = FA;
    function UA(t2, e3, r2, o2, f4, p32, m4, y32, M3, x32) {
      var S3 = 0, E3 = e3;
      E3 = E3 + o2 >>> 0, S3 += E3 < e3 ? 1 : 0, E3 = E3 + p32 >>> 0, S3 += E3 < p32 ? 1 : 0, E3 = E3 + y32 >>> 0, S3 += E3 < y32 ? 1 : 0, E3 = E3 + x32 >>> 0, S3 += E3 < x32 ? 1 : 0;
      var B5 = t2 + r2 + f4 + m4 + M3 + S3;
      return B5 >>> 0;
    }
    it.sum64_5_hi = UA;
    function zA(t2, e3, r2, o2, f4, p32, m4, y32, M3, x32) {
      var S3 = e3 + o2 + p32 + y32 + x32;
      return S3 >>> 0;
    }
    it.sum64_5_lo = zA;
    function HA(t2, e3, r2) {
      var o2 = e3 << 32 - r2 | t2 >>> r2;
      return o2 >>> 0;
    }
    it.rotr64_hi = HA;
    function WA(t2, e3, r2) {
      var o2 = t2 << 32 - r2 | e3 >>> r2;
      return o2 >>> 0;
    }
    it.rotr64_lo = WA;
    function KA(t2, e3, r2) {
      return t2 >>> r2;
    }
    it.shr64_hi = KA;
    function jA(t2, e3, r2) {
      var o2 = t2 << 32 - r2 | e3 >>> r2;
      return o2 >>> 0;
    }
    it.shr64_lo = jA;
  });
  Tf = T3((E22) => {
    var S22 = Cr(), ZA = ar();
    function Xs() {
      this.pending = null, this.pendingTotal = 0, this.blockSize = this.constructor.blockSize, this.outSize = this.constructor.outSize, this.hmacStrength = this.constructor.hmacStrength, this.padLength = this.constructor.padLength / 8, this.endian = "big", this._delta8 = this.blockSize / 8, this._delta32 = this.blockSize / 32;
    }
    E22.BlockHash = Xs;
    Xs.prototype.update = function(e3, r2) {
      if (e3 = S22.toArray(e3, r2), this.pending ? this.pending = this.pending.concat(e3) : this.pending = e3, this.pendingTotal += e3.length, this.pending.length >= this._delta8) {
        e3 = this.pending;
        var o2 = e3.length % this._delta8;
        this.pending = e3.slice(e3.length - o2, e3.length), this.pending.length === 0 && (this.pending = null), e3 = S22.join32(e3, 0, e3.length - o2, this.endian);
        for (var f4 = 0;f4 < e3.length; f4 += this._delta32)
          this._update(e3, f4, f4 + this._delta32);
      }
      return this;
    };
    Xs.prototype.digest = function(e3) {
      return this.update(this._pad()), ZA(this.pending === null), this._digest(e3);
    };
    Xs.prototype._pad = function() {
      var e3 = this.pendingTotal, r2 = this._delta8, o2 = r2 - (e3 + this.padLength) % r2, f4 = new Array(o2 + this.padLength);
      f4[0] = 128;
      for (var p32 = 1;p32 < o2; p32++)
        f4[p32] = 0;
      if (e3 <<= 3, this.endian === "big") {
        for (var m4 = 8;m4 < this.padLength; m4++)
          f4[p32++] = 0;
        f4[p32++] = 0, f4[p32++] = 0, f4[p32++] = 0, f4[p32++] = 0, f4[p32++] = e3 >>> 24 & 255, f4[p32++] = e3 >>> 16 & 255, f4[p32++] = e3 >>> 8 & 255, f4[p32++] = e3 & 255;
      } else
        for (f4[p32++] = e3 & 255, f4[p32++] = e3 >>> 8 & 255, f4[p32++] = e3 >>> 16 & 255, f4[p32++] = e3 >>> 24 & 255, f4[p32++] = 0, f4[p32++] = 0, f4[p32++] = 0, f4[p32++] = 0, m4 = 8;m4 < this.padLength; m4++)
          f4[p32++] = 0;
      return f4;
    };
  });
  Pl = T3((Ri) => {
    var VA = Cr(), ni = VA.rotr32;
    function $A(t2, e3, r2, o2) {
      if (t2 === 0)
        return A22(e3, r2, o2);
      if (t2 === 1 || t2 === 3)
        return B22(e3, r2, o2);
      if (t2 === 2)
        return R22(e3, r2, o2);
    }
    Ri.ft_1 = $A;
    function A22(t2, e3, r2) {
      return t2 & e3 ^ ~t2 & r2;
    }
    Ri.ch32 = A22;
    function R22(t2, e3, r2) {
      return t2 & e3 ^ t2 & r2 ^ e3 & r2;
    }
    Ri.maj32 = R22;
    function B22(t2, e3, r2) {
      return t2 ^ e3 ^ r2;
    }
    Ri.p32 = B22;
    function GA(t2) {
      return ni(t2, 2) ^ ni(t2, 13) ^ ni(t2, 22);
    }
    Ri.s0_256 = GA;
    function YA(t2) {
      return ni(t2, 6) ^ ni(t2, 11) ^ ni(t2, 25);
    }
    Ri.s1_256 = YA;
    function XA(t2) {
      return ni(t2, 7) ^ ni(t2, 18) ^ t2 >>> 3;
    }
    Ri.g0_256 = XA;
    function JA(t2) {
      return ni(t2, 17) ^ ni(t2, 19) ^ t2 >>> 10;
    }
    Ri.g1_256 = JA;
  });
  T22 = T3((qk, I2) => {
    var kf = Cr(), QA = Tf(), eR = Pl(), Cl = kf.rotl32, Fa = kf.sum32, tR = kf.sum32_5, rR = eR.ft_1, q2 = QA.BlockHash, iR = [1518500249, 1859775393, 2400959708, 3395469782];
    function fi() {
      if (!(this instanceof fi))
        return new fi;
      q2.call(this), this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520], this.W = new Array(80);
    }
    kf.inherits(fi, q2);
    I2.exports = fi;
    fi.blockSize = 512;
    fi.outSize = 160;
    fi.hmacStrength = 80;
    fi.padLength = 64;
    fi.prototype._update = function(e3, r2) {
      for (var o2 = this.W, f4 = 0;f4 < 16; f4++)
        o2[f4] = e3[r2 + f4];
      for (;f4 < o2.length; f4++)
        o2[f4] = Cl(o2[f4 - 3] ^ o2[f4 - 8] ^ o2[f4 - 14] ^ o2[f4 - 16], 1);
      var p32 = this.h[0], m4 = this.h[1], y32 = this.h[2], M3 = this.h[3], x32 = this.h[4];
      for (f4 = 0;f4 < o2.length; f4++) {
        var S3 = ~~(f4 / 20), E3 = tR(Cl(p32, 5), rR(S3, m4, y32, M3), x32, o2[f4], iR[S3]);
        x32 = M3, M3 = y32, y32 = Cl(m4, 30), m4 = p32, p32 = E3;
      }
      this.h[0] = Fa(this.h[0], p32), this.h[1] = Fa(this.h[1], m4), this.h[2] = Fa(this.h[2], y32), this.h[3] = Fa(this.h[3], M3), this.h[4] = Fa(this.h[4], x32);
    };
    fi.prototype._digest = function(e3) {
      return e3 === "hex" ? kf.toHex32(this.h, "big") : kf.split32(this.h, "big");
    };
  });
  Ol = T3((Ik, L22) => {
    var Lf = Cr(), nR = Tf(), Nf = Pl(), fR = ar(), Or = Lf.sum32, aR = Lf.sum32_4, oR = Lf.sum32_5, sR = Nf.ch32, hR = Nf.maj32, uR = Nf.s0_256, lR = Nf.s1_256, dR = Nf.g0_256, cR = Nf.g1_256, k2 = nR.BlockHash, pR = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];
    function ai() {
      if (!(this instanceof ai))
        return new ai;
      k2.call(this), this.h = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225], this.k = pR, this.W = new Array(64);
    }
    Lf.inherits(ai, k2);
    L22.exports = ai;
    ai.blockSize = 512;
    ai.outSize = 256;
    ai.hmacStrength = 192;
    ai.padLength = 64;
    ai.prototype._update = function(e3, r2) {
      for (var o2 = this.W, f4 = 0;f4 < 16; f4++)
        o2[f4] = e3[r2 + f4];
      for (;f4 < o2.length; f4++)
        o2[f4] = aR(cR(o2[f4 - 2]), o2[f4 - 7], dR(o2[f4 - 15]), o2[f4 - 16]);
      var p32 = this.h[0], m4 = this.h[1], y32 = this.h[2], M3 = this.h[3], x32 = this.h[4], S3 = this.h[5], E3 = this.h[6], B5 = this.h[7];
      for (fR(this.k.length === o2.length), f4 = 0;f4 < o2.length; f4++) {
        var q2 = oR(B5, lR(x32), sR(x32, S3, E3), this.k[f4], o2[f4]), L32 = Or(uR(p32), hR(p32, m4, y32));
        B5 = E3, E3 = S3, S3 = x32, x32 = Or(M3, q2), M3 = y32, y32 = m4, m4 = p32, p32 = Or(q2, L32);
      }
      this.h[0] = Or(this.h[0], p32), this.h[1] = Or(this.h[1], m4), this.h[2] = Or(this.h[2], y32), this.h[3] = Or(this.h[3], M3), this.h[4] = Or(this.h[4], x32), this.h[5] = Or(this.h[5], S3), this.h[6] = Or(this.h[6], E3), this.h[7] = Or(this.h[7], B5);
    };
    ai.prototype._digest = function(e3) {
      return e3 === "hex" ? Lf.toHex32(this.h, "big") : Lf.split32(this.h, "big");
    };
  });
  P2 = T3((Tk, D2) => {
    var Fl = Cr(), N22 = Ol();
    function Bi() {
      if (!(this instanceof Bi))
        return new Bi;
      N22.call(this), this.h = [3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428];
    }
    Fl.inherits(Bi, N22);
    D2.exports = Bi;
    Bi.blockSize = 512;
    Bi.outSize = 224;
    Bi.hmacStrength = 192;
    Bi.padLength = 64;
    Bi.prototype._digest = function(e3) {
      return e3 === "hex" ? Fl.toHex32(this.h.slice(0, 7), "big") : Fl.split32(this.h.slice(0, 7), "big");
    };
  });
  Hl = T3((kk, U22) => {
    var rr = Cr(), vR = Tf(), bR = ar(), oi = rr.rotr64_hi, si = rr.rotr64_lo, C22 = rr.shr64_hi, O2 = rr.shr64_lo, Ji = rr.sum64, Ul = rr.sum64_hi, zl = rr.sum64_lo, mR = rr.sum64_4_hi, gR = rr.sum64_4_lo, yR = rr.sum64_5_hi, wR = rr.sum64_5_lo, F2 = vR.BlockHash, MR = [1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591];
    function Fr() {
      if (!(this instanceof Fr))
        return new Fr;
      F2.call(this), this.h = [1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723, 2773480762, 1595750129, 1359893119, 2917565137, 2600822924, 725511199, 528734635, 4215389547, 1541459225, 327033209], this.k = MR, this.W = new Array(160);
    }
    rr.inherits(Fr, F2);
    U22.exports = Fr;
    Fr.blockSize = 1024;
    Fr.outSize = 512;
    Fr.hmacStrength = 192;
    Fr.padLength = 128;
    Fr.prototype._prepareBlock = function(e3, r2) {
      for (var o2 = this.W, f4 = 0;f4 < 32; f4++)
        o2[f4] = e3[r2 + f4];
      for (;f4 < o2.length; f4 += 2) {
        var p32 = kR(o2[f4 - 4], o2[f4 - 3]), m4 = LR(o2[f4 - 4], o2[f4 - 3]), y32 = o2[f4 - 14], M3 = o2[f4 - 13], x32 = IR(o2[f4 - 30], o2[f4 - 29]), S3 = TR(o2[f4 - 30], o2[f4 - 29]), E3 = o2[f4 - 32], B5 = o2[f4 - 31];
        o2[f4] = mR(p32, m4, y32, M3, x32, S3, E3, B5), o2[f4 + 1] = gR(p32, m4, y32, M3, x32, S3, E3, B5);
      }
    };
    Fr.prototype._update = function(e3, r2) {
      this._prepareBlock(e3, r2);
      var o2 = this.W, f4 = this.h[0], p32 = this.h[1], m4 = this.h[2], y32 = this.h[3], M3 = this.h[4], x32 = this.h[5], S3 = this.h[6], E3 = this.h[7], B5 = this.h[8], q2 = this.h[9], L32 = this.h[10], ge = this.h[11], _e = this.h[12], N3 = this.h[13], we = this.h[14], ye = this.h[15];
      bR(this.k.length === o2.length);
      for (var xe = 0;xe < o2.length; xe += 2) {
        var Re = we, Ee = ye, Ae = BR(B5, q2), P3 = qR(B5, q2), Se = _R(B5, q2, L32, ge, _e, N3), v3 = xR(B5, q2, L32, ge, _e, N3), i2 = this.k[xe], a3 = this.k[xe + 1], h5 = o2[xe], s2 = o2[xe + 1], u3 = yR(Re, Ee, Ae, P3, Se, v3, i2, a3, h5, s2), c = wR(Re, Ee, Ae, P3, Se, v3, i2, a3, h5, s2);
        Re = AR(f4, p32), Ee = RR(f4, p32), Ae = SR(f4, p32, m4, y32, M3, x32), P3 = ER(f4, p32, m4, y32, M3, x32);
        var b3 = Ul(Re, Ee, Ae, P3), l4 = zl(Re, Ee, Ae, P3);
        we = _e, ye = N3, _e = L32, N3 = ge, L32 = B5, ge = q2, B5 = Ul(S3, E3, u3, c), q2 = zl(E3, E3, u3, c), S3 = M3, E3 = x32, M3 = m4, x32 = y32, m4 = f4, y32 = p32, f4 = Ul(u3, c, b3, l4), p32 = zl(u3, c, b3, l4);
      }
      Ji(this.h, 0, f4, p32), Ji(this.h, 2, m4, y32), Ji(this.h, 4, M3, x32), Ji(this.h, 6, S3, E3), Ji(this.h, 8, B5, q2), Ji(this.h, 10, L32, ge), Ji(this.h, 12, _e, N3), Ji(this.h, 14, we, ye);
    };
    Fr.prototype._digest = function(e3) {
      return e3 === "hex" ? rr.toHex32(this.h, "big") : rr.split32(this.h, "big");
    };
    function _R(t2, e3, r2, o2, f4) {
      var p32 = t2 & r2 ^ ~t2 & f4;
      return p32 < 0 && (p32 += 4294967296), p32;
    }
    function xR(t2, e3, r2, o2, f4, p32) {
      var m4 = e3 & o2 ^ ~e3 & p32;
      return m4 < 0 && (m4 += 4294967296), m4;
    }
    function SR(t2, e3, r2, o2, f4) {
      var p32 = t2 & r2 ^ t2 & f4 ^ r2 & f4;
      return p32 < 0 && (p32 += 4294967296), p32;
    }
    function ER(t2, e3, r2, o2, f4, p32) {
      var m4 = e3 & o2 ^ e3 & p32 ^ o2 & p32;
      return m4 < 0 && (m4 += 4294967296), m4;
    }
    function AR(t2, e3) {
      var r2 = oi(t2, e3, 28), o2 = oi(e3, t2, 2), f4 = oi(e3, t2, 7), p32 = r2 ^ o2 ^ f4;
      return p32 < 0 && (p32 += 4294967296), p32;
    }
    function RR(t2, e3) {
      var r2 = si(t2, e3, 28), o2 = si(e3, t2, 2), f4 = si(e3, t2, 7), p32 = r2 ^ o2 ^ f4;
      return p32 < 0 && (p32 += 4294967296), p32;
    }
    function BR(t2, e3) {
      var r2 = oi(t2, e3, 14), o2 = oi(t2, e3, 18), f4 = oi(e3, t2, 9), p32 = r2 ^ o2 ^ f4;
      return p32 < 0 && (p32 += 4294967296), p32;
    }
    function qR(t2, e3) {
      var r2 = si(t2, e3, 14), o2 = si(t2, e3, 18), f4 = si(e3, t2, 9), p32 = r2 ^ o2 ^ f4;
      return p32 < 0 && (p32 += 4294967296), p32;
    }
    function IR(t2, e3) {
      var r2 = oi(t2, e3, 1), o2 = oi(t2, e3, 8), f4 = C22(t2, e3, 7), p32 = r2 ^ o2 ^ f4;
      return p32 < 0 && (p32 += 4294967296), p32;
    }
    function TR(t2, e3) {
      var r2 = si(t2, e3, 1), o2 = si(t2, e3, 8), f4 = O2(t2, e3, 7), p32 = r2 ^ o2 ^ f4;
      return p32 < 0 && (p32 += 4294967296), p32;
    }
    function kR(t2, e3) {
      var r2 = oi(t2, e3, 19), o2 = oi(e3, t2, 29), f4 = C22(t2, e3, 6), p32 = r2 ^ o2 ^ f4;
      return p32 < 0 && (p32 += 4294967296), p32;
    }
    function LR(t2, e3) {
      var r2 = si(t2, e3, 19), o2 = si(e3, t2, 29), f4 = O2(t2, e3, 6), p32 = r2 ^ o2 ^ f4;
      return p32 < 0 && (p32 += 4294967296), p32;
    }
  });
  W2 = T3((Lk, H22) => {
    var Wl = Cr(), z22 = Hl();
    function qi() {
      if (!(this instanceof qi))
        return new qi;
      z22.call(this), this.h = [3418070365, 3238371032, 1654270250, 914150663, 2438529370, 812702999, 355462360, 4144912697, 1731405415, 4290775857, 2394180231, 1750603025, 3675008525, 1694076839, 1203062813, 3204075428];
    }
    Wl.inherits(qi, z22);
    H22.exports = qi;
    qi.blockSize = 1024;
    qi.outSize = 384;
    qi.hmacStrength = 192;
    qi.padLength = 128;
    qi.prototype._digest = function(e3) {
      return e3 === "hex" ? Wl.toHex32(this.h.slice(0, 12), "big") : Wl.split32(this.h.slice(0, 12), "big");
    };
  });
  K2 = T3((Df) => {
    Df.sha1 = T22();
    Df.sha224 = P2();
    Df.sha256 = Ol();
    Df.sha384 = W2();
    Df.sha512 = Hl();
  });
  Y2 = T3((G22) => {
    var On = Cr(), NR = Tf(), Js = On.rotl32, j2 = On.sum32, Ua = On.sum32_3, Z22 = On.sum32_4, $22 = NR.BlockHash;
    function hi() {
      if (!(this instanceof hi))
        return new hi;
      $22.call(this), this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520], this.endian = "little";
    }
    On.inherits(hi, $22);
    G22.ripemd160 = hi;
    hi.blockSize = 512;
    hi.outSize = 160;
    hi.hmacStrength = 192;
    hi.padLength = 64;
    hi.prototype._update = function(e3, r2) {
      for (var o2 = this.h[0], f4 = this.h[1], p32 = this.h[2], m4 = this.h[3], y32 = this.h[4], M3 = o2, x32 = f4, S3 = p32, E3 = m4, B5 = y32, q2 = 0;q2 < 80; q2++) {
        var L32 = j2(Js(Z22(o2, V22(q2, f4, p32, m4), e3[CR[q2] + r2], DR(q2)), FR[q2]), y32);
        o2 = y32, y32 = m4, m4 = Js(p32, 10), p32 = f4, f4 = L32, L32 = j2(Js(Z22(M3, V22(79 - q2, x32, S3, E3), e3[OR[q2] + r2], PR(q2)), UR[q2]), B5), M3 = B5, B5 = E3, E3 = Js(S3, 10), S3 = x32, x32 = L32;
      }
      L32 = Ua(this.h[1], p32, E3), this.h[1] = Ua(this.h[2], m4, B5), this.h[2] = Ua(this.h[3], y32, M3), this.h[3] = Ua(this.h[4], o2, x32), this.h[4] = Ua(this.h[0], f4, S3), this.h[0] = L32;
    };
    hi.prototype._digest = function(e3) {
      return e3 === "hex" ? On.toHex32(this.h, "little") : On.split32(this.h, "little");
    };
    function V22(t2, e3, r2, o2) {
      return t2 <= 15 ? e3 ^ r2 ^ o2 : t2 <= 31 ? e3 & r2 | ~e3 & o2 : t2 <= 47 ? (e3 | ~r2) ^ o2 : t2 <= 63 ? e3 & o2 | r2 & ~o2 : e3 ^ (r2 | ~o2);
    }
    function DR(t2) {
      return t2 <= 15 ? 0 : t2 <= 31 ? 1518500249 : t2 <= 47 ? 1859775393 : t2 <= 63 ? 2400959708 : 2840853838;
    }
    function PR(t2) {
      return t2 <= 15 ? 1352829926 : t2 <= 31 ? 1548603684 : t2 <= 47 ? 1836072691 : t2 <= 63 ? 2053994217 : 0;
    }
    var CR = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13], OR = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11], FR = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6], UR = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
  });
  J2 = T3((Pk, X22) => {
    var zR = Cr(), HR = ar();
    function Pf(t2, e3, r2) {
      if (!(this instanceof Pf))
        return new Pf(t2, e3, r2);
      this.Hash = t2, this.blockSize = t2.blockSize / 8, this.outSize = t2.outSize / 8, this.inner = null, this.outer = null, this._init(zR.toArray(e3, r2));
    }
    X22.exports = Pf;
    Pf.prototype._init = function(e3) {
      e3.length > this.blockSize && (e3 = new this.Hash().update(e3).digest()), HR(e3.length <= this.blockSize);
      for (var r2 = e3.length;r2 < this.blockSize; r2++)
        e3.push(0);
      for (r2 = 0;r2 < e3.length; r2++)
        e3[r2] ^= 54;
      for (this.inner = new this.Hash().update(e3), r2 = 0;r2 < e3.length; r2++)
        e3[r2] ^= 106;
      this.outer = new this.Hash().update(e3);
    };
    Pf.prototype.update = function(e3, r2) {
      return this.inner.update(e3, r2), this;
    };
    Pf.prototype.digest = function(e3) {
      return this.outer.update(this.inner.digest()), this.outer.digest(e3);
    };
  });
  Qs = T3((Q22) => {
    var Kt = Q22;
    Kt.utils = Cr();
    Kt.common = Tf();
    Kt.sha = K2();
    Kt.ripemd = Y2();
    Kt.hmac = J2();
    Kt.sha1 = Kt.sha.sha1;
    Kt.sha256 = Kt.sha.sha256;
    Kt.sha224 = Kt.sha.sha224;
    Kt.sha384 = Kt.sha.sha384;
    Kt.sha512 = Kt.sha.sha512;
    Kt.ripemd160 = Kt.ripemd.ripemd160;
  });
  ty = T3((Ok, ey) => {
    ey.exports = { doubles: { step: 4, points: [["e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a", "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"], ["8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508", "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"], ["175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739", "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"], ["363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640", "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"], ["8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c", "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"], ["723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda", "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"], ["eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa", "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"], ["100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0", "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"], ["e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d", "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"], ["feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d", "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"], ["da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1", "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"], ["53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0", "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"], ["8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047", "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"], ["385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862", "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"], ["6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7", "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"], ["3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd", "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"], ["85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83", "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"], ["948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a", "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"], ["6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8", "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"], ["e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d", "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"], ["e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725", "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"], ["213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754", "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"], ["4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c", "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"], ["fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6", "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"], ["76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39", "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"], ["c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891", "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"], ["d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b", "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"], ["b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03", "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"], ["e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d", "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"], ["a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070", "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"], ["90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4", "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"], ["8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da", "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"], ["e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11", "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"], ["8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e", "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"], ["e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41", "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"], ["b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef", "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"], ["d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8", "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"], ["324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d", "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"], ["4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96", "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"], ["9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd", "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"], ["6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5", "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"], ["a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266", "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"], ["7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71", "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"], ["928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac", "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"], ["85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751", "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"], ["ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e", "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"], ["827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241", "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"], ["eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3", "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"], ["e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f", "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"], ["1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19", "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"], ["146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be", "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"], ["fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9", "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"], ["da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2", "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"], ["a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13", "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"], ["174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c", "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"], ["959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba", "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"], ["d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151", "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"], ["64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073", "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"], ["8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458", "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"], ["13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b", "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"], ["bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366", "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"], ["8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa", "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"], ["8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0", "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"], ["dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787", "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"], ["f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e", "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"]] }, naf: { wnd: 7, points: [["f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9", "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"], ["2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4", "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"], ["5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc", "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"], ["acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe", "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"], ["774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb", "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"], ["f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8", "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"], ["d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e", "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"], ["defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34", "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"], ["2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c", "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"], ["352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5", "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"], ["2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f", "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"], ["9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714", "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"], ["daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729", "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"], ["c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db", "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"], ["6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4", "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"], ["1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5", "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"], ["605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479", "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"], ["62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d", "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"], ["80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f", "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"], ["7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb", "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"], ["d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9", "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"], ["49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963", "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"], ["77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74", "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"], ["f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530", "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"], ["463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b", "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"], ["f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247", "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"], ["caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1", "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"], ["2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120", "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"], ["7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435", "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"], ["754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18", "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"], ["e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8", "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"], ["186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb", "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"], ["df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f", "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"], ["5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143", "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"], ["290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba", "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"], ["af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45", "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"], ["766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a", "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"], ["59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e", "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"], ["f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8", "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"], ["7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c", "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"], ["948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519", "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"], ["7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab", "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"], ["3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca", "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"], ["d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf", "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"], ["1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610", "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"], ["733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4", "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"], ["15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c", "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"], ["a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940", "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"], ["e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980", "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"], ["311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3", "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"], ["34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf", "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"], ["f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63", "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"], ["d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448", "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"], ["32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf", "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"], ["7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5", "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"], ["ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6", "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"], ["16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5", "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"], ["eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99", "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"], ["78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51", "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"], ["494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5", "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"], ["a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5", "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"], ["c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997", "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"], ["841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881", "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"], ["5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5", "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"], ["36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66", "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"], ["336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726", "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"], ["8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede", "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"], ["1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94", "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"], ["85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31", "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"], ["29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51", "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"], ["a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252", "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"], ["4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5", "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"], ["d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b", "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"], ["ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4", "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"], ["af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f", "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"], ["e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889", "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"], ["591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246", "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"], ["11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984", "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"], ["3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a", "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"], ["cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030", "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"], ["c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197", "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"], ["c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593", "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"], ["a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef", "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"], ["347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38", "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"], ["da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a", "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"], ["c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111", "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"], ["4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502", "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"], ["3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea", "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"], ["cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26", "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"], ["b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986", "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"], ["d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e", "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"], ["48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4", "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"], ["dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda", "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"], ["6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859", "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"], ["e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f", "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"], ["eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c", "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"], ["13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942", "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"], ["ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a", "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"], ["b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80", "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"], ["ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d", "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"], ["8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1", "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"], ["52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63", "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"], ["e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352", "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"], ["7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193", "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"], ["5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00", "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"], ["32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58", "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"], ["e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7", "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"], ["8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8", "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"], ["4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e", "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"], ["3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d", "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"], ["674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b", "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"], ["d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f", "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"], ["30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6", "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"], ["be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297", "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"], ["93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a", "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"], ["b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c", "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"], ["d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52", "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"], ["d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb", "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"], ["463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065", "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"], ["7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917", "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"], ["74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9", "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"], ["30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3", "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"], ["9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57", "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"], ["176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66", "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"], ["75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8", "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"], ["809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721", "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"], ["1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180", "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"]] } };
  });
  e02 = T3((ny) => {
    var jl = ny, Qi = Qs(), Kl = Dl(), WR = or(), ry = WR.assert;
    function iy(t2) {
      t2.type === "short" ? this.curve = new Kl.short(t2) : t2.type === "edwards" ? this.curve = new Kl.edwards(t2) : this.curve = new Kl.mont(t2), this.g = this.curve.g, this.n = this.curve.n, this.hash = t2.hash, ry(this.g.validate(), "Invalid curve"), ry(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
    }
    jl.PresetCurve = iy;
    function en(t2, e3) {
      Object.defineProperty(jl, t2, { configurable: true, enumerable: true, get: function() {
        var r2 = new iy(e3);
        return Object.defineProperty(jl, t2, { configurable: true, enumerable: true, value: r2 }), r2;
      } });
    }
    en("p192", { type: "short", prime: "p192", p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff", a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc", b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1", n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831", hash: Qi.sha256, gRed: false, g: ["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012", "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"] });
    en("p224", { type: "short", prime: "p224", p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001", a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe", b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4", n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d", hash: Qi.sha256, gRed: false, g: ["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21", "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"] });
    en("p256", { type: "short", prime: null, p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff", a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc", b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b", n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551", hash: Qi.sha256, gRed: false, g: ["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296", "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"] });
    en("p384", { type: "short", prime: null, p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff", a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc", b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef", n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973", hash: Qi.sha384, gRed: false, g: ["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7", "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"] });
    en("p521", { type: "short", prime: null, p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff", a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc", b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00", n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409", hash: Qi.sha512, gRed: false, g: ["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66", "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"] });
    en("curve25519", { type: "mont", prime: "p25519", p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed", a: "76d06", b: "1", n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed", hash: Qi.sha256, gRed: false, g: ["9"] });
    en("ed25519", { type: "edwards", prime: "p25519", p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed", a: "-1", c: "1", d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3", n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed", hash: Qi.sha256, gRed: false, g: ["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a", "6666666666666666666666666666666666666666666666666666666666666658"] });
    var Zl;
    try {
      Zl = ty();
    } catch {
      Zl = undefined;
    }
    en("secp256k1", { type: "short", prime: "k256", p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f", a: "0", b: "7", n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141", h: "1", hash: Qi.sha256, beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee", lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72", basis: [{ a: "3086d221a7d46bcde86c90e49284eb15", b: "-e4437ed6010e88286f547fa90abfe4c3" }, { a: "114ca50f7a8e2f3f657c1108d9d44cfd8", b: "3086d221a7d46bcde86c90e49284eb15" }], gRed: false, g: ["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8", Zl] });
  });
  oy = T3((Uk, ay) => {
    var KR = Qs(), Fn = Ll(), fy = ar();
    function tn(t2) {
      if (!(this instanceof tn))
        return new tn(t2);
      this.hash = t2.hash, this.predResist = !!t2.predResist, this.outLen = this.hash.outSize, this.minEntropy = t2.minEntropy || this.hash.hmacStrength, this._reseed = null, this.reseedInterval = null, this.K = null, this.V = null;
      var e3 = Fn.toArray(t2.entropy, t2.entropyEnc || "hex"), r2 = Fn.toArray(t2.nonce, t2.nonceEnc || "hex"), o2 = Fn.toArray(t2.pers, t2.persEnc || "hex");
      fy(e3.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._init(e3, r2, o2);
    }
    ay.exports = tn;
    tn.prototype._init = function(e3, r2, o2) {
      var f4 = e3.concat(r2).concat(o2);
      this.K = new Array(this.outLen / 8), this.V = new Array(this.outLen / 8);
      for (var p32 = 0;p32 < this.V.length; p32++)
        this.K[p32] = 0, this.V[p32] = 1;
      this._update(f4), this._reseed = 1, this.reseedInterval = 281474976710656;
    };
    tn.prototype._hmac = function() {
      return new KR.hmac(this.hash, this.K);
    };
    tn.prototype._update = function(e3) {
      var r2 = this._hmac().update(this.V).update([0]);
      e3 && (r2 = r2.update(e3)), this.K = r2.digest(), this.V = this._hmac().update(this.V).digest(), e3 && (this.K = this._hmac().update(this.V).update([1]).update(e3).digest(), this.V = this._hmac().update(this.V).digest());
    };
    tn.prototype.reseed = function(e3, r2, o2, f4) {
      typeof r2 != "string" && (f4 = o2, o2 = r2, r2 = null), e3 = Fn.toArray(e3, r2), o2 = Fn.toArray(o2, f4), fy(e3.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._update(e3.concat(o2 || [])), this._reseed = 1;
    };
    tn.prototype.generate = function(e3, r2, o2, f4) {
      if (this._reseed > this.reseedInterval)
        throw new Error("Reseed is required");
      typeof r2 != "string" && (f4 = o2, o2 = r2, r2 = null), o2 && (o2 = Fn.toArray(o2, f4 || "hex"), this._update(o2));
      for (var p32 = [];p32.length < e3; )
        this.V = this._hmac().update(this.V).digest(), p32 = p32.concat(this.V);
      var m4 = p32.slice(0, e3);
      return this._update(o2), this._reseed++, Fn.encode(m4, r2);
    };
  });
  hy = T3((zk, sy) => {
    var jR = ri(), ZR = or(), Vl = ZR.assert;
    function Gt(t2, e3) {
      this.ec = t2, this.priv = null, this.pub = null, e3.priv && this._importPrivate(e3.priv, e3.privEnc), e3.pub && this._importPublic(e3.pub, e3.pubEnc);
    }
    sy.exports = Gt;
    Gt.fromPublic = function(e3, r2, o2) {
      return r2 instanceof Gt ? r2 : new Gt(e3, { pub: r2, pubEnc: o2 });
    };
    Gt.fromPrivate = function(e3, r2, o2) {
      return r2 instanceof Gt ? r2 : new Gt(e3, { priv: r2, privEnc: o2 });
    };
    Gt.prototype.validate = function() {
      var e3 = this.getPublic();
      return e3.isInfinity() ? { result: false, reason: "Invalid public key" } : e3.validate() ? e3.mul(this.ec.curve.n).isInfinity() ? { result: true, reason: null } : { result: false, reason: "Public key * N != O" } : { result: false, reason: "Public key is not a point" };
    };
    Gt.prototype.getPublic = function(e3, r2) {
      return typeof e3 == "string" && (r2 = e3, e3 = null), this.pub || (this.pub = this.ec.g.mul(this.priv)), r2 ? this.pub.encode(r2, e3) : this.pub;
    };
    Gt.prototype.getPrivate = function(e3) {
      return e3 === "hex" ? this.priv.toString(16, 2) : this.priv;
    };
    Gt.prototype._importPrivate = function(e3, r2) {
      this.priv = new jR(e3, r2 || 16), this.priv = this.priv.umod(this.ec.curve.n);
    };
    Gt.prototype._importPublic = function(e3, r2) {
      if (e3.x || e3.y) {
        this.ec.curve.type === "mont" ? Vl(e3.x, "Need x coordinate") : (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") && Vl(e3.x && e3.y, "Need both x and y coordinate"), this.pub = this.ec.curve.point(e3.x, e3.y);
        return;
      }
      this.pub = this.ec.curve.decodePoint(e3, r2);
    };
    Gt.prototype.derive = function(e3) {
      return e3.validate() || Vl(e3.validate(), "public point not validated"), e3.mul(this.priv).getX();
    };
    Gt.prototype.sign = function(e3, r2, o2) {
      return this.ec.sign(e3, this, r2, o2);
    };
    Gt.prototype.verify = function(e3, r2) {
      return this.ec.verify(e3, r2, this);
    };
    Gt.prototype.inspect = function() {
      return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
    };
  });
  dy = T3((Hk, ly) => {
    var t02 = ri(), Yl = or(), VR = Yl.assert;
    function r02(t2, e3) {
      if (t2 instanceof r02)
        return t2;
      this._importDER(t2, e3) || (VR(t2.r && t2.s, "Signature without r or s"), this.r = new t02(t2.r, 16), this.s = new t02(t2.s, 16), t2.recoveryParam === undefined ? this.recoveryParam = null : this.recoveryParam = t2.recoveryParam);
    }
    ly.exports = r02;
    function $R() {
      this.place = 0;
    }
    function $l(t2, e3) {
      var r2 = t2[e3.place++];
      if (!(r2 & 128))
        return r2;
      var o2 = r2 & 15;
      if (o2 === 0 || o2 > 4)
        return false;
      for (var f4 = 0, p32 = 0, m4 = e3.place;p32 < o2; p32++, m4++)
        f4 <<= 8, f4 |= t2[m4], f4 >>>= 0;
      return f4 <= 127 ? false : (e3.place = m4, f4);
    }
    function uy(t2) {
      for (var e3 = 0, r2 = t2.length - 1;!t2[e3] && !(t2[e3 + 1] & 128) && e3 < r2; )
        e3++;
      return e3 === 0 ? t2 : t2.slice(e3);
    }
    r02.prototype._importDER = function(e3, r2) {
      e3 = Yl.toArray(e3, r2);
      var o2 = new $R;
      if (e3[o2.place++] !== 48)
        return false;
      var f4 = $l(e3, o2);
      if (f4 === false || f4 + o2.place !== e3.length || e3[o2.place++] !== 2)
        return false;
      var p32 = $l(e3, o2);
      if (p32 === false)
        return false;
      var m4 = e3.slice(o2.place, p32 + o2.place);
      if (o2.place += p32, e3[o2.place++] !== 2)
        return false;
      var y32 = $l(e3, o2);
      if (y32 === false || e3.length !== y32 + o2.place)
        return false;
      var M3 = e3.slice(o2.place, y32 + o2.place);
      if (m4[0] === 0)
        if (m4[1] & 128)
          m4 = m4.slice(1);
        else
          return false;
      if (M3[0] === 0)
        if (M3[1] & 128)
          M3 = M3.slice(1);
        else
          return false;
      return this.r = new t02(m4), this.s = new t02(M3), this.recoveryParam = null, true;
    };
    function Gl(t2, e3) {
      if (e3 < 128) {
        t2.push(e3);
        return;
      }
      var r2 = 1 + (Math.log(e3) / Math.LN2 >>> 3);
      for (t2.push(r2 | 128);--r2; )
        t2.push(e3 >>> (r2 << 3) & 255);
      t2.push(e3);
    }
    r02.prototype.toDER = function(e3) {
      var r2 = this.r.toArray(), o2 = this.s.toArray();
      for (r2[0] & 128 && (r2 = [0].concat(r2)), o2[0] & 128 && (o2 = [0].concat(o2)), r2 = uy(r2), o2 = uy(o2);!o2[0] && !(o2[1] & 128); )
        o2 = o2.slice(1);
      var f4 = [2];
      Gl(f4, r2.length), f4 = f4.concat(r2), f4.push(2), Gl(f4, o2.length);
      var p32 = f4.concat(o2), m4 = [48];
      return Gl(m4, p32.length), m4 = m4.concat(p32), Yl.encode(m4, e3);
    };
  });
  by = T3((Wk, vy) => {
    var Un = ri(), cy = oy(), GR = or(), Xl = e02(), YR = Es(), py = GR.assert, Jl = hy(), i02 = dy();
    function Sr(t2) {
      if (!(this instanceof Sr))
        return new Sr(t2);
      typeof t2 == "string" && (py(Object.prototype.hasOwnProperty.call(Xl, t2), "Unknown curve " + t2), t2 = Xl[t2]), t2 instanceof Xl.PresetCurve && (t2 = { curve: t2 }), this.curve = t2.curve.curve, this.n = this.curve.n, this.nh = this.n.ushrn(1), this.g = this.curve.g, this.g = t2.curve.g, this.g.precompute(t2.curve.n.bitLength() + 1), this.hash = t2.hash || t2.curve.hash;
    }
    vy.exports = Sr;
    Sr.prototype.keyPair = function(e3) {
      return new Jl(this, e3);
    };
    Sr.prototype.keyFromPrivate = function(e3, r2) {
      return Jl.fromPrivate(this, e3, r2);
    };
    Sr.prototype.keyFromPublic = function(e3, r2) {
      return Jl.fromPublic(this, e3, r2);
    };
    Sr.prototype.genKeyPair = function(e3) {
      e3 || (e3 = {});
      for (var r2 = new cy({ hash: this.hash, pers: e3.pers, persEnc: e3.persEnc || "utf8", entropy: e3.entropy || YR(this.hash.hmacStrength), entropyEnc: e3.entropy && e3.entropyEnc || "utf8", nonce: this.n.toArray() }), o2 = this.n.byteLength(), f4 = this.n.sub(new Un(2));; ) {
        var p32 = new Un(r2.generate(o2));
        if (!(p32.cmp(f4) > 0))
          return p32.iaddn(1), this.keyFromPrivate(p32);
      }
    };
    Sr.prototype._truncateToN = function(e3, r2) {
      var o2 = e3.byteLength() * 8 - this.n.bitLength();
      return o2 > 0 && (e3 = e3.ushrn(o2)), !r2 && e3.cmp(this.n) >= 0 ? e3.sub(this.n) : e3;
    };
    Sr.prototype.sign = function(e3, r2, o2, f4) {
      typeof o2 == "object" && (f4 = o2, o2 = null), f4 || (f4 = {}), r2 = this.keyFromPrivate(r2, o2), e3 = this._truncateToN(new Un(e3, 16));
      for (var p32 = this.n.byteLength(), m4 = r2.getPrivate().toArray("be", p32), y32 = e3.toArray("be", p32), M3 = new cy({ hash: this.hash, entropy: m4, nonce: y32, pers: f4.pers, persEnc: f4.persEnc || "utf8" }), x32 = this.n.sub(new Un(1)), S3 = 0;; S3++) {
        var E3 = f4.k ? f4.k(S3) : new Un(M3.generate(this.n.byteLength()));
        if (E3 = this._truncateToN(E3, true), !(E3.cmpn(1) <= 0 || E3.cmp(x32) >= 0)) {
          var B5 = this.g.mul(E3);
          if (!B5.isInfinity()) {
            var q2 = B5.getX(), L32 = q2.umod(this.n);
            if (L32.cmpn(0) !== 0) {
              var ge = E3.invm(this.n).mul(L32.mul(r2.getPrivate()).iadd(e3));
              if (ge = ge.umod(this.n), ge.cmpn(0) !== 0) {
                var _e = (B5.getY().isOdd() ? 1 : 0) | (q2.cmp(L32) !== 0 ? 2 : 0);
                return f4.canonical && ge.cmp(this.nh) > 0 && (ge = this.n.sub(ge), _e ^= 1), new i02({ r: L32, s: ge, recoveryParam: _e });
              }
            }
          }
        }
      }
    };
    Sr.prototype.verify = function(e3, r2, o2, f4) {
      e3 = this._truncateToN(new Un(e3, 16)), o2 = this.keyFromPublic(o2, f4), r2 = new i02(r2, "hex");
      var { r: p32, s: m4 } = r2;
      if (p32.cmpn(1) < 0 || p32.cmp(this.n) >= 0 || m4.cmpn(1) < 0 || m4.cmp(this.n) >= 0)
        return false;
      var y32 = m4.invm(this.n), M3 = y32.mul(e3).umod(this.n), x32 = y32.mul(p32).umod(this.n), S3;
      return this.curve._maxwellTrick ? (S3 = this.g.jmulAdd(M3, o2.getPublic(), x32), S3.isInfinity() ? false : S3.eqXToP(p32)) : (S3 = this.g.mulAdd(M3, o2.getPublic(), x32), S3.isInfinity() ? false : S3.getX().umod(this.n).cmp(p32) === 0);
    };
    Sr.prototype.recoverPubKey = function(t2, e3, r2, o2) {
      py((3 & r2) === r2, "The recovery param is more than two bits"), e3 = new i02(e3, o2);
      var f4 = this.n, p32 = new Un(t2), m4 = e3.r, y32 = e3.s, M3 = r2 & 1, x32 = r2 >> 1;
      if (m4.cmp(this.curve.p.umod(this.curve.n)) >= 0 && x32)
        throw new Error("Unable to find sencond key candinate");
      x32 ? m4 = this.curve.pointFromX(m4.add(this.curve.n), M3) : m4 = this.curve.pointFromX(m4, M3);
      var S3 = e3.r.invm(f4), E3 = f4.sub(p32).mul(S3).umod(f4), B5 = y32.mul(S3).umod(f4);
      return this.g.mulAdd(E3, m4, B5);
    };
    Sr.prototype.getKeyRecoveryParam = function(t2, e3, r2, o2) {
      if (e3 = new i02(e3, o2), e3.recoveryParam !== null)
        return e3.recoveryParam;
      for (var f4 = 0;f4 < 4; f4++) {
        var p32;
        try {
          p32 = this.recoverPubKey(t2, e3, f4);
        } catch {
          continue;
        }
        if (p32.eq(r2))
          return f4;
      }
      throw new Error("Unable to find valid recovery factor");
    };
  });
  wy = T3((Kk, yy) => {
    var za = or(), gy = za.assert, my = za.parseBytes, Cf = za.cachedProperty;
    function Ft(t2, e3) {
      this.eddsa = t2, this._secret = my(e3.secret), t2.isPoint(e3.pub) ? this._pub = e3.pub : this._pubBytes = my(e3.pub);
    }
    Ft.fromPublic = function(e3, r2) {
      return r2 instanceof Ft ? r2 : new Ft(e3, { pub: r2 });
    };
    Ft.fromSecret = function(e3, r2) {
      return r2 instanceof Ft ? r2 : new Ft(e3, { secret: r2 });
    };
    Ft.prototype.secret = function() {
      return this._secret;
    };
    Cf(Ft, "pubBytes", function() {
      return this.eddsa.encodePoint(this.pub());
    });
    Cf(Ft, "pub", function() {
      return this._pubBytes ? this.eddsa.decodePoint(this._pubBytes) : this.eddsa.g.mul(this.priv());
    });
    Cf(Ft, "privBytes", function() {
      var e3 = this.eddsa, r2 = this.hash(), o2 = e3.encodingLength - 1, f4 = r2.slice(0, e3.encodingLength);
      return f4[0] &= 248, f4[o2] &= 127, f4[o2] |= 64, f4;
    });
    Cf(Ft, "priv", function() {
      return this.eddsa.decodeInt(this.privBytes());
    });
    Cf(Ft, "hash", function() {
      return this.eddsa.hash().update(this.secret()).digest();
    });
    Cf(Ft, "messagePrefix", function() {
      return this.hash().slice(this.eddsa.encodingLength);
    });
    Ft.prototype.sign = function(e3) {
      return gy(this._secret, "KeyPair can only verify"), this.eddsa.sign(e3, this);
    };
    Ft.prototype.verify = function(e3, r2) {
      return this.eddsa.verify(e3, r2, this);
    };
    Ft.prototype.getSecret = function(e3) {
      return gy(this._secret, "KeyPair is public only"), za.encode(this.secret(), e3);
    };
    Ft.prototype.getPublic = function(e3) {
      return za.encode(this.pubBytes(), e3);
    };
    yy.exports = Ft;
  });
  _y = T3((jk, My) => {
    var XR = ri(), n02 = or(), JR = n02.assert, f02 = n02.cachedProperty, QR = n02.parseBytes;
    function zn(t2, e3) {
      this.eddsa = t2, typeof e3 != "object" && (e3 = QR(e3)), Array.isArray(e3) && (e3 = { R: e3.slice(0, t2.encodingLength), S: e3.slice(t2.encodingLength) }), JR(e3.R && e3.S, "Signature without R or S"), t2.isPoint(e3.R) && (this._R = e3.R), e3.S instanceof XR && (this._S = e3.S), this._Rencoded = Array.isArray(e3.R) ? e3.R : e3.Rencoded, this._Sencoded = Array.isArray(e3.S) ? e3.S : e3.Sencoded;
    }
    f02(zn, "S", function() {
      return this.eddsa.decodeInt(this.Sencoded());
    });
    f02(zn, "R", function() {
      return this.eddsa.decodePoint(this.Rencoded());
    });
    f02(zn, "Rencoded", function() {
      return this.eddsa.encodePoint(this.R());
    });
    f02(zn, "Sencoded", function() {
      return this.eddsa.encodeInt(this.S());
    });
    zn.prototype.toBytes = function() {
      return this.Rencoded().concat(this.Sencoded());
    };
    zn.prototype.toHex = function() {
      return n02.encode(this.toBytes(), "hex").toUpperCase();
    };
    My.exports = zn;
  });
  Ry = T3((Zk, Ay) => {
    var eB = Qs(), tB = e02(), Of = or(), rB = Of.assert, Sy = Of.parseBytes, Ey = wy(), xy = _y();
    function ir(t2) {
      if (rB(t2 === "ed25519", "only tested with ed25519 so far"), !(this instanceof ir))
        return new ir(t2);
      t2 = tB[t2].curve, this.curve = t2, this.g = t2.g, this.g.precompute(t2.n.bitLength() + 1), this.pointClass = t2.point().constructor, this.encodingLength = Math.ceil(t2.n.bitLength() / 8), this.hash = eB.sha512;
    }
    Ay.exports = ir;
    ir.prototype.sign = function(e3, r2) {
      e3 = Sy(e3);
      var o2 = this.keyFromSecret(r2), f4 = this.hashInt(o2.messagePrefix(), e3), p32 = this.g.mul(f4), m4 = this.encodePoint(p32), y32 = this.hashInt(m4, o2.pubBytes(), e3).mul(o2.priv()), M3 = f4.add(y32).umod(this.curve.n);
      return this.makeSignature({ R: p32, S: M3, Rencoded: m4 });
    };
    ir.prototype.verify = function(e3, r2, o2) {
      e3 = Sy(e3), r2 = this.makeSignature(r2);
      var f4 = this.keyFromPublic(o2), p32 = this.hashInt(r2.Rencoded(), f4.pubBytes(), e3), m4 = this.g.mul(r2.S()), y32 = r2.R().add(f4.pub().mul(p32));
      return y32.eq(m4);
    };
    ir.prototype.hashInt = function() {
      for (var e3 = this.hash(), r2 = 0;r2 < arguments.length; r2++)
        e3.update(arguments[r2]);
      return Of.intFromLE(e3.digest()).umod(this.curve.n);
    };
    ir.prototype.keyFromPublic = function(e3) {
      return Ey.fromPublic(this, e3);
    };
    ir.prototype.keyFromSecret = function(e3) {
      return Ey.fromSecret(this, e3);
    };
    ir.prototype.makeSignature = function(e3) {
      return e3 instanceof xy ? e3 : new xy(this, e3);
    };
    ir.prototype.encodePoint = function(e3) {
      var r2 = e3.getY().toArray("le", this.encodingLength);
      return r2[this.encodingLength - 1] |= e3.getX().isOdd() ? 128 : 0, r2;
    };
    ir.prototype.decodePoint = function(e3) {
      e3 = Of.parseBytes(e3);
      var r2 = e3.length - 1, o2 = e3.slice(0, r2).concat(e3[r2] & -129), f4 = (e3[r2] & 128) !== 0, p32 = Of.intFromLE(o2);
      return this.curve.pointFromY(p32, f4);
    };
    ir.prototype.encodeInt = function(e3) {
      return e3.toArray("le", this.encodingLength);
    };
    ir.prototype.decodeInt = function(e3) {
      return Of.intFromLE(e3);
    };
    ir.prototype.isPoint = function(e3) {
      return e3 instanceof this.pointClass;
    };
  });
  a02 = T3((By) => {
    var Hn = By;
    Hn.version = f22().version;
    Hn.utils = or();
    Hn.rand = Es();
    Hn.curve = Dl();
    Hn.curves = e02();
    Hn.ec = by();
    Hn.eddsa = Ry();
  });
  ed = T3((qy, Ql) => {
    (function(t2, e3) {
      function r2(v3, i2) {
        if (!v3)
          throw new Error(i2 || "Assertion failed");
      }
      function o2(v3, i2) {
        v3.super_ = i2;
        var a3 = function() {};
        a3.prototype = i2.prototype, v3.prototype = new a3, v3.prototype.constructor = v3;
      }
      function f4(v3, i2, a3) {
        if (f4.isBN(v3))
          return v3;
        this.negative = 0, this.words = null, this.length = 0, this.red = null, v3 !== null && ((i2 === "le" || i2 === "be") && (a3 = i2, i2 = 10), this._init(v3 || 0, i2 || 10, a3 || "be"));
      }
      typeof t2 == "object" ? t2.exports = f4 : e3.BN = f4, f4.BN = f4, f4.wordSize = 26;
      var p32;
      try {
        typeof window < "u" && typeof window.Buffer < "u" ? p32 = window.Buffer : p32 = ji().Buffer;
      } catch {}
      f4.isBN = function(i2) {
        return i2 instanceof f4 ? true : i2 !== null && typeof i2 == "object" && i2.constructor.wordSize === f4.wordSize && Array.isArray(i2.words);
      }, f4.max = function(i2, a3) {
        return i2.cmp(a3) > 0 ? i2 : a3;
      }, f4.min = function(i2, a3) {
        return i2.cmp(a3) < 0 ? i2 : a3;
      }, f4.prototype._init = function(i2, a3, h5) {
        if (typeof i2 == "number")
          return this._initNumber(i2, a3, h5);
        if (typeof i2 == "object")
          return this._initArray(i2, a3, h5);
        a3 === "hex" && (a3 = 16), r2(a3 === (a3 | 0) && a3 >= 2 && a3 <= 36), i2 = i2.toString().replace(/\s+/g, "");
        var s2 = 0;
        i2[0] === "-" && (s2++, this.negative = 1), s2 < i2.length && (a3 === 16 ? this._parseHex(i2, s2, h5) : (this._parseBase(i2, a3, s2), h5 === "le" && this._initArray(this.toArray(), a3, h5)));
      }, f4.prototype._initNumber = function(i2, a3, h5) {
        i2 < 0 && (this.negative = 1, i2 = -i2), i2 < 67108864 ? (this.words = [i2 & 67108863], this.length = 1) : i2 < 4503599627370496 ? (this.words = [i2 & 67108863, i2 / 67108864 & 67108863], this.length = 2) : (r2(i2 < 9007199254740992), this.words = [i2 & 67108863, i2 / 67108864 & 67108863, 1], this.length = 3), h5 === "le" && this._initArray(this.toArray(), a3, h5);
      }, f4.prototype._initArray = function(i2, a3, h5) {
        if (r2(typeof i2.length == "number"), i2.length <= 0)
          return this.words = [0], this.length = 1, this;
        this.length = Math.ceil(i2.length / 3), this.words = new Array(this.length);
        for (var s2 = 0;s2 < this.length; s2++)
          this.words[s2] = 0;
        var u3, c, b3 = 0;
        if (h5 === "be")
          for (s2 = i2.length - 1, u3 = 0;s2 >= 0; s2 -= 3)
            c = i2[s2] | i2[s2 - 1] << 8 | i2[s2 - 2] << 16, this.words[u3] |= c << b3 & 67108863, this.words[u3 + 1] = c >>> 26 - b3 & 67108863, b3 += 24, b3 >= 26 && (b3 -= 26, u3++);
        else if (h5 === "le")
          for (s2 = 0, u3 = 0;s2 < i2.length; s2 += 3)
            c = i2[s2] | i2[s2 + 1] << 8 | i2[s2 + 2] << 16, this.words[u3] |= c << b3 & 67108863, this.words[u3 + 1] = c >>> 26 - b3 & 67108863, b3 += 24, b3 >= 26 && (b3 -= 26, u3++);
        return this.strip();
      };
      function m4(v3, i2) {
        var a3 = v3.charCodeAt(i2);
        return a3 >= 65 && a3 <= 70 ? a3 - 55 : a3 >= 97 && a3 <= 102 ? a3 - 87 : a3 - 48 & 15;
      }
      function y32(v3, i2, a3) {
        var h5 = m4(v3, a3);
        return a3 - 1 >= i2 && (h5 |= m4(v3, a3 - 1) << 4), h5;
      }
      f4.prototype._parseHex = function(i2, a3, h5) {
        this.length = Math.ceil((i2.length - a3) / 6), this.words = new Array(this.length);
        for (var s2 = 0;s2 < this.length; s2++)
          this.words[s2] = 0;
        var u3 = 0, c = 0, b3;
        if (h5 === "be")
          for (s2 = i2.length - 1;s2 >= a3; s2 -= 2)
            b3 = y32(i2, a3, s2) << u3, this.words[c] |= b3 & 67108863, u3 >= 18 ? (u3 -= 18, c += 1, this.words[c] |= b3 >>> 26) : u3 += 8;
        else {
          var l4 = i2.length - a3;
          for (s2 = l4 % 2 === 0 ? a3 + 1 : a3;s2 < i2.length; s2 += 2)
            b3 = y32(i2, a3, s2) << u3, this.words[c] |= b3 & 67108863, u3 >= 18 ? (u3 -= 18, c += 1, this.words[c] |= b3 >>> 26) : u3 += 8;
        }
        this.strip();
      };
      function M3(v3, i2, a3, h5) {
        for (var s2 = 0, u3 = Math.min(v3.length, a3), c = i2;c < u3; c++) {
          var b3 = v3.charCodeAt(c) - 48;
          s2 *= h5, b3 >= 49 ? s2 += b3 - 49 + 10 : b3 >= 17 ? s2 += b3 - 17 + 10 : s2 += b3;
        }
        return s2;
      }
      f4.prototype._parseBase = function(i2, a3, h5) {
        this.words = [0], this.length = 1;
        for (var s2 = 0, u3 = 1;u3 <= 67108863; u3 *= a3)
          s2++;
        s2--, u3 = u3 / a3 | 0;
        for (var c = i2.length - h5, b3 = c % s2, l4 = Math.min(c, c - b3) + h5, n4 = 0, d2 = h5;d2 < l4; d2 += s2)
          n4 = M3(i2, d2, d2 + s2, a3), this.imuln(u3), this.words[0] + n4 < 67108864 ? this.words[0] += n4 : this._iaddn(n4);
        if (b3 !== 0) {
          var w2 = 1;
          for (n4 = M3(i2, d2, i2.length, a3), d2 = 0;d2 < b3; d2++)
            w2 *= a3;
          this.imuln(w2), this.words[0] + n4 < 67108864 ? this.words[0] += n4 : this._iaddn(n4);
        }
        this.strip();
      }, f4.prototype.copy = function(i2) {
        i2.words = new Array(this.length);
        for (var a3 = 0;a3 < this.length; a3++)
          i2.words[a3] = this.words[a3];
        i2.length = this.length, i2.negative = this.negative, i2.red = this.red;
      }, f4.prototype.clone = function() {
        var i2 = new f4(null);
        return this.copy(i2), i2;
      }, f4.prototype._expand = function(i2) {
        for (;this.length < i2; )
          this.words[this.length++] = 0;
        return this;
      }, f4.prototype.strip = function() {
        for (;this.length > 1 && this.words[this.length - 1] === 0; )
          this.length--;
        return this._normSign();
      }, f4.prototype._normSign = function() {
        return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
      }, f4.prototype.inspect = function() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var x32 = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"], S3 = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], E3 = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
      f4.prototype.toString = function(i2, a3) {
        i2 = i2 || 10, a3 = a3 | 0 || 1;
        var h5;
        if (i2 === 16 || i2 === "hex") {
          h5 = "";
          for (var s2 = 0, u3 = 0, c = 0;c < this.length; c++) {
            var b3 = this.words[c], l4 = ((b3 << s2 | u3) & 16777215).toString(16);
            u3 = b3 >>> 24 - s2 & 16777215, u3 !== 0 || c !== this.length - 1 ? h5 = x32[6 - l4.length] + l4 + h5 : h5 = l4 + h5, s2 += 2, s2 >= 26 && (s2 -= 26, c--);
          }
          for (u3 !== 0 && (h5 = u3.toString(16) + h5);h5.length % a3 !== 0; )
            h5 = "0" + h5;
          return this.negative !== 0 && (h5 = "-" + h5), h5;
        }
        if (i2 === (i2 | 0) && i2 >= 2 && i2 <= 36) {
          var n4 = S3[i2], d2 = E3[i2];
          h5 = "";
          var w2 = this.clone();
          for (w2.negative = 0;!w2.isZero(); ) {
            var g2 = w2.modn(d2).toString(i2);
            w2 = w2.idivn(d2), w2.isZero() ? h5 = g2 + h5 : h5 = x32[n4 - g2.length] + g2 + h5;
          }
          for (this.isZero() && (h5 = "0" + h5);h5.length % a3 !== 0; )
            h5 = "0" + h5;
          return this.negative !== 0 && (h5 = "-" + h5), h5;
        }
        r2(false, "Base should be between 2 and 36");
      }, f4.prototype.toNumber = function() {
        var i2 = this.words[0];
        return this.length === 2 ? i2 += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? i2 += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && r2(false, "Number can only safely store up to 53 bits"), this.negative !== 0 ? -i2 : i2;
      }, f4.prototype.toJSON = function() {
        return this.toString(16);
      }, f4.prototype.toBuffer = function(i2, a3) {
        return r2(typeof p32 < "u"), this.toArrayLike(p32, i2, a3);
      }, f4.prototype.toArray = function(i2, a3) {
        return this.toArrayLike(Array, i2, a3);
      }, f4.prototype.toArrayLike = function(i2, a3, h5) {
        var s2 = this.byteLength(), u3 = h5 || Math.max(1, s2);
        r2(s2 <= u3, "byte array longer than desired length"), r2(u3 > 0, "Requested array length <= 0"), this.strip();
        var c = a3 === "le", b3 = new i2(u3), l4, n4, d2 = this.clone();
        if (c) {
          for (n4 = 0;!d2.isZero(); n4++)
            l4 = d2.andln(255), d2.iushrn(8), b3[n4] = l4;
          for (;n4 < u3; n4++)
            b3[n4] = 0;
        } else {
          for (n4 = 0;n4 < u3 - s2; n4++)
            b3[n4] = 0;
          for (n4 = 0;!d2.isZero(); n4++)
            l4 = d2.andln(255), d2.iushrn(8), b3[u3 - n4 - 1] = l4;
        }
        return b3;
      }, Math.clz32 ? f4.prototype._countBits = function(i2) {
        return 32 - Math.clz32(i2);
      } : f4.prototype._countBits = function(i2) {
        var a3 = i2, h5 = 0;
        return a3 >= 4096 && (h5 += 13, a3 >>>= 13), a3 >= 64 && (h5 += 7, a3 >>>= 7), a3 >= 8 && (h5 += 4, a3 >>>= 4), a3 >= 2 && (h5 += 2, a3 >>>= 2), h5 + a3;
      }, f4.prototype._zeroBits = function(i2) {
        if (i2 === 0)
          return 26;
        var a3 = i2, h5 = 0;
        return (a3 & 8191) === 0 && (h5 += 13, a3 >>>= 13), (a3 & 127) === 0 && (h5 += 7, a3 >>>= 7), (a3 & 15) === 0 && (h5 += 4, a3 >>>= 4), (a3 & 3) === 0 && (h5 += 2, a3 >>>= 2), (a3 & 1) === 0 && h5++, h5;
      }, f4.prototype.bitLength = function() {
        var i2 = this.words[this.length - 1], a3 = this._countBits(i2);
        return (this.length - 1) * 26 + a3;
      };
      function B5(v3) {
        for (var i2 = new Array(v3.bitLength()), a3 = 0;a3 < i2.length; a3++) {
          var h5 = a3 / 26 | 0, s2 = a3 % 26;
          i2[a3] = (v3.words[h5] & 1 << s2) >>> s2;
        }
        return i2;
      }
      f4.prototype.zeroBits = function() {
        if (this.isZero())
          return 0;
        for (var i2 = 0, a3 = 0;a3 < this.length; a3++) {
          var h5 = this._zeroBits(this.words[a3]);
          if (i2 += h5, h5 !== 26)
            break;
        }
        return i2;
      }, f4.prototype.byteLength = function() {
        return Math.ceil(this.bitLength() / 8);
      }, f4.prototype.toTwos = function(i2) {
        return this.negative !== 0 ? this.abs().inotn(i2).iaddn(1) : this.clone();
      }, f4.prototype.fromTwos = function(i2) {
        return this.testn(i2 - 1) ? this.notn(i2).iaddn(1).ineg() : this.clone();
      }, f4.prototype.isNeg = function() {
        return this.negative !== 0;
      }, f4.prototype.neg = function() {
        return this.clone().ineg();
      }, f4.prototype.ineg = function() {
        return this.isZero() || (this.negative ^= 1), this;
      }, f4.prototype.iuor = function(i2) {
        for (;this.length < i2.length; )
          this.words[this.length++] = 0;
        for (var a3 = 0;a3 < i2.length; a3++)
          this.words[a3] = this.words[a3] | i2.words[a3];
        return this.strip();
      }, f4.prototype.ior = function(i2) {
        return r2((this.negative | i2.negative) === 0), this.iuor(i2);
      }, f4.prototype.or = function(i2) {
        return this.length > i2.length ? this.clone().ior(i2) : i2.clone().ior(this);
      }, f4.prototype.uor = function(i2) {
        return this.length > i2.length ? this.clone().iuor(i2) : i2.clone().iuor(this);
      }, f4.prototype.iuand = function(i2) {
        var a3;
        this.length > i2.length ? a3 = i2 : a3 = this;
        for (var h5 = 0;h5 < a3.length; h5++)
          this.words[h5] = this.words[h5] & i2.words[h5];
        return this.length = a3.length, this.strip();
      }, f4.prototype.iand = function(i2) {
        return r2((this.negative | i2.negative) === 0), this.iuand(i2);
      }, f4.prototype.and = function(i2) {
        return this.length > i2.length ? this.clone().iand(i2) : i2.clone().iand(this);
      }, f4.prototype.uand = function(i2) {
        return this.length > i2.length ? this.clone().iuand(i2) : i2.clone().iuand(this);
      }, f4.prototype.iuxor = function(i2) {
        var a3, h5;
        this.length > i2.length ? (a3 = this, h5 = i2) : (a3 = i2, h5 = this);
        for (var s2 = 0;s2 < h5.length; s2++)
          this.words[s2] = a3.words[s2] ^ h5.words[s2];
        if (this !== a3)
          for (;s2 < a3.length; s2++)
            this.words[s2] = a3.words[s2];
        return this.length = a3.length, this.strip();
      }, f4.prototype.ixor = function(i2) {
        return r2((this.negative | i2.negative) === 0), this.iuxor(i2);
      }, f4.prototype.xor = function(i2) {
        return this.length > i2.length ? this.clone().ixor(i2) : i2.clone().ixor(this);
      }, f4.prototype.uxor = function(i2) {
        return this.length > i2.length ? this.clone().iuxor(i2) : i2.clone().iuxor(this);
      }, f4.prototype.inotn = function(i2) {
        r2(typeof i2 == "number" && i2 >= 0);
        var a3 = Math.ceil(i2 / 26) | 0, h5 = i2 % 26;
        this._expand(a3), h5 > 0 && a3--;
        for (var s2 = 0;s2 < a3; s2++)
          this.words[s2] = ~this.words[s2] & 67108863;
        return h5 > 0 && (this.words[s2] = ~this.words[s2] & 67108863 >> 26 - h5), this.strip();
      }, f4.prototype.notn = function(i2) {
        return this.clone().inotn(i2);
      }, f4.prototype.setn = function(i2, a3) {
        r2(typeof i2 == "number" && i2 >= 0);
        var h5 = i2 / 26 | 0, s2 = i2 % 26;
        return this._expand(h5 + 1), a3 ? this.words[h5] = this.words[h5] | 1 << s2 : this.words[h5] = this.words[h5] & ~(1 << s2), this.strip();
      }, f4.prototype.iadd = function(i2) {
        var a3;
        if (this.negative !== 0 && i2.negative === 0)
          return this.negative = 0, a3 = this.isub(i2), this.negative ^= 1, this._normSign();
        if (this.negative === 0 && i2.negative !== 0)
          return i2.negative = 0, a3 = this.isub(i2), i2.negative = 1, a3._normSign();
        var h5, s2;
        this.length > i2.length ? (h5 = this, s2 = i2) : (h5 = i2, s2 = this);
        for (var u3 = 0, c = 0;c < s2.length; c++)
          a3 = (h5.words[c] | 0) + (s2.words[c] | 0) + u3, this.words[c] = a3 & 67108863, u3 = a3 >>> 26;
        for (;u3 !== 0 && c < h5.length; c++)
          a3 = (h5.words[c] | 0) + u3, this.words[c] = a3 & 67108863, u3 = a3 >>> 26;
        if (this.length = h5.length, u3 !== 0)
          this.words[this.length] = u3, this.length++;
        else if (h5 !== this)
          for (;c < h5.length; c++)
            this.words[c] = h5.words[c];
        return this;
      }, f4.prototype.add = function(i2) {
        var a3;
        return i2.negative !== 0 && this.negative === 0 ? (i2.negative = 0, a3 = this.sub(i2), i2.negative ^= 1, a3) : i2.negative === 0 && this.negative !== 0 ? (this.negative = 0, a3 = i2.sub(this), this.negative = 1, a3) : this.length > i2.length ? this.clone().iadd(i2) : i2.clone().iadd(this);
      }, f4.prototype.isub = function(i2) {
        if (i2.negative !== 0) {
          i2.negative = 0;
          var a3 = this.iadd(i2);
          return i2.negative = 1, a3._normSign();
        } else if (this.negative !== 0)
          return this.negative = 0, this.iadd(i2), this.negative = 1, this._normSign();
        var h5 = this.cmp(i2);
        if (h5 === 0)
          return this.negative = 0, this.length = 1, this.words[0] = 0, this;
        var s2, u3;
        h5 > 0 ? (s2 = this, u3 = i2) : (s2 = i2, u3 = this);
        for (var c = 0, b3 = 0;b3 < u3.length; b3++)
          a3 = (s2.words[b3] | 0) - (u3.words[b3] | 0) + c, c = a3 >> 26, this.words[b3] = a3 & 67108863;
        for (;c !== 0 && b3 < s2.length; b3++)
          a3 = (s2.words[b3] | 0) + c, c = a3 >> 26, this.words[b3] = a3 & 67108863;
        if (c === 0 && b3 < s2.length && s2 !== this)
          for (;b3 < s2.length; b3++)
            this.words[b3] = s2.words[b3];
        return this.length = Math.max(this.length, b3), s2 !== this && (this.negative = 1), this.strip();
      }, f4.prototype.sub = function(i2) {
        return this.clone().isub(i2);
      };
      function q2(v3, i2, a3) {
        a3.negative = i2.negative ^ v3.negative;
        var h5 = v3.length + i2.length | 0;
        a3.length = h5, h5 = h5 - 1 | 0;
        var s2 = v3.words[0] | 0, u3 = i2.words[0] | 0, c = s2 * u3, b3 = c & 67108863, l4 = c / 67108864 | 0;
        a3.words[0] = b3;
        for (var n4 = 1;n4 < h5; n4++) {
          for (var d2 = l4 >>> 26, w2 = l4 & 67108863, g2 = Math.min(n4, i2.length - 1), _3 = Math.max(0, n4 - v3.length + 1);_3 <= g2; _3++) {
            var A6 = n4 - _3 | 0;
            s2 = v3.words[A6] | 0, u3 = i2.words[_3] | 0, c = s2 * u3 + w2, d2 += c / 67108864 | 0, w2 = c & 67108863;
          }
          a3.words[n4] = w2 | 0, l4 = d2 | 0;
        }
        return l4 !== 0 ? a3.words[n4] = l4 | 0 : a3.length--, a3.strip();
      }
      var L32 = function(i2, a3, h5) {
        var s2 = i2.words, u3 = a3.words, c = h5.words, b3 = 0, l4, n4, d2, w2 = s2[0] | 0, g2 = w2 & 8191, _3 = w2 >>> 13, A6 = s2[1] | 0, R3 = A6 & 8191, I2 = A6 >>> 13, Me = s2[2] | 0, k2 = Me & 8191, D2 = Me >>> 13, nt = s2[3] | 0, C3 = nt & 8191, O2 = nt >>> 13, vt = s2[4] | 0, F = vt & 8191, U3 = vt >>> 13, bt = s2[5] | 0, z3 = bt & 8191, H32 = bt >>> 13, mt = s2[6] | 0, W3 = mt & 8191, K = mt >>> 13, gt = s2[7] | 0, j2 = gt & 8191, Z3 = gt >>> 13, yt = s2[8] | 0, V4 = yt & 8191, $32 = yt >>> 13, wt = s2[9] | 0, G4 = wt & 8191, Y = wt >>> 13, Mt = u3[0] | 0, X3 = Mt & 8191, J = Mt >>> 13, _t = u3[1] | 0, Q3 = _t & 8191, ee = _t >>> 13, xt = u3[2] | 0, te = xt & 8191, re = xt >>> 13, St = u3[3] | 0, ie = St & 8191, ne = St >>> 13, Et = u3[4] | 0, fe = Et & 8191, ae = Et >>> 13, At = u3[5] | 0, oe = At & 8191, se = At >>> 13, Rt = u3[6] | 0, he = Rt & 8191, ue = Rt >>> 13, Bt = u3[7] | 0, le = Bt & 8191, de = Bt >>> 13, qt = u3[8] | 0, ce = qt & 8191, pe = qt >>> 13, It = u3[9] | 0, ve = It & 8191, be = It >>> 13;
        h5.negative = i2.negative ^ a3.negative, h5.length = 19, l4 = Math.imul(g2, X3), n4 = Math.imul(g2, J), n4 = n4 + Math.imul(_3, X3) | 0, d2 = Math.imul(_3, J);
        var ft = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (ft >>> 26) | 0, ft &= 67108863, l4 = Math.imul(R3, X3), n4 = Math.imul(R3, J), n4 = n4 + Math.imul(I2, X3) | 0, d2 = Math.imul(I2, J), l4 = l4 + Math.imul(g2, Q3) | 0, n4 = n4 + Math.imul(g2, ee) | 0, n4 = n4 + Math.imul(_3, Q3) | 0, d2 = d2 + Math.imul(_3, ee) | 0;
        var Be = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Be >>> 26) | 0, Be &= 67108863, l4 = Math.imul(k2, X3), n4 = Math.imul(k2, J), n4 = n4 + Math.imul(D2, X3) | 0, d2 = Math.imul(D2, J), l4 = l4 + Math.imul(R3, Q3) | 0, n4 = n4 + Math.imul(R3, ee) | 0, n4 = n4 + Math.imul(I2, Q3) | 0, d2 = d2 + Math.imul(I2, ee) | 0, l4 = l4 + Math.imul(g2, te) | 0, n4 = n4 + Math.imul(g2, re) | 0, n4 = n4 + Math.imul(_3, te) | 0, d2 = d2 + Math.imul(_3, re) | 0;
        var qe = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (qe >>> 26) | 0, qe &= 67108863, l4 = Math.imul(C3, X3), n4 = Math.imul(C3, J), n4 = n4 + Math.imul(O2, X3) | 0, d2 = Math.imul(O2, J), l4 = l4 + Math.imul(k2, Q3) | 0, n4 = n4 + Math.imul(k2, ee) | 0, n4 = n4 + Math.imul(D2, Q3) | 0, d2 = d2 + Math.imul(D2, ee) | 0, l4 = l4 + Math.imul(R3, te) | 0, n4 = n4 + Math.imul(R3, re) | 0, n4 = n4 + Math.imul(I2, te) | 0, d2 = d2 + Math.imul(I2, re) | 0, l4 = l4 + Math.imul(g2, ie) | 0, n4 = n4 + Math.imul(g2, ne) | 0, n4 = n4 + Math.imul(_3, ie) | 0, d2 = d2 + Math.imul(_3, ne) | 0;
        var ze = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (ze >>> 26) | 0, ze &= 67108863, l4 = Math.imul(F, X3), n4 = Math.imul(F, J), n4 = n4 + Math.imul(U3, X3) | 0, d2 = Math.imul(U3, J), l4 = l4 + Math.imul(C3, Q3) | 0, n4 = n4 + Math.imul(C3, ee) | 0, n4 = n4 + Math.imul(O2, Q3) | 0, d2 = d2 + Math.imul(O2, ee) | 0, l4 = l4 + Math.imul(k2, te) | 0, n4 = n4 + Math.imul(k2, re) | 0, n4 = n4 + Math.imul(D2, te) | 0, d2 = d2 + Math.imul(D2, re) | 0, l4 = l4 + Math.imul(R3, ie) | 0, n4 = n4 + Math.imul(R3, ne) | 0, n4 = n4 + Math.imul(I2, ie) | 0, d2 = d2 + Math.imul(I2, ne) | 0, l4 = l4 + Math.imul(g2, fe) | 0, n4 = n4 + Math.imul(g2, ae) | 0, n4 = n4 + Math.imul(_3, fe) | 0, d2 = d2 + Math.imul(_3, ae) | 0;
        var He = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (He >>> 26) | 0, He &= 67108863, l4 = Math.imul(z3, X3), n4 = Math.imul(z3, J), n4 = n4 + Math.imul(H32, X3) | 0, d2 = Math.imul(H32, J), l4 = l4 + Math.imul(F, Q3) | 0, n4 = n4 + Math.imul(F, ee) | 0, n4 = n4 + Math.imul(U3, Q3) | 0, d2 = d2 + Math.imul(U3, ee) | 0, l4 = l4 + Math.imul(C3, te) | 0, n4 = n4 + Math.imul(C3, re) | 0, n4 = n4 + Math.imul(O2, te) | 0, d2 = d2 + Math.imul(O2, re) | 0, l4 = l4 + Math.imul(k2, ie) | 0, n4 = n4 + Math.imul(k2, ne) | 0, n4 = n4 + Math.imul(D2, ie) | 0, d2 = d2 + Math.imul(D2, ne) | 0, l4 = l4 + Math.imul(R3, fe) | 0, n4 = n4 + Math.imul(R3, ae) | 0, n4 = n4 + Math.imul(I2, fe) | 0, d2 = d2 + Math.imul(I2, ae) | 0, l4 = l4 + Math.imul(g2, oe) | 0, n4 = n4 + Math.imul(g2, se) | 0, n4 = n4 + Math.imul(_3, oe) | 0, d2 = d2 + Math.imul(_3, se) | 0;
        var We = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (We >>> 26) | 0, We &= 67108863, l4 = Math.imul(W3, X3), n4 = Math.imul(W3, J), n4 = n4 + Math.imul(K, X3) | 0, d2 = Math.imul(K, J), l4 = l4 + Math.imul(z3, Q3) | 0, n4 = n4 + Math.imul(z3, ee) | 0, n4 = n4 + Math.imul(H32, Q3) | 0, d2 = d2 + Math.imul(H32, ee) | 0, l4 = l4 + Math.imul(F, te) | 0, n4 = n4 + Math.imul(F, re) | 0, n4 = n4 + Math.imul(U3, te) | 0, d2 = d2 + Math.imul(U3, re) | 0, l4 = l4 + Math.imul(C3, ie) | 0, n4 = n4 + Math.imul(C3, ne) | 0, n4 = n4 + Math.imul(O2, ie) | 0, d2 = d2 + Math.imul(O2, ne) | 0, l4 = l4 + Math.imul(k2, fe) | 0, n4 = n4 + Math.imul(k2, ae) | 0, n4 = n4 + Math.imul(D2, fe) | 0, d2 = d2 + Math.imul(D2, ae) | 0, l4 = l4 + Math.imul(R3, oe) | 0, n4 = n4 + Math.imul(R3, se) | 0, n4 = n4 + Math.imul(I2, oe) | 0, d2 = d2 + Math.imul(I2, se) | 0, l4 = l4 + Math.imul(g2, he) | 0, n4 = n4 + Math.imul(g2, ue) | 0, n4 = n4 + Math.imul(_3, he) | 0, d2 = d2 + Math.imul(_3, ue) | 0;
        var Ke = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ke >>> 26) | 0, Ke &= 67108863, l4 = Math.imul(j2, X3), n4 = Math.imul(j2, J), n4 = n4 + Math.imul(Z3, X3) | 0, d2 = Math.imul(Z3, J), l4 = l4 + Math.imul(W3, Q3) | 0, n4 = n4 + Math.imul(W3, ee) | 0, n4 = n4 + Math.imul(K, Q3) | 0, d2 = d2 + Math.imul(K, ee) | 0, l4 = l4 + Math.imul(z3, te) | 0, n4 = n4 + Math.imul(z3, re) | 0, n4 = n4 + Math.imul(H32, te) | 0, d2 = d2 + Math.imul(H32, re) | 0, l4 = l4 + Math.imul(F, ie) | 0, n4 = n4 + Math.imul(F, ne) | 0, n4 = n4 + Math.imul(U3, ie) | 0, d2 = d2 + Math.imul(U3, ne) | 0, l4 = l4 + Math.imul(C3, fe) | 0, n4 = n4 + Math.imul(C3, ae) | 0, n4 = n4 + Math.imul(O2, fe) | 0, d2 = d2 + Math.imul(O2, ae) | 0, l4 = l4 + Math.imul(k2, oe) | 0, n4 = n4 + Math.imul(k2, se) | 0, n4 = n4 + Math.imul(D2, oe) | 0, d2 = d2 + Math.imul(D2, se) | 0, l4 = l4 + Math.imul(R3, he) | 0, n4 = n4 + Math.imul(R3, ue) | 0, n4 = n4 + Math.imul(I2, he) | 0, d2 = d2 + Math.imul(I2, ue) | 0, l4 = l4 + Math.imul(g2, le) | 0, n4 = n4 + Math.imul(g2, de) | 0, n4 = n4 + Math.imul(_3, le) | 0, d2 = d2 + Math.imul(_3, de) | 0;
        var je = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (je >>> 26) | 0, je &= 67108863, l4 = Math.imul(V4, X3), n4 = Math.imul(V4, J), n4 = n4 + Math.imul($32, X3) | 0, d2 = Math.imul($32, J), l4 = l4 + Math.imul(j2, Q3) | 0, n4 = n4 + Math.imul(j2, ee) | 0, n4 = n4 + Math.imul(Z3, Q3) | 0, d2 = d2 + Math.imul(Z3, ee) | 0, l4 = l4 + Math.imul(W3, te) | 0, n4 = n4 + Math.imul(W3, re) | 0, n4 = n4 + Math.imul(K, te) | 0, d2 = d2 + Math.imul(K, re) | 0, l4 = l4 + Math.imul(z3, ie) | 0, n4 = n4 + Math.imul(z3, ne) | 0, n4 = n4 + Math.imul(H32, ie) | 0, d2 = d2 + Math.imul(H32, ne) | 0, l4 = l4 + Math.imul(F, fe) | 0, n4 = n4 + Math.imul(F, ae) | 0, n4 = n4 + Math.imul(U3, fe) | 0, d2 = d2 + Math.imul(U3, ae) | 0, l4 = l4 + Math.imul(C3, oe) | 0, n4 = n4 + Math.imul(C3, se) | 0, n4 = n4 + Math.imul(O2, oe) | 0, d2 = d2 + Math.imul(O2, se) | 0, l4 = l4 + Math.imul(k2, he) | 0, n4 = n4 + Math.imul(k2, ue) | 0, n4 = n4 + Math.imul(D2, he) | 0, d2 = d2 + Math.imul(D2, ue) | 0, l4 = l4 + Math.imul(R3, le) | 0, n4 = n4 + Math.imul(R3, de) | 0, n4 = n4 + Math.imul(I2, le) | 0, d2 = d2 + Math.imul(I2, de) | 0, l4 = l4 + Math.imul(g2, ce) | 0, n4 = n4 + Math.imul(g2, pe) | 0, n4 = n4 + Math.imul(_3, ce) | 0, d2 = d2 + Math.imul(_3, pe) | 0;
        var Ze = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ze >>> 26) | 0, Ze &= 67108863, l4 = Math.imul(G4, X3), n4 = Math.imul(G4, J), n4 = n4 + Math.imul(Y, X3) | 0, d2 = Math.imul(Y, J), l4 = l4 + Math.imul(V4, Q3) | 0, n4 = n4 + Math.imul(V4, ee) | 0, n4 = n4 + Math.imul($32, Q3) | 0, d2 = d2 + Math.imul($32, ee) | 0, l4 = l4 + Math.imul(j2, te) | 0, n4 = n4 + Math.imul(j2, re) | 0, n4 = n4 + Math.imul(Z3, te) | 0, d2 = d2 + Math.imul(Z3, re) | 0, l4 = l4 + Math.imul(W3, ie) | 0, n4 = n4 + Math.imul(W3, ne) | 0, n4 = n4 + Math.imul(K, ie) | 0, d2 = d2 + Math.imul(K, ne) | 0, l4 = l4 + Math.imul(z3, fe) | 0, n4 = n4 + Math.imul(z3, ae) | 0, n4 = n4 + Math.imul(H32, fe) | 0, d2 = d2 + Math.imul(H32, ae) | 0, l4 = l4 + Math.imul(F, oe) | 0, n4 = n4 + Math.imul(F, se) | 0, n4 = n4 + Math.imul(U3, oe) | 0, d2 = d2 + Math.imul(U3, se) | 0, l4 = l4 + Math.imul(C3, he) | 0, n4 = n4 + Math.imul(C3, ue) | 0, n4 = n4 + Math.imul(O2, he) | 0, d2 = d2 + Math.imul(O2, ue) | 0, l4 = l4 + Math.imul(k2, le) | 0, n4 = n4 + Math.imul(k2, de) | 0, n4 = n4 + Math.imul(D2, le) | 0, d2 = d2 + Math.imul(D2, de) | 0, l4 = l4 + Math.imul(R3, ce) | 0, n4 = n4 + Math.imul(R3, pe) | 0, n4 = n4 + Math.imul(I2, ce) | 0, d2 = d2 + Math.imul(I2, pe) | 0, l4 = l4 + Math.imul(g2, ve) | 0, n4 = n4 + Math.imul(g2, be) | 0, n4 = n4 + Math.imul(_3, ve) | 0, d2 = d2 + Math.imul(_3, be) | 0;
        var Ve = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ve >>> 26) | 0, Ve &= 67108863, l4 = Math.imul(G4, Q3), n4 = Math.imul(G4, ee), n4 = n4 + Math.imul(Y, Q3) | 0, d2 = Math.imul(Y, ee), l4 = l4 + Math.imul(V4, te) | 0, n4 = n4 + Math.imul(V4, re) | 0, n4 = n4 + Math.imul($32, te) | 0, d2 = d2 + Math.imul($32, re) | 0, l4 = l4 + Math.imul(j2, ie) | 0, n4 = n4 + Math.imul(j2, ne) | 0, n4 = n4 + Math.imul(Z3, ie) | 0, d2 = d2 + Math.imul(Z3, ne) | 0, l4 = l4 + Math.imul(W3, fe) | 0, n4 = n4 + Math.imul(W3, ae) | 0, n4 = n4 + Math.imul(K, fe) | 0, d2 = d2 + Math.imul(K, ae) | 0, l4 = l4 + Math.imul(z3, oe) | 0, n4 = n4 + Math.imul(z3, se) | 0, n4 = n4 + Math.imul(H32, oe) | 0, d2 = d2 + Math.imul(H32, se) | 0, l4 = l4 + Math.imul(F, he) | 0, n4 = n4 + Math.imul(F, ue) | 0, n4 = n4 + Math.imul(U3, he) | 0, d2 = d2 + Math.imul(U3, ue) | 0, l4 = l4 + Math.imul(C3, le) | 0, n4 = n4 + Math.imul(C3, de) | 0, n4 = n4 + Math.imul(O2, le) | 0, d2 = d2 + Math.imul(O2, de) | 0, l4 = l4 + Math.imul(k2, ce) | 0, n4 = n4 + Math.imul(k2, pe) | 0, n4 = n4 + Math.imul(D2, ce) | 0, d2 = d2 + Math.imul(D2, pe) | 0, l4 = l4 + Math.imul(R3, ve) | 0, n4 = n4 + Math.imul(R3, be) | 0, n4 = n4 + Math.imul(I2, ve) | 0, d2 = d2 + Math.imul(I2, be) | 0;
        var $e = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + ($e >>> 26) | 0, $e &= 67108863, l4 = Math.imul(G4, te), n4 = Math.imul(G4, re), n4 = n4 + Math.imul(Y, te) | 0, d2 = Math.imul(Y, re), l4 = l4 + Math.imul(V4, ie) | 0, n4 = n4 + Math.imul(V4, ne) | 0, n4 = n4 + Math.imul($32, ie) | 0, d2 = d2 + Math.imul($32, ne) | 0, l4 = l4 + Math.imul(j2, fe) | 0, n4 = n4 + Math.imul(j2, ae) | 0, n4 = n4 + Math.imul(Z3, fe) | 0, d2 = d2 + Math.imul(Z3, ae) | 0, l4 = l4 + Math.imul(W3, oe) | 0, n4 = n4 + Math.imul(W3, se) | 0, n4 = n4 + Math.imul(K, oe) | 0, d2 = d2 + Math.imul(K, se) | 0, l4 = l4 + Math.imul(z3, he) | 0, n4 = n4 + Math.imul(z3, ue) | 0, n4 = n4 + Math.imul(H32, he) | 0, d2 = d2 + Math.imul(H32, ue) | 0, l4 = l4 + Math.imul(F, le) | 0, n4 = n4 + Math.imul(F, de) | 0, n4 = n4 + Math.imul(U3, le) | 0, d2 = d2 + Math.imul(U3, de) | 0, l4 = l4 + Math.imul(C3, ce) | 0, n4 = n4 + Math.imul(C3, pe) | 0, n4 = n4 + Math.imul(O2, ce) | 0, d2 = d2 + Math.imul(O2, pe) | 0, l4 = l4 + Math.imul(k2, ve) | 0, n4 = n4 + Math.imul(k2, be) | 0, n4 = n4 + Math.imul(D2, ve) | 0, d2 = d2 + Math.imul(D2, be) | 0;
        var Ge = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ge >>> 26) | 0, Ge &= 67108863, l4 = Math.imul(G4, ie), n4 = Math.imul(G4, ne), n4 = n4 + Math.imul(Y, ie) | 0, d2 = Math.imul(Y, ne), l4 = l4 + Math.imul(V4, fe) | 0, n4 = n4 + Math.imul(V4, ae) | 0, n4 = n4 + Math.imul($32, fe) | 0, d2 = d2 + Math.imul($32, ae) | 0, l4 = l4 + Math.imul(j2, oe) | 0, n4 = n4 + Math.imul(j2, se) | 0, n4 = n4 + Math.imul(Z3, oe) | 0, d2 = d2 + Math.imul(Z3, se) | 0, l4 = l4 + Math.imul(W3, he) | 0, n4 = n4 + Math.imul(W3, ue) | 0, n4 = n4 + Math.imul(K, he) | 0, d2 = d2 + Math.imul(K, ue) | 0, l4 = l4 + Math.imul(z3, le) | 0, n4 = n4 + Math.imul(z3, de) | 0, n4 = n4 + Math.imul(H32, le) | 0, d2 = d2 + Math.imul(H32, de) | 0, l4 = l4 + Math.imul(F, ce) | 0, n4 = n4 + Math.imul(F, pe) | 0, n4 = n4 + Math.imul(U3, ce) | 0, d2 = d2 + Math.imul(U3, pe) | 0, l4 = l4 + Math.imul(C3, ve) | 0, n4 = n4 + Math.imul(C3, be) | 0, n4 = n4 + Math.imul(O2, ve) | 0, d2 = d2 + Math.imul(O2, be) | 0;
        var Ye = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ye >>> 26) | 0, Ye &= 67108863, l4 = Math.imul(G4, fe), n4 = Math.imul(G4, ae), n4 = n4 + Math.imul(Y, fe) | 0, d2 = Math.imul(Y, ae), l4 = l4 + Math.imul(V4, oe) | 0, n4 = n4 + Math.imul(V4, se) | 0, n4 = n4 + Math.imul($32, oe) | 0, d2 = d2 + Math.imul($32, se) | 0, l4 = l4 + Math.imul(j2, he) | 0, n4 = n4 + Math.imul(j2, ue) | 0, n4 = n4 + Math.imul(Z3, he) | 0, d2 = d2 + Math.imul(Z3, ue) | 0, l4 = l4 + Math.imul(W3, le) | 0, n4 = n4 + Math.imul(W3, de) | 0, n4 = n4 + Math.imul(K, le) | 0, d2 = d2 + Math.imul(K, de) | 0, l4 = l4 + Math.imul(z3, ce) | 0, n4 = n4 + Math.imul(z3, pe) | 0, n4 = n4 + Math.imul(H32, ce) | 0, d2 = d2 + Math.imul(H32, pe) | 0, l4 = l4 + Math.imul(F, ve) | 0, n4 = n4 + Math.imul(F, be) | 0, n4 = n4 + Math.imul(U3, ve) | 0, d2 = d2 + Math.imul(U3, be) | 0;
        var Xe = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Xe >>> 26) | 0, Xe &= 67108863, l4 = Math.imul(G4, oe), n4 = Math.imul(G4, se), n4 = n4 + Math.imul(Y, oe) | 0, d2 = Math.imul(Y, se), l4 = l4 + Math.imul(V4, he) | 0, n4 = n4 + Math.imul(V4, ue) | 0, n4 = n4 + Math.imul($32, he) | 0, d2 = d2 + Math.imul($32, ue) | 0, l4 = l4 + Math.imul(j2, le) | 0, n4 = n4 + Math.imul(j2, de) | 0, n4 = n4 + Math.imul(Z3, le) | 0, d2 = d2 + Math.imul(Z3, de) | 0, l4 = l4 + Math.imul(W3, ce) | 0, n4 = n4 + Math.imul(W3, pe) | 0, n4 = n4 + Math.imul(K, ce) | 0, d2 = d2 + Math.imul(K, pe) | 0, l4 = l4 + Math.imul(z3, ve) | 0, n4 = n4 + Math.imul(z3, be) | 0, n4 = n4 + Math.imul(H32, ve) | 0, d2 = d2 + Math.imul(H32, be) | 0;
        var Je = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Je >>> 26) | 0, Je &= 67108863, l4 = Math.imul(G4, he), n4 = Math.imul(G4, ue), n4 = n4 + Math.imul(Y, he) | 0, d2 = Math.imul(Y, ue), l4 = l4 + Math.imul(V4, le) | 0, n4 = n4 + Math.imul(V4, de) | 0, n4 = n4 + Math.imul($32, le) | 0, d2 = d2 + Math.imul($32, de) | 0, l4 = l4 + Math.imul(j2, ce) | 0, n4 = n4 + Math.imul(j2, pe) | 0, n4 = n4 + Math.imul(Z3, ce) | 0, d2 = d2 + Math.imul(Z3, pe) | 0, l4 = l4 + Math.imul(W3, ve) | 0, n4 = n4 + Math.imul(W3, be) | 0, n4 = n4 + Math.imul(K, ve) | 0, d2 = d2 + Math.imul(K, be) | 0;
        var Qe = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Qe >>> 26) | 0, Qe &= 67108863, l4 = Math.imul(G4, le), n4 = Math.imul(G4, de), n4 = n4 + Math.imul(Y, le) | 0, d2 = Math.imul(Y, de), l4 = l4 + Math.imul(V4, ce) | 0, n4 = n4 + Math.imul(V4, pe) | 0, n4 = n4 + Math.imul($32, ce) | 0, d2 = d2 + Math.imul($32, pe) | 0, l4 = l4 + Math.imul(j2, ve) | 0, n4 = n4 + Math.imul(j2, be) | 0, n4 = n4 + Math.imul(Z3, ve) | 0, d2 = d2 + Math.imul(Z3, be) | 0;
        var et = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (et >>> 26) | 0, et &= 67108863, l4 = Math.imul(G4, ce), n4 = Math.imul(G4, pe), n4 = n4 + Math.imul(Y, ce) | 0, d2 = Math.imul(Y, pe), l4 = l4 + Math.imul(V4, ve) | 0, n4 = n4 + Math.imul(V4, be) | 0, n4 = n4 + Math.imul($32, ve) | 0, d2 = d2 + Math.imul($32, be) | 0;
        var tt = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (tt >>> 26) | 0, tt &= 67108863, l4 = Math.imul(G4, ve), n4 = Math.imul(G4, be), n4 = n4 + Math.imul(Y, ve) | 0, d2 = Math.imul(Y, be);
        var rt = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        return b3 = (d2 + (n4 >>> 13) | 0) + (rt >>> 26) | 0, rt &= 67108863, c[0] = ft, c[1] = Be, c[2] = qe, c[3] = ze, c[4] = He, c[5] = We, c[6] = Ke, c[7] = je, c[8] = Ze, c[9] = Ve, c[10] = $e, c[11] = Ge, c[12] = Ye, c[13] = Xe, c[14] = Je, c[15] = Qe, c[16] = et, c[17] = tt, c[18] = rt, b3 !== 0 && (c[19] = b3, h5.length++), h5;
      };
      Math.imul || (L32 = q2);
      function ge(v3, i2, a3) {
        a3.negative = i2.negative ^ v3.negative, a3.length = v3.length + i2.length;
        for (var h5 = 0, s2 = 0, u3 = 0;u3 < a3.length - 1; u3++) {
          var c = s2;
          s2 = 0;
          for (var b3 = h5 & 67108863, l4 = Math.min(u3, i2.length - 1), n4 = Math.max(0, u3 - v3.length + 1);n4 <= l4; n4++) {
            var d2 = u3 - n4, w2 = v3.words[d2] | 0, g2 = i2.words[n4] | 0, _3 = w2 * g2, A6 = _3 & 67108863;
            c = c + (_3 / 67108864 | 0) | 0, A6 = A6 + b3 | 0, b3 = A6 & 67108863, c = c + (A6 >>> 26) | 0, s2 += c >>> 26, c &= 67108863;
          }
          a3.words[u3] = b3, h5 = c, c = s2;
        }
        return h5 !== 0 ? a3.words[u3] = h5 : a3.length--, a3.strip();
      }
      function _e(v3, i2, a3) {
        var h5 = new N3;
        return h5.mulp(v3, i2, a3);
      }
      f4.prototype.mulTo = function(i2, a3) {
        var h5, s2 = this.length + i2.length;
        return this.length === 10 && i2.length === 10 ? h5 = L32(this, i2, a3) : s2 < 63 ? h5 = q2(this, i2, a3) : s2 < 1024 ? h5 = ge(this, i2, a3) : h5 = _e(this, i2, a3), h5;
      };
      function N3(v3, i2) {
        this.x = v3, this.y = i2;
      }
      N3.prototype.makeRBT = function(i2) {
        for (var a3 = new Array(i2), h5 = f4.prototype._countBits(i2) - 1, s2 = 0;s2 < i2; s2++)
          a3[s2] = this.revBin(s2, h5, i2);
        return a3;
      }, N3.prototype.revBin = function(i2, a3, h5) {
        if (i2 === 0 || i2 === h5 - 1)
          return i2;
        for (var s2 = 0, u3 = 0;u3 < a3; u3++)
          s2 |= (i2 & 1) << a3 - u3 - 1, i2 >>= 1;
        return s2;
      }, N3.prototype.permute = function(i2, a3, h5, s2, u3, c) {
        for (var b3 = 0;b3 < c; b3++)
          s2[b3] = a3[i2[b3]], u3[b3] = h5[i2[b3]];
      }, N3.prototype.transform = function(i2, a3, h5, s2, u3, c) {
        this.permute(c, i2, a3, h5, s2, u3);
        for (var b3 = 1;b3 < u3; b3 <<= 1)
          for (var l4 = b3 << 1, n4 = Math.cos(2 * Math.PI / l4), d2 = Math.sin(2 * Math.PI / l4), w2 = 0;w2 < u3; w2 += l4)
            for (var g2 = n4, _3 = d2, A6 = 0;A6 < b3; A6++) {
              var R3 = h5[w2 + A6], I2 = s2[w2 + A6], Me = h5[w2 + A6 + b3], k2 = s2[w2 + A6 + b3], D2 = g2 * Me - _3 * k2;
              k2 = g2 * k2 + _3 * Me, Me = D2, h5[w2 + A6] = R3 + Me, s2[w2 + A6] = I2 + k2, h5[w2 + A6 + b3] = R3 - Me, s2[w2 + A6 + b3] = I2 - k2, A6 !== l4 && (D2 = n4 * g2 - d2 * _3, _3 = n4 * _3 + d2 * g2, g2 = D2);
            }
      }, N3.prototype.guessLen13b = function(i2, a3) {
        var h5 = Math.max(a3, i2) | 1, s2 = h5 & 1, u3 = 0;
        for (h5 = h5 / 2 | 0;h5; h5 = h5 >>> 1)
          u3++;
        return 1 << u3 + 1 + s2;
      }, N3.prototype.conjugate = function(i2, a3, h5) {
        if (!(h5 <= 1))
          for (var s2 = 0;s2 < h5 / 2; s2++) {
            var u3 = i2[s2];
            i2[s2] = i2[h5 - s2 - 1], i2[h5 - s2 - 1] = u3, u3 = a3[s2], a3[s2] = -a3[h5 - s2 - 1], a3[h5 - s2 - 1] = -u3;
          }
      }, N3.prototype.normalize13b = function(i2, a3) {
        for (var h5 = 0, s2 = 0;s2 < a3 / 2; s2++) {
          var u3 = Math.round(i2[2 * s2 + 1] / a3) * 8192 + Math.round(i2[2 * s2] / a3) + h5;
          i2[s2] = u3 & 67108863, u3 < 67108864 ? h5 = 0 : h5 = u3 / 67108864 | 0;
        }
        return i2;
      }, N3.prototype.convert13b = function(i2, a3, h5, s2) {
        for (var u3 = 0, c = 0;c < a3; c++)
          u3 = u3 + (i2[c] | 0), h5[2 * c] = u3 & 8191, u3 = u3 >>> 13, h5[2 * c + 1] = u3 & 8191, u3 = u3 >>> 13;
        for (c = 2 * a3;c < s2; ++c)
          h5[c] = 0;
        r2(u3 === 0), r2((u3 & -8192) === 0);
      }, N3.prototype.stub = function(i2) {
        for (var a3 = new Array(i2), h5 = 0;h5 < i2; h5++)
          a3[h5] = 0;
        return a3;
      }, N3.prototype.mulp = function(i2, a3, h5) {
        var s2 = 2 * this.guessLen13b(i2.length, a3.length), u3 = this.makeRBT(s2), c = this.stub(s2), b3 = new Array(s2), l4 = new Array(s2), n4 = new Array(s2), d2 = new Array(s2), w2 = new Array(s2), g2 = new Array(s2), _3 = h5.words;
        _3.length = s2, this.convert13b(i2.words, i2.length, b3, s2), this.convert13b(a3.words, a3.length, d2, s2), this.transform(b3, c, l4, n4, s2, u3), this.transform(d2, c, w2, g2, s2, u3);
        for (var A6 = 0;A6 < s2; A6++) {
          var R3 = l4[A6] * w2[A6] - n4[A6] * g2[A6];
          n4[A6] = l4[A6] * g2[A6] + n4[A6] * w2[A6], l4[A6] = R3;
        }
        return this.conjugate(l4, n4, s2), this.transform(l4, n4, _3, c, s2, u3), this.conjugate(_3, c, s2), this.normalize13b(_3, s2), h5.negative = i2.negative ^ a3.negative, h5.length = i2.length + a3.length, h5.strip();
      }, f4.prototype.mul = function(i2) {
        var a3 = new f4(null);
        return a3.words = new Array(this.length + i2.length), this.mulTo(i2, a3);
      }, f4.prototype.mulf = function(i2) {
        var a3 = new f4(null);
        return a3.words = new Array(this.length + i2.length), _e(this, i2, a3);
      }, f4.prototype.imul = function(i2) {
        return this.clone().mulTo(i2, this);
      }, f4.prototype.imuln = function(i2) {
        r2(typeof i2 == "number"), r2(i2 < 67108864);
        for (var a3 = 0, h5 = 0;h5 < this.length; h5++) {
          var s2 = (this.words[h5] | 0) * i2, u3 = (s2 & 67108863) + (a3 & 67108863);
          a3 >>= 26, a3 += s2 / 67108864 | 0, a3 += u3 >>> 26, this.words[h5] = u3 & 67108863;
        }
        return a3 !== 0 && (this.words[h5] = a3, this.length++), this;
      }, f4.prototype.muln = function(i2) {
        return this.clone().imuln(i2);
      }, f4.prototype.sqr = function() {
        return this.mul(this);
      }, f4.prototype.isqr = function() {
        return this.imul(this.clone());
      }, f4.prototype.pow = function(i2) {
        var a3 = B5(i2);
        if (a3.length === 0)
          return new f4(1);
        for (var h5 = this, s2 = 0;s2 < a3.length && a3[s2] === 0; s2++, h5 = h5.sqr())
          ;
        if (++s2 < a3.length)
          for (var u3 = h5.sqr();s2 < a3.length; s2++, u3 = u3.sqr())
            a3[s2] !== 0 && (h5 = h5.mul(u3));
        return h5;
      }, f4.prototype.iushln = function(i2) {
        r2(typeof i2 == "number" && i2 >= 0);
        var a3 = i2 % 26, h5 = (i2 - a3) / 26, s2 = 67108863 >>> 26 - a3 << 26 - a3, u3;
        if (a3 !== 0) {
          var c = 0;
          for (u3 = 0;u3 < this.length; u3++) {
            var b3 = this.words[u3] & s2, l4 = (this.words[u3] | 0) - b3 << a3;
            this.words[u3] = l4 | c, c = b3 >>> 26 - a3;
          }
          c && (this.words[u3] = c, this.length++);
        }
        if (h5 !== 0) {
          for (u3 = this.length - 1;u3 >= 0; u3--)
            this.words[u3 + h5] = this.words[u3];
          for (u3 = 0;u3 < h5; u3++)
            this.words[u3] = 0;
          this.length += h5;
        }
        return this.strip();
      }, f4.prototype.ishln = function(i2) {
        return r2(this.negative === 0), this.iushln(i2);
      }, f4.prototype.iushrn = function(i2, a3, h5) {
        r2(typeof i2 == "number" && i2 >= 0);
        var s2;
        a3 ? s2 = (a3 - a3 % 26) / 26 : s2 = 0;
        var u3 = i2 % 26, c = Math.min((i2 - u3) / 26, this.length), b3 = 67108863 ^ 67108863 >>> u3 << u3, l4 = h5;
        if (s2 -= c, s2 = Math.max(0, s2), l4) {
          for (var n4 = 0;n4 < c; n4++)
            l4.words[n4] = this.words[n4];
          l4.length = c;
        }
        if (c !== 0)
          if (this.length > c)
            for (this.length -= c, n4 = 0;n4 < this.length; n4++)
              this.words[n4] = this.words[n4 + c];
          else
            this.words[0] = 0, this.length = 1;
        var d2 = 0;
        for (n4 = this.length - 1;n4 >= 0 && (d2 !== 0 || n4 >= s2); n4--) {
          var w2 = this.words[n4] | 0;
          this.words[n4] = d2 << 26 - u3 | w2 >>> u3, d2 = w2 & b3;
        }
        return l4 && d2 !== 0 && (l4.words[l4.length++] = d2), this.length === 0 && (this.words[0] = 0, this.length = 1), this.strip();
      }, f4.prototype.ishrn = function(i2, a3, h5) {
        return r2(this.negative === 0), this.iushrn(i2, a3, h5);
      }, f4.prototype.shln = function(i2) {
        return this.clone().ishln(i2);
      }, f4.prototype.ushln = function(i2) {
        return this.clone().iushln(i2);
      }, f4.prototype.shrn = function(i2) {
        return this.clone().ishrn(i2);
      }, f4.prototype.ushrn = function(i2) {
        return this.clone().iushrn(i2);
      }, f4.prototype.testn = function(i2) {
        r2(typeof i2 == "number" && i2 >= 0);
        var a3 = i2 % 26, h5 = (i2 - a3) / 26, s2 = 1 << a3;
        if (this.length <= h5)
          return false;
        var u3 = this.words[h5];
        return !!(u3 & s2);
      }, f4.prototype.imaskn = function(i2) {
        r2(typeof i2 == "number" && i2 >= 0);
        var a3 = i2 % 26, h5 = (i2 - a3) / 26;
        if (r2(this.negative === 0, "imaskn works only with positive numbers"), this.length <= h5)
          return this;
        if (a3 !== 0 && h5++, this.length = Math.min(h5, this.length), a3 !== 0) {
          var s2 = 67108863 ^ 67108863 >>> a3 << a3;
          this.words[this.length - 1] &= s2;
        }
        return this.strip();
      }, f4.prototype.maskn = function(i2) {
        return this.clone().imaskn(i2);
      }, f4.prototype.iaddn = function(i2) {
        return r2(typeof i2 == "number"), r2(i2 < 67108864), i2 < 0 ? this.isubn(-i2) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) < i2 ? (this.words[0] = i2 - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(i2), this.negative = 1, this) : this._iaddn(i2);
      }, f4.prototype._iaddn = function(i2) {
        this.words[0] += i2;
        for (var a3 = 0;a3 < this.length && this.words[a3] >= 67108864; a3++)
          this.words[a3] -= 67108864, a3 === this.length - 1 ? this.words[a3 + 1] = 1 : this.words[a3 + 1]++;
        return this.length = Math.max(this.length, a3 + 1), this;
      }, f4.prototype.isubn = function(i2) {
        if (r2(typeof i2 == "number"), r2(i2 < 67108864), i2 < 0)
          return this.iaddn(-i2);
        if (this.negative !== 0)
          return this.negative = 0, this.iaddn(i2), this.negative = 1, this;
        if (this.words[0] -= i2, this.length === 1 && this.words[0] < 0)
          this.words[0] = -this.words[0], this.negative = 1;
        else
          for (var a3 = 0;a3 < this.length && this.words[a3] < 0; a3++)
            this.words[a3] += 67108864, this.words[a3 + 1] -= 1;
        return this.strip();
      }, f4.prototype.addn = function(i2) {
        return this.clone().iaddn(i2);
      }, f4.prototype.subn = function(i2) {
        return this.clone().isubn(i2);
      }, f4.prototype.iabs = function() {
        return this.negative = 0, this;
      }, f4.prototype.abs = function() {
        return this.clone().iabs();
      }, f4.prototype._ishlnsubmul = function(i2, a3, h5) {
        var s2 = i2.length + h5, u3;
        this._expand(s2);
        var c, b3 = 0;
        for (u3 = 0;u3 < i2.length; u3++) {
          c = (this.words[u3 + h5] | 0) + b3;
          var l4 = (i2.words[u3] | 0) * a3;
          c -= l4 & 67108863, b3 = (c >> 26) - (l4 / 67108864 | 0), this.words[u3 + h5] = c & 67108863;
        }
        for (;u3 < this.length - h5; u3++)
          c = (this.words[u3 + h5] | 0) + b3, b3 = c >> 26, this.words[u3 + h5] = c & 67108863;
        if (b3 === 0)
          return this.strip();
        for (r2(b3 === -1), b3 = 0, u3 = 0;u3 < this.length; u3++)
          c = -(this.words[u3] | 0) + b3, b3 = c >> 26, this.words[u3] = c & 67108863;
        return this.negative = 1, this.strip();
      }, f4.prototype._wordDiv = function(i2, a3) {
        var h5 = this.length - i2.length, s2 = this.clone(), u3 = i2, c = u3.words[u3.length - 1] | 0, b3 = this._countBits(c);
        h5 = 26 - b3, h5 !== 0 && (u3 = u3.ushln(h5), s2.iushln(h5), c = u3.words[u3.length - 1] | 0);
        var l4 = s2.length - u3.length, n4;
        if (a3 !== "mod") {
          n4 = new f4(null), n4.length = l4 + 1, n4.words = new Array(n4.length);
          for (var d2 = 0;d2 < n4.length; d2++)
            n4.words[d2] = 0;
        }
        var w2 = s2.clone()._ishlnsubmul(u3, 1, l4);
        w2.negative === 0 && (s2 = w2, n4 && (n4.words[l4] = 1));
        for (var g2 = l4 - 1;g2 >= 0; g2--) {
          var _3 = (s2.words[u3.length + g2] | 0) * 67108864 + (s2.words[u3.length + g2 - 1] | 0);
          for (_3 = Math.min(_3 / c | 0, 67108863), s2._ishlnsubmul(u3, _3, g2);s2.negative !== 0; )
            _3--, s2.negative = 0, s2._ishlnsubmul(u3, 1, g2), s2.isZero() || (s2.negative ^= 1);
          n4 && (n4.words[g2] = _3);
        }
        return n4 && n4.strip(), s2.strip(), a3 !== "div" && h5 !== 0 && s2.iushrn(h5), { div: n4 || null, mod: s2 };
      }, f4.prototype.divmod = function(i2, a3, h5) {
        if (r2(!i2.isZero()), this.isZero())
          return { div: new f4(0), mod: new f4(0) };
        var s2, u3, c;
        return this.negative !== 0 && i2.negative === 0 ? (c = this.neg().divmod(i2, a3), a3 !== "mod" && (s2 = c.div.neg()), a3 !== "div" && (u3 = c.mod.neg(), h5 && u3.negative !== 0 && u3.iadd(i2)), { div: s2, mod: u3 }) : this.negative === 0 && i2.negative !== 0 ? (c = this.divmod(i2.neg(), a3), a3 !== "mod" && (s2 = c.div.neg()), { div: s2, mod: c.mod }) : (this.negative & i2.negative) !== 0 ? (c = this.neg().divmod(i2.neg(), a3), a3 !== "div" && (u3 = c.mod.neg(), h5 && u3.negative !== 0 && u3.isub(i2)), { div: c.div, mod: u3 }) : i2.length > this.length || this.cmp(i2) < 0 ? { div: new f4(0), mod: this } : i2.length === 1 ? a3 === "div" ? { div: this.divn(i2.words[0]), mod: null } : a3 === "mod" ? { div: null, mod: new f4(this.modn(i2.words[0])) } : { div: this.divn(i2.words[0]), mod: new f4(this.modn(i2.words[0])) } : this._wordDiv(i2, a3);
      }, f4.prototype.div = function(i2) {
        return this.divmod(i2, "div", false).div;
      }, f4.prototype.mod = function(i2) {
        return this.divmod(i2, "mod", false).mod;
      }, f4.prototype.umod = function(i2) {
        return this.divmod(i2, "mod", true).mod;
      }, f4.prototype.divRound = function(i2) {
        var a3 = this.divmod(i2);
        if (a3.mod.isZero())
          return a3.div;
        var h5 = a3.div.negative !== 0 ? a3.mod.isub(i2) : a3.mod, s2 = i2.ushrn(1), u3 = i2.andln(1), c = h5.cmp(s2);
        return c < 0 || u3 === 1 && c === 0 ? a3.div : a3.div.negative !== 0 ? a3.div.isubn(1) : a3.div.iaddn(1);
      }, f4.prototype.modn = function(i2) {
        r2(i2 <= 67108863);
        for (var a3 = (1 << 26) % i2, h5 = 0, s2 = this.length - 1;s2 >= 0; s2--)
          h5 = (a3 * h5 + (this.words[s2] | 0)) % i2;
        return h5;
      }, f4.prototype.idivn = function(i2) {
        r2(i2 <= 67108863);
        for (var a3 = 0, h5 = this.length - 1;h5 >= 0; h5--) {
          var s2 = (this.words[h5] | 0) + a3 * 67108864;
          this.words[h5] = s2 / i2 | 0, a3 = s2 % i2;
        }
        return this.strip();
      }, f4.prototype.divn = function(i2) {
        return this.clone().idivn(i2);
      }, f4.prototype.egcd = function(i2) {
        r2(i2.negative === 0), r2(!i2.isZero());
        var a3 = this, h5 = i2.clone();
        a3.negative !== 0 ? a3 = a3.umod(i2) : a3 = a3.clone();
        for (var s2 = new f4(1), u3 = new f4(0), c = new f4(0), b3 = new f4(1), l4 = 0;a3.isEven() && h5.isEven(); )
          a3.iushrn(1), h5.iushrn(1), ++l4;
        for (var n4 = h5.clone(), d2 = a3.clone();!a3.isZero(); ) {
          for (var w2 = 0, g2 = 1;(a3.words[0] & g2) === 0 && w2 < 26; ++w2, g2 <<= 1)
            ;
          if (w2 > 0)
            for (a3.iushrn(w2);w2-- > 0; )
              (s2.isOdd() || u3.isOdd()) && (s2.iadd(n4), u3.isub(d2)), s2.iushrn(1), u3.iushrn(1);
          for (var _3 = 0, A6 = 1;(h5.words[0] & A6) === 0 && _3 < 26; ++_3, A6 <<= 1)
            ;
          if (_3 > 0)
            for (h5.iushrn(_3);_3-- > 0; )
              (c.isOdd() || b3.isOdd()) && (c.iadd(n4), b3.isub(d2)), c.iushrn(1), b3.iushrn(1);
          a3.cmp(h5) >= 0 ? (a3.isub(h5), s2.isub(c), u3.isub(b3)) : (h5.isub(a3), c.isub(s2), b3.isub(u3));
        }
        return { a: c, b: b3, gcd: h5.iushln(l4) };
      }, f4.prototype._invmp = function(i2) {
        r2(i2.negative === 0), r2(!i2.isZero());
        var a3 = this, h5 = i2.clone();
        a3.negative !== 0 ? a3 = a3.umod(i2) : a3 = a3.clone();
        for (var s2 = new f4(1), u3 = new f4(0), c = h5.clone();a3.cmpn(1) > 0 && h5.cmpn(1) > 0; ) {
          for (var b3 = 0, l4 = 1;(a3.words[0] & l4) === 0 && b3 < 26; ++b3, l4 <<= 1)
            ;
          if (b3 > 0)
            for (a3.iushrn(b3);b3-- > 0; )
              s2.isOdd() && s2.iadd(c), s2.iushrn(1);
          for (var n4 = 0, d2 = 1;(h5.words[0] & d2) === 0 && n4 < 26; ++n4, d2 <<= 1)
            ;
          if (n4 > 0)
            for (h5.iushrn(n4);n4-- > 0; )
              u3.isOdd() && u3.iadd(c), u3.iushrn(1);
          a3.cmp(h5) >= 0 ? (a3.isub(h5), s2.isub(u3)) : (h5.isub(a3), u3.isub(s2));
        }
        var w2;
        return a3.cmpn(1) === 0 ? w2 = s2 : w2 = u3, w2.cmpn(0) < 0 && w2.iadd(i2), w2;
      }, f4.prototype.gcd = function(i2) {
        if (this.isZero())
          return i2.abs();
        if (i2.isZero())
          return this.abs();
        var a3 = this.clone(), h5 = i2.clone();
        a3.negative = 0, h5.negative = 0;
        for (var s2 = 0;a3.isEven() && h5.isEven(); s2++)
          a3.iushrn(1), h5.iushrn(1);
        do {
          for (;a3.isEven(); )
            a3.iushrn(1);
          for (;h5.isEven(); )
            h5.iushrn(1);
          var u3 = a3.cmp(h5);
          if (u3 < 0) {
            var c = a3;
            a3 = h5, h5 = c;
          } else if (u3 === 0 || h5.cmpn(1) === 0)
            break;
          a3.isub(h5);
        } while (true);
        return h5.iushln(s2);
      }, f4.prototype.invm = function(i2) {
        return this.egcd(i2).a.umod(i2);
      }, f4.prototype.isEven = function() {
        return (this.words[0] & 1) === 0;
      }, f4.prototype.isOdd = function() {
        return (this.words[0] & 1) === 1;
      }, f4.prototype.andln = function(i2) {
        return this.words[0] & i2;
      }, f4.prototype.bincn = function(i2) {
        r2(typeof i2 == "number");
        var a3 = i2 % 26, h5 = (i2 - a3) / 26, s2 = 1 << a3;
        if (this.length <= h5)
          return this._expand(h5 + 1), this.words[h5] |= s2, this;
        for (var u3 = s2, c = h5;u3 !== 0 && c < this.length; c++) {
          var b3 = this.words[c] | 0;
          b3 += u3, u3 = b3 >>> 26, b3 &= 67108863, this.words[c] = b3;
        }
        return u3 !== 0 && (this.words[c] = u3, this.length++), this;
      }, f4.prototype.isZero = function() {
        return this.length === 1 && this.words[0] === 0;
      }, f4.prototype.cmpn = function(i2) {
        var a3 = i2 < 0;
        if (this.negative !== 0 && !a3)
          return -1;
        if (this.negative === 0 && a3)
          return 1;
        this.strip();
        var h5;
        if (this.length > 1)
          h5 = 1;
        else {
          a3 && (i2 = -i2), r2(i2 <= 67108863, "Number is too big");
          var s2 = this.words[0] | 0;
          h5 = s2 === i2 ? 0 : s2 < i2 ? -1 : 1;
        }
        return this.negative !== 0 ? -h5 | 0 : h5;
      }, f4.prototype.cmp = function(i2) {
        if (this.negative !== 0 && i2.negative === 0)
          return -1;
        if (this.negative === 0 && i2.negative !== 0)
          return 1;
        var a3 = this.ucmp(i2);
        return this.negative !== 0 ? -a3 | 0 : a3;
      }, f4.prototype.ucmp = function(i2) {
        if (this.length > i2.length)
          return 1;
        if (this.length < i2.length)
          return -1;
        for (var a3 = 0, h5 = this.length - 1;h5 >= 0; h5--) {
          var s2 = this.words[h5] | 0, u3 = i2.words[h5] | 0;
          if (s2 !== u3) {
            s2 < u3 ? a3 = -1 : s2 > u3 && (a3 = 1);
            break;
          }
        }
        return a3;
      }, f4.prototype.gtn = function(i2) {
        return this.cmpn(i2) === 1;
      }, f4.prototype.gt = function(i2) {
        return this.cmp(i2) === 1;
      }, f4.prototype.gten = function(i2) {
        return this.cmpn(i2) >= 0;
      }, f4.prototype.gte = function(i2) {
        return this.cmp(i2) >= 0;
      }, f4.prototype.ltn = function(i2) {
        return this.cmpn(i2) === -1;
      }, f4.prototype.lt = function(i2) {
        return this.cmp(i2) === -1;
      }, f4.prototype.lten = function(i2) {
        return this.cmpn(i2) <= 0;
      }, f4.prototype.lte = function(i2) {
        return this.cmp(i2) <= 0;
      }, f4.prototype.eqn = function(i2) {
        return this.cmpn(i2) === 0;
      }, f4.prototype.eq = function(i2) {
        return this.cmp(i2) === 0;
      }, f4.red = function(i2) {
        return new P3(i2);
      }, f4.prototype.toRed = function(i2) {
        return r2(!this.red, "Already a number in reduction context"), r2(this.negative === 0, "red works only with positives"), i2.convertTo(this)._forceRed(i2);
      }, f4.prototype.fromRed = function() {
        return r2(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
      }, f4.prototype._forceRed = function(i2) {
        return this.red = i2, this;
      }, f4.prototype.forceRed = function(i2) {
        return r2(!this.red, "Already a number in reduction context"), this._forceRed(i2);
      }, f4.prototype.redAdd = function(i2) {
        return r2(this.red, "redAdd works only with red numbers"), this.red.add(this, i2);
      }, f4.prototype.redIAdd = function(i2) {
        return r2(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, i2);
      }, f4.prototype.redSub = function(i2) {
        return r2(this.red, "redSub works only with red numbers"), this.red.sub(this, i2);
      }, f4.prototype.redISub = function(i2) {
        return r2(this.red, "redISub works only with red numbers"), this.red.isub(this, i2);
      }, f4.prototype.redShl = function(i2) {
        return r2(this.red, "redShl works only with red numbers"), this.red.shl(this, i2);
      }, f4.prototype.redMul = function(i2) {
        return r2(this.red, "redMul works only with red numbers"), this.red._verify2(this, i2), this.red.mul(this, i2);
      }, f4.prototype.redIMul = function(i2) {
        return r2(this.red, "redMul works only with red numbers"), this.red._verify2(this, i2), this.red.imul(this, i2);
      }, f4.prototype.redSqr = function() {
        return r2(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
      }, f4.prototype.redISqr = function() {
        return r2(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
      }, f4.prototype.redSqrt = function() {
        return r2(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
      }, f4.prototype.redInvm = function() {
        return r2(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
      }, f4.prototype.redNeg = function() {
        return r2(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
      }, f4.prototype.redPow = function(i2) {
        return r2(this.red && !i2.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, i2);
      };
      var we = { k256: null, p224: null, p192: null, p25519: null };
      function ye(v3, i2) {
        this.name = v3, this.p = new f4(i2, 16), this.n = this.p.bitLength(), this.k = new f4(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
      }
      ye.prototype._tmp = function() {
        var i2 = new f4(null);
        return i2.words = new Array(Math.ceil(this.n / 13)), i2;
      }, ye.prototype.ireduce = function(i2) {
        var a3 = i2, h5;
        do
          this.split(a3, this.tmp), a3 = this.imulK(a3), a3 = a3.iadd(this.tmp), h5 = a3.bitLength();
        while (h5 > this.n);
        var s2 = h5 < this.n ? -1 : a3.ucmp(this.p);
        return s2 === 0 ? (a3.words[0] = 0, a3.length = 1) : s2 > 0 ? a3.isub(this.p) : a3.strip !== undefined ? a3.strip() : a3._strip(), a3;
      }, ye.prototype.split = function(i2, a3) {
        i2.iushrn(this.n, 0, a3);
      }, ye.prototype.imulK = function(i2) {
        return i2.imul(this.k);
      };
      function xe() {
        ye.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      o2(xe, ye), xe.prototype.split = function(i2, a3) {
        for (var h5 = 4194303, s2 = Math.min(i2.length, 9), u3 = 0;u3 < s2; u3++)
          a3.words[u3] = i2.words[u3];
        if (a3.length = s2, i2.length <= 9) {
          i2.words[0] = 0, i2.length = 1;
          return;
        }
        var c = i2.words[9];
        for (a3.words[a3.length++] = c & h5, u3 = 10;u3 < i2.length; u3++) {
          var b3 = i2.words[u3] | 0;
          i2.words[u3 - 10] = (b3 & h5) << 4 | c >>> 22, c = b3;
        }
        c >>>= 22, i2.words[u3 - 10] = c, c === 0 && i2.length > 10 ? i2.length -= 10 : i2.length -= 9;
      }, xe.prototype.imulK = function(i2) {
        i2.words[i2.length] = 0, i2.words[i2.length + 1] = 0, i2.length += 2;
        for (var a3 = 0, h5 = 0;h5 < i2.length; h5++) {
          var s2 = i2.words[h5] | 0;
          a3 += s2 * 977, i2.words[h5] = a3 & 67108863, a3 = s2 * 64 + (a3 / 67108864 | 0);
        }
        return i2.words[i2.length - 1] === 0 && (i2.length--, i2.words[i2.length - 1] === 0 && i2.length--), i2;
      };
      function Re() {
        ye.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      o2(Re, ye);
      function Ee() {
        ye.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      o2(Ee, ye);
      function Ae() {
        ye.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      o2(Ae, ye), Ae.prototype.imulK = function(i2) {
        for (var a3 = 0, h5 = 0;h5 < i2.length; h5++) {
          var s2 = (i2.words[h5] | 0) * 19 + a3, u3 = s2 & 67108863;
          s2 >>>= 26, i2.words[h5] = u3, a3 = s2;
        }
        return a3 !== 0 && (i2.words[i2.length++] = a3), i2;
      }, f4._prime = function(i2) {
        if (we[i2])
          return we[i2];
        var a3;
        if (i2 === "k256")
          a3 = new xe;
        else if (i2 === "p224")
          a3 = new Re;
        else if (i2 === "p192")
          a3 = new Ee;
        else if (i2 === "p25519")
          a3 = new Ae;
        else
          throw new Error("Unknown prime " + i2);
        return we[i2] = a3, a3;
      };
      function P3(v3) {
        if (typeof v3 == "string") {
          var i2 = f4._prime(v3);
          this.m = i2.p, this.prime = i2;
        } else
          r2(v3.gtn(1), "modulus must be greater than 1"), this.m = v3, this.prime = null;
      }
      P3.prototype._verify1 = function(i2) {
        r2(i2.negative === 0, "red works only with positives"), r2(i2.red, "red works only with red numbers");
      }, P3.prototype._verify2 = function(i2, a3) {
        r2((i2.negative | a3.negative) === 0, "red works only with positives"), r2(i2.red && i2.red === a3.red, "red works only with red numbers");
      }, P3.prototype.imod = function(i2) {
        return this.prime ? this.prime.ireduce(i2)._forceRed(this) : i2.umod(this.m)._forceRed(this);
      }, P3.prototype.neg = function(i2) {
        return i2.isZero() ? i2.clone() : this.m.sub(i2)._forceRed(this);
      }, P3.prototype.add = function(i2, a3) {
        this._verify2(i2, a3);
        var h5 = i2.add(a3);
        return h5.cmp(this.m) >= 0 && h5.isub(this.m), h5._forceRed(this);
      }, P3.prototype.iadd = function(i2, a3) {
        this._verify2(i2, a3);
        var h5 = i2.iadd(a3);
        return h5.cmp(this.m) >= 0 && h5.isub(this.m), h5;
      }, P3.prototype.sub = function(i2, a3) {
        this._verify2(i2, a3);
        var h5 = i2.sub(a3);
        return h5.cmpn(0) < 0 && h5.iadd(this.m), h5._forceRed(this);
      }, P3.prototype.isub = function(i2, a3) {
        this._verify2(i2, a3);
        var h5 = i2.isub(a3);
        return h5.cmpn(0) < 0 && h5.iadd(this.m), h5;
      }, P3.prototype.shl = function(i2, a3) {
        return this._verify1(i2), this.imod(i2.ushln(a3));
      }, P3.prototype.imul = function(i2, a3) {
        return this._verify2(i2, a3), this.imod(i2.imul(a3));
      }, P3.prototype.mul = function(i2, a3) {
        return this._verify2(i2, a3), this.imod(i2.mul(a3));
      }, P3.prototype.isqr = function(i2) {
        return this.imul(i2, i2.clone());
      }, P3.prototype.sqr = function(i2) {
        return this.mul(i2, i2);
      }, P3.prototype.sqrt = function(i2) {
        if (i2.isZero())
          return i2.clone();
        var a3 = this.m.andln(3);
        if (r2(a3 % 2 === 1), a3 === 3) {
          var h5 = this.m.add(new f4(1)).iushrn(2);
          return this.pow(i2, h5);
        }
        for (var s2 = this.m.subn(1), u3 = 0;!s2.isZero() && s2.andln(1) === 0; )
          u3++, s2.iushrn(1);
        r2(!s2.isZero());
        var c = new f4(1).toRed(this), b3 = c.redNeg(), l4 = this.m.subn(1).iushrn(1), n4 = this.m.bitLength();
        for (n4 = new f4(2 * n4 * n4).toRed(this);this.pow(n4, l4).cmp(b3) !== 0; )
          n4.redIAdd(b3);
        for (var d2 = this.pow(n4, s2), w2 = this.pow(i2, s2.addn(1).iushrn(1)), g2 = this.pow(i2, s2), _3 = u3;g2.cmp(c) !== 0; ) {
          for (var A6 = g2, R3 = 0;A6.cmp(c) !== 0; R3++)
            A6 = A6.redSqr();
          r2(R3 < _3);
          var I2 = this.pow(d2, new f4(1).iushln(_3 - R3 - 1));
          w2 = w2.redMul(I2), d2 = I2.redSqr(), g2 = g2.redMul(d2), _3 = R3;
        }
        return w2;
      }, P3.prototype.invm = function(i2) {
        var a3 = i2._invmp(this.m);
        return a3.negative !== 0 ? (a3.negative = 0, this.imod(a3).redNeg()) : this.imod(a3);
      }, P3.prototype.pow = function(i2, a3) {
        if (a3.isZero())
          return new f4(1).toRed(this);
        if (a3.cmpn(1) === 0)
          return i2.clone();
        var h5 = 4, s2 = new Array(1 << h5);
        s2[0] = new f4(1).toRed(this), s2[1] = i2;
        for (var u3 = 2;u3 < s2.length; u3++)
          s2[u3] = this.mul(s2[u3 - 1], i2);
        var c = s2[0], b3 = 0, l4 = 0, n4 = a3.bitLength() % 26;
        for (n4 === 0 && (n4 = 26), u3 = a3.length - 1;u3 >= 0; u3--) {
          for (var d2 = a3.words[u3], w2 = n4 - 1;w2 >= 0; w2--) {
            var g2 = d2 >> w2 & 1;
            if (c !== s2[0] && (c = this.sqr(c)), g2 === 0 && b3 === 0) {
              l4 = 0;
              continue;
            }
            b3 <<= 1, b3 |= g2, l4++, !(l4 !== h5 && (u3 !== 0 || w2 !== 0)) && (c = this.mul(c, s2[b3]), l4 = 0, b3 = 0);
          }
          n4 = 26;
        }
        return c;
      }, P3.prototype.convertTo = function(i2) {
        var a3 = i2.umod(this.m);
        return a3 === i2 ? a3.clone() : a3;
      }, P3.prototype.convertFrom = function(i2) {
        var a3 = i2.clone();
        return a3.red = null, a3;
      }, f4.mont = function(i2) {
        return new Se(i2);
      };
      function Se(v3) {
        P3.call(this, v3), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new f4(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
      }
      o2(Se, P3), Se.prototype.convertTo = function(i2) {
        return this.imod(i2.ushln(this.shift));
      }, Se.prototype.convertFrom = function(i2) {
        var a3 = this.imod(i2.mul(this.rinv));
        return a3.red = null, a3;
      }, Se.prototype.imul = function(i2, a3) {
        if (i2.isZero() || a3.isZero())
          return i2.words[0] = 0, i2.length = 1, i2;
        var h5 = i2.imul(a3), s2 = h5.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u3 = h5.isub(s2).iushrn(this.shift), c = u3;
        return u3.cmp(this.m) >= 0 ? c = u3.isub(this.m) : u3.cmpn(0) < 0 && (c = u3.iadd(this.m)), c._forceRed(this);
      }, Se.prototype.mul = function(i2, a3) {
        if (i2.isZero() || a3.isZero())
          return new f4(0)._forceRed(this);
        var h5 = i2.mul(a3), s2 = h5.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u3 = h5.isub(s2).iushrn(this.shift), c = u3;
        return u3.cmp(this.m) >= 0 ? c = u3.isub(this.m) : u3.cmpn(0) < 0 && (c = u3.iadd(this.m)), c._forceRed(this);
      }, Se.prototype.invm = function(i2) {
        var a3 = this.imod(i2._invmp(this.m).mul(this.r2));
        return a3._forceRed(this);
      };
    })(typeof Ql > "u" || Ql, qy);
  });
  s02 = T3(($k, Iy) => {
    var o02 = Ut(), Ff = o02.Buffer, Er = {}, Ar;
    for (Ar in o02)
      !o02.hasOwnProperty(Ar) || Ar === "SlowBuffer" || Ar === "Buffer" || (Er[Ar] = o02[Ar]);
    var Uf = Er.Buffer = {};
    for (Ar in Ff)
      !Ff.hasOwnProperty(Ar) || Ar === "allocUnsafe" || Ar === "allocUnsafeSlow" || (Uf[Ar] = Ff[Ar]);
    Er.Buffer.prototype = Ff.prototype;
    (!Uf.from || Uf.from === Uint8Array.from) && (Uf.from = function(t2, e3, r2) {
      if (typeof t2 == "number")
        throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof t2);
      if (t2 && typeof t2.length > "u")
        throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof t2);
      return Ff(t2, e3, r2);
    });
    Uf.alloc || (Uf.alloc = function(t2, e3, r2) {
      if (typeof t2 != "number")
        throw new TypeError('The "size" argument must be of type number. Received type ' + typeof t2);
      if (t2 < 0 || t2 >= 2 * (1 << 30))
        throw new RangeError('The value "' + t2 + '" is invalid for option "size"');
      var o2 = Ff(t2);
      return !e3 || e3.length === 0 ? o2.fill(0) : typeof r2 == "string" ? o2.fill(e3, r2) : o2.fill(e3), o2;
    });
    if (!Er.kStringMaxLength)
      try {
        Er.kStringMaxLength = process.binding("buffer").kStringMaxLength;
      } catch {}
    Er.constants || (Er.constants = { MAX_LENGTH: Er.kMaxLength }, Er.kStringMaxLength && (Er.constants.MAX_STRING_LENGTH = Er.kStringMaxLength));
    Iy.exports = Er;
  });
  h02 = T3((Ty) => {
    var iB = Ie();
    function Rr(t2) {
      this._reporterState = { obj: null, path: [], options: t2 || {}, errors: [] };
    }
    Ty.Reporter = Rr;
    Rr.prototype.isError = function(e3) {
      return e3 instanceof zf;
    };
    Rr.prototype.save = function() {
      let e3 = this._reporterState;
      return { obj: e3.obj, pathLen: e3.path.length };
    };
    Rr.prototype.restore = function(e3) {
      let r2 = this._reporterState;
      r2.obj = e3.obj, r2.path = r2.path.slice(0, e3.pathLen);
    };
    Rr.prototype.enterKey = function(e3) {
      return this._reporterState.path.push(e3);
    };
    Rr.prototype.exitKey = function(e3) {
      let r2 = this._reporterState;
      r2.path = r2.path.slice(0, e3 - 1);
    };
    Rr.prototype.leaveKey = function(e3, r2, o2) {
      let f4 = this._reporterState;
      this.exitKey(e3), f4.obj !== null && (f4.obj[r2] = o2);
    };
    Rr.prototype.path = function() {
      return this._reporterState.path.join("/");
    };
    Rr.prototype.enterObject = function() {
      let e3 = this._reporterState, r2 = e3.obj;
      return e3.obj = {}, r2;
    };
    Rr.prototype.leaveObject = function(e3) {
      let r2 = this._reporterState, o2 = r2.obj;
      return r2.obj = e3, o2;
    };
    Rr.prototype.error = function(e3) {
      let r2, o2 = this._reporterState, f4 = e3 instanceof zf;
      if (f4 ? r2 = e3 : r2 = new zf(o2.path.map(function(p32) {
        return "[" + JSON.stringify(p32) + "]";
      }).join(""), e3.message || e3, e3.stack), !o2.options.partial)
        throw r2;
      return f4 || o2.errors.push(r2), r2;
    };
    Rr.prototype.wrapResult = function(e3) {
      let r2 = this._reporterState;
      return r2.options.partial ? { result: this.isError(e3) ? null : e3, errors: r2.errors } : e3;
    };
    function zf(t2, e3) {
      this.path = t2, this.rethrow(e3);
    }
    iB(zf, Error);
    zf.prototype.rethrow = function(e3) {
      if (this.message = e3 + " at: " + (this.path || "(shallow)"), Error.captureStackTrace && Error.captureStackTrace(this, zf), !this.stack)
        try {
          throw new Error(this.message);
        } catch (r2) {
          this.stack = r2.stack;
        }
      return this;
    };
  });
  Kf = T3((td) => {
    var nB = Ie(), u02 = h02().Reporter, Hf = s02().Buffer;
    function Br(t2, e3) {
      if (u02.call(this, e3), !Hf.isBuffer(t2)) {
        this.error("Input not Buffer");
        return;
      }
      this.base = t2, this.offset = 0, this.length = t2.length;
    }
    nB(Br, u02);
    td.DecoderBuffer = Br;
    Br.isDecoderBuffer = function(e3) {
      return e3 instanceof Br ? true : typeof e3 == "object" && Hf.isBuffer(e3.base) && e3.constructor.name === "DecoderBuffer" && typeof e3.offset == "number" && typeof e3.length == "number" && typeof e3.save == "function" && typeof e3.restore == "function" && typeof e3.isEmpty == "function" && typeof e3.readUInt8 == "function" && typeof e3.skip == "function" && typeof e3.raw == "function";
    };
    Br.prototype.save = function() {
      return { offset: this.offset, reporter: u02.prototype.save.call(this) };
    };
    Br.prototype.restore = function(e3) {
      let r2 = new Br(this.base);
      return r2.offset = e3.offset, r2.length = this.offset, this.offset = e3.offset, u02.prototype.restore.call(this, e3.reporter), r2;
    };
    Br.prototype.isEmpty = function() {
      return this.offset === this.length;
    };
    Br.prototype.readUInt8 = function(e3) {
      return this.offset + 1 <= this.length ? this.base.readUInt8(this.offset++, true) : this.error(e3 || "DecoderBuffer overrun");
    };
    Br.prototype.skip = function(e3, r2) {
      if (!(this.offset + e3 <= this.length))
        return this.error(r2 || "DecoderBuffer overrun");
      let o2 = new Br(this.base);
      return o2._reporterState = this._reporterState, o2.offset = this.offset, o2.length = this.offset + e3, this.offset += e3, o2;
    };
    Br.prototype.raw = function(e3) {
      return this.base.slice(e3 ? e3.offset : this.offset, this.length);
    };
    function Wf(t2, e3) {
      if (Array.isArray(t2))
        this.length = 0, this.value = t2.map(function(r2) {
          return Wf.isEncoderBuffer(r2) || (r2 = new Wf(r2, e3)), this.length += r2.length, r2;
        }, this);
      else if (typeof t2 == "number") {
        if (!(0 <= t2 && t2 <= 255))
          return e3.error("non-byte EncoderBuffer value");
        this.value = t2, this.length = 1;
      } else if (typeof t2 == "string")
        this.value = t2, this.length = Hf.byteLength(t2);
      else if (Hf.isBuffer(t2))
        this.value = t2, this.length = t2.length;
      else
        return e3.error("Unsupported type: " + typeof t2);
    }
    td.EncoderBuffer = Wf;
    Wf.isEncoderBuffer = function(e3) {
      return e3 instanceof Wf ? true : typeof e3 == "object" && e3.constructor.name === "EncoderBuffer" && typeof e3.length == "number" && typeof e3.join == "function";
    };
    Wf.prototype.join = function(e3, r2) {
      return e3 || (e3 = Hf.alloc(this.length)), r2 || (r2 = 0), this.length === 0 || (Array.isArray(this.value) ? this.value.forEach(function(o2) {
        o2.join(e3, r2), r2 += o2.length;
      }) : (typeof this.value == "number" ? e3[r2] = this.value : typeof this.value == "string" ? e3.write(this.value, r2) : Hf.isBuffer(this.value) && this.value.copy(e3, r2), r2 += this.length)), e3;
    };
  });
  l02 = T3((Xk, Ly) => {
    var fB = h02().Reporter, aB = Kf().EncoderBuffer, oB = Kf().DecoderBuffer, Jt = ar(), ky = ["seq", "seqof", "set", "setof", "objid", "bool", "gentime", "utctime", "null_", "enum", "int", "objDesc", "bitstr", "bmpstr", "charstr", "genstr", "graphstr", "ia5str", "iso646str", "numstr", "octstr", "printstr", "t61str", "unistr", "utf8str", "videostr"], sB = ["key", "obj", "use", "optional", "explicit", "implicit", "def", "choice", "any", "contains"].concat(ky), hB = ["_peekTag", "_decodeTag", "_use", "_decodeStr", "_decodeObjid", "_decodeTime", "_decodeNull", "_decodeInt", "_decodeBool", "_decodeList", "_encodeComposite", "_encodeStr", "_encodeObjid", "_encodeTime", "_encodeNull", "_encodeInt", "_encodeBool"];
    function Ue(t2, e3, r2) {
      let o2 = {};
      this._baseState = o2, o2.name = r2, o2.enc = t2, o2.parent = e3 || null, o2.children = null, o2.tag = null, o2.args = null, o2.reverseArgs = null, o2.choice = null, o2.optional = false, o2.any = false, o2.obj = false, o2.use = null, o2.useDecoder = null, o2.key = null, o2.default = null, o2.explicit = null, o2.implicit = null, o2.contains = null, o2.parent || (o2.children = [], this._wrap());
    }
    Ly.exports = Ue;
    var uB = ["enc", "parent", "children", "tag", "args", "reverseArgs", "choice", "optional", "any", "obj", "use", "alteredUse", "key", "default", "explicit", "implicit", "contains"];
    Ue.prototype.clone = function() {
      let e3 = this._baseState, r2 = {};
      uB.forEach(function(f4) {
        r2[f4] = e3[f4];
      });
      let o2 = new this.constructor(r2.parent);
      return o2._baseState = r2, o2;
    };
    Ue.prototype._wrap = function() {
      let e3 = this._baseState;
      sB.forEach(function(r2) {
        this[r2] = function() {
          let f4 = new this.constructor(this);
          return e3.children.push(f4), f4[r2].apply(f4, arguments);
        };
      }, this);
    };
    Ue.prototype._init = function(e3) {
      let r2 = this._baseState;
      Jt(r2.parent === null), e3.call(this), r2.children = r2.children.filter(function(o2) {
        return o2._baseState.parent === this;
      }, this), Jt.equal(r2.children.length, 1, "Root node can have only one child");
    };
    Ue.prototype._useArgs = function(e3) {
      let r2 = this._baseState, o2 = e3.filter(function(f4) {
        return f4 instanceof this.constructor;
      }, this);
      e3 = e3.filter(function(f4) {
        return !(f4 instanceof this.constructor);
      }, this), o2.length !== 0 && (Jt(r2.children === null), r2.children = o2, o2.forEach(function(f4) {
        f4._baseState.parent = this;
      }, this)), e3.length !== 0 && (Jt(r2.args === null), r2.args = e3, r2.reverseArgs = e3.map(function(f4) {
        if (typeof f4 != "object" || f4.constructor !== Object)
          return f4;
        let p32 = {};
        return Object.keys(f4).forEach(function(m4) {
          m4 == (m4 | 0) && (m4 |= 0);
          let y32 = f4[m4];
          p32[y32] = m4;
        }), p32;
      }));
    };
    hB.forEach(function(t2) {
      Ue.prototype[t2] = function() {
        let r2 = this._baseState;
        throw new Error(t2 + " not implemented for encoding: " + r2.enc);
      };
    });
    ky.forEach(function(t2) {
      Ue.prototype[t2] = function() {
        let r2 = this._baseState, o2 = Array.prototype.slice.call(arguments);
        return Jt(r2.tag === null), r2.tag = t2, this._useArgs(o2), this;
      };
    });
    Ue.prototype.use = function(e3) {
      Jt(e3);
      let r2 = this._baseState;
      return Jt(r2.use === null), r2.use = e3, this;
    };
    Ue.prototype.optional = function() {
      let e3 = this._baseState;
      return e3.optional = true, this;
    };
    Ue.prototype.def = function(e3) {
      let r2 = this._baseState;
      return Jt(r2.default === null), r2.default = e3, r2.optional = true, this;
    };
    Ue.prototype.explicit = function(e3) {
      let r2 = this._baseState;
      return Jt(r2.explicit === null && r2.implicit === null), r2.explicit = e3, this;
    };
    Ue.prototype.implicit = function(e3) {
      let r2 = this._baseState;
      return Jt(r2.explicit === null && r2.implicit === null), r2.implicit = e3, this;
    };
    Ue.prototype.obj = function() {
      let e3 = this._baseState, r2 = Array.prototype.slice.call(arguments);
      return e3.obj = true, r2.length !== 0 && this._useArgs(r2), this;
    };
    Ue.prototype.key = function(e3) {
      let r2 = this._baseState;
      return Jt(r2.key === null), r2.key = e3, this;
    };
    Ue.prototype.any = function() {
      let e3 = this._baseState;
      return e3.any = true, this;
    };
    Ue.prototype.choice = function(e3) {
      let r2 = this._baseState;
      return Jt(r2.choice === null), r2.choice = e3, this._useArgs(Object.keys(e3).map(function(o2) {
        return e3[o2];
      })), this;
    };
    Ue.prototype.contains = function(e3) {
      let r2 = this._baseState;
      return Jt(r2.use === null), r2.contains = e3, this;
    };
    Ue.prototype._decode = function(e3, r2) {
      let o2 = this._baseState;
      if (o2.parent === null)
        return e3.wrapResult(o2.children[0]._decode(e3, r2));
      let f4 = o2.default, p32 = true, m4 = null;
      if (o2.key !== null && (m4 = e3.enterKey(o2.key)), o2.optional) {
        let M3 = null;
        if (o2.explicit !== null ? M3 = o2.explicit : o2.implicit !== null ? M3 = o2.implicit : o2.tag !== null && (M3 = o2.tag), M3 === null && !o2.any) {
          let x32 = e3.save();
          try {
            o2.choice === null ? this._decodeGeneric(o2.tag, e3, r2) : this._decodeChoice(e3, r2), p32 = true;
          } catch {
            p32 = false;
          }
          e3.restore(x32);
        } else if (p32 = this._peekTag(e3, M3, o2.any), e3.isError(p32))
          return p32;
      }
      let y32;
      if (o2.obj && p32 && (y32 = e3.enterObject()), p32) {
        if (o2.explicit !== null) {
          let x32 = this._decodeTag(e3, o2.explicit);
          if (e3.isError(x32))
            return x32;
          e3 = x32;
        }
        let M3 = e3.offset;
        if (o2.use === null && o2.choice === null) {
          let x32;
          o2.any && (x32 = e3.save());
          let S3 = this._decodeTag(e3, o2.implicit !== null ? o2.implicit : o2.tag, o2.any);
          if (e3.isError(S3))
            return S3;
          o2.any ? f4 = e3.raw(x32) : e3 = S3;
        }
        if (r2 && r2.track && o2.tag !== null && r2.track(e3.path(), M3, e3.length, "tagged"), r2 && r2.track && o2.tag !== null && r2.track(e3.path(), e3.offset, e3.length, "content"), o2.any || (o2.choice === null ? f4 = this._decodeGeneric(o2.tag, e3, r2) : f4 = this._decodeChoice(e3, r2)), e3.isError(f4))
          return f4;
        if (!o2.any && o2.choice === null && o2.children !== null && o2.children.forEach(function(S3) {
          S3._decode(e3, r2);
        }), o2.contains && (o2.tag === "octstr" || o2.tag === "bitstr")) {
          let x32 = new oB(f4);
          f4 = this._getUse(o2.contains, e3._reporterState.obj)._decode(x32, r2);
        }
      }
      return o2.obj && p32 && (f4 = e3.leaveObject(y32)), o2.key !== null && (f4 !== null || p32 === true) ? e3.leaveKey(m4, o2.key, f4) : m4 !== null && e3.exitKey(m4), f4;
    };
    Ue.prototype._decodeGeneric = function(e3, r2, o2) {
      let f4 = this._baseState;
      return e3 === "seq" || e3 === "set" ? null : e3 === "seqof" || e3 === "setof" ? this._decodeList(r2, e3, f4.args[0], o2) : /str$/.test(e3) ? this._decodeStr(r2, e3, o2) : e3 === "objid" && f4.args ? this._decodeObjid(r2, f4.args[0], f4.args[1], o2) : e3 === "objid" ? this._decodeObjid(r2, null, null, o2) : e3 === "gentime" || e3 === "utctime" ? this._decodeTime(r2, e3, o2) : e3 === "null_" ? this._decodeNull(r2, o2) : e3 === "bool" ? this._decodeBool(r2, o2) : e3 === "objDesc" ? this._decodeStr(r2, e3, o2) : e3 === "int" || e3 === "enum" ? this._decodeInt(r2, f4.args && f4.args[0], o2) : f4.use !== null ? this._getUse(f4.use, r2._reporterState.obj)._decode(r2, o2) : r2.error("unknown tag: " + e3);
    };
    Ue.prototype._getUse = function(e3, r2) {
      let o2 = this._baseState;
      return o2.useDecoder = this._use(e3, r2), Jt(o2.useDecoder._baseState.parent === null), o2.useDecoder = o2.useDecoder._baseState.children[0], o2.implicit !== o2.useDecoder._baseState.implicit && (o2.useDecoder = o2.useDecoder.clone(), o2.useDecoder._baseState.implicit = o2.implicit), o2.useDecoder;
    };
    Ue.prototype._decodeChoice = function(e3, r2) {
      let o2 = this._baseState, f4 = null, p32 = false;
      return Object.keys(o2.choice).some(function(m4) {
        let y32 = e3.save(), M3 = o2.choice[m4];
        try {
          let x32 = M3._decode(e3, r2);
          if (e3.isError(x32))
            return false;
          f4 = { type: m4, value: x32 }, p32 = true;
        } catch {
          return e3.restore(y32), false;
        }
        return true;
      }, this), p32 ? f4 : e3.error("Choice not matched");
    };
    Ue.prototype._createEncoderBuffer = function(e3) {
      return new aB(e3, this.reporter);
    };
    Ue.prototype._encode = function(e3, r2, o2) {
      let f4 = this._baseState;
      if (f4.default !== null && f4.default === e3)
        return;
      let p32 = this._encodeValue(e3, r2, o2);
      if (p32 !== undefined && !this._skipDefault(p32, r2, o2))
        return p32;
    };
    Ue.prototype._encodeValue = function(e3, r2, o2) {
      let f4 = this._baseState;
      if (f4.parent === null)
        return f4.children[0]._encode(e3, r2 || new fB);
      let p32 = null;
      if (this.reporter = r2, f4.optional && e3 === undefined)
        if (f4.default !== null)
          e3 = f4.default;
        else
          return;
      let m4 = null, y32 = false;
      if (f4.any)
        p32 = this._createEncoderBuffer(e3);
      else if (f4.choice)
        p32 = this._encodeChoice(e3, r2);
      else if (f4.contains)
        m4 = this._getUse(f4.contains, o2)._encode(e3, r2), y32 = true;
      else if (f4.children)
        m4 = f4.children.map(function(M3) {
          if (M3._baseState.tag === "null_")
            return M3._encode(null, r2, e3);
          if (M3._baseState.key === null)
            return r2.error("Child should have a key");
          let x32 = r2.enterKey(M3._baseState.key);
          if (typeof e3 != "object")
            return r2.error("Child expected, but input is not object");
          let S3 = M3._encode(e3[M3._baseState.key], r2, e3);
          return r2.leaveKey(x32), S3;
        }, this).filter(function(M3) {
          return M3;
        }), m4 = this._createEncoderBuffer(m4);
      else if (f4.tag === "seqof" || f4.tag === "setof") {
        if (!(f4.args && f4.args.length === 1))
          return r2.error("Too many args for : " + f4.tag);
        if (!Array.isArray(e3))
          return r2.error("seqof/setof, but data is not Array");
        let M3 = this.clone();
        M3._baseState.implicit = null, m4 = this._createEncoderBuffer(e3.map(function(x32) {
          let S3 = this._baseState;
          return this._getUse(S3.args[0], e3)._encode(x32, r2);
        }, M3));
      } else
        f4.use !== null ? p32 = this._getUse(f4.use, o2)._encode(e3, r2) : (m4 = this._encodePrimitive(f4.tag, e3), y32 = true);
      if (!f4.any && f4.choice === null) {
        let M3 = f4.implicit !== null ? f4.implicit : f4.tag, x32 = f4.implicit === null ? "universal" : "context";
        M3 === null ? f4.use === null && r2.error("Tag could be omitted only for .use()") : f4.use === null && (p32 = this._encodeComposite(M3, y32, x32, m4));
      }
      return f4.explicit !== null && (p32 = this._encodeComposite(f4.explicit, false, "context", p32)), p32;
    };
    Ue.prototype._encodeChoice = function(e3, r2) {
      let o2 = this._baseState, f4 = o2.choice[e3.type];
      return f4 || Jt(false, e3.type + " not found in " + JSON.stringify(Object.keys(o2.choice))), f4._encode(e3.value, r2);
    };
    Ue.prototype._encodePrimitive = function(e3, r2) {
      let o2 = this._baseState;
      if (/str$/.test(e3))
        return this._encodeStr(r2, e3);
      if (e3 === "objid" && o2.args)
        return this._encodeObjid(r2, o2.reverseArgs[0], o2.args[1]);
      if (e3 === "objid")
        return this._encodeObjid(r2, null, null);
      if (e3 === "gentime" || e3 === "utctime")
        return this._encodeTime(r2, e3);
      if (e3 === "null_")
        return this._encodeNull();
      if (e3 === "int" || e3 === "enum")
        return this._encodeInt(r2, o2.args && o2.reverseArgs[0]);
      if (e3 === "bool")
        return this._encodeBool(r2);
      if (e3 === "objDesc")
        return this._encodeStr(r2, e3);
      throw new Error("Unsupported tag: " + e3);
    };
    Ue.prototype._isNumstr = function(e3) {
      return /^[0-9 ]*$/.test(e3);
    };
    Ue.prototype._isPrintstr = function(e3) {
      return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(e3);
    };
  });
  d02 = T3((Wn) => {
    function Ny(t2) {
      let e3 = {};
      return Object.keys(t2).forEach(function(r2) {
        (r2 | 0) == r2 && (r2 = r2 | 0);
        let o2 = t2[r2];
        e3[o2] = r2;
      }), e3;
    }
    Wn.tagClass = { 0: "universal", 1: "application", 2: "context", 3: "private" };
    Wn.tagClassByName = Ny(Wn.tagClass);
    Wn.tag = { 0: "end", 1: "bool", 2: "int", 3: "bitstr", 4: "octstr", 5: "null_", 6: "objid", 7: "objDesc", 8: "external", 9: "real", 10: "enum", 11: "embed", 12: "utf8str", 13: "relativeOid", 16: "seq", 17: "set", 18: "numstr", 19: "printstr", 20: "t61str", 21: "videostr", 22: "ia5str", 23: "utctime", 24: "gentime", 25: "graphstr", 26: "iso646str", 27: "genstr", 28: "unistr", 29: "charstr", 30: "bmpstr" };
    Wn.tagByName = Ny(Wn.tag);
  });
  id = T3((Qk, Cy) => {
    var lB = Ie(), Ii = s02().Buffer, Dy = l02(), rd = d02();
    function Py(t2) {
      this.enc = "der", this.name = t2.name, this.entity = t2, this.tree = new Ur, this.tree._init(t2.body);
    }
    Cy.exports = Py;
    Py.prototype.encode = function(e3, r2) {
      return this.tree._encode(e3, r2).join();
    };
    function Ur(t2) {
      Dy.call(this, "der", t2);
    }
    lB(Ur, Dy);
    Ur.prototype._encodeComposite = function(e3, r2, o2, f4) {
      let p32 = dB(e3, r2, o2, this.reporter);
      if (f4.length < 128) {
        let M3 = Ii.alloc(2);
        return M3[0] = p32, M3[1] = f4.length, this._createEncoderBuffer([M3, f4]);
      }
      let m4 = 1;
      for (let M3 = f4.length;M3 >= 256; M3 >>= 8)
        m4++;
      let y32 = Ii.alloc(1 + 1 + m4);
      y32[0] = p32, y32[1] = 128 | m4;
      for (let M3 = 1 + m4, x32 = f4.length;x32 > 0; M3--, x32 >>= 8)
        y32[M3] = x32 & 255;
      return this._createEncoderBuffer([y32, f4]);
    };
    Ur.prototype._encodeStr = function(e3, r2) {
      if (r2 === "bitstr")
        return this._createEncoderBuffer([e3.unused | 0, e3.data]);
      if (r2 === "bmpstr") {
        let o2 = Ii.alloc(e3.length * 2);
        for (let f4 = 0;f4 < e3.length; f4++)
          o2.writeUInt16BE(e3.charCodeAt(f4), f4 * 2);
        return this._createEncoderBuffer(o2);
      } else
        return r2 === "numstr" ? this._isNumstr(e3) ? this._createEncoderBuffer(e3) : this.reporter.error("Encoding of string type: numstr supports only digits and space") : r2 === "printstr" ? this._isPrintstr(e3) ? this._createEncoderBuffer(e3) : this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark") : /str$/.test(r2) ? this._createEncoderBuffer(e3) : r2 === "objDesc" ? this._createEncoderBuffer(e3) : this.reporter.error("Encoding of string type: " + r2 + " unsupported");
    };
    Ur.prototype._encodeObjid = function(e3, r2, o2) {
      if (typeof e3 == "string") {
        if (!r2)
          return this.reporter.error("string objid given, but no values map found");
        if (!r2.hasOwnProperty(e3))
          return this.reporter.error("objid not found in values map");
        e3 = r2[e3].split(/[\s.]+/g);
        for (let y32 = 0;y32 < e3.length; y32++)
          e3[y32] |= 0;
      } else if (Array.isArray(e3)) {
        e3 = e3.slice();
        for (let y32 = 0;y32 < e3.length; y32++)
          e3[y32] |= 0;
      }
      if (!Array.isArray(e3))
        return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(e3));
      if (!o2) {
        if (e3[1] >= 40)
          return this.reporter.error("Second objid identifier OOB");
        e3.splice(0, 2, e3[0] * 40 + e3[1]);
      }
      let f4 = 0;
      for (let y32 = 0;y32 < e3.length; y32++) {
        let M3 = e3[y32];
        for (f4++;M3 >= 128; M3 >>= 7)
          f4++;
      }
      let p32 = Ii.alloc(f4), m4 = p32.length - 1;
      for (let y32 = e3.length - 1;y32 >= 0; y32--) {
        let M3 = e3[y32];
        for (p32[m4--] = M3 & 127;(M3 >>= 7) > 0; )
          p32[m4--] = 128 | M3 & 127;
      }
      return this._createEncoderBuffer(p32);
    };
    function qr(t2) {
      return t2 < 10 ? "0" + t2 : t2;
    }
    Ur.prototype._encodeTime = function(e3, r2) {
      let o2, f4 = new Date(e3);
      return r2 === "gentime" ? o2 = [qr(f4.getUTCFullYear()), qr(f4.getUTCMonth() + 1), qr(f4.getUTCDate()), qr(f4.getUTCHours()), qr(f4.getUTCMinutes()), qr(f4.getUTCSeconds()), "Z"].join("") : r2 === "utctime" ? o2 = [qr(f4.getUTCFullYear() % 100), qr(f4.getUTCMonth() + 1), qr(f4.getUTCDate()), qr(f4.getUTCHours()), qr(f4.getUTCMinutes()), qr(f4.getUTCSeconds()), "Z"].join("") : this.reporter.error("Encoding " + r2 + " time is not supported yet"), this._encodeStr(o2, "octstr");
    };
    Ur.prototype._encodeNull = function() {
      return this._createEncoderBuffer("");
    };
    Ur.prototype._encodeInt = function(e3, r2) {
      if (typeof e3 == "string") {
        if (!r2)
          return this.reporter.error("String int or enum given, but no values map");
        if (!r2.hasOwnProperty(e3))
          return this.reporter.error("Values map doesn't contain: " + JSON.stringify(e3));
        e3 = r2[e3];
      }
      if (typeof e3 != "number" && !Ii.isBuffer(e3)) {
        let p32 = e3.toArray();
        !e3.sign && p32[0] & 128 && p32.unshift(0), e3 = Ii.from(p32);
      }
      if (Ii.isBuffer(e3)) {
        let p32 = e3.length;
        e3.length === 0 && p32++;
        let m4 = Ii.alloc(p32);
        return e3.copy(m4), e3.length === 0 && (m4[0] = 0), this._createEncoderBuffer(m4);
      }
      if (e3 < 128)
        return this._createEncoderBuffer(e3);
      if (e3 < 256)
        return this._createEncoderBuffer([0, e3]);
      let o2 = 1;
      for (let p32 = e3;p32 >= 256; p32 >>= 8)
        o2++;
      let f4 = new Array(o2);
      for (let p32 = f4.length - 1;p32 >= 0; p32--)
        f4[p32] = e3 & 255, e3 >>= 8;
      return f4[0] & 128 && f4.unshift(0), this._createEncoderBuffer(Ii.from(f4));
    };
    Ur.prototype._encodeBool = function(e3) {
      return this._createEncoderBuffer(e3 ? 255 : 0);
    };
    Ur.prototype._use = function(e3, r2) {
      return typeof e3 == "function" && (e3 = e3(r2)), e3._getEncoder("der").tree;
    };
    Ur.prototype._skipDefault = function(e3, r2, o2) {
      let f4 = this._baseState, p32;
      if (f4.default === null)
        return false;
      let m4 = e3.join();
      if (f4.defaultBuffer === undefined && (f4.defaultBuffer = this._encodeValue(f4.default, r2, o2).join()), m4.length !== f4.defaultBuffer.length)
        return false;
      for (p32 = 0;p32 < m4.length; p32++)
        if (m4[p32] !== f4.defaultBuffer[p32])
          return false;
      return true;
    };
    function dB(t2, e3, r2, o2) {
      let f4;
      if (t2 === "seqof" ? t2 = "seq" : t2 === "setof" && (t2 = "set"), rd.tagByName.hasOwnProperty(t2))
        f4 = rd.tagByName[t2];
      else if (typeof t2 == "number" && (t2 | 0) === t2)
        f4 = t2;
      else
        return o2.error("Unknown tag: " + t2);
      return f4 >= 31 ? o2.error("Multi-octet tag encoding unsupported") : (e3 || (f4 |= 32), f4 |= rd.tagClassByName[r2 || "universal"] << 6, f4);
    }
  });
  Fy = T3((eL, Oy) => {
    var cB = Ie(), nd = id();
    function fd(t2) {
      nd.call(this, t2), this.enc = "pem";
    }
    cB(fd, nd);
    Oy.exports = fd;
    fd.prototype.encode = function(e3, r2) {
      let f4 = nd.prototype.encode.call(this, e3).toString("base64"), p32 = ["-----BEGIN " + r2.label + "-----"];
      for (let m4 = 0;m4 < f4.length; m4 += 64)
        p32.push(f4.slice(m4, m4 + 64));
      return p32.push("-----END " + r2.label + "-----"), p32.join(`
`);
    };
  });
  ad = T3((zy) => {
    var Uy = zy;
    Uy.der = id();
    Uy.pem = Fy();
  });
  sd = T3((rL, Vy) => {
    var pB = Ie(), vB = ed(), Hy = Kf().DecoderBuffer, Ky = l02(), Wy = d02();
    function jy(t2) {
      this.enc = "der", this.name = t2.name, this.entity = t2, this.tree = new sr, this.tree._init(t2.body);
    }
    Vy.exports = jy;
    jy.prototype.decode = function(e3, r2) {
      return Hy.isDecoderBuffer(e3) || (e3 = new Hy(e3, r2)), this.tree._decode(e3, r2);
    };
    function sr(t2) {
      Ky.call(this, "der", t2);
    }
    pB(sr, Ky);
    sr.prototype._peekTag = function(e3, r2, o2) {
      if (e3.isEmpty())
        return false;
      let f4 = e3.save(), p32 = od(e3, 'Failed to peek tag: "' + r2 + '"');
      return e3.isError(p32) ? p32 : (e3.restore(f4), p32.tag === r2 || p32.tagStr === r2 || p32.tagStr + "of" === r2 || o2);
    };
    sr.prototype._decodeTag = function(e3, r2, o2) {
      let f4 = od(e3, 'Failed to decode tag of "' + r2 + '"');
      if (e3.isError(f4))
        return f4;
      let p32 = Zy(e3, f4.primitive, 'Failed to get length of "' + r2 + '"');
      if (e3.isError(p32))
        return p32;
      if (!o2 && f4.tag !== r2 && f4.tagStr !== r2 && f4.tagStr + "of" !== r2)
        return e3.error('Failed to match tag: "' + r2 + '"');
      if (f4.primitive || p32 !== null)
        return e3.skip(p32, 'Failed to match body of: "' + r2 + '"');
      let m4 = e3.save(), y32 = this._skipUntilEnd(e3, 'Failed to skip indefinite length body: "' + this.tag + '"');
      return e3.isError(y32) ? y32 : (p32 = e3.offset - m4.offset, e3.restore(m4), e3.skip(p32, 'Failed to match body of: "' + r2 + '"'));
    };
    sr.prototype._skipUntilEnd = function(e3, r2) {
      for (;; ) {
        let o2 = od(e3, r2);
        if (e3.isError(o2))
          return o2;
        let f4 = Zy(e3, o2.primitive, r2);
        if (e3.isError(f4))
          return f4;
        let p32;
        if (o2.primitive || f4 !== null ? p32 = e3.skip(f4) : p32 = this._skipUntilEnd(e3, r2), e3.isError(p32))
          return p32;
        if (o2.tagStr === "end")
          break;
      }
    };
    sr.prototype._decodeList = function(e3, r2, o2, f4) {
      let p32 = [];
      for (;!e3.isEmpty(); ) {
        let m4 = this._peekTag(e3, "end");
        if (e3.isError(m4))
          return m4;
        let y32 = o2.decode(e3, "der", f4);
        if (e3.isError(y32) && m4)
          break;
        p32.push(y32);
      }
      return p32;
    };
    sr.prototype._decodeStr = function(e3, r2) {
      if (r2 === "bitstr") {
        let o2 = e3.readUInt8();
        return e3.isError(o2) ? o2 : { unused: o2, data: e3.raw() };
      } else if (r2 === "bmpstr") {
        let o2 = e3.raw();
        if (o2.length % 2 === 1)
          return e3.error("Decoding of string type: bmpstr length mismatch");
        let f4 = "";
        for (let p32 = 0;p32 < o2.length / 2; p32++)
          f4 += String.fromCharCode(o2.readUInt16BE(p32 * 2));
        return f4;
      } else if (r2 === "numstr") {
        let o2 = e3.raw().toString("ascii");
        return this._isNumstr(o2) ? o2 : e3.error("Decoding of string type: numstr unsupported characters");
      } else {
        if (r2 === "octstr")
          return e3.raw();
        if (r2 === "objDesc")
          return e3.raw();
        if (r2 === "printstr") {
          let o2 = e3.raw().toString("ascii");
          return this._isPrintstr(o2) ? o2 : e3.error("Decoding of string type: printstr unsupported characters");
        } else
          return /str$/.test(r2) ? e3.raw().toString() : e3.error("Decoding of string type: " + r2 + " unsupported");
      }
    };
    sr.prototype._decodeObjid = function(e3, r2, o2) {
      let f4, p32 = [], m4 = 0, y32 = 0;
      for (;!e3.isEmpty(); )
        y32 = e3.readUInt8(), m4 <<= 7, m4 |= y32 & 127, (y32 & 128) === 0 && (p32.push(m4), m4 = 0);
      y32 & 128 && p32.push(m4);
      let M3 = p32[0] / 40 | 0, x32 = p32[0] % 40;
      if (o2 ? f4 = p32 : f4 = [M3, x32].concat(p32.slice(1)), r2) {
        let S3 = r2[f4.join(" ")];
        S3 === undefined && (S3 = r2[f4.join(".")]), S3 !== undefined && (f4 = S3);
      }
      return f4;
    };
    sr.prototype._decodeTime = function(e3, r2) {
      let o2 = e3.raw().toString(), f4, p32, m4, y32, M3, x32;
      if (r2 === "gentime")
        f4 = o2.slice(0, 4) | 0, p32 = o2.slice(4, 6) | 0, m4 = o2.slice(6, 8) | 0, y32 = o2.slice(8, 10) | 0, M3 = o2.slice(10, 12) | 0, x32 = o2.slice(12, 14) | 0;
      else if (r2 === "utctime")
        f4 = o2.slice(0, 2) | 0, p32 = o2.slice(2, 4) | 0, m4 = o2.slice(4, 6) | 0, y32 = o2.slice(6, 8) | 0, M3 = o2.slice(8, 10) | 0, x32 = o2.slice(10, 12) | 0, f4 < 70 ? f4 = 2000 + f4 : f4 = 1900 + f4;
      else
        return e3.error("Decoding " + r2 + " time is not supported yet");
      return Date.UTC(f4, p32 - 1, m4, y32, M3, x32, 0);
    };
    sr.prototype._decodeNull = function() {
      return null;
    };
    sr.prototype._decodeBool = function(e3) {
      let r2 = e3.readUInt8();
      return e3.isError(r2) ? r2 : r2 !== 0;
    };
    sr.prototype._decodeInt = function(e3, r2) {
      let o2 = e3.raw(), f4 = new vB(o2);
      return r2 && (f4 = r2[f4.toString(10)] || f4), f4;
    };
    sr.prototype._use = function(e3, r2) {
      return typeof e3 == "function" && (e3 = e3(r2)), e3._getDecoder("der").tree;
    };
    function od(t2, e3) {
      let r2 = t2.readUInt8(e3);
      if (t2.isError(r2))
        return r2;
      let o2 = Wy.tagClass[r2 >> 6], f4 = (r2 & 32) === 0;
      if ((r2 & 31) === 31) {
        let m4 = r2;
        for (r2 = 0;(m4 & 128) === 128; ) {
          if (m4 = t2.readUInt8(e3), t2.isError(m4))
            return m4;
          r2 <<= 7, r2 |= m4 & 127;
        }
      } else
        r2 &= 31;
      let p32 = Wy.tag[r2];
      return { cls: o2, primitive: f4, tag: r2, tagStr: p32 };
    }
    function Zy(t2, e3, r2) {
      let o2 = t2.readUInt8(r2);
      if (t2.isError(o2))
        return o2;
      if (!e3 && o2 === 128)
        return null;
      if ((o2 & 128) === 0)
        return o2;
      let f4 = o2 & 127;
      if (f4 > 4)
        return t2.error("length octect is too long");
      o2 = 0;
      for (let p32 = 0;p32 < f4; p32++) {
        o2 <<= 8;
        let m4 = t2.readUInt8(r2);
        if (t2.isError(m4))
          return m4;
        o2 |= m4;
      }
      return o2;
    }
  });
  Gy = T3((iL, $y) => {
    var bB = Ie(), mB = s02().Buffer, hd = sd();
    function ud(t2) {
      hd.call(this, t2), this.enc = "pem";
    }
    bB(ud, hd);
    $y.exports = ud;
    ud.prototype.decode = function(e3, r2) {
      let o2 = e3.toString().split(/[\r\n]+/g), f4 = r2.label.toUpperCase(), p32 = /^-----(BEGIN|END) ([^-]+)-----$/, m4 = -1, y32 = -1;
      for (let S3 = 0;S3 < o2.length; S3++) {
        let E3 = o2[S3].match(p32);
        if (E3 !== null && E3[2] === f4)
          if (m4 === -1) {
            if (E3[1] !== "BEGIN")
              break;
            m4 = S3;
          } else {
            if (E3[1] !== "END")
              break;
            y32 = S3;
            break;
          }
      }
      if (m4 === -1 || y32 === -1)
        throw new Error("PEM section not found for: " + f4);
      let M3 = o2.slice(m4 + 1, y32).join("");
      M3.replace(/[^a-z0-9+/=]+/gi, "");
      let x32 = mB.from(M3, "base64");
      return hd.prototype.decode.call(this, x32, r2);
    };
  });
  ld = T3((Xy) => {
    var Yy = Xy;
    Yy.der = sd();
    Yy.pem = Gy();
  });
  Qy = T3((Jy) => {
    var gB = ad(), yB = ld(), wB = Ie(), MB = Jy;
    MB.define = function(e3, r2) {
      return new jf(e3, r2);
    };
    function jf(t2, e3) {
      this.name = t2, this.body = e3, this.decoders = {}, this.encoders = {};
    }
    jf.prototype._createNamed = function(e3) {
      let r2 = this.name;
      function o2(f4) {
        this._initNamed(f4, r2);
      }
      return wB(o2, e3), o2.prototype._initNamed = function(p32, m4) {
        e3.call(this, p32, m4);
      }, new o2(this);
    };
    jf.prototype._getDecoder = function(e3) {
      return e3 = e3 || "der", this.decoders.hasOwnProperty(e3) || (this.decoders[e3] = this._createNamed(yB[e3])), this.decoders[e3];
    };
    jf.prototype.decode = function(e3, r2, o2) {
      return this._getDecoder(r2).decode(e3, o2);
    };
    jf.prototype._getEncoder = function(e3) {
      return e3 = e3 || "der", this.encoders.hasOwnProperty(e3) || (this.encoders[e3] = this._createNamed(gB[e3])), this.encoders[e3];
    };
    jf.prototype.encode = function(e3, r2, o2) {
      return this._getEncoder(r2).encode(e3, o2);
    };
  });
  t3 = T3((e3) => {
    var c02 = e3;
    c02.Reporter = h02().Reporter;
    c02.DecoderBuffer = Kf().DecoderBuffer;
    c02.EncoderBuffer = Kf().EncoderBuffer;
    c02.Node = l02();
  });
  n32 = T3((i3) => {
    var r3 = i3;
    r3._reverse = function(e3) {
      let r2 = {};
      return Object.keys(e3).forEach(function(o2) {
        (o2 | 0) == o2 && (o2 = o2 | 0);
        let f4 = e3[o2];
        r2[f4] = o2;
      }), r2;
    };
    r3.der = d02();
  });
  dd = T3((f32) => {
    var Zf = f32;
    Zf.bignum = ed();
    Zf.define = Qy().define;
    Zf.base = t3();
    Zf.constants = n32();
    Zf.decoders = ld();
    Zf.encoders = ad();
  });
  h32 = T3((hL, s3) => {
    var zr = dd(), a3 = zr.define("Time", function() {
      this.choice({ utcTime: this.utctime(), generalTime: this.gentime() });
    }), _B = zr.define("AttributeTypeValue", function() {
      this.seq().obj(this.key("type").objid(), this.key("value").any());
    }), cd = zr.define("AlgorithmIdentifier", function() {
      this.seq().obj(this.key("algorithm").objid(), this.key("parameters").optional(), this.key("curve").objid().optional());
    }), xB = zr.define("SubjectPublicKeyInfo", function() {
      this.seq().obj(this.key("algorithm").use(cd), this.key("subjectPublicKey").bitstr());
    }), SB = zr.define("RelativeDistinguishedName", function() {
      this.setof(_B);
    }), EB = zr.define("RDNSequence", function() {
      this.seqof(SB);
    }), o3 = zr.define("Name", function() {
      this.choice({ rdnSequence: this.use(EB) });
    }), AB = zr.define("Validity", function() {
      this.seq().obj(this.key("notBefore").use(a3), this.key("notAfter").use(a3));
    }), RB = zr.define("Extension", function() {
      this.seq().obj(this.key("extnID").objid(), this.key("critical").bool().def(false), this.key("extnValue").octstr());
    }), BB = zr.define("TBSCertificate", function() {
      this.seq().obj(this.key("version").explicit(0).int().optional(), this.key("serialNumber").int(), this.key("signature").use(cd), this.key("issuer").use(o3), this.key("validity").use(AB), this.key("subject").use(o3), this.key("subjectPublicKeyInfo").use(xB), this.key("issuerUniqueID").implicit(1).bitstr().optional(), this.key("subjectUniqueID").implicit(2).bitstr().optional(), this.key("extensions").explicit(3).seqof(RB).optional());
    }), qB = zr.define("X509Certificate", function() {
      this.seq().obj(this.key("tbsCertificate").use(BB), this.key("signatureAlgorithm").use(cd), this.key("signatureValue").bitstr());
    });
    s3.exports = qB;
  });
  l32 = T3((Wr) => {
    var Hr = dd();
    Wr.certificate = h32();
    var IB = Hr.define("RSAPrivateKey", function() {
      this.seq().obj(this.key("version").int(), this.key("modulus").int(), this.key("publicExponent").int(), this.key("privateExponent").int(), this.key("prime1").int(), this.key("prime2").int(), this.key("exponent1").int(), this.key("exponent2").int(), this.key("coefficient").int());
    });
    Wr.RSAPrivateKey = IB;
    var TB = Hr.define("RSAPublicKey", function() {
      this.seq().obj(this.key("modulus").int(), this.key("publicExponent").int());
    });
    Wr.RSAPublicKey = TB;
    var kB = Hr.define("SubjectPublicKeyInfo", function() {
      this.seq().obj(this.key("algorithm").use(u3), this.key("subjectPublicKey").bitstr());
    });
    Wr.PublicKey = kB;
    var u3 = Hr.define("AlgorithmIdentifier", function() {
      this.seq().obj(this.key("algorithm").objid(), this.key("none").null_().optional(), this.key("curve").objid().optional(), this.key("params").seq().obj(this.key("p").int(), this.key("q").int(), this.key("g").int()).optional());
    }), LB = Hr.define("PrivateKeyInfo", function() {
      this.seq().obj(this.key("version").int(), this.key("algorithm").use(u3), this.key("subjectPrivateKey").octstr());
    });
    Wr.PrivateKey = LB;
    var NB = Hr.define("EncryptedPrivateKeyInfo", function() {
      this.seq().obj(this.key("algorithm").seq().obj(this.key("id").objid(), this.key("decrypt").seq().obj(this.key("kde").seq().obj(this.key("id").objid(), this.key("kdeparams").seq().obj(this.key("salt").octstr(), this.key("iters").int())), this.key("cipher").seq().obj(this.key("algo").objid(), this.key("iv").octstr()))), this.key("subjectPrivateKey").octstr());
    });
    Wr.EncryptedPrivateKey = NB;
    var DB = Hr.define("DSAPrivateKey", function() {
      this.seq().obj(this.key("version").int(), this.key("p").int(), this.key("q").int(), this.key("g").int(), this.key("pub_key").int(), this.key("priv_key").int());
    });
    Wr.DSAPrivateKey = DB;
    Wr.DSAparam = Hr.define("DSAparam", function() {
      this.int();
    });
    var PB = Hr.define("ECPrivateKey", function() {
      this.seq().obj(this.key("version").int(), this.key("privateKey").octstr(), this.key("parameters").optional().explicit(0).use(CB), this.key("publicKey").optional().explicit(1).bitstr());
    });
    Wr.ECPrivateKey = PB;
    var CB = Hr.define("ECParameters", function() {
      this.choice({ namedCurve: this.objid() });
    });
    Wr.signature = Hr.define("signature", function() {
      this.seq().obj(this.key("r").int(), this.key("s").int());
    });
  });
  d3 = T3((lL, OB) => {
    OB.exports = { "2.16.840.1.101.3.4.1.1": "aes-128-ecb", "2.16.840.1.101.3.4.1.2": "aes-128-cbc", "2.16.840.1.101.3.4.1.3": "aes-128-ofb", "2.16.840.1.101.3.4.1.4": "aes-128-cfb", "2.16.840.1.101.3.4.1.21": "aes-192-ecb", "2.16.840.1.101.3.4.1.22": "aes-192-cbc", "2.16.840.1.101.3.4.1.23": "aes-192-ofb", "2.16.840.1.101.3.4.1.24": "aes-192-cfb", "2.16.840.1.101.3.4.1.41": "aes-256-ecb", "2.16.840.1.101.3.4.1.42": "aes-256-cbc", "2.16.840.1.101.3.4.1.43": "aes-256-ofb", "2.16.840.1.101.3.4.1.44": "aes-256-cfb" };
  });
  p3 = T3((dL, c3) => {
    var FB = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m, UB = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m, zB = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m, HB = Ba(), WB = Ss(), p02 = Te().Buffer;
    c3.exports = function(t2, e3) {
      var r2 = t2.toString(), o2 = r2.match(FB), f4;
      if (o2) {
        var m4 = "aes" + o2[1], y32 = p02.from(o2[2], "hex"), M3 = p02.from(o2[3].replace(/[\r\n]/g, ""), "base64"), x32 = HB(e3, y32.slice(0, 8), parseInt(o2[1], 10)).key, S3 = [], E3 = WB.createDecipheriv(m4, x32, y32);
        S3.push(E3.update(M3)), S3.push(E3.final()), f4 = p02.concat(S3);
      } else {
        var p4 = r2.match(zB);
        f4 = p02.from(p4[2].replace(/[\r\n]/g, ""), "base64");
      }
      var B5 = r2.match(UB)[1];
      return { tag: B5, data: f4 };
    };
  });
  Ha = T3((cL, b3) => {
    var nr = l32(), KB = d3(), jB = p3(), ZB = Ss(), VB = qu(), pd = Te().Buffer;
    b3.exports = v3;
    function v3(t2) {
      var e3;
      typeof t2 == "object" && !pd.isBuffer(t2) && (e3 = t2.passphrase, t2 = t2.key), typeof t2 == "string" && (t2 = pd.from(t2));
      var r2 = jB(t2, e3), o2 = r2.tag, f4 = r2.data, p4, m4;
      switch (o2) {
        case "CERTIFICATE":
          m4 = nr.certificate.decode(f4, "der").tbsCertificate.subjectPublicKeyInfo;
        case "PUBLIC KEY":
          switch (m4 || (m4 = nr.PublicKey.decode(f4, "der")), p4 = m4.algorithm.algorithm.join("."), p4) {
            case "1.2.840.113549.1.1.1":
              return nr.RSAPublicKey.decode(m4.subjectPublicKey.data, "der");
            case "1.2.840.10045.2.1":
              return m4.subjectPrivateKey = m4.subjectPublicKey, { type: "ec", data: m4 };
            case "1.2.840.10040.4.1":
              return m4.algorithm.params.pub_key = nr.DSAparam.decode(m4.subjectPublicKey.data, "der"), { type: "dsa", data: m4.algorithm.params };
            default:
              throw new Error("unknown key id " + p4);
          }
        case "ENCRYPTED PRIVATE KEY":
          f4 = nr.EncryptedPrivateKey.decode(f4, "der"), f4 = $B(f4, e3);
        case "PRIVATE KEY":
          switch (m4 = nr.PrivateKey.decode(f4, "der"), p4 = m4.algorithm.algorithm.join("."), p4) {
            case "1.2.840.113549.1.1.1":
              return nr.RSAPrivateKey.decode(m4.subjectPrivateKey, "der");
            case "1.2.840.10045.2.1":
              return { curve: m4.algorithm.curve, privateKey: nr.ECPrivateKey.decode(m4.subjectPrivateKey, "der").privateKey };
            case "1.2.840.10040.4.1":
              return m4.algorithm.params.priv_key = nr.DSAparam.decode(m4.subjectPrivateKey, "der"), { type: "dsa", params: m4.algorithm.params };
            default:
              throw new Error("unknown key id " + p4);
          }
        case "RSA PUBLIC KEY":
          return nr.RSAPublicKey.decode(f4, "der");
        case "RSA PRIVATE KEY":
          return nr.RSAPrivateKey.decode(f4, "der");
        case "DSA PRIVATE KEY":
          return { type: "dsa", params: nr.DSAPrivateKey.decode(f4, "der") };
        case "EC PRIVATE KEY":
          return f4 = nr.ECPrivateKey.decode(f4, "der"), { curve: f4.parameters.value, privateKey: f4.privateKey };
        default:
          throw new Error("unknown key type " + o2);
      }
    }
    v3.signature = nr.signature;
    function $B(t2, e3) {
      var r2 = t2.algorithm.decrypt.kde.kdeparams.salt, o2 = parseInt(t2.algorithm.decrypt.kde.kdeparams.iters.toString(), 10), f4 = KB[t2.algorithm.decrypt.cipher.algo.join(".")], p4 = t2.algorithm.decrypt.cipher.iv, m4 = t2.subjectPrivateKey, y32 = parseInt(f4.split("-")[1], 10) / 8, M3 = VB.pbkdf2Sync(e3, r2, o2, y32, "sha1"), x32 = ZB.createDecipheriv(f4, M3, p4), S3 = [];
      return S3.push(x32.update(m4)), S3.push(x32.final()), pd.concat(S3);
    }
  });
  vd = T3((pL, GB) => {
    GB.exports = { "1.3.132.0.10": "secp256k1", "1.3.132.0.33": "p224", "1.2.840.10045.3.1.1": "p192", "1.2.840.10045.3.1.7": "p256", "1.3.132.0.34": "p384", "1.3.132.0.35": "p521" };
  });
  y3 = T3((vL, b02) => {
    var Yt = Te().Buffer, Kn = yu(), YB = Ws(), XB = a02().ec, v02 = Hs(), JB = Ha(), QB = vd();
    function eq(t2, e3, r2, o2, f4) {
      var p4 = JB(e3);
      if (p4.curve) {
        if (o2 !== "ecdsa" && o2 !== "ecdsa/rsa")
          throw new Error("wrong private key type");
        return tq(t2, p4);
      } else if (p4.type === "dsa") {
        if (o2 !== "dsa")
          throw new Error("wrong private key type");
        return rq(t2, p4, r2);
      } else if (o2 !== "rsa" && o2 !== "ecdsa/rsa")
        throw new Error("wrong private key type");
      t2 = Yt.concat([f4, t2]);
      for (var m4 = p4.modulus.byteLength(), y4 = [0, 1];t2.length + y4.length + 1 < m4; )
        y4.push(255);
      y4.push(0);
      for (var M3 = -1;++M3 < t2.length; )
        y4.push(t2[M3]);
      var x32 = YB(y4, p4);
      return x32;
    }
    function tq(t2, e3) {
      var r2 = QB[e3.curve.join(".")];
      if (!r2)
        throw new Error("unknown curve " + e3.curve.join("."));
      var o2 = new XB(r2), f4 = o2.keyFromPrivate(e3.privateKey), p4 = f4.sign(t2);
      return Yt.from(p4.toDER());
    }
    function rq(t2, e3, r2) {
      for (var o2 = e3.params.priv_key, f4 = e3.params.p, p4 = e3.params.q, m4 = e3.params.g, y4 = new v02(0), M3, x32 = bd(t2, p4).mod(p4), S3 = false, E3 = m32(o2, p4, t2, r2);S3 === false; )
        M3 = g3(p4, E3, r2), y4 = fq(m4, M3, f4, p4), S3 = M3.invm(p4).imul(x32.add(o2.mul(y4))).mod(p4), S3.cmpn(0) === 0 && (S3 = false, y4 = new v02(0));
      return iq(y4, S3);
    }
    function iq(t2, e3) {
      t2 = t2.toArray(), e3 = e3.toArray(), t2[0] & 128 && (t2 = [0].concat(t2)), e3[0] & 128 && (e3 = [0].concat(e3));
      var r2 = t2.length + e3.length + 4, o2 = [48, r2, 2, t2.length];
      return o2 = o2.concat(t2, [2, e3.length], e3), Yt.from(o2);
    }
    function m32(t2, e3, r2, o2) {
      if (t2 = Yt.from(t2.toArray()), t2.length < e3.byteLength()) {
        var f4 = Yt.alloc(e3.byteLength() - t2.length);
        t2 = Yt.concat([f4, t2]);
      }
      var p4 = r2.length, m4 = nq(r2, e3), y4 = Yt.alloc(p4);
      y4.fill(1);
      var M3 = Yt.alloc(p4);
      return M3 = Kn(o2, M3).update(y4).update(Yt.from([0])).update(t2).update(m4).digest(), y4 = Kn(o2, M3).update(y4).digest(), M3 = Kn(o2, M3).update(y4).update(Yt.from([1])).update(t2).update(m4).digest(), y4 = Kn(o2, M3).update(y4).digest(), { k: M3, v: y4 };
    }
    function bd(t2, e3) {
      var r2 = new v02(t2), o2 = (t2.length << 3) - e3.bitLength();
      return o2 > 0 && r2.ishrn(o2), r2;
    }
    function nq(t2, e3) {
      t2 = bd(t2, e3), t2 = t2.mod(e3);
      var r2 = Yt.from(t2.toArray());
      if (r2.length < e3.byteLength()) {
        var o2 = Yt.alloc(e3.byteLength() - r2.length);
        r2 = Yt.concat([o2, r2]);
      }
      return r2;
    }
    function g3(t2, e3, r2) {
      var o2, f4;
      do {
        for (o2 = Yt.alloc(0);o2.length * 8 < t2.bitLength(); )
          e3.v = Kn(r2, e3.k).update(e3.v).digest(), o2 = Yt.concat([o2, e3.v]);
        f4 = bd(o2, t2), e3.k = Kn(r2, e3.k).update(e3.v).update(Yt.from([0])).digest(), e3.v = Kn(r2, e3.k).update(e3.v).digest();
      } while (f4.cmp(t2) !== -1);
      return f4;
    }
    function fq(t2, e3, r2, o2) {
      return t2.toRed(v02.mont(r2)).redPow(e3).fromRed().mod(o2);
    }
    b02.exports = eq;
    b02.exports.getKey = m32;
    b02.exports.makeKey = g3;
  });
  x3 = T3((bL, _3) => {
    var md = Te().Buffer, Wa = Hs(), aq = a02().ec, M3 = Ha(), oq = vd();
    function sq(t2, e3, r2, o2, f4) {
      var p4 = M3(r2);
      if (p4.type === "ec") {
        if (o2 !== "ecdsa" && o2 !== "ecdsa/rsa")
          throw new Error("wrong public key type");
        return hq(t2, e3, p4);
      } else if (p4.type === "dsa") {
        if (o2 !== "dsa")
          throw new Error("wrong public key type");
        return uq(t2, e3, p4);
      } else if (o2 !== "rsa" && o2 !== "ecdsa/rsa")
        throw new Error("wrong public key type");
      e3 = md.concat([f4, e3]);
      for (var m4 = p4.modulus.byteLength(), y4 = [1], M4 = 0;e3.length + y4.length + 2 < m4; )
        y4.push(255), M4++;
      y4.push(0);
      for (var x4 = -1;++x4 < e3.length; )
        y4.push(e3[x4]);
      y4 = md.from(y4);
      var S3 = Wa.mont(p4.modulus);
      t2 = new Wa(t2).toRed(S3), t2 = t2.redPow(new Wa(p4.publicExponent)), t2 = md.from(t2.fromRed().toArray());
      var E3 = M4 < 8 ? 1 : 0;
      for (m4 = Math.min(t2.length, y4.length), t2.length !== y4.length && (E3 = 1), x4 = -1;++x4 < m4; )
        E3 |= t2[x4] ^ y4[x4];
      return E3 === 0;
    }
    function hq(t2, e3, r2) {
      var o2 = oq[r2.data.algorithm.curve.join(".")];
      if (!o2)
        throw new Error("unknown curve " + r2.data.algorithm.curve.join("."));
      var f4 = new aq(o2), p4 = r2.data.subjectPrivateKey.data;
      return f4.verify(e3, t2, p4);
    }
    function uq(t2, e3, r2) {
      var o2 = r2.data.p, f4 = r2.data.q, p4 = r2.data.g, m4 = r2.data.pub_key, y4 = M3.signature.decode(t2, "der"), M4 = y4.s, x4 = y4.r;
      w3(M4, f4), w3(x4, f4);
      var S3 = Wa.mont(o2), E3 = M4.invm(f4), B5 = p4.toRed(S3).redPow(new Wa(e3).mul(E3).mod(f4)).fromRed().mul(m4.toRed(S3).redPow(x4.mul(E3).mod(f4)).fromRed()).mod(o2).mod(f4);
      return B5.cmp(x4) === 0;
    }
    function w3(t2, e3) {
      if (t2.cmpn(0) <= 0)
        throw new Error("invalid sig");
      if (t2.cmp(e3) >= e3)
        throw new Error("invalid sig");
    }
    _3.exports = sq;
  });
  q3 = T3((mL, B32) => {
    var m02 = Te().Buffer, A32 = bf(), g02 = e2(), R3 = Ie(), lq = y3(), dq = x3(), jn = wu();
    Object.keys(jn).forEach(function(t2) {
      jn[t2].id = m02.from(jn[t2].id, "hex"), jn[t2.toLowerCase()] = jn[t2];
    });
    function Ka(t2) {
      g02.Writable.call(this);
      var e3 = jn[t2];
      if (!e3)
        throw new Error("Unknown message digest");
      this._hashType = e3.hash, this._hash = A32(e3.hash), this._tag = e3.id, this._signType = e3.sign;
    }
    R3(Ka, g02.Writable);
    Ka.prototype._write = function(e3, r2, o2) {
      this._hash.update(e3), o2();
    };
    Ka.prototype.update = function(e3, r2) {
      return typeof e3 == "string" && (e3 = m02.from(e3, r2)), this._hash.update(e3), this;
    };
    Ka.prototype.sign = function(e3, r2) {
      this.end();
      var o2 = this._hash.digest(), f4 = lq(o2, e3, this._hashType, this._signType, this._tag);
      return r2 ? f4.toString(r2) : f4;
    };
    function ja(t2) {
      g02.Writable.call(this);
      var e3 = jn[t2];
      if (!e3)
        throw new Error("Unknown message digest");
      this._hash = A32(e3.hash), this._tag = e3.id, this._signType = e3.sign;
    }
    R3(ja, g02.Writable);
    ja.prototype._write = function(e3, r2, o2) {
      this._hash.update(e3), o2();
    };
    ja.prototype.update = function(e3, r2) {
      return typeof e3 == "string" && (e3 = m02.from(e3, r2)), this._hash.update(e3), this;
    };
    ja.prototype.verify = function(e3, r2, o2) {
      typeof r2 == "string" && (r2 = m02.from(r2, o2)), this.end();
      var f4 = this._hash.digest();
      return dq(r2, f4, e3, this._signType, this._tag);
    };
    function S3(t2) {
      return new Ka(t2);
    }
    function E3(t2) {
      return new ja(t2);
    }
    B32.exports = { Sign: S3, Verify: E3, createSign: S3, createVerify: E3 };
  });
  T32 = T3((I3, gd) => {
    (function(t2, e3) {
      function r2(v3, i2) {
        if (!v3)
          throw new Error(i2 || "Assertion failed");
      }
      function o2(v3, i2) {
        v3.super_ = i2;
        var a3 = function() {};
        a3.prototype = i2.prototype, v3.prototype = new a3, v3.prototype.constructor = v3;
      }
      function f4(v3, i2, a3) {
        if (f4.isBN(v3))
          return v3;
        this.negative = 0, this.words = null, this.length = 0, this.red = null, v3 !== null && ((i2 === "le" || i2 === "be") && (a3 = i2, i2 = 10), this._init(v3 || 0, i2 || 10, a3 || "be"));
      }
      typeof t2 == "object" ? t2.exports = f4 : e3.BN = f4, f4.BN = f4, f4.wordSize = 26;
      var p4;
      try {
        typeof window < "u" && typeof window.Buffer < "u" ? p4 = window.Buffer : p4 = ji().Buffer;
      } catch {}
      f4.isBN = function(i2) {
        return i2 instanceof f4 ? true : i2 !== null && typeof i2 == "object" && i2.constructor.wordSize === f4.wordSize && Array.isArray(i2.words);
      }, f4.max = function(i2, a3) {
        return i2.cmp(a3) > 0 ? i2 : a3;
      }, f4.min = function(i2, a3) {
        return i2.cmp(a3) < 0 ? i2 : a3;
      }, f4.prototype._init = function(i2, a3, h5) {
        if (typeof i2 == "number")
          return this._initNumber(i2, a3, h5);
        if (typeof i2 == "object")
          return this._initArray(i2, a3, h5);
        a3 === "hex" && (a3 = 16), r2(a3 === (a3 | 0) && a3 >= 2 && a3 <= 36), i2 = i2.toString().replace(/\s+/g, "");
        var s2 = 0;
        i2[0] === "-" && (s2++, this.negative = 1), s2 < i2.length && (a3 === 16 ? this._parseHex(i2, s2, h5) : (this._parseBase(i2, a3, s2), h5 === "le" && this._initArray(this.toArray(), a3, h5)));
      }, f4.prototype._initNumber = function(i2, a3, h5) {
        i2 < 0 && (this.negative = 1, i2 = -i2), i2 < 67108864 ? (this.words = [i2 & 67108863], this.length = 1) : i2 < 4503599627370496 ? (this.words = [i2 & 67108863, i2 / 67108864 & 67108863], this.length = 2) : (r2(i2 < 9007199254740992), this.words = [i2 & 67108863, i2 / 67108864 & 67108863, 1], this.length = 3), h5 === "le" && this._initArray(this.toArray(), a3, h5);
      }, f4.prototype._initArray = function(i2, a3, h5) {
        if (r2(typeof i2.length == "number"), i2.length <= 0)
          return this.words = [0], this.length = 1, this;
        this.length = Math.ceil(i2.length / 3), this.words = new Array(this.length);
        for (var s2 = 0;s2 < this.length; s2++)
          this.words[s2] = 0;
        var u3, c, b3 = 0;
        if (h5 === "be")
          for (s2 = i2.length - 1, u3 = 0;s2 >= 0; s2 -= 3)
            c = i2[s2] | i2[s2 - 1] << 8 | i2[s2 - 2] << 16, this.words[u3] |= c << b3 & 67108863, this.words[u3 + 1] = c >>> 26 - b3 & 67108863, b3 += 24, b3 >= 26 && (b3 -= 26, u3++);
        else if (h5 === "le")
          for (s2 = 0, u3 = 0;s2 < i2.length; s2 += 3)
            c = i2[s2] | i2[s2 + 1] << 8 | i2[s2 + 2] << 16, this.words[u3] |= c << b3 & 67108863, this.words[u3 + 1] = c >>> 26 - b3 & 67108863, b3 += 24, b3 >= 26 && (b3 -= 26, u3++);
        return this.strip();
      };
      function m4(v3, i2) {
        var a3 = v3.charCodeAt(i2);
        return a3 >= 65 && a3 <= 70 ? a3 - 55 : a3 >= 97 && a3 <= 102 ? a3 - 87 : a3 - 48 & 15;
      }
      function y4(v3, i2, a3) {
        var h5 = m4(v3, a3);
        return a3 - 1 >= i2 && (h5 |= m4(v3, a3 - 1) << 4), h5;
      }
      f4.prototype._parseHex = function(i2, a3, h5) {
        this.length = Math.ceil((i2.length - a3) / 6), this.words = new Array(this.length);
        for (var s2 = 0;s2 < this.length; s2++)
          this.words[s2] = 0;
        var u3 = 0, c = 0, b3;
        if (h5 === "be")
          for (s2 = i2.length - 1;s2 >= a3; s2 -= 2)
            b3 = y4(i2, a3, s2) << u3, this.words[c] |= b3 & 67108863, u3 >= 18 ? (u3 -= 18, c += 1, this.words[c] |= b3 >>> 26) : u3 += 8;
        else {
          var l4 = i2.length - a3;
          for (s2 = l4 % 2 === 0 ? a3 + 1 : a3;s2 < i2.length; s2 += 2)
            b3 = y4(i2, a3, s2) << u3, this.words[c] |= b3 & 67108863, u3 >= 18 ? (u3 -= 18, c += 1, this.words[c] |= b3 >>> 26) : u3 += 8;
        }
        this.strip();
      };
      function M3(v3, i2, a3, h5) {
        for (var s2 = 0, u3 = Math.min(v3.length, a3), c = i2;c < u3; c++) {
          var b3 = v3.charCodeAt(c) - 48;
          s2 *= h5, b3 >= 49 ? s2 += b3 - 49 + 10 : b3 >= 17 ? s2 += b3 - 17 + 10 : s2 += b3;
        }
        return s2;
      }
      f4.prototype._parseBase = function(i2, a3, h5) {
        this.words = [0], this.length = 1;
        for (var s2 = 0, u3 = 1;u3 <= 67108863; u3 *= a3)
          s2++;
        s2--, u3 = u3 / a3 | 0;
        for (var c = i2.length - h5, b3 = c % s2, l4 = Math.min(c, c - b3) + h5, n4 = 0, d2 = h5;d2 < l4; d2 += s2)
          n4 = M3(i2, d2, d2 + s2, a3), this.imuln(u3), this.words[0] + n4 < 67108864 ? this.words[0] += n4 : this._iaddn(n4);
        if (b3 !== 0) {
          var w2 = 1;
          for (n4 = M3(i2, d2, i2.length, a3), d2 = 0;d2 < b3; d2++)
            w2 *= a3;
          this.imuln(w2), this.words[0] + n4 < 67108864 ? this.words[0] += n4 : this._iaddn(n4);
        }
        this.strip();
      }, f4.prototype.copy = function(i2) {
        i2.words = new Array(this.length);
        for (var a3 = 0;a3 < this.length; a3++)
          i2.words[a3] = this.words[a3];
        i2.length = this.length, i2.negative = this.negative, i2.red = this.red;
      }, f4.prototype.clone = function() {
        var i2 = new f4(null);
        return this.copy(i2), i2;
      }, f4.prototype._expand = function(i2) {
        for (;this.length < i2; )
          this.words[this.length++] = 0;
        return this;
      }, f4.prototype.strip = function() {
        for (;this.length > 1 && this.words[this.length - 1] === 0; )
          this.length--;
        return this._normSign();
      }, f4.prototype._normSign = function() {
        return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
      }, f4.prototype.inspect = function() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var x4 = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"], S3 = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], E3 = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
      f4.prototype.toString = function(i2, a3) {
        i2 = i2 || 10, a3 = a3 | 0 || 1;
        var h5;
        if (i2 === 16 || i2 === "hex") {
          h5 = "";
          for (var s2 = 0, u3 = 0, c = 0;c < this.length; c++) {
            var b3 = this.words[c], l4 = ((b3 << s2 | u3) & 16777215).toString(16);
            u3 = b3 >>> 24 - s2 & 16777215, u3 !== 0 || c !== this.length - 1 ? h5 = x4[6 - l4.length] + l4 + h5 : h5 = l4 + h5, s2 += 2, s2 >= 26 && (s2 -= 26, c--);
          }
          for (u3 !== 0 && (h5 = u3.toString(16) + h5);h5.length % a3 !== 0; )
            h5 = "0" + h5;
          return this.negative !== 0 && (h5 = "-" + h5), h5;
        }
        if (i2 === (i2 | 0) && i2 >= 2 && i2 <= 36) {
          var n4 = S3[i2], d2 = E3[i2];
          h5 = "";
          var w2 = this.clone();
          for (w2.negative = 0;!w2.isZero(); ) {
            var g2 = w2.modn(d2).toString(i2);
            w2 = w2.idivn(d2), w2.isZero() ? h5 = g2 + h5 : h5 = x4[n4 - g2.length] + g2 + h5;
          }
          for (this.isZero() && (h5 = "0" + h5);h5.length % a3 !== 0; )
            h5 = "0" + h5;
          return this.negative !== 0 && (h5 = "-" + h5), h5;
        }
        r2(false, "Base should be between 2 and 36");
      }, f4.prototype.toNumber = function() {
        var i2 = this.words[0];
        return this.length === 2 ? i2 += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? i2 += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && r2(false, "Number can only safely store up to 53 bits"), this.negative !== 0 ? -i2 : i2;
      }, f4.prototype.toJSON = function() {
        return this.toString(16);
      }, f4.prototype.toBuffer = function(i2, a3) {
        return r2(typeof p4 < "u"), this.toArrayLike(p4, i2, a3);
      }, f4.prototype.toArray = function(i2, a3) {
        return this.toArrayLike(Array, i2, a3);
      }, f4.prototype.toArrayLike = function(i2, a3, h5) {
        var s2 = this.byteLength(), u3 = h5 || Math.max(1, s2);
        r2(s2 <= u3, "byte array longer than desired length"), r2(u3 > 0, "Requested array length <= 0"), this.strip();
        var c = a3 === "le", b3 = new i2(u3), l4, n4, d2 = this.clone();
        if (c) {
          for (n4 = 0;!d2.isZero(); n4++)
            l4 = d2.andln(255), d2.iushrn(8), b3[n4] = l4;
          for (;n4 < u3; n4++)
            b3[n4] = 0;
        } else {
          for (n4 = 0;n4 < u3 - s2; n4++)
            b3[n4] = 0;
          for (n4 = 0;!d2.isZero(); n4++)
            l4 = d2.andln(255), d2.iushrn(8), b3[u3 - n4 - 1] = l4;
        }
        return b3;
      }, Math.clz32 ? f4.prototype._countBits = function(i2) {
        return 32 - Math.clz32(i2);
      } : f4.prototype._countBits = function(i2) {
        var a3 = i2, h5 = 0;
        return a3 >= 4096 && (h5 += 13, a3 >>>= 13), a3 >= 64 && (h5 += 7, a3 >>>= 7), a3 >= 8 && (h5 += 4, a3 >>>= 4), a3 >= 2 && (h5 += 2, a3 >>>= 2), h5 + a3;
      }, f4.prototype._zeroBits = function(i2) {
        if (i2 === 0)
          return 26;
        var a3 = i2, h5 = 0;
        return (a3 & 8191) === 0 && (h5 += 13, a3 >>>= 13), (a3 & 127) === 0 && (h5 += 7, a3 >>>= 7), (a3 & 15) === 0 && (h5 += 4, a3 >>>= 4), (a3 & 3) === 0 && (h5 += 2, a3 >>>= 2), (a3 & 1) === 0 && h5++, h5;
      }, f4.prototype.bitLength = function() {
        var i2 = this.words[this.length - 1], a3 = this._countBits(i2);
        return (this.length - 1) * 26 + a3;
      };
      function B5(v3) {
        for (var i2 = new Array(v3.bitLength()), a3 = 0;a3 < i2.length; a3++) {
          var h5 = a3 / 26 | 0, s2 = a3 % 26;
          i2[a3] = (v3.words[h5] & 1 << s2) >>> s2;
        }
        return i2;
      }
      f4.prototype.zeroBits = function() {
        if (this.isZero())
          return 0;
        for (var i2 = 0, a3 = 0;a3 < this.length; a3++) {
          var h5 = this._zeroBits(this.words[a3]);
          if (i2 += h5, h5 !== 26)
            break;
        }
        return i2;
      }, f4.prototype.byteLength = function() {
        return Math.ceil(this.bitLength() / 8);
      }, f4.prototype.toTwos = function(i2) {
        return this.negative !== 0 ? this.abs().inotn(i2).iaddn(1) : this.clone();
      }, f4.prototype.fromTwos = function(i2) {
        return this.testn(i2 - 1) ? this.notn(i2).iaddn(1).ineg() : this.clone();
      }, f4.prototype.isNeg = function() {
        return this.negative !== 0;
      }, f4.prototype.neg = function() {
        return this.clone().ineg();
      }, f4.prototype.ineg = function() {
        return this.isZero() || (this.negative ^= 1), this;
      }, f4.prototype.iuor = function(i2) {
        for (;this.length < i2.length; )
          this.words[this.length++] = 0;
        for (var a3 = 0;a3 < i2.length; a3++)
          this.words[a3] = this.words[a3] | i2.words[a3];
        return this.strip();
      }, f4.prototype.ior = function(i2) {
        return r2((this.negative | i2.negative) === 0), this.iuor(i2);
      }, f4.prototype.or = function(i2) {
        return this.length > i2.length ? this.clone().ior(i2) : i2.clone().ior(this);
      }, f4.prototype.uor = function(i2) {
        return this.length > i2.length ? this.clone().iuor(i2) : i2.clone().iuor(this);
      }, f4.prototype.iuand = function(i2) {
        var a3;
        this.length > i2.length ? a3 = i2 : a3 = this;
        for (var h5 = 0;h5 < a3.length; h5++)
          this.words[h5] = this.words[h5] & i2.words[h5];
        return this.length = a3.length, this.strip();
      }, f4.prototype.iand = function(i2) {
        return r2((this.negative | i2.negative) === 0), this.iuand(i2);
      }, f4.prototype.and = function(i2) {
        return this.length > i2.length ? this.clone().iand(i2) : i2.clone().iand(this);
      }, f4.prototype.uand = function(i2) {
        return this.length > i2.length ? this.clone().iuand(i2) : i2.clone().iuand(this);
      }, f4.prototype.iuxor = function(i2) {
        var a3, h5;
        this.length > i2.length ? (a3 = this, h5 = i2) : (a3 = i2, h5 = this);
        for (var s2 = 0;s2 < h5.length; s2++)
          this.words[s2] = a3.words[s2] ^ h5.words[s2];
        if (this !== a3)
          for (;s2 < a3.length; s2++)
            this.words[s2] = a3.words[s2];
        return this.length = a3.length, this.strip();
      }, f4.prototype.ixor = function(i2) {
        return r2((this.negative | i2.negative) === 0), this.iuxor(i2);
      }, f4.prototype.xor = function(i2) {
        return this.length > i2.length ? this.clone().ixor(i2) : i2.clone().ixor(this);
      }, f4.prototype.uxor = function(i2) {
        return this.length > i2.length ? this.clone().iuxor(i2) : i2.clone().iuxor(this);
      }, f4.prototype.inotn = function(i2) {
        r2(typeof i2 == "number" && i2 >= 0);
        var a3 = Math.ceil(i2 / 26) | 0, h5 = i2 % 26;
        this._expand(a3), h5 > 0 && a3--;
        for (var s2 = 0;s2 < a3; s2++)
          this.words[s2] = ~this.words[s2] & 67108863;
        return h5 > 0 && (this.words[s2] = ~this.words[s2] & 67108863 >> 26 - h5), this.strip();
      }, f4.prototype.notn = function(i2) {
        return this.clone().inotn(i2);
      }, f4.prototype.setn = function(i2, a3) {
        r2(typeof i2 == "number" && i2 >= 0);
        var h5 = i2 / 26 | 0, s2 = i2 % 26;
        return this._expand(h5 + 1), a3 ? this.words[h5] = this.words[h5] | 1 << s2 : this.words[h5] = this.words[h5] & ~(1 << s2), this.strip();
      }, f4.prototype.iadd = function(i2) {
        var a3;
        if (this.negative !== 0 && i2.negative === 0)
          return this.negative = 0, a3 = this.isub(i2), this.negative ^= 1, this._normSign();
        if (this.negative === 0 && i2.negative !== 0)
          return i2.negative = 0, a3 = this.isub(i2), i2.negative = 1, a3._normSign();
        var h5, s2;
        this.length > i2.length ? (h5 = this, s2 = i2) : (h5 = i2, s2 = this);
        for (var u3 = 0, c = 0;c < s2.length; c++)
          a3 = (h5.words[c] | 0) + (s2.words[c] | 0) + u3, this.words[c] = a3 & 67108863, u3 = a3 >>> 26;
        for (;u3 !== 0 && c < h5.length; c++)
          a3 = (h5.words[c] | 0) + u3, this.words[c] = a3 & 67108863, u3 = a3 >>> 26;
        if (this.length = h5.length, u3 !== 0)
          this.words[this.length] = u3, this.length++;
        else if (h5 !== this)
          for (;c < h5.length; c++)
            this.words[c] = h5.words[c];
        return this;
      }, f4.prototype.add = function(i2) {
        var a3;
        return i2.negative !== 0 && this.negative === 0 ? (i2.negative = 0, a3 = this.sub(i2), i2.negative ^= 1, a3) : i2.negative === 0 && this.negative !== 0 ? (this.negative = 0, a3 = i2.sub(this), this.negative = 1, a3) : this.length > i2.length ? this.clone().iadd(i2) : i2.clone().iadd(this);
      }, f4.prototype.isub = function(i2) {
        if (i2.negative !== 0) {
          i2.negative = 0;
          var a3 = this.iadd(i2);
          return i2.negative = 1, a3._normSign();
        } else if (this.negative !== 0)
          return this.negative = 0, this.iadd(i2), this.negative = 1, this._normSign();
        var h5 = this.cmp(i2);
        if (h5 === 0)
          return this.negative = 0, this.length = 1, this.words[0] = 0, this;
        var s2, u3;
        h5 > 0 ? (s2 = this, u3 = i2) : (s2 = i2, u3 = this);
        for (var c = 0, b3 = 0;b3 < u3.length; b3++)
          a3 = (s2.words[b3] | 0) - (u3.words[b3] | 0) + c, c = a3 >> 26, this.words[b3] = a3 & 67108863;
        for (;c !== 0 && b3 < s2.length; b3++)
          a3 = (s2.words[b3] | 0) + c, c = a3 >> 26, this.words[b3] = a3 & 67108863;
        if (c === 0 && b3 < s2.length && s2 !== this)
          for (;b3 < s2.length; b3++)
            this.words[b3] = s2.words[b3];
        return this.length = Math.max(this.length, b3), s2 !== this && (this.negative = 1), this.strip();
      }, f4.prototype.sub = function(i2) {
        return this.clone().isub(i2);
      };
      function q2(v3, i2, a3) {
        a3.negative = i2.negative ^ v3.negative;
        var h5 = v3.length + i2.length | 0;
        a3.length = h5, h5 = h5 - 1 | 0;
        var s2 = v3.words[0] | 0, u3 = i2.words[0] | 0, c = s2 * u3, b3 = c & 67108863, l4 = c / 67108864 | 0;
        a3.words[0] = b3;
        for (var n4 = 1;n4 < h5; n4++) {
          for (var d2 = l4 >>> 26, w2 = l4 & 67108863, g2 = Math.min(n4, i2.length - 1), _3 = Math.max(0, n4 - v3.length + 1);_3 <= g2; _3++) {
            var A6 = n4 - _3 | 0;
            s2 = v3.words[A6] | 0, u3 = i2.words[_3] | 0, c = s2 * u3 + w2, d2 += c / 67108864 | 0, w2 = c & 67108863;
          }
          a3.words[n4] = w2 | 0, l4 = d2 | 0;
        }
        return l4 !== 0 ? a3.words[n4] = l4 | 0 : a3.length--, a3.strip();
      }
      var L32 = function(i2, a3, h5) {
        var s2 = i2.words, u3 = a3.words, c = h5.words, b3 = 0, l4, n4, d2, w2 = s2[0] | 0, g2 = w2 & 8191, _3 = w2 >>> 13, A6 = s2[1] | 0, R3 = A6 & 8191, I2 = A6 >>> 13, Me = s2[2] | 0, k2 = Me & 8191, D2 = Me >>> 13, nt = s2[3] | 0, C3 = nt & 8191, O2 = nt >>> 13, vt = s2[4] | 0, F = vt & 8191, U3 = vt >>> 13, bt = s2[5] | 0, z3 = bt & 8191, H32 = bt >>> 13, mt = s2[6] | 0, W3 = mt & 8191, K = mt >>> 13, gt = s2[7] | 0, j2 = gt & 8191, Z3 = gt >>> 13, yt = s2[8] | 0, V4 = yt & 8191, $32 = yt >>> 13, wt = s2[9] | 0, G4 = wt & 8191, Y = wt >>> 13, Mt = u3[0] | 0, X3 = Mt & 8191, J = Mt >>> 13, _t = u3[1] | 0, Q3 = _t & 8191, ee = _t >>> 13, xt = u3[2] | 0, te = xt & 8191, re = xt >>> 13, St = u3[3] | 0, ie = St & 8191, ne = St >>> 13, Et = u3[4] | 0, fe = Et & 8191, ae = Et >>> 13, At = u3[5] | 0, oe = At & 8191, se = At >>> 13, Rt = u3[6] | 0, he = Rt & 8191, ue = Rt >>> 13, Bt = u3[7] | 0, le = Bt & 8191, de = Bt >>> 13, qt = u3[8] | 0, ce = qt & 8191, pe = qt >>> 13, It = u3[9] | 0, ve = It & 8191, be = It >>> 13;
        h5.negative = i2.negative ^ a3.negative, h5.length = 19, l4 = Math.imul(g2, X3), n4 = Math.imul(g2, J), n4 = n4 + Math.imul(_3, X3) | 0, d2 = Math.imul(_3, J);
        var ft = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (ft >>> 26) | 0, ft &= 67108863, l4 = Math.imul(R3, X3), n4 = Math.imul(R3, J), n4 = n4 + Math.imul(I2, X3) | 0, d2 = Math.imul(I2, J), l4 = l4 + Math.imul(g2, Q3) | 0, n4 = n4 + Math.imul(g2, ee) | 0, n4 = n4 + Math.imul(_3, Q3) | 0, d2 = d2 + Math.imul(_3, ee) | 0;
        var Be = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Be >>> 26) | 0, Be &= 67108863, l4 = Math.imul(k2, X3), n4 = Math.imul(k2, J), n4 = n4 + Math.imul(D2, X3) | 0, d2 = Math.imul(D2, J), l4 = l4 + Math.imul(R3, Q3) | 0, n4 = n4 + Math.imul(R3, ee) | 0, n4 = n4 + Math.imul(I2, Q3) | 0, d2 = d2 + Math.imul(I2, ee) | 0, l4 = l4 + Math.imul(g2, te) | 0, n4 = n4 + Math.imul(g2, re) | 0, n4 = n4 + Math.imul(_3, te) | 0, d2 = d2 + Math.imul(_3, re) | 0;
        var qe = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (qe >>> 26) | 0, qe &= 67108863, l4 = Math.imul(C3, X3), n4 = Math.imul(C3, J), n4 = n4 + Math.imul(O2, X3) | 0, d2 = Math.imul(O2, J), l4 = l4 + Math.imul(k2, Q3) | 0, n4 = n4 + Math.imul(k2, ee) | 0, n4 = n4 + Math.imul(D2, Q3) | 0, d2 = d2 + Math.imul(D2, ee) | 0, l4 = l4 + Math.imul(R3, te) | 0, n4 = n4 + Math.imul(R3, re) | 0, n4 = n4 + Math.imul(I2, te) | 0, d2 = d2 + Math.imul(I2, re) | 0, l4 = l4 + Math.imul(g2, ie) | 0, n4 = n4 + Math.imul(g2, ne) | 0, n4 = n4 + Math.imul(_3, ie) | 0, d2 = d2 + Math.imul(_3, ne) | 0;
        var ze = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (ze >>> 26) | 0, ze &= 67108863, l4 = Math.imul(F, X3), n4 = Math.imul(F, J), n4 = n4 + Math.imul(U3, X3) | 0, d2 = Math.imul(U3, J), l4 = l4 + Math.imul(C3, Q3) | 0, n4 = n4 + Math.imul(C3, ee) | 0, n4 = n4 + Math.imul(O2, Q3) | 0, d2 = d2 + Math.imul(O2, ee) | 0, l4 = l4 + Math.imul(k2, te) | 0, n4 = n4 + Math.imul(k2, re) | 0, n4 = n4 + Math.imul(D2, te) | 0, d2 = d2 + Math.imul(D2, re) | 0, l4 = l4 + Math.imul(R3, ie) | 0, n4 = n4 + Math.imul(R3, ne) | 0, n4 = n4 + Math.imul(I2, ie) | 0, d2 = d2 + Math.imul(I2, ne) | 0, l4 = l4 + Math.imul(g2, fe) | 0, n4 = n4 + Math.imul(g2, ae) | 0, n4 = n4 + Math.imul(_3, fe) | 0, d2 = d2 + Math.imul(_3, ae) | 0;
        var He = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (He >>> 26) | 0, He &= 67108863, l4 = Math.imul(z3, X3), n4 = Math.imul(z3, J), n4 = n4 + Math.imul(H32, X3) | 0, d2 = Math.imul(H32, J), l4 = l4 + Math.imul(F, Q3) | 0, n4 = n4 + Math.imul(F, ee) | 0, n4 = n4 + Math.imul(U3, Q3) | 0, d2 = d2 + Math.imul(U3, ee) | 0, l4 = l4 + Math.imul(C3, te) | 0, n4 = n4 + Math.imul(C3, re) | 0, n4 = n4 + Math.imul(O2, te) | 0, d2 = d2 + Math.imul(O2, re) | 0, l4 = l4 + Math.imul(k2, ie) | 0, n4 = n4 + Math.imul(k2, ne) | 0, n4 = n4 + Math.imul(D2, ie) | 0, d2 = d2 + Math.imul(D2, ne) | 0, l4 = l4 + Math.imul(R3, fe) | 0, n4 = n4 + Math.imul(R3, ae) | 0, n4 = n4 + Math.imul(I2, fe) | 0, d2 = d2 + Math.imul(I2, ae) | 0, l4 = l4 + Math.imul(g2, oe) | 0, n4 = n4 + Math.imul(g2, se) | 0, n4 = n4 + Math.imul(_3, oe) | 0, d2 = d2 + Math.imul(_3, se) | 0;
        var We = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (We >>> 26) | 0, We &= 67108863, l4 = Math.imul(W3, X3), n4 = Math.imul(W3, J), n4 = n4 + Math.imul(K, X3) | 0, d2 = Math.imul(K, J), l4 = l4 + Math.imul(z3, Q3) | 0, n4 = n4 + Math.imul(z3, ee) | 0, n4 = n4 + Math.imul(H32, Q3) | 0, d2 = d2 + Math.imul(H32, ee) | 0, l4 = l4 + Math.imul(F, te) | 0, n4 = n4 + Math.imul(F, re) | 0, n4 = n4 + Math.imul(U3, te) | 0, d2 = d2 + Math.imul(U3, re) | 0, l4 = l4 + Math.imul(C3, ie) | 0, n4 = n4 + Math.imul(C3, ne) | 0, n4 = n4 + Math.imul(O2, ie) | 0, d2 = d2 + Math.imul(O2, ne) | 0, l4 = l4 + Math.imul(k2, fe) | 0, n4 = n4 + Math.imul(k2, ae) | 0, n4 = n4 + Math.imul(D2, fe) | 0, d2 = d2 + Math.imul(D2, ae) | 0, l4 = l4 + Math.imul(R3, oe) | 0, n4 = n4 + Math.imul(R3, se) | 0, n4 = n4 + Math.imul(I2, oe) | 0, d2 = d2 + Math.imul(I2, se) | 0, l4 = l4 + Math.imul(g2, he) | 0, n4 = n4 + Math.imul(g2, ue) | 0, n4 = n4 + Math.imul(_3, he) | 0, d2 = d2 + Math.imul(_3, ue) | 0;
        var Ke = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ke >>> 26) | 0, Ke &= 67108863, l4 = Math.imul(j2, X3), n4 = Math.imul(j2, J), n4 = n4 + Math.imul(Z3, X3) | 0, d2 = Math.imul(Z3, J), l4 = l4 + Math.imul(W3, Q3) | 0, n4 = n4 + Math.imul(W3, ee) | 0, n4 = n4 + Math.imul(K, Q3) | 0, d2 = d2 + Math.imul(K, ee) | 0, l4 = l4 + Math.imul(z3, te) | 0, n4 = n4 + Math.imul(z3, re) | 0, n4 = n4 + Math.imul(H32, te) | 0, d2 = d2 + Math.imul(H32, re) | 0, l4 = l4 + Math.imul(F, ie) | 0, n4 = n4 + Math.imul(F, ne) | 0, n4 = n4 + Math.imul(U3, ie) | 0, d2 = d2 + Math.imul(U3, ne) | 0, l4 = l4 + Math.imul(C3, fe) | 0, n4 = n4 + Math.imul(C3, ae) | 0, n4 = n4 + Math.imul(O2, fe) | 0, d2 = d2 + Math.imul(O2, ae) | 0, l4 = l4 + Math.imul(k2, oe) | 0, n4 = n4 + Math.imul(k2, se) | 0, n4 = n4 + Math.imul(D2, oe) | 0, d2 = d2 + Math.imul(D2, se) | 0, l4 = l4 + Math.imul(R3, he) | 0, n4 = n4 + Math.imul(R3, ue) | 0, n4 = n4 + Math.imul(I2, he) | 0, d2 = d2 + Math.imul(I2, ue) | 0, l4 = l4 + Math.imul(g2, le) | 0, n4 = n4 + Math.imul(g2, de) | 0, n4 = n4 + Math.imul(_3, le) | 0, d2 = d2 + Math.imul(_3, de) | 0;
        var je = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (je >>> 26) | 0, je &= 67108863, l4 = Math.imul(V4, X3), n4 = Math.imul(V4, J), n4 = n4 + Math.imul($32, X3) | 0, d2 = Math.imul($32, J), l4 = l4 + Math.imul(j2, Q3) | 0, n4 = n4 + Math.imul(j2, ee) | 0, n4 = n4 + Math.imul(Z3, Q3) | 0, d2 = d2 + Math.imul(Z3, ee) | 0, l4 = l4 + Math.imul(W3, te) | 0, n4 = n4 + Math.imul(W3, re) | 0, n4 = n4 + Math.imul(K, te) | 0, d2 = d2 + Math.imul(K, re) | 0, l4 = l4 + Math.imul(z3, ie) | 0, n4 = n4 + Math.imul(z3, ne) | 0, n4 = n4 + Math.imul(H32, ie) | 0, d2 = d2 + Math.imul(H32, ne) | 0, l4 = l4 + Math.imul(F, fe) | 0, n4 = n4 + Math.imul(F, ae) | 0, n4 = n4 + Math.imul(U3, fe) | 0, d2 = d2 + Math.imul(U3, ae) | 0, l4 = l4 + Math.imul(C3, oe) | 0, n4 = n4 + Math.imul(C3, se) | 0, n4 = n4 + Math.imul(O2, oe) | 0, d2 = d2 + Math.imul(O2, se) | 0, l4 = l4 + Math.imul(k2, he) | 0, n4 = n4 + Math.imul(k2, ue) | 0, n4 = n4 + Math.imul(D2, he) | 0, d2 = d2 + Math.imul(D2, ue) | 0, l4 = l4 + Math.imul(R3, le) | 0, n4 = n4 + Math.imul(R3, de) | 0, n4 = n4 + Math.imul(I2, le) | 0, d2 = d2 + Math.imul(I2, de) | 0, l4 = l4 + Math.imul(g2, ce) | 0, n4 = n4 + Math.imul(g2, pe) | 0, n4 = n4 + Math.imul(_3, ce) | 0, d2 = d2 + Math.imul(_3, pe) | 0;
        var Ze = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ze >>> 26) | 0, Ze &= 67108863, l4 = Math.imul(G4, X3), n4 = Math.imul(G4, J), n4 = n4 + Math.imul(Y, X3) | 0, d2 = Math.imul(Y, J), l4 = l4 + Math.imul(V4, Q3) | 0, n4 = n4 + Math.imul(V4, ee) | 0, n4 = n4 + Math.imul($32, Q3) | 0, d2 = d2 + Math.imul($32, ee) | 0, l4 = l4 + Math.imul(j2, te) | 0, n4 = n4 + Math.imul(j2, re) | 0, n4 = n4 + Math.imul(Z3, te) | 0, d2 = d2 + Math.imul(Z3, re) | 0, l4 = l4 + Math.imul(W3, ie) | 0, n4 = n4 + Math.imul(W3, ne) | 0, n4 = n4 + Math.imul(K, ie) | 0, d2 = d2 + Math.imul(K, ne) | 0, l4 = l4 + Math.imul(z3, fe) | 0, n4 = n4 + Math.imul(z3, ae) | 0, n4 = n4 + Math.imul(H32, fe) | 0, d2 = d2 + Math.imul(H32, ae) | 0, l4 = l4 + Math.imul(F, oe) | 0, n4 = n4 + Math.imul(F, se) | 0, n4 = n4 + Math.imul(U3, oe) | 0, d2 = d2 + Math.imul(U3, se) | 0, l4 = l4 + Math.imul(C3, he) | 0, n4 = n4 + Math.imul(C3, ue) | 0, n4 = n4 + Math.imul(O2, he) | 0, d2 = d2 + Math.imul(O2, ue) | 0, l4 = l4 + Math.imul(k2, le) | 0, n4 = n4 + Math.imul(k2, de) | 0, n4 = n4 + Math.imul(D2, le) | 0, d2 = d2 + Math.imul(D2, de) | 0, l4 = l4 + Math.imul(R3, ce) | 0, n4 = n4 + Math.imul(R3, pe) | 0, n4 = n4 + Math.imul(I2, ce) | 0, d2 = d2 + Math.imul(I2, pe) | 0, l4 = l4 + Math.imul(g2, ve) | 0, n4 = n4 + Math.imul(g2, be) | 0, n4 = n4 + Math.imul(_3, ve) | 0, d2 = d2 + Math.imul(_3, be) | 0;
        var Ve = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ve >>> 26) | 0, Ve &= 67108863, l4 = Math.imul(G4, Q3), n4 = Math.imul(G4, ee), n4 = n4 + Math.imul(Y, Q3) | 0, d2 = Math.imul(Y, ee), l4 = l4 + Math.imul(V4, te) | 0, n4 = n4 + Math.imul(V4, re) | 0, n4 = n4 + Math.imul($32, te) | 0, d2 = d2 + Math.imul($32, re) | 0, l4 = l4 + Math.imul(j2, ie) | 0, n4 = n4 + Math.imul(j2, ne) | 0, n4 = n4 + Math.imul(Z3, ie) | 0, d2 = d2 + Math.imul(Z3, ne) | 0, l4 = l4 + Math.imul(W3, fe) | 0, n4 = n4 + Math.imul(W3, ae) | 0, n4 = n4 + Math.imul(K, fe) | 0, d2 = d2 + Math.imul(K, ae) | 0, l4 = l4 + Math.imul(z3, oe) | 0, n4 = n4 + Math.imul(z3, se) | 0, n4 = n4 + Math.imul(H32, oe) | 0, d2 = d2 + Math.imul(H32, se) | 0, l4 = l4 + Math.imul(F, he) | 0, n4 = n4 + Math.imul(F, ue) | 0, n4 = n4 + Math.imul(U3, he) | 0, d2 = d2 + Math.imul(U3, ue) | 0, l4 = l4 + Math.imul(C3, le) | 0, n4 = n4 + Math.imul(C3, de) | 0, n4 = n4 + Math.imul(O2, le) | 0, d2 = d2 + Math.imul(O2, de) | 0, l4 = l4 + Math.imul(k2, ce) | 0, n4 = n4 + Math.imul(k2, pe) | 0, n4 = n4 + Math.imul(D2, ce) | 0, d2 = d2 + Math.imul(D2, pe) | 0, l4 = l4 + Math.imul(R3, ve) | 0, n4 = n4 + Math.imul(R3, be) | 0, n4 = n4 + Math.imul(I2, ve) | 0, d2 = d2 + Math.imul(I2, be) | 0;
        var $e = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + ($e >>> 26) | 0, $e &= 67108863, l4 = Math.imul(G4, te), n4 = Math.imul(G4, re), n4 = n4 + Math.imul(Y, te) | 0, d2 = Math.imul(Y, re), l4 = l4 + Math.imul(V4, ie) | 0, n4 = n4 + Math.imul(V4, ne) | 0, n4 = n4 + Math.imul($32, ie) | 0, d2 = d2 + Math.imul($32, ne) | 0, l4 = l4 + Math.imul(j2, fe) | 0, n4 = n4 + Math.imul(j2, ae) | 0, n4 = n4 + Math.imul(Z3, fe) | 0, d2 = d2 + Math.imul(Z3, ae) | 0, l4 = l4 + Math.imul(W3, oe) | 0, n4 = n4 + Math.imul(W3, se) | 0, n4 = n4 + Math.imul(K, oe) | 0, d2 = d2 + Math.imul(K, se) | 0, l4 = l4 + Math.imul(z3, he) | 0, n4 = n4 + Math.imul(z3, ue) | 0, n4 = n4 + Math.imul(H32, he) | 0, d2 = d2 + Math.imul(H32, ue) | 0, l4 = l4 + Math.imul(F, le) | 0, n4 = n4 + Math.imul(F, de) | 0, n4 = n4 + Math.imul(U3, le) | 0, d2 = d2 + Math.imul(U3, de) | 0, l4 = l4 + Math.imul(C3, ce) | 0, n4 = n4 + Math.imul(C3, pe) | 0, n4 = n4 + Math.imul(O2, ce) | 0, d2 = d2 + Math.imul(O2, pe) | 0, l4 = l4 + Math.imul(k2, ve) | 0, n4 = n4 + Math.imul(k2, be) | 0, n4 = n4 + Math.imul(D2, ve) | 0, d2 = d2 + Math.imul(D2, be) | 0;
        var Ge = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ge >>> 26) | 0, Ge &= 67108863, l4 = Math.imul(G4, ie), n4 = Math.imul(G4, ne), n4 = n4 + Math.imul(Y, ie) | 0, d2 = Math.imul(Y, ne), l4 = l4 + Math.imul(V4, fe) | 0, n4 = n4 + Math.imul(V4, ae) | 0, n4 = n4 + Math.imul($32, fe) | 0, d2 = d2 + Math.imul($32, ae) | 0, l4 = l4 + Math.imul(j2, oe) | 0, n4 = n4 + Math.imul(j2, se) | 0, n4 = n4 + Math.imul(Z3, oe) | 0, d2 = d2 + Math.imul(Z3, se) | 0, l4 = l4 + Math.imul(W3, he) | 0, n4 = n4 + Math.imul(W3, ue) | 0, n4 = n4 + Math.imul(K, he) | 0, d2 = d2 + Math.imul(K, ue) | 0, l4 = l4 + Math.imul(z3, le) | 0, n4 = n4 + Math.imul(z3, de) | 0, n4 = n4 + Math.imul(H32, le) | 0, d2 = d2 + Math.imul(H32, de) | 0, l4 = l4 + Math.imul(F, ce) | 0, n4 = n4 + Math.imul(F, pe) | 0, n4 = n4 + Math.imul(U3, ce) | 0, d2 = d2 + Math.imul(U3, pe) | 0, l4 = l4 + Math.imul(C3, ve) | 0, n4 = n4 + Math.imul(C3, be) | 0, n4 = n4 + Math.imul(O2, ve) | 0, d2 = d2 + Math.imul(O2, be) | 0;
        var Ye = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ye >>> 26) | 0, Ye &= 67108863, l4 = Math.imul(G4, fe), n4 = Math.imul(G4, ae), n4 = n4 + Math.imul(Y, fe) | 0, d2 = Math.imul(Y, ae), l4 = l4 + Math.imul(V4, oe) | 0, n4 = n4 + Math.imul(V4, se) | 0, n4 = n4 + Math.imul($32, oe) | 0, d2 = d2 + Math.imul($32, se) | 0, l4 = l4 + Math.imul(j2, he) | 0, n4 = n4 + Math.imul(j2, ue) | 0, n4 = n4 + Math.imul(Z3, he) | 0, d2 = d2 + Math.imul(Z3, ue) | 0, l4 = l4 + Math.imul(W3, le) | 0, n4 = n4 + Math.imul(W3, de) | 0, n4 = n4 + Math.imul(K, le) | 0, d2 = d2 + Math.imul(K, de) | 0, l4 = l4 + Math.imul(z3, ce) | 0, n4 = n4 + Math.imul(z3, pe) | 0, n4 = n4 + Math.imul(H32, ce) | 0, d2 = d2 + Math.imul(H32, pe) | 0, l4 = l4 + Math.imul(F, ve) | 0, n4 = n4 + Math.imul(F, be) | 0, n4 = n4 + Math.imul(U3, ve) | 0, d2 = d2 + Math.imul(U3, be) | 0;
        var Xe = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Xe >>> 26) | 0, Xe &= 67108863, l4 = Math.imul(G4, oe), n4 = Math.imul(G4, se), n4 = n4 + Math.imul(Y, oe) | 0, d2 = Math.imul(Y, se), l4 = l4 + Math.imul(V4, he) | 0, n4 = n4 + Math.imul(V4, ue) | 0, n4 = n4 + Math.imul($32, he) | 0, d2 = d2 + Math.imul($32, ue) | 0, l4 = l4 + Math.imul(j2, le) | 0, n4 = n4 + Math.imul(j2, de) | 0, n4 = n4 + Math.imul(Z3, le) | 0, d2 = d2 + Math.imul(Z3, de) | 0, l4 = l4 + Math.imul(W3, ce) | 0, n4 = n4 + Math.imul(W3, pe) | 0, n4 = n4 + Math.imul(K, ce) | 0, d2 = d2 + Math.imul(K, pe) | 0, l4 = l4 + Math.imul(z3, ve) | 0, n4 = n4 + Math.imul(z3, be) | 0, n4 = n4 + Math.imul(H32, ve) | 0, d2 = d2 + Math.imul(H32, be) | 0;
        var Je = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Je >>> 26) | 0, Je &= 67108863, l4 = Math.imul(G4, he), n4 = Math.imul(G4, ue), n4 = n4 + Math.imul(Y, he) | 0, d2 = Math.imul(Y, ue), l4 = l4 + Math.imul(V4, le) | 0, n4 = n4 + Math.imul(V4, de) | 0, n4 = n4 + Math.imul($32, le) | 0, d2 = d2 + Math.imul($32, de) | 0, l4 = l4 + Math.imul(j2, ce) | 0, n4 = n4 + Math.imul(j2, pe) | 0, n4 = n4 + Math.imul(Z3, ce) | 0, d2 = d2 + Math.imul(Z3, pe) | 0, l4 = l4 + Math.imul(W3, ve) | 0, n4 = n4 + Math.imul(W3, be) | 0, n4 = n4 + Math.imul(K, ve) | 0, d2 = d2 + Math.imul(K, be) | 0;
        var Qe = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Qe >>> 26) | 0, Qe &= 67108863, l4 = Math.imul(G4, le), n4 = Math.imul(G4, de), n4 = n4 + Math.imul(Y, le) | 0, d2 = Math.imul(Y, de), l4 = l4 + Math.imul(V4, ce) | 0, n4 = n4 + Math.imul(V4, pe) | 0, n4 = n4 + Math.imul($32, ce) | 0, d2 = d2 + Math.imul($32, pe) | 0, l4 = l4 + Math.imul(j2, ve) | 0, n4 = n4 + Math.imul(j2, be) | 0, n4 = n4 + Math.imul(Z3, ve) | 0, d2 = d2 + Math.imul(Z3, be) | 0;
        var et = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (et >>> 26) | 0, et &= 67108863, l4 = Math.imul(G4, ce), n4 = Math.imul(G4, pe), n4 = n4 + Math.imul(Y, ce) | 0, d2 = Math.imul(Y, pe), l4 = l4 + Math.imul(V4, ve) | 0, n4 = n4 + Math.imul(V4, be) | 0, n4 = n4 + Math.imul($32, ve) | 0, d2 = d2 + Math.imul($32, be) | 0;
        var tt = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (tt >>> 26) | 0, tt &= 67108863, l4 = Math.imul(G4, ve), n4 = Math.imul(G4, be), n4 = n4 + Math.imul(Y, ve) | 0, d2 = Math.imul(Y, be);
        var rt = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        return b3 = (d2 + (n4 >>> 13) | 0) + (rt >>> 26) | 0, rt &= 67108863, c[0] = ft, c[1] = Be, c[2] = qe, c[3] = ze, c[4] = He, c[5] = We, c[6] = Ke, c[7] = je, c[8] = Ze, c[9] = Ve, c[10] = $e, c[11] = Ge, c[12] = Ye, c[13] = Xe, c[14] = Je, c[15] = Qe, c[16] = et, c[17] = tt, c[18] = rt, b3 !== 0 && (c[19] = b3, h5.length++), h5;
      };
      Math.imul || (L32 = q2);
      function ge(v3, i2, a3) {
        a3.negative = i2.negative ^ v3.negative, a3.length = v3.length + i2.length;
        for (var h5 = 0, s2 = 0, u3 = 0;u3 < a3.length - 1; u3++) {
          var c = s2;
          s2 = 0;
          for (var b3 = h5 & 67108863, l4 = Math.min(u3, i2.length - 1), n4 = Math.max(0, u3 - v3.length + 1);n4 <= l4; n4++) {
            var d2 = u3 - n4, w2 = v3.words[d2] | 0, g2 = i2.words[n4] | 0, _3 = w2 * g2, A6 = _3 & 67108863;
            c = c + (_3 / 67108864 | 0) | 0, A6 = A6 + b3 | 0, b3 = A6 & 67108863, c = c + (A6 >>> 26) | 0, s2 += c >>> 26, c &= 67108863;
          }
          a3.words[u3] = b3, h5 = c, c = s2;
        }
        return h5 !== 0 ? a3.words[u3] = h5 : a3.length--, a3.strip();
      }
      function _e(v3, i2, a3) {
        var h5 = new N3;
        return h5.mulp(v3, i2, a3);
      }
      f4.prototype.mulTo = function(i2, a3) {
        var h5, s2 = this.length + i2.length;
        return this.length === 10 && i2.length === 10 ? h5 = L32(this, i2, a3) : s2 < 63 ? h5 = q2(this, i2, a3) : s2 < 1024 ? h5 = ge(this, i2, a3) : h5 = _e(this, i2, a3), h5;
      };
      function N3(v3, i2) {
        this.x = v3, this.y = i2;
      }
      N3.prototype.makeRBT = function(i2) {
        for (var a3 = new Array(i2), h5 = f4.prototype._countBits(i2) - 1, s2 = 0;s2 < i2; s2++)
          a3[s2] = this.revBin(s2, h5, i2);
        return a3;
      }, N3.prototype.revBin = function(i2, a3, h5) {
        if (i2 === 0 || i2 === h5 - 1)
          return i2;
        for (var s2 = 0, u3 = 0;u3 < a3; u3++)
          s2 |= (i2 & 1) << a3 - u3 - 1, i2 >>= 1;
        return s2;
      }, N3.prototype.permute = function(i2, a3, h5, s2, u3, c) {
        for (var b3 = 0;b3 < c; b3++)
          s2[b3] = a3[i2[b3]], u3[b3] = h5[i2[b3]];
      }, N3.prototype.transform = function(i2, a3, h5, s2, u3, c) {
        this.permute(c, i2, a3, h5, s2, u3);
        for (var b3 = 1;b3 < u3; b3 <<= 1)
          for (var l4 = b3 << 1, n4 = Math.cos(2 * Math.PI / l4), d2 = Math.sin(2 * Math.PI / l4), w2 = 0;w2 < u3; w2 += l4)
            for (var g2 = n4, _3 = d2, A6 = 0;A6 < b3; A6++) {
              var R3 = h5[w2 + A6], I2 = s2[w2 + A6], Me = h5[w2 + A6 + b3], k2 = s2[w2 + A6 + b3], D2 = g2 * Me - _3 * k2;
              k2 = g2 * k2 + _3 * Me, Me = D2, h5[w2 + A6] = R3 + Me, s2[w2 + A6] = I2 + k2, h5[w2 + A6 + b3] = R3 - Me, s2[w2 + A6 + b3] = I2 - k2, A6 !== l4 && (D2 = n4 * g2 - d2 * _3, _3 = n4 * _3 + d2 * g2, g2 = D2);
            }
      }, N3.prototype.guessLen13b = function(i2, a3) {
        var h5 = Math.max(a3, i2) | 1, s2 = h5 & 1, u3 = 0;
        for (h5 = h5 / 2 | 0;h5; h5 = h5 >>> 1)
          u3++;
        return 1 << u3 + 1 + s2;
      }, N3.prototype.conjugate = function(i2, a3, h5) {
        if (!(h5 <= 1))
          for (var s2 = 0;s2 < h5 / 2; s2++) {
            var u3 = i2[s2];
            i2[s2] = i2[h5 - s2 - 1], i2[h5 - s2 - 1] = u3, u3 = a3[s2], a3[s2] = -a3[h5 - s2 - 1], a3[h5 - s2 - 1] = -u3;
          }
      }, N3.prototype.normalize13b = function(i2, a3) {
        for (var h5 = 0, s2 = 0;s2 < a3 / 2; s2++) {
          var u3 = Math.round(i2[2 * s2 + 1] / a3) * 8192 + Math.round(i2[2 * s2] / a3) + h5;
          i2[s2] = u3 & 67108863, u3 < 67108864 ? h5 = 0 : h5 = u3 / 67108864 | 0;
        }
        return i2;
      }, N3.prototype.convert13b = function(i2, a3, h5, s2) {
        for (var u3 = 0, c = 0;c < a3; c++)
          u3 = u3 + (i2[c] | 0), h5[2 * c] = u3 & 8191, u3 = u3 >>> 13, h5[2 * c + 1] = u3 & 8191, u3 = u3 >>> 13;
        for (c = 2 * a3;c < s2; ++c)
          h5[c] = 0;
        r2(u3 === 0), r2((u3 & -8192) === 0);
      }, N3.prototype.stub = function(i2) {
        for (var a3 = new Array(i2), h5 = 0;h5 < i2; h5++)
          a3[h5] = 0;
        return a3;
      }, N3.prototype.mulp = function(i2, a3, h5) {
        var s2 = 2 * this.guessLen13b(i2.length, a3.length), u3 = this.makeRBT(s2), c = this.stub(s2), b3 = new Array(s2), l4 = new Array(s2), n4 = new Array(s2), d2 = new Array(s2), w2 = new Array(s2), g2 = new Array(s2), _3 = h5.words;
        _3.length = s2, this.convert13b(i2.words, i2.length, b3, s2), this.convert13b(a3.words, a3.length, d2, s2), this.transform(b3, c, l4, n4, s2, u3), this.transform(d2, c, w2, g2, s2, u3);
        for (var A6 = 0;A6 < s2; A6++) {
          var R3 = l4[A6] * w2[A6] - n4[A6] * g2[A6];
          n4[A6] = l4[A6] * g2[A6] + n4[A6] * w2[A6], l4[A6] = R3;
        }
        return this.conjugate(l4, n4, s2), this.transform(l4, n4, _3, c, s2, u3), this.conjugate(_3, c, s2), this.normalize13b(_3, s2), h5.negative = i2.negative ^ a3.negative, h5.length = i2.length + a3.length, h5.strip();
      }, f4.prototype.mul = function(i2) {
        var a3 = new f4(null);
        return a3.words = new Array(this.length + i2.length), this.mulTo(i2, a3);
      }, f4.prototype.mulf = function(i2) {
        var a3 = new f4(null);
        return a3.words = new Array(this.length + i2.length), _e(this, i2, a3);
      }, f4.prototype.imul = function(i2) {
        return this.clone().mulTo(i2, this);
      }, f4.prototype.imuln = function(i2) {
        r2(typeof i2 == "number"), r2(i2 < 67108864);
        for (var a3 = 0, h5 = 0;h5 < this.length; h5++) {
          var s2 = (this.words[h5] | 0) * i2, u3 = (s2 & 67108863) + (a3 & 67108863);
          a3 >>= 26, a3 += s2 / 67108864 | 0, a3 += u3 >>> 26, this.words[h5] = u3 & 67108863;
        }
        return a3 !== 0 && (this.words[h5] = a3, this.length++), this;
      }, f4.prototype.muln = function(i2) {
        return this.clone().imuln(i2);
      }, f4.prototype.sqr = function() {
        return this.mul(this);
      }, f4.prototype.isqr = function() {
        return this.imul(this.clone());
      }, f4.prototype.pow = function(i2) {
        var a3 = B5(i2);
        if (a3.length === 0)
          return new f4(1);
        for (var h5 = this, s2 = 0;s2 < a3.length && a3[s2] === 0; s2++, h5 = h5.sqr())
          ;
        if (++s2 < a3.length)
          for (var u3 = h5.sqr();s2 < a3.length; s2++, u3 = u3.sqr())
            a3[s2] !== 0 && (h5 = h5.mul(u3));
        return h5;
      }, f4.prototype.iushln = function(i2) {
        r2(typeof i2 == "number" && i2 >= 0);
        var a3 = i2 % 26, h5 = (i2 - a3) / 26, s2 = 67108863 >>> 26 - a3 << 26 - a3, u3;
        if (a3 !== 0) {
          var c = 0;
          for (u3 = 0;u3 < this.length; u3++) {
            var b3 = this.words[u3] & s2, l4 = (this.words[u3] | 0) - b3 << a3;
            this.words[u3] = l4 | c, c = b3 >>> 26 - a3;
          }
          c && (this.words[u3] = c, this.length++);
        }
        if (h5 !== 0) {
          for (u3 = this.length - 1;u3 >= 0; u3--)
            this.words[u3 + h5] = this.words[u3];
          for (u3 = 0;u3 < h5; u3++)
            this.words[u3] = 0;
          this.length += h5;
        }
        return this.strip();
      }, f4.prototype.ishln = function(i2) {
        return r2(this.negative === 0), this.iushln(i2);
      }, f4.prototype.iushrn = function(i2, a3, h5) {
        r2(typeof i2 == "number" && i2 >= 0);
        var s2;
        a3 ? s2 = (a3 - a3 % 26) / 26 : s2 = 0;
        var u3 = i2 % 26, c = Math.min((i2 - u3) / 26, this.length), b3 = 67108863 ^ 67108863 >>> u3 << u3, l4 = h5;
        if (s2 -= c, s2 = Math.max(0, s2), l4) {
          for (var n4 = 0;n4 < c; n4++)
            l4.words[n4] = this.words[n4];
          l4.length = c;
        }
        if (c !== 0)
          if (this.length > c)
            for (this.length -= c, n4 = 0;n4 < this.length; n4++)
              this.words[n4] = this.words[n4 + c];
          else
            this.words[0] = 0, this.length = 1;
        var d2 = 0;
        for (n4 = this.length - 1;n4 >= 0 && (d2 !== 0 || n4 >= s2); n4--) {
          var w2 = this.words[n4] | 0;
          this.words[n4] = d2 << 26 - u3 | w2 >>> u3, d2 = w2 & b3;
        }
        return l4 && d2 !== 0 && (l4.words[l4.length++] = d2), this.length === 0 && (this.words[0] = 0, this.length = 1), this.strip();
      }, f4.prototype.ishrn = function(i2, a3, h5) {
        return r2(this.negative === 0), this.iushrn(i2, a3, h5);
      }, f4.prototype.shln = function(i2) {
        return this.clone().ishln(i2);
      }, f4.prototype.ushln = function(i2) {
        return this.clone().iushln(i2);
      }, f4.prototype.shrn = function(i2) {
        return this.clone().ishrn(i2);
      }, f4.prototype.ushrn = function(i2) {
        return this.clone().iushrn(i2);
      }, f4.prototype.testn = function(i2) {
        r2(typeof i2 == "number" && i2 >= 0);
        var a3 = i2 % 26, h5 = (i2 - a3) / 26, s2 = 1 << a3;
        if (this.length <= h5)
          return false;
        var u3 = this.words[h5];
        return !!(u3 & s2);
      }, f4.prototype.imaskn = function(i2) {
        r2(typeof i2 == "number" && i2 >= 0);
        var a3 = i2 % 26, h5 = (i2 - a3) / 26;
        if (r2(this.negative === 0, "imaskn works only with positive numbers"), this.length <= h5)
          return this;
        if (a3 !== 0 && h5++, this.length = Math.min(h5, this.length), a3 !== 0) {
          var s2 = 67108863 ^ 67108863 >>> a3 << a3;
          this.words[this.length - 1] &= s2;
        }
        return this.strip();
      }, f4.prototype.maskn = function(i2) {
        return this.clone().imaskn(i2);
      }, f4.prototype.iaddn = function(i2) {
        return r2(typeof i2 == "number"), r2(i2 < 67108864), i2 < 0 ? this.isubn(-i2) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) < i2 ? (this.words[0] = i2 - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(i2), this.negative = 1, this) : this._iaddn(i2);
      }, f4.prototype._iaddn = function(i2) {
        this.words[0] += i2;
        for (var a3 = 0;a3 < this.length && this.words[a3] >= 67108864; a3++)
          this.words[a3] -= 67108864, a3 === this.length - 1 ? this.words[a3 + 1] = 1 : this.words[a3 + 1]++;
        return this.length = Math.max(this.length, a3 + 1), this;
      }, f4.prototype.isubn = function(i2) {
        if (r2(typeof i2 == "number"), r2(i2 < 67108864), i2 < 0)
          return this.iaddn(-i2);
        if (this.negative !== 0)
          return this.negative = 0, this.iaddn(i2), this.negative = 1, this;
        if (this.words[0] -= i2, this.length === 1 && this.words[0] < 0)
          this.words[0] = -this.words[0], this.negative = 1;
        else
          for (var a3 = 0;a3 < this.length && this.words[a3] < 0; a3++)
            this.words[a3] += 67108864, this.words[a3 + 1] -= 1;
        return this.strip();
      }, f4.prototype.addn = function(i2) {
        return this.clone().iaddn(i2);
      }, f4.prototype.subn = function(i2) {
        return this.clone().isubn(i2);
      }, f4.prototype.iabs = function() {
        return this.negative = 0, this;
      }, f4.prototype.abs = function() {
        return this.clone().iabs();
      }, f4.prototype._ishlnsubmul = function(i2, a3, h5) {
        var s2 = i2.length + h5, u3;
        this._expand(s2);
        var c, b3 = 0;
        for (u3 = 0;u3 < i2.length; u3++) {
          c = (this.words[u3 + h5] | 0) + b3;
          var l4 = (i2.words[u3] | 0) * a3;
          c -= l4 & 67108863, b3 = (c >> 26) - (l4 / 67108864 | 0), this.words[u3 + h5] = c & 67108863;
        }
        for (;u3 < this.length - h5; u3++)
          c = (this.words[u3 + h5] | 0) + b3, b3 = c >> 26, this.words[u3 + h5] = c & 67108863;
        if (b3 === 0)
          return this.strip();
        for (r2(b3 === -1), b3 = 0, u3 = 0;u3 < this.length; u3++)
          c = -(this.words[u3] | 0) + b3, b3 = c >> 26, this.words[u3] = c & 67108863;
        return this.negative = 1, this.strip();
      }, f4.prototype._wordDiv = function(i2, a3) {
        var h5 = this.length - i2.length, s2 = this.clone(), u3 = i2, c = u3.words[u3.length - 1] | 0, b3 = this._countBits(c);
        h5 = 26 - b3, h5 !== 0 && (u3 = u3.ushln(h5), s2.iushln(h5), c = u3.words[u3.length - 1] | 0);
        var l4 = s2.length - u3.length, n4;
        if (a3 !== "mod") {
          n4 = new f4(null), n4.length = l4 + 1, n4.words = new Array(n4.length);
          for (var d2 = 0;d2 < n4.length; d2++)
            n4.words[d2] = 0;
        }
        var w2 = s2.clone()._ishlnsubmul(u3, 1, l4);
        w2.negative === 0 && (s2 = w2, n4 && (n4.words[l4] = 1));
        for (var g2 = l4 - 1;g2 >= 0; g2--) {
          var _3 = (s2.words[u3.length + g2] | 0) * 67108864 + (s2.words[u3.length + g2 - 1] | 0);
          for (_3 = Math.min(_3 / c | 0, 67108863), s2._ishlnsubmul(u3, _3, g2);s2.negative !== 0; )
            _3--, s2.negative = 0, s2._ishlnsubmul(u3, 1, g2), s2.isZero() || (s2.negative ^= 1);
          n4 && (n4.words[g2] = _3);
        }
        return n4 && n4.strip(), s2.strip(), a3 !== "div" && h5 !== 0 && s2.iushrn(h5), { div: n4 || null, mod: s2 };
      }, f4.prototype.divmod = function(i2, a3, h5) {
        if (r2(!i2.isZero()), this.isZero())
          return { div: new f4(0), mod: new f4(0) };
        var s2, u3, c;
        return this.negative !== 0 && i2.negative === 0 ? (c = this.neg().divmod(i2, a3), a3 !== "mod" && (s2 = c.div.neg()), a3 !== "div" && (u3 = c.mod.neg(), h5 && u3.negative !== 0 && u3.iadd(i2)), { div: s2, mod: u3 }) : this.negative === 0 && i2.negative !== 0 ? (c = this.divmod(i2.neg(), a3), a3 !== "mod" && (s2 = c.div.neg()), { div: s2, mod: c.mod }) : (this.negative & i2.negative) !== 0 ? (c = this.neg().divmod(i2.neg(), a3), a3 !== "div" && (u3 = c.mod.neg(), h5 && u3.negative !== 0 && u3.isub(i2)), { div: c.div, mod: u3 }) : i2.length > this.length || this.cmp(i2) < 0 ? { div: new f4(0), mod: this } : i2.length === 1 ? a3 === "div" ? { div: this.divn(i2.words[0]), mod: null } : a3 === "mod" ? { div: null, mod: new f4(this.modn(i2.words[0])) } : { div: this.divn(i2.words[0]), mod: new f4(this.modn(i2.words[0])) } : this._wordDiv(i2, a3);
      }, f4.prototype.div = function(i2) {
        return this.divmod(i2, "div", false).div;
      }, f4.prototype.mod = function(i2) {
        return this.divmod(i2, "mod", false).mod;
      }, f4.prototype.umod = function(i2) {
        return this.divmod(i2, "mod", true).mod;
      }, f4.prototype.divRound = function(i2) {
        var a3 = this.divmod(i2);
        if (a3.mod.isZero())
          return a3.div;
        var h5 = a3.div.negative !== 0 ? a3.mod.isub(i2) : a3.mod, s2 = i2.ushrn(1), u3 = i2.andln(1), c = h5.cmp(s2);
        return c < 0 || u3 === 1 && c === 0 ? a3.div : a3.div.negative !== 0 ? a3.div.isubn(1) : a3.div.iaddn(1);
      }, f4.prototype.modn = function(i2) {
        r2(i2 <= 67108863);
        for (var a3 = (1 << 26) % i2, h5 = 0, s2 = this.length - 1;s2 >= 0; s2--)
          h5 = (a3 * h5 + (this.words[s2] | 0)) % i2;
        return h5;
      }, f4.prototype.idivn = function(i2) {
        r2(i2 <= 67108863);
        for (var a3 = 0, h5 = this.length - 1;h5 >= 0; h5--) {
          var s2 = (this.words[h5] | 0) + a3 * 67108864;
          this.words[h5] = s2 / i2 | 0, a3 = s2 % i2;
        }
        return this.strip();
      }, f4.prototype.divn = function(i2) {
        return this.clone().idivn(i2);
      }, f4.prototype.egcd = function(i2) {
        r2(i2.negative === 0), r2(!i2.isZero());
        var a3 = this, h5 = i2.clone();
        a3.negative !== 0 ? a3 = a3.umod(i2) : a3 = a3.clone();
        for (var s2 = new f4(1), u3 = new f4(0), c = new f4(0), b3 = new f4(1), l4 = 0;a3.isEven() && h5.isEven(); )
          a3.iushrn(1), h5.iushrn(1), ++l4;
        for (var n4 = h5.clone(), d2 = a3.clone();!a3.isZero(); ) {
          for (var w2 = 0, g2 = 1;(a3.words[0] & g2) === 0 && w2 < 26; ++w2, g2 <<= 1)
            ;
          if (w2 > 0)
            for (a3.iushrn(w2);w2-- > 0; )
              (s2.isOdd() || u3.isOdd()) && (s2.iadd(n4), u3.isub(d2)), s2.iushrn(1), u3.iushrn(1);
          for (var _3 = 0, A6 = 1;(h5.words[0] & A6) === 0 && _3 < 26; ++_3, A6 <<= 1)
            ;
          if (_3 > 0)
            for (h5.iushrn(_3);_3-- > 0; )
              (c.isOdd() || b3.isOdd()) && (c.iadd(n4), b3.isub(d2)), c.iushrn(1), b3.iushrn(1);
          a3.cmp(h5) >= 0 ? (a3.isub(h5), s2.isub(c), u3.isub(b3)) : (h5.isub(a3), c.isub(s2), b3.isub(u3));
        }
        return { a: c, b: b3, gcd: h5.iushln(l4) };
      }, f4.prototype._invmp = function(i2) {
        r2(i2.negative === 0), r2(!i2.isZero());
        var a3 = this, h5 = i2.clone();
        a3.negative !== 0 ? a3 = a3.umod(i2) : a3 = a3.clone();
        for (var s2 = new f4(1), u3 = new f4(0), c = h5.clone();a3.cmpn(1) > 0 && h5.cmpn(1) > 0; ) {
          for (var b3 = 0, l4 = 1;(a3.words[0] & l4) === 0 && b3 < 26; ++b3, l4 <<= 1)
            ;
          if (b3 > 0)
            for (a3.iushrn(b3);b3-- > 0; )
              s2.isOdd() && s2.iadd(c), s2.iushrn(1);
          for (var n4 = 0, d2 = 1;(h5.words[0] & d2) === 0 && n4 < 26; ++n4, d2 <<= 1)
            ;
          if (n4 > 0)
            for (h5.iushrn(n4);n4-- > 0; )
              u3.isOdd() && u3.iadd(c), u3.iushrn(1);
          a3.cmp(h5) >= 0 ? (a3.isub(h5), s2.isub(u3)) : (h5.isub(a3), u3.isub(s2));
        }
        var w2;
        return a3.cmpn(1) === 0 ? w2 = s2 : w2 = u3, w2.cmpn(0) < 0 && w2.iadd(i2), w2;
      }, f4.prototype.gcd = function(i2) {
        if (this.isZero())
          return i2.abs();
        if (i2.isZero())
          return this.abs();
        var a3 = this.clone(), h5 = i2.clone();
        a3.negative = 0, h5.negative = 0;
        for (var s2 = 0;a3.isEven() && h5.isEven(); s2++)
          a3.iushrn(1), h5.iushrn(1);
        do {
          for (;a3.isEven(); )
            a3.iushrn(1);
          for (;h5.isEven(); )
            h5.iushrn(1);
          var u3 = a3.cmp(h5);
          if (u3 < 0) {
            var c = a3;
            a3 = h5, h5 = c;
          } else if (u3 === 0 || h5.cmpn(1) === 0)
            break;
          a3.isub(h5);
        } while (true);
        return h5.iushln(s2);
      }, f4.prototype.invm = function(i2) {
        return this.egcd(i2).a.umod(i2);
      }, f4.prototype.isEven = function() {
        return (this.words[0] & 1) === 0;
      }, f4.prototype.isOdd = function() {
        return (this.words[0] & 1) === 1;
      }, f4.prototype.andln = function(i2) {
        return this.words[0] & i2;
      }, f4.prototype.bincn = function(i2) {
        r2(typeof i2 == "number");
        var a3 = i2 % 26, h5 = (i2 - a3) / 26, s2 = 1 << a3;
        if (this.length <= h5)
          return this._expand(h5 + 1), this.words[h5] |= s2, this;
        for (var u3 = s2, c = h5;u3 !== 0 && c < this.length; c++) {
          var b3 = this.words[c] | 0;
          b3 += u3, u3 = b3 >>> 26, b3 &= 67108863, this.words[c] = b3;
        }
        return u3 !== 0 && (this.words[c] = u3, this.length++), this;
      }, f4.prototype.isZero = function() {
        return this.length === 1 && this.words[0] === 0;
      }, f4.prototype.cmpn = function(i2) {
        var a3 = i2 < 0;
        if (this.negative !== 0 && !a3)
          return -1;
        if (this.negative === 0 && a3)
          return 1;
        this.strip();
        var h5;
        if (this.length > 1)
          h5 = 1;
        else {
          a3 && (i2 = -i2), r2(i2 <= 67108863, "Number is too big");
          var s2 = this.words[0] | 0;
          h5 = s2 === i2 ? 0 : s2 < i2 ? -1 : 1;
        }
        return this.negative !== 0 ? -h5 | 0 : h5;
      }, f4.prototype.cmp = function(i2) {
        if (this.negative !== 0 && i2.negative === 0)
          return -1;
        if (this.negative === 0 && i2.negative !== 0)
          return 1;
        var a3 = this.ucmp(i2);
        return this.negative !== 0 ? -a3 | 0 : a3;
      }, f4.prototype.ucmp = function(i2) {
        if (this.length > i2.length)
          return 1;
        if (this.length < i2.length)
          return -1;
        for (var a3 = 0, h5 = this.length - 1;h5 >= 0; h5--) {
          var s2 = this.words[h5] | 0, u3 = i2.words[h5] | 0;
          if (s2 !== u3) {
            s2 < u3 ? a3 = -1 : s2 > u3 && (a3 = 1);
            break;
          }
        }
        return a3;
      }, f4.prototype.gtn = function(i2) {
        return this.cmpn(i2) === 1;
      }, f4.prototype.gt = function(i2) {
        return this.cmp(i2) === 1;
      }, f4.prototype.gten = function(i2) {
        return this.cmpn(i2) >= 0;
      }, f4.prototype.gte = function(i2) {
        return this.cmp(i2) >= 0;
      }, f4.prototype.ltn = function(i2) {
        return this.cmpn(i2) === -1;
      }, f4.prototype.lt = function(i2) {
        return this.cmp(i2) === -1;
      }, f4.prototype.lten = function(i2) {
        return this.cmpn(i2) <= 0;
      }, f4.prototype.lte = function(i2) {
        return this.cmp(i2) <= 0;
      }, f4.prototype.eqn = function(i2) {
        return this.cmpn(i2) === 0;
      }, f4.prototype.eq = function(i2) {
        return this.cmp(i2) === 0;
      }, f4.red = function(i2) {
        return new P3(i2);
      }, f4.prototype.toRed = function(i2) {
        return r2(!this.red, "Already a number in reduction context"), r2(this.negative === 0, "red works only with positives"), i2.convertTo(this)._forceRed(i2);
      }, f4.prototype.fromRed = function() {
        return r2(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
      }, f4.prototype._forceRed = function(i2) {
        return this.red = i2, this;
      }, f4.prototype.forceRed = function(i2) {
        return r2(!this.red, "Already a number in reduction context"), this._forceRed(i2);
      }, f4.prototype.redAdd = function(i2) {
        return r2(this.red, "redAdd works only with red numbers"), this.red.add(this, i2);
      }, f4.prototype.redIAdd = function(i2) {
        return r2(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, i2);
      }, f4.prototype.redSub = function(i2) {
        return r2(this.red, "redSub works only with red numbers"), this.red.sub(this, i2);
      }, f4.prototype.redISub = function(i2) {
        return r2(this.red, "redISub works only with red numbers"), this.red.isub(this, i2);
      }, f4.prototype.redShl = function(i2) {
        return r2(this.red, "redShl works only with red numbers"), this.red.shl(this, i2);
      }, f4.prototype.redMul = function(i2) {
        return r2(this.red, "redMul works only with red numbers"), this.red._verify2(this, i2), this.red.mul(this, i2);
      }, f4.prototype.redIMul = function(i2) {
        return r2(this.red, "redMul works only with red numbers"), this.red._verify2(this, i2), this.red.imul(this, i2);
      }, f4.prototype.redSqr = function() {
        return r2(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
      }, f4.prototype.redISqr = function() {
        return r2(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
      }, f4.prototype.redSqrt = function() {
        return r2(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
      }, f4.prototype.redInvm = function() {
        return r2(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
      }, f4.prototype.redNeg = function() {
        return r2(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
      }, f4.prototype.redPow = function(i2) {
        return r2(this.red && !i2.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, i2);
      };
      var we = { k256: null, p224: null, p192: null, p25519: null };
      function ye(v3, i2) {
        this.name = v3, this.p = new f4(i2, 16), this.n = this.p.bitLength(), this.k = new f4(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
      }
      ye.prototype._tmp = function() {
        var i2 = new f4(null);
        return i2.words = new Array(Math.ceil(this.n / 13)), i2;
      }, ye.prototype.ireduce = function(i2) {
        var a3 = i2, h5;
        do
          this.split(a3, this.tmp), a3 = this.imulK(a3), a3 = a3.iadd(this.tmp), h5 = a3.bitLength();
        while (h5 > this.n);
        var s2 = h5 < this.n ? -1 : a3.ucmp(this.p);
        return s2 === 0 ? (a3.words[0] = 0, a3.length = 1) : s2 > 0 ? a3.isub(this.p) : a3.strip !== undefined ? a3.strip() : a3._strip(), a3;
      }, ye.prototype.split = function(i2, a3) {
        i2.iushrn(this.n, 0, a3);
      }, ye.prototype.imulK = function(i2) {
        return i2.imul(this.k);
      };
      function xe() {
        ye.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      o2(xe, ye), xe.prototype.split = function(i2, a3) {
        for (var h5 = 4194303, s2 = Math.min(i2.length, 9), u3 = 0;u3 < s2; u3++)
          a3.words[u3] = i2.words[u3];
        if (a3.length = s2, i2.length <= 9) {
          i2.words[0] = 0, i2.length = 1;
          return;
        }
        var c = i2.words[9];
        for (a3.words[a3.length++] = c & h5, u3 = 10;u3 < i2.length; u3++) {
          var b3 = i2.words[u3] | 0;
          i2.words[u3 - 10] = (b3 & h5) << 4 | c >>> 22, c = b3;
        }
        c >>>= 22, i2.words[u3 - 10] = c, c === 0 && i2.length > 10 ? i2.length -= 10 : i2.length -= 9;
      }, xe.prototype.imulK = function(i2) {
        i2.words[i2.length] = 0, i2.words[i2.length + 1] = 0, i2.length += 2;
        for (var a3 = 0, h5 = 0;h5 < i2.length; h5++) {
          var s2 = i2.words[h5] | 0;
          a3 += s2 * 977, i2.words[h5] = a3 & 67108863, a3 = s2 * 64 + (a3 / 67108864 | 0);
        }
        return i2.words[i2.length - 1] === 0 && (i2.length--, i2.words[i2.length - 1] === 0 && i2.length--), i2;
      };
      function Re() {
        ye.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      o2(Re, ye);
      function Ee() {
        ye.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      o2(Ee, ye);
      function Ae() {
        ye.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      o2(Ae, ye), Ae.prototype.imulK = function(i2) {
        for (var a3 = 0, h5 = 0;h5 < i2.length; h5++) {
          var s2 = (i2.words[h5] | 0) * 19 + a3, u3 = s2 & 67108863;
          s2 >>>= 26, i2.words[h5] = u3, a3 = s2;
        }
        return a3 !== 0 && (i2.words[i2.length++] = a3), i2;
      }, f4._prime = function(i2) {
        if (we[i2])
          return we[i2];
        var a3;
        if (i2 === "k256")
          a3 = new xe;
        else if (i2 === "p224")
          a3 = new Re;
        else if (i2 === "p192")
          a3 = new Ee;
        else if (i2 === "p25519")
          a3 = new Ae;
        else
          throw new Error("Unknown prime " + i2);
        return we[i2] = a3, a3;
      };
      function P3(v3) {
        if (typeof v3 == "string") {
          var i2 = f4._prime(v3);
          this.m = i2.p, this.prime = i2;
        } else
          r2(v3.gtn(1), "modulus must be greater than 1"), this.m = v3, this.prime = null;
      }
      P3.prototype._verify1 = function(i2) {
        r2(i2.negative === 0, "red works only with positives"), r2(i2.red, "red works only with red numbers");
      }, P3.prototype._verify2 = function(i2, a3) {
        r2((i2.negative | a3.negative) === 0, "red works only with positives"), r2(i2.red && i2.red === a3.red, "red works only with red numbers");
      }, P3.prototype.imod = function(i2) {
        return this.prime ? this.prime.ireduce(i2)._forceRed(this) : i2.umod(this.m)._forceRed(this);
      }, P3.prototype.neg = function(i2) {
        return i2.isZero() ? i2.clone() : this.m.sub(i2)._forceRed(this);
      }, P3.prototype.add = function(i2, a3) {
        this._verify2(i2, a3);
        var h5 = i2.add(a3);
        return h5.cmp(this.m) >= 0 && h5.isub(this.m), h5._forceRed(this);
      }, P3.prototype.iadd = function(i2, a3) {
        this._verify2(i2, a3);
        var h5 = i2.iadd(a3);
        return h5.cmp(this.m) >= 0 && h5.isub(this.m), h5;
      }, P3.prototype.sub = function(i2, a3) {
        this._verify2(i2, a3);
        var h5 = i2.sub(a3);
        return h5.cmpn(0) < 0 && h5.iadd(this.m), h5._forceRed(this);
      }, P3.prototype.isub = function(i2, a3) {
        this._verify2(i2, a3);
        var h5 = i2.isub(a3);
        return h5.cmpn(0) < 0 && h5.iadd(this.m), h5;
      }, P3.prototype.shl = function(i2, a3) {
        return this._verify1(i2), this.imod(i2.ushln(a3));
      }, P3.prototype.imul = function(i2, a3) {
        return this._verify2(i2, a3), this.imod(i2.imul(a3));
      }, P3.prototype.mul = function(i2, a3) {
        return this._verify2(i2, a3), this.imod(i2.mul(a3));
      }, P3.prototype.isqr = function(i2) {
        return this.imul(i2, i2.clone());
      }, P3.prototype.sqr = function(i2) {
        return this.mul(i2, i2);
      }, P3.prototype.sqrt = function(i2) {
        if (i2.isZero())
          return i2.clone();
        var a3 = this.m.andln(3);
        if (r2(a3 % 2 === 1), a3 === 3) {
          var h5 = this.m.add(new f4(1)).iushrn(2);
          return this.pow(i2, h5);
        }
        for (var s2 = this.m.subn(1), u3 = 0;!s2.isZero() && s2.andln(1) === 0; )
          u3++, s2.iushrn(1);
        r2(!s2.isZero());
        var c = new f4(1).toRed(this), b3 = c.redNeg(), l4 = this.m.subn(1).iushrn(1), n4 = this.m.bitLength();
        for (n4 = new f4(2 * n4 * n4).toRed(this);this.pow(n4, l4).cmp(b3) !== 0; )
          n4.redIAdd(b3);
        for (var d2 = this.pow(n4, s2), w2 = this.pow(i2, s2.addn(1).iushrn(1)), g2 = this.pow(i2, s2), _3 = u3;g2.cmp(c) !== 0; ) {
          for (var A6 = g2, R3 = 0;A6.cmp(c) !== 0; R3++)
            A6 = A6.redSqr();
          r2(R3 < _3);
          var I2 = this.pow(d2, new f4(1).iushln(_3 - R3 - 1));
          w2 = w2.redMul(I2), d2 = I2.redSqr(), g2 = g2.redMul(d2), _3 = R3;
        }
        return w2;
      }, P3.prototype.invm = function(i2) {
        var a3 = i2._invmp(this.m);
        return a3.negative !== 0 ? (a3.negative = 0, this.imod(a3).redNeg()) : this.imod(a3);
      }, P3.prototype.pow = function(i2, a3) {
        if (a3.isZero())
          return new f4(1).toRed(this);
        if (a3.cmpn(1) === 0)
          return i2.clone();
        var h5 = 4, s2 = new Array(1 << h5);
        s2[0] = new f4(1).toRed(this), s2[1] = i2;
        for (var u3 = 2;u3 < s2.length; u3++)
          s2[u3] = this.mul(s2[u3 - 1], i2);
        var c = s2[0], b3 = 0, l4 = 0, n4 = a3.bitLength() % 26;
        for (n4 === 0 && (n4 = 26), u3 = a3.length - 1;u3 >= 0; u3--) {
          for (var d2 = a3.words[u3], w2 = n4 - 1;w2 >= 0; w2--) {
            var g2 = d2 >> w2 & 1;
            if (c !== s2[0] && (c = this.sqr(c)), g2 === 0 && b3 === 0) {
              l4 = 0;
              continue;
            }
            b3 <<= 1, b3 |= g2, l4++, !(l4 !== h5 && (u3 !== 0 || w2 !== 0)) && (c = this.mul(c, s2[b3]), l4 = 0, b3 = 0);
          }
          n4 = 26;
        }
        return c;
      }, P3.prototype.convertTo = function(i2) {
        var a3 = i2.umod(this.m);
        return a3 === i2 ? a3.clone() : a3;
      }, P3.prototype.convertFrom = function(i2) {
        var a3 = i2.clone();
        return a3.red = null, a3;
      }, f4.mont = function(i2) {
        return new Se(i2);
      };
      function Se(v3) {
        P3.call(this, v3), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new f4(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
      }
      o2(Se, P3), Se.prototype.convertTo = function(i2) {
        return this.imod(i2.ushln(this.shift));
      }, Se.prototype.convertFrom = function(i2) {
        var a3 = this.imod(i2.mul(this.rinv));
        return a3.red = null, a3;
      }, Se.prototype.imul = function(i2, a3) {
        if (i2.isZero() || a3.isZero())
          return i2.words[0] = 0, i2.length = 1, i2;
        var h5 = i2.imul(a3), s2 = h5.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u3 = h5.isub(s2).iushrn(this.shift), c = u3;
        return u3.cmp(this.m) >= 0 ? c = u3.isub(this.m) : u3.cmpn(0) < 0 && (c = u3.iadd(this.m)), c._forceRed(this);
      }, Se.prototype.mul = function(i2, a3) {
        if (i2.isZero() || a3.isZero())
          return new f4(0)._forceRed(this);
        var h5 = i2.mul(a3), s2 = h5.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u3 = h5.isub(s2).iushrn(this.shift), c = u3;
        return u3.cmp(this.m) >= 0 ? c = u3.isub(this.m) : u3.cmpn(0) < 0 && (c = u3.iadd(this.m)), c._forceRed(this);
      }, Se.prototype.invm = function(i2) {
        var a3 = this.imod(i2._invmp(this.m).mul(this.r2));
        return a3._forceRed(this);
      };
    })(typeof gd > "u" || gd, I3);
  });
  L3 = T3((gL, k3) => {
    var cq = a02(), pq = T32();
    k3.exports = function(e3) {
      return new Zn(e3);
    };
    var hr = { secp256k1: { name: "secp256k1", byteLength: 32 }, secp224r1: { name: "p224", byteLength: 28 }, prime256v1: { name: "p256", byteLength: 32 }, prime192v1: { name: "p192", byteLength: 24 }, ed25519: { name: "ed25519", byteLength: 32 }, secp384r1: { name: "p384", byteLength: 48 }, secp521r1: { name: "p521", byteLength: 66 } };
    hr.p224 = hr.secp224r1;
    hr.p256 = hr.secp256r1 = hr.prime256v1;
    hr.p192 = hr.secp192r1 = hr.prime192v1;
    hr.p384 = hr.secp384r1;
    hr.p521 = hr.secp521r1;
    function Zn(t2) {
      this.curveType = hr[t2], this.curveType || (this.curveType = { name: t2 }), this.curve = new cq.ec(this.curveType.name), this.keys = undefined;
    }
    Zn.prototype.generateKeys = function(t2, e3) {
      return this.keys = this.curve.genKeyPair(), this.getPublicKey(t2, e3);
    };
    Zn.prototype.computeSecret = function(t2, e3, r2) {
      e3 = e3 || "utf8", Buffer.isBuffer(t2) || (t2 = new Buffer(t2, e3));
      var o2 = this.curve.keyFromPublic(t2).getPublic(), f4 = o2.mul(this.keys.getPrivate()).getX();
      return yd(f4, r2, this.curveType.byteLength);
    };
    Zn.prototype.getPublicKey = function(t2, e3) {
      var r2 = this.keys.getPublic(e3 === "compressed", true);
      return e3 === "hybrid" && (r2[r2.length - 1] % 2 ? r2[0] = 7 : r2[0] = 6), yd(r2, t2);
    };
    Zn.prototype.getPrivateKey = function(t2) {
      return yd(this.keys.getPrivate(), t2);
    };
    Zn.prototype.setPublicKey = function(t2, e3) {
      return e3 = e3 || "utf8", Buffer.isBuffer(t2) || (t2 = new Buffer(t2, e3)), this.keys._importPublic(t2), this;
    };
    Zn.prototype.setPrivateKey = function(t2, e3) {
      e3 = e3 || "utf8", Buffer.isBuffer(t2) || (t2 = new Buffer(t2, e3));
      var r2 = new pq(t2);
      return r2 = r2.toString(16), this.keys = this.curve.genKeyPair(), this.keys._importPrivate(r2), this;
    };
    function yd(t2, e3, r2) {
      Array.isArray(t2) || (t2 = t2.toArray());
      var o2 = new Buffer(t2);
      if (r2 && o2.length < r2) {
        var f4 = new Buffer(r2 - o2.length);
        f4.fill(0), o2 = Buffer.concat([f4, o2]);
      }
      return e3 ? o2.toString(e3) : o2;
    }
  });
  Md = T3((yL, N3) => {
    var vq = bf(), wd = Te().Buffer;
    N3.exports = function(t2, e3) {
      for (var r2 = wd.alloc(0), o2 = 0, f4;r2.length < e3; )
        f4 = bq(o2++), r2 = wd.concat([r2, vq("sha1").update(t2).update(f4).digest()]);
      return r2.slice(0, e3);
    };
    function bq(t2) {
      var e3 = wd.allocUnsafe(4);
      return e3.writeUInt32BE(t2, 0), e3;
    }
  });
  _d = T3((wL, D3) => {
    D3.exports = function(e3, r2) {
      for (var o2 = e3.length, f4 = -1;++f4 < o2; )
        e3[f4] ^= r2[f4];
      return e3;
    };
  });
  y02 = T3((P3, xd) => {
    (function(t2, e3) {
      function r2(v3, i2) {
        if (!v3)
          throw new Error(i2 || "Assertion failed");
      }
      function o2(v3, i2) {
        v3.super_ = i2;
        var a3 = function() {};
        a3.prototype = i2.prototype, v3.prototype = new a3, v3.prototype.constructor = v3;
      }
      function f4(v3, i2, a3) {
        if (f4.isBN(v3))
          return v3;
        this.negative = 0, this.words = null, this.length = 0, this.red = null, v3 !== null && ((i2 === "le" || i2 === "be") && (a3 = i2, i2 = 10), this._init(v3 || 0, i2 || 10, a3 || "be"));
      }
      typeof t2 == "object" ? t2.exports = f4 : e3.BN = f4, f4.BN = f4, f4.wordSize = 26;
      var p4;
      try {
        typeof window < "u" && typeof window.Buffer < "u" ? p4 = window.Buffer : p4 = ji().Buffer;
      } catch {}
      f4.isBN = function(i2) {
        return i2 instanceof f4 ? true : i2 !== null && typeof i2 == "object" && i2.constructor.wordSize === f4.wordSize && Array.isArray(i2.words);
      }, f4.max = function(i2, a3) {
        return i2.cmp(a3) > 0 ? i2 : a3;
      }, f4.min = function(i2, a3) {
        return i2.cmp(a3) < 0 ? i2 : a3;
      }, f4.prototype._init = function(i2, a3, h5) {
        if (typeof i2 == "number")
          return this._initNumber(i2, a3, h5);
        if (typeof i2 == "object")
          return this._initArray(i2, a3, h5);
        a3 === "hex" && (a3 = 16), r2(a3 === (a3 | 0) && a3 >= 2 && a3 <= 36), i2 = i2.toString().replace(/\s+/g, "");
        var s2 = 0;
        i2[0] === "-" && (s2++, this.negative = 1), s2 < i2.length && (a3 === 16 ? this._parseHex(i2, s2, h5) : (this._parseBase(i2, a3, s2), h5 === "le" && this._initArray(this.toArray(), a3, h5)));
      }, f4.prototype._initNumber = function(i2, a3, h5) {
        i2 < 0 && (this.negative = 1, i2 = -i2), i2 < 67108864 ? (this.words = [i2 & 67108863], this.length = 1) : i2 < 4503599627370496 ? (this.words = [i2 & 67108863, i2 / 67108864 & 67108863], this.length = 2) : (r2(i2 < 9007199254740992), this.words = [i2 & 67108863, i2 / 67108864 & 67108863, 1], this.length = 3), h5 === "le" && this._initArray(this.toArray(), a3, h5);
      }, f4.prototype._initArray = function(i2, a3, h5) {
        if (r2(typeof i2.length == "number"), i2.length <= 0)
          return this.words = [0], this.length = 1, this;
        this.length = Math.ceil(i2.length / 3), this.words = new Array(this.length);
        for (var s2 = 0;s2 < this.length; s2++)
          this.words[s2] = 0;
        var u3, c, b3 = 0;
        if (h5 === "be")
          for (s2 = i2.length - 1, u3 = 0;s2 >= 0; s2 -= 3)
            c = i2[s2] | i2[s2 - 1] << 8 | i2[s2 - 2] << 16, this.words[u3] |= c << b3 & 67108863, this.words[u3 + 1] = c >>> 26 - b3 & 67108863, b3 += 24, b3 >= 26 && (b3 -= 26, u3++);
        else if (h5 === "le")
          for (s2 = 0, u3 = 0;s2 < i2.length; s2 += 3)
            c = i2[s2] | i2[s2 + 1] << 8 | i2[s2 + 2] << 16, this.words[u3] |= c << b3 & 67108863, this.words[u3 + 1] = c >>> 26 - b3 & 67108863, b3 += 24, b3 >= 26 && (b3 -= 26, u3++);
        return this.strip();
      };
      function m4(v3, i2) {
        var a3 = v3.charCodeAt(i2);
        return a3 >= 65 && a3 <= 70 ? a3 - 55 : a3 >= 97 && a3 <= 102 ? a3 - 87 : a3 - 48 & 15;
      }
      function y4(v3, i2, a3) {
        var h5 = m4(v3, a3);
        return a3 - 1 >= i2 && (h5 |= m4(v3, a3 - 1) << 4), h5;
      }
      f4.prototype._parseHex = function(i2, a3, h5) {
        this.length = Math.ceil((i2.length - a3) / 6), this.words = new Array(this.length);
        for (var s2 = 0;s2 < this.length; s2++)
          this.words[s2] = 0;
        var u3 = 0, c = 0, b3;
        if (h5 === "be")
          for (s2 = i2.length - 1;s2 >= a3; s2 -= 2)
            b3 = y4(i2, a3, s2) << u3, this.words[c] |= b3 & 67108863, u3 >= 18 ? (u3 -= 18, c += 1, this.words[c] |= b3 >>> 26) : u3 += 8;
        else {
          var l4 = i2.length - a3;
          for (s2 = l4 % 2 === 0 ? a3 + 1 : a3;s2 < i2.length; s2 += 2)
            b3 = y4(i2, a3, s2) << u3, this.words[c] |= b3 & 67108863, u3 >= 18 ? (u3 -= 18, c += 1, this.words[c] |= b3 >>> 26) : u3 += 8;
        }
        this.strip();
      };
      function M3(v3, i2, a3, h5) {
        for (var s2 = 0, u3 = Math.min(v3.length, a3), c = i2;c < u3; c++) {
          var b3 = v3.charCodeAt(c) - 48;
          s2 *= h5, b3 >= 49 ? s2 += b3 - 49 + 10 : b3 >= 17 ? s2 += b3 - 17 + 10 : s2 += b3;
        }
        return s2;
      }
      f4.prototype._parseBase = function(i2, a3, h5) {
        this.words = [0], this.length = 1;
        for (var s2 = 0, u3 = 1;u3 <= 67108863; u3 *= a3)
          s2++;
        s2--, u3 = u3 / a3 | 0;
        for (var c = i2.length - h5, b3 = c % s2, l4 = Math.min(c, c - b3) + h5, n4 = 0, d2 = h5;d2 < l4; d2 += s2)
          n4 = M3(i2, d2, d2 + s2, a3), this.imuln(u3), this.words[0] + n4 < 67108864 ? this.words[0] += n4 : this._iaddn(n4);
        if (b3 !== 0) {
          var w2 = 1;
          for (n4 = M3(i2, d2, i2.length, a3), d2 = 0;d2 < b3; d2++)
            w2 *= a3;
          this.imuln(w2), this.words[0] + n4 < 67108864 ? this.words[0] += n4 : this._iaddn(n4);
        }
        this.strip();
      }, f4.prototype.copy = function(i2) {
        i2.words = new Array(this.length);
        for (var a3 = 0;a3 < this.length; a3++)
          i2.words[a3] = this.words[a3];
        i2.length = this.length, i2.negative = this.negative, i2.red = this.red;
      }, f4.prototype.clone = function() {
        var i2 = new f4(null);
        return this.copy(i2), i2;
      }, f4.prototype._expand = function(i2) {
        for (;this.length < i2; )
          this.words[this.length++] = 0;
        return this;
      }, f4.prototype.strip = function() {
        for (;this.length > 1 && this.words[this.length - 1] === 0; )
          this.length--;
        return this._normSign();
      }, f4.prototype._normSign = function() {
        return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
      }, f4.prototype.inspect = function() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var x4 = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"], S3 = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], E3 = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
      f4.prototype.toString = function(i2, a3) {
        i2 = i2 || 10, a3 = a3 | 0 || 1;
        var h5;
        if (i2 === 16 || i2 === "hex") {
          h5 = "";
          for (var s2 = 0, u3 = 0, c = 0;c < this.length; c++) {
            var b3 = this.words[c], l4 = ((b3 << s2 | u3) & 16777215).toString(16);
            u3 = b3 >>> 24 - s2 & 16777215, u3 !== 0 || c !== this.length - 1 ? h5 = x4[6 - l4.length] + l4 + h5 : h5 = l4 + h5, s2 += 2, s2 >= 26 && (s2 -= 26, c--);
          }
          for (u3 !== 0 && (h5 = u3.toString(16) + h5);h5.length % a3 !== 0; )
            h5 = "0" + h5;
          return this.negative !== 0 && (h5 = "-" + h5), h5;
        }
        if (i2 === (i2 | 0) && i2 >= 2 && i2 <= 36) {
          var n4 = S3[i2], d2 = E3[i2];
          h5 = "";
          var w2 = this.clone();
          for (w2.negative = 0;!w2.isZero(); ) {
            var g2 = w2.modn(d2).toString(i2);
            w2 = w2.idivn(d2), w2.isZero() ? h5 = g2 + h5 : h5 = x4[n4 - g2.length] + g2 + h5;
          }
          for (this.isZero() && (h5 = "0" + h5);h5.length % a3 !== 0; )
            h5 = "0" + h5;
          return this.negative !== 0 && (h5 = "-" + h5), h5;
        }
        r2(false, "Base should be between 2 and 36");
      }, f4.prototype.toNumber = function() {
        var i2 = this.words[0];
        return this.length === 2 ? i2 += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? i2 += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && r2(false, "Number can only safely store up to 53 bits"), this.negative !== 0 ? -i2 : i2;
      }, f4.prototype.toJSON = function() {
        return this.toString(16);
      }, f4.prototype.toBuffer = function(i2, a3) {
        return r2(typeof p4 < "u"), this.toArrayLike(p4, i2, a3);
      }, f4.prototype.toArray = function(i2, a3) {
        return this.toArrayLike(Array, i2, a3);
      }, f4.prototype.toArrayLike = function(i2, a3, h5) {
        var s2 = this.byteLength(), u3 = h5 || Math.max(1, s2);
        r2(s2 <= u3, "byte array longer than desired length"), r2(u3 > 0, "Requested array length <= 0"), this.strip();
        var c = a3 === "le", b3 = new i2(u3), l4, n4, d2 = this.clone();
        if (c) {
          for (n4 = 0;!d2.isZero(); n4++)
            l4 = d2.andln(255), d2.iushrn(8), b3[n4] = l4;
          for (;n4 < u3; n4++)
            b3[n4] = 0;
        } else {
          for (n4 = 0;n4 < u3 - s2; n4++)
            b3[n4] = 0;
          for (n4 = 0;!d2.isZero(); n4++)
            l4 = d2.andln(255), d2.iushrn(8), b3[u3 - n4 - 1] = l4;
        }
        return b3;
      }, Math.clz32 ? f4.prototype._countBits = function(i2) {
        return 32 - Math.clz32(i2);
      } : f4.prototype._countBits = function(i2) {
        var a3 = i2, h5 = 0;
        return a3 >= 4096 && (h5 += 13, a3 >>>= 13), a3 >= 64 && (h5 += 7, a3 >>>= 7), a3 >= 8 && (h5 += 4, a3 >>>= 4), a3 >= 2 && (h5 += 2, a3 >>>= 2), h5 + a3;
      }, f4.prototype._zeroBits = function(i2) {
        if (i2 === 0)
          return 26;
        var a3 = i2, h5 = 0;
        return (a3 & 8191) === 0 && (h5 += 13, a3 >>>= 13), (a3 & 127) === 0 && (h5 += 7, a3 >>>= 7), (a3 & 15) === 0 && (h5 += 4, a3 >>>= 4), (a3 & 3) === 0 && (h5 += 2, a3 >>>= 2), (a3 & 1) === 0 && h5++, h5;
      }, f4.prototype.bitLength = function() {
        var i2 = this.words[this.length - 1], a3 = this._countBits(i2);
        return (this.length - 1) * 26 + a3;
      };
      function B5(v3) {
        for (var i2 = new Array(v3.bitLength()), a3 = 0;a3 < i2.length; a3++) {
          var h5 = a3 / 26 | 0, s2 = a3 % 26;
          i2[a3] = (v3.words[h5] & 1 << s2) >>> s2;
        }
        return i2;
      }
      f4.prototype.zeroBits = function() {
        if (this.isZero())
          return 0;
        for (var i2 = 0, a3 = 0;a3 < this.length; a3++) {
          var h5 = this._zeroBits(this.words[a3]);
          if (i2 += h5, h5 !== 26)
            break;
        }
        return i2;
      }, f4.prototype.byteLength = function() {
        return Math.ceil(this.bitLength() / 8);
      }, f4.prototype.toTwos = function(i2) {
        return this.negative !== 0 ? this.abs().inotn(i2).iaddn(1) : this.clone();
      }, f4.prototype.fromTwos = function(i2) {
        return this.testn(i2 - 1) ? this.notn(i2).iaddn(1).ineg() : this.clone();
      }, f4.prototype.isNeg = function() {
        return this.negative !== 0;
      }, f4.prototype.neg = function() {
        return this.clone().ineg();
      }, f4.prototype.ineg = function() {
        return this.isZero() || (this.negative ^= 1), this;
      }, f4.prototype.iuor = function(i2) {
        for (;this.length < i2.length; )
          this.words[this.length++] = 0;
        for (var a3 = 0;a3 < i2.length; a3++)
          this.words[a3] = this.words[a3] | i2.words[a3];
        return this.strip();
      }, f4.prototype.ior = function(i2) {
        return r2((this.negative | i2.negative) === 0), this.iuor(i2);
      }, f4.prototype.or = function(i2) {
        return this.length > i2.length ? this.clone().ior(i2) : i2.clone().ior(this);
      }, f4.prototype.uor = function(i2) {
        return this.length > i2.length ? this.clone().iuor(i2) : i2.clone().iuor(this);
      }, f4.prototype.iuand = function(i2) {
        var a3;
        this.length > i2.length ? a3 = i2 : a3 = this;
        for (var h5 = 0;h5 < a3.length; h5++)
          this.words[h5] = this.words[h5] & i2.words[h5];
        return this.length = a3.length, this.strip();
      }, f4.prototype.iand = function(i2) {
        return r2((this.negative | i2.negative) === 0), this.iuand(i2);
      }, f4.prototype.and = function(i2) {
        return this.length > i2.length ? this.clone().iand(i2) : i2.clone().iand(this);
      }, f4.prototype.uand = function(i2) {
        return this.length > i2.length ? this.clone().iuand(i2) : i2.clone().iuand(this);
      }, f4.prototype.iuxor = function(i2) {
        var a3, h5;
        this.length > i2.length ? (a3 = this, h5 = i2) : (a3 = i2, h5 = this);
        for (var s2 = 0;s2 < h5.length; s2++)
          this.words[s2] = a3.words[s2] ^ h5.words[s2];
        if (this !== a3)
          for (;s2 < a3.length; s2++)
            this.words[s2] = a3.words[s2];
        return this.length = a3.length, this.strip();
      }, f4.prototype.ixor = function(i2) {
        return r2((this.negative | i2.negative) === 0), this.iuxor(i2);
      }, f4.prototype.xor = function(i2) {
        return this.length > i2.length ? this.clone().ixor(i2) : i2.clone().ixor(this);
      }, f4.prototype.uxor = function(i2) {
        return this.length > i2.length ? this.clone().iuxor(i2) : i2.clone().iuxor(this);
      }, f4.prototype.inotn = function(i2) {
        r2(typeof i2 == "number" && i2 >= 0);
        var a3 = Math.ceil(i2 / 26) | 0, h5 = i2 % 26;
        this._expand(a3), h5 > 0 && a3--;
        for (var s2 = 0;s2 < a3; s2++)
          this.words[s2] = ~this.words[s2] & 67108863;
        return h5 > 0 && (this.words[s2] = ~this.words[s2] & 67108863 >> 26 - h5), this.strip();
      }, f4.prototype.notn = function(i2) {
        return this.clone().inotn(i2);
      }, f4.prototype.setn = function(i2, a3) {
        r2(typeof i2 == "number" && i2 >= 0);
        var h5 = i2 / 26 | 0, s2 = i2 % 26;
        return this._expand(h5 + 1), a3 ? this.words[h5] = this.words[h5] | 1 << s2 : this.words[h5] = this.words[h5] & ~(1 << s2), this.strip();
      }, f4.prototype.iadd = function(i2) {
        var a3;
        if (this.negative !== 0 && i2.negative === 0)
          return this.negative = 0, a3 = this.isub(i2), this.negative ^= 1, this._normSign();
        if (this.negative === 0 && i2.negative !== 0)
          return i2.negative = 0, a3 = this.isub(i2), i2.negative = 1, a3._normSign();
        var h5, s2;
        this.length > i2.length ? (h5 = this, s2 = i2) : (h5 = i2, s2 = this);
        for (var u3 = 0, c = 0;c < s2.length; c++)
          a3 = (h5.words[c] | 0) + (s2.words[c] | 0) + u3, this.words[c] = a3 & 67108863, u3 = a3 >>> 26;
        for (;u3 !== 0 && c < h5.length; c++)
          a3 = (h5.words[c] | 0) + u3, this.words[c] = a3 & 67108863, u3 = a3 >>> 26;
        if (this.length = h5.length, u3 !== 0)
          this.words[this.length] = u3, this.length++;
        else if (h5 !== this)
          for (;c < h5.length; c++)
            this.words[c] = h5.words[c];
        return this;
      }, f4.prototype.add = function(i2) {
        var a3;
        return i2.negative !== 0 && this.negative === 0 ? (i2.negative = 0, a3 = this.sub(i2), i2.negative ^= 1, a3) : i2.negative === 0 && this.negative !== 0 ? (this.negative = 0, a3 = i2.sub(this), this.negative = 1, a3) : this.length > i2.length ? this.clone().iadd(i2) : i2.clone().iadd(this);
      }, f4.prototype.isub = function(i2) {
        if (i2.negative !== 0) {
          i2.negative = 0;
          var a3 = this.iadd(i2);
          return i2.negative = 1, a3._normSign();
        } else if (this.negative !== 0)
          return this.negative = 0, this.iadd(i2), this.negative = 1, this._normSign();
        var h5 = this.cmp(i2);
        if (h5 === 0)
          return this.negative = 0, this.length = 1, this.words[0] = 0, this;
        var s2, u3;
        h5 > 0 ? (s2 = this, u3 = i2) : (s2 = i2, u3 = this);
        for (var c = 0, b3 = 0;b3 < u3.length; b3++)
          a3 = (s2.words[b3] | 0) - (u3.words[b3] | 0) + c, c = a3 >> 26, this.words[b3] = a3 & 67108863;
        for (;c !== 0 && b3 < s2.length; b3++)
          a3 = (s2.words[b3] | 0) + c, c = a3 >> 26, this.words[b3] = a3 & 67108863;
        if (c === 0 && b3 < s2.length && s2 !== this)
          for (;b3 < s2.length; b3++)
            this.words[b3] = s2.words[b3];
        return this.length = Math.max(this.length, b3), s2 !== this && (this.negative = 1), this.strip();
      }, f4.prototype.sub = function(i2) {
        return this.clone().isub(i2);
      };
      function q2(v3, i2, a3) {
        a3.negative = i2.negative ^ v3.negative;
        var h5 = v3.length + i2.length | 0;
        a3.length = h5, h5 = h5 - 1 | 0;
        var s2 = v3.words[0] | 0, u3 = i2.words[0] | 0, c = s2 * u3, b3 = c & 67108863, l4 = c / 67108864 | 0;
        a3.words[0] = b3;
        for (var n4 = 1;n4 < h5; n4++) {
          for (var d2 = l4 >>> 26, w2 = l4 & 67108863, g2 = Math.min(n4, i2.length - 1), _3 = Math.max(0, n4 - v3.length + 1);_3 <= g2; _3++) {
            var A6 = n4 - _3 | 0;
            s2 = v3.words[A6] | 0, u3 = i2.words[_3] | 0, c = s2 * u3 + w2, d2 += c / 67108864 | 0, w2 = c & 67108863;
          }
          a3.words[n4] = w2 | 0, l4 = d2 | 0;
        }
        return l4 !== 0 ? a3.words[n4] = l4 | 0 : a3.length--, a3.strip();
      }
      var L4 = function(i2, a3, h5) {
        var s2 = i2.words, u3 = a3.words, c = h5.words, b3 = 0, l4, n4, d2, w2 = s2[0] | 0, g2 = w2 & 8191, _3 = w2 >>> 13, A6 = s2[1] | 0, R3 = A6 & 8191, I2 = A6 >>> 13, Me = s2[2] | 0, k2 = Me & 8191, D2 = Me >>> 13, nt = s2[3] | 0, C3 = nt & 8191, O2 = nt >>> 13, vt = s2[4] | 0, F = vt & 8191, U3 = vt >>> 13, bt = s2[5] | 0, z3 = bt & 8191, H32 = bt >>> 13, mt = s2[6] | 0, W3 = mt & 8191, K = mt >>> 13, gt = s2[7] | 0, j2 = gt & 8191, Z3 = gt >>> 13, yt = s2[8] | 0, V4 = yt & 8191, $32 = yt >>> 13, wt = s2[9] | 0, G4 = wt & 8191, Y = wt >>> 13, Mt = u3[0] | 0, X3 = Mt & 8191, J = Mt >>> 13, _t = u3[1] | 0, Q3 = _t & 8191, ee = _t >>> 13, xt = u3[2] | 0, te = xt & 8191, re = xt >>> 13, St = u3[3] | 0, ie = St & 8191, ne = St >>> 13, Et = u3[4] | 0, fe = Et & 8191, ae = Et >>> 13, At = u3[5] | 0, oe = At & 8191, se = At >>> 13, Rt = u3[6] | 0, he = Rt & 8191, ue = Rt >>> 13, Bt = u3[7] | 0, le = Bt & 8191, de = Bt >>> 13, qt = u3[8] | 0, ce = qt & 8191, pe = qt >>> 13, It = u3[9] | 0, ve = It & 8191, be = It >>> 13;
        h5.negative = i2.negative ^ a3.negative, h5.length = 19, l4 = Math.imul(g2, X3), n4 = Math.imul(g2, J), n4 = n4 + Math.imul(_3, X3) | 0, d2 = Math.imul(_3, J);
        var ft = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (ft >>> 26) | 0, ft &= 67108863, l4 = Math.imul(R3, X3), n4 = Math.imul(R3, J), n4 = n4 + Math.imul(I2, X3) | 0, d2 = Math.imul(I2, J), l4 = l4 + Math.imul(g2, Q3) | 0, n4 = n4 + Math.imul(g2, ee) | 0, n4 = n4 + Math.imul(_3, Q3) | 0, d2 = d2 + Math.imul(_3, ee) | 0;
        var Be = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Be >>> 26) | 0, Be &= 67108863, l4 = Math.imul(k2, X3), n4 = Math.imul(k2, J), n4 = n4 + Math.imul(D2, X3) | 0, d2 = Math.imul(D2, J), l4 = l4 + Math.imul(R3, Q3) | 0, n4 = n4 + Math.imul(R3, ee) | 0, n4 = n4 + Math.imul(I2, Q3) | 0, d2 = d2 + Math.imul(I2, ee) | 0, l4 = l4 + Math.imul(g2, te) | 0, n4 = n4 + Math.imul(g2, re) | 0, n4 = n4 + Math.imul(_3, te) | 0, d2 = d2 + Math.imul(_3, re) | 0;
        var qe = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (qe >>> 26) | 0, qe &= 67108863, l4 = Math.imul(C3, X3), n4 = Math.imul(C3, J), n4 = n4 + Math.imul(O2, X3) | 0, d2 = Math.imul(O2, J), l4 = l4 + Math.imul(k2, Q3) | 0, n4 = n4 + Math.imul(k2, ee) | 0, n4 = n4 + Math.imul(D2, Q3) | 0, d2 = d2 + Math.imul(D2, ee) | 0, l4 = l4 + Math.imul(R3, te) | 0, n4 = n4 + Math.imul(R3, re) | 0, n4 = n4 + Math.imul(I2, te) | 0, d2 = d2 + Math.imul(I2, re) | 0, l4 = l4 + Math.imul(g2, ie) | 0, n4 = n4 + Math.imul(g2, ne) | 0, n4 = n4 + Math.imul(_3, ie) | 0, d2 = d2 + Math.imul(_3, ne) | 0;
        var ze = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (ze >>> 26) | 0, ze &= 67108863, l4 = Math.imul(F, X3), n4 = Math.imul(F, J), n4 = n4 + Math.imul(U3, X3) | 0, d2 = Math.imul(U3, J), l4 = l4 + Math.imul(C3, Q3) | 0, n4 = n4 + Math.imul(C3, ee) | 0, n4 = n4 + Math.imul(O2, Q3) | 0, d2 = d2 + Math.imul(O2, ee) | 0, l4 = l4 + Math.imul(k2, te) | 0, n4 = n4 + Math.imul(k2, re) | 0, n4 = n4 + Math.imul(D2, te) | 0, d2 = d2 + Math.imul(D2, re) | 0, l4 = l4 + Math.imul(R3, ie) | 0, n4 = n4 + Math.imul(R3, ne) | 0, n4 = n4 + Math.imul(I2, ie) | 0, d2 = d2 + Math.imul(I2, ne) | 0, l4 = l4 + Math.imul(g2, fe) | 0, n4 = n4 + Math.imul(g2, ae) | 0, n4 = n4 + Math.imul(_3, fe) | 0, d2 = d2 + Math.imul(_3, ae) | 0;
        var He = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (He >>> 26) | 0, He &= 67108863, l4 = Math.imul(z3, X3), n4 = Math.imul(z3, J), n4 = n4 + Math.imul(H32, X3) | 0, d2 = Math.imul(H32, J), l4 = l4 + Math.imul(F, Q3) | 0, n4 = n4 + Math.imul(F, ee) | 0, n4 = n4 + Math.imul(U3, Q3) | 0, d2 = d2 + Math.imul(U3, ee) | 0, l4 = l4 + Math.imul(C3, te) | 0, n4 = n4 + Math.imul(C3, re) | 0, n4 = n4 + Math.imul(O2, te) | 0, d2 = d2 + Math.imul(O2, re) | 0, l4 = l4 + Math.imul(k2, ie) | 0, n4 = n4 + Math.imul(k2, ne) | 0, n4 = n4 + Math.imul(D2, ie) | 0, d2 = d2 + Math.imul(D2, ne) | 0, l4 = l4 + Math.imul(R3, fe) | 0, n4 = n4 + Math.imul(R3, ae) | 0, n4 = n4 + Math.imul(I2, fe) | 0, d2 = d2 + Math.imul(I2, ae) | 0, l4 = l4 + Math.imul(g2, oe) | 0, n4 = n4 + Math.imul(g2, se) | 0, n4 = n4 + Math.imul(_3, oe) | 0, d2 = d2 + Math.imul(_3, se) | 0;
        var We = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (We >>> 26) | 0, We &= 67108863, l4 = Math.imul(W3, X3), n4 = Math.imul(W3, J), n4 = n4 + Math.imul(K, X3) | 0, d2 = Math.imul(K, J), l4 = l4 + Math.imul(z3, Q3) | 0, n4 = n4 + Math.imul(z3, ee) | 0, n4 = n4 + Math.imul(H32, Q3) | 0, d2 = d2 + Math.imul(H32, ee) | 0, l4 = l4 + Math.imul(F, te) | 0, n4 = n4 + Math.imul(F, re) | 0, n4 = n4 + Math.imul(U3, te) | 0, d2 = d2 + Math.imul(U3, re) | 0, l4 = l4 + Math.imul(C3, ie) | 0, n4 = n4 + Math.imul(C3, ne) | 0, n4 = n4 + Math.imul(O2, ie) | 0, d2 = d2 + Math.imul(O2, ne) | 0, l4 = l4 + Math.imul(k2, fe) | 0, n4 = n4 + Math.imul(k2, ae) | 0, n4 = n4 + Math.imul(D2, fe) | 0, d2 = d2 + Math.imul(D2, ae) | 0, l4 = l4 + Math.imul(R3, oe) | 0, n4 = n4 + Math.imul(R3, se) | 0, n4 = n4 + Math.imul(I2, oe) | 0, d2 = d2 + Math.imul(I2, se) | 0, l4 = l4 + Math.imul(g2, he) | 0, n4 = n4 + Math.imul(g2, ue) | 0, n4 = n4 + Math.imul(_3, he) | 0, d2 = d2 + Math.imul(_3, ue) | 0;
        var Ke = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ke >>> 26) | 0, Ke &= 67108863, l4 = Math.imul(j2, X3), n4 = Math.imul(j2, J), n4 = n4 + Math.imul(Z3, X3) | 0, d2 = Math.imul(Z3, J), l4 = l4 + Math.imul(W3, Q3) | 0, n4 = n4 + Math.imul(W3, ee) | 0, n4 = n4 + Math.imul(K, Q3) | 0, d2 = d2 + Math.imul(K, ee) | 0, l4 = l4 + Math.imul(z3, te) | 0, n4 = n4 + Math.imul(z3, re) | 0, n4 = n4 + Math.imul(H32, te) | 0, d2 = d2 + Math.imul(H32, re) | 0, l4 = l4 + Math.imul(F, ie) | 0, n4 = n4 + Math.imul(F, ne) | 0, n4 = n4 + Math.imul(U3, ie) | 0, d2 = d2 + Math.imul(U3, ne) | 0, l4 = l4 + Math.imul(C3, fe) | 0, n4 = n4 + Math.imul(C3, ae) | 0, n4 = n4 + Math.imul(O2, fe) | 0, d2 = d2 + Math.imul(O2, ae) | 0, l4 = l4 + Math.imul(k2, oe) | 0, n4 = n4 + Math.imul(k2, se) | 0, n4 = n4 + Math.imul(D2, oe) | 0, d2 = d2 + Math.imul(D2, se) | 0, l4 = l4 + Math.imul(R3, he) | 0, n4 = n4 + Math.imul(R3, ue) | 0, n4 = n4 + Math.imul(I2, he) | 0, d2 = d2 + Math.imul(I2, ue) | 0, l4 = l4 + Math.imul(g2, le) | 0, n4 = n4 + Math.imul(g2, de) | 0, n4 = n4 + Math.imul(_3, le) | 0, d2 = d2 + Math.imul(_3, de) | 0;
        var je = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (je >>> 26) | 0, je &= 67108863, l4 = Math.imul(V4, X3), n4 = Math.imul(V4, J), n4 = n4 + Math.imul($32, X3) | 0, d2 = Math.imul($32, J), l4 = l4 + Math.imul(j2, Q3) | 0, n4 = n4 + Math.imul(j2, ee) | 0, n4 = n4 + Math.imul(Z3, Q3) | 0, d2 = d2 + Math.imul(Z3, ee) | 0, l4 = l4 + Math.imul(W3, te) | 0, n4 = n4 + Math.imul(W3, re) | 0, n4 = n4 + Math.imul(K, te) | 0, d2 = d2 + Math.imul(K, re) | 0, l4 = l4 + Math.imul(z3, ie) | 0, n4 = n4 + Math.imul(z3, ne) | 0, n4 = n4 + Math.imul(H32, ie) | 0, d2 = d2 + Math.imul(H32, ne) | 0, l4 = l4 + Math.imul(F, fe) | 0, n4 = n4 + Math.imul(F, ae) | 0, n4 = n4 + Math.imul(U3, fe) | 0, d2 = d2 + Math.imul(U3, ae) | 0, l4 = l4 + Math.imul(C3, oe) | 0, n4 = n4 + Math.imul(C3, se) | 0, n4 = n4 + Math.imul(O2, oe) | 0, d2 = d2 + Math.imul(O2, se) | 0, l4 = l4 + Math.imul(k2, he) | 0, n4 = n4 + Math.imul(k2, ue) | 0, n4 = n4 + Math.imul(D2, he) | 0, d2 = d2 + Math.imul(D2, ue) | 0, l4 = l4 + Math.imul(R3, le) | 0, n4 = n4 + Math.imul(R3, de) | 0, n4 = n4 + Math.imul(I2, le) | 0, d2 = d2 + Math.imul(I2, de) | 0, l4 = l4 + Math.imul(g2, ce) | 0, n4 = n4 + Math.imul(g2, pe) | 0, n4 = n4 + Math.imul(_3, ce) | 0, d2 = d2 + Math.imul(_3, pe) | 0;
        var Ze = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ze >>> 26) | 0, Ze &= 67108863, l4 = Math.imul(G4, X3), n4 = Math.imul(G4, J), n4 = n4 + Math.imul(Y, X3) | 0, d2 = Math.imul(Y, J), l4 = l4 + Math.imul(V4, Q3) | 0, n4 = n4 + Math.imul(V4, ee) | 0, n4 = n4 + Math.imul($32, Q3) | 0, d2 = d2 + Math.imul($32, ee) | 0, l4 = l4 + Math.imul(j2, te) | 0, n4 = n4 + Math.imul(j2, re) | 0, n4 = n4 + Math.imul(Z3, te) | 0, d2 = d2 + Math.imul(Z3, re) | 0, l4 = l4 + Math.imul(W3, ie) | 0, n4 = n4 + Math.imul(W3, ne) | 0, n4 = n4 + Math.imul(K, ie) | 0, d2 = d2 + Math.imul(K, ne) | 0, l4 = l4 + Math.imul(z3, fe) | 0, n4 = n4 + Math.imul(z3, ae) | 0, n4 = n4 + Math.imul(H32, fe) | 0, d2 = d2 + Math.imul(H32, ae) | 0, l4 = l4 + Math.imul(F, oe) | 0, n4 = n4 + Math.imul(F, se) | 0, n4 = n4 + Math.imul(U3, oe) | 0, d2 = d2 + Math.imul(U3, se) | 0, l4 = l4 + Math.imul(C3, he) | 0, n4 = n4 + Math.imul(C3, ue) | 0, n4 = n4 + Math.imul(O2, he) | 0, d2 = d2 + Math.imul(O2, ue) | 0, l4 = l4 + Math.imul(k2, le) | 0, n4 = n4 + Math.imul(k2, de) | 0, n4 = n4 + Math.imul(D2, le) | 0, d2 = d2 + Math.imul(D2, de) | 0, l4 = l4 + Math.imul(R3, ce) | 0, n4 = n4 + Math.imul(R3, pe) | 0, n4 = n4 + Math.imul(I2, ce) | 0, d2 = d2 + Math.imul(I2, pe) | 0, l4 = l4 + Math.imul(g2, ve) | 0, n4 = n4 + Math.imul(g2, be) | 0, n4 = n4 + Math.imul(_3, ve) | 0, d2 = d2 + Math.imul(_3, be) | 0;
        var Ve = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ve >>> 26) | 0, Ve &= 67108863, l4 = Math.imul(G4, Q3), n4 = Math.imul(G4, ee), n4 = n4 + Math.imul(Y, Q3) | 0, d2 = Math.imul(Y, ee), l4 = l4 + Math.imul(V4, te) | 0, n4 = n4 + Math.imul(V4, re) | 0, n4 = n4 + Math.imul($32, te) | 0, d2 = d2 + Math.imul($32, re) | 0, l4 = l4 + Math.imul(j2, ie) | 0, n4 = n4 + Math.imul(j2, ne) | 0, n4 = n4 + Math.imul(Z3, ie) | 0, d2 = d2 + Math.imul(Z3, ne) | 0, l4 = l4 + Math.imul(W3, fe) | 0, n4 = n4 + Math.imul(W3, ae) | 0, n4 = n4 + Math.imul(K, fe) | 0, d2 = d2 + Math.imul(K, ae) | 0, l4 = l4 + Math.imul(z3, oe) | 0, n4 = n4 + Math.imul(z3, se) | 0, n4 = n4 + Math.imul(H32, oe) | 0, d2 = d2 + Math.imul(H32, se) | 0, l4 = l4 + Math.imul(F, he) | 0, n4 = n4 + Math.imul(F, ue) | 0, n4 = n4 + Math.imul(U3, he) | 0, d2 = d2 + Math.imul(U3, ue) | 0, l4 = l4 + Math.imul(C3, le) | 0, n4 = n4 + Math.imul(C3, de) | 0, n4 = n4 + Math.imul(O2, le) | 0, d2 = d2 + Math.imul(O2, de) | 0, l4 = l4 + Math.imul(k2, ce) | 0, n4 = n4 + Math.imul(k2, pe) | 0, n4 = n4 + Math.imul(D2, ce) | 0, d2 = d2 + Math.imul(D2, pe) | 0, l4 = l4 + Math.imul(R3, ve) | 0, n4 = n4 + Math.imul(R3, be) | 0, n4 = n4 + Math.imul(I2, ve) | 0, d2 = d2 + Math.imul(I2, be) | 0;
        var $e = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + ($e >>> 26) | 0, $e &= 67108863, l4 = Math.imul(G4, te), n4 = Math.imul(G4, re), n4 = n4 + Math.imul(Y, te) | 0, d2 = Math.imul(Y, re), l4 = l4 + Math.imul(V4, ie) | 0, n4 = n4 + Math.imul(V4, ne) | 0, n4 = n4 + Math.imul($32, ie) | 0, d2 = d2 + Math.imul($32, ne) | 0, l4 = l4 + Math.imul(j2, fe) | 0, n4 = n4 + Math.imul(j2, ae) | 0, n4 = n4 + Math.imul(Z3, fe) | 0, d2 = d2 + Math.imul(Z3, ae) | 0, l4 = l4 + Math.imul(W3, oe) | 0, n4 = n4 + Math.imul(W3, se) | 0, n4 = n4 + Math.imul(K, oe) | 0, d2 = d2 + Math.imul(K, se) | 0, l4 = l4 + Math.imul(z3, he) | 0, n4 = n4 + Math.imul(z3, ue) | 0, n4 = n4 + Math.imul(H32, he) | 0, d2 = d2 + Math.imul(H32, ue) | 0, l4 = l4 + Math.imul(F, le) | 0, n4 = n4 + Math.imul(F, de) | 0, n4 = n4 + Math.imul(U3, le) | 0, d2 = d2 + Math.imul(U3, de) | 0, l4 = l4 + Math.imul(C3, ce) | 0, n4 = n4 + Math.imul(C3, pe) | 0, n4 = n4 + Math.imul(O2, ce) | 0, d2 = d2 + Math.imul(O2, pe) | 0, l4 = l4 + Math.imul(k2, ve) | 0, n4 = n4 + Math.imul(k2, be) | 0, n4 = n4 + Math.imul(D2, ve) | 0, d2 = d2 + Math.imul(D2, be) | 0;
        var Ge = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ge >>> 26) | 0, Ge &= 67108863, l4 = Math.imul(G4, ie), n4 = Math.imul(G4, ne), n4 = n4 + Math.imul(Y, ie) | 0, d2 = Math.imul(Y, ne), l4 = l4 + Math.imul(V4, fe) | 0, n4 = n4 + Math.imul(V4, ae) | 0, n4 = n4 + Math.imul($32, fe) | 0, d2 = d2 + Math.imul($32, ae) | 0, l4 = l4 + Math.imul(j2, oe) | 0, n4 = n4 + Math.imul(j2, se) | 0, n4 = n4 + Math.imul(Z3, oe) | 0, d2 = d2 + Math.imul(Z3, se) | 0, l4 = l4 + Math.imul(W3, he) | 0, n4 = n4 + Math.imul(W3, ue) | 0, n4 = n4 + Math.imul(K, he) | 0, d2 = d2 + Math.imul(K, ue) | 0, l4 = l4 + Math.imul(z3, le) | 0, n4 = n4 + Math.imul(z3, de) | 0, n4 = n4 + Math.imul(H32, le) | 0, d2 = d2 + Math.imul(H32, de) | 0, l4 = l4 + Math.imul(F, ce) | 0, n4 = n4 + Math.imul(F, pe) | 0, n4 = n4 + Math.imul(U3, ce) | 0, d2 = d2 + Math.imul(U3, pe) | 0, l4 = l4 + Math.imul(C3, ve) | 0, n4 = n4 + Math.imul(C3, be) | 0, n4 = n4 + Math.imul(O2, ve) | 0, d2 = d2 + Math.imul(O2, be) | 0;
        var Ye = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ye >>> 26) | 0, Ye &= 67108863, l4 = Math.imul(G4, fe), n4 = Math.imul(G4, ae), n4 = n4 + Math.imul(Y, fe) | 0, d2 = Math.imul(Y, ae), l4 = l4 + Math.imul(V4, oe) | 0, n4 = n4 + Math.imul(V4, se) | 0, n4 = n4 + Math.imul($32, oe) | 0, d2 = d2 + Math.imul($32, se) | 0, l4 = l4 + Math.imul(j2, he) | 0, n4 = n4 + Math.imul(j2, ue) | 0, n4 = n4 + Math.imul(Z3, he) | 0, d2 = d2 + Math.imul(Z3, ue) | 0, l4 = l4 + Math.imul(W3, le) | 0, n4 = n4 + Math.imul(W3, de) | 0, n4 = n4 + Math.imul(K, le) | 0, d2 = d2 + Math.imul(K, de) | 0, l4 = l4 + Math.imul(z3, ce) | 0, n4 = n4 + Math.imul(z3, pe) | 0, n4 = n4 + Math.imul(H32, ce) | 0, d2 = d2 + Math.imul(H32, pe) | 0, l4 = l4 + Math.imul(F, ve) | 0, n4 = n4 + Math.imul(F, be) | 0, n4 = n4 + Math.imul(U3, ve) | 0, d2 = d2 + Math.imul(U3, be) | 0;
        var Xe = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Xe >>> 26) | 0, Xe &= 67108863, l4 = Math.imul(G4, oe), n4 = Math.imul(G4, se), n4 = n4 + Math.imul(Y, oe) | 0, d2 = Math.imul(Y, se), l4 = l4 + Math.imul(V4, he) | 0, n4 = n4 + Math.imul(V4, ue) | 0, n4 = n4 + Math.imul($32, he) | 0, d2 = d2 + Math.imul($32, ue) | 0, l4 = l4 + Math.imul(j2, le) | 0, n4 = n4 + Math.imul(j2, de) | 0, n4 = n4 + Math.imul(Z3, le) | 0, d2 = d2 + Math.imul(Z3, de) | 0, l4 = l4 + Math.imul(W3, ce) | 0, n4 = n4 + Math.imul(W3, pe) | 0, n4 = n4 + Math.imul(K, ce) | 0, d2 = d2 + Math.imul(K, pe) | 0, l4 = l4 + Math.imul(z3, ve) | 0, n4 = n4 + Math.imul(z3, be) | 0, n4 = n4 + Math.imul(H32, ve) | 0, d2 = d2 + Math.imul(H32, be) | 0;
        var Je = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Je >>> 26) | 0, Je &= 67108863, l4 = Math.imul(G4, he), n4 = Math.imul(G4, ue), n4 = n4 + Math.imul(Y, he) | 0, d2 = Math.imul(Y, ue), l4 = l4 + Math.imul(V4, le) | 0, n4 = n4 + Math.imul(V4, de) | 0, n4 = n4 + Math.imul($32, le) | 0, d2 = d2 + Math.imul($32, de) | 0, l4 = l4 + Math.imul(j2, ce) | 0, n4 = n4 + Math.imul(j2, pe) | 0, n4 = n4 + Math.imul(Z3, ce) | 0, d2 = d2 + Math.imul(Z3, pe) | 0, l4 = l4 + Math.imul(W3, ve) | 0, n4 = n4 + Math.imul(W3, be) | 0, n4 = n4 + Math.imul(K, ve) | 0, d2 = d2 + Math.imul(K, be) | 0;
        var Qe = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Qe >>> 26) | 0, Qe &= 67108863, l4 = Math.imul(G4, le), n4 = Math.imul(G4, de), n4 = n4 + Math.imul(Y, le) | 0, d2 = Math.imul(Y, de), l4 = l4 + Math.imul(V4, ce) | 0, n4 = n4 + Math.imul(V4, pe) | 0, n4 = n4 + Math.imul($32, ce) | 0, d2 = d2 + Math.imul($32, pe) | 0, l4 = l4 + Math.imul(j2, ve) | 0, n4 = n4 + Math.imul(j2, be) | 0, n4 = n4 + Math.imul(Z3, ve) | 0, d2 = d2 + Math.imul(Z3, be) | 0;
        var et = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (et >>> 26) | 0, et &= 67108863, l4 = Math.imul(G4, ce), n4 = Math.imul(G4, pe), n4 = n4 + Math.imul(Y, ce) | 0, d2 = Math.imul(Y, pe), l4 = l4 + Math.imul(V4, ve) | 0, n4 = n4 + Math.imul(V4, be) | 0, n4 = n4 + Math.imul($32, ve) | 0, d2 = d2 + Math.imul($32, be) | 0;
        var tt = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (tt >>> 26) | 0, tt &= 67108863, l4 = Math.imul(G4, ve), n4 = Math.imul(G4, be), n4 = n4 + Math.imul(Y, ve) | 0, d2 = Math.imul(Y, be);
        var rt = (b3 + l4 | 0) + ((n4 & 8191) << 13) | 0;
        return b3 = (d2 + (n4 >>> 13) | 0) + (rt >>> 26) | 0, rt &= 67108863, c[0] = ft, c[1] = Be, c[2] = qe, c[3] = ze, c[4] = He, c[5] = We, c[6] = Ke, c[7] = je, c[8] = Ze, c[9] = Ve, c[10] = $e, c[11] = Ge, c[12] = Ye, c[13] = Xe, c[14] = Je, c[15] = Qe, c[16] = et, c[17] = tt, c[18] = rt, b3 !== 0 && (c[19] = b3, h5.length++), h5;
      };
      Math.imul || (L4 = q2);
      function ge(v3, i2, a3) {
        a3.negative = i2.negative ^ v3.negative, a3.length = v3.length + i2.length;
        for (var h5 = 0, s2 = 0, u3 = 0;u3 < a3.length - 1; u3++) {
          var c = s2;
          s2 = 0;
          for (var b3 = h5 & 67108863, l4 = Math.min(u3, i2.length - 1), n4 = Math.max(0, u3 - v3.length + 1);n4 <= l4; n4++) {
            var d2 = u3 - n4, w2 = v3.words[d2] | 0, g2 = i2.words[n4] | 0, _3 = w2 * g2, A6 = _3 & 67108863;
            c = c + (_3 / 67108864 | 0) | 0, A6 = A6 + b3 | 0, b3 = A6 & 67108863, c = c + (A6 >>> 26) | 0, s2 += c >>> 26, c &= 67108863;
          }
          a3.words[u3] = b3, h5 = c, c = s2;
        }
        return h5 !== 0 ? a3.words[u3] = h5 : a3.length--, a3.strip();
      }
      function _e(v3, i2, a3) {
        var h5 = new N3;
        return h5.mulp(v3, i2, a3);
      }
      f4.prototype.mulTo = function(i2, a3) {
        var h5, s2 = this.length + i2.length;
        return this.length === 10 && i2.length === 10 ? h5 = L4(this, i2, a3) : s2 < 63 ? h5 = q2(this, i2, a3) : s2 < 1024 ? h5 = ge(this, i2, a3) : h5 = _e(this, i2, a3), h5;
      };
      function N3(v3, i2) {
        this.x = v3, this.y = i2;
      }
      N3.prototype.makeRBT = function(i2) {
        for (var a3 = new Array(i2), h5 = f4.prototype._countBits(i2) - 1, s2 = 0;s2 < i2; s2++)
          a3[s2] = this.revBin(s2, h5, i2);
        return a3;
      }, N3.prototype.revBin = function(i2, a3, h5) {
        if (i2 === 0 || i2 === h5 - 1)
          return i2;
        for (var s2 = 0, u3 = 0;u3 < a3; u3++)
          s2 |= (i2 & 1) << a3 - u3 - 1, i2 >>= 1;
        return s2;
      }, N3.prototype.permute = function(i2, a3, h5, s2, u3, c) {
        for (var b3 = 0;b3 < c; b3++)
          s2[b3] = a3[i2[b3]], u3[b3] = h5[i2[b3]];
      }, N3.prototype.transform = function(i2, a3, h5, s2, u3, c) {
        this.permute(c, i2, a3, h5, s2, u3);
        for (var b3 = 1;b3 < u3; b3 <<= 1)
          for (var l4 = b3 << 1, n4 = Math.cos(2 * Math.PI / l4), d2 = Math.sin(2 * Math.PI / l4), w2 = 0;w2 < u3; w2 += l4)
            for (var g2 = n4, _3 = d2, A6 = 0;A6 < b3; A6++) {
              var R3 = h5[w2 + A6], I2 = s2[w2 + A6], Me = h5[w2 + A6 + b3], k2 = s2[w2 + A6 + b3], D2 = g2 * Me - _3 * k2;
              k2 = g2 * k2 + _3 * Me, Me = D2, h5[w2 + A6] = R3 + Me, s2[w2 + A6] = I2 + k2, h5[w2 + A6 + b3] = R3 - Me, s2[w2 + A6 + b3] = I2 - k2, A6 !== l4 && (D2 = n4 * g2 - d2 * _3, _3 = n4 * _3 + d2 * g2, g2 = D2);
            }
      }, N3.prototype.guessLen13b = function(i2, a3) {
        var h5 = Math.max(a3, i2) | 1, s2 = h5 & 1, u3 = 0;
        for (h5 = h5 / 2 | 0;h5; h5 = h5 >>> 1)
          u3++;
        return 1 << u3 + 1 + s2;
      }, N3.prototype.conjugate = function(i2, a3, h5) {
        if (!(h5 <= 1))
          for (var s2 = 0;s2 < h5 / 2; s2++) {
            var u3 = i2[s2];
            i2[s2] = i2[h5 - s2 - 1], i2[h5 - s2 - 1] = u3, u3 = a3[s2], a3[s2] = -a3[h5 - s2 - 1], a3[h5 - s2 - 1] = -u3;
          }
      }, N3.prototype.normalize13b = function(i2, a3) {
        for (var h5 = 0, s2 = 0;s2 < a3 / 2; s2++) {
          var u3 = Math.round(i2[2 * s2 + 1] / a3) * 8192 + Math.round(i2[2 * s2] / a3) + h5;
          i2[s2] = u3 & 67108863, u3 < 67108864 ? h5 = 0 : h5 = u3 / 67108864 | 0;
        }
        return i2;
      }, N3.prototype.convert13b = function(i2, a3, h5, s2) {
        for (var u3 = 0, c = 0;c < a3; c++)
          u3 = u3 + (i2[c] | 0), h5[2 * c] = u3 & 8191, u3 = u3 >>> 13, h5[2 * c + 1] = u3 & 8191, u3 = u3 >>> 13;
        for (c = 2 * a3;c < s2; ++c)
          h5[c] = 0;
        r2(u3 === 0), r2((u3 & -8192) === 0);
      }, N3.prototype.stub = function(i2) {
        for (var a3 = new Array(i2), h5 = 0;h5 < i2; h5++)
          a3[h5] = 0;
        return a3;
      }, N3.prototype.mulp = function(i2, a3, h5) {
        var s2 = 2 * this.guessLen13b(i2.length, a3.length), u3 = this.makeRBT(s2), c = this.stub(s2), b3 = new Array(s2), l4 = new Array(s2), n4 = new Array(s2), d2 = new Array(s2), w2 = new Array(s2), g2 = new Array(s2), _3 = h5.words;
        _3.length = s2, this.convert13b(i2.words, i2.length, b3, s2), this.convert13b(a3.words, a3.length, d2, s2), this.transform(b3, c, l4, n4, s2, u3), this.transform(d2, c, w2, g2, s2, u3);
        for (var A6 = 0;A6 < s2; A6++) {
          var R3 = l4[A6] * w2[A6] - n4[A6] * g2[A6];
          n4[A6] = l4[A6] * g2[A6] + n4[A6] * w2[A6], l4[A6] = R3;
        }
        return this.conjugate(l4, n4, s2), this.transform(l4, n4, _3, c, s2, u3), this.conjugate(_3, c, s2), this.normalize13b(_3, s2), h5.negative = i2.negative ^ a3.negative, h5.length = i2.length + a3.length, h5.strip();
      }, f4.prototype.mul = function(i2) {
        var a3 = new f4(null);
        return a3.words = new Array(this.length + i2.length), this.mulTo(i2, a3);
      }, f4.prototype.mulf = function(i2) {
        var a3 = new f4(null);
        return a3.words = new Array(this.length + i2.length), _e(this, i2, a3);
      }, f4.prototype.imul = function(i2) {
        return this.clone().mulTo(i2, this);
      }, f4.prototype.imuln = function(i2) {
        r2(typeof i2 == "number"), r2(i2 < 67108864);
        for (var a3 = 0, h5 = 0;h5 < this.length; h5++) {
          var s2 = (this.words[h5] | 0) * i2, u3 = (s2 & 67108863) + (a3 & 67108863);
          a3 >>= 26, a3 += s2 / 67108864 | 0, a3 += u3 >>> 26, this.words[h5] = u3 & 67108863;
        }
        return a3 !== 0 && (this.words[h5] = a3, this.length++), this;
      }, f4.prototype.muln = function(i2) {
        return this.clone().imuln(i2);
      }, f4.prototype.sqr = function() {
        return this.mul(this);
      }, f4.prototype.isqr = function() {
        return this.imul(this.clone());
      }, f4.prototype.pow = function(i2) {
        var a3 = B5(i2);
        if (a3.length === 0)
          return new f4(1);
        for (var h5 = this, s2 = 0;s2 < a3.length && a3[s2] === 0; s2++, h5 = h5.sqr())
          ;
        if (++s2 < a3.length)
          for (var u3 = h5.sqr();s2 < a3.length; s2++, u3 = u3.sqr())
            a3[s2] !== 0 && (h5 = h5.mul(u3));
        return h5;
      }, f4.prototype.iushln = function(i2) {
        r2(typeof i2 == "number" && i2 >= 0);
        var a3 = i2 % 26, h5 = (i2 - a3) / 26, s2 = 67108863 >>> 26 - a3 << 26 - a3, u3;
        if (a3 !== 0) {
          var c = 0;
          for (u3 = 0;u3 < this.length; u3++) {
            var b3 = this.words[u3] & s2, l4 = (this.words[u3] | 0) - b3 << a3;
            this.words[u3] = l4 | c, c = b3 >>> 26 - a3;
          }
          c && (this.words[u3] = c, this.length++);
        }
        if (h5 !== 0) {
          for (u3 = this.length - 1;u3 >= 0; u3--)
            this.words[u3 + h5] = this.words[u3];
          for (u3 = 0;u3 < h5; u3++)
            this.words[u3] = 0;
          this.length += h5;
        }
        return this.strip();
      }, f4.prototype.ishln = function(i2) {
        return r2(this.negative === 0), this.iushln(i2);
      }, f4.prototype.iushrn = function(i2, a3, h5) {
        r2(typeof i2 == "number" && i2 >= 0);
        var s2;
        a3 ? s2 = (a3 - a3 % 26) / 26 : s2 = 0;
        var u3 = i2 % 26, c = Math.min((i2 - u3) / 26, this.length), b3 = 67108863 ^ 67108863 >>> u3 << u3, l4 = h5;
        if (s2 -= c, s2 = Math.max(0, s2), l4) {
          for (var n4 = 0;n4 < c; n4++)
            l4.words[n4] = this.words[n4];
          l4.length = c;
        }
        if (c !== 0)
          if (this.length > c)
            for (this.length -= c, n4 = 0;n4 < this.length; n4++)
              this.words[n4] = this.words[n4 + c];
          else
            this.words[0] = 0, this.length = 1;
        var d2 = 0;
        for (n4 = this.length - 1;n4 >= 0 && (d2 !== 0 || n4 >= s2); n4--) {
          var w2 = this.words[n4] | 0;
          this.words[n4] = d2 << 26 - u3 | w2 >>> u3, d2 = w2 & b3;
        }
        return l4 && d2 !== 0 && (l4.words[l4.length++] = d2), this.length === 0 && (this.words[0] = 0, this.length = 1), this.strip();
      }, f4.prototype.ishrn = function(i2, a3, h5) {
        return r2(this.negative === 0), this.iushrn(i2, a3, h5);
      }, f4.prototype.shln = function(i2) {
        return this.clone().ishln(i2);
      }, f4.prototype.ushln = function(i2) {
        return this.clone().iushln(i2);
      }, f4.prototype.shrn = function(i2) {
        return this.clone().ishrn(i2);
      }, f4.prototype.ushrn = function(i2) {
        return this.clone().iushrn(i2);
      }, f4.prototype.testn = function(i2) {
        r2(typeof i2 == "number" && i2 >= 0);
        var a3 = i2 % 26, h5 = (i2 - a3) / 26, s2 = 1 << a3;
        if (this.length <= h5)
          return false;
        var u3 = this.words[h5];
        return !!(u3 & s2);
      }, f4.prototype.imaskn = function(i2) {
        r2(typeof i2 == "number" && i2 >= 0);
        var a3 = i2 % 26, h5 = (i2 - a3) / 26;
        if (r2(this.negative === 0, "imaskn works only with positive numbers"), this.length <= h5)
          return this;
        if (a3 !== 0 && h5++, this.length = Math.min(h5, this.length), a3 !== 0) {
          var s2 = 67108863 ^ 67108863 >>> a3 << a3;
          this.words[this.length - 1] &= s2;
        }
        return this.strip();
      }, f4.prototype.maskn = function(i2) {
        return this.clone().imaskn(i2);
      }, f4.prototype.iaddn = function(i2) {
        return r2(typeof i2 == "number"), r2(i2 < 67108864), i2 < 0 ? this.isubn(-i2) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) < i2 ? (this.words[0] = i2 - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(i2), this.negative = 1, this) : this._iaddn(i2);
      }, f4.prototype._iaddn = function(i2) {
        this.words[0] += i2;
        for (var a3 = 0;a3 < this.length && this.words[a3] >= 67108864; a3++)
          this.words[a3] -= 67108864, a3 === this.length - 1 ? this.words[a3 + 1] = 1 : this.words[a3 + 1]++;
        return this.length = Math.max(this.length, a3 + 1), this;
      }, f4.prototype.isubn = function(i2) {
        if (r2(typeof i2 == "number"), r2(i2 < 67108864), i2 < 0)
          return this.iaddn(-i2);
        if (this.negative !== 0)
          return this.negative = 0, this.iaddn(i2), this.negative = 1, this;
        if (this.words[0] -= i2, this.length === 1 && this.words[0] < 0)
          this.words[0] = -this.words[0], this.negative = 1;
        else
          for (var a3 = 0;a3 < this.length && this.words[a3] < 0; a3++)
            this.words[a3] += 67108864, this.words[a3 + 1] -= 1;
        return this.strip();
      }, f4.prototype.addn = function(i2) {
        return this.clone().iaddn(i2);
      }, f4.prototype.subn = function(i2) {
        return this.clone().isubn(i2);
      }, f4.prototype.iabs = function() {
        return this.negative = 0, this;
      }, f4.prototype.abs = function() {
        return this.clone().iabs();
      }, f4.prototype._ishlnsubmul = function(i2, a3, h5) {
        var s2 = i2.length + h5, u3;
        this._expand(s2);
        var c, b3 = 0;
        for (u3 = 0;u3 < i2.length; u3++) {
          c = (this.words[u3 + h5] | 0) + b3;
          var l4 = (i2.words[u3] | 0) * a3;
          c -= l4 & 67108863, b3 = (c >> 26) - (l4 / 67108864 | 0), this.words[u3 + h5] = c & 67108863;
        }
        for (;u3 < this.length - h5; u3++)
          c = (this.words[u3 + h5] | 0) + b3, b3 = c >> 26, this.words[u3 + h5] = c & 67108863;
        if (b3 === 0)
          return this.strip();
        for (r2(b3 === -1), b3 = 0, u3 = 0;u3 < this.length; u3++)
          c = -(this.words[u3] | 0) + b3, b3 = c >> 26, this.words[u3] = c & 67108863;
        return this.negative = 1, this.strip();
      }, f4.prototype._wordDiv = function(i2, a3) {
        var h5 = this.length - i2.length, s2 = this.clone(), u3 = i2, c = u3.words[u3.length - 1] | 0, b3 = this._countBits(c);
        h5 = 26 - b3, h5 !== 0 && (u3 = u3.ushln(h5), s2.iushln(h5), c = u3.words[u3.length - 1] | 0);
        var l4 = s2.length - u3.length, n4;
        if (a3 !== "mod") {
          n4 = new f4(null), n4.length = l4 + 1, n4.words = new Array(n4.length);
          for (var d2 = 0;d2 < n4.length; d2++)
            n4.words[d2] = 0;
        }
        var w2 = s2.clone()._ishlnsubmul(u3, 1, l4);
        w2.negative === 0 && (s2 = w2, n4 && (n4.words[l4] = 1));
        for (var g2 = l4 - 1;g2 >= 0; g2--) {
          var _3 = (s2.words[u3.length + g2] | 0) * 67108864 + (s2.words[u3.length + g2 - 1] | 0);
          for (_3 = Math.min(_3 / c | 0, 67108863), s2._ishlnsubmul(u3, _3, g2);s2.negative !== 0; )
            _3--, s2.negative = 0, s2._ishlnsubmul(u3, 1, g2), s2.isZero() || (s2.negative ^= 1);
          n4 && (n4.words[g2] = _3);
        }
        return n4 && n4.strip(), s2.strip(), a3 !== "div" && h5 !== 0 && s2.iushrn(h5), { div: n4 || null, mod: s2 };
      }, f4.prototype.divmod = function(i2, a3, h5) {
        if (r2(!i2.isZero()), this.isZero())
          return { div: new f4(0), mod: new f4(0) };
        var s2, u3, c;
        return this.negative !== 0 && i2.negative === 0 ? (c = this.neg().divmod(i2, a3), a3 !== "mod" && (s2 = c.div.neg()), a3 !== "div" && (u3 = c.mod.neg(), h5 && u3.negative !== 0 && u3.iadd(i2)), { div: s2, mod: u3 }) : this.negative === 0 && i2.negative !== 0 ? (c = this.divmod(i2.neg(), a3), a3 !== "mod" && (s2 = c.div.neg()), { div: s2, mod: c.mod }) : (this.negative & i2.negative) !== 0 ? (c = this.neg().divmod(i2.neg(), a3), a3 !== "div" && (u3 = c.mod.neg(), h5 && u3.negative !== 0 && u3.isub(i2)), { div: c.div, mod: u3 }) : i2.length > this.length || this.cmp(i2) < 0 ? { div: new f4(0), mod: this } : i2.length === 1 ? a3 === "div" ? { div: this.divn(i2.words[0]), mod: null } : a3 === "mod" ? { div: null, mod: new f4(this.modn(i2.words[0])) } : { div: this.divn(i2.words[0]), mod: new f4(this.modn(i2.words[0])) } : this._wordDiv(i2, a3);
      }, f4.prototype.div = function(i2) {
        return this.divmod(i2, "div", false).div;
      }, f4.prototype.mod = function(i2) {
        return this.divmod(i2, "mod", false).mod;
      }, f4.prototype.umod = function(i2) {
        return this.divmod(i2, "mod", true).mod;
      }, f4.prototype.divRound = function(i2) {
        var a3 = this.divmod(i2);
        if (a3.mod.isZero())
          return a3.div;
        var h5 = a3.div.negative !== 0 ? a3.mod.isub(i2) : a3.mod, s2 = i2.ushrn(1), u3 = i2.andln(1), c = h5.cmp(s2);
        return c < 0 || u3 === 1 && c === 0 ? a3.div : a3.div.negative !== 0 ? a3.div.isubn(1) : a3.div.iaddn(1);
      }, f4.prototype.modn = function(i2) {
        r2(i2 <= 67108863);
        for (var a3 = (1 << 26) % i2, h5 = 0, s2 = this.length - 1;s2 >= 0; s2--)
          h5 = (a3 * h5 + (this.words[s2] | 0)) % i2;
        return h5;
      }, f4.prototype.idivn = function(i2) {
        r2(i2 <= 67108863);
        for (var a3 = 0, h5 = this.length - 1;h5 >= 0; h5--) {
          var s2 = (this.words[h5] | 0) + a3 * 67108864;
          this.words[h5] = s2 / i2 | 0, a3 = s2 % i2;
        }
        return this.strip();
      }, f4.prototype.divn = function(i2) {
        return this.clone().idivn(i2);
      }, f4.prototype.egcd = function(i2) {
        r2(i2.negative === 0), r2(!i2.isZero());
        var a3 = this, h5 = i2.clone();
        a3.negative !== 0 ? a3 = a3.umod(i2) : a3 = a3.clone();
        for (var s2 = new f4(1), u3 = new f4(0), c = new f4(0), b3 = new f4(1), l4 = 0;a3.isEven() && h5.isEven(); )
          a3.iushrn(1), h5.iushrn(1), ++l4;
        for (var n4 = h5.clone(), d2 = a3.clone();!a3.isZero(); ) {
          for (var w2 = 0, g2 = 1;(a3.words[0] & g2) === 0 && w2 < 26; ++w2, g2 <<= 1)
            ;
          if (w2 > 0)
            for (a3.iushrn(w2);w2-- > 0; )
              (s2.isOdd() || u3.isOdd()) && (s2.iadd(n4), u3.isub(d2)), s2.iushrn(1), u3.iushrn(1);
          for (var _3 = 0, A6 = 1;(h5.words[0] & A6) === 0 && _3 < 26; ++_3, A6 <<= 1)
            ;
          if (_3 > 0)
            for (h5.iushrn(_3);_3-- > 0; )
              (c.isOdd() || b3.isOdd()) && (c.iadd(n4), b3.isub(d2)), c.iushrn(1), b3.iushrn(1);
          a3.cmp(h5) >= 0 ? (a3.isub(h5), s2.isub(c), u3.isub(b3)) : (h5.isub(a3), c.isub(s2), b3.isub(u3));
        }
        return { a: c, b: b3, gcd: h5.iushln(l4) };
      }, f4.prototype._invmp = function(i2) {
        r2(i2.negative === 0), r2(!i2.isZero());
        var a3 = this, h5 = i2.clone();
        a3.negative !== 0 ? a3 = a3.umod(i2) : a3 = a3.clone();
        for (var s2 = new f4(1), u3 = new f4(0), c = h5.clone();a3.cmpn(1) > 0 && h5.cmpn(1) > 0; ) {
          for (var b3 = 0, l4 = 1;(a3.words[0] & l4) === 0 && b3 < 26; ++b3, l4 <<= 1)
            ;
          if (b3 > 0)
            for (a3.iushrn(b3);b3-- > 0; )
              s2.isOdd() && s2.iadd(c), s2.iushrn(1);
          for (var n4 = 0, d2 = 1;(h5.words[0] & d2) === 0 && n4 < 26; ++n4, d2 <<= 1)
            ;
          if (n4 > 0)
            for (h5.iushrn(n4);n4-- > 0; )
              u3.isOdd() && u3.iadd(c), u3.iushrn(1);
          a3.cmp(h5) >= 0 ? (a3.isub(h5), s2.isub(u3)) : (h5.isub(a3), u3.isub(s2));
        }
        var w2;
        return a3.cmpn(1) === 0 ? w2 = s2 : w2 = u3, w2.cmpn(0) < 0 && w2.iadd(i2), w2;
      }, f4.prototype.gcd = function(i2) {
        if (this.isZero())
          return i2.abs();
        if (i2.isZero())
          return this.abs();
        var a3 = this.clone(), h5 = i2.clone();
        a3.negative = 0, h5.negative = 0;
        for (var s2 = 0;a3.isEven() && h5.isEven(); s2++)
          a3.iushrn(1), h5.iushrn(1);
        do {
          for (;a3.isEven(); )
            a3.iushrn(1);
          for (;h5.isEven(); )
            h5.iushrn(1);
          var u3 = a3.cmp(h5);
          if (u3 < 0) {
            var c = a3;
            a3 = h5, h5 = c;
          } else if (u3 === 0 || h5.cmpn(1) === 0)
            break;
          a3.isub(h5);
        } while (true);
        return h5.iushln(s2);
      }, f4.prototype.invm = function(i2) {
        return this.egcd(i2).a.umod(i2);
      }, f4.prototype.isEven = function() {
        return (this.words[0] & 1) === 0;
      }, f4.prototype.isOdd = function() {
        return (this.words[0] & 1) === 1;
      }, f4.prototype.andln = function(i2) {
        return this.words[0] & i2;
      }, f4.prototype.bincn = function(i2) {
        r2(typeof i2 == "number");
        var a3 = i2 % 26, h5 = (i2 - a3) / 26, s2 = 1 << a3;
        if (this.length <= h5)
          return this._expand(h5 + 1), this.words[h5] |= s2, this;
        for (var u3 = s2, c = h5;u3 !== 0 && c < this.length; c++) {
          var b3 = this.words[c] | 0;
          b3 += u3, u3 = b3 >>> 26, b3 &= 67108863, this.words[c] = b3;
        }
        return u3 !== 0 && (this.words[c] = u3, this.length++), this;
      }, f4.prototype.isZero = function() {
        return this.length === 1 && this.words[0] === 0;
      }, f4.prototype.cmpn = function(i2) {
        var a3 = i2 < 0;
        if (this.negative !== 0 && !a3)
          return -1;
        if (this.negative === 0 && a3)
          return 1;
        this.strip();
        var h5;
        if (this.length > 1)
          h5 = 1;
        else {
          a3 && (i2 = -i2), r2(i2 <= 67108863, "Number is too big");
          var s2 = this.words[0] | 0;
          h5 = s2 === i2 ? 0 : s2 < i2 ? -1 : 1;
        }
        return this.negative !== 0 ? -h5 | 0 : h5;
      }, f4.prototype.cmp = function(i2) {
        if (this.negative !== 0 && i2.negative === 0)
          return -1;
        if (this.negative === 0 && i2.negative !== 0)
          return 1;
        var a3 = this.ucmp(i2);
        return this.negative !== 0 ? -a3 | 0 : a3;
      }, f4.prototype.ucmp = function(i2) {
        if (this.length > i2.length)
          return 1;
        if (this.length < i2.length)
          return -1;
        for (var a3 = 0, h5 = this.length - 1;h5 >= 0; h5--) {
          var s2 = this.words[h5] | 0, u3 = i2.words[h5] | 0;
          if (s2 !== u3) {
            s2 < u3 ? a3 = -1 : s2 > u3 && (a3 = 1);
            break;
          }
        }
        return a3;
      }, f4.prototype.gtn = function(i2) {
        return this.cmpn(i2) === 1;
      }, f4.prototype.gt = function(i2) {
        return this.cmp(i2) === 1;
      }, f4.prototype.gten = function(i2) {
        return this.cmpn(i2) >= 0;
      }, f4.prototype.gte = function(i2) {
        return this.cmp(i2) >= 0;
      }, f4.prototype.ltn = function(i2) {
        return this.cmpn(i2) === -1;
      }, f4.prototype.lt = function(i2) {
        return this.cmp(i2) === -1;
      }, f4.prototype.lten = function(i2) {
        return this.cmpn(i2) <= 0;
      }, f4.prototype.lte = function(i2) {
        return this.cmp(i2) <= 0;
      }, f4.prototype.eqn = function(i2) {
        return this.cmpn(i2) === 0;
      }, f4.prototype.eq = function(i2) {
        return this.cmp(i2) === 0;
      }, f4.red = function(i2) {
        return new P4(i2);
      }, f4.prototype.toRed = function(i2) {
        return r2(!this.red, "Already a number in reduction context"), r2(this.negative === 0, "red works only with positives"), i2.convertTo(this)._forceRed(i2);
      }, f4.prototype.fromRed = function() {
        return r2(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
      }, f4.prototype._forceRed = function(i2) {
        return this.red = i2, this;
      }, f4.prototype.forceRed = function(i2) {
        return r2(!this.red, "Already a number in reduction context"), this._forceRed(i2);
      }, f4.prototype.redAdd = function(i2) {
        return r2(this.red, "redAdd works only with red numbers"), this.red.add(this, i2);
      }, f4.prototype.redIAdd = function(i2) {
        return r2(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, i2);
      }, f4.prototype.redSub = function(i2) {
        return r2(this.red, "redSub works only with red numbers"), this.red.sub(this, i2);
      }, f4.prototype.redISub = function(i2) {
        return r2(this.red, "redISub works only with red numbers"), this.red.isub(this, i2);
      }, f4.prototype.redShl = function(i2) {
        return r2(this.red, "redShl works only with red numbers"), this.red.shl(this, i2);
      }, f4.prototype.redMul = function(i2) {
        return r2(this.red, "redMul works only with red numbers"), this.red._verify2(this, i2), this.red.mul(this, i2);
      }, f4.prototype.redIMul = function(i2) {
        return r2(this.red, "redMul works only with red numbers"), this.red._verify2(this, i2), this.red.imul(this, i2);
      }, f4.prototype.redSqr = function() {
        return r2(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
      }, f4.prototype.redISqr = function() {
        return r2(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
      }, f4.prototype.redSqrt = function() {
        return r2(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
      }, f4.prototype.redInvm = function() {
        return r2(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
      }, f4.prototype.redNeg = function() {
        return r2(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
      }, f4.prototype.redPow = function(i2) {
        return r2(this.red && !i2.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, i2);
      };
      var we = { k256: null, p224: null, p192: null, p25519: null };
      function ye(v3, i2) {
        this.name = v3, this.p = new f4(i2, 16), this.n = this.p.bitLength(), this.k = new f4(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
      }
      ye.prototype._tmp = function() {
        var i2 = new f4(null);
        return i2.words = new Array(Math.ceil(this.n / 13)), i2;
      }, ye.prototype.ireduce = function(i2) {
        var a3 = i2, h5;
        do
          this.split(a3, this.tmp), a3 = this.imulK(a3), a3 = a3.iadd(this.tmp), h5 = a3.bitLength();
        while (h5 > this.n);
        var s2 = h5 < this.n ? -1 : a3.ucmp(this.p);
        return s2 === 0 ? (a3.words[0] = 0, a3.length = 1) : s2 > 0 ? a3.isub(this.p) : a3.strip !== undefined ? a3.strip() : a3._strip(), a3;
      }, ye.prototype.split = function(i2, a3) {
        i2.iushrn(this.n, 0, a3);
      }, ye.prototype.imulK = function(i2) {
        return i2.imul(this.k);
      };
      function xe() {
        ye.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      o2(xe, ye), xe.prototype.split = function(i2, a3) {
        for (var h5 = 4194303, s2 = Math.min(i2.length, 9), u3 = 0;u3 < s2; u3++)
          a3.words[u3] = i2.words[u3];
        if (a3.length = s2, i2.length <= 9) {
          i2.words[0] = 0, i2.length = 1;
          return;
        }
        var c = i2.words[9];
        for (a3.words[a3.length++] = c & h5, u3 = 10;u3 < i2.length; u3++) {
          var b3 = i2.words[u3] | 0;
          i2.words[u3 - 10] = (b3 & h5) << 4 | c >>> 22, c = b3;
        }
        c >>>= 22, i2.words[u3 - 10] = c, c === 0 && i2.length > 10 ? i2.length -= 10 : i2.length -= 9;
      }, xe.prototype.imulK = function(i2) {
        i2.words[i2.length] = 0, i2.words[i2.length + 1] = 0, i2.length += 2;
        for (var a3 = 0, h5 = 0;h5 < i2.length; h5++) {
          var s2 = i2.words[h5] | 0;
          a3 += s2 * 977, i2.words[h5] = a3 & 67108863, a3 = s2 * 64 + (a3 / 67108864 | 0);
        }
        return i2.words[i2.length - 1] === 0 && (i2.length--, i2.words[i2.length - 1] === 0 && i2.length--), i2;
      };
      function Re() {
        ye.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      o2(Re, ye);
      function Ee() {
        ye.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      o2(Ee, ye);
      function Ae() {
        ye.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      o2(Ae, ye), Ae.prototype.imulK = function(i2) {
        for (var a3 = 0, h5 = 0;h5 < i2.length; h5++) {
          var s2 = (i2.words[h5] | 0) * 19 + a3, u3 = s2 & 67108863;
          s2 >>>= 26, i2.words[h5] = u3, a3 = s2;
        }
        return a3 !== 0 && (i2.words[i2.length++] = a3), i2;
      }, f4._prime = function(i2) {
        if (we[i2])
          return we[i2];
        var a3;
        if (i2 === "k256")
          a3 = new xe;
        else if (i2 === "p224")
          a3 = new Re;
        else if (i2 === "p192")
          a3 = new Ee;
        else if (i2 === "p25519")
          a3 = new Ae;
        else
          throw new Error("Unknown prime " + i2);
        return we[i2] = a3, a3;
      };
      function P4(v3) {
        if (typeof v3 == "string") {
          var i2 = f4._prime(v3);
          this.m = i2.p, this.prime = i2;
        } else
          r2(v3.gtn(1), "modulus must be greater than 1"), this.m = v3, this.prime = null;
      }
      P4.prototype._verify1 = function(i2) {
        r2(i2.negative === 0, "red works only with positives"), r2(i2.red, "red works only with red numbers");
      }, P4.prototype._verify2 = function(i2, a3) {
        r2((i2.negative | a3.negative) === 0, "red works only with positives"), r2(i2.red && i2.red === a3.red, "red works only with red numbers");
      }, P4.prototype.imod = function(i2) {
        return this.prime ? this.prime.ireduce(i2)._forceRed(this) : i2.umod(this.m)._forceRed(this);
      }, P4.prototype.neg = function(i2) {
        return i2.isZero() ? i2.clone() : this.m.sub(i2)._forceRed(this);
      }, P4.prototype.add = function(i2, a3) {
        this._verify2(i2, a3);
        var h5 = i2.add(a3);
        return h5.cmp(this.m) >= 0 && h5.isub(this.m), h5._forceRed(this);
      }, P4.prototype.iadd = function(i2, a3) {
        this._verify2(i2, a3);
        var h5 = i2.iadd(a3);
        return h5.cmp(this.m) >= 0 && h5.isub(this.m), h5;
      }, P4.prototype.sub = function(i2, a3) {
        this._verify2(i2, a3);
        var h5 = i2.sub(a3);
        return h5.cmpn(0) < 0 && h5.iadd(this.m), h5._forceRed(this);
      }, P4.prototype.isub = function(i2, a3) {
        this._verify2(i2, a3);
        var h5 = i2.isub(a3);
        return h5.cmpn(0) < 0 && h5.iadd(this.m), h5;
      }, P4.prototype.shl = function(i2, a3) {
        return this._verify1(i2), this.imod(i2.ushln(a3));
      }, P4.prototype.imul = function(i2, a3) {
        return this._verify2(i2, a3), this.imod(i2.imul(a3));
      }, P4.prototype.mul = function(i2, a3) {
        return this._verify2(i2, a3), this.imod(i2.mul(a3));
      }, P4.prototype.isqr = function(i2) {
        return this.imul(i2, i2.clone());
      }, P4.prototype.sqr = function(i2) {
        return this.mul(i2, i2);
      }, P4.prototype.sqrt = function(i2) {
        if (i2.isZero())
          return i2.clone();
        var a3 = this.m.andln(3);
        if (r2(a3 % 2 === 1), a3 === 3) {
          var h5 = this.m.add(new f4(1)).iushrn(2);
          return this.pow(i2, h5);
        }
        for (var s2 = this.m.subn(1), u3 = 0;!s2.isZero() && s2.andln(1) === 0; )
          u3++, s2.iushrn(1);
        r2(!s2.isZero());
        var c = new f4(1).toRed(this), b3 = c.redNeg(), l4 = this.m.subn(1).iushrn(1), n4 = this.m.bitLength();
        for (n4 = new f4(2 * n4 * n4).toRed(this);this.pow(n4, l4).cmp(b3) !== 0; )
          n4.redIAdd(b3);
        for (var d2 = this.pow(n4, s2), w2 = this.pow(i2, s2.addn(1).iushrn(1)), g2 = this.pow(i2, s2), _3 = u3;g2.cmp(c) !== 0; ) {
          for (var A6 = g2, R3 = 0;A6.cmp(c) !== 0; R3++)
            A6 = A6.redSqr();
          r2(R3 < _3);
          var I2 = this.pow(d2, new f4(1).iushln(_3 - R3 - 1));
          w2 = w2.redMul(I2), d2 = I2.redSqr(), g2 = g2.redMul(d2), _3 = R3;
        }
        return w2;
      }, P4.prototype.invm = function(i2) {
        var a3 = i2._invmp(this.m);
        return a3.negative !== 0 ? (a3.negative = 0, this.imod(a3).redNeg()) : this.imod(a3);
      }, P4.prototype.pow = function(i2, a3) {
        if (a3.isZero())
          return new f4(1).toRed(this);
        if (a3.cmpn(1) === 0)
          return i2.clone();
        var h5 = 4, s2 = new Array(1 << h5);
        s2[0] = new f4(1).toRed(this), s2[1] = i2;
        for (var u3 = 2;u3 < s2.length; u3++)
          s2[u3] = this.mul(s2[u3 - 1], i2);
        var c = s2[0], b3 = 0, l4 = 0, n4 = a3.bitLength() % 26;
        for (n4 === 0 && (n4 = 26), u3 = a3.length - 1;u3 >= 0; u3--) {
          for (var d2 = a3.words[u3], w2 = n4 - 1;w2 >= 0; w2--) {
            var g2 = d2 >> w2 & 1;
            if (c !== s2[0] && (c = this.sqr(c)), g2 === 0 && b3 === 0) {
              l4 = 0;
              continue;
            }
            b3 <<= 1, b3 |= g2, l4++, !(l4 !== h5 && (u3 !== 0 || w2 !== 0)) && (c = this.mul(c, s2[b3]), l4 = 0, b3 = 0);
          }
          n4 = 26;
        }
        return c;
      }, P4.prototype.convertTo = function(i2) {
        var a3 = i2.umod(this.m);
        return a3 === i2 ? a3.clone() : a3;
      }, P4.prototype.convertFrom = function(i2) {
        var a3 = i2.clone();
        return a3.red = null, a3;
      }, f4.mont = function(i2) {
        return new Se(i2);
      };
      function Se(v3) {
        P4.call(this, v3), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new f4(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
      }
      o2(Se, P4), Se.prototype.convertTo = function(i2) {
        return this.imod(i2.ushln(this.shift));
      }, Se.prototype.convertFrom = function(i2) {
        var a3 = this.imod(i2.mul(this.rinv));
        return a3.red = null, a3;
      }, Se.prototype.imul = function(i2, a3) {
        if (i2.isZero() || a3.isZero())
          return i2.words[0] = 0, i2.length = 1, i2;
        var h5 = i2.imul(a3), s2 = h5.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u3 = h5.isub(s2).iushrn(this.shift), c = u3;
        return u3.cmp(this.m) >= 0 ? c = u3.isub(this.m) : u3.cmpn(0) < 0 && (c = u3.iadd(this.m)), c._forceRed(this);
      }, Se.prototype.mul = function(i2, a3) {
        if (i2.isZero() || a3.isZero())
          return new f4(0)._forceRed(this);
        var h5 = i2.mul(a3), s2 = h5.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u3 = h5.isub(s2).iushrn(this.shift), c = u3;
        return u3.cmp(this.m) >= 0 ? c = u3.isub(this.m) : u3.cmpn(0) < 0 && (c = u3.iadd(this.m)), c._forceRed(this);
      }, Se.prototype.invm = function(i2) {
        var a3 = this.imod(i2._invmp(this.m).mul(this.r2));
        return a3._forceRed(this);
      };
    })(typeof xd > "u" || xd, P3);
  });
  Sd = T3((ML, O3) => {
    var C3 = y02(), mq = Te().Buffer;
    function gq(t2, e3) {
      return mq.from(t2.toRed(C3.mont(e3.modulus)).redPow(new C3(e3.publicExponent)).fromRed().toArray());
    }
    O3.exports = gq;
  });
  H3 = T3((_L, z3) => {
    var yq = Ha(), Ed = on(), wq = bf(), F3 = Md(), U3 = _d(), Ad = y02(), Mq = Sd(), _q = Ws(), Kr = Te().Buffer;
    z3.exports = function(e3, r2, o2) {
      var f4;
      e3.padding ? f4 = e3.padding : o2 ? f4 = 1 : f4 = 4;
      var p4 = yq(e3), m4;
      if (f4 === 4)
        m4 = xq(p4, r2);
      else if (f4 === 1)
        m4 = Sq(p4, r2, o2);
      else if (f4 === 3) {
        if (m4 = new Ad(r2), m4.cmp(p4.modulus) >= 0)
          throw new Error("data too long for modulus");
      } else
        throw new Error("unknown padding");
      return o2 ? _q(m4, p4) : Mq(m4, p4);
    };
    function xq(t2, e3) {
      var r2 = t2.modulus.byteLength(), o2 = e3.length, f4 = wq("sha1").update(Kr.alloc(0)).digest(), p4 = f4.length, m4 = 2 * p4;
      if (o2 > r2 - m4 - 2)
        throw new Error("message too long");
      var y4 = Kr.alloc(r2 - o2 - m4 - 2), M3 = r2 - p4 - 1, x4 = Ed(p4), S3 = U3(Kr.concat([f4, y4, Kr.alloc(1, 1), e3], M3), F3(x4, M3)), E3 = U3(x4, F3(S3, p4));
      return new Ad(Kr.concat([Kr.alloc(1), E3, S3], r2));
    }
    function Sq(t2, e3, r2) {
      var o2 = e3.length, f4 = t2.modulus.byteLength();
      if (o2 > f4 - 11)
        throw new Error("message too long");
      var p4;
      return r2 ? p4 = Kr.alloc(f4 - o2 - 3, 255) : p4 = Eq(f4 - o2 - 3), new Ad(Kr.concat([Kr.from([0, r2 ? 1 : 2]), p4, Kr.alloc(1), e3], f4));
    }
    function Eq(t2) {
      for (var e3 = Kr.allocUnsafe(t2), r2 = 0, o2 = Ed(t2 * 2), f4 = 0, p4;r2 < t2; )
        f4 === o2.length && (o2 = Ed(t2 * 2), f4 = 0), p4 = o2[f4++], p4 && (e3[r2++] = p4);
      return e3;
    }
  });
  V32 = T3((xL, Z3) => {
    var Aq = Ha(), W3 = Md(), K3 = _d(), j3 = y02(), Rq = Ws(), Bq = bf(), qq = Sd(), Za = Te().Buffer;
    Z3.exports = function(e3, r2, o2) {
      var f4;
      e3.padding ? f4 = e3.padding : o2 ? f4 = 1 : f4 = 4;
      var p4 = Aq(e3), m4 = p4.modulus.byteLength();
      if (r2.length > m4 || new j3(r2).cmp(p4.modulus) >= 0)
        throw new Error("decryption error");
      var y4;
      o2 ? y4 = qq(new j3(r2), p4) : y4 = Rq(r2, p4);
      var M3 = Za.alloc(m4 - y4.length);
      if (y4 = Za.concat([M3, y4], m4), f4 === 4)
        return Iq(p4, y4);
      if (f4 === 1)
        return Tq(p4, y4, o2);
      if (f4 === 3)
        return y4;
      throw new Error("unknown padding");
    };
    function Iq(t2, e3) {
      var r2 = t2.modulus.byteLength(), o2 = Bq("sha1").update(Za.alloc(0)).digest(), f4 = o2.length;
      if (e3[0] !== 0)
        throw new Error("decryption error");
      var p4 = e3.slice(1, f4 + 1), m4 = e3.slice(f4 + 1), y4 = K3(p4, W3(m4, f4)), M3 = K3(m4, W3(y4, r2 - f4 - 1));
      if (kq(o2, M3.slice(0, f4)))
        throw new Error("decryption error");
      for (var x4 = f4;M3[x4] === 0; )
        x4++;
      if (M3[x4++] !== 1)
        throw new Error("decryption error");
      return M3.slice(x4);
    }
    function Tq(t2, e3, r2) {
      for (var o2 = e3.slice(0, 2), f4 = 2, p4 = 0;e3[f4++] !== 0; )
        if (f4 >= e3.length) {
          p4++;
          break;
        }
      var m4 = e3.slice(2, f4 - 1);
      if ((o2.toString("hex") !== "0002" && !r2 || o2.toString("hex") !== "0001" && r2) && p4++, m4.length < 8 && p4++, p4)
        throw new Error("decryption error");
      return e3.slice(f4);
    }
    function kq(t2, e3) {
      t2 = Za.from(t2), e3 = Za.from(e3);
      var r2 = 0, o2 = t2.length;
      t2.length !== e3.length && (r2++, o2 = Math.min(t2.length, e3.length));
      for (var f4 = -1;++f4 < o2; )
        r2 += t2[f4] ^ e3[f4];
      return r2;
    }
  });
  $3 = T3((Vn) => {
    Vn.publicEncrypt = H3();
    Vn.privateDecrypt = V32();
    Vn.privateEncrypt = function(e3, r2) {
      return Vn.publicEncrypt(e3, r2, true);
    };
    Vn.publicDecrypt = function(e3, r2) {
      return Vn.privateDecrypt(e3, r2, true);
    };
  });
  nw = T3((Va) => {
    function G32() {
      throw new Error(`secure random number generation not supported by this browser
use chrome, FireFox or Internet Explorer 11`);
    }
    var X3 = Te(), Y3 = on(), J3 = X3.Buffer, Q3 = X3.kMaxLength, Rd = global.crypto || global.msCrypto, ew = Math.pow(2, 32) - 1;
    function tw(t2, e3) {
      if (typeof t2 != "number" || t2 !== t2)
        throw new TypeError("offset must be a number");
      if (t2 > ew || t2 < 0)
        throw new TypeError("offset must be a uint32");
      if (t2 > Q3 || t2 > e3)
        throw new RangeError("offset out of range");
    }
    function rw(t2, e3, r2) {
      if (typeof t2 != "number" || t2 !== t2)
        throw new TypeError("size must be a number");
      if (t2 > ew || t2 < 0)
        throw new TypeError("size must be a uint32");
      if (t2 + e3 > r2 || t2 > Q3)
        throw new RangeError("buffer too small");
    }
    Rd && Rd.getRandomValues ? (Va.randomFill = Lq, Va.randomFillSync = Nq) : (Va.randomFill = G32, Va.randomFillSync = G32);
    function Lq(t2, e3, r2, o2) {
      if (!J3.isBuffer(t2) && !(t2 instanceof global.Uint8Array))
        throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
      if (typeof e3 == "function")
        o2 = e3, e3 = 0, r2 = t2.length;
      else if (typeof r2 == "function")
        o2 = r2, r2 = t2.length - e3;
      else if (typeof o2 != "function")
        throw new TypeError('"cb" argument must be a function');
      return tw(e3, t2.length), rw(r2, e3, t2.length), iw(t2, e3, r2, o2);
    }
    function iw(t2, e3, r2, o2) {
      if (true) {
        var f4 = t2.buffer, p4 = new Uint8Array(f4, e3, r2);
        if (Rd.getRandomValues(p4), o2) {
          process.nextTick(function() {
            o2(null, t2);
          });
          return;
        }
        return t2;
      }
      if (o2) {
        Y3(r2, function(y4, M3) {
          if (y4)
            return o2(y4);
          M3.copy(t2, e3), o2(null, t2);
        });
        return;
      }
      var m4 = Y3(r2);
      return m4.copy(t2, e3), t2;
    }
    function Nq(t2, e3, r2) {
      if (typeof e3 > "u" && (e3 = 0), !J3.isBuffer(t2) && !(t2 instanceof global.Uint8Array))
        throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
      return tw(e3, t2.length), r2 === undefined && (r2 = t2.length - e3), rw(r2, e3, t2.length), iw(t2, e3, r2);
    }
  });
  Bd = T3((ke) => {
    ke.randomBytes = ke.rng = ke.pseudoRandomBytes = ke.prng = on();
    ke.createHash = ke.Hash = bf();
    ke.createHmac = ke.Hmac = yu();
    var Dq = _b(), Pq = Object.keys(Dq), Cq = ["sha1", "sha224", "sha256", "sha384", "sha512", "md5", "rmd160"].concat(Pq);
    ke.getHashes = function() {
      return Cq;
    };
    var fw = qu();
    ke.pbkdf2 = fw.pbkdf2;
    ke.pbkdf2Sync = fw.pbkdf2Sync;
    var ui = Km();
    ke.Cipher = ui.Cipher;
    ke.createCipher = ui.createCipher;
    ke.Cipheriv = ui.Cipheriv;
    ke.createCipheriv = ui.createCipheriv;
    ke.Decipher = ui.Decipher;
    ke.createDecipher = ui.createDecipher;
    ke.Decipheriv = ui.Decipheriv;
    ke.createDecipheriv = ui.createDecipheriv;
    ke.getCiphers = ui.getCiphers;
    ke.listCiphers = ui.listCiphers;
    var $a = ag();
    ke.DiffieHellmanGroup = $a.DiffieHellmanGroup;
    ke.createDiffieHellmanGroup = $a.createDiffieHellmanGroup;
    ke.getDiffieHellman = $a.getDiffieHellman;
    ke.createDiffieHellman = $a.createDiffieHellman;
    ke.DiffieHellman = $a.DiffieHellman;
    var w02 = q3();
    ke.createSign = w02.createSign;
    ke.Sign = w02.Sign;
    ke.createVerify = w02.createVerify;
    ke.Verify = w02.Verify;
    ke.createECDH = L3();
    var M02 = $3();
    ke.publicEncrypt = M02.publicEncrypt;
    ke.privateEncrypt = M02.privateEncrypt;
    ke.publicDecrypt = M02.publicDecrypt;
    ke.privateDecrypt = M02.privateDecrypt;
    var aw = nw();
    ke.randomFill = aw.randomFill;
    ke.randomFillSync = aw.randomFillSync;
    ke.createCredentials = function() {
      throw new Error(["sorry, createCredentials is not implemented yet", "we accept pull requests", "https://github.com/crypto-browserify/crypto-browserify"].join(`
`));
    };
    ke.constants = { DH_CHECK_P_NOT_SAFE_PRIME: 2, DH_CHECK_P_NOT_PRIME: 1, DH_UNABLE_TO_CHECK_GENERATOR: 4, DH_NOT_SUITABLE_GENERATOR: 8, NPN_ENABLED: 1, ALPN_ENABLED: 1, RSA_PKCS1_PADDING: 1, RSA_SSLV23_PADDING: 2, RSA_NO_PADDING: 3, RSA_PKCS1_OAEP_PADDING: 4, RSA_X931_PADDING: 5, RSA_PKCS1_PSS_PADDING: 6, POINT_CONVERSION_COMPRESSED: 2, POINT_CONVERSION_UNCOMPRESSED: 4, POINT_CONVERSION_HYBRID: 6 };
  });
  fr = {};
  Xa(fr, { DEFAULT_ENCODING: () => Fq, default: () => zq, getCurves: () => hw, getRandomValues: () => ow, randomUUID: () => sw, timingSafeEqual: () => _02, webcrypto: () => uw });
  lt(fr, rn(Bd()));
  Oq = rn(Bd());
  Uq = ["p192", "p224", "p256", "p384", "p521", "curve25519", "ed25519", "secp256k1", "secp224r1", "prime256v1", "prime192v1", "ed25519", "secp384r1", "secp521r1"];
  _02 = "timingSafeEqual" in crypto ? (t2, e3) => {
    let { byteLength: r2 } = t2, { byteLength: o2 } = e3;
    if (typeof r2 != "number" || typeof o2 != "number")
      throw new TypeError("Input must be an array buffer view");
    if (r2 !== o2)
      throw new RangeError("Input buffers must have the same length");
    return crypto.timingSafeEqual(t2, e3);
  } : undefined;
  _02 && Object.defineProperty(_02, "name", { value: "::bunternal::" });
  uw = crypto;
  zq = { ...Oq, getRandomValues: ow, randomUUID: sw, timingSafeEqual: _02, webcrypto: uw, getCurves: hw };
  /*!
     * The buffer module from node.js, for the browser.
     *
     * @author   Feross Aboukhadijeh <https://feross.org>
     * @license  MIT
     */
  /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
  /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
});
var require_seedrandom = __commonJS((exports, module) => {
  (function(global2, pool, math) {
    var width = 256, chunks = 6, digits = 52, rngname = "random", startdenom = math.pow(width, chunks), significance = math.pow(2, digits), overflow = significance * 2, mask = width - 1, nodecrypto;
    function seedrandom(seed, options, callback) {
      var key = [];
      options = options == true ? { entropy: true } : options || {};
      var shortseed = mixkey(flatten(options.entropy ? [seed, tostring(pool)] : seed == null ? autoseed() : seed, 3), key);
      var arc4 = new ARC4(key);
      var prng = function() {
        var n4 = arc4.g(chunks), d2 = startdenom, x4 = 0;
        while (n4 < significance) {
          n4 = (n4 + x4) * width;
          d2 *= width;
          x4 = arc4.g(1);
        }
        while (n4 >= overflow) {
          n4 /= 2;
          d2 /= 2;
          x4 >>>= 1;
        }
        return (n4 + x4) / d2;
      };
      prng.int32 = function() {
        return arc4.g(4) | 0;
      };
      prng.quick = function() {
        return arc4.g(4) / 4294967296;
      };
      prng.double = prng;
      mixkey(tostring(arc4.S), pool);
      return (options.pass || callback || function(prng2, seed2, is_math_call, state) {
        if (state) {
          if (state.S) {
            copy(state, arc4);
          }
          prng2.state = function() {
            return copy(arc4, {});
          };
        }
        if (is_math_call) {
          math[rngname] = prng2;
          return seed2;
        } else
          return prng2;
      })(prng, shortseed, "global" in options ? options.global : this == math, options.state);
    }
    function ARC4(key) {
      var t2, keylen = key.length, me = this, i2 = 0, j2 = me.i = me.j = 0, s2 = me.S = [];
      if (!keylen) {
        key = [keylen++];
      }
      while (i2 < width) {
        s2[i2] = i2++;
      }
      for (i2 = 0;i2 < width; i2++) {
        s2[i2] = s2[j2 = mask & j2 + key[i2 % keylen] + (t2 = s2[i2])];
        s2[j2] = t2;
      }
      (me.g = function(count) {
        var t4, r2 = 0, i3 = me.i, j3 = me.j, s3 = me.S;
        while (count--) {
          t4 = s3[i3 = mask & i3 + 1];
          r2 = r2 * width + s3[mask & (s3[i3] = s3[j3 = mask & j3 + t4]) + (s3[j3] = t4)];
        }
        me.i = i3;
        me.j = j3;
        return r2;
      })(width);
    }
    function copy(f4, t2) {
      t2.i = f4.i;
      t2.j = f4.j;
      t2.S = f4.S.slice();
      return t2;
    }
    function flatten(obj, depth) {
      var result = [], typ = typeof obj, prop;
      if (depth && typ == "object") {
        for (prop in obj) {
          try {
            result.push(flatten(obj[prop], depth - 1));
          } catch (e3) {}
        }
      }
      return result.length ? result : typ == "string" ? obj : obj + "\x00";
    }
    function mixkey(seed, key) {
      var stringseed = seed + "", smear, j2 = 0;
      while (j2 < stringseed.length) {
        key[mask & j2] = mask & (smear ^= key[mask & j2] * 19) + stringseed.charCodeAt(j2++);
      }
      return tostring(key);
    }
    function autoseed() {
      try {
        var out;
        if (nodecrypto && (out = nodecrypto.randomBytes)) {
          out = out(width);
        } else {
          out = new Uint8Array(width);
          (global2.crypto || global2.msCrypto).getRandomValues(out);
        }
        return tostring(out);
      } catch (e3) {
        var browser = global2.navigator, plugins = browser && browser.plugins;
        return [+new Date, global2, plugins, global2.screen, tostring(pool)];
      }
    }
    function tostring(a3) {
      return String.fromCharCode.apply(0, a3);
    }
    mixkey(math.random(), pool);
    if (typeof module == "object" && module.exports) {
      module.exports = seedrandom;
      try {
        nodecrypto = (init_crypto(), __toCommonJS(exports_crypto));
      } catch (ex) {}
    } else if (typeof define == "function" && define.amd) {
      define(function() {
        return seedrandom;
      });
    } else {
      math["seed" + rngname] = seedrandom;
    }
  })(typeof self !== "undefined" ? self : exports, [], Math);
});
var require_seedrandom2 = __commonJS((exports, module) => {
  var alea = require_alea();
  var xor128 = require_xor128();
  var xorwow = require_xorwow();
  var xorshift7 = require_xorshift7();
  var xor4096 = require_xor4096();
  var tychei = require_tychei();
  var sr = require_seedrandom();
  sr.alea = alea;
  sr.xor128 = xor128;
  sr.xorwow = xorwow;
  sr.xorshift7 = xorshift7;
  sr.xor4096 = xor4096;
  sr.tychei = tychei;
  module.exports = sr;
});
var GL = globalThis.WebGL2RenderingContext ?? {};
var POSITION_LOC = "position";
var INDEX_LOC = "index";
var TRANSFORM_LOC = "transform";
var SLOT_SIZE_LOC = "slotSize_and_number";
var ANIM_LOC = "animation";
var INSTANCE_LOC = "instance";
var SPRITE_TYPE_LOC = "spriteType";
var CAM_POS_LOC = "camPos";
var CAM_TILT_LOC = "camTilt";
var CAM_TURN_LOC = "camTurn";
var CAM_DISTANCE_LOC = "camDist";
var CAM_PROJECTION_LOC = "projection";
var CAM_CURVATURE_LOC = "curvature";
var BG_BLUR_LOC = "bgBlur";
var BG_COLOR_LOC = "bgColor";
var MAX_TEXTURE_SIZE_LOC = "maxTextureSize";
var TEXTURE_UNIFORM_LOC = "uTextures";
var TIME_LOC = "time";
var FADE_LOC = "fade";

class Disposable {
  disposables;
  own(destroyable) {
    if (!this.disposables) {
      this.disposables = new Set;
    }
    this.disposables.add(destroyable);
    return destroyable;
  }
  disown(destroyable) {
    this.disposables?.delete(destroyable);
  }
  addOnDestroy(callback) {
    if (callback) {
      this.disposables?.add({
        destroy: callback
      });
    }
  }
  destroy() {
    this.disposables?.forEach((disposable) => disposable.destroy());
    this.disposables?.clear();
  }
}

class GLProgram extends Disposable {
  gl;
  program;
  constructor(gl2, vertex, fragment) {
    super();
    this.gl = gl2;
    this.program = createProgram(gl2, vertex.trim(), fragment.trim());
  }
  use() {
    this.gl.useProgram(this.program);
  }
  destroy() {
    super.destroy();
    deleteProgram(this.gl, this.program);
  }
}
function createProgram(gl2, vertex, fragment) {
  function createShader(shaderSource, type) {
    function typeName(type2) {
      return type2 === gl2?.VERTEX_SHADER ? "vertex" : type2 === gl2?.FRAGMENT_SHADER ? "fragment" : undefined;
    }
    if (type !== gl2.VERTEX_SHADER && type !== gl2.FRAGMENT_SHADER) {
      throw new Error(`Shader error in ${typeName(type)}`);
    }
    const shader = gl2.createShader(type);
    if (!shader) {
      throw new Error(`Unable to generate ${typeName(type)} shader.`);
    }
    gl2.shaderSource(shader, shaderSource);
    gl2.compileShader(shader);
    if (!gl2.getShaderParameter(shader, gl2.COMPILE_STATUS)) {
      console.error(`Shader compile error in ${typeName(type)}:` + gl2.getShaderInfoLog(shader));
    }
    return shader;
  }
  const program = gl2.createProgram();
  if (!program) {
    throw new Error(`Unable to create program.`);
  }
  const vertexShader = createShader(vertex, gl2.VERTEX_SHADER);
  const fragmentShader = createShader(fragment, gl2.FRAGMENT_SHADER);
  const vertexInfo = gl2.getShaderInfoLog(vertexShader), fragmentInfo = gl2.getShaderInfoLog(fragmentShader);
  if (vertexInfo) {
    console.log("VERTEX", vertexInfo);
  }
  if (fragmentInfo) {
    console.log("FRAGMENT", fragmentInfo);
  }
  gl2.attachShader(program, vertexShader);
  gl2.attachShader(program, fragmentShader);
  gl2.linkProgram(program);
  const programInfo = gl2.getProgramInfoLog(program);
  if (programInfo) {
    console.log("PROGRAM", programInfo);
  }
  gl2.detachShader(program, vertexShader);
  gl2.detachShader(program, fragmentShader);
  gl2.deleteShader(vertexShader);
  gl2.deleteShader(fragmentShader);
  gl2.validateProgram(program);
  Object.entries(GL).forEach(([k, value]) => {
    if (value && gl2.getError() === value) {
      console.log(`gl.${k}`);
    }
  });
  if (!gl2.getProgramParameter(program, gl2.LINK_STATUS)) {
    throw new Error(`Unable to initialize the shader program:
` + gl2.getProgramInfoLog(program));
  }
  return program;
}
function deleteProgram(gl2, program) {
  gl2.deleteProgram(program);
}

class GLPrograms extends Disposable {
  gl;
  activeProgramId = "";
  programs = {};
  constructor(gl2) {
    super();
    this.gl = gl2;
  }
  addProgram(id2, vertex, fragment) {
    if (this.programs[id2]) {
      this.removeProgram(id2);
    }
    this.programs[id2] = this.own(new GLProgram(this.gl, vertex, fragment));
  }
  useProgram(id2) {
    if (this.activeProgramId !== id2) {
      this.activeProgramId = id2;
      this.programs[id2].use();
    }
  }
  removeProgram(id2) {
    this.programs[id2].destroy();
    delete this.programs[id2];
  }
  getProgram(id2) {
    return this.programs[id2 ?? this.activeProgramId]?.program;
  }
}

class VertexArray {
  gl;
  triangleArray;
  constructor(gl2) {
    this.gl = gl2;
    this.triangleArray = this.gl.createVertexArray();
  }
  bind() {
    this.gl.bindVertexArray(this.triangleArray);
  }
  destroy() {
    this.gl.deleteVertexArray(this.triangleArray);
    this.triangleArray = null;
  }
}

class GLAttributeBuffers {
  gl;
  programs;
  bufferRecord = {};
  vertexArray;
  copyBuffer = null;
  constructor(gl2, programs) {
    this.gl = gl2;
    this.programs = programs;
    this.vertexArray = new VertexArray(this.gl);
  }
  bindVertexArray() {
    this.vertexArray.bind();
  }
  getAttributeLocation(name, programId) {
    const program = this.programs.getProgram(programId);
    return program ? this.gl.getAttribLocation(program, name) ?? -1 : -1;
  }
  hasBuffer(location) {
    return !!this.bufferRecord[location];
  }
  enableVertexAttribArray(location, index = 0) {
    const bufferInfo = this.bufferRecord[location];
    if (!bufferInfo.enabledVertexAttribArray[index]) {
      bufferInfo.enabledVertexAttribArray[index] = true;
      this.gl.enableVertexAttribArray(bufferInfo.location + index);
    }
  }
  disableVertexAttribArray(location) {
    const bufferInfo = this.bufferRecord[location];
    bufferInfo.enabledVertexAttribArray.forEach((enabled, index) => {
      if (enabled) {
        this.gl.disableVertexAttribArray(bufferInfo.location + index);
        bufferInfo.enabledVertexAttribArray[index] = false;
      }
    });
  }
  createBuffer({ location, target, usage, vertexAttribPointerRows, elemCount = 0, divisor = 0, callback, instanceCount = 1, data }) {
    this.deleteBuffer(location);
    const bufferBuffer = this.gl.createBuffer();
    if (!bufferBuffer) {
      throw new Error(`Unable to create buffer "${location}"`);
    }
    const bytesPerRow = elemCount * Float32Array.BYTES_PER_ELEMENT;
    const bytesPerInstance = vertexAttribPointerRows * bytesPerRow;
    const bufferInfo = this.bufferRecord[location] = {
      location: this.getAttributeLocation(location),
      target,
      usage,
      buffer: bufferBuffer,
      enabledVertexAttribArray: [],
      bytesPerInstance,
      instanceCount,
      callback
    };
    this.vertexArray.bind();
    this.gl.bindBuffer(bufferInfo.target, bufferInfo.buffer);
    for (let row = 0;row < vertexAttribPointerRows; row++) {
      const loc = bufferInfo.location + row;
      this.gl.vertexAttribPointer(loc, elemCount, GL.FLOAT, false, bytesPerInstance, row * bytesPerRow);
      this.enableVertexAttribArray(location, row);
      this.gl.vertexAttribDivisor(loc, divisor);
    }
    if (data) {
      this.gl.bufferData(target, data, bufferInfo.usage);
    } else if (callback) {
      this.gl.bufferData(target, Float32Array.from(new Array(instanceCount).fill(0).map((_, index) => callback(index))), bufferInfo.usage);
    } else if (instanceCount) {
      this.gl.bufferData(target, instanceCount * bytesPerInstance, bufferInfo.usage);
    }
    return bufferInfo;
  }
  ensureCopyBufferSize(newCount, bufferInfo) {
    this.vertexArray.bind();
    if (this.copyBuffer) {
      const bufferSize = this.gl.getBufferParameter(GL.ARRAY_BUFFER, GL.BUFFER_SIZE);
      if (bufferSize >= newCount * bufferInfo.bytesPerInstance) {
        this.gl.bindBuffer(GL.ARRAY_BUFFER, this.copyBuffer);
        return;
      }
      this.gl.deleteBuffer(this.copyBuffer);
    }
    this.copyBuffer = this.gl.createBuffer();
    this.gl.bindBuffer(GL.ARRAY_BUFFER, this.copyBuffer);
    this.gl.bufferData(GL.ARRAY_BUFFER, newCount * bufferInfo.bytesPerInstance, GL.DYNAMIC_COPY);
  }
  ensureSize(location, newCount) {
    const bufferInfo = this.bufferRecord[location];
    if (bufferInfo && bufferInfo.instanceCount < newCount) {
      this.bindBuffer(location);
      const bufferSize = this.gl.getBufferParameter(GL.ARRAY_BUFFER, GL.BUFFER_SIZE);
      const oldBufferData = new Float32Array(bufferSize / Float32Array.BYTES_PER_ELEMENT);
      this.gl.getBufferSubData(GL.ARRAY_BUFFER, 0, oldBufferData);
      this.bindBuffer(location);
      if (bufferInfo.callback) {
        const callback = bufferInfo.callback;
        this.gl.bufferData(bufferInfo.target, Float32Array.from(new Array(newCount).fill(0).map((_, index) => callback(index))), bufferInfo.usage);
      } else if (newCount) {
        this.gl.bufferData(bufferInfo.target, newCount * bufferInfo.bytesPerInstance, bufferInfo.usage);
      }
      this.gl.bufferSubData(bufferInfo.target, 0, oldBufferData);
      bufferInfo.instanceCount = newCount;
    }
  }
  bindBuffer(location) {
    const bufferInfo = this.bufferRecord[location];
    if (bufferInfo) {
      this.vertexArray.bind();
      this.gl.bindBuffer(bufferInfo.target, bufferInfo.buffer);
    }
  }
  deleteBuffer(location) {
    const bufferInfo = this.bufferRecord[location];
    if (bufferInfo) {
      this.disableVertexAttribArray(location);
      this.gl.deleteBuffer(bufferInfo.buffer);
      delete this.bufferRecord[location];
    }
  }
  getAttributeBuffer(location) {
    const bufferInfo = this.bufferRecord[location];
    if (!bufferInfo) {
      throw new Error(`Attribute "${location}" not created. Make sure "createBuffer" is called.`);
    }
    return bufferInfo;
  }
  clear() {
    Object.keys(this.bufferRecord).forEach((location) => this.deleteBuffer(location));
  }
  destroy() {
    this.clear();
  }
}
var vertexShader_default = `#version 300 es
//  ~{AUTHOR}

precision highp float;

//  FUNCTIONS
float rand(vec2 co) {
  return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

//  CONST
const mat4 identity = mat4(1.0);
const float SPRITE = 1.0;
const float HUD = 2.0;
const float DISTANT = 3.0;
const float WAVE = 4.0;

//  IN
//  shape
layout(location = 0) in vec2 position;
layout(location = 1) in mat4 transform;
//  1, 2, 3, 4 reserved for transform
//  animation
layout(location = 5) in vec4 slotSize_and_number;
layout(location = 6) in vec4 animation;
//  instance
layout(location = 7) in float instance;
layout(location = 8) in float spriteType;

//  UNIFORM
uniform float maxTextureSize;
uniform mat4 camPos;
uniform mat4 camTurn;
uniform mat4 camTilt;
uniform float camDist;
uniform mat4 projection;
uniform float curvature;
uniform float time;

//  OUT
out float vTextureIndex;
out vec2 vTex;
out float dist;
out vec3 vInstanceColor;
out vec2 var;
out vec3 vNormal;

void main() {
  vec2 slotSize = vec2(pow(2.0, floor(slotSize_and_number.x / 16.0)),
                       pow(2.0, mod(slotSize_and_number.x, 16.0)));
  float slotNumber = slotSize_and_number.y;
  vec2 spriteSize = abs(slotSize_and_number.zw);
  vec2 tex = (position.xy) * vec2(0.49, -0.49) * sign(slotSize_and_number.zw) +
             0.5; //  Texture corners 0..1
  float sheetCols = ceil(1. / spriteSize[0]);
  float frameStart = animation[0];
  float frameEnd = animation[1];
  float fps = animation[2];
  float maxFrameCount = animation[3];
  float frameOffset =
      floor(mod(min(time * fps / 1000., maxFrameCount), frameEnd + 1.));
  float frame = frameStart + frameOffset;
  tex += vec2(1., 0) * mod(frame, sheetCols) +
         vec2(0, 1.) * floor(frame / sheetCols);
  tex *= spriteSize;

  float maxCols = maxTextureSize / slotSize.x;
  float maxRows = maxTextureSize / slotSize.y;
  float slotX = mod(slotNumber, maxCols);
  float slotY = mod(floor(slotNumber / maxCols), maxRows);

  vec4 basePosition = vec4(position, 0.0, 1.0);

  float isHud = max(0., 1. - 2. * abs(spriteType - HUD));
  float isSprite = max(0., 1. - 2. * abs(spriteType - SPRITE));
  float isDistant = max(0., 1. - 2. * abs(spriteType - DISTANT));
  float isWave = max(0., 1. - 2. * abs(spriteType - WAVE));

  mat4 billboardMatrix = inverse(camTilt * camTurn);
  float isBillboard = max(isDistant, isSprite);
  basePosition =
      (isBillboard * billboardMatrix + (1. - isBillboard) * identity) *
      basePosition;

  vec4 worldPosition = transform * basePosition;
  var = vec2(rand(worldPosition.xz), rand(worldPosition.xz - worldPosition.yx));

  float noise = rand(worldPosition.xz) * 13.;
  worldPosition.y += isWave * sin(noise + time / 1000.);

  vNormal.y = 1.5 + isWave * sin(noise + 1333. + time / 777.);
  vNormal.x = isWave * sin(noise + time / 1000.);
  vNormal.z = isWave * cos(noise + time / 1001.);

  // worldPosition => relativePositio
  vec4 relativePosition = camTilt * camTurn * camPos * worldPosition;

  float actualCurvature = curvature * (1. - isDistant);
  relativePosition.y -= actualCurvature *
                        ((relativePosition.z * relativePosition.z) +
                         (relativePosition.x * relativePosition.x) / 4.) /
                        10.;
  relativePosition.x /= (1. + actualCurvature * 1.4);

  relativePosition.z -= camDist;

  float focusDistZ = (10. + relativePosition.z);
  dist = max(isDistant, isHud) + (1. - max(isDistant, isHud)) *
                                     (focusDistZ * focusDistZ +
                                      relativePosition.x * relativePosition.x);
  // relativePosition => gl_Position
  relativePosition = isHud * worldPosition + (1. - isHud) * relativePosition;
  gl_Position = projection * relativePosition;

  vTex = (vec2(slotX, slotY) + tex) * slotSize / maxTextureSize;
  vTextureIndex = floor(slotNumber / (maxCols * maxRows));

  //  instance
  float r = fract(instance / (256.0 * 256.0 * 255.0));
  float g = fract(instance / (256.0 * 255.0));
  float b = fract(instance / 255.0);
  vInstanceColor = vec3(r, g, b);
}
`;
var fragmentShader_default = `#version 300 es
//  ~{AUTHOR}

precision highp float;

//  CONST
const int NUM_TEXTURES = 16;
const float threshold = 0.00001;

//  IN
//  texture
in float vTextureIndex;
in vec2 vTex;
in float dist;
in vec3 vInstanceColor;
in vec2 var;
in vec3 vNormal;

//  OUT
out vec4 fragColor;

// UNIFORMS
uniform sampler2D uTextures[NUM_TEXTURES];
uniform vec3 bgColor;
uniform float bgBlur;
uniform float time;
uniform float fade;

//  FUNCTIONS
vec4 getTextureColor(float textureSlot, vec2 vTexturePoint);

float rand(vec2 co) {
  return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

struct DirectionalLight {
  vec3 direction;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};

// Function to calculate combined color with directional light
vec3 calculateDirectionalLight(DirectionalLight dirLight, vec3 existingColor,
                               vec3 normal) {
  // Calculate diffuse reflection
  float diff = max(dot(normal, -dirLight.direction), 0.0);
  vec3 diffuse = dirLight.diffuse * diff;

  // Combine existing color with diffuse reflection
  return existingColor * (dirLight.ambient + diffuse);
}

void main() {
  vec2 vFragment = vTex;
  float blur = bgBlur * pow(dist, .7) / 20000.;
  vec4 color = getTextureColor(vTextureIndex, vTex);
  if (color.a < rand(vTex)) {
    discard;
  };
  int blurPass = 8;
  vec2 vecSeed = vTex * mod(time, 7.);
  for (int i = 0; i < blurPass; i++) {
    vFragment = vTex + blur * (rand(vecSeed + dist * float(i) - .5));
    color += getTextureColor(vTextureIndex, vFragment);
  }
  color /= float(blurPass + 1);

  float colorFactor = 1. * pow(dist, -.12) * (1. - fade);
  color.rg += var.x * .02;
  color.gb += var.y * .03;
  color.rgb = color.rgb * colorFactor + bgColor * (1. - colorFactor);

  color.rgb += vInstanceColor / 10.;

  // Hardcoded DirectionalLight
  DirectionalLight dirLight;
  dirLight.direction = normalize(vec3(-1.0, -1.0, -1.0)); // Example direction
  dirLight.ambient = vec3(0.1, 0.1, 0.1);       // Example ambient color
  dirLight.diffuse = vec3(1.0, 1.0, 1.0) * 1.5; // More intense diffuse color
  dirLight.specular = vec3(1.0, 1.0, 1.0);      // Example specular color

  color.rgb = calculateDirectionalLight(dirLight, color.rgb, vNormal);

  fragColor = vec4(color.rgb, 1.);
}

vec4 getTextureColor(float textureSlot, vec2 vTexturePoint) {
  if (abs(0.0 - textureSlot) < threshold) {
    return texture(uTextures[0], vTexturePoint);
  }
  if (abs(1.0 - textureSlot) < threshold) {
    return texture(uTextures[1], vTexturePoint);
  }
  if (abs(2.0 - textureSlot) < threshold) {
    return texture(uTextures[2], vTexturePoint);
  }
  if (abs(3.0 - textureSlot) < threshold) {
    return texture(uTextures[3], vTexturePoint);
  }
  if (abs(4.0 - textureSlot) < threshold) {
    return texture(uTextures[4], vTexturePoint);
  }
  if (abs(5.0 - textureSlot) < threshold) {
    return texture(uTextures[5], vTexturePoint);
  }
  if (abs(6.0 - textureSlot) < threshold) {
    return texture(uTextures[6], vTexturePoint);
  }
  if (abs(7.0 - textureSlot) < threshold) {
    return texture(uTextures[7], vTexturePoint);
  }
  if (abs(8.0 - textureSlot) < threshold) {
    return texture(uTextures[8], vTexturePoint);
  }
  if (abs(9.0 - textureSlot) < threshold) {
    return texture(uTextures[9], vTexturePoint);
  }
  if (abs(10.0 - textureSlot) < threshold) {
    return texture(uTextures[10], vTexturePoint);
  }
  if (abs(11.0 - textureSlot) < threshold) {
    return texture(uTextures[11], vTexturePoint);
  }
  if (abs(12.0 - textureSlot) < threshold) {
    return texture(uTextures[12], vTexturePoint);
  }
  if (abs(13.0 - textureSlot) < threshold) {
    return texture(uTextures[13], vTexturePoint);
  }
  if (abs(14.0 - textureSlot) < threshold) {
    return texture(uTextures[14], vTexturePoint);
  }
  if (abs(15.0 - textureSlot) < threshold) {
    return texture(uTextures[15], vTexturePoint);
  }
  return texture(uTextures[0], vTexturePoint);
}
`;

class Z {
  z;
  b;
  k;
  y;
  width;
  height;
  isVideo;
  #z = new Set;
  constructor(z, b, k, y) {
    this.id = z;
    this.texImgSrc = b;
    this.refreshRate = k;
    this.canvasImgSrc = y;
    const N = b;
    if (this.isVideo = !!(N.videoWidth || N.videoHeight), this.width = N.naturalWidth ?? N.videoWidth ?? N.displayWidth ?? N.width?.baseValue?.value ?? N.width, this.height = N.naturalHeight ?? N.videoHeight ?? N.displayHeight ?? N.height?.baseValue?.value ?? N.height, this.canvasImgSrc = y, !this.width || !this.height)
      throw new Error("Invalid image");
  }
  refresh() {
    this.refreshCallback?.();
  }
  static createFromCanvas(z, b) {
    return new Z(z, b, undefined, b);
  }
  static async loadImage(z, b) {
    const k = await new Promise((y, N) => {
      const U = new Image;
      U.crossOrigin = "anonymous";
      const w = (j) => N(j.error);
      U.addEventListener("error", w), U.addEventListener("load", () => y(U), { once: true }), U.src = b;
    });
    return new Z(z, k, undefined, k);
  }
  static async loadVideo(z, b, k, y = 30, N = 1, U = Number.MAX_SAFE_INTEGER) {
    const w = await new Promise((P, W) => {
      const F = document.createElement("video");
      if (F.loop = true, k !== undefined)
        F.volume = k;
      F.addEventListener("loadedmetadata", () => {
        F.play(), F.playbackRate = N, P(F);
      }, { once: true }), document.addEventListener("focus", () => F.play()), F.addEventListener("error", (_) => W(_.error)), F.src = b;
    }), j = new Z(z, w, Math.min(y * N, U));
    return j.#z.add(() => w.pause()), j;
  }
  static async loadWebcam(z, b) {
    const k = await new Promise((U, w) => {
      const j = document.createElement("video");
      j.loop = true, j.addEventListener("loadedmetadata", () => j.play()), j.addEventListener("playing", () => U(j), { once: true }), j.addEventListener("error", (P) => w(P.error));
    }), y = new Z(z, k);
    let N = false;
    return navigator.mediaDevices.getUserMedia({ video: { deviceId: b } }).then((U) => {
      if (!N)
        k.srcObject = U, y.#z.add(() => U.getTracks().forEach((w) => w.stop()));
    }), y.#z.add(() => {
      N = true, k.pause();
    }), y;
  }
  dispose() {
    this.#z.forEach((z) => z()), this.#z.clear();
  }
}
var T = function(z) {
  return z;
};

class v {
  renderProcedures = { image: T((z, b) => this.loadImage(z, b.src)), video: T((z, b) => this.loadVideo(z, b.src, b.volume, b.fps, b.playSpeed)), draw: T((z, b) => this.drawImage(z, b.draw)), canvas: T((z, b) => this.loadCanvas(z, b.canvas)), webcam: T((z, b) => this.loadWebCam(z, b.deviceId)) };
  async postProcess(z, b) {
    if (z.canvasImgSrc) {
      const k = new OffscreenCanvas(z.width, z.height);
      let y = k.getContext("2d");
      if (y)
        y.drawImage(z.canvasImgSrc, 0, 0), y = await b(y) ?? y;
      const N = z.id;
      return z.dispose(), Z.createFromCanvas(N, k);
    }
    return z;
  }
  async renderMedia(z, b) {
    const k = await this.renderProcedures[b.type](z, b), { postProcess: y } = b;
    return y ? this.postProcess(k, y) : k;
  }
  async drawImage(z, b) {
    const k = new OffscreenCanvas(1, 1);
    return b(k.getContext("2d")), Z.createFromCanvas(z, k);
  }
  async loadCanvas(z, b) {
    return Z.createFromCanvas(z, b);
  }
  async loadImage(z, b) {
    return await Z.loadImage(z, b);
  }
  async loadVideo(z, b, k, y, N, U) {
    return await Z.loadVideo(z, b, k, y, N, U);
  }
  async loadWebCam(z, b) {
    return await Z.loadWebcam(z, b);
  }
}
var H = globalThis.WebGL2RenderingContext ?? {};
var u = function(z, b = (k) => k.key) {
  var k = [];
  return M(z, "", true, (y) => k.push(y), b), k.join("");
};
var L = function(z) {
  if (z === null)
    return true;
  var b = E(z.left), k = E(z.right);
  if (Math.abs(b - k) <= 1 && L(z.left) && L(z.right))
    return true;
  return false;
};
var R = function(z, b, k, y, N) {
  const U = N - y;
  if (U > 0) {
    const w = y + Math.floor(U / 2), j = b[w], P = k[w], W = { key: j, data: P, parent: z };
    return W.left = R(W, b, k, y, w), W.right = R(W, b, k, w + 1, N), W;
  }
  return null;
};
var f = function(z) {
  if (z === null)
    return 0;
  const b = f(z.left), k = f(z.right);
  return z.balanceFactor = b - k, Math.max(b, k) + 1;
};
var Q = function(z, b, k, y, N) {
  if (k >= y)
    return;
  const U = z[k + y >> 1];
  let w = k - 1, j = y + 1;
  while (true) {
    do
      w++;
    while (N(z[w], U) < 0);
    do
      j--;
    while (N(z[j], U) > 0);
    if (w >= j)
      break;
    let P = z[w];
    z[w] = z[j], z[j] = P, P = b[w], b[w] = b[j], b[j] = P;
  }
  Q(z, b, k, j, N), Q(z, b, j + 1, y, N);
};
var S = function(z, b) {
  return Math.max(b, Math.pow(2, Math.ceil(Math.log(z) / Math.log(2))));
};
var x = function(z, b, k, y) {
  if (k < 1)
    throw new Error("Invalid count");
  const N = S(z, y.min), U = S(b, y.min), w = new Map;
  let j = y.min;
  for (let P = 1;P <= k; P++) {
    j = S(N * P, y.min);
    const W = S(U * Math.ceil(k / P), y.min);
    w.set(j, W);
  }
  for (let P = j;P <= y.max; P *= 2)
    if (!w.has(P))
      w.set(P, U);
  return w;
};
var M = function(z, b, k, y, N) {
  if (z) {
    y(`${b}${k ? "└── " : "├── "}${N(z)}
`);
    const U = b + (k ? "    " : "│   ");
    if (z.left)
      M(z.left, U, false, y, N);
    if (z.right)
      M(z.right, U, true, y, N);
  }
};
var E = function(z) {
  return z ? 1 + Math.max(E(z.left), E(z.right)) : 0;
};
var n = function(z, b) {
  return z > b ? 1 : z < b ? -1 : 0;
};
var p = function(z) {
  var b = z.right;
  if (z.right = b.left, b.left)
    b.left.parent = z;
  if (b.parent = z.parent, b.parent)
    if (b.parent.left === z)
      b.parent.left = b;
    else
      b.parent.right = b;
  if (z.parent = b, b.left = z, z.balanceFactor += 1, b.balanceFactor < 0)
    z.balanceFactor -= b.balanceFactor;
  if (b.balanceFactor += 1, z.balanceFactor > 0)
    b.balanceFactor += z.balanceFactor;
  return b;
};
var h = function(z) {
  var b = z.left;
  if (z.left = b.right, z.left)
    z.left.parent = z;
  if (b.parent = z.parent, b.parent)
    if (b.parent.left === z)
      b.parent.left = b;
    else
      b.parent.right = b;
  if (z.parent = b, b.right = z, z.balanceFactor -= 1, b.balanceFactor > 0)
    z.balanceFactor -= b.balanceFactor;
  if (b.balanceFactor -= 1, z.balanceFactor < 0)
    b.balanceFactor += z.balanceFactor;
  return b;
};

class X {
  constructor(z, b = false) {
    this._comparator = z || n, this._root = null, this._size = 0, this._noDuplicates = !!b;
  }
  destroy() {
    return this.clear();
  }
  clear() {
    return this._root = null, this._size = 0, this;
  }
  get size() {
    return this._size;
  }
  contains(z) {
    if (this._root) {
      var b = this._root, k = this._comparator;
      while (b) {
        var y = k(z, b.key);
        if (y === 0)
          return true;
        else if (y < 0)
          b = b.left;
        else
          b = b.right;
      }
    }
    return false;
  }
  next(z) {
    var b = z;
    if (b)
      if (b.right) {
        b = b.right;
        while (b.left)
          b = b.left;
      } else {
        b = z.parent;
        while (b && b.right === z)
          z = b, b = b.parent;
      }
    return b;
  }
  prev(z) {
    var b = z;
    if (b)
      if (b.left) {
        b = b.left;
        while (b.right)
          b = b.right;
      } else {
        b = z.parent;
        while (b && b.left === z)
          z = b, b = b.parent;
      }
    return b;
  }
  forEach(z) {
    var b = this._root, k = [], y = false, N = 0;
    while (!y)
      if (b)
        k.push(b), b = b.left;
      else if (k.length > 0)
        b = k.pop(), z(b, N++), b = b.right;
      else
        y = true;
    return this;
  }
  range(z, b, k, y) {
    const N = [], U = this._comparator;
    let w = this._root, j;
    while (N.length !== 0 || w)
      if (w)
        N.push(w), w = w.left;
      else {
        if (w = N.pop(), j = U(w.key, b), j > 0)
          break;
        else if (U(w.key, z) >= 0) {
          if (k.call(y, w))
            return this;
        }
        w = w.right;
      }
    return this;
  }
  keys() {
    var z = this._root, b = [], k = [], y = false;
    while (!y)
      if (z)
        b.push(z), z = z.left;
      else if (b.length > 0)
        z = b.pop(), k.push(z.key), z = z.right;
      else
        y = true;
    return k;
  }
  values() {
    var z = this._root, b = [], k = [], y = false;
    while (!y)
      if (z)
        b.push(z), z = z.left;
      else if (b.length > 0)
        z = b.pop(), k.push(z.data), z = z.right;
      else
        y = true;
    return k;
  }
  at(z) {
    var b = this._root, k = [], y = false, N = 0;
    while (!y)
      if (b)
        k.push(b), b = b.left;
      else if (k.length > 0) {
        if (b = k.pop(), N === z)
          return b;
        N++, b = b.right;
      } else
        y = true;
    return null;
  }
  minNode() {
    var z = this._root;
    if (!z)
      return null;
    while (z.left)
      z = z.left;
    return z;
  }
  maxNode() {
    var z = this._root;
    if (!z)
      return null;
    while (z.right)
      z = z.right;
    return z;
  }
  min() {
    var z = this._root;
    if (!z)
      return null;
    while (z.left)
      z = z.left;
    return z.key;
  }
  max() {
    var z = this._root;
    if (!z)
      return null;
    while (z.right)
      z = z.right;
    return z.key;
  }
  isEmpty() {
    return !this._root;
  }
  pop() {
    var z = this._root, b = null;
    if (z) {
      while (z.left)
        z = z.left;
      b = { key: z.key, data: z.data }, this.remove(z.key);
    }
    return b;
  }
  popMax() {
    var z = this._root, b = null;
    if (z) {
      while (z.right)
        z = z.right;
      b = { key: z.key, data: z.data }, this.remove(z.key);
    }
    return b;
  }
  find(z) {
    var b = this._root, k = b, y, N = this._comparator;
    while (k)
      if (y = N(z, k.key), y === 0)
        return k;
      else if (y < 0)
        k = k.left;
      else
        k = k.right;
    return null;
  }
  insert(z, b) {
    if (!this._root)
      return this._root = { parent: null, left: null, right: null, balanceFactor: 0, key: z, data: b }, this._size++, this._root;
    var k = this._comparator, y = this._root, N = null, U = 0;
    if (this._noDuplicates)
      while (y)
        if (U = k(z, y.key), N = y, U === 0)
          return null;
        else if (U < 0)
          y = y.left;
        else
          y = y.right;
    else
      while (y)
        if (U = k(z, y.key), N = y, U <= 0)
          y = y.left;
        else
          y = y.right;
    var w = { left: null, right: null, balanceFactor: 0, parent: N, key: z, data: b }, j;
    if (U <= 0)
      N.left = w;
    else
      N.right = w;
    while (N) {
      if (U = k(N.key, z), U < 0)
        N.balanceFactor -= 1;
      else
        N.balanceFactor += 1;
      if (N.balanceFactor === 0)
        break;
      else if (N.balanceFactor < -1) {
        if (N.right.balanceFactor === 1)
          h(N.right);
        if (j = p(N), N === this._root)
          this._root = j;
        break;
      } else if (N.balanceFactor > 1) {
        if (N.left.balanceFactor === -1)
          p(N.left);
        if (j = h(N), N === this._root)
          this._root = j;
        break;
      }
      N = N.parent;
    }
    return this._size++, w;
  }
  remove(z) {
    if (!this._root)
      return null;
    var b = this._root, k = this._comparator, y = 0;
    while (b)
      if (y = k(z, b.key), y === 0)
        break;
      else if (y < 0)
        b = b.left;
      else
        b = b.right;
    if (!b)
      return null;
    var N = b.key, U, w;
    if (b.left) {
      U = b.left;
      while (U.left || U.right) {
        while (U.right)
          U = U.right;
        if (b.key = U.key, b.data = U.data, U.left)
          b = U, U = U.left;
      }
      b.key = U.key, b.data = U.data, b = U;
    }
    if (b.right) {
      w = b.right;
      while (w.left || w.right) {
        while (w.left)
          w = w.left;
        if (b.key = w.key, b.data = w.data, w.right)
          b = w, w = w.right;
      }
      b.key = w.key, b.data = w.data, b = w;
    }
    var j = b.parent, P = b, W;
    while (j) {
      if (j.left === P)
        j.balanceFactor -= 1;
      else
        j.balanceFactor += 1;
      if (j.balanceFactor < -1) {
        if (j.right.balanceFactor === 1)
          h(j.right);
        if (W = p(j), j === this._root)
          this._root = W;
        j = W;
      } else if (j.balanceFactor > 1) {
        if (j.left.balanceFactor === -1)
          p(j.left);
        if (W = h(j), j === this._root)
          this._root = W;
        j = W;
      }
      if (j.balanceFactor === -1 || j.balanceFactor === 1)
        break;
      P = j, j = j.parent;
    }
    if (b.parent)
      if (b.parent.left === b)
        b.parent.left = null;
      else
        b.parent.right = null;
    if (b === this._root)
      this._root = null;
    return this._size--, N;
  }
  load(z = [], b = [], k) {
    if (this._size !== 0)
      throw new Error("bulk-load: tree is not empty");
    const y = z.length;
    if (k)
      Q(z, b, 0, y - 1, this._comparator);
    return this._root = R(null, z, b, 0, y), f(this._root), this._size = y, this;
  }
  isBalanced() {
    return L(this._root);
  }
  toString(z) {
    return u(this._root, z);
  }
}
X.default = X;

class A {
  size;
  slotNumber;
  x;
  y;
  textureIndex;
  parent;
  sibbling;
  textureSizeLimits;
  constructor(z, b, k, y) {
    this.textureSizeLimits = k?.textureSizeLimits ?? y ?? { min: C, max: D }, this.size = z, this.slotNumber = b, this.parent = k, this.sibbling = undefined;
    const { x: N, y: U, textureIndex: w } = this.calculatePosition(z, b);
    this.x = N, this.y = U, this.textureIndex = w;
  }
  calculateTextureIndex(z, b) {
    const [k, y] = z, N = this.textureSizeLimits.max / k * (this.textureSizeLimits.max / y);
    return Math.floor(b / N);
  }
  calculatePosition(z, b) {
    const [k, y] = z, N = this.textureSizeLimits.max / k, U = this.textureSizeLimits.max / y, w = b % N * k, j = Math.floor(b / N) % U * y;
    return { x: w, y: j, textureIndex: this.calculateTextureIndex(z, b) };
  }
  getTag() {
    return A.getTag(this);
  }
  static getTag(z) {
    return `${z.size[0]}x${z.size[1]}-#${z.slotNumber}`;
  }
  static positionToTextureSlot(z, b, k, y, N) {
    const [U, w] = k, j = N.textureSizeLimits.max / U, P = N.textureSizeLimits.max / U * (N.textureSizeLimits.max / w) * y + b / w * j + z / U;
    return new A(k, P, N);
  }
  getPosition() {
    return { x: this.x, y: this.y, size: this.size, textureIndex: this.textureIndex };
  }
  canSplitHorizontally() {
    const [, z] = this.size;
    return z > this.textureSizeLimits.min;
  }
  canSplitVertically() {
    const [z] = this.size;
    return z > this.textureSizeLimits.min;
  }
  splitHorizontally() {
    const { x: z, y: b, size: k, textureIndex: y } = this, [N, U] = k;
    if (!this.canSplitHorizontally())
      throw new Error(`Cannot split texture slot of size ${N} horizontally`);
    const w = N / 2, j = A.positionToTextureSlot(z, b, [w, U], y, this), P = A.positionToTextureSlot(z + w, b, [w, U], y, this);
    return j.sibbling = P, P.sibbling = j, [j, P];
  }
  splitVertically() {
    const { x: z, y: b, size: k, textureIndex: y } = this, [N, U] = k;
    if (!this.canSplitVertically())
      throw new Error(`Cannot split texture slot of size ${U} vertically`);
    const w = U / 2, j = A.positionToTextureSlot(z, b, [N, w], y, this), P = A.positionToTextureSlot(z, b + w, [N, w], y, this);
    return j.sibbling = P, P.sibbling = j, [j, P];
  }
}
var O = false;
var C = 16;
var D = 4096;
var g = 16;

class B {
  textureSlots = new X((z, b) => {
    const k = z.size[0] * z.size[1] - b.size[0] * b.size[1];
    if (k !== 0)
      return k;
    return z.slotNumber - b.slotNumber;
  }, false);
  allocatedTextures = {};
  minTextureSize;
  maxTextureSize;
  numTextureSheets;
  initialSlots = [];
  constructor({ numTextureSheets: z, minTextureSize: b, maxTextureSize: k, excludeTexture: y } = {}, N) {
    if (this.numTextureSheets = z ?? g, this.minTextureSize = b ?? C, this.maxTextureSize = k ?? D, N)
      this.numTextureSheets = Math.min(this.numTextureSheets, N.getParameter(WebGL2RenderingContext.MAX_TEXTURE_IMAGE_UNITS)), this.maxTextureSize = Math.min(this.maxTextureSize, N.getParameter(WebGL2RenderingContext.MAX_TEXTURE_SIZE)), this.minTextureSize = Math.min(this.minTextureSize, this.maxTextureSize);
    for (let U = 0;U < this.numTextureSheets; U++) {
      if (y?.(U))
        continue;
      this.initialSlots.push(new A([this.maxTextureSize, this.maxTextureSize], U, undefined, { min: this.minTextureSize, max: this.maxTextureSize }));
    }
    this.initialSlots.forEach((U) => this.textureSlots.insert(U));
  }
  allocate(z, b, k = 1) {
    const { size: y, slotNumber: N, x: U, y: w, textureIndex: j } = this.allocateHelper(z, b, k);
    return { size: y, slotNumber: N, x: U, y: w, textureIndex: j };
  }
  deallocate(z) {
    if (!this.isSlotUsed(z))
      throw new Error("Slot is not allocated");
    const b = this.allocatedTextures[A.getTag(z)];
    this.deallocateHelper(b);
  }
  get countUsedTextureSheets() {
    return this.initialSlots.filter((z) => this.isSlotUsed(z)).length;
  }
  allocateHelper(z, b, k = 1) {
    const y = x(z, b, k, { min: this.minTextureSize, max: this.maxTextureSize }), N = this.findSlot(y);
    if (!N)
      throw new Error(`Could not find a slot for texture to fit ${k} sprites of size ${z}x${b}`);
    this.textureSlots.remove(N);
    const [U, w] = this.bestFit(y, N);
    return this.fitSlot(N, U, w);
  }
  findSlot(z) {
    for (let b = 0;b < this.textureSlots.size; b++) {
      const k = this.textureSlots.at(b).key, [y, N] = k.size;
      if (z.get(y) <= N)
        return k;
    }
    return null;
  }
  calculateRatio(z, b) {
    return Math.max(z / b, b / z);
  }
  bestFit(z, b) {
    const [k, y] = b.size;
    let N = b.textureSizeLimits.max;
    return z.forEach((U, w) => {
      if (w <= k && U <= y) {
        const j = w * U, P = z.get(N) * N;
        if (j < P)
          N = w;
        else if (j === P) {
          if (this.calculateRatio(w, U) < this.calculateRatio(N, z.get(N)))
            N = w;
        }
      }
    }), [N, z.get(N)];
  }
  isSlotUsed(z) {
    return !!this.allocatedTextures[A.getTag(z)];
  }
  deallocateHelper(z) {
    if (z.parent && z.sibbling && !this.isSlotUsed(z.sibbling)) {
      const b = z.sibbling;
      if (this.textureSlots.remove(b), O && this.textureSlots.find(z))
        throw new Error("Slot is not expected to be in the tree");
      const k = z.parent;
      this.deallocateHelper(k);
      return;
    }
    this.textureSlots.insert(z), delete this.allocatedTextures[z.getTag()];
  }
  trySplitHorizontally(z, b, k) {
    if (z.canSplitHorizontally()) {
      const [y, N] = z.splitHorizontally();
      if (y.size[0] >= b)
        return this.textureSlots.insert(N), this.fitSlot(y, b, k);
    }
    return null;
  }
  trySplitVertically(z, b, k) {
    if (z.canSplitVertically()) {
      const [y, N] = z.splitVertically();
      if (y.size[1] >= k)
        return this.textureSlots.insert(N), this.fitSlot(y, b, k);
    }
    return null;
  }
  fitSlot(z, b, k) {
    if (this.allocatedTextures[z.getTag()] = z, z.size[0] > z.size[1]) {
      const y = this.trySplitHorizontally(z, b, k) ?? this.trySplitVertically(z, b, k);
      if (y)
        return y;
    } else {
      const y = this.trySplitVertically(z, b, k) ?? this.trySplitHorizontally(z, b, k);
      if (y)
        return y;
    }
    return z;
  }
}
var V = 15;
var $ = `TEXTURE${V}`;

class l {
  gl;
  texturesById = {};
  #z = new OffscreenCanvas(1, 1).getContext("2d");
  #b = new B({ excludeTexture: (z) => z === V });
  #k = new B({ excludeTexture: (z) => z !== V });
  #y = new Set;
  constructor({ gl: z, textureSlotAllocator: b = new B({ excludeTexture: (y) => y === V }), textureSlotAllocatorForVideo: k = new B({ excludeTexture: (y) => y !== V }) }) {
    this.gl = z, this.#b = b, this.#k = k, this.#z.imageSmoothingEnabled = true;
  }
  getTexture(z) {
    if (!this.texturesById[z]) {
      const b = this.gl.createTexture();
      if (!b)
        return;
      const k = z === $ ? this.#k : this.#b;
      this.texturesById[z] = b, this.gl.bindTexture(H.TEXTURE_2D, b), this.gl.texImage2D(H.TEXTURE_2D, 0, H.RGBA, k.maxTextureSize, k.maxTextureSize, 0, H.RGBA, H.UNSIGNED_BYTE, null), this.generateMipMap(z);
    }
    return this.texturesById[z];
  }
  loadTexture(z, b, k, y, N) {
    this.gl.activeTexture(H[b]), this.gl.bindTexture(H.TEXTURE_2D, k), this.applyTexImage2d(z, y, N), this.gl.texParameteri(H.TEXTURE_2D, H.TEXTURE_MIN_FILTER, H.LINEAR);
  }
  applyTexImage2d(z, [b, k, y, N], [U, w, j, P]) {
    if (y === j && N === P && !b && !k)
      this.gl.texSubImage2D(H.TEXTURE_2D, 0, U, w, j, P, H.RGBA, H.UNSIGNED_BYTE, z.texImgSrc);
    else {
      const W = this.#z.canvas;
      if (z.texImgSrc instanceof ImageData) {
        if (W.width = j || z.width, W.height = P || z.height, this.#z.putImageData(z.texImgSrc, 0, 0), b || k)
          console.warn("Offset not available when sending imageData");
      } else {
        const F = y || z.width, _ = N || z.height;
        W.width = j || F, W.height = P || _, this.#z.drawImage(z.texImgSrc, b, k, F, _, 0, 0, W.width, W.height);
      }
      this.gl.texSubImage2D(H.TEXTURE_2D, 0, U, w, W.width, W.height, H.RGBA, H.UNSIGNED_BYTE, W);
    }
  }
  allocateSlotForImage(z) {
    const k = (z.isVideo ? this.#k : this.#b).allocate(z.width, z.height), y = `TEXTURE${k.textureIndex}`, N = this.getTexture(y);
    if (!N)
      throw new Error(`Invalid texture Id ${y}`);
    const U = this.assignImageToTexture(z, y, N, [0, 0, z.width, z.height], [k.x, k.y, k.size[0], k.size[1]]);
    return { slot: k, refreshCallback: U };
  }
  assignImageToTexture(z, b, k, y, N) {
    const U = y ?? [0, 0, z.width, z.height], w = N ?? [0, 0, U[2], U[3]], j = () => {
      this.gl.bindTexture(H.TEXTURE_2D, k), this.applyTexImage2d(z, U, w);
    };
    if (this.#y.has(z))
      j();
    else
      this.loadTexture(z, b, k, U, w), this.#y.add(z);
    return j;
  }
  setupTextureForVideo(z) {
    const b = this.getTexture(z);
    if (b)
      this.gl.activeTexture(H[z]), this.gl.bindTexture(H.TEXTURE_2D, b), this.gl.texParameteri(H.TEXTURE_2D, H.TEXTURE_MIN_FILTER, H.LINEAR), this.gl.texParameteri(H.TEXTURE_2D, H.TEXTURE_MAG_FILTER, H.LINEAR);
  }
  generateMipMap(z) {
    const b = this.getTexture(z);
    if (b)
      this.gl.activeTexture(H[z]), this.gl.bindTexture(H.TEXTURE_2D, b), this.gl.texParameteri(H.TEXTURE_2D, H.TEXTURE_MIN_FILTER, H.LINEAR_MIPMAP_LINEAR), this.gl.texParameteri(H.TEXTURE_2D, H.TEXTURE_MAG_FILTER, H.LINEAR), this.gl.generateMipmap(H.TEXTURE_2D);
  }
  dispose() {
    Object.values(this.texturesById).forEach((z) => {
      this.gl.deleteTexture(z);
    });
  }
}
function replaceTilda(inputString, replacementMap) {
  return inputString.replace(/~\{(\w+)\}/g, (match, variable) => {
    return replacementMap?.[variable] || match;
  });
}
var Priority;
(function(Priority2) {
  Priority2[Priority2["DEFAULT"] = 0] = "DEFAULT";
  Priority2[Priority2["LAST"] = 1] = "LAST";
})(Priority || (Priority = {}));

class h2 {
  i;
  f;
  warningLimit = 50000;
  #i = new Set;
  #f = [];
  constructor(i, f2) {
    this.initCall = i;
    this.onRecycle = f2;
  }
  create(...i) {
    const f2 = this.#f.pop();
    if (f2)
      return this.#i.add(f2), this.initCall(f2, ...i);
    const v2 = this.initCall(undefined, ...i);
    return this.#i.add(v2), this.#v(), v2;
  }
  recycle(i) {
    this.#i.delete(i), this.#h(i);
  }
  recycleAll() {
    for (let i of this.#i)
      this.#h(i);
    this.#i.clear();
  }
  clear() {
    this.#f.length = 0, this.#i.clear();
  }
  countObjectsInExistence() {
    return this.#i.size + this.#f.length;
  }
  #h(i) {
    this.#f.push(i), this.onRecycle?.(i);
  }
  #v() {
    if (this.countObjectsInExistence() === this.warningLimit)
      console.warn("ObjectPool already created", this.#i.size + this.#f.length, "in", this.constructor.name);
  }
}

class C2 extends h2 {
  constructor() {
    super((i) => {
      if (!i)
        return new Map;
      return i;
    }, (i) => i.clear());
  }
}
var $2 = 1000;
var Q2 = 16.5;
var N = 10;

class V2 {
  requestAnimationFrame;
  cancelAnimationFrame;
  maxLoopJump;
  constructor({ requestAnimationFrame: j = globalThis.requestAnimationFrame.bind(globalThis), cancelAnimationFrame: w = globalThis.cancelAnimationFrame.bind(globalThis) } = {}, { maxLoopJump: d = N } = {}) {
    this.requestAnimationFrame = j, this.cancelAnimationFrame = w, this.maxLoopJump = d;
  }
  startLoop(j, w = {}) {
    const d = w.frameDuration ?? (w.frameRate ? $2 / w.frameRate : undefined) ?? Q2;
    let B2 = 0;
    function W(h22, v2) {
      if (h22 > v2)
        return B2 -= d * (h22 - v2), v2;
      return h22;
    }
    const { maxLoopJump: Y, requestAnimationFrame: G, cancelAnimationFrame: Z2 } = this;
    let y = 0;
    const H2 = (h22) => {
      K = G(H2);
      const v2 = W(Math.round((h22 + B2 - y) / d), Y);
      for (let z = 0;z < v2; z++)
        y += d, j(y, z === v2 - 1);
    };
    let K = G(H2);
    return () => {
      Z2(K);
    };
  }
}
var MILLIS_IN_SEC = 1000;

class Motor {
  time = 0;
  apptPool = new AppointmentPool;
  schedulePool = new C2;
  schedule = this.schedulePool.create();
  loopExecutor;
  frameDuration;
  constructor({ loopExecutor } = {}, config = {}) {
    this.loopExecutor = loopExecutor ?? new V2;
    this.frameDuration = config.frameDuration ?? (config.frameRate ? 1000 / config.frameRate : undefined) ?? Q2;
  }
  loop(cycle, data, frameRate) {
    this.scheduleUpdate(cycle, data, frameRate ?? 1000);
  }
  scheduleUpdate(cycle, data, refreshRate = 0, future) {
    let appt = this.schedule.get(cycle);
    if (!appt) {
      this.schedule.set(cycle, appt = this.apptPool.create(refreshRate, data));
    } else if (appt.frameRate !== refreshRate) {
      appt.frameRate = refreshRate;
      appt.period = refreshRate ? 1000 / refreshRate : 0;
      appt.data = data;
    }
    if (future) {
      appt.meetingTime = this.time + Q2;
    }
  }
  stopUpdate(cycle) {
    const appt = this.schedule.get(cycle);
    if (appt) {
      this.apptPool.recycle(appt);
    }
    this.schedule.delete(cycle);
  }
  deactivate() {
    this.stopLoop?.();
  }
  activate() {
    this.startLoop();
  }
  startLoop() {
    const updatePayload = {
      time: 0,
      deltaTime: this.frameDuration,
      data: undefined,
      renderFrame: true,
      cycle: { refresh: () => {} },
      stopUpdate() {
        this.stopped = true;
      },
      stopped: false
    };
    updatePayload.stopUpdate = updatePayload.stopUpdate.bind(updatePayload);
    const performUpdate = (updatePayload2) => {
      if (!this.schedule.size) {
        return;
      }
      let agenda = this.schedule;
      const futureSchedule = this.schedulePool.create();
      const finalSchedule = this.schedulePool.create();
      let limit = 100;
      let final = false;
      while (agenda) {
        if (limit-- < 0) {
          throw new Error("We keep scheduling updates within updates.");
        }
        this.schedule = this.schedulePool.create();
        for (const entry of agenda) {
          const update = entry[0];
          const appt = entry[1];
          if (updatePayload2.time < appt.meetingTime) {
            futureSchedule.set(update, appt);
            continue;
          }
          if (!final && update.priority === Priority.LAST) {
            finalSchedule.set(update, appt);
            continue;
          }
          updatePayload2.data = appt.data;
          updatePayload2.cycle = update;
          updatePayload2.stopped = false;
          update.refresh(updatePayload2);
          if (appt.period && !updatePayload2.stopped) {
            appt.meetingTime = Math.max(appt.meetingTime + appt.period, updatePayload2.time);
            futureSchedule.set(update, appt);
          } else {
            this.apptPool.recycle(appt);
          }
        }
        this.schedulePool.recycle(agenda);
        if (!final) {
          if (this.schedule.size) {
            agenda = this.schedule;
          } else {
            this.schedulePool.recycle(this.schedule);
            final = true;
            agenda = finalSchedule;
          }
        } else {
          this.schedulePool.recycle(this.schedule);
          agenda = undefined;
          this.schedule = futureSchedule;
        }
      }
    };
    const stopLoop = this.loopExecutor.startLoop((time, render) => {
      this.time = updatePayload.time = time;
      updatePayload.renderFrame = render;
      performUpdate(updatePayload);
    }, { frameDuration: this.frameDuration });
    this.stopLoop = () => {
      stopLoop();
      this.stopLoop = undefined;
      this.apptPool.clear();
    };
  }
}

class AppointmentPool extends h2 {
  constructor() {
    super((appt, frameRate, data) => {
      if (!appt) {
        return { meetingTime: 0, frameRate, period: frameRate ? MILLIS_IN_SEC / frameRate : 0, data };
      }
      appt.meetingTime = 0;
      appt.period = frameRate ? MILLIS_IN_SEC / frameRate : 0;
      appt.frameRate = frameRate;
      appt.data = data;
      return appt;
    });
  }
}

class Looper {
  #cycle;
  #motor;
  #data;
  #autoStart;
  constructor({ motor, data, cycle }, { autoStart }) {
    this.#cycle = cycle;
    this.#motor = motor;
    this.#data = data;
    this.#autoStart = autoStart;
  }
  refresh(updatePayload) {
    this.#cycle?.refresh(updatePayload);
  }
  activate() {
    if (this.#autoStart) {
      this.start();
    }
  }
  deactivate() {
    this.#motor.stopUpdate(this);
  }
  start() {
    this.#motor.loop(this, this.#data);
  }
}
var Policy;
(function(Policy2) {
  Policy2[Policy2["ACTIVE_CYCLE_PRIORITY"] = 0] = "ACTIVE_CYCLE_PRIORITY";
  Policy2[Policy2["INCOMING_CYCLE_PRIORITY"] = 1] = "INCOMING_CYCLE_PRIORITY";
})(Policy || (Policy = {}));

class ControlledMotor {
  motor;
  activeCycle;
  #policy;
  constructor(motor, config = {}) {
    this.motor = motor;
    this.#policy = config.policy ?? Policy.ACTIVE_CYCLE_PRIORITY;
  }
  loop(cycle, data, frameRate) {
    this.scheduleUpdate(cycle, data, frameRate ?? 1000);
  }
  scheduleUpdate(cycle, data, refreshRate, future) {
    if (this.activeCycle) {
      if (this.#policy === Policy.ACTIVE_CYCLE_PRIORITY) {
        return;
      }
      this.stopUpdate(this.activeCycle);
    }
    this.activeCycle = cycle;
    this.motor.scheduleUpdate(cycle, data, refreshRate);
  }
  stopUpdate(cycle) {
    this.motor.stopUpdate(cycle);
  }
  get time() {
    return this.motor.time;
  }
}
var DEFAULT_MAX_TEXTURE_SIZE = 4096;

class TextureUniformInitializer {
  static initialize({ gl: gl2, program }, { maxTextureSize, textureUniformLoc = TEXTURE_UNIFORM_LOC, maxTextureSizeLoc = MAX_TEXTURE_SIZE_LOC } = {}) {
    const maxTextureUniform = gl2.getUniformLocation(program, maxTextureSizeLoc);
    gl2.uniform1f(maxTextureUniform, maxTextureSize ?? DEFAULT_MAX_TEXTURE_SIZE);
    const maxTextureUnits = gl2.getParameter(GL.MAX_TEXTURE_IMAGE_UNITS);
    const arrayOfTextureIndex = new Array(maxTextureUnits).fill(null).map((_, index) => index);
    const texturesUniform = gl2.getUniformLocation(program, textureUniformLoc);
    gl2.uniform1iv(texturesUniform, arrayOfTextureIndex);
  }
}

class BaseUniformHandler {
  updateCall;
  gl;
  location;
  constructor({ gl: gl2, program }, { name }, updateCall) {
    this.updateCall = updateCall;
    this.gl = gl2;
    this.location = gl2.getUniformLocation(program, name);
  }
  updateValue(value) {
    this.updateCall(this.gl, this.location, value);
  }
}

class MatrixUniformHandler extends BaseUniformHandler {
  matrix;
  constructor(props, config, matrix) {
    super(props, config, (gl2, location, matrix2) => gl2.uniformMatrix4fv(location, false, matrix2.getMatrix()));
    this.matrix = matrix;
  }
  update() {
    this.updateValue(this.matrix);
  }
}

class FloatUniformHandler extends BaseUniformHandler {
  val;
  constructor(props, config, val) {
    super(props, config, (gl2, location, value) => gl2.uniform1f(location, value));
    this.val = val;
    if (val === undefined) {
      this.update = () => {};
    }
  }
  update() {
    this.updateValue(this.val.valueOf());
  }
}

class VectorUniformHandler extends BaseUniformHandler {
  vector;
  constructor(props, config, vector) {
    super(props, config, (gl2, location, vector2) => gl2.uniform3fv(location, vector2));
    this.vector = vector;
  }
  update() {
    this.updateValue(this.vector);
  }
}
function A2(j, q) {
  if (j) {
    const u2 = j.length.valueOf();
    for (let p2 = 0;p2 < u2; p2++)
      q(j.at(p2), p2);
  }
}
function B2(j, q, u2 = []) {
  const p2 = u2 ?? [], v2 = j.length.valueOf();
  p2.length = v2;
  for (let w = 0;w < v2; w++) {
    const z = j.at(w);
    p2[w] = q(z, w);
  }
  return p2;
}

class TextureUpdateHandler {
  #textureSlots = new Map;
  #textureManager;
  #imageManager;
  constructor({ textureManager, imageManager }) {
    this.#textureManager = textureManager;
    this.#imageManager = imageManager;
  }
  getSlotBuffer(id2) {
    const slot = this.#textureSlots.get(id2);
    return slot?.buffer;
  }
  dispose() {
    this.#textureSlots.clear();
  }
  async updateTextures(ids, medias) {
    const mediaList = Array.from(ids).map((index) => medias.at(index));
    ids.clear();
    const mediaInfos = (await Promise.all(B2(mediaList, async (media) => {
      if (media?.id === undefined) {
        return;
      }
      const mediaData = await this.#imageManager.renderMedia(media.id, media);
      return { mediaData, mediaId: media.id, spriteSheet: media.spriteSheet };
    }))).filter((data) => !!data);
    const textureIndices = await Promise.all(mediaInfos.map(async ({ mediaData, mediaId, spriteSheet }) => {
      const { slot, refreshCallback } = this.#textureManager.allocateSlotForImage(mediaData);
      const slotW = Math.log2(slot.size[0]), slotH = Math.log2(slot.size[1]);
      const wh = slotW * 16 + slotH;
      const [spriteWidth, spriteHeight] = spriteSheet?.spriteSize ?? [mediaData.width, mediaData.height];
      this.#textureSlots.set(mediaId, {
        buffer: Float32Array.from([wh, slot.slotNumber, spriteWidth / mediaData.width, spriteHeight / mediaData.height])
      });
      mediaData.refreshCallback = refreshCallback;
      return slot.textureIndex;
    }));
    const textureIndicesSet = new Set(textureIndices);
    textureIndicesSet.forEach((textureIndex) => {
      if (textureIndex === V) {
        this.#textureManager.setupTextureForVideo(`TEXTURE${textureIndex}`);
      } else {
        this.#textureManager.generateMipMap(`TEXTURE${textureIndex}`);
      }
    });
    return mediaInfos.map(({ mediaData }) => mediaData);
  }
}
var OK = Object.defineProperty;
var a = (K, O2) => {
  for (var W in O2)
    OK(K, W, { get: O2[W], enumerable: true, configurable: true, set: (X2) => O2[W] = () => X2 });
};
function WK(K, O2) {
  return Math.round(K / O2) * O2;
}
var S2 = 0.000001;
var R2 = typeof Float32Array !== "undefined" ? Float32Array : Array;
var v2 = Math.random;
var GW = Math.PI / 180;
if (!Math.hypot)
  Math.hypot = function() {
    var K = 0, O2 = arguments.length;
    while (O2--)
      K += arguments[O2] * arguments[O2];
    return Math.sqrt(K);
  };
function H0() {
  var K = new R2(9);
  if (R2 != Float32Array)
    K[1] = 0, K[2] = 0, K[3] = 0, K[5] = 0, K[6] = 0, K[7] = 0;
  return K[0] = 1, K[4] = 1, K[8] = 1, K;
}
var _ = {};
a(_, { transpose: () => {
  {
    return HK;
  }
}, translate: () => {
  {
    return VK;
  }
}, targetTo: () => {
  {
    return nK;
  }
}, subtract: () => {
  {
    return E0;
  }
}, sub: () => {
  {
    return xK;
  }
}, str: () => {
  {
    return lK;
  }
}, set: () => {
  {
    return ZK;
  }
}, scale: () => {
  {
    return CK;
  }
}, rotateZ: () => {
  {
    return IK;
  }
}, rotateY: () => {
  {
    return DK;
  }
}, rotateX: () => {
  {
    return EK;
  }
}, rotate: () => {
  {
    return UK;
  }
}, perspectiveZO: () => {
  {
    return qK;
  }
}, perspectiveNO: () => {
  {
    return C0;
  }
}, perspectiveFromFieldOfView: () => {
  {
    return wK;
  }
}, perspective: () => {
  {
    return gK;
  }
}, orthoZO: () => {
  {
    return dK;
  }
}, orthoNO: () => {
  {
    return U0;
  }
}, ortho: () => {
  {
    return fK;
  }
}, multiplyScalarAndAdd: () => {
  {
    return zK;
  }
}, multiplyScalar: () => {
  {
    return yK;
  }
}, multiply: () => {
  {
    return J0;
  }
}, mul: () => {
  {
    return mK;
  }
}, lookAt: () => {
  {
    return vK;
  }
}, invert: () => {
  {
    return LK;
  }
}, identity: () => {
  {
    return L0;
  }
}, getTranslation: () => {
  {
    return RK;
  }
}, getScaling: () => {
  {
    return V0;
  }
}, getRotation: () => {
  {
    return jK;
  }
}, frustum: () => {
  {
    return pK;
  }
}, fromZRotation: () => {
  {
    return TK;
  }
}, fromYRotation: () => {
  {
    return kK;
  }
}, fromXRotation: () => {
  {
    return SK;
  }
}, fromValues: () => {
  {
    return QK;
  }
}, fromTranslation: () => {
  {
    return PK;
  }
}, fromScaling: () => {
  {
    return AK;
  }
}, fromRotationTranslationScaleOrigin: () => {
  {
    return MK;
  }
}, fromRotationTranslationScale: () => {
  {
    return hK;
  }
}, fromRotationTranslation: () => {
  {
    return G0;
  }
}, fromRotation: () => {
  {
    return NK;
  }
}, fromQuat2: () => {
  {
    return _K;
  }
}, fromQuat: () => {
  {
    return FK;
  }
}, frob: () => {
  {
    return cK;
  }
}, exactEquals: () => {
  {
    return sK;
  }
}, equals: () => {
  {
    return rK;
  }
}, determinant: () => {
  {
    return GK;
  }
}, create: () => {
  {
    return YK;
  }
}, copy: () => {
  {
    return BK;
  }
}, clone: () => {
  {
    return $K;
  }
}, adjoint: () => {
  {
    return JK;
  }
}, add: () => {
  {
    return iK;
  }
} });
function YK() {
  var K = new R2(16);
  if (R2 != Float32Array)
    K[1] = 0, K[2] = 0, K[3] = 0, K[4] = 0, K[6] = 0, K[7] = 0, K[8] = 0, K[9] = 0, K[11] = 0, K[12] = 0, K[13] = 0, K[14] = 0;
  return K[0] = 1, K[5] = 1, K[10] = 1, K[15] = 1, K;
}
function $K(K) {
  var O2 = new R2(16);
  return O2[0] = K[0], O2[1] = K[1], O2[2] = K[2], O2[3] = K[3], O2[4] = K[4], O2[5] = K[5], O2[6] = K[6], O2[7] = K[7], O2[8] = K[8], O2[9] = K[9], O2[10] = K[10], O2[11] = K[11], O2[12] = K[12], O2[13] = K[13], O2[14] = K[14], O2[15] = K[15], O2;
}
function BK(K, O2) {
  return K[0] = O2[0], K[1] = O2[1], K[2] = O2[2], K[3] = O2[3], K[4] = O2[4], K[5] = O2[5], K[6] = O2[6], K[7] = O2[7], K[8] = O2[8], K[9] = O2[9], K[10] = O2[10], K[11] = O2[11], K[12] = O2[12], K[13] = O2[13], K[14] = O2[14], K[15] = O2[15], K;
}
function QK(K, O2, W, X2, Y, $32, B3, Q3, Z2, H2, L2, G, C3, V3, E2, U) {
  var J = new R2(16);
  return J[0] = K, J[1] = O2, J[2] = W, J[3] = X2, J[4] = Y, J[5] = $32, J[6] = B3, J[7] = Q3, J[8] = Z2, J[9] = H2, J[10] = L2, J[11] = G, J[12] = C3, J[13] = V3, J[14] = E2, J[15] = U, J;
}
function ZK(K, O2, W, X2, Y, $32, B3, Q3, Z2, H2, L2, G, C3, V3, E2, U, J) {
  return K[0] = O2, K[1] = W, K[2] = X2, K[3] = Y, K[4] = $32, K[5] = B3, K[6] = Q3, K[7] = Z2, K[8] = H2, K[9] = L2, K[10] = G, K[11] = C3, K[12] = V3, K[13] = E2, K[14] = U, K[15] = J, K;
}
function L0(K) {
  return K[0] = 1, K[1] = 0, K[2] = 0, K[3] = 0, K[4] = 0, K[5] = 1, K[6] = 0, K[7] = 0, K[8] = 0, K[9] = 0, K[10] = 1, K[11] = 0, K[12] = 0, K[13] = 0, K[14] = 0, K[15] = 1, K;
}
function HK(K, O2) {
  if (K === O2) {
    var W = O2[1], X2 = O2[2], Y = O2[3], $32 = O2[6], B3 = O2[7], Q3 = O2[11];
    K[1] = O2[4], K[2] = O2[8], K[3] = O2[12], K[4] = W, K[6] = O2[9], K[7] = O2[13], K[8] = X2, K[9] = $32, K[11] = O2[14], K[12] = Y, K[13] = B3, K[14] = Q3;
  } else
    K[0] = O2[0], K[1] = O2[4], K[2] = O2[8], K[3] = O2[12], K[4] = O2[1], K[5] = O2[5], K[6] = O2[9], K[7] = O2[13], K[8] = O2[2], K[9] = O2[6], K[10] = O2[10], K[11] = O2[14], K[12] = O2[3], K[13] = O2[7], K[14] = O2[11], K[15] = O2[15];
  return K;
}
function LK(K, O2) {
  var W = O2[0], X2 = O2[1], Y = O2[2], $32 = O2[3], B3 = O2[4], Q3 = O2[5], Z2 = O2[6], H2 = O2[7], L2 = O2[8], G = O2[9], C3 = O2[10], V3 = O2[11], E2 = O2[12], U = O2[13], J = O2[14], D2 = O2[15], k = W * Q3 - X2 * B3, N2 = W * Z2 - Y * B3, A3 = W * H2 - $32 * B3, I = X2 * Z2 - Y * Q3, P = X2 * H2 - $32 * Q3, F = Y * H2 - $32 * Z2, j = L2 * U - G * E2, h3 = L2 * J - C3 * E2, M2 = L2 * D2 - V3 * E2, p2 = G * J - C3 * U, g2 = G * D2 - V3 * U, q = C3 * D2 - V3 * J, T2 = k * q - N2 * g2 + A3 * p2 + I * M2 - P * h3 + F * j;
  if (!T2)
    return null;
  return T2 = 1 / T2, K[0] = (Q3 * q - Z2 * g2 + H2 * p2) * T2, K[1] = (Y * g2 - X2 * q - $32 * p2) * T2, K[2] = (U * F - J * P + D2 * I) * T2, K[3] = (C3 * P - G * F - V3 * I) * T2, K[4] = (Z2 * M2 - B3 * q - H2 * h3) * T2, K[5] = (W * q - Y * M2 + $32 * h3) * T2, K[6] = (J * A3 - E2 * F - D2 * N2) * T2, K[7] = (L2 * F - C3 * A3 + V3 * N2) * T2, K[8] = (B3 * g2 - Q3 * M2 + H2 * j) * T2, K[9] = (X2 * M2 - W * g2 - $32 * j) * T2, K[10] = (E2 * P - U * A3 + D2 * k) * T2, K[11] = (G * A3 - L2 * P - V3 * k) * T2, K[12] = (Q3 * h3 - B3 * p2 - Z2 * j) * T2, K[13] = (W * p2 - X2 * h3 + Y * j) * T2, K[14] = (U * N2 - E2 * I - J * k) * T2, K[15] = (L2 * I - G * N2 + C3 * k) * T2, K;
}
function JK(K, O2) {
  var W = O2[0], X2 = O2[1], Y = O2[2], $32 = O2[3], B3 = O2[4], Q3 = O2[5], Z2 = O2[6], H2 = O2[7], L2 = O2[8], G = O2[9], C3 = O2[10], V3 = O2[11], E2 = O2[12], U = O2[13], J = O2[14], D2 = O2[15];
  return
}
function GK(K) {
  var O2 = K[0], W = K[1], X2 = K[2], Y = K[3], $32 = K[4], B3 = K[5], Q3 = K[6], Z2 = K[7], H2 = K[8], L2 = K[9], G = K[10], C3 = K[11], V3 = K[12], E2 = K[13], U = K[14], J = K[15], D2 = O2 * B3 - W * $32, k = O2 * Q3 - X2 * $32, N2 = O2 * Z2 - Y * $32, A3 = W * Q3 - X2 * B3, I = W * Z2 - Y * B3, P = X2 * Z2 - Y * Q3, F = H2 * E2 - L2 * V3, j = H2 * U - G * V3, h3 = H2 * J - C3 * V3, M2 = L2 * U - G * E2, p2 = L2 * J - C3 * E2, g2 = G * J - C3 * U;
  return D2 * g2 - k * p2 + N2 * M2 + A3 * h3 - I * j + P * F;
}
function J0(K, O2, W) {
  var X2 = O2[0], Y = O2[1], $32 = O2[2], B3 = O2[3], Q3 = O2[4], Z2 = O2[5], H2 = O2[6], L2 = O2[7], G = O2[8], C3 = O2[9], V3 = O2[10], E2 = O2[11], U = O2[12], J = O2[13], D2 = O2[14], k = O2[15], N2 = W[0], A3 = W[1], I = W[2], P = W[3];
  return K[0] = N2 * X2 + A3 * Q3 + I * G + P * U, K[1] = N2 * Y + A3 * Z2 + I * C3 + P * J, K[2] = N2 * $32 + A3 * H2 + I * V3 + P * D2, K[3] = N2 * B3 + A3 * L2 + I * E2 + P * k, N2 = W[4], A3 = W[5], I = W[6], P = W[7], K[4] = N2 * X2 + A3 * Q3 + I * G + P * U, K[5] = N2 * Y + A3 * Z2 + I * C3 + P * J, K[6] = N2 * $32 + A3 * H2 + I * V3 + P * D2, K[7] = N2 * B3 + A3 * L2 + I * E2 + P * k, N2 = W[8], A3 = W[9], I = W[10], P = W[11], K[8] = N2 * X2 + A3 * Q3 + I * G + P * U, K[9] = N2 * Y + A3 * Z2 + I * C3 + P * J, K[10] = N2 * $32 + A3 * H2 + I * V3 + P * D2, K[11] = N2 * B3 + A3 * L2 + I * E2 + P * k, N2 = W[12], A3 = W[13], I = W[14], P = W[15], K[12] = N2 * X2 + A3 * Q3 + I * G + P * U, K[13] = N2 * Y + A3 * Z2 + I * C3 + P * J, K[14] = N2 * $32 + A3 * H2 + I * V3 + P * D2, K[15] = N2 * B3 + A3 * L2 + I * E2 + P * k, K;
}
function VK(K, O2, W) {
  var X2 = W[0], Y = W[1], $32 = W[2], B3, Q3, Z2, H2, L2, G, C3, V3, E2, U, J, D2;
  if (O2 === K)
    K[12] = O2[0] * X2 + O2[4] * Y + O2[8] * $32 + O2[12], K[13] = O2[1] * X2 + O2[5] * Y + O2[9] * $32 + O2[13], K[14] = O2[2] * X2 + O2[6] * Y + O2[10] * $32 + O2[14], K[15] = O2[3] * X2 + O2[7] * Y + O2[11] * $32 + O2[15];
  else
    B3 = O2[0], Q3 = O2[1], Z2 = O2[2], H2 = O2[3], L2 = O2[4], G = O2[5], C3 = O2[6], V3 = O2[7], E2 = O2[8], U = O2[9], J = O2[10], D2 = O2[11], K[0] = B3, K[1] = Q3, K[2] = Z2, K[3] = H2, K[4] = L2, K[5] = G, K[6] = C3, K[7] = V3, K[8] = E2, K[9] = U, K[10] = J, K[11] = D2, K[12] = B3 * X2 + L2 * Y + E2 * $32 + O2[12], K[13] = Q3 * X2 + G * Y + U * $32 + O2[13], K[14] = Z2 * X2 + C3 * Y + J * $32 + O2[14], K[15] = H2 * X2 + V3 * Y + D2 * $32 + O2[15];
  return K;
}
function CK(K, O2, W) {
  var X2 = W[0], Y = W[1], $32 = W[2];
  return K[0] = O2[0] * X2, K[1] = O2[1] * X2, K[2] = O2[2] * X2, K[3] = O2[3] * X2, K[4] = O2[4] * Y, K[5] = O2[5] * Y, K[6] = O2[6] * Y, K[7] = O2[7] * Y, K[8] = O2[8] * $32, K[9] = O2[9] * $32, K[10] = O2[10] * $32, K[11] = O2[11] * $32, K[12] = O2[12], K[13] = O2[13], K[14] = O2[14], K[15] = O2[15], K;
}
function UK(K, O2, W, X2) {
  var Y = X2[0], $32 = X2[1], B3 = X2[2], Q3 = Math.hypot(Y, $32, B3), Z2, H2, L2, G, C3, V3, E2, U, J, D2, k, N2, A3, I, P, F, j, h3, M2, p2, g2, q, T2, d;
  if (Q3 < S2)
    return null;
  if (Q3 = 1 / Q3, Y *= Q3, $32 *= Q3, B3 *= Q3, Z2 = Math.sin(W), H2 = Math.cos(W), L2 = 1 - H2, G = O2[0], C3 = O2[1], V3 = O2[2], E2 = O2[3], U = O2[4], J = O2[5], D2 = O2[6], k = O2[7], N2 = O2[8], A3 = O2[9], I = O2[10], P = O2[11], F = Y * Y * L2 + H2, j = $32 * Y * L2 + B3 * Z2, h3 = B3 * Y * L2 - $32 * Z2, M2 = Y * $32 * L2 - B3 * Z2, p2 = $32 * $32 * L2 + H2, g2 = B3 * $32 * L2 + Y * Z2, q = Y * B3 * L2 + $32 * Z2, T2 = $32 * B3 * L2 - Y * Z2, d = B3 * B3 * L2 + H2, K[0] = G * F + U * j + N2 * h3, K[1] = C3 * F + J * j + A3 * h3, K[2] = V3 * F + D2 * j + I * h3, K[3] = E2 * F + k * j + P * h3, K[4] = G * M2 + U * p2 + N2 * g2, K[5] = C3 * M2 + J * p2 + A3 * g2, K[6] = V3 * M2 + D2 * p2 + I * g2, K[7] = E2 * M2 + k * p2 + P * g2, K[8] = G * q + U * T2 + N2 * d, K[9] = C3 * q + J * T2 + A3 * d, K[10] = V3 * q + D2 * T2 + I * d, K[11] = E2 * q + k * T2 + P * d, O2 !== K)
    K[12] = O2[12], K[13] = O2[13], K[14] = O2[14], K[15] = O2[15];
  return K;
}
function EK(K, O2, W) {
  var X2 = Math.sin(W), Y = Math.cos(W), $32 = O2[4], B3 = O2[5], Q3 = O2[6], Z2 = O2[7], H2 = O2[8], L2 = O2[9], G = O2[10], C3 = O2[11];
  if (O2 !== K)
    K[0] = O2[0], K[1] = O2[1], K[2] = O2[2], K[3] = O2[3], K[12] = O2[12], K[13] = O2[13], K[14] = O2[14], K[15] = O2[15];
  return K[4] = $32 * Y + H2 * X2, K[5] = B3 * Y + L2 * X2, K[6] = Q3 * Y + G * X2, K[7] = Z2 * Y + C3 * X2, K[8] = H2 * Y - $32 * X2, K[9] = L2 * Y - B3 * X2, K[10] = G * Y - Q3 * X2, K[11] = C3 * Y - Z2 * X2, K;
}
function DK(K, O2, W) {
  var X2 = Math.sin(W), Y = Math.cos(W), $32 = O2[0], B3 = O2[1], Q3 = O2[2], Z2 = O2[3], H2 = O2[8], L2 = O2[9], G = O2[10], C3 = O2[11];
  if (O2 !== K)
    K[4] = O2[4], K[5] = O2[5], K[6] = O2[6], K[7] = O2[7], K[12] = O2[12], K[13] = O2[13], K[14] = O2[14], K[15] = O2[15];
  return K[0] = $32 * Y - H2 * X2, K[1] = B3 * Y - L2 * X2, K[2] = Q3 * Y - G * X2, K[3] = Z2 * Y - C3 * X2, K[8] = $32 * X2 + H2 * Y, K[9] = B3 * X2 + L2 * Y, K[10] = Q3 * X2 + G * Y, K[11] = Z2 * X2 + C3 * Y, K;
}
function IK(K, O2, W) {
  var X2 = Math.sin(W), Y = Math.cos(W), $32 = O2[0], B3 = O2[1], Q3 = O2[2], Z2 = O2[3], H2 = O2[4], L2 = O2[5], G = O2[6], C3 = O2[7];
  if (O2 !== K)
    K[8] = O2[8], K[9] = O2[9], K[10] = O2[10], K[11] = O2[11], K[12] = O2[12], K[13] = O2[13], K[14] = O2[14], K[15] = O2[15];
  return K[0] = $32 * Y + H2 * X2, K[1] = B3 * Y + L2 * X2, K[2] = Q3 * Y + G * X2, K[3] = Z2 * Y + C3 * X2, K[4] = H2 * Y - $32 * X2, K[5] = L2 * Y - B3 * X2, K[6] = G * Y - Q3 * X2, K[7] = C3 * Y - Z2 * X2, K;
}
function PK(K, O2) {
  return K[0] = 1, K[1] = 0, K[2] = 0, K[3] = 0, K[4] = 0, K[5] = 1, K[6] = 0, K[7] = 0, K[8] = 0, K[9] = 0, K[10] = 1, K[11] = 0, K[12] = O2[0], K[13] = O2[1], K[14] = O2[2], K[15] = 1, K;
}
function AK(K, O2) {
  return K[0] = O2[0], K[1] = 0, K[2] = 0, K[3] = 0, K[4] = 0, K[5] = O2[1], K[6] = 0, K[7] = 0, K[8] = 0, K[9] = 0, K[10] = O2[2], K[11] = 0, K[12] = 0, K[13] = 0, K[14] = 0, K[15] = 1, K;
}
function NK(K, O2, W) {
  var X2 = W[0], Y = W[1], $32 = W[2], B3 = Math.hypot(X2, Y, $32), Q3, Z2, H2;
  if (B3 < S2)
    return null;
  return B3 = 1 / B3, X2 *= B3, Y *= B3, $32 *= B3, Q3 = Math.sin(O2), Z2 = Math.cos(O2), H2 = 1 - Z2, K[0] = X2 * X2 * H2 + Z2, K[1] = Y * X2 * H2 + $32 * Q3, K[2] = $32 * X2 * H2 - Y * Q3, K[3] = 0, K[4] = X2 * Y * H2 - $32 * Q3, K[5] = Y * Y * H2 + Z2, K[6] = $32 * Y * H2 + X2 * Q3, K[7] = 0, K[8] = X2 * $32 * H2 + Y * Q3, K[9] = Y * $32 * H2 - X2 * Q3, K[10] = $32 * $32 * H2 + Z2, K[11] = 0, K[12] = 0, K[13] = 0, K[14] = 0, K[15] = 1, K;
}
function SK(K, O2) {
  var W = Math.sin(O2), X2 = Math.cos(O2);
  return K[0] = 1, K[1] = 0, K[2] = 0, K[3] = 0, K[4] = 0, K[5] = X2, K[6] = W, K[7] = 0, K[8] = 0, K[9] = -W, K[10] = X2, K[11] = 0, K[12] = 0, K[13] = 0, K[14] = 0, K[15] = 1, K;
}
function kK(K, O2) {
  var W = Math.sin(O2), X2 = Math.cos(O2);
  return K[0] = X2, K[1] = 0, K[2] = -W, K[3] = 0, K[4] = 0, K[5] = 1, K[6] = 0, K[7] = 0, K[8] = W, K[9] = 0, K[10] = X2, K[11] = 0, K[12] = 0, K[13] = 0, K[14] = 0, K[15] = 1, K;
}
function TK(K, O2) {
  var W = Math.sin(O2), X2 = Math.cos(O2);
  return K[0] = X2, K[1] = W, K[2] = 0, K[3] = 0, K[4] = -W, K[5] = X2, K[6] = 0, K[7] = 0, K[8] = 0, K[9] = 0, K[10] = 1, K[11] = 0, K[12] = 0, K[13] = 0, K[14] = 0, K[15] = 1, K;
}
function G0(K, O2, W) {
  var X2 = O2[0], Y = O2[1], $32 = O2[2], B3 = O2[3], Q3 = X2 + X2, Z2 = Y + Y, H2 = $32 + $32, L2 = X2 * Q3, G = X2 * Z2, C3 = X2 * H2, V3 = Y * Z2, E2 = Y * H2, U = $32 * H2, J = B3 * Q3, D2 = B3 * Z2, k = B3 * H2;
  return K[0] = 1 - (V3 + U), K[1] = G + k, K[2] = C3 - D2, K[3] = 0, K[4] = G - k, K[5] = 1 - (L2 + U), K[6] = E2 + J, K[7] = 0, K[8] = C3 + D2, K[9] = E2 - J, K[10] = 1 - (L2 + V3), K[11] = 0, K[12] = W[0], K[13] = W[1], K[14] = W[2], K[15] = 1, K;
}
function _K(K, O2) {
  var W = new R2(3), X2 = -O2[0], Y = -O2[1], $32 = -O2[2], B3 = O2[3], Q3 = O2[4], Z2 = O2[5], H2 = O2[6], L2 = O2[7], G = X2 * X2 + Y * Y + $32 * $32 + B3 * B3;
  if (G > 0)
    W[0] = (Q3 * B3 + L2 * X2 + Z2 * $32 - H2 * Y) * 2 / G, W[1] = (Z2 * B3 + L2 * Y + H2 * X2 - Q3 * $32) * 2 / G, W[2] = (H2 * B3 + L2 * $32 + Q3 * Y - Z2 * X2) * 2 / G;
  else
    W[0] = (Q3 * B3 + L2 * X2 + Z2 * $32 - H2 * Y) * 2, W[1] = (Z2 * B3 + L2 * Y + H2 * X2 - Q3 * $32) * 2, W[2] = (H2 * B3 + L2 * $32 + Q3 * Y - Z2 * X2) * 2;
  return G0(K, O2, W), K;
}
function RK(K, O2) {
  return K[0] = O2[12], K[1] = O2[13], K[2] = O2[14], K;
}
function V0(K, O2) {
  var W = O2[0], X2 = O2[1], Y = O2[2], $32 = O2[4], B3 = O2[5], Q3 = O2[6], Z2 = O2[8], H2 = O2[9], L2 = O2[10];
  return K[0] = Math.hypot(W, X2, Y), K[1] = Math.hypot($32, B3, Q3), K[2] = Math.hypot(Z2, H2, L2), K;
}
function jK(K, O2) {
  var W = new R2(3);
  V0(W, O2);
  var X2 = 1 / W[0], Y = 1 / W[1], $32 = 1 / W[2], B3 = O2[0] * X2, Q3 = O2[1] * Y, Z2 = O2[2] * $32, H2 = O2[4] * X2, L2 = O2[5] * Y, G = O2[6] * $32, C3 = O2[8] * X2, V3 = O2[9] * Y, E2 = O2[10] * $32, U = B3 + L2 + E2, J = 0;
  if (U > 0)
    J = Math.sqrt(U + 1) * 2, K[3] = 0.25 * J, K[0] = (G - V3) / J, K[1] = (C3 - Z2) / J, K[2] = (Q3 - H2) / J;
  else if (B3 > L2 && B3 > E2)
    J = Math.sqrt(1 + B3 - L2 - E2) * 2, K[3] = (G - V3) / J, K[0] = 0.25 * J, K[1] = (Q3 + H2) / J, K[2] = (C3 + Z2) / J;
  else if (L2 > E2)
    J = Math.sqrt(1 + L2 - B3 - E2) * 2, K[3] = (C3 - Z2) / J, K[0] = (Q3 + H2) / J, K[1] = 0.25 * J, K[2] = (G + V3) / J;
  else
    J = Math.sqrt(1 + E2 - B3 - L2) * 2, K[3] = (Q3 - H2) / J, K[0] = (C3 + Z2) / J, K[1] = (G + V3) / J, K[2] = 0.25 * J;
  return K;
}
function hK(K, O2, W, X2) {
  var Y = O2[0], $32 = O2[1], B3 = O2[2], Q3 = O2[3], Z2 = Y + Y, H2 = $32 + $32, L2 = B3 + B3, G = Y * Z2, C3 = Y * H2, V3 = Y * L2, E2 = $32 * H2, U = $32 * L2, J = B3 * L2, D2 = Q3 * Z2, k = Q3 * H2, N2 = Q3 * L2, A3 = X2[0], I = X2[1], P = X2[2];
  return K[0] = (1 - (E2 + J)) * A3, K[1] = (C3 + N2) * A3, K[2] = (V3 - k) * A3, K[3] = 0, K[4] = (C3 - N2) * I, K[5] = (1 - (G + J)) * I, K[6] = (U + D2) * I, K[7] = 0, K[8] = (V3 + k) * P, K[9] = (U - D2) * P, K[10] = (1 - (G + E2)) * P, K[11] = 0, K[12] = W[0], K[13] = W[1], K[14] = W[2], K[15] = 1, K;
}
function MK(K, O2, W, X2, Y) {
  var $32 = O2[0], B3 = O2[1], Q3 = O2[2], Z2 = O2[3], H2 = $32 + $32, L2 = B3 + B3, G = Q3 + Q3, C3 = $32 * H2, V3 = $32 * L2, E2 = $32 * G, U = B3 * L2, J = B3 * G, D2 = Q3 * G, k = Z2 * H2, N2 = Z2 * L2, A3 = Z2 * G, I = X2[0], P = X2[1], F = X2[2], j = Y[0], h3 = Y[1], M2 = Y[2], p2 = (1 - (U + D2)) * I, g2 = (V3 + A3) * I, q = (E2 - N2) * I, T2 = (V3 - A3) * P, d = (1 - (C3 + D2)) * P, c = (J + k) * P, i = (E2 + N2) * F, Q0 = (J - k) * F, Z02 = (1 - (C3 + U)) * F;
  return K[0] = p2, K[1] = g2, K[2] = q, K[3] = 0, K[4] = T2, K[5] = d, K[6] = c, K[7] = 0, K[8] = i, K[9] = Q0, K[10] = Z02, K[11] = 0, K[12] = W[0] + j - (p2 * j + T2 * h3 + i * M2), K[13] = W[1] + h3 - (g2 * j + d * h3 + Q0 * M2), K[14] = W[2] + M2 - (q * j + c * h3 + Z02 * M2), K[15] = 1, K;
}
function FK(K, O2) {
  var W = O2[0], X2 = O2[1], Y = O2[2], $32 = O2[3], B3 = W + W, Q3 = X2 + X2, Z2 = Y + Y, H2 = W * B3, L2 = X2 * B3, G = X2 * Q3, C3 = Y * B3, V3 = Y * Q3, E2 = Y * Z2, U = $32 * B3, J = $32 * Q3, D2 = $32 * Z2;
  return K[0] = 1 - G - E2, K[1] = L2 + D2, K[2] = C3 - J, K[3] = 0, K[4] = L2 - D2, K[5] = 1 - H2 - E2, K[6] = V3 + U, K[7] = 0, K[8] = C3 + J, K[9] = V3 - U, K[10] = 1 - H2 - G, K[11] = 0, K[12] = 0, K[13] = 0, K[14] = 0, K[15] = 1, K;
}
function pK(K, O2, W, X2, Y, $32, B3) {
  var Q3 = 1 / (W - O2), Z2 = 1 / (Y - X2), H2 = 1 / ($32 - B3);
  return K[0] = $32 * 2 * Q3, K[1] = 0, K[2] = 0, K[3] = 0, K[4] = 0, K[5] = $32 * 2 * Z2, K[6] = 0, K[7] = 0, K[8] = (W + O2) * Q3, K[9] = (Y + X2) * Z2, K[10] = (B3 + $32) * H2, K[11] = -1, K[12] = 0, K[13] = 0, K[14] = B3 * $32 * 2 * H2, K[15] = 0, K;
}
function C0(K, O2, W, X2, Y) {
  var $32 = 1 / Math.tan(O2 / 2), B3;
  if (K[0] = $32 / W, K[1] = 0, K[2] = 0, K[3] = 0, K[4] = 0, K[5] = $32, K[6] = 0, K[7] = 0, K[8] = 0, K[9] = 0, K[11] = -1, K[12] = 0, K[13] = 0, K[15] = 0, Y != null && Y !== Infinity)
    B3 = 1 / (X2 - Y), K[10] = (Y + X2) * B3, K[14] = 2 * Y * X2 * B3;
  else
    K[10] = -1, K[14] = -2 * X2;
  return K;
}
function qK(K, O2, W, X2, Y) {
  var $32 = 1 / Math.tan(O2 / 2), B3;
  if (K[0] = $32 / W, K[1] = 0, K[2] = 0, K[3] = 0, K[4] = 0, K[5] = $32, K[6] = 0, K[7] = 0, K[8] = 0, K[9] = 0, K[11] = -1, K[12] = 0, K[13] = 0, K[15] = 0, Y != null && Y !== Infinity)
    B3 = 1 / (X2 - Y), K[10] = Y * B3, K[14] = Y * X2 * B3;
  else
    K[10] = -1, K[14] = -X2;
  return K;
}
function wK(K, O2, W, X2) {
  var Y = Math.tan(O2.upDegrees * Math.PI / 180), $32 = Math.tan(O2.downDegrees * Math.PI / 180), B3 = Math.tan(O2.leftDegrees * Math.PI / 180), Q3 = Math.tan(O2.rightDegrees * Math.PI / 180), Z2 = 2 / (B3 + Q3), H2 = 2 / (Y + $32);
  return K[0] = Z2, K[1] = 0, K[2] = 0, K[3] = 0, K[4] = 0, K[5] = H2, K[6] = 0, K[7] = 0, K[8] = -((B3 - Q3) * Z2 * 0.5), K[9] = (Y - $32) * H2 * 0.5, K[10] = X2 / (W - X2), K[11] = -1, K[12] = 0, K[13] = 0, K[14] = X2 * W / (W - X2), K[15] = 0, K;
}
function U0(K, O2, W, X2, Y, $32, B3) {
  var Q3 = 1 / (O2 - W), Z2 = 1 / (X2 - Y), H2 = 1 / ($32 - B3);
  return K[0] = -2 * Q3, K[1] = 0, K[2] = 0, K[3] = 0, K[4] = 0, K[5] = -2 * Z2, K[6] = 0, K[7] = 0, K[8] = 0, K[9] = 0, K[10] = 2 * H2, K[11] = 0, K[12] = (O2 + W) * Q3, K[13] = (Y + X2) * Z2, K[14] = (B3 + $32) * H2, K[15] = 1, K;
}
function dK(K, O2, W, X2, Y, $32, B3) {
  var Q3 = 1 / (O2 - W), Z2 = 1 / (X2 - Y), H2 = 1 / ($32 - B3);
  return K[0] = -2 * Q3, K[1] = 0, K[2] = 0, K[3] = 0, K[4] = 0, K[5] = -2 * Z2, K[6] = 0, K[7] = 0, K[8] = 0, K[9] = 0, K[10] = H2, K[11] = 0, K[12] = (O2 + W) * Q3, K[13] = (Y + X2) * Z2, K[14] = $32 * H2, K[15] = 1, K;
}
function vK(K, O2, W, X2) {
  var Y, $32, B3, Q3, Z2, H2, L2, G, C3, V3, E2 = O2[0], U = O2[1], J = O2[2], D2 = X2[0], k = X2[1], N2 = X2[2], A3 = W[0], I = W[1], P = W[2];
  if (Math.abs(E2 - A3) < S2 && Math.abs(U - I) < S2 && Math.abs(J - P) < S2)
    return L0(K);
  if (L2 = E2 - A3, G = U - I, C3 = J - P, V3 = 1 / Math.hypot(L2, G, C3), L2 *= V3, G *= V3, C3 *= V3, Y = k * C3 - N2 * G, $32 = N2 * L2 - D2 * C3, B3 = D2 * G - k * L2, V3 = Math.hypot(Y, $32, B3), !V3)
    Y = 0, $32 = 0, B3 = 0;
  else
    V3 = 1 / V3, Y *= V3, $32 *= V3, B3 *= V3;
  if (Q3 = G * B3 - C3 * $32, Z2 = C3 * Y - L2 * B3, H2 = L2 * $32 - G * Y, V3 = Math.hypot(Q3, Z2, H2), !V3)
    Q3 = 0, Z2 = 0, H2 = 0;
  else
    V3 = 1 / V3, Q3 *= V3, Z2 *= V3, H2 *= V3;
  return K[0] = Y, K[1] = Q3, K[2] = L2, K[3] = 0, K[4] = $32, K[5] = Z2, K[6] = G, K[7] = 0, K[8] = B3, K[9] = H2, K[10] = C3, K[11] = 0, K[12] = -(Y * E2 + $32 * U + B3 * J), K[13] = -(Q3 * E2 + Z2 * U + H2 * J), K[14] = -(L2 * E2 + G * U + C3 * J), K[15] = 1, K;
}
function nK(K, O2, W, X2) {
  var Y = O2[0], $32 = O2[1], B3 = O2[2], Q3 = X2[0], Z2 = X2[1], H2 = X2[2], L2 = Y - W[0], G = $32 - W[1], C3 = B3 - W[2], V3 = L2 * L2 + G * G + C3 * C3;
  if (V3 > 0)
    V3 = 1 / Math.sqrt(V3), L2 *= V3, G *= V3, C3 *= V3;
  var E2 = Z2 * C3 - H2 * G, U = H2 * L2 - Q3 * C3, J = Q3 * G - Z2 * L2;
  if (V3 = E2 * E2 + U * U + J * J, V3 > 0)
    V3 = 1 / Math.sqrt(V3), E2 *= V3, U *= V3, J *= V3;
  return K[0] = E2, K[1] = U, K[2] = J, K[3] = 0, K[4] = G * J - C3 * U, K[5] = C3 * E2 - L2 * J, K[6] = L2 * U - G * E2, K[7] = 0, K[8] = L2, K[9] = G, K[10] = C3, K[11] = 0, K[12] = Y, K[13] = $32, K[14] = B3, K[15] = 1, K;
}
function lK(K) {
  return "mat4(" + K[0] + ", " + K[1] + ", " + K[2] + ", " + K[3] + ", " + K[4] + ", " + K[5] + ", " + K[6] + ", " + K[7] + ", " + K[8] + ", " + K[9] + ", " + K[10] + ", " + K[11] + ", " + K[12] + ", " + K[13] + ", " + K[14] + ", " + K[15] + ")";
}
function cK(K) {
  return Math.hypot(K[0], K[1], K[2], K[3], K[4], K[5], K[6], K[7], K[8], K[9], K[10], K[11], K[12], K[13], K[14], K[15]);
}
function iK(K, O2, W) {
  return K[0] = O2[0] + W[0], K[1] = O2[1] + W[1], K[2] = O2[2] + W[2], K[3] = O2[3] + W[3], K[4] = O2[4] + W[4], K[5] = O2[5] + W[5], K[6] = O2[6] + W[6], K[7] = O2[7] + W[7], K[8] = O2[8] + W[8], K[9] = O2[9] + W[9], K[10] = O2[10] + W[10], K[11] = O2[11] + W[11], K[12] = O2[12] + W[12], K[13] = O2[13] + W[13], K[14] = O2[14] + W[14], K[15] = O2[15] + W[15], K;
}
function E0(K, O2, W) {
  return K[0] = O2[0] - W[0], K[1] = O2[1] - W[1], K[2] = O2[2] - W[2], K[3] = O2[3] - W[3], K[4] = O2[4] - W[4], K[5] = O2[5] - W[5], K[6] = O2[6] - W[6], K[7] = O2[7] - W[7], K[8] = O2[8] - W[8], K[9] = O2[9] - W[9], K[10] = O2[10] - W[10], K[11] = O2[11] - W[11], K[12] = O2[12] - W[12], K[13] = O2[13] - W[13], K[14] = O2[14] - W[14], K[15] = O2[15] - W[15], K;
}
function yK(K, O2, W) {
  return K[0] = O2[0] * W, K[1] = O2[1] * W, K[2] = O2[2] * W, K[3] = O2[3] * W, K[4] = O2[4] * W, K[5] = O2[5] * W, K[6] = O2[6] * W, K[7] = O2[7] * W, K[8] = O2[8] * W, K[9] = O2[9] * W, K[10] = O2[10] * W, K[11] = O2[11] * W, K[12] = O2[12] * W, K[13] = O2[13] * W, K[14] = O2[14] * W, K[15] = O2[15] * W, K;
}
function zK(K, O2, W, X2) {
  return K[0] = O2[0] + W[0] * X2, K[1] = O2[1] + W[1] * X2, K[2] = O2[2] + W[2] * X2, K[3] = O2[3] + W[3] * X2, K[4] = O2[4] + W[4] * X2, K[5] = O2[5] + W[5] * X2, K[6] = O2[6] + W[6] * X2, K[7] = O2[7] + W[7] * X2, K[8] = O2[8] + W[8] * X2, K[9] = O2[9] + W[9] * X2, K[10] = O2[10] + W[10] * X2, K[11] = O2[11] + W[11] * X2, K[12] = O2[12] + W[12] * X2, K[13] = O2[13] + W[13] * X2, K[14] = O2[14] + W[14] * X2, K[15] = O2[15] + W[15] * X2, K;
}
function sK(K, O2) {
  return K[0] === O2[0] && K[1] === O2[1] && K[2] === O2[2] && K[3] === O2[3] && K[4] === O2[4] && K[5] === O2[5] && K[6] === O2[6] && K[7] === O2[7] && K[8] === O2[8] && K[9] === O2[9] && K[10] === O2[10] && K[11] === O2[11] && K[12] === O2[12] && K[13] === O2[13] && K[14] === O2[14] && K[15] === O2[15];
}
function rK(K, O2) {
  var W = K[0], X2 = K[1], Y = K[2], $32 = K[3], B3 = K[4], Q3 = K[5], Z2 = K[6], H2 = K[7], L2 = K[8], G = K[9], C3 = K[10], V3 = K[11], E2 = K[12], U = K[13], J = K[14], D2 = K[15], k = O2[0], N2 = O2[1], A3 = O2[2], I = O2[3], P = O2[4], F = O2[5], j = O2[6], h3 = O2[7], M2 = O2[8], p2 = O2[9], g2 = O2[10], q = O2[11], T2 = O2[12], d = O2[13], c = O2[14], i = O2[15];
  return Math.abs(W - k) <= S2 * Math.max(1, Math.abs(W), Math.abs(k)) && Math.abs(X2 - N2) <= S2 * Math.max(1, Math.abs(X2), Math.abs(N2)) && Math.abs(Y - A3) <= S2 * Math.max(1, Math.abs(Y), Math.abs(A3)) && Math.abs($32 - I) <= S2 * Math.max(1, Math.abs($32), Math.abs(I)) && Math.abs(B3 - P) <= S2 * Math.max(1, Math.abs(B3), Math.abs(P)) && Math.abs(Q3 - F) <= S2 * Math.max(1, Math.abs(Q3), Math.abs(F)) && Math.abs(Z2 - j) <= S2 * Math.max(1, Math.abs(Z2), Math.abs(j)) && Math.abs(H2 - h3) <= S2 * Math.max(1, Math.abs(H2), Math.abs(h3)) && Math.abs(L2 - M2) <= S2 * Math.max(1, Math.abs(L2), Math.abs(M2)) && Math.abs(G - p2) <= S2 * Math.max(1, Math.abs(G), Math.abs(p2)) && Math.abs(C3 - g2) <= S2 * Math.max(1, Math.abs(C3), Math.abs(g2)) && Math.abs(V3 - q) <= S2 * Math.max(1, Math.abs(V3), Math.abs(q)) && Math.abs(E2 - T2) <= S2 * Math.max(1, Math.abs(E2), Math.abs(T2)) && Math.abs(U - d) <= S2 * Math.max(1, Math.abs(U), Math.abs(d)) && Math.abs(J - c) <= S2 * Math.max(1, Math.abs(J), Math.abs(c)) && Math.abs(D2 - i) <= S2 * Math.max(1, Math.abs(D2), Math.abs(i));
}
var gK = C0;
var fK = U0;
var mK = J0;
var xK = E0;
var r = {};
a(r, { str: () => {
  {
    return zO;
  }
}, squaredLength: () => {
  {
    return r0;
  }
}, sqrLen: () => {
  {
    return tO;
  }
}, sqlerp: () => {
  {
    return WW;
  }
}, slerp: () => {
  {
    return u2;
  }
}, setAxisAngle: () => {
  {
    return v0;
  }
}, setAxes: () => {
  {
    return XW;
  }
}, set: () => {
  {
    return xO;
  }
}, scale: () => {
  {
    return y0;
  }
}, rotationTo: () => {
  {
    return OW;
  }
}, rotateZ: () => {
  {
    return dO;
  }
}, rotateY: () => {
  {
    return fO;
  }
}, rotateX: () => {
  {
    return wO;
  }
}, random: () => {
  {
    return lO;
  }
}, pow: () => {
  {
    return nO;
  }
}, normalize: () => {
  {
    return X0;
  }
}, multiply: () => {
  {
    return n0;
  }
}, mul: () => {
  {
    return bO;
  }
}, ln: () => {
  {
    return c0;
  }
}, lerp: () => {
  {
    return uO;
  }
}, length: () => {
  {
    return s0;
  }
}, len: () => {
  {
    return oO;
  }
}, invert: () => {
  {
    return cO;
  }
}, identity: () => {
  {
    return pO;
  }
}, getAxisAngle: () => {
  {
    return gO;
  }
}, getAngle: () => {
  {
    return qO;
  }
}, fromValues: () => {
  {
    return rO;
  }
}, fromMat3: () => {
  {
    return i0;
  }
}, fromEuler: () => {
  {
    return yO;
  }
}, exp: () => {
  {
    return l0;
  }
}, exactEquals: () => {
  {
    return aO;
  }
}, equals: () => {
  {
    return KW;
  }
}, dot: () => {
  {
    return z0;
  }
}, create: () => {
  {
    return W0;
  }
}, copy: () => {
  {
    return mO;
  }
}, conjugate: () => {
  {
    return iO;
  }
}, clone: () => {
  {
    return sO;
  }
}, calculateW: () => {
  {
    return vO;
  }
}, add: () => {
  {
    return eO;
  }
} });
var s = {};
a(s, { zero: () => {
  {
    return IO;
  }
}, transformQuat: () => {
  {
    return VO;
  }
}, transformMat4: () => {
  {
    return JO;
  }
}, transformMat3: () => {
  {
    return GO;
  }
}, subtract: () => {
  {
    return I0;
  }
}, sub: () => {
  {
    return SO;
  }
}, str: () => {
  {
    return PO;
  }
}, squaredLength: () => {
  {
    return k0;
  }
}, squaredDistance: () => {
  {
    return S0;
  }
}, sqrLen: () => {
  {
    return jO;
  }
}, sqrDist: () => {
  {
    return RO;
  }
}, set: () => {
  {
    return uK;
  }
}, scaleAndAdd: () => {
  {
    return YO;
  }
}, scale: () => {
  {
    return XO;
  }
}, round: () => {
  {
    return WO;
  }
}, rotateZ: () => {
  {
    return EO;
  }
}, rotateY: () => {
  {
    return UO;
  }
}, rotateX: () => {
  {
    return CO;
  }
}, random: () => {
  {
    return LO;
  }
}, normalize: () => {
  {
    return K0;
  }
}, negate: () => {
  {
    return $O;
  }
}, multiply: () => {
  {
    return P0;
  }
}, mul: () => {
  {
    return kO;
  }
}, min: () => {
  {
    return KO;
  }
}, max: () => {
  {
    return OO;
  }
}, lerp: () => {
  {
    return QO;
  }
}, length: () => {
  {
    return D0;
  }
}, len: () => {
  {
    return O0;
  }
}, inverse: () => {
  {
    return BO;
  }
}, hermite: () => {
  {
    return ZO;
  }
}, fromValues: () => {
  {
    return e;
  }
}, forEach: () => {
  {
    return hO;
  }
}, floor: () => {
  {
    return aK;
  }
}, exactEquals: () => {
  {
    return AO;
  }
}, equals: () => {
  {
    return NO;
  }
}, dot: () => {
  {
    return b;
  }
}, divide: () => {
  {
    return A0;
  }
}, div: () => {
  {
    return TO;
  }
}, distance: () => {
  {
    return N0;
  }
}, dist: () => {
  {
    return _O;
  }
}, cross: () => {
  {
    return z;
  }
}, create: () => {
  {
    return x2;
  }
}, copy: () => {
  {
    return bK;
  }
}, clone: () => {
  {
    return eK;
  }
}, ceil: () => {
  {
    return tK;
  }
}, bezier: () => {
  {
    return HO;
  }
}, angle: () => {
  {
    return DO;
  }
}, add: () => {
  {
    return oK;
  }
} });
function x2() {
  var K = new R2(3);
  if (R2 != Float32Array)
    K[0] = 0, K[1] = 0, K[2] = 0;
  return K;
}
function eK(K) {
  var O2 = new R2(3);
  return O2[0] = K[0], O2[1] = K[1], O2[2] = K[2], O2;
}
function D0(K) {
  var O2 = K[0], W = K[1], X2 = K[2];
  return Math.hypot(O2, W, X2);
}
function e(K, O2, W) {
  var X2 = new R2(3);
  return X2[0] = K, X2[1] = O2, X2[2] = W, X2;
}
function bK(K, O2) {
  return K[0] = O2[0], K[1] = O2[1], K[2] = O2[2], K;
}
function uK(K, O2, W, X2) {
  return K[0] = O2, K[1] = W, K[2] = X2, K;
}
function oK(K, O2, W) {
  return K[0] = O2[0] + W[0], K[1] = O2[1] + W[1], K[2] = O2[2] + W[2], K;
}
function I0(K, O2, W) {
  return K[0] = O2[0] - W[0], K[1] = O2[1] - W[1], K[2] = O2[2] - W[2], K;
}
function P0(K, O2, W) {
  return K[0] = O2[0] * W[0], K[1] = O2[1] * W[1], K[2] = O2[2] * W[2], K;
}
function A0(K, O2, W) {
  return K[0] = O2[0] / W[0], K[1] = O2[1] / W[1], K[2] = O2[2] / W[2], K;
}
function tK(K, O2) {
  return K[0] = Math.ceil(O2[0]), K[1] = Math.ceil(O2[1]), K[2] = Math.ceil(O2[2]), K;
}
function aK(K, O2) {
  return K[0] = Math.floor(O2[0]), K[1] = Math.floor(O2[1]), K[2] = Math.floor(O2[2]), K;
}
function KO(K, O2, W) {
  return K[0] = Math.min(O2[0], W[0]), K[1] = Math.min(O2[1], W[1]), K[2] = Math.min(O2[2], W[2]), K;
}
function OO(K, O2, W) {
  return K[0] = Math.max(O2[0], W[0]), K[1] = Math.max(O2[1], W[1]), K[2] = Math.max(O2[2], W[2]), K;
}
function WO(K, O2) {
  return K[0] = Math.round(O2[0]), K[1] = Math.round(O2[1]), K[2] = Math.round(O2[2]), K;
}
function XO(K, O2, W) {
  return K[0] = O2[0] * W, K[1] = O2[1] * W, K[2] = O2[2] * W, K;
}
function YO(K, O2, W, X2) {
  return K[0] = O2[0] + W[0] * X2, K[1] = O2[1] + W[1] * X2, K[2] = O2[2] + W[2] * X2, K;
}
function N0(K, O2) {
  var W = O2[0] - K[0], X2 = O2[1] - K[1], Y = O2[2] - K[2];
  return Math.hypot(W, X2, Y);
}
function S0(K, O2) {
  var W = O2[0] - K[0], X2 = O2[1] - K[1], Y = O2[2] - K[2];
  return W * W + X2 * X2 + Y * Y;
}
function k0(K) {
  var O2 = K[0], W = K[1], X2 = K[2];
  return O2 * O2 + W * W + X2 * X2;
}
function $O(K, O2) {
  return K[0] = -O2[0], K[1] = -O2[1], K[2] = -O2[2], K;
}
function BO(K, O2) {
  return K[0] = 1 / O2[0], K[1] = 1 / O2[1], K[2] = 1 / O2[2], K;
}
function K0(K, O2) {
  var W = O2[0], X2 = O2[1], Y = O2[2], $32 = W * W + X2 * X2 + Y * Y;
  if ($32 > 0)
    $32 = 1 / Math.sqrt($32);
  return K[0] = O2[0] * $32, K[1] = O2[1] * $32, K[2] = O2[2] * $32, K;
}
function b(K, O2) {
  return K[0] * O2[0] + K[1] * O2[1] + K[2] * O2[2];
}
function z(K, O2, W) {
  var X2 = O2[0], Y = O2[1], $32 = O2[2], B3 = W[0], Q3 = W[1], Z2 = W[2];
  return K[0] = Y * Z2 - $32 * Q3, K[1] = $32 * B3 - X2 * Z2, K[2] = X2 * Q3 - Y * B3, K;
}
function QO(K, O2, W, X2) {
  var Y = O2[0], $32 = O2[1], B3 = O2[2];
  return K[0] = Y + X2 * (W[0] - Y), K[1] = $32 + X2 * (W[1] - $32), K[2] = B3 + X2 * (W[2] - B3), K;
}
function ZO(K, O2, W, X2, Y, $32) {
  var B3 = $32 * $32, Q3 = B3 * (2 * $32 - 3) + 1, Z2 = B3 * ($32 - 2) + $32, H2 = B3 * ($32 - 1), L2 = B3 * (3 - 2 * $32);
  return K[0] = O2[0] * Q3 + W[0] * Z2 + X2[0] * H2 + Y[0] * L2, K[1] = O2[1] * Q3 + W[1] * Z2 + X2[1] * H2 + Y[1] * L2, K[2] = O2[2] * Q3 + W[2] * Z2 + X2[2] * H2 + Y[2] * L2, K;
}
function HO(K, O2, W, X2, Y, $32) {
  var B3 = 1 - $32, Q3 = B3 * B3, Z2 = $32 * $32, H2 = Q3 * B3, L2 = 3 * $32 * Q3, G = 3 * Z2 * B3, C3 = Z2 * $32;
  return K[0] = O2[0] * H2 + W[0] * L2 + X2[0] * G + Y[0] * C3, K[1] = O2[1] * H2 + W[1] * L2 + X2[1] * G + Y[1] * C3, K[2] = O2[2] * H2 + W[2] * L2 + X2[2] * G + Y[2] * C3, K;
}
function LO(K, O2) {
  O2 = O2 || 1;
  var W = v2() * 2 * Math.PI, X2 = v2() * 2 - 1, Y = Math.sqrt(1 - X2 * X2) * O2;
  return K[0] = Math.cos(W) * Y, K[1] = Math.sin(W) * Y, K[2] = X2 * O2, K;
}
function JO(K, O2, W) {
  var X2 = O2[0], Y = O2[1], $32 = O2[2], B3 = W[3] * X2 + W[7] * Y + W[11] * $32 + W[15];
  return B3 = B3 || 1, K[0] = (W[0] * X2 + W[4] * Y + W[8] * $32 + W[12]) / B3, K[1] = (W[1] * X2 + W[5] * Y + W[9] * $32 + W[13]) / B3, K[2] = (W[2] * X2 + W[6] * Y + W[10] * $32 + W[14]) / B3, K;
}
function GO(K, O2, W) {
  var X2 = O2[0], Y = O2[1], $32 = O2[2];
  return K[0] = X2 * W[0] + Y * W[3] + $32 * W[6], K[1] = X2 * W[1] + Y * W[4] + $32 * W[7], K[2] = X2 * W[2] + Y * W[5] + $32 * W[8], K;
}
function VO(K, O2, W) {
  var X2 = W[0], Y = W[1], $32 = W[2], B3 = W[3], Q3 = O2[0], Z2 = O2[1], H2 = O2[2], L2 = Y * H2 - $32 * Z2, G = $32 * Q3 - X2 * H2, C3 = X2 * Z2 - Y * Q3, V3 = Y * C3 - $32 * G, E2 = $32 * L2 - X2 * C3, U = X2 * G - Y * L2, J = B3 * 2;
  return L2 *= J, G *= J, C3 *= J, V3 *= 2, E2 *= 2, U *= 2, K[0] = Q3 + L2 + V3, K[1] = Z2 + G + E2, K[2] = H2 + C3 + U, K;
}
function CO(K, O2, W, X2) {
  var Y = [], $32 = [];
  return Y[0] = O2[0] - W[0], Y[1] = O2[1] - W[1], Y[2] = O2[2] - W[2], $32[0] = Y[0], $32[1] = Y[1] * Math.cos(X2) - Y[2] * Math.sin(X2), $32[2] = Y[1] * Math.sin(X2) + Y[2] * Math.cos(X2), K[0] = $32[0] + W[0], K[1] = $32[1] + W[1], K[2] = $32[2] + W[2], K;
}
function UO(K, O2, W, X2) {
  var Y = [], $32 = [];
  return Y[0] = O2[0] - W[0], Y[1] = O2[1] - W[1], Y[2] = O2[2] - W[2], $32[0] = Y[2] * Math.sin(X2) + Y[0] * Math.cos(X2), $32[1] = Y[1], $32[2] = Y[2] * Math.cos(X2) - Y[0] * Math.sin(X2), K[0] = $32[0] + W[0], K[1] = $32[1] + W[1], K[2] = $32[2] + W[2], K;
}
function EO(K, O2, W, X2) {
  var Y = [], $32 = [];
  return Y[0] = O2[0] - W[0], Y[1] = O2[1] - W[1], Y[2] = O2[2] - W[2], $32[0] = Y[0] * Math.cos(X2) - Y[1] * Math.sin(X2), $32[1] = Y[0] * Math.sin(X2) + Y[1] * Math.cos(X2), $32[2] = Y[2], K[0] = $32[0] + W[0], K[1] = $32[1] + W[1], K[2] = $32[2] + W[2], K;
}
function DO(K, O2) {
  var W = K[0], X2 = K[1], Y = K[2], $32 = O2[0], B3 = O2[1], Q3 = O2[2], Z2 = Math.sqrt(W * W + X2 * X2 + Y * Y), H2 = Math.sqrt($32 * $32 + B3 * B3 + Q3 * Q3), L2 = Z2 * H2, G = L2 && b(K, O2) / L2;
  return Math.acos(Math.min(Math.max(G, -1), 1));
}
function IO(K) {
  return K[0] = 0, K[1] = 0, K[2] = 0, K;
}
function PO(K) {
  return "vec3(" + K[0] + ", " + K[1] + ", " + K[2] + ")";
}
function AO(K, O2) {
  return K[0] === O2[0] && K[1] === O2[1] && K[2] === O2[2];
}
function NO(K, O2) {
  var W = K[0], X2 = K[1], Y = K[2], $32 = O2[0], B3 = O2[1], Q3 = O2[2];
  return Math.abs(W - $32) <= S2 * Math.max(1, Math.abs(W), Math.abs($32)) && Math.abs(X2 - B3) <= S2 * Math.max(1, Math.abs(X2), Math.abs(B3)) && Math.abs(Y - Q3) <= S2 * Math.max(1, Math.abs(Y), Math.abs(Q3));
}
var SO = I0;
var kO = P0;
var TO = A0;
var _O = N0;
var RO = S0;
var O0 = D0;
var jO = k0;
var hO = function() {
  var K = x2();
  return function(O2, W, X2, Y, $32, B3) {
    var Q3, Z2;
    if (!W)
      W = 3;
    if (!X2)
      X2 = 0;
    if (Y)
      Z2 = Math.min(Y * W + X2, O2.length);
    else
      Z2 = O2.length;
    for (Q3 = X2;Q3 < Z2; Q3 += W)
      K[0] = O2[Q3], K[1] = O2[Q3 + 1], K[2] = O2[Q3 + 2], $32(K, K, B3), O2[Q3] = K[0], O2[Q3 + 1] = K[1], O2[Q3 + 2] = K[2];
    return O2;
  };
}();
function MO() {
  var K = new R2(4);
  if (R2 != Float32Array)
    K[0] = 0, K[1] = 0, K[2] = 0, K[3] = 0;
  return K;
}
function T0(K) {
  var O2 = new R2(4);
  return O2[0] = K[0], O2[1] = K[1], O2[2] = K[2], O2[3] = K[3], O2;
}
function _0(K, O2, W, X2) {
  var Y = new R2(4);
  return Y[0] = K, Y[1] = O2, Y[2] = W, Y[3] = X2, Y;
}
function R0(K, O2) {
  return K[0] = O2[0], K[1] = O2[1], K[2] = O2[2], K[3] = O2[3], K;
}
function j0(K, O2, W, X2, Y) {
  return K[0] = O2, K[1] = W, K[2] = X2, K[3] = Y, K;
}
function h0(K, O2, W) {
  return K[0] = O2[0] + W[0], K[1] = O2[1] + W[1], K[2] = O2[2] + W[2], K[3] = O2[3] + W[3], K;
}
function M0(K, O2, W) {
  return K[0] = O2[0] * W, K[1] = O2[1] * W, K[2] = O2[2] * W, K[3] = O2[3] * W, K;
}
function F0(K) {
  var O2 = K[0], W = K[1], X2 = K[2], Y = K[3];
  return Math.hypot(O2, W, X2, Y);
}
function p0(K) {
  var O2 = K[0], W = K[1], X2 = K[2], Y = K[3];
  return O2 * O2 + W * W + X2 * X2 + Y * Y;
}
function g0(K, O2) {
  var W = O2[0], X2 = O2[1], Y = O2[2], $32 = O2[3], B3 = W * W + X2 * X2 + Y * Y + $32 * $32;
  if (B3 > 0)
    B3 = 1 / Math.sqrt(B3);
  return K[0] = W * B3, K[1] = X2 * B3, K[2] = Y * B3, K[3] = $32 * B3, K;
}
function q0(K, O2) {
  return K[0] * O2[0] + K[1] * O2[1] + K[2] * O2[2] + K[3] * O2[3];
}
function w0(K, O2, W, X2) {
  var Y = O2[0], $32 = O2[1], B3 = O2[2], Q3 = O2[3];
  return K[0] = Y + X2 * (W[0] - Y), K[1] = $32 + X2 * (W[1] - $32), K[2] = B3 + X2 * (W[2] - B3), K[3] = Q3 + X2 * (W[3] - Q3), K;
}
function f0(K, O2) {
  return K[0] === O2[0] && K[1] === O2[1] && K[2] === O2[2] && K[3] === O2[3];
}
function d0(K, O2) {
  var W = K[0], X2 = K[1], Y = K[2], $32 = K[3], B3 = O2[0], Q3 = O2[1], Z2 = O2[2], H2 = O2[3];
  return Math.abs(W - B3) <= S2 * Math.max(1, Math.abs(W), Math.abs(B3)) && Math.abs(X2 - Q3) <= S2 * Math.max(1, Math.abs(X2), Math.abs(Q3)) && Math.abs(Y - Z2) <= S2 * Math.max(1, Math.abs(Y), Math.abs(Z2)) && Math.abs($32 - H2) <= S2 * Math.max(1, Math.abs($32), Math.abs(H2));
}
var VW = function() {
  var K = MO();
  return function(O2, W, X2, Y, $32, B3) {
    var Q3, Z2;
    if (!W)
      W = 4;
    if (!X2)
      X2 = 0;
    if (Y)
      Z2 = Math.min(Y * W + X2, O2.length);
    else
      Z2 = O2.length;
    for (Q3 = X2;Q3 < Z2; Q3 += W)
      K[0] = O2[Q3], K[1] = O2[Q3 + 1], K[2] = O2[Q3 + 2], K[3] = O2[Q3 + 3], $32(K, K, B3), O2[Q3] = K[0], O2[Q3 + 1] = K[1], O2[Q3 + 2] = K[2], O2[Q3 + 3] = K[3];
    return O2;
  };
}();
function W0() {
  var K = new R2(4);
  if (R2 != Float32Array)
    K[0] = 0, K[1] = 0, K[2] = 0;
  return K[3] = 1, K;
}
function pO(K) {
  return K[0] = 0, K[1] = 0, K[2] = 0, K[3] = 1, K;
}
function v0(K, O2, W) {
  W = W * 0.5;
  var X2 = Math.sin(W);
  return K[0] = X2 * O2[0], K[1] = X2 * O2[1], K[2] = X2 * O2[2], K[3] = Math.cos(W), K;
}
function gO(K, O2) {
  var W = Math.acos(O2[3]) * 2, X2 = Math.sin(W / 2);
  if (X2 > S2)
    K[0] = O2[0] / X2, K[1] = O2[1] / X2, K[2] = O2[2] / X2;
  else
    K[0] = 1, K[1] = 0, K[2] = 0;
  return W;
}
function qO(K, O2) {
  var W = z0(K, O2);
  return Math.acos(2 * W * W - 1);
}
function n0(K, O2, W) {
  var X2 = O2[0], Y = O2[1], $32 = O2[2], B3 = O2[3], Q3 = W[0], Z2 = W[1], H2 = W[2], L2 = W[3];
  return K[0] = X2 * L2 + B3 * Q3 + Y * H2 - $32 * Z2, K[1] = Y * L2 + B3 * Z2 + $32 * Q3 - X2 * H2, K[2] = $32 * L2 + B3 * H2 + X2 * Z2 - Y * Q3, K[3] = B3 * L2 - X2 * Q3 - Y * Z2 - $32 * H2, K;
}
function wO(K, O2, W) {
  W *= 0.5;
  var X2 = O2[0], Y = O2[1], $32 = O2[2], B3 = O2[3], Q3 = Math.sin(W), Z2 = Math.cos(W);
  return K[0] = X2 * Z2 + B3 * Q3, K[1] = Y * Z2 + $32 * Q3, K[2] = $32 * Z2 - Y * Q3, K[3] = B3 * Z2 - X2 * Q3, K;
}
function fO(K, O2, W) {
  W *= 0.5;
  var X2 = O2[0], Y = O2[1], $32 = O2[2], B3 = O2[3], Q3 = Math.sin(W), Z2 = Math.cos(W);
  return K[0] = X2 * Z2 - $32 * Q3, K[1] = Y * Z2 + B3 * Q3, K[2] = $32 * Z2 + X2 * Q3, K[3] = B3 * Z2 - Y * Q3, K;
}
function dO(K, O2, W) {
  W *= 0.5;
  var X2 = O2[0], Y = O2[1], $32 = O2[2], B3 = O2[3], Q3 = Math.sin(W), Z2 = Math.cos(W);
  return K[0] = X2 * Z2 + Y * Q3, K[1] = Y * Z2 - X2 * Q3, K[2] = $32 * Z2 + B3 * Q3, K[3] = B3 * Z2 - $32 * Q3, K;
}
function vO(K, O2) {
  var W = O2[0], X2 = O2[1], Y = O2[2];
  return K[0] = W, K[1] = X2, K[2] = Y, K[3] = Math.sqrt(Math.abs(1 - W * W - X2 * X2 - Y * Y)), K;
}
function l0(K, O2) {
  var W = O2[0], X2 = O2[1], Y = O2[2], $32 = O2[3], B3 = Math.sqrt(W * W + X2 * X2 + Y * Y), Q3 = Math.exp($32), Z2 = B3 > 0 ? Q3 * Math.sin(B3) / B3 : 0;
  return K[0] = W * Z2, K[1] = X2 * Z2, K[2] = Y * Z2, K[3] = Q3 * Math.cos(B3), K;
}
function c0(K, O2) {
  var W = O2[0], X2 = O2[1], Y = O2[2], $32 = O2[3], B3 = Math.sqrt(W * W + X2 * X2 + Y * Y), Q3 = B3 > 0 ? Math.atan2(B3, $32) / B3 : 0;
  return K[0] = W * Q3, K[1] = X2 * Q3, K[2] = Y * Q3, K[3] = 0.5 * Math.log(W * W + X2 * X2 + Y * Y + $32 * $32), K;
}
function nO(K, O2, W) {
  return c0(K, O2), y0(K, K, W), l0(K, K), K;
}
function u2(K, O2, W, X2) {
  var Y = O2[0], $32 = O2[1], B3 = O2[2], Q3 = O2[3], Z2 = W[0], H2 = W[1], L2 = W[2], G = W[3], C3, V3, E2, U, J;
  if (V3 = Y * Z2 + $32 * H2 + B3 * L2 + Q3 * G, V3 < 0)
    V3 = -V3, Z2 = -Z2, H2 = -H2, L2 = -L2, G = -G;
  if (1 - V3 > S2)
    C3 = Math.acos(V3), E2 = Math.sin(C3), U = Math.sin((1 - X2) * C3) / E2, J = Math.sin(X2 * C3) / E2;
  else
    U = 1 - X2, J = X2;
  return K[0] = U * Y + J * Z2, K[1] = U * $32 + J * H2, K[2] = U * B3 + J * L2, K[3] = U * Q3 + J * G, K;
}
function lO(K) {
  var O2 = v2(), W = v2(), X2 = v2(), Y = Math.sqrt(1 - O2), $32 = Math.sqrt(O2);
  return K[0] = Y * Math.sin(2 * Math.PI * W), K[1] = Y * Math.cos(2 * Math.PI * W), K[2] = $32 * Math.sin(2 * Math.PI * X2), K[3] = $32 * Math.cos(2 * Math.PI * X2), K;
}
function cO(K, O2) {
  var W = O2[0], X2 = O2[1], Y = O2[2], $32 = O2[3], B3 = W * W + X2 * X2 + Y * Y + $32 * $32, Q3 = B3 ? 1 / B3 : 0;
  return K[0] = -W * Q3, K[1] = -X2 * Q3, K[2] = -Y * Q3, K[3] = $32 * Q3, K;
}
function iO(K, O2) {
  return K[0] = -O2[0], K[1] = -O2[1], K[2] = -O2[2], K[3] = O2[3], K;
}
function i0(K, O2) {
  var W = O2[0] + O2[4] + O2[8], X2;
  if (W > 0)
    X2 = Math.sqrt(W + 1), K[3] = 0.5 * X2, X2 = 0.5 / X2, K[0] = (O2[5] - O2[7]) * X2, K[1] = (O2[6] - O2[2]) * X2, K[2] = (O2[1] - O2[3]) * X2;
  else {
    var Y = 0;
    if (O2[4] > O2[0])
      Y = 1;
    if (O2[8] > O2[Y * 3 + Y])
      Y = 2;
    var $32 = (Y + 1) % 3, B3 = (Y + 2) % 3;
    X2 = Math.sqrt(O2[Y * 3 + Y] - O2[$32 * 3 + $32] - O2[B3 * 3 + B3] + 1), K[Y] = 0.5 * X2, X2 = 0.5 / X2, K[3] = (O2[$32 * 3 + B3] - O2[B3 * 3 + $32]) * X2, K[$32] = (O2[$32 * 3 + Y] + O2[Y * 3 + $32]) * X2, K[B3] = (O2[B3 * 3 + Y] + O2[Y * 3 + B3]) * X2;
  }
  return K;
}
function yO(K, O2, W, X2) {
  var Y = 0.5 * Math.PI / 180;
  O2 *= Y, W *= Y, X2 *= Y;
  var $32 = Math.sin(O2), B3 = Math.cos(O2), Q3 = Math.sin(W), Z2 = Math.cos(W), H2 = Math.sin(X2), L2 = Math.cos(X2);
  return K[0] = $32 * Z2 * L2 - B3 * Q3 * H2, K[1] = B3 * Q3 * L2 + $32 * Z2 * H2, K[2] = B3 * Z2 * H2 - $32 * Q3 * L2, K[3] = B3 * Z2 * L2 + $32 * Q3 * H2, K;
}
function zO(K) {
  return "quat(" + K[0] + ", " + K[1] + ", " + K[2] + ", " + K[3] + ")";
}
var sO = T0;
var rO = _0;
var mO = R0;
var xO = j0;
var eO = h0;
var bO = n0;
var y0 = M0;
var z0 = q0;
var uO = w0;
var s0 = F0;
var oO = s0;
var r0 = p0;
var tO = r0;
var X0 = g0;
var aO = f0;
var KW = d0;
var OW = function() {
  var K = x2(), O2 = e(1, 0, 0), W = e(0, 1, 0);
  return function(X2, Y, $32) {
    var B3 = b(Y, $32);
    if (B3 < -0.999999) {
      if (z(K, O2, Y), O0(K) < 0.000001)
        z(K, W, Y);
      return K0(K, K), v0(X2, K, Math.PI), X2;
    } else if (B3 > 0.999999)
      return X2[0] = 0, X2[1] = 0, X2[2] = 0, X2[3] = 1, X2;
    else
      return z(K, Y, $32), X2[0] = K[0], X2[1] = K[1], X2[2] = K[2], X2[3] = 1 + B3, X0(X2, X2);
  };
}();
var WW = function() {
  var K = W0(), O2 = W0();
  return function(W, X2, Y, $32, B3, Q3) {
    return u2(K, X2, B3, Q3), u2(O2, Y, $32, Q3), u2(W, K, O2, 2 * Q3 * (1 - Q3)), W;
  };
}();
var XW = function() {
  var K = H0();
  return function(O2, W, X2, Y) {
    return K[0] = X2[0], K[3] = X2[1], K[6] = X2[2], K[1] = Y[0], K[4] = Y[1], K[7] = Y[2], K[2] = -W[0], K[5] = -W[1], K[8] = -W[2], X0(O2, i0(O2, K));
  };
}();

class n2 {
  d;
  listeners = new Set;
  constructor(K) {
    this.elem = K;
  }
  addChangeListener(K) {
    return this.listeners.add(K), this;
  }
  removeChangeListener(K) {
    this.listeners.delete(K);
  }
  onChange() {
    for (let K of this.listeners)
      K.onChange(this.elem);
  }
}
var YW = Math.PI / 90;
var Y0 = [0, 0, 0];
var m0 = _.create();
var x0 = _.create();
var o = r.create();

class m {
  static HIDDEN = m.create().scale(0, 0, 0);
  static IDENTITY = m.create();
  #K = Float32Array.from(_.create());
  #O = new n2(this);
  constructor() {
    this.identity();
  }
  addChangeListener(K) {
    return this.#O.addChangeListener(K), this;
  }
  removeChangeListener(K) {
    this.#O.removeChangeListener(K);
  }
  static create() {
    return new m;
  }
  copy(K) {
    return _.copy(this.#K, K.getMatrix()), this.#O.onChange(), this;
  }
  identity() {
    return _.identity(this.#K), this.#O.onChange(), this;
  }
  invert(K) {
    return _.invert(this.#K, K?.getMatrix() ?? this.getMatrix()), this.#O.onChange(), this;
  }
  multiply(K) {
    return _.multiply(this.#K, this.#K, K.getMatrix()), this.#O.onChange(), this;
  }
  multiply2(K, O2) {
    return _.multiply(this.#K, K.getMatrix(), O2.getMatrix()), this.#O.onChange(), this;
  }
  multiply3(K, O2, W) {
    return this.multiply2(K, O2), this.multiply(W), this;
  }
  translate(K, O2, W) {
    const X2 = Y0;
    return X2[0] = K, X2[1] = O2, X2[2] = W, this.move(X2);
  }
  move(K) {
    return _.translate(this.#K, this.#K, K), this.#O.onChange(), this;
  }
  rotateX(K) {
    return _.rotateX(this.#K, this.#K, K), this.#O.onChange(), this;
  }
  rotateY(K) {
    return _.rotateY(this.#K, this.#K, K), this.#O.onChange(), this;
  }
  rotateZ(K) {
    return _.rotateZ(this.#K, this.#K, K), this.#O.onChange(), this;
  }
  setXRotation(K) {
    return _.fromXRotation(this.getMatrix(), K), this.#O.onChange(), this;
  }
  setYRotation(K) {
    return _.fromYRotation(this.getMatrix(), K), this.#O.onChange(), this;
  }
  scale(K, O2, W) {
    return _.scale(this.#K, this.#K, [K, O2 ?? K, W ?? K]), this.#O.onChange(), this;
  }
  perspective(K, O2, W, X2) {
    return _.perspective(this.#K, K * YW, O2, W, X2), this.#O.onChange(), this;
  }
  ortho(K, O2, W, X2, Y, $32) {
    return _.ortho(this.#K, K, O2, W, X2, Y, $32), this.#O.onChange(), this;
  }
  combine(K, O2, W = 0.5) {
    return _.multiplyScalar(m0, K.getMatrix(), 1 - W), _.multiplyScalar(x0, O2.getMatrix(), W), _.add(this.#K, m0, x0), this.#O.onChange(), this;
  }
  static getMoveVector(K, O2, W, X2) {
    const Y = Y0;
    if (Y[0] = K, Y[1] = O2, Y[2] = W, X2)
      _.getRotation(o, X2.getMatrix()), r.invert(o, o), s.transformQuat(Y, Y, o);
    return Y;
  }
  getPosition() {
    const K = Y0;
    return K[0] = this.#K[12], K[1] = this.#K[13], K[2] = this.#K[14], K;
  }
  setVector(K) {
    return this.setPosition(K[0], K[1], K[2]);
  }
  setPosition(K, O2, W) {
    return this.#K[12] = K, this.#K[13] = O2, this.#K[14] = W, this.#O.onChange(), this;
  }
  getMatrix() {
    return this.#K;
  }
}
var f2 = m;

class e0 {
  q;
  w;
  #K;
  #O = false;
  #W = 0;
  #X;
  #Y;
  constructor(K, O2, W) {
    this.getValue = O2, this.apply = W, this.#X = K, this.#K = this.getValue(K);
  }
  set element(K) {
    this.#X = K, this.#K = this.getValue(K), this.#Y = undefined;
  }
  setGoal(K, O2, W) {
    if (this.#Y && this.#Y !== W)
      return;
    if (this.#K !== K || this.#W !== O2)
      this.#W = O2, this.#K = K, this.#Y = W, this.#O = true;
  }
  get goal() {
    return this.#K;
  }
  update(K) {
    if (this.#O) {
      const O2 = this.getValue(this.#X), W = this.goal - O2, X2 = Math.min(Math.abs(W), this.#W * K);
      if (X2 <= 0.01)
        this.apply(this.#X, this.goal), this.#O = false, this.#Y?.onRelease?.(), this.#Y = undefined;
      else
        this.apply(this.#X, O2 + X2 * Math.sign(W));
    }
    return this.#O;
  }
}

class b0 {
  i;
  f;
  warningLimit = 50000;
  #K = new Set;
  #O = [];
  constructor(K, O2) {
    this.initCall = K, this.onRecycle = O2;
  }
  create(...K) {
    const O2 = this.#O.pop();
    if (O2)
      return this.#K.add(O2), this.initCall(O2, ...K);
    const W = this.initCall(undefined, ...K);
    return this.#K.add(W), this.#X(), W;
  }
  recycle(K) {
    this.#K.delete(K), this.#W(K);
  }
  recycleAll() {
    for (let K of this.#K)
      this.#W(K);
    this.#K.clear();
  }
  clear() {
    this.#O.length = 0, this.#K.clear();
  }
  countObjectsInExistence() {
    return this.#K.size + this.#O.length;
  }
  #W(K) {
    this.#O.push(K), this.onRecycle?.(K);
  }
  #X() {
    if (this.countObjectsInExistence() === this.warningLimit)
      console.warn("ObjectPool already created", this.#K.size + this.#O.length, "in", this.constructor.name);
  }
}

class u0 extends b0 {
  constructor() {
    super((K, O2) => {
      if (!K)
        return new e0(O2, (W) => W.valueOf(), (W, X2) => W.setValue(X2));
      return K.element = O2, K;
    });
  }
}
var $W = new u0;

class l2 {
  q;
  w;
  #K = 0;
  #O;
  constructor(K = 0, O2, W = $W) {
    this.onChange = O2, this.pool = W, this.#K = K;
  }
  valueOf() {
    return this.#K;
  }
  setValue(K) {
    if (K !== this.#K)
      this.#K = K, this.onChange?.(this.#K);
    return this;
  }
  addValue(K) {
    return this.setValue(this.#K + K), this;
  }
  update(K) {
    if (this.#O) {
      const O2 = !!this.#O.update(K);
      if (!O2)
        this.pool.recycle(this.#O), this.#O = undefined;
      return O2;
    }
    return false;
  }
  refresh({ deltaTime: K, stopUpdate: O2 }) {
    if (!this.update(K))
      O2();
  }
  progressTowards(K, O2, W, X2) {
    if (!this.#O)
      this.#O = this.pool.create(this);
    if (this.#O.setGoal(K, O2, W), X2)
      X2.loop(this, undefined);
  }
  get goal() {
    return this.#O?.goal ?? this.valueOf();
  }
}
var o0 = function(K, O2) {
  const W = f2.create(), X2 = new Set;
  if (O2)
    X2.add({ onChange: O2 });
  const Y = { angle: new l2(0, ($32) => {
    K(W, $32);
    for (let B3 of X2)
      B3.onChange(Y);
  }), getMatrix() {
    return W.getMatrix();
  }, addChangeListener($32) {
    return X2.add($32), this;
  }, removeChangeListener($32) {
    X2.delete($32);
  } };
  return Y;
};
function BW(K) {
  return o0((O2, W) => O2.setYRotation(W), K);
}
function QW(K) {
  return o0((O2, W) => O2.setXRotation(W), K);
}
var w;
(function(X2) {
  X2[X2["AT_POSITION"] = 0] = "AT_POSITION";
  X2[X2["MOVED"] = 1] = "MOVED";
  X2[X2["BLOCKED"] = 2] = "BLOCKED";
})(w || (w = {}));
var $0 = function(K, O2) {
  if (K) {
    const W = K.length.valueOf();
    for (let X2 = 0;X2 < W; X2++) {
      const Y = K.at(X2);
      if (Y !== undefined && O2(Y, X2))
        return true;
    }
  }
  return false;
};
function t(K, O2, W, X2) {
  return X2[0] = K, X2[1] = O2, X2[2] = W, X2;
}
function B0(K, O2) {
  const W = K.getMatrix();
  O2[0] = W[12], O2[1] = W[13], O2[2] = W[14];
}

class t0 {
  #K = f2.create();
  #O = [0, 0, 0];
  #W = new n2(this);
  position = [0, 0, 0];
  blockers;
  constructor({ blockers: K } = {}) {
    this.blockers = K, this.#K.addChangeListener({ onChange: () => {
      B0(this.#K, this.position), this.#W.onChange();
    } });
  }
  addChangeListener(K) {
    return this.#W.addChangeListener(K), this;
  }
  removeChangeListener(K) {
    this.#W.removeChangeListener(K);
  }
  moveBy(K, O2, W, X2) {
    const Y = f2.getMoveVector(K, O2, W, X2), $32 = $0(this.blockers, (B3) => B3.isBlocked(t(this.position[0] + Y[0], this.position[1] + Y[1], this.position[2] + Y[2], this.#O), this.position));
    if (!$32)
      if (Y[0] || Y[1] || Y[2])
        this.#K.move(Y);
      else
        return w.AT_POSITION;
    return $32 ? w.BLOCKED : w.MOVED;
  }
  moveTo(K, O2, W) {
    if (this.position[0] === K && this.position[1] === O2 && this.position[2] === W)
      return w.AT_POSITION;
    const X2 = $0(this.blockers, (Y) => Y.isBlocked(t(K, O2, W, this.#O), this.position));
    if (!X2) {
      const [Y, $32, B3] = this.#K.getPosition();
      if (Y !== K || $32 !== O2 || B3 !== W)
        this.#K.setPosition(K, O2, W);
    }
    return X2 ? w.BLOCKED : w.MOVED;
  }
  movedTo(K, O2, W) {
    return this.moveTo(K, O2, W), this;
  }
  moveTowards(K, O2, W, X2 = 0.1) {
    const Y = this.position, $32 = K - Y[0], B3 = O2 - Y[1], Q3 = W - Y[2], Z2 = Math.sqrt($32 * $32 + B3 * B3 + Q3 * Q3);
    if (Z2 > 0.01) {
      const H2 = Math.min(Z2, X2) / Z2;
      return this.moveBy($32 * H2, B3 * H2, Q3 * H2);
    } else
      return this.moveTo(K, O2, W);
  }
  attemptMoveTowards(K, O2, W, X2 = 0.1) {
    let Y = this.moveTowards(K, O2, W, X2);
    if (Y === w.BLOCKED && K !== this.position[0])
      Y = this.moveTowards(K, this.position[1], this.position[2], X2);
    if (Y === w.BLOCKED && O2 !== this.position[1])
      Y = this.moveTowards(this.position[0], O2, this.position[2], X2);
    if (Y === w.BLOCKED && W)
      Y = this.moveTowards(this.position[0], this.position[1], W, X2);
    return Y;
  }
  getMatrix() {
    return this.#K.getMatrix();
  }
}
var ZW = 1;
var HW = 1;

class a0 {
  #K = f2.create();
  #O = f2.create();
  #W = f2.create();
  #X = [0, 0];
  #Y = new n2(this);
  perspective;
  zoom;
  constructor() {
    const K = { onChange: () => {
      this.#K.combine(this.#W, this.#O, this.perspective.valueOf());
    } };
    this.perspective = new l2(ZW, K.onChange), this.zoom = new l2(HW, (O2) => this.configure(this.#X, O2)), this.#O.addChangeListener(K), this.#W.addChangeListener(K), this.#K.addChangeListener(this.#Y);
  }
  addChangeListener(K) {
    return this.#Y.addChangeListener(K), this;
  }
  removeChangeListener(K) {
    this.#Y.removeChangeListener(K);
  }
  configPerspectiveMatrix(K, O2, W, X2) {
    this.#O.perspective(K, O2, W, X2);
  }
  configOrthoMatrix(K, O2, W, X2) {
    this.#W.ortho(-K / 2, K / 2, -O2 / 2, O2 / 2, W, X2);
  }
  configure(K, O2, W = 0.5, X2 = 1e4) {
    if (!O2)
      O2 = this.zoom.valueOf();
    this.#X[0] = K[0], this.#X[1] = K[1];
    const Y = this.#X[0] / this.#X[1], $32 = 45 / Math.sqrt(O2);
    this.configPerspectiveMatrix($32, Y, Math.max(W, 0.00001), X2), this.configOrthoMatrix(Y / O2 / O2, 1 / O2 / O2, -X2, X2);
  }
  getMatrix() {
    return this.#K.getMatrix();
  }
}

class KK extends f2 {
  #K;
  #O = { onChange: (K) => {
    this.invert(K);
  } };
  constructor(K, O2 = true) {
    super();
    if (this.#K = K, O2)
      this.activate();
  }
  activate() {
    this.#K.addChangeListener(this.#O);
  }
  deactivate() {
    this.#K.removeChangeListener(this.#O);
  }
}
var VERTICES_PER_SPRITE = 6;
var TEX_BUFFER_ELEMS = 4;
var EMPTY_TEX = new Float32Array(TEX_BUFFER_ELEMS).fill(0);
var CLEARBIT = GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT;

class GraphicsEngine extends Disposable {
  gl;
  priority = Priority.LAST;
  programs;
  attributeBuffers;
  animationSlots = new Map;
  pixelListener;
  maxSpriteCount = 0;
  textureUpdateHandler;
  tempBuffer = new Float32Array(4).fill(0);
  visibleSprites = [];
  constructor(gl2) {
    super();
    this.gl = gl2;
    this.programs = this.own(new GLPrograms(gl2));
    const textureManager = new l({ gl: gl2 });
    this.textureUpdateHandler = new TextureUpdateHandler({
      imageManager: new v,
      textureManager
    });
    this.addOnDestroy(() => textureManager.dispose());
    const PROGRAM_NAME = "main";
    const replacementMap = {
      AUTHOR: "Jack le hamster"
    };
    this.programs.addProgram(PROGRAM_NAME, replaceTilda(vertexShader_default, replacementMap), replaceTilda(fragmentShader_default, replacementMap));
    this.attributeBuffers = this.own(new GLAttributeBuffers(gl2, this.programs));
    this.initialize(PROGRAM_NAME);
    TextureUniformInitializer.initialize({ gl: gl2, program: this.programs.getProgram() });
  }
  resetViewportSize() {
    this.gl.viewport(0, 0, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);
  }
  initialize(programName) {
    this.programs.useProgram(programName);
    this.gl.enable(GL.DEPTH_TEST);
    this.gl.depthFunc(GL.LESS);
    this.gl.clearDepth(1);
    this.gl.enable(GL.BLEND);
    this.gl.blendFunc(GL.SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA);
    this.gl.viewport(0, 0, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);
    this.gl.enable(GL.CULL_FACE);
    this.gl.cullFace(GL.BACK);
    this.gl.clearColor(0, 0, 0, 1);
  }
  deactivate() {
    this.animationSlots.clear();
    this.visibleSprites.length = 0;
    this.#redraw();
  }
  setMaxSpriteCount(count) {
    if (count > this.maxSpriteCount) {
      this.maxSpriteCount = 1 << Math.ceil(Math.log2(count));
      this.ensureBuffers(this.maxSpriteCount);
    }
  }
  setBgColor(rgb) {
    this.gl.clearColor(rgb[0], rgb[1], rgb[2], 1);
    this.gl.clear(this.gl.COLOR_BUFFER_BIT);
  }
  ensureBuffers(instanceCount) {
    if (instanceCount >= 1e5) {
      console.warn("Sprite count has already reached:", instanceCount);
    }
    if (!this.attributeBuffers.hasBuffer(INDEX_LOC)) {
      this.attributeBuffers.createBuffer({
        location: INDEX_LOC,
        target: GL.ELEMENT_ARRAY_BUFFER,
        usage: GL.STATIC_DRAW,
        vertexAttribPointerRows: 0,
        data: Uint16Array.from([0, 1, 2, 2, 3, 0])
      });
    }
    if (!this.attributeBuffers.hasBuffer(POSITION_LOC)) {
      this.attributeBuffers.createBuffer({
        location: POSITION_LOC,
        target: GL.ARRAY_BUFFER,
        usage: GL.STATIC_DRAW,
        vertexAttribPointerRows: 1,
        elemCount: 2,
        data: Float32Array.from([-1, -1, 1, -1, 1, 1, -1, 1])
      });
    }
    if (!this.attributeBuffers.hasBuffer(TRANSFORM_LOC)) {
      this.attributeBuffers.createBuffer({
        location: TRANSFORM_LOC,
        target: GL.ARRAY_BUFFER,
        usage: GL.DYNAMIC_DRAW,
        vertexAttribPointerRows: 4,
        elemCount: 4,
        divisor: 1,
        instanceCount
      });
    } else {
      this.attributeBuffers.ensureSize(TRANSFORM_LOC, instanceCount);
    }
    if (!this.attributeBuffers.hasBuffer(SLOT_SIZE_LOC)) {
      this.attributeBuffers.createBuffer({
        location: SLOT_SIZE_LOC,
        target: GL.ARRAY_BUFFER,
        usage: GL.DYNAMIC_DRAW,
        vertexAttribPointerRows: 1,
        elemCount: TEX_BUFFER_ELEMS,
        divisor: 1,
        instanceCount
      });
    } else {
      this.attributeBuffers.ensureSize(SLOT_SIZE_LOC, instanceCount);
    }
    if (!this.attributeBuffers.hasBuffer(ANIM_LOC)) {
      this.attributeBuffers.createBuffer({
        location: ANIM_LOC,
        target: GL.ARRAY_BUFFER,
        usage: GL.DYNAMIC_DRAW,
        vertexAttribPointerRows: 1,
        elemCount: 4,
        divisor: 1,
        instanceCount
      });
    } else {
      this.attributeBuffers.ensureSize(ANIM_LOC, instanceCount);
    }
    if (!this.attributeBuffers.hasBuffer(INSTANCE_LOC)) {
      this.attributeBuffers.createBuffer({
        location: INSTANCE_LOC,
        target: GL.ARRAY_BUFFER,
        usage: GL.STATIC_DRAW,
        vertexAttribPointerRows: 1,
        elemCount: 1,
        divisor: 1,
        instanceCount,
        callback: (index) => index
      });
    } else {
      this.attributeBuffers.ensureSize(INSTANCE_LOC, instanceCount);
    }
    if (!this.attributeBuffers.hasBuffer(SPRITE_TYPE_LOC)) {
      this.attributeBuffers.createBuffer({
        location: SPRITE_TYPE_LOC,
        target: GL.ARRAY_BUFFER,
        usage: GL.STATIC_DRAW,
        vertexAttribPointerRows: 1,
        elemCount: 1,
        divisor: 1,
        instanceCount
      });
    } else {
      this.attributeBuffers.ensureSize(SPRITE_TYPE_LOC, instanceCount);
    }
    return this.attributeBuffers;
  }
  async updateTextures(ids, medias) {
    return this.textureUpdateHandler.updateTextures(ids, medias);
  }
  updateSpriteTransforms(spriteIds, sprites) {
    const attributeBuffers = this.attributeBuffers;
    attributeBuffers.bindBuffer(TRANSFORM_LOC);
    spriteIds.forEach((spriteId) => {
      const sprite = sprites.at(spriteId);
      const visible = !!(sprite && !sprite?.hidden);
      this.gl.bufferSubData(GL.ARRAY_BUFFER, 4 * 4 * Float32Array.BYTES_PER_ELEMENT * spriteId, (!visible ? f2.HIDDEN : sprite.transform).getMatrix());
      this.visibleSprites[spriteId] = visible;
    });
    spriteIds.clear();
    while (this.visibleSprites.length && !this.visibleSprites[this.visibleSprites.length - 1]) {
      this.visibleSprites.length--;
    }
  }
  updateSpriteTexSlots(spriteIds, sprites) {
    const attributeBuffers = this.attributeBuffers;
    attributeBuffers.bindBuffer(SLOT_SIZE_LOC);
    spriteIds.forEach((spriteId) => {
      const sprite = sprites.at(spriteId);
      if (!sprite) {
        spriteIds.delete(spriteId);
        return;
      }
      const slotBuffer = this.textureUpdateHandler.getSlotBuffer(sprite.imageId);
      let buffer = slotBuffer ?? EMPTY_TEX;
      if ((sprite.orientation ?? 1) < 0) {
        this.tempBuffer[0] = buffer[0];
        this.tempBuffer[1] = buffer[1];
        this.tempBuffer[2] = -buffer[2];
        this.tempBuffer[3] = buffer[3];
        buffer = this.tempBuffer;
      }
      this.gl.bufferSubData(GL.ARRAY_BUFFER, TEX_BUFFER_ELEMS * Float32Array.BYTES_PER_ELEMENT * spriteId, buffer);
      const spriteWaitingForTexture = sprite && !slotBuffer;
      if (!spriteWaitingForTexture) {
        spriteIds.delete(spriteId);
      }
    });
  }
  updateSpriteTypes(spriteIds, sprites) {
    const attributeBuffers = this.attributeBuffers;
    attributeBuffers.bindBuffer(SPRITE_TYPE_LOC);
    spriteIds.forEach((spriteId) => {
      const sprite = sprites.at(spriteId);
      if (!sprite) {
        return;
      }
      const type = sprite.spriteType ?? 0;
      this.tempBuffer[0] = type;
      this.gl.bufferSubData(GL.ARRAY_BUFFER, 1 * Float32Array.BYTES_PER_ELEMENT * spriteId, this.tempBuffer, 0, 1);
    });
    spriteIds.clear();
  }
  updateSpriteAnimations(spriteIds, sprites) {
    const attributeBuffers = this.attributeBuffers;
    attributeBuffers.bindBuffer(ANIM_LOC);
    spriteIds.forEach((spriteId) => {
      const sprite = sprites.at(spriteId);
      if (sprite?.animationId === undefined) {
        return;
      }
      const animation = this.animationSlots.get(sprite.animationId);
      this.tempBuffer[0] = animation?.frames?.[0] ?? 0;
      this.tempBuffer[1] = animation?.frames?.[1] ?? this.tempBuffer[0];
      this.tempBuffer[2] = animation?.fps ?? 0;
      this.tempBuffer[3] = animation?.maxFrameCount ?? Number.MAX_SAFE_INTEGER;
      this.gl.bufferSubData(GL.ARRAY_BUFFER, 4 * Float32Array.BYTES_PER_ELEMENT * spriteId, this.tempBuffer);
    });
    spriteIds.clear();
  }
  updateAnimationDefinitions(ids, animations) {
    for (let id2 of ids) {
      const animation = animations.at(id2.valueOf());
      if (animation !== undefined) {
        this.animationSlots.set(animation.id, animation);
      }
    }
    ids.clear();
  }
  setPixelListener(listener) {
    this.pixelListener = listener;
  }
  _pixel = new Uint8Array(4);
  getPixel(x32, y) {
    this.gl.readPixels(x32, y, 1, 1, this.gl.RGBA, this.gl.UNSIGNED_BYTE, this._pixel);
    const [r2, g2, b2, _a] = this._pixel;
    return r2 * (256 * 256) + g2 * 256 + b2;
  }
  refresh(updatePayload) {
    if (updatePayload.renderFrame) {
      this.#redraw();
    }
  }
  createMatrixUniformHandler(name, matrix) {
    return new MatrixUniformHandler({
      gl: this.gl,
      program: this.programs.getProgram(this.programs.activeProgramId)
    }, { name }, matrix);
  }
  createFloatUniformHandler(name, val) {
    return new FloatUniformHandler({
      gl: this.gl,
      program: this.programs.getProgram(this.programs.activeProgramId)
    }, { name }, val);
  }
  createVectorUniformHandler(name, vector) {
    return new VectorUniformHandler({
      gl: this.gl,
      program: this.programs.getProgram(this.programs.activeProgramId)
    }, { name }, vector);
  }
  #redraw() {
    this.gl.clear(CLEARBIT);
    if (this.visibleSprites.length) {
      this.#drawElementsInstanced(VERTICES_PER_SPRITE, this.visibleSprites.length);
      this.pixelListener?.setPixel(this.getPixel(this.pixelListener.x, this.pixelListener.y));
    }
  }
  #drawElementsInstanced(vertexCount, instances) {
    this.gl.drawElementsInstanced(GL.TRIANGLES, vertexCount, GL.UNSIGNED_SHORT, 0, instances);
  }
}

class y {
  q;
  w;
  #F;
  #q = false;
  #x = 0;
  #w;
  #y;
  constructor(F, q, w2) {
    this.getValue = q;
    this.apply = w2;
    this.#w = F, this.#F = this.getValue(F);
  }
  set element(F) {
    this.#w = F, this.#F = this.getValue(F), this.#y = undefined;
  }
  setGoal(F, q, w2) {
    if (this.#y && this.#y !== w2)
      return;
    if (this.#F !== F || this.#x !== q)
      this.#x = q, this.#F = F, this.#y = w2, this.#q = true;
  }
  get goal() {
    return this.#F;
  }
  update(F) {
    if (this.#q) {
      const q = this.getValue(this.#w), w2 = this.goal - q, x32 = Math.min(Math.abs(w2), this.#x * F);
      if (x32 <= 0.01)
        this.apply(this.#w, this.goal), this.#q = false, this.#y?.onRelease?.(), this.#y = undefined;
      else
        this.apply(this.#w, q + x32 * Math.sign(w2));
    }
    return this.#q;
  }
}

class z2 {
  i;
  f;
  warningLimit = 50000;
  #F = new Set;
  #q = [];
  constructor(F, q) {
    this.initCall = F, this.onRecycle = q;
  }
  create(...F) {
    const q = this.#q.pop();
    if (q)
      return this.#F.add(q), this.initCall(q, ...F);
    const w2 = this.initCall(undefined, ...F);
    return this.#F.add(w2), this.#w(), w2;
  }
  recycle(F) {
    this.#F.delete(F), this.#x(F);
  }
  recycleAll() {
    for (let F of this.#F)
      this.#x(F);
    this.#F.clear();
  }
  clear() {
    this.#q.length = 0, this.#F.clear();
  }
  countObjectsInExistence() {
    return this.#F.size + this.#q.length;
  }
  #x(F) {
    this.#q.push(F), this.onRecycle?.(F);
  }
  #w() {
    if (this.countObjectsInExistence() === this.warningLimit)
      console.warn("ObjectPool already created", this.#F.size + this.#q.length, "in", this.constructor.name);
  }
}

class A3 extends z2 {
  constructor() {
    super((F, q) => {
      if (!F)
        return new y(q, (w2) => w2.valueOf(), (w2, x32) => w2.setValue(x32));
      return F.element = q, F;
    });
  }
}
var G = new A3;

class B3 {
  q;
  w;
  #F = 0;
  #q;
  constructor(F = 0, q, w2 = G) {
    this.onChange = q;
    this.pool = w2;
    this.#F = F;
  }
  valueOf() {
    return this.#F;
  }
  setValue(F) {
    if (F !== this.#F)
      this.#F = F, this.onChange?.(this.#F);
    return this;
  }
  addValue(F) {
    return this.setValue(this.#F + F), this;
  }
  update(F) {
    if (this.#q) {
      const q = !!this.#q.update(F);
      if (!q)
        this.pool.recycle(this.#q), this.#q = undefined;
      return q;
    }
    return false;
  }
  refresh({ deltaTime: F, stopUpdate: q }) {
    if (!this.update(F))
      q();
  }
  progressTowards(F, q, w2, x32) {
    if (!this.#q)
      this.#q = this.pool.create(this);
    if (this.#q.setGoal(F, q, w2), x32)
      x32.loop(this, undefined);
  }
  get goal() {
    return this.#q?.goal ?? this.valueOf();
  }
}

class p2 {
  i;
  f;
  warningLimit = 50000;
  #t = new Set;
  #e = [];
  constructor(t2, e22) {
    this.initCall = t2, this.onRecycle = e22;
  }
  create(...t2) {
    const e22 = this.#e.pop();
    if (e22)
      return this.#t.add(e22), this.initCall(e22, ...t2);
    const r2 = this.initCall(undefined, ...t2);
    return this.#t.add(r2), this.#o(), r2;
  }
  recycle(t2) {
    this.#t.delete(t2), this.#r(t2);
  }
  recycleAll() {
    for (let t2 of this.#t)
      this.#r(t2);
    this.#t.clear();
  }
  clear() {
    this.#e.length = 0, this.#t.clear();
  }
  countObjectsInExistence() {
    return this.#t.size + this.#e.length;
  }
  #r(t2) {
    this.#e.push(t2), this.onRecycle?.(t2);
  }
  #o() {
    if (this.countObjectsInExistence() === this.warningLimit)
      console.warn("ObjectPool already created", this.#t.size + this.#e.length, "in", this.constructor.name);
  }
}

class a2 {
  listeners = new Set;
  informUpdate(t2, e22) {
    this.listeners.forEach((r2) => r2.onUpdate(t2, e22));
  }
  addUpdateListener(t2) {
    this.listeners.add(t2);
  }
  removeUpdateListener(t2) {
    this.listeners.delete(t2);
  }
}
var i = function(t2, e22) {
  if (t2) {
    const r2 = t2.length.valueOf();
    for (let o2 = 0;o2 < r2; o2++)
      e22(t2.at(o2), o2);
  }
};

class d {
  t;
  e;
  r;
  o;
  #t = [];
  #e = new Set;
  constructor(t2, e22, r2, o2) {
    this.elems = t2;
    this.informUpdate = e22;
    this.addElem = r2;
    this.removeElem = o2;
    this.elems = t2, this.initialize(t2);
  }
  initialize(t2) {
    this.elems = t2, this.elems.addUpdateListener?.(this), i(t2, (e22, r2) => this.onUpdate(r2));
  }
  dispose() {
    this.#e.forEach((t2) => this.removeElem(t2)), this.elems.removeUpdateListener?.(this), this.elems = m2, this.#t.length = 0, this.#e.clear();
  }
  onUpdate(t2, e22) {
    const r2 = this.elems.at(t2);
    let o2 = this.#t[t2];
    if (o2 === undefined) {
      if (!r2)
        return;
      const s2 = this.addElem(this.elems, t2);
      this.#t[t2] = s2, this.#e.add(s2);
      return;
    } else if (!r2) {
      this.#e.delete(o2), this.removeElem(o2), this.#t[t2] = undefined;
      return;
    }
    this.informUpdate(o2, e22);
  }
}

class l3 extends p2 {
  constructor({ informUpdate: t2, addElem: e22, removeElem: r2 }) {
    super((o2, s2) => {
      if (o2)
        return o2.initialize(s2), o2;
      return new d(s2, t2, e22, r2);
    }, (o2) => {
      o2.dispose();
    });
  }
}

class n3 {
  #t = [];
  #e = [];
  length;
  constructor({ onChange: t2 } = {}) {
    this.length = { valueOf: () => this.#t.length, onChange: t2 ? (e22) => t2?.(e22) : undefined };
  }
  at(t2) {
    return this.#t.at(t2);
  }
  addElem(t2) {
    const e22 = this.#r();
    return this.#t[e22] = t2, e22;
  }
  removeElem(t2) {
    const e22 = this.#t.at(t2);
    if (e22 !== undefined)
      this.#t[t2] = undefined, this.#e.push(t2);
    return e22;
  }
  clear() {
    if (this.#t.length !== 0)
      this.#t.length = 0, this.#o();
    this.#e.length = 0;
  }
  #r() {
    let t2 = this.#e.pop();
    if (t2 === undefined)
      t2 = this.#t.length, this.#t.push(undefined), this.#o();
    return t2;
  }
  #o() {
    this.length.onChange?.(this.length.valueOf());
  }
}

class h3 extends a2 {
  #t;
  #e = new Map;
  #r = new T2;
  #o = new l3({ informUpdate: this.informUpdate.bind(this), addElem: this.#s.bind(this), removeElem: this.#i.bind(this) });
  constructor({ onChange: t2, elems: e22 } = {}) {
    super();
    this.#t = new n3({ onChange: t2 }), e22?.forEach((r2) => this.add(r2));
  }
  get length() {
    return this.#t.length;
  }
  at(t2) {
    const e22 = this.#t.at(t2);
    return e22?.elems.at(e22.index);
  }
  add(t2) {
    const e22 = this.#o.create(t2);
    this.#e.set(t2, e22);
  }
  remove(t2) {
    const e22 = this.#e.get(t2);
    if (e22)
      this.#e.delete(t2), this.#o.recycle(e22);
  }
  clear() {
    i(this.#t, (t2, e22) => {
      if (this.informUpdate(e22), t2)
        this.#r.recycle(t2);
    }), this.#t.clear();
  }
  updateFully(t2) {
    for (let [e22, r2] of this.#e)
      i(e22, (o2, s2) => r2.onUpdate(s2, t2));
  }
  #s(t2, e22) {
    const r2 = this.#t.addElem(this.#r.create(t2, e22));
    return this.informUpdate(r2), r2;
  }
  #i(t2) {
    const e22 = this.#t.removeElem(t2);
    if (e22)
      this.#r.recycle(e22), this.informUpdate(t2);
  }
}
var m2 = [];

class T2 extends p2 {
  constructor() {
    super((t2, e22, r2) => {
      if (!t2)
        return { elems: e22, index: r2 };
      return t2.elems = e22, t2.index = r2, t2;
    }, (t2) => {
      t2.elems = m2;
    });
  }
}

class U {
  i;
  f;
  warningLimit = 50000;
  #t = new Set;
  #e = [];
  constructor(t2, e22) {
    this.initCall = t2, this.onRecycle = e22;
  }
  create(...t2) {
    const e22 = this.#e.pop();
    if (e22)
      return this.#t.add(e22), this.initCall(e22, ...t2);
    const r2 = this.initCall(undefined, ...t2);
    return this.#t.add(r2), this.#o(), r2;
  }
  recycle(t2) {
    this.#t.delete(t2), this.#r(t2);
  }
  recycleAll() {
    for (let t2 of this.#t)
      this.#r(t2);
    this.#t.clear();
  }
  clear() {
    this.#e.length = 0, this.#t.clear();
  }
  countObjectsInExistence() {
    return this.#t.size + this.#e.length;
  }
  #r(t2) {
    this.#e.push(t2), this.onRecycle?.(t2);
  }
  #o() {
    if (this.countObjectsInExistence() === this.warningLimit)
      console.warn("ObjectPool already created", this.#t.size + this.#e.length, "in", this.constructor.name);
  }
}
var f3 = -1;
function y2(t2, e22 = f3) {
  i(t2, (r2, o2) => t2.informUpdate(o2, e22));
}

class UpdateRegistry extends a2 {
  applyUpdate;
  motor;
  updatedIds = new Set;
  constructor(applyUpdate, motor) {
    super();
    this.applyUpdate = applyUpdate;
    this.motor = motor;
  }
  informUpdate(id2, type) {
    super.informUpdate(id2, type);
    if (!this.updatedIds.has(id2)) {
      this.updatedIds.add(id2);
    }
    this.motor.scheduleUpdate(this);
  }
  refresh(update) {
    this.applyUpdate(this.updatedIds, update);
    if (this.updatedIds.size) {
      this.motor.scheduleUpdate(this, undefined, undefined, true);
    }
  }
}

class Camera {
  position;
  projection;
  tilt = QW(() => this.#updateInformer.informUpdate(3));
  turn = BW(() => this.#updateInformer.informUpdate(2));
  curvature = new B3(0.05, () => this.#updateInformerFloat.informUpdate(1));
  distance = new B3(0.5, () => this.#updateInformerFloat.informUpdate(2));
  blur = new B3(1, () => this.#updateInformerFloat.informUpdate(3));
  fadeOut;
  #camMatrix;
  #bgColor = [0, 0, 0];
  #viewportSize = [0, 0];
  #updateInformer;
  #updateInformerFloat;
  #updateInformerVector;
  #engine;
  #positionChangeListener = {
    onChange: () => this.#updateInformer.informUpdate(1)
  };
  #projectionChangeListener = {
    onChange: () => this.#updateInformer.informUpdate(0)
  };
  #fade = new B3(0, () => this.#updateInformerFloat.informUpdate(4));
  constructor({ engine, motor, position = new t0, projection = new a0, config = {} }) {
    this.#engine = engine;
    this.position = position;
    this.projection = projection;
    this.#camMatrix = new KK(this.position);
    const matrixUniformUpdaters = {
      [0]: engine.createMatrixUniformHandler(CAM_PROJECTION_LOC, this.projection),
      [1]: engine.createMatrixUniformHandler(CAM_POS_LOC, this.#camMatrix),
      [2]: engine.createMatrixUniformHandler(CAM_TURN_LOC, this.turn),
      [3]: engine.createMatrixUniformHandler(CAM_TILT_LOC, this.tilt)
    };
    this.#updateInformer = new UpdateRegistry((ids) => {
      ids.forEach((type) => matrixUniformUpdaters[type].update());
      ids.clear();
    }, motor);
    const vectorUniformUpdaters = {
      [0]: engine.createVectorUniformHandler(BG_COLOR_LOC, this.#bgColor)
    };
    this.#updateInformerVector = new UpdateRegistry((ids) => {
      ids.forEach((type) => vectorUniformUpdaters[type].update());
      ids.clear();
    }, motor);
    const valUniformUpdaters = {
      [3]: engine.createFloatUniformHandler(BG_BLUR_LOC, this.blur),
      [2]: engine.createFloatUniformHandler(CAM_DISTANCE_LOC, this.distance),
      [1]: engine.createFloatUniformHandler(CAM_CURVATURE_LOC, this.curvature),
      [0]: undefined,
      [4]: engine.createFloatUniformHandler(FADE_LOC, this.#fade)
    };
    this.#updateInformerFloat = new UpdateRegistry((ids) => {
      ids.forEach((type) => {
        valUniformUpdaters[type]?.update();
      });
      ids.clear();
    }, motor);
    this.fadeOut = () => new Promise((resolve) => {
      this.#fade.progressTowards(1, 0.005, {
        onRelease: resolve
      }, motor);
    });
    if (config.distance) {
      this.distance.setValue(config.distance);
    }
    if (config.tilt) {
      this.tilt.angle.setValue(config.tilt);
    }
    if (config.zoom) {
      this.projection.zoom.setValue(config.zoom);
    }
    if (config.perspective) {
      this.projection.perspective.setValue(config.perspective);
    }
    if (config.backgroundColor) {
      this.setBackgroundColor(config.backgroundColor);
    }
  }
  activate() {
    this.#updateInformer.informUpdate(0);
    this.#updateInformer.informUpdate(1);
    this.#updateInformer.informUpdate(2);
    this.#updateInformer.informUpdate(3);
    this.#updateInformerFloat.informUpdate(1);
    this.#updateInformerFloat.informUpdate(2);
    this.#updateInformerFloat.informUpdate(3);
    this.#updateInformerVector.informUpdate(0);
    this.position.addChangeListener(this.#positionChangeListener);
    this.projection.addChangeListener(this.#projectionChangeListener);
    this.#camMatrix.activate();
  }
  deactivate() {
    this.#camMatrix.deactivate();
    this.projection.removeChangeListener(this.#projectionChangeListener);
    this.position.removeChangeListener(this.#positionChangeListener);
  }
  resizeViewport(width, height) {
    if (this.#viewportSize[0] !== width || this.#viewportSize[1] !== height) {
      this.#viewportSize[0] = width;
      this.#viewportSize[1] = height;
      this.projection.configure(this.#viewportSize);
    }
  }
  setBackgroundColor(rgb) {
    const red = rgb >> 16 & 255;
    const green = rgb >> 8 & 255;
    const blue = rgb & 255;
    this.#bgColor[0] = red / 255;
    this.#bgColor[1] = green / 255;
    this.#bgColor[2] = blue / 255;
    this.#updateInformerVector.informUpdate(0);
    this.#engine.setBgColor(this.#bgColor);
  }
}

class Auxiliaries {
  auxiliaries;
  #active = false;
  constructor(auxiliaries = []) {
    this.auxiliaries = auxiliaries;
  }
  static from(...aux) {
    return new Auxiliaries(aux);
  }
  get length() {
    return this.auxiliaries.length;
  }
  at(index) {
    return this.auxiliaries.at(index);
  }
  activate() {
    if (this.#active) {
      return;
    }
    this.#active = true;
    A2(this.auxiliaries, (aux) => aux?.activate?.());
  }
  deactivate() {
    if (!this.#active) {
      return;
    }
    this.#active = false;
    A2(this.auxiliaries, (aux) => aux?.deactivate?.());
  }
  addAuxiliary(aux) {
    this.auxiliaries.push(aux);
    if (this.#active) {
      aux.activate?.();
    }
    return this;
  }
  removeAuxiliary(aux) {
    let j = 0;
    for (let i2 = 0;i2 < this.auxiliaries.length; i2++) {
      const a3 = this.auxiliaries[i2];
      if (a3 !== aux) {
        this.auxiliaries[j] = a3;
        j++;
      } else {
        a3.deactivate?.();
      }
    }
    this.auxiliaries.length = j;
  }
}

class ControlledLooper extends Looper {
  controls;
  triggerred;
  #listener;
  constructor(motor, controls, triggerred, data, cycle) {
    super({ motor, data, cycle }, { autoStart: false });
    this.controls = controls;
    this.triggerred = triggerred;
    this.#listener = this;
  }
  onAction(controls) {
    if (this.triggerred(controls)) {
      this.start();
    }
  }
  activate() {
    super.activate();
    this.controls.addListener(this.#listener);
  }
  deactivate() {
    this.controls.removeListener(this.#listener);
    super.deactivate();
  }
}

class TurnAuxiliary extends ControlledLooper {
  constructor({ controls, turn, motor }) {
    super(motor, controls, ({ turnLeft, turnRight }) => turnLeft || turnRight, { controls, turn });
  }
  refresh({ data: { controls, turn }, deltaTime, stopUpdate }) {
    const { turnLeft, turnRight } = controls;
    const turnspeed = deltaTime / 400;
    if (turnLeft) {
      turn.angle.addValue(-turnspeed);
    }
    if (turnRight) {
      turn.angle.addValue(turnspeed);
    }
    if (!turnLeft && !turnRight) {
      stopUpdate();
    }
  }
}

class PositionStepAuxiliary extends ControlledLooper {
  constructor({ controls, positionStep, turnGoal, motor }, config = {}) {
    super(motor, controls, ({ backward, forward, left, right }) => backward || forward || left || right, { controls, positionStep, turnGoal, step: config.step ?? 2, speed: config.speed ?? 1, airBoost: config?.airBoost ?? 1 });
  }
  refresh({ deltaTime, data, stopUpdate }) {
    const { backward, forward, left, right } = data.controls;
    const { step, airBoost, positionStep } = data;
    let dx = 0, dz = 0;
    if (forward) {
      dz--;
    }
    if (backward) {
      dz++;
    }
    if (left) {
      dx--;
    }
    if (right) {
      dx++;
    }
    const turnGoal = data.turnGoal?.goal ?? 0;
    let speed = (dx || dz ? deltaTime / 150 : deltaTime / 100) * data.speed;
    if (data.positionStep.position[1] > 0) {
      speed *= airBoost;
    }
    const cos = Math.cos(turnGoal);
    const sin = Math.sin(turnGoal);
    const relativeDx = dx * cos - dz * sin;
    const relativeDz = dx * sin + dz * cos;
    const moveResult = positionStep.cellMoveBy(relativeDx, 0, relativeDz, step, speed);
    if (moveResult === w.AT_POSITION) {
      stopUpdate();
    }
  }
}

class TiltResetAuxiliary {
  controls;
  listener;
  constructor({ controls, tilt, motor }) {
    this.listener = {
      onQuickTiltReset: () => {
        tilt.angle.progressTowards(0, 1 / 300, this, motor);
      }
    };
    this.controls = controls;
  }
  activate() {
    this.controls.addListener(this.listener);
  }
  deactivate() {
    this.controls.removeListener(this.listener);
  }
}

class ToggleAuxiliary {
  #active = false;
  #toggleIndex;
  #auxiliary = {};
  #keyboard;
  #keys;
  #auxiliaryFactories;
  #keyListener;
  constructor({ keyboard }, config) {
    this.#keyboard = keyboard;
    this.#keys = B2(config.auxiliariesMap, (keyMap) => keyMap?.key);
    this.#keyListener = {
      onKeyDown: (keyCode) => {
        if (this.#keys.indexOf(keyCode) >= 0) {
          const wasActive = this.#active;
          this.#auxiliary.deactivate?.();
          this.toggle(keyCode);
          this.#auxiliary = this.#auxiliaryFactories.at(this.#toggleIndex)?.() ?? {};
          if (wasActive) {
            this.#auxiliary.activate?.();
          }
        }
      }
    };
    this.#auxiliaryFactories = B2(config.auxiliariesMap, (keyMap) => keyMap?.aux);
    this.#toggleIndex = config.initialIndex ?? 0;
  }
  toggle(key) {
    if (this.#keys[this.#toggleIndex] !== key) {
      this.#toggleIndex = this.#keys.indexOf(key);
    } else {
      const nextIndex = this.#keys.length ? (this.#toggleIndex + 1) % this.#keys.length : 0;
      if (this.#keys[nextIndex] === key) {
        this.#toggleIndex = nextIndex;
      }
    }
  }
  activate() {
    if (!this.#active) {
      this.#active = true;
      this.#keyboard.addListener(this.#keyListener);
      this.#auxiliary = this.#auxiliaryFactories.at(this.#toggleIndex)?.() ?? {};
      this.#auxiliary.activate?.();
    }
  }
  deactivate() {
    if (this.#active) {
      this.#active = false;
      this.#keyboard.removeListener(this.#keyListener);
      this.#auxiliary.deactivate?.();
    }
  }
}

class ItemsGroup extends a2 {
  elems;
  constructor(elems) {
    super();
    this.elems = elems;
  }
  informUpdate(id2, type) {
    super.informUpdate(id2, type);
    this.elems.informUpdate?.(id2, type);
  }
  get length() {
    return this.elems.length;
  }
  at(index) {
    return this.elems.at(index);
  }
}
var EMPTY_SPRITE = {
  imageId: 0,
  transform: new f2
};

class SpriteModel {
  sprite = EMPTY_SPRITE;
  animationId = 0;
  orientation = 1;
  imageId = 0;
  transform = f2.create();
  get spriteType() {
    return this.sprite.spriteType;
  }
  get hidden() {
    return this.sprite.hidden;
  }
}

class SpriteGroup extends ItemsGroup {
  #orientation = 1;
  #animationId;
  #imageId;
  #transform;
  #spriteModel = new SpriteModel;
  constructor(sprites, transform) {
    super(sprites);
    this.#transform = transform;
    this.#transform?.addChangeListener({ onChange: () => y2(this, 1) });
  }
  setOrientation(value) {
    if (this.#orientation !== value) {
      this.#orientation = value;
      A2(this.elems, (_2, index) => this.informUpdate(index, 2));
    }
  }
  setAnimationId(value) {
    if (this.#animationId !== value) {
      this.#animationId = value;
      A2(this.elems, (_2, index) => this.informUpdate(index, 8));
    }
  }
  setImageId(value) {
    if (this.#imageId !== value) {
      this.#imageId = value;
      A2(this.elems, (_2, index) => this.informUpdate(index, 2));
    }
  }
  at(index) {
    const s2 = super.at(index);
    if (!s2) {
      return;
    }
    this.#spriteModel.sprite = s2;
    this.#spriteModel.transform.copy(s2.transform);
    if (this.#transform) {
      this.#spriteModel.transform.multiply2(this.#transform, this.#spriteModel.transform);
    }
    this.#spriteModel.orientation = this.#orientation * (s2.orientation ?? 1);
    this.#spriteModel.animationId = this.#animationId ?? s2.animationId ?? 0;
    this.#spriteModel.imageId = this.#imageId ?? s2.imageId;
    return this.#spriteModel;
  }
}
var A4 = function(F, n4) {
  const g2 = F[0] - n4[0], k = F[1] - n4[1], w2 = F[2] - n4[2];
  return g2 * g2 + k * k + w2 * w2;
};
function G2(F, n4, g2 = 0) {
  return A4(F, n4) <= g2 * g2;
}

class m3 {
  i;
  f;
  warningLimit = 50000;
  #F = new Set;
  #n = [];
  constructor(F, n4) {
    this.initCall = F, this.onRecycle = n4;
  }
  create(...F) {
    const n4 = this.#n.pop();
    if (n4)
      return this.#F.add(n4), this.initCall(n4, ...F);
    const g2 = this.initCall(undefined, ...F);
    return this.#F.add(g2), this.#k(), g2;
  }
  recycle(F) {
    this.#F.delete(F), this.#g(F);
  }
  recycleAll() {
    for (let F of this.#F)
      this.#g(F);
    this.#F.clear();
  }
  clear() {
    this.#n.length = 0, this.#F.clear();
  }
  countObjectsInExistence() {
    return this.#F.size + this.#n.length;
  }
  #g(F) {
    this.#n.push(F), this.onRecycle?.(F);
  }
  #k() {
    if (this.countObjectsInExistence() === this.warningLimit)
      console.warn("ObjectPool already created", this.#F.size + this.#n.length, "in", this.constructor.name);
  }
}
var H2 = -1;

class SpriteUpdater extends a2 {
  #sprites;
  #updateRegisteries;
  constructor({ engine, motor, sprites }) {
    super();
    this.#sprites = sprites;
    this.#updateRegisteries = {
      [1]: new UpdateRegistry((ids) => engine.updateSpriteTransforms(ids, this.#sprites), motor),
      [2]: new UpdateRegistry((ids) => engine.updateSpriteTexSlots(ids, this.#sprites), motor),
      [4]: new UpdateRegistry((ids) => engine.updateSpriteTypes(ids, this.#sprites), motor),
      [8]: new UpdateRegistry((ids) => engine.updateSpriteAnimations(ids, this.#sprites), motor)
    };
  }
  onUpdate(id2, type) {
    this.informUpdate(id2, type);
  }
  activate() {
    this.#sprites.addUpdateListener?.(this);
  }
  deactivate() {
    this.#sprites.removeUpdateListener?.(this);
  }
  informUpdate(id2, type = H2) {
    super.informUpdate(id2, type);
    if (type & 1) {
      this.#updateRegisteries[1].informUpdate(id2);
    }
    if (type & 2) {
      this.#updateRegisteries[2].informUpdate(id2);
    }
    if (type & 4) {
      this.#updateRegisteries[4].informUpdate(id2);
    }
    if (type & 8) {
      this.#updateRegisteries[8].informUpdate(id2);
    }
  }
}

class MoveAuxiliary extends ControlledLooper {
  constructor({ controls, direction, motor, position }, config) {
    super(motor, controls, ({ forward, backward, left, right }) => forward || backward || left || right, { controls, direction, position, speed: config?.speed ?? 1 });
  }
  refresh({ data, deltaTime, stopUpdate }) {
    const { forward, backward, left, right } = data.controls;
    const speed = deltaTime / 80 * data.speed;
    let dx = 0, dz = 0;
    if (forward) {
      dz -= speed;
    }
    if (backward) {
      dz += speed;
    }
    if (left) {
      dx -= speed;
    }
    if (right) {
      dx += speed;
    }
    data.position.moveBy(dx, 0, dz, data.direction);
    if (!forward && !backward && !left && !right) {
      stopUpdate();
    }
  }
}

class JumpAuxiliary extends ControlledLooper {
  dy;
  constructor({ controls, position, motor }, config) {
    super(motor, controls, (controls2) => controls2.action, {
      controls,
      position,
      gravity: config?.gravity ?? -1,
      jump: config?.jump ?? 2,
      plane: config?.plane ?? 5
    });
    this.dy = 0;
  }
  refresh({ deltaTime, data, stopUpdate }) {
    if (!this.jump(deltaTime, data)) {
      stopUpdate();
    }
  }
  jump(deltaTime, data) {
    const speed = deltaTime / 80;
    const acceleration = deltaTime / 80;
    const { action } = data.controls;
    const onGround = data.position.position[1] <= 0;
    const movingDown = !onGround && data.position.moveBy(0, speed * this.dy, 0);
    if (onGround || !movingDown) {
      if (action) {
        this.dy = data.jump;
        data.position.moveBy(0, speed * this.dy, 0);
        return true;
      }
      this.dy = 0;
    }
    if (!onGround) {
      const mul = this.dy < 0 ? 1 / data.plane : 1;
      this.dy += data.gravity * acceleration * mul;
    } else {
      data.position.moveTo(data.position.position[0], 0, data.position.position[2]);
    }
    return !onGround;
  }
}

class TimeAuxiliary extends Looper {
  constructor({ engine, motor }) {
    super({ motor, data: engine.createFloatUniformHandler(TIME_LOC) }, { autoStart: true });
  }
  refresh({ time, data, renderFrame }) {
    if (renderFrame) {
      data.updateValue(time);
    }
  }
}

class TiltAuxiliary extends ControlledLooper {
  constructor({ controls, tilt, motor }) {
    super(motor, controls, ({ up, down }) => up || down, { controls, tilt });
  }
  refresh({ data: { controls, tilt }, deltaTime, stopUpdate }) {
    const { up, down } = controls;
    const turnspeed = deltaTime / 400;
    if (up) {
      tilt.angle.addValue(-turnspeed);
    }
    if (down) {
      tilt.angle.addValue(turnspeed);
    }
    if (!up && !down) {
      stopUpdate();
    }
  }
}

class SmoothFollowAuxiliary extends Looper {
  followee;
  listener = { onChange: () => this.start() };
  constructor({ followee, follower, motor }, config) {
    super({
      motor,
      data: {
        followee,
        follower,
        config: {
          speed: config?.speed ?? 1,
          followX: config?.followX ?? true,
          followY: config?.followY ?? true,
          followZ: config?.followZ ?? true
        }
      }
    }, { autoStart: false });
    this.followee = followee;
  }
  activate() {
    super.activate();
    this.followee.addChangeListener(this.listener);
  }
  deactivate() {
    this.followee.removeChangeListener(this.listener);
    super.deactivate();
  }
  refresh({ data: { follower, followee, config: { followX, followY, followZ, speed } }, stopUpdate }) {
    const [x32, y32, z3] = followee.position;
    const [fx, fy, fz] = follower.position;
    const dx = followX ? x32 - fx : 0, dy2 = followY ? y32 - fy : 0, dz = followZ ? z3 - fz : 0;
    const dist = Math.sqrt(dx * dx + dy2 * dy2 + dz * dz);
    if (dist < 0.1) {
      follower.moveTo(followX ? x32 : fx, followY ? y32 : fy, followZ ? z3 : fz);
      stopUpdate();
    } else {
      const moveSpeed = Math.min(dist, speed * dist) / dist;
      follower.moveBy(dx * moveSpeed, dy2 * moveSpeed, dz * moveSpeed);
    }
  }
}

class DirAuxiliary {
  onFlip;
  controls;
  dx = 0;
  constructor({ controls }, onFlip) {
    this.onFlip = onFlip;
    this.controls = controls;
  }
  checkControls(controls) {
    let dx = 0;
    if (controls.left) {
      dx--;
    }
    if (controls.right) {
      dx++;
    }
    if (dx && dx !== this.dx) {
      this.dx = dx;
      this.onFlip?.(this.dx);
    }
  }
  onAction(controls) {
    this.checkControls(controls);
  }
  onActionUp(controls) {
    this.checkControls(controls);
  }
  activate() {
    this.controls.addListener(this);
  }
  deactivate() {
    this.controls.removeListener(this);
  }
}

class Updater {
  elems;
  updateRegistry;
  constructor({ updateRegistry, elems }) {
    this.updateRegistry = updateRegistry;
    this.elems = elems;
  }
  onUpdate(id2, type) {
    this.updateRegistry.informUpdate(id2, type);
  }
  activate() {
    this.elems.addUpdateListener?.(this);
  }
  deactivate() {
    this.elems.removeUpdateListener?.(this);
  }
}

class MediaUpdater extends Updater {
  #savedMediaInfo = new Map;
  #motor;
  constructor({ engine, motor, medias }) {
    super({
      updateRegistry: new UpdateRegistry((ids) => {
        ids.forEach((id2) => this.removeMedia(id2));
        engine.updateTextures(ids, medias).then((mediaInfos) => mediaInfos.forEach((mediaInfo) => {
          if (mediaInfo.isVideo) {
            motor.scheduleUpdate(mediaInfo, undefined, mediaInfo.refreshRate);
            this.#savedMediaInfo.set(mediaInfo.id, mediaInfo);
          } else {
            mediaInfo.dispose();
          }
        }));
      }, motor),
      elems: medias
    });
    this.#motor = motor;
  }
  removeMedia(id2) {
    const mediaInfo = this.#savedMediaInfo.get(id2);
    if (mediaInfo) {
      this.#motor.stopUpdate(mediaInfo);
      mediaInfo.dispose();
      this.#savedMediaInfo.delete(id2);
    }
  }
  deactivate() {
    this.#dispose();
  }
  #dispose() {
    this.#savedMediaInfo.forEach((mediaInfo) => this.removeMedia(mediaInfo.id));
  }
}

class AnimationUpdater extends Updater {
  constructor({ engine, motor, animations }) {
    super({
      updateRegistry: new UpdateRegistry((ids) => {
        engine.updateAnimationDefinitions(ids, animations);
      }, motor),
      elems: animations
    });
  }
}

class MotionAuxiliary {
  onChange;
  #controls;
  #moving = false;
  constructor({ controls }, onChange) {
    this.onChange = onChange;
    this.#controls = controls;
  }
  set moving(value) {
    if (this.#moving !== value) {
      this.#moving = value;
      this.onChange?.(this.#moving);
    }
  }
  checkMotion(controls) {
    const { left, forward, backward, right } = controls;
    this.moving = left || forward || backward || right;
  }
  onAction(controls) {
    this.checkMotion(controls);
  }
  onActionUp(controls) {
    this.checkMotion(controls);
  }
  activate() {
    this.#controls.addListener(this);
  }
  deactivate() {
    this.moving = false;
    this.#controls.removeListener(this);
  }
}

class FollowAuxiliary extends Looper {
  followee;
  config;
  listener = {
    onChange: () => {
      if (this.config.followX || this.config.followY || this.config.followZ) {
        this.start();
      }
    }
  };
  constructor({ followee, follower, motor }, config) {
    super({ motor, data: { followee, follower } }, { autoStart: false });
    this.followee = followee;
    this.config = {
      followX: config?.followX ?? true,
      followY: config?.followY ?? true,
      followZ: config?.followZ ?? true,
      speed: config?.speed ?? 1
    };
  }
  activate() {
    super.activate();
    this.followee.addChangeListener(this.listener);
    this.start();
  }
  deactivate() {
    this.followee.removeChangeListener(this.listener);
    super.deactivate();
  }
  refresh({ data, stopUpdate }) {
    const { followX, followY, followZ, speed } = this.config;
    const x32 = followX ? data.followee.position[0] : data.follower.position[0];
    const y32 = followY ? data.followee.position[1] : data.follower.position[1];
    const z3 = followZ ? data.followee.position[2] : data.follower.position[2];
    data.follower.moveTowards(x32, y32, z3, speed);
    if (data.followee.position[0] === data.follower.position[0] && data.followee.position[1] === data.follower.position[1] && data.followee.position[2] === data.follower.position[2]) {
      stopUpdate();
    }
  }
}

class DisplayBox {
  #sprites;
  constructor({ box, imageId, insideImageId, faces = [
    5,
    4,
    0,
    1,
    2,
    3
  ] }) {
    const faceSet = new Set(faces);
    if (!box.disabled) {
      const cX = (box.left + box.right) / 2;
      const cY = (box.top + box.bottom) / 2;
      const cZ = (box.near + box.far) / 2;
      const groundScale = [box.right - box.left, 2, box.near - box.far];
      const sideScale = [2, box.top - box.bottom, box.near - box.far];
      const faceScale = [box.right - box.left, box.top - box.bottom, 2];
      const outside = !imageId ? [] : [
        faceSet.has(5) && f2.create().translate(cX, box.bottom, cZ).scale(...groundScale).scale(1 / 2).rotateX(Math.PI / 2),
        faceSet.has(4) && f2.create().translate(cX, box.top, cZ).scale(...groundScale).scale(1 / 2).rotateX(-Math.PI / 2),
        faceSet.has(0) && f2.create().translate(box.left, cY, cZ).scale(...sideScale).scale(1 / 2).rotateY(-Math.PI / 2),
        faceSet.has(1) && f2.create().translate(box.right, cY, cZ).scale(...sideScale).scale(1 / 2).rotateY(Math.PI / 2),
        faceSet.has(3) && f2.create().translate(cX, cY, box.near).scale(...faceScale).scale(1 / 2).rotateY(0),
        faceSet.has(2) && f2.create().translate(cX, cY, box.far).scale(...faceScale).scale(1 / 2).rotateY(Math.PI)
      ].filter((a3) => !!a3).map((transform) => ({ imageId, transform }));
      const inside = !insideImageId ? [] : [
        faceSet.has(5) && f2.create().translate(cX, box.bottom, cZ).scale(...groundScale).scale(1 / 2).rotateX(-Math.PI / 2),
        faceSet.has(4) && f2.create().translate(cX, box.top, cZ).scale(...groundScale).scale(1 / 2).rotateX(+Math.PI / 2),
        faceSet.has(0) && f2.create().translate(box.left, cY, cZ).scale(...sideScale).scale(1 / 2).rotateY(+Math.PI / 2),
        faceSet.has(1) && f2.create().translate(box.right, cY, cZ).scale(...sideScale).scale(1 / 2).rotateY(-Math.PI / 2),
        faceSet.has(3) && f2.create().translate(cX, cY, box.near).scale(...faceScale).scale(1 / 2).rotateY(Math.PI),
        faceSet.has(2) && f2.create().translate(cX, cY, box.far).scale(...faceScale).scale(1 / 2).rotateY(0)
      ].filter((a3) => !!a3).map((transform) => ({ imageId: insideImageId, transform }));
      this.#sprites = [...inside, ...outside];
    } else {
      this.#sprites = [];
    }
  }
  get length() {
    return this.#sprites.length;
  }
  at(index) {
    return this.#sprites.at(index);
  }
}
var NULLBOX = {
  top: 0,
  bottom: 0,
  left: 0,
  right: 0,
  near: 0,
  far: 0,
  disabled: false
};

class CollisionBox {
  box;
  position;
  constructor(box, position) {
    this.box = box;
    this.position = position;
  }
  collideWith(box) {
    return this.right > box.left && box.right > this.left && this.top > box.bottom && box.top > this.bottom && this.near > box.far && box.near > this.far;
  }
  gotoPosition(pos) {
    this.position[0] = pos[0];
    this.position[1] = pos[1];
    this.position[2] = pos[2];
  }
  get top() {
    return this.box.top + this.position[1];
  }
  get bottom() {
    return this.box.bottom + this.position[1];
  }
  get left() {
    return this.box.left + this.position[0];
  }
  get right() {
    return this.box.right + this.position[0];
  }
  get near() {
    return this.box.near + this.position[2];
  }
  get far() {
    return this.box.far + this.position[2];
  }
}

class CollisionDetector {
  #collisionBox;
  #heroCollisionBox;
  #config;
  #listener;
  #collide = false;
  #disabled;
  constructor({ blockerBox, blockerPosition, heroBox = NULLBOX, listener = {} }, config = {}) {
    this.#collisionBox = new CollisionBox(blockerBox, blockerPosition);
    this.#heroCollisionBox = new CollisionBox(heroBox, [0, 0, 0]);
    this.#listener = listener;
    this.#config = { shouldBlock: config.shouldBlock ?? false };
    this.#disabled = blockerBox.disabled;
  }
  isBlocked(to) {
    if (this.#disabled) {
      return false;
    }
    this.#heroCollisionBox.gotoPosition(to);
    const collide = this.#heroCollisionBox.collideWith(this.#collisionBox);
    if (collide !== this.#collide) {
      this.#collide = collide;
      this.#listener.onBlockChange?.(this.#collide);
      if (this.#collide) {
        this.#listener.onEnter?.();
      } else {
        this.#listener.onLeave?.();
      }
    }
    return this.#config.shouldBlock ? collide : false;
  }
}
var k = (m4) => {
  if (m4) {
    const j = m4.getImageData(0, 0, m4.canvas.width, m4.canvas.height), { data: f4 } = j;
    for (let b2 = 0;b2 < f4.length; b2 += 4)
      f4[b2] = f4[b2 + 1] = f4[b2 + 2] = 0;
    m4.putImageData(j, 0, 0);
  }
};
function B4(m4, H32, J, K) {
  const Q3 = N2(m4, H32, J, K), $32 = m4 * K, w2 = H32 * K, R3 = J * K;
  return { pos: [m4, H32, J, K], worldPosition: [$32, w2, R3], tag: Q3 };
}
function Z2(m4, H32, J, K, Q3) {
  const $32 = N2(H32, J, K, Q3), w2 = H32 * Q3, R3 = J * Q3, O2 = K * Q3;
  return m4.worldPosition[0] = w2, m4.worldPosition[1] = R3, m4.worldPosition[2] = O2, m4.pos[0] = H32, m4.pos[1] = J, m4.pos[2] = K, m4.pos[3] = Q3, m4.tag = $32, m4;
}
function N2(m4, H32, J, K) {
  return m4 + "," + H32 + "," + J + "|" + K;
}
function V3(m4, H32) {
  return Math.round(m4 / H32);
}
var I = 3;

class U2 {
  i;
  f;
  warningLimit = 50000;
  #m = new Set;
  #H = [];
  constructor(m4, H32) {
    this.initCall = m4, this.onRecycle = H32;
  }
  create(...m4) {
    const H32 = this.#H.pop();
    if (H32)
      return this.#m.add(H32), this.initCall(H32, ...m4);
    const J = this.initCall(undefined, ...m4);
    return this.#m.add(J), this.#K(), J;
  }
  recycle(m4) {
    this.#m.delete(m4), this.#J(m4);
  }
  recycleAll() {
    for (let m4 of this.#m)
      this.#J(m4);
    this.#m.clear();
  }
  clear() {
    this.#H.length = 0, this.#m.clear();
  }
  countObjectsInExistence() {
    return this.#m.size + this.#H.length;
  }
  #J(m4) {
    this.#H.push(m4), this.onRecycle?.(m4);
  }
  #K() {
    if (this.countObjectsInExistence() === this.warningLimit)
      console.warn("ObjectPool already created", this.#m.size + this.#H.length, "in", this.constructor.name);
  }
}

class W extends U2 {
  constructor() {
    super((m4, H32, J, K, Q3) => {
      return !m4 ? B4(H32, J, K, Q3) : Z2(m4, H32, J, K, Q3);
    });
  }
  createFromPos(m4, H32) {
    const J = V3(m4[0], H32), K = V3(m4[1], H32), Q3 = V3(m4[2], H32);
    return this.create(J, K, Q3, H32);
  }
}

class M2 {
  #m = new Set;
  add(m4) {
    this.#m.add(m4);
  }
  remove(m4) {
    this.#m.delete(m4);
  }
  trackCell(m4) {
    let H32 = false;
    return this.#m.forEach((J) => {
      if (J.trackCell(m4))
        H32 = true;
    }), H32;
  }
  untrackCells(m4) {
    this.#m.forEach((H32) => {
      H32.untrackCells(m4);
    });
  }
}

class P {
  i;
  f;
  warningLimit = 50000;
  #m = new Set;
  #H = [];
  constructor(m4, H32) {
    this.initCall = m4, this.onRecycle = H32;
  }
  create(...m4) {
    const H32 = this.#H.pop();
    if (H32)
      return this.#m.add(H32), this.initCall(H32, ...m4);
    const J = this.initCall(undefined, ...m4);
    return this.#m.add(J), this.#K(), J;
  }
  recycle(m4) {
    this.#m.delete(m4), this.#J(m4);
  }
  recycleAll() {
    for (let m4 of this.#m)
      this.#J(m4);
    this.#m.clear();
  }
  clear() {
    this.#H.length = 0, this.#m.clear();
  }
  countObjectsInExistence() {
    return this.#m.size + this.#H.length;
  }
  #J(m4) {
    this.#H.push(m4), this.onRecycle?.(m4);
  }
  #K() {
    if (this.countObjectsInExistence() === this.warningLimit)
      console.warn("ObjectPool already created", this.#m.size + this.#H.length, "in", this.constructor.name);
  }
}

class j {
  F;
  #m;
  #H;
  #J = new Map;
  constructor(m4, H32 = new b2) {
    this.pool = H32, this.#m = { value: m4 }, this.#H = { value: m4 }, this.#m.next = this.#H, this.#H.prev = this.#m;
  }
  clear() {
    while (this.#Q(this.#m.next))
      ;
  }
  get size() {
    return this.#J.size;
  }
  contains(m4) {
    return this.#J.has(m4);
  }
  pushTop(m4) {
    this.#W(this.#R(m4));
  }
  pushBottom(m4) {
    this.#$(this.#R(m4));
  }
  moveToTop(m4) {
    const H32 = this.#J.get(m4);
    if (H32)
      return this.#K(H32), this.#W(H32), true;
    return false;
  }
  moveToBottom(m4) {
    const H32 = this.#J.get(m4);
    if (H32)
      return this.#K(H32), this.#$(H32), true;
    return false;
  }
  popBottom() {
    return this.#Q(this.#m.next);
  }
  popTop() {
    return this.#Q(this.#H.prev);
  }
  #K(m4) {
    if (m4 === this.#H || m4 === this.#m)
      return false;
    if (m4.prev && m4.next)
      m4.prev.next = m4.next, m4.next.prev = m4.prev;
    return m4.prev = m4.next = undefined, true;
  }
  #R(m4) {
    const H32 = this.pool.create(m4);
    return this.#J.set(m4, H32), H32;
  }
  #Q(m4) {
    if (!this.#K(m4))
      return;
    return this.pool.recycle(m4), this.#J.delete(m4.value), m4.value;
  }
  #W(m4) {
    const H32 = this.#H.prev, J = m4;
    J.prev = H32, J.next = this.#H, H32.next = this.#H.prev = J;
  }
  #$(m4) {
    const H32 = this.#m.next, J = m4;
    J.next = H32, J.prev = this.#m, H32.prev = this.#m.next = J;
  }
}

class b2 extends P {
  constructor() {
    super((m4, H32) => {
      if (!m4)
        return { value: H32 };
      return m4.value = H32, m4.prev = undefined, m4.next = undefined, m4;
    });
  }
}
var G3 = [3, 3, 3];

class A5 {
  cellTags = new j("");
  cellTrack;
  cellPool = new W;
  range;
  base;
  cellLimit;
  cellSize;
  _trimmedTags = new Set;
  constructor({ cellTrack: m4 }, { range: H32, cellLimit: J, cellSize: K = 1 } = {}) {
    this.range = [H32?.[0] ?? G3[0], H32?.[1] ?? G3[1], H32?.[2] ?? G3[2]], this.base = this.range.map((Q3) => Math.ceil(-Q3 / 2)), this.cellLimit = Math.max(0, J ?? 10), this.cellSize = K ?? 1, this.cellTrack = m4;
  }
  onCell(m4) {
    this.#m(m4), this.#J();
  }
  #m(m4) {
    const { range: H32, base: J } = this, { pos: K } = m4, Q3 = K[0] + J[0], $32 = K[1] + J[1], w2 = K[2] + J[2];
    for (let R3 = 0;R3 < H32[0]; R3++)
      for (let O2 = 0;O2 < H32[2]; O2++)
        for (let Y = 0;Y < H32[1]; Y++)
          this.#H(this.cellPool.create(Q3 + O2, $32 + Y, w2 + R3, this.cellSize));
    this.cellPool.clear();
  }
  #H(m4) {
    if (!this.cellTags.contains(m4.tag)) {
      if (this.cellTrack.trackCell(m4))
        this.cellTags.pushTop(m4.tag);
    } else
      this.cellTags.moveToTop(m4.tag);
  }
  #J() {
    while (this.cellTags.size > this.cellLimit) {
      const m4 = this.cellTags.popBottom();
      if (m4)
        this._trimmedTags.add(m4);
      else
        break;
    }
    if (this._trimmedTags.size)
      this.cellTrack.untrackCells(this._trimmedTags), this._trimmedTags.clear();
  }
  deactivate() {
    this.cellTags.clear();
  }
}
function q(m4, H32) {
  return new _2({ tracker: m4, boundary: H32 });
}

class _2 {
  #m;
  #H;
  constructor({ boundary: m4, tracker: H32 }) {
    this.#m = m4, this.#H = H32;
  }
  trackCell(m4) {
    if (!this.#m.include(m4))
      return false;
    return this.#H.trackCell(m4);
  }
  untrackCells(m4) {
    this.#H.untrackCells(m4);
  }
}

class h4 {
  minX;
  maxX;
  minY;
  maxY;
  minZ;
  maxZ;
  constructor(m4) {
    this.minX = m4?.xRange?.[0] ?? Number.NEGATIVE_INFINITY, this.maxX = m4?.xRange?.[1] ?? Number.POSITIVE_INFINITY, this.minY = m4?.yRange?.[0] ?? Number.NEGATIVE_INFINITY, this.maxY = m4?.yRange?.[1] ?? Number.POSITIVE_INFINITY, this.minZ = m4?.zRange?.[0] ?? Number.NEGATIVE_INFINITY, this.maxZ = m4?.zRange?.[1] ?? Number.POSITIVE_INFINITY;
  }
  include(m4) {
    const H32 = m4.pos[0], J = m4.pos[1], K = m4.pos[2];
    if (H32 < this.minX || this.maxX < H32 || J < this.minY || this.maxY < J || K < this.minZ || this.maxZ < K)
      return false;
    return true;
  }
}

class L2 {
  #m;
  #H = new Set;
  #J;
  #K = new W;
  #R = { onChange: () => this.#Q(this.#J) };
  constructor({ positionMatrix: m4 }, H32) {
    const J = H32?.cellSize ?? 1;
    this.#m = this.#K.create(Number.NaN, Number.NaN, Number.NaN, J), this.#J = m4;
  }
  addListener(m4) {
    return this.#H.add(m4), this;
  }
  removeListener(m4) {
    this.#H.delete(m4);
  }
  #Q(m4) {
    let H32 = this.#K.createFromPos(m4.position, this.#m.pos[I]);
    if (this.#m.pos[0] !== H32.pos[0] || this.#m.pos[1] !== H32.pos[1] || this.#m.pos[2] !== H32.pos[2]) {
      for (let K of this.#H)
        K.onCell(H32, this.#m);
      const J = this.#m;
      this.#m = H32, H32 = J;
    }
    this.#K.recycle(H32);
  }
  activate() {
    this.#m.pos[0] = Number.NaN, this.#m.pos[1] = Number.NaN, this.#m.pos[2] = Number.NaN, this.#J.addChangeListener(this.#R), this.#Q(this.#J);
  }
  deactivate() {
    this.#J.removeChangeListener(this.#R);
  }
}
var X2 = function(m4, H32) {
  if (m4) {
    const J = m4.length.valueOf();
    for (let K = 0;K < J; K++)
      H32(m4.at(K), K);
  }
};

class E2 {
  #m = {};
  #H = new Set;
  constructor({ triggers: m4 } = {}) {
    if (m4)
      X2(m4, (H32) => this.addTrigger(H32));
  }
  addTrigger(m4) {
    if (m4)
      X2(m4.cells, (H32) => {
        if (H32)
          (this.#m[H32.tag] ?? (this.#m[H32.tag] = [])).push(m4);
      });
  }
  removeTrigger(m4) {
    if (m4)
      X2(m4.cells, (H32) => {
        if (H32) {
          const J = this.#m[H32.tag]?.filter((K) => K === m4);
          if (J)
            if (J.length)
              this.#m[H32.tag] = J;
            else
              delete this.#m[H32.tag];
        }
      });
  }
  trackCell(m4) {
    const H32 = this.#m[m4.tag];
    if (H32) {
      for (let J of H32)
        if (!this.#H.has(J))
          J.activate(), this.#H.add(J);
    }
    return false;
  }
  untrackCells(m4) {
    for (let H32 of m4) {
      const J = this.#m[H32];
      if (J) {
        for (let K of J)
          if (this.#H.has(K))
            K.deactivate(), this.#H.delete(K);
      }
    }
  }
}
var import_seedrandom = __toESM(require_seedrandom2(), 1);

class h5 {
  i;
  f;
  warningLimit = 50000;
  #i = new Set;
  #f = [];
  constructor(i2, f4) {
    this.initCall = i2;
    this.onRecycle = f4;
  }
  create(...i2) {
    const f4 = this.#f.pop();
    if (f4)
      return this.#i.add(f4), this.initCall(f4, ...i2);
    const v3 = this.initCall(undefined, ...i2);
    return this.#i.add(v3), this.#v(), v3;
  }
  recycle(i2) {
    this.#i.delete(i2), this.#h(i2);
  }
  recycleAll() {
    for (let i2 of this.#i)
      this.#h(i2);
    this.#i.clear();
  }
  clear() {
    this.#f.length = 0, this.#i.clear();
  }
  countObjectsInExistence() {
    return this.#i.size + this.#f.length;
  }
  #h(i2) {
    this.#f.push(i2), this.onRecycle?.(i2);
  }
  #v() {
    if (this.countObjectsInExistence() === this.warningLimit)
      console.warn("ObjectPool already created", this.#i.size + this.#f.length, "in", this.constructor.name);
  }
}

class SpritePool extends h5 {
  constructor() {
    super((sprite, imageId) => {
      if (!sprite) {
        return { imageId, transform: f2.create() };
      }
      sprite.imageId = imageId;
      sprite.transform.identity();
      sprite.spriteType = 0;
      return sprite;
    });
  }
}

class StepBackAuxiliary extends Looper {
  #previousCellPos;
  #curCellPos;
  constructor({ position, motor }, config = {}) {
    super({ motor, data: { position, speed: config.speed ?? 1, step: config.step ?? 2 } }, { autoStart: false });
    position.goBack = () => this.goBack();
    const step = config.step ?? 2;
    this.#curCellPos = [
      V3(position.position[0], step) * step,
      0,
      V3(position.position[2], step) * step
    ];
    this.#previousCellPos = [...this.#curCellPos];
  }
  onCell(cell) {
    if (this.#curCellPos[0] !== cell.pos[0] || this.#curCellPos[2] !== cell.pos[2]) {
      const temp = this.#previousCellPos;
      this.#previousCellPos = this.#curCellPos;
      this.#curCellPos = temp;
      this.#curCellPos[0] = cell.pos[0];
      this.#curCellPos[2] = cell.pos[2];
    }
  }
  goBack() {
    this.#curCellPos[0] = this.#previousCellPos[0];
    this.#curCellPos[2] = this.#previousCellPos[2];
    this.start();
  }
  refresh({ deltaTime, data, stopUpdate }) {
    const speed = deltaTime / 50 * data.speed;
    let moveResult = data.position.moveTowards(this.#previousCellPos[0] * data.step, this.#previousCellPos[1] * data.step, this.#previousCellPos[2] * data.step, speed);
    if (moveResult !== w.MOVED) {
      stopUpdate();
    }
  }
}
function goBackAction(elem) {
  return () => elem.goBack?.();
}

class PositionStep {
  #goalPos;
  #position;
  #stepCount = 0;
  constructor({ position }) {
    this.#position = position;
    this.#goalPos = [
      this.#position.position[0],
      this.#position.position[1],
      this.#position.position[2]
    ];
  }
  get position() {
    return this.#position.position;
  }
  getMatrix() {
    return this.#position.getMatrix();
  }
  addChangeListener(listener) {
    this.#position.addChangeListener(listener);
    return this;
  }
  removeChangeListener(listener) {
    this.#position.removeChangeListener(listener);
  }
  cellMoveBy(dx, dy2, dz, cellSize, speed) {
    const pos = this.#position.position;
    const preX = V3(pos[0], cellSize) * cellSize;
    const preY = V3(pos[1], cellSize) * cellSize;
    const preZ = V3(pos[2], cellSize) * cellSize;
    const movement = dx || dy2 || dz;
    if (movement || this.#stepCount > 0) {
      const gx = (V3(pos[0], cellSize) + dx) * cellSize;
      const gy = (V3(pos[1], cellSize) + dy2) * cellSize;
      const gz = (V3(pos[2], cellSize) + dz) * cellSize;
      this.#goalPos[0] = gx;
      this.#goalPos[1] = gy;
      this.#goalPos[2] = gz;
    }
    if (!dx && !dy2 && !dz) {
      this.#stepCount = 0;
    }
    const moveResult = this.#position.attemptMoveTowards(this.#goalPos[0], this.#goalPos[1], this.#goalPos[2], speed);
    if (moveResult === w.BLOCKED) {
      const gx = V3(pos[0], cellSize) * cellSize;
      const gy = V3(pos[1], cellSize) * cellSize;
      const gz = V3(pos[2], cellSize) * cellSize;
      this.#goalPos[0] = gx;
      this.#goalPos[1] = gy;
      this.#goalPos[2] = gz;
    }
    const newPos = this.#position.position;
    if (V3(newPos[0], cellSize) * cellSize !== preX || V3(newPos[1], cellSize) * cellSize !== preY || V3(newPos[2], cellSize) * cellSize !== preZ) {
      this.#stepCount++;
    }
    if (!movement && G2(newPos, this.#goalPos)) {
      return w.AT_POSITION;
    }
    return moveResult;
  }
}

class CellTrigger {
  cells;
  activate;
  deactivate;
  constructor({
    cells,
    triggerBox,
    blockerBox,
    displayBox,
    heroBox,
    onCollide,
    onEnter,
    onLeave,
    spriteImageId,
    wireframeImageId,
    worldColliders,
    spritesAccumulator,
    boxImage,
    blockShift = [0, 0, 0],
    displayShift = [0, 0, 0]
  }) {
    this.cells = cells;
    const colliders = [];
    const sprites = new h3;
    A2(this.cells, (cell) => {
      if (!cell) {
        return;
      }
      const position = cell.worldPosition;
      const blockerPosition = [
        position[0] + blockShift[0],
        position[1] + blockShift[1],
        position[2] + blockShift[2]
      ];
      const posMatrix = new t0().movedTo(position[0] + displayShift[0], position[1] + displayShift[1], position[2] + displayShift[2]);
      if (blockerBox) {
        colliders.push(new CollisionDetector({
          blockerBox,
          blockerPosition,
          heroBox,
          listener: {
            onBlockChange: onCollide ? (blocked) => onCollide?.(blocked) : undefined
          }
        }, { shouldBlock: true }));
      }
      if (triggerBox) {
        colliders.push(new CollisionDetector({
          blockerBox: triggerBox,
          blockerPosition: position,
          heroBox,
          listener: { onEnter, onLeave }
        }, { shouldBlock: false }));
      }
      if (spriteImageId !== undefined) {
        sprites.add(new SpriteGroup([{
          imageId: spriteImageId,
          spriteType: 1,
          transform: f2.create().translate(0, -0.3, -1)
        }], posMatrix));
      }
      const boxToDisplay = displayBox ?? blockerBox;
      if (boxImage && boxToDisplay) {
        sprites.add(new SpriteGroup(new DisplayBox({
          box: boxToDisplay,
          imageId: boxImage.outside,
          insideImageId: boxImage.inside,
          faces: boxImage.faces
        }), posMatrix));
      }
      if (triggerBox) {
        if (triggerBox && wireframeImageId !== undefined) {
          sprites.add(new SpriteGroup(new DisplayBox({ box: triggerBox, imageId: wireframeImageId, insideImageId: wireframeImageId }), posMatrix));
        }
      }
      if (blockerBox && wireframeImageId !== undefined) {
        sprites.add(new SpriteGroup(new DisplayBox({ box: blockerBox, imageId: wireframeImageId, insideImageId: wireframeImageId }), new t0().movedTo(blockerPosition[0], blockerPosition[1], blockerPosition[2])));
      }
    });
    this.activate = () => {
      spritesAccumulator.add(sprites);
      worldColliders.add(colliders);
    };
    this.deactivate = () => {
      spritesAccumulator.remove(sprites);
      worldColliders.remove(colliders);
    };
  }
}
var __create2 = Object.create;
var __defProp2 = Object.defineProperty;
var __getProtoOf2 = Object.getPrototypeOf;
var __getOwnPropNames2 = Object.getOwnPropertyNames;
var __hasOwnProp2 = Object.prototype.hasOwnProperty;
var __toESM2 = (mod, isNodeMode, target) => {
  target = mod != null ? __create2(__getProtoOf2(mod)) : {};
  const to = isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target;
  for (let key of __getOwnPropNames2(mod))
    if (!__hasOwnProp2.call(to, key))
      __defProp2(to, key, {
        get: () => mod[key],
        enumerable: true
      });
  return to;
};
var __commonJS2 = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);
var require_react_development = __commonJS2((exports, module) => {
  if (true) {
    (function() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error);
      }
      var ReactVersion = "18.2.0";
      var REACT_ELEMENT_TYPE = Symbol.for("react.element");
      var REACT_PORTAL_TYPE = Symbol.for("react.portal");
      var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
      var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
      var REACT_CONTEXT_TYPE = Symbol.for("react.context");
      var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
      var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
      var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
      var REACT_MEMO_TYPE = Symbol.for("react.memo");
      var REACT_LAZY_TYPE = Symbol.for("react.lazy");
      var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var ReactCurrentDispatcher = {
        current: null
      };
      var ReactCurrentBatchConfig = {
        transition: null
      };
      var ReactCurrentActQueue = {
        current: null,
        isBatchingLegacy: false,
        didScheduleLegacyUpdate: false
      };
      var ReactCurrentOwner = {
        current: null
      };
      var ReactDebugCurrentFrame = {};
      var currentExtraStackFrame = null;
      function setExtraStackFrame(stack) {
        {
          currentExtraStackFrame = stack;
        }
      }
      {
        ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
          {
            currentExtraStackFrame = stack;
          }
        };
        ReactDebugCurrentFrame.getCurrentStack = null;
        ReactDebugCurrentFrame.getStackAddendum = function() {
          var stack = "";
          if (currentExtraStackFrame) {
            stack += currentExtraStackFrame;
          }
          var impl = ReactDebugCurrentFrame.getCurrentStack;
          if (impl) {
            stack += impl() || "";
          }
          return stack;
        };
      }
      var enableScopeAPI = false;
      var enableCacheElement = false;
      var enableTransitionTracing = false;
      var enableLegacyHidden = false;
      var enableDebugTracing = false;
      var ReactSharedInternals = {
        ReactCurrentDispatcher,
        ReactCurrentBatchConfig,
        ReactCurrentOwner
      };
      {
        ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
        ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
      }
      function warn(format) {
        {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1;_key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format, args);
          }
        }
      }
      function error(format) {
        {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1;_key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var didWarnStateUpdateForUnmountedComponent = {};
      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor;
          var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
          var warningKey = componentName + "." + callerName;
          if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
            return;
          }
          error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
          didWarnStateUpdateForUnmountedComponent[warningKey] = true;
        }
      }
      var ReactNoopUpdateQueue = {
        isMounted: function(publicInstance) {
          return false;
        },
        enqueueForceUpdate: function(publicInstance, callback, callerName) {
          warnNoop(publicInstance, "forceUpdate");
        },
        enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
          warnNoop(publicInstance, "replaceState");
        },
        enqueueSetState: function(publicInstance, partialState, callback, callerName) {
          warnNoop(publicInstance, "setState");
        }
      };
      var assign = Object.assign;
      var emptyObject = {};
      {
        Object.freeze(emptyObject);
      }
      function Component(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      Component.prototype.isReactComponent = {};
      Component.prototype.setState = function(partialState, callback) {
        if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
          throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        }
        this.updater.enqueueSetState(this, partialState, callback, "setState");
      };
      Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
      };
      {
        var deprecatedAPIs = {
          isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
          replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
        };
        var defineDeprecationWarning = function(methodName, info) {
          Object.defineProperty(Component.prototype, methodName, {
            get: function() {
              warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
              return;
            }
          });
        };
        for (var fnName in deprecatedAPIs) {
          if (deprecatedAPIs.hasOwnProperty(fnName)) {
            defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
          }
        }
      }
      function ComponentDummy() {}
      ComponentDummy.prototype = Component.prototype;
      function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      var pureComponentPrototype = PureComponent.prototype = new ComponentDummy;
      pureComponentPrototype.constructor = PureComponent;
      assign(pureComponentPrototype, Component.prototype);
      pureComponentPrototype.isPureReactComponent = true;
      function createRef() {
        var refObject = {
          current: null
        };
        {
          Object.seal(refObject);
        }
        return refObject;
      }
      var isArrayImpl = Array.isArray;
      function isArray(a3) {
        return isArrayImpl(a3);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
          var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        {
          try {
            testStringCoercion(value);
            return false;
          } catch (e3) {
            return true;
          }
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) {
          return displayName;
        }
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === "number") {
            error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
          return type;
        }
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              if (outerName !== null) {
                return outerName;
              }
              return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch (x4) {
                return null;
              }
            }
          }
        }
        return null;
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
      {
        didWarnAboutStringRefs = {};
      }
      function hasValidRef(config) {
        {
          if (hasOwnProperty.call(config, "ref")) {
            var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.ref !== undefined;
      }
      function hasValidKey(config) {
        {
          if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.key !== undefined;
      }
      function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
          {
            if (!specialPropKeyWarningShown) {
              specialPropKeyWarningShown = true;
              error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, "key", {
          get: warnAboutAccessingKey,
          configurable: true
        });
      }
      function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
          {
            if (!specialPropRefWarningShown) {
              specialPropRefWarningShown = true;
              error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, "ref", {
          get: warnAboutAccessingRef,
          configurable: true
        });
      }
      function warnIfStringRefCannotBeAutoConverted(config) {
        {
          if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
              error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
              didWarnAboutStringRefs[componentName] = true;
            }
          }
        }
      }
      var ReactElement = function(type, key, ref, self2, source, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          _owner: owner
        };
        {
          element._store = {};
          Object.defineProperty(element._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
          });
          Object.defineProperty(element, "_self", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self2
          });
          Object.defineProperty(element, "_source", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
          });
          if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
          }
        }
        return element;
      };
      function createElement(type, config, children) {
        var propName;
        var props = {};
        var key = null;
        var ref = null;
        var self2 = null;
        var source = null;
        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            {
              warnIfStringRefCannotBeAutoConverted(config);
            }
          }
          if (hasValidKey(config)) {
            {
              checkKeyStringCoercion(config.key);
            }
            key = "" + config.key;
          }
          self2 = config.__self === undefined ? null : config.__self;
          source = config.__source === undefined ? null : config.__source;
          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config[propName];
            }
          }
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);
          for (var i2 = 0;i2 < childrenLength; i2++) {
            childArray[i2] = arguments[i2 + 2];
          }
          {
            if (Object.freeze) {
              Object.freeze(childArray);
            }
          }
          props.children = childArray;
        }
        if (type && type.defaultProps) {
          var defaultProps = type.defaultProps;
          for (propName in defaultProps) {
            if (props[propName] === undefined) {
              props[propName] = defaultProps[propName];
            }
          }
        }
        {
          if (key || ref) {
            var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
            if (key) {
              defineKeyPropWarningGetter(props, displayName);
            }
            if (ref) {
              defineRefPropWarningGetter(props, displayName);
            }
          }
        }
        return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
      }
      function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
      }
      function cloneElement(element, config, children) {
        if (element === null || element === undefined) {
          throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        }
        var propName;
        var props = assign({}, element.props);
        var key = element.key;
        var ref = element.ref;
        var self2 = element._self;
        var source = element._source;
        var owner = element._owner;
        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            owner = ReactCurrentOwner.current;
          }
          if (hasValidKey(config)) {
            {
              checkKeyStringCoercion(config.key);
            }
            key = "" + config.key;
          }
          var defaultProps;
          if (element.type && element.type.defaultProps) {
            defaultProps = element.type.defaultProps;
          }
          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              if (config[propName] === undefined && defaultProps !== undefined) {
                props[propName] = defaultProps[propName];
              } else {
                props[propName] = config[propName];
              }
            }
          }
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);
          for (var i2 = 0;i2 < childrenLength; i2++) {
            childArray[i2] = arguments[i2 + 2];
          }
          props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self2, source, owner, props);
      }
      function isValidElement(object) {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      var SEPARATOR = ".";
      var SUBSEPARATOR = ":";
      function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
          "=": "=0",
          ":": "=2"
        };
        var escapedString = key.replace(escapeRegex, function(match) {
          return escaperLookup[match];
        });
        return "$" + escapedString;
      }
      var didWarnAboutMaps = false;
      var userProvidedKeyEscapeRegex = /\/+/g;
      function escapeUserProvidedKey(text) {
        return text.replace(userProvidedKeyEscapeRegex, "$&/");
      }
      function getElementKey(element, index) {
        if (typeof element === "object" && element !== null && element.key != null) {
          {
            checkKeyStringCoercion(element.key);
          }
          return escape("" + element.key);
        }
        return index.toString(36);
      }
      function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if (type === "undefined" || type === "boolean") {
          children = null;
        }
        var invokeCallback = false;
        if (children === null) {
          invokeCallback = true;
        } else {
          switch (type) {
            case "string":
            case "number":
              invokeCallback = true;
              break;
            case "object":
              switch (children.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  invokeCallback = true;
              }
          }
        }
        if (invokeCallback) {
          var _child = children;
          var mappedChild = callback(_child);
          var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
          if (isArray(mappedChild)) {
            var escapedChildKey = "";
            if (childKey != null) {
              escapedChildKey = escapeUserProvidedKey(childKey) + "/";
            }
            mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
              return c;
            });
          } else if (mappedChild != null) {
            if (isValidElement(mappedChild)) {
              {
                if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                  checkKeyStringCoercion(mappedChild.key);
                }
              }
              mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
            }
            array.push(mappedChild);
          }
          return 1;
        }
        var child;
        var nextName;
        var subtreeCount = 0;
        var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (isArray(children)) {
          for (var i2 = 0;i2 < children.length; i2++) {
            child = children[i2];
            nextName = nextNamePrefix + getElementKey(child, i2);
            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
          }
        } else {
          var iteratorFn = getIteratorFn(children);
          if (typeof iteratorFn === "function") {
            var iterableChildren = children;
            {
              if (iteratorFn === iterableChildren.entries) {
                if (!didWarnAboutMaps) {
                  warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
            }
            var iterator = iteratorFn.call(iterableChildren);
            var step;
            var ii = 0;
            while (!(step = iterator.next()).done) {
              child = step.value;
              nextName = nextNamePrefix + getElementKey(child, ii++);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else if (type === "object") {
            var childrenString = String(children);
            throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
          }
        }
        return subtreeCount;
      }
      function mapChildren(children, func, context) {
        if (children == null) {
          return children;
        }
        var result = [];
        var count = 0;
        mapIntoArray(children, result, "", "", function(child) {
          return func.call(context, child, count++);
        });
        return result;
      }
      function countChildren(children) {
        var n4 = 0;
        mapChildren(children, function() {
          n4++;
        });
        return n4;
      }
      function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
          forEachFunc.apply(this, arguments);
        }, forEachContext);
      }
      function toArray(children) {
        return mapChildren(children, function(child) {
          return child;
        }) || [];
      }
      function onlyChild(children) {
        if (!isValidElement(children)) {
          throw new Error("React.Children.only expected to receive a single React element child.");
        }
        return children;
      }
      function createContext(defaultValue) {
        var context = {
          $$typeof: REACT_CONTEXT_TYPE,
          _currentValue: defaultValue,
          _currentValue2: defaultValue,
          _threadCount: 0,
          Provider: null,
          Consumer: null,
          _defaultValue: null,
          _globalName: null
        };
        context.Provider = {
          $$typeof: REACT_PROVIDER_TYPE,
          _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        var hasWarnedAboutDisplayNameOnConsumer = false;
        {
          var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context
          };
          Object.defineProperties(Consumer, {
            Provider: {
              get: function() {
                if (!hasWarnedAboutUsingConsumerProvider) {
                  hasWarnedAboutUsingConsumerProvider = true;
                  error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                }
                return context.Provider;
              },
              set: function(_Provider) {
                context.Provider = _Provider;
              }
            },
            _currentValue: {
              get: function() {
                return context._currentValue;
              },
              set: function(_currentValue) {
                context._currentValue = _currentValue;
              }
            },
            _currentValue2: {
              get: function() {
                return context._currentValue2;
              },
              set: function(_currentValue2) {
                context._currentValue2 = _currentValue2;
              }
            },
            _threadCount: {
              get: function() {
                return context._threadCount;
              },
              set: function(_threadCount) {
                context._threadCount = _threadCount;
              }
            },
            Consumer: {
              get: function() {
                if (!hasWarnedAboutUsingNestedContextConsumers) {
                  hasWarnedAboutUsingNestedContextConsumers = true;
                  error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
                return context.Consumer;
              }
            },
            displayName: {
              get: function() {
                return context.displayName;
              },
              set: function(displayName) {
                if (!hasWarnedAboutDisplayNameOnConsumer) {
                  warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                  hasWarnedAboutDisplayNameOnConsumer = true;
                }
              }
            }
          });
          context.Consumer = Consumer;
        }
        {
          context._currentRenderer = null;
          context._currentRenderer2 = null;
        }
        return context;
      }
      var Uninitialized = -1;
      var Pending = 0;
      var Resolved = 1;
      var Rejected = 2;
      function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
          var ctor = payload._result;
          var thenable = ctor();
          thenable.then(function(moduleObject2) {
            if (payload._status === Pending || payload._status === Uninitialized) {
              var resolved = payload;
              resolved._status = Resolved;
              resolved._result = moduleObject2;
            }
          }, function(error2) {
            if (payload._status === Pending || payload._status === Uninitialized) {
              var rejected = payload;
              rejected._status = Rejected;
              rejected._result = error2;
            }
          });
          if (payload._status === Uninitialized) {
            var pending = payload;
            pending._status = Pending;
            pending._result = thenable;
          }
        }
        if (payload._status === Resolved) {
          var moduleObject = payload._result;
          {
            if (moduleObject === undefined) {
              error(`lazy: Expected the result of a dynamic import() call. Instead received: %s

Your code should look like: 
  const MyComponent = lazy(() => import('./MyComponent'))

Did you accidentally put curly braces around the import?`, moduleObject);
            }
          }
          {
            if (!("default" in moduleObject)) {
              error(`lazy: Expected the result of a dynamic import() call. Instead received: %s

Your code should look like: 
  const MyComponent = lazy(() => import('./MyComponent'))`, moduleObject);
            }
          }
          return moduleObject.default;
        } else {
          throw payload._result;
        }
      }
      function lazy(ctor) {
        var payload = {
          _status: Uninitialized,
          _result: ctor
        };
        var lazyType = {
          $$typeof: REACT_LAZY_TYPE,
          _payload: payload,
          _init: lazyInitializer
        };
        {
          var defaultProps;
          var propTypes;
          Object.defineProperties(lazyType, {
            defaultProps: {
              configurable: true,
              get: function() {
                return defaultProps;
              },
              set: function(newDefaultProps) {
                error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                defaultProps = newDefaultProps;
                Object.defineProperty(lazyType, "defaultProps", {
                  enumerable: true
                });
              }
            },
            propTypes: {
              configurable: true,
              get: function() {
                return propTypes;
              },
              set: function(newPropTypes) {
                error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                propTypes = newPropTypes;
                Object.defineProperty(lazyType, "propTypes", {
                  enumerable: true
                });
              }
            }
          });
        }
        return lazyType;
      }
      function forwardRef(render) {
        {
          if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
            error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
          } else if (typeof render !== "function") {
            error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
          } else {
            if (render.length !== 0 && render.length !== 2) {
              error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
            }
          }
          if (render != null) {
            if (render.defaultProps != null || render.propTypes != null) {
              error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
            }
          }
        }
        var elementType = {
          $$typeof: REACT_FORWARD_REF_TYPE,
          render
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name;
              if (!render.name && !render.displayName) {
                render.displayName = name;
              }
            }
          });
        }
        return elementType;
      }
      var REACT_MODULE_REFERENCE;
      {
        REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      }
      function isValidElementType(type) {
        if (typeof type === "string" || typeof type === "function") {
          return true;
        }
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
          return true;
        }
        if (typeof type === "object" && type !== null) {
          if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
            return true;
          }
        }
        return false;
      }
      function memo(type, compare) {
        {
          if (!isValidElementType(type)) {
            error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
          }
        }
        var elementType = {
          $$typeof: REACT_MEMO_TYPE,
          type,
          compare: compare === undefined ? null : compare
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name;
              if (!type.name && !type.displayName) {
                type.displayName = name;
              }
            }
          });
        }
        return elementType;
      }
      function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        {
          if (dispatcher === null) {
            error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`);
          }
        }
        return dispatcher;
      }
      function useContext(Context) {
        var dispatcher = resolveDispatcher();
        {
          if (Context._context !== undefined) {
            var realContext = Context._context;
            if (realContext.Consumer === Context) {
              error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
            } else if (realContext.Provider === Context) {
              error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
            }
          }
        }
        return dispatcher.useContext(Context);
      }
      function useState(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
      }
      function useReducer(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
      }
      function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
      }
      function useEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, deps);
      }
      function useInsertionEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useInsertionEffect(create, deps);
      }
      function useLayoutEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, deps);
      }
      function useCallback(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
      }
      function useMemo(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, deps);
      }
      function useImperativeHandle(ref, create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, deps);
      }
      function useDebugValue(value, formatterFn) {
        {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDebugValue(value, formatterFn);
        }
      }
      function useTransition() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useTransition();
      }
      function useDeferredValue(value) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDeferredValue(value);
      }
      function useId() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useId();
      }
      function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
      }
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {}
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
        }
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix === undefined) {
            try {
              throw Error();
            } catch (x4) {
              var match = x4.stack.trim().match(/\n( *(at )?)/);
              prefix = match && match[1] || "";
            }
          }
          return `
` + prefix + name;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap;
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) {
          return "";
        }
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== undefined) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x4) {
                control = x4;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x4) {
                control = x4;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x4) {
              control = x4;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split(`
`);
            var controlLines = control.stack.split(`
`);
            var s2 = sampleLines.length - 1;
            var c = controlLines.length - 1;
            while (s2 >= 1 && c >= 0 && sampleLines[s2] !== controlLines[c]) {
              c--;
            }
            for (;s2 >= 1 && c >= 0; s2--, c--) {
              if (sampleLines[s2] !== controlLines[c]) {
                if (s2 !== 1 || c !== 1) {
                  do {
                    s2--;
                    c--;
                    if (c < 0 || sampleLines[s2] !== controlLines[c]) {
                      var _frame = `
` + sampleLines[s2].replace(" at new ", " at ");
                      if (fn.displayName && _frame.includes("<anonymous>")) {
                        _frame = _frame.replace("<anonymous>", fn.displayName);
                      }
                      {
                        if (typeof fn === "function") {
                          componentFrameCache.set(fn, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s2 >= 1 && c >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher$1.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        {
          if (typeof fn === "function") {
            componentFrameCache.set(fn, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn, false);
        }
      }
      function shouldConstruct(Component2) {
        var prototype = Component2.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) {
          return "";
        }
        if (typeof type === "function") {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type));
          }
        }
        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type);
        }
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch (x4) {}
            }
          }
        }
        return "";
      }
      var loggedTypeFailures = {};
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes(typeSpecs, values, location, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = undefined;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }
      function setCurrentlyValidatingElement$1(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            setExtraStackFrame(stack);
          } else {
            setExtraStackFrame(null);
          }
        }
      }
      var propTypesMisspellWarningShown;
      {
        propTypesMisspellWarningShown = false;
      }
      function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
          var name = getComponentNameFromType(ReactCurrentOwner.current.type);
          if (name) {
            return `

Check the render method of \`` + name + "`.";
          }
        }
        return "";
      }
      function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
          var fileName = source.fileName.replace(/^.*[\\\/]/, "");
          var lineNumber = source.lineNumber;
          return `

Check your code at ` + fileName + ":" + lineNumber + ".";
        }
        return "";
      }
      function getSourceInfoErrorAddendumForProps(elementProps) {
        if (elementProps !== null && elementProps !== undefined) {
          return getSourceInfoErrorAddendum(elementProps.__source);
        }
        return "";
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
          var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
          if (parentName) {
            info = `

Check the top-level render call using <` + parentName + ">.";
          }
        }
        return info;
      }
      function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) {
          return;
        }
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        var childOwner = "";
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
          childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        }
        {
          setCurrentlyValidatingElement$1(element);
          error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
          setCurrentlyValidatingElement$1(null);
        }
      }
      function validateChildKeys(node, parentType) {
        if (typeof node !== "object") {
          return;
        }
        if (isArray(node)) {
          for (var i2 = 0;i2 < node.length; i2++) {
            var child = node[i2];
            if (isValidElement(child)) {
              validateExplicitKey(child, parentType);
            }
          }
        } else if (isValidElement(node)) {
          if (node._store) {
            node._store.validated = true;
          }
        } else if (node) {
          var iteratorFn = getIteratorFn(node);
          if (typeof iteratorFn === "function") {
            if (iteratorFn !== node.entries) {
              var iterator = iteratorFn.call(node);
              var step;
              while (!(step = iterator.next()).done) {
                if (isValidElement(step.value)) {
                  validateExplicitKey(step.value, parentType);
                }
              }
            }
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type === null || type === undefined || typeof type === "string") {
            return;
          }
          var propTypes;
          if (typeof type === "function") {
            propTypes = type.propTypes;
          } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
            propTypes = type.propTypes;
          } else {
            return;
          }
          if (propTypes) {
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
          } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true;
            var _name = getComponentNameFromType(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
            error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
          }
        }
      }
      function validateFragmentProps(fragment) {
        {
          var keys = Object.keys(fragment.props);
          for (var i2 = 0;i2 < keys.length; i2++) {
            var key = keys[i2];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
              setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error("Invalid attribute `ref` supplied to `React.Fragment`.");
            setCurrentlyValidatingElement$1(null);
          }
        }
      }
      function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type);
        if (!validType) {
          var info = "";
          if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
            info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
          }
          var sourceInfo = getSourceInfoErrorAddendumForProps(props);
          if (sourceInfo) {
            info += sourceInfo;
          } else {
            info += getDeclarationErrorAddendum();
          }
          var typeString;
          if (type === null) {
            typeString = "null";
          } else if (isArray(type)) {
            typeString = "array";
          } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
            typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
            info = " Did you accidentally export a JSX literal instead of a component?";
          } else {
            typeString = typeof type;
          }
          {
            error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
          }
        }
        var element = createElement.apply(this, arguments);
        if (element == null) {
          return element;
        }
        if (validType) {
          for (var i2 = 2;i2 < arguments.length; i2++) {
            validateChildKeys(arguments[i2], type);
          }
        }
        if (type === REACT_FRAGMENT_TYPE) {
          validateFragmentProps(element);
        } else {
          validatePropTypes(element);
        }
        return element;
      }
      var didWarnAboutDeprecatedCreateFactory = false;
      function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        {
          if (!didWarnAboutDeprecatedCreateFactory) {
            didWarnAboutDeprecatedCreateFactory = true;
            warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
          }
          Object.defineProperty(validatedFactory, "type", {
            enumerable: false,
            get: function() {
              warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
              Object.defineProperty(this, "type", {
                value: type
              });
              return type;
            }
          });
        }
        return validatedFactory;
      }
      function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);
        for (var i2 = 2;i2 < arguments.length; i2++) {
          validateChildKeys(arguments[i2], newElement.type);
        }
        validatePropTypes(newElement);
        return newElement;
      }
      function startTransition(scope, options) {
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = {};
        var currentTransition = ReactCurrentBatchConfig.transition;
        {
          ReactCurrentBatchConfig.transition._updatedFibers = new Set;
        }
        try {
          scope();
        } finally {
          ReactCurrentBatchConfig.transition = prevTransition;
          {
            if (prevTransition === null && currentTransition._updatedFibers) {
              var updatedFibersCount = currentTransition._updatedFibers.size;
              if (updatedFibersCount > 10) {
                warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
              }
              currentTransition._updatedFibers.clear();
            }
          }
        }
      }
      var didWarnAboutMessageChannel = false;
      var enqueueTaskImpl = null;
      function enqueueTask(task) {
        if (enqueueTaskImpl === null) {
          try {
            var requireString = ("require" + Math.random()).slice(0, 7);
            var nodeRequire = module && module[requireString];
            enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
          } catch (_err) {
            enqueueTaskImpl = function(callback) {
              {
                if (didWarnAboutMessageChannel === false) {
                  didWarnAboutMessageChannel = true;
                  if (typeof MessageChannel === "undefined") {
                    error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                  }
                }
              }
              var channel = new MessageChannel;
              channel.port1.onmessage = callback;
              channel.port2.postMessage(undefined);
            };
          }
        }
        return enqueueTaskImpl(task);
      }
      var actScopeDepth = 0;
      var didWarnNoAwaitAct = false;
      function act(callback) {
        {
          var prevActScopeDepth = actScopeDepth;
          actScopeDepth++;
          if (ReactCurrentActQueue.current === null) {
            ReactCurrentActQueue.current = [];
          }
          var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
          var result;
          try {
            ReactCurrentActQueue.isBatchingLegacy = true;
            result = callback();
            if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                flushActQueue(queue);
              }
            }
          } catch (error2) {
            popActScope(prevActScopeDepth);
            throw error2;
          } finally {
            ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
          }
          if (result !== null && typeof result === "object" && typeof result.then === "function") {
            var thenableResult = result;
            var wasAwaited = false;
            var thenable = {
              then: function(resolve, reject) {
                wasAwaited = true;
                thenableResult.then(function(returnValue2) {
                  popActScope(prevActScopeDepth);
                  if (actScopeDepth === 0) {
                    recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                  } else {
                    resolve(returnValue2);
                  }
                }, function(error2) {
                  popActScope(prevActScopeDepth);
                  reject(error2);
                });
              }
            };
            {
              if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                Promise.resolve().then(function() {}).then(function() {
                  if (!wasAwaited) {
                    didWarnNoAwaitAct = true;
                    error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                  }
                });
              }
            }
            return thenable;
          } else {
            var returnValue = result;
            popActScope(prevActScopeDepth);
            if (actScopeDepth === 0) {
              var _queue = ReactCurrentActQueue.current;
              if (_queue !== null) {
                flushActQueue(_queue);
                ReactCurrentActQueue.current = null;
              }
              var _thenable = {
                then: function(resolve, reject) {
                  if (ReactCurrentActQueue.current === null) {
                    ReactCurrentActQueue.current = [];
                    recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                  } else {
                    resolve(returnValue);
                  }
                }
              };
              return _thenable;
            } else {
              var _thenable2 = {
                then: function(resolve, reject) {
                  resolve(returnValue);
                }
              };
              return _thenable2;
            }
          }
        }
      }
      function popActScope(prevActScopeDepth) {
        {
          if (prevActScopeDepth !== actScopeDepth - 1) {
            error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
          }
          actScopeDepth = prevActScopeDepth;
        }
      }
      function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
        {
          var queue = ReactCurrentActQueue.current;
          if (queue !== null) {
            try {
              flushActQueue(queue);
              enqueueTask(function() {
                if (queue.length === 0) {
                  ReactCurrentActQueue.current = null;
                  resolve(returnValue);
                } else {
                  recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                }
              });
            } catch (error2) {
              reject(error2);
            }
          } else {
            resolve(returnValue);
          }
        }
      }
      var isFlushing = false;
      function flushActQueue(queue) {
        {
          if (!isFlushing) {
            isFlushing = true;
            var i2 = 0;
            try {
              for (;i2 < queue.length; i2++) {
                var callback = queue[i2];
                do {
                  callback = callback(true);
                } while (callback !== null);
              }
              queue.length = 0;
            } catch (error2) {
              queue = queue.slice(i2 + 1);
              throw error2;
            } finally {
              isFlushing = false;
            }
          }
        }
      }
      var createElement$1 = createElementWithValidation;
      var cloneElement$1 = cloneElementWithValidation;
      var createFactory = createFactoryWithValidation;
      var Children = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray,
        only: onlyChild
      };
      exports.Children = Children;
      exports.Component = Component;
      exports.Fragment = REACT_FRAGMENT_TYPE;
      exports.Profiler = REACT_PROFILER_TYPE;
      exports.PureComponent = PureComponent;
      exports.StrictMode = REACT_STRICT_MODE_TYPE;
      exports.Suspense = REACT_SUSPENSE_TYPE;
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
      exports.cloneElement = cloneElement$1;
      exports.createContext = createContext;
      exports.createElement = createElement$1;
      exports.createFactory = createFactory;
      exports.createRef = createRef;
      exports.forwardRef = forwardRef;
      exports.isValidElement = isValidElement;
      exports.lazy = lazy;
      exports.memo = memo;
      exports.startTransition = startTransition;
      exports.unstable_act = act;
      exports.useCallback = useCallback;
      exports.useContext = useContext;
      exports.useDebugValue = useDebugValue;
      exports.useDeferredValue = useDeferredValue;
      exports.useEffect = useEffect;
      exports.useId = useId;
      exports.useImperativeHandle = useImperativeHandle;
      exports.useInsertionEffect = useInsertionEffect;
      exports.useLayoutEffect = useLayoutEffect;
      exports.useMemo = useMemo;
      exports.useReducer = useReducer;
      exports.useRef = useRef;
      exports.useState = useState;
      exports.useSyncExternalStore = useSyncExternalStore;
      exports.useTransition = useTransition;
      exports.version = ReactVersion;
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error);
      }
    })();
  }
});
var require_react = __commonJS2((exports, module) => {
  var react_development = __toESM2(require_react_development(), 1);
  if (false) {} else {
    module.exports = react_development;
  }
});
var require_react_jsx_dev_runtime_development = __commonJS2((exports) => {
  var React = __toESM2(require_react(), 1);
  if (true) {
    (function() {
      var REACT_ELEMENT_TYPE = Symbol.for("react.element");
      var REACT_PORTAL_TYPE = Symbol.for("react.portal");
      var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
      var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
      var REACT_CONTEXT_TYPE = Symbol.for("react.context");
      var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
      var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
      var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
      var REACT_MEMO_TYPE = Symbol.for("react.memo");
      var REACT_LAZY_TYPE = Symbol.for("react.lazy");
      var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function error(format) {
        {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1;_key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var enableScopeAPI = false;
      var enableCacheElement = false;
      var enableTransitionTracing = false;
      var enableLegacyHidden = false;
      var enableDebugTracing = false;
      var REACT_MODULE_REFERENCE;
      {
        REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      }
      function isValidElementType(type) {
        if (typeof type === "string" || typeof type === "function") {
          return true;
        }
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
          return true;
        }
        if (typeof type === "object" && type !== null) {
          if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
            return true;
          }
        }
        return false;
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) {
          return displayName;
        }
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === "number") {
            error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
          return type;
        }
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              if (outerName !== null) {
                return outerName;
              }
              return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch (x4) {
                return null;
              }
            }
          }
        }
        return null;
      }
      var assign = Object.assign;
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {}
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix === undefined) {
            try {
              throw Error();
            } catch (x4) {
              var match = x4.stack.trim().match(/\n( *(at )?)/);
              prefix = match && match[1] || "";
            }
          }
          return `
` + prefix + name;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap;
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) {
          return "";
        }
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== undefined) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher.current;
          ReactCurrentDispatcher.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x4) {
                control = x4;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x4) {
                control = x4;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x4) {
              control = x4;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split(`
`);
            var controlLines = control.stack.split(`
`);
            var s2 = sampleLines.length - 1;
            var c = controlLines.length - 1;
            while (s2 >= 1 && c >= 0 && sampleLines[s2] !== controlLines[c]) {
              c--;
            }
            for (;s2 >= 1 && c >= 0; s2--, c--) {
              if (sampleLines[s2] !== controlLines[c]) {
                if (s2 !== 1 || c !== 1) {
                  do {
                    s2--;
                    c--;
                    if (c < 0 || sampleLines[s2] !== controlLines[c]) {
                      var _frame = `
` + sampleLines[s2].replace(" at new ", " at ");
                      if (fn.displayName && _frame.includes("<anonymous>")) {
                        _frame = _frame.replace("<anonymous>", fn.displayName);
                      }
                      {
                        if (typeof fn === "function") {
                          componentFrameCache.set(fn, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s2 >= 1 && c >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        {
          if (typeof fn === "function") {
            componentFrameCache.set(fn, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn, false);
        }
      }
      function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) {
          return "";
        }
        if (typeof type === "function") {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type));
          }
        }
        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type);
        }
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch (x4) {}
            }
          }
        }
        return "";
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var loggedTypeFailures = {};
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes(typeSpecs, values, location, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = undefined;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }
      var isArrayImpl = Array.isArray;
      function isArray(a3) {
        return isArrayImpl(a3);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
          var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        {
          try {
            testStringCoercion(value);
            return false;
          } catch (e3) {
            return true;
          }
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
      var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      var specialPropKeyWarningShown;
      var specialPropRefWarningShown;
      var didWarnAboutStringRefs;
      {
        didWarnAboutStringRefs = {};
      }
      function hasValidRef(config) {
        {
          if (hasOwnProperty.call(config, "ref")) {
            var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.ref !== undefined;
      }
      function hasValidKey(config) {
        {
          if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.key !== undefined;
      }
      function warnIfStringRefCannotBeAutoConverted(config, self2) {
        {
          if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
              error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
              didWarnAboutStringRefs[componentName] = true;
            }
          }
        }
      }
      function defineKeyPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
              specialPropKeyWarningShown = true;
              error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
      }
      function defineRefPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
              specialPropRefWarningShown = true;
              error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
      }
      var ReactElement = function(type, key, ref, self2, source, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          _owner: owner
        };
        {
          element._store = {};
          Object.defineProperty(element._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
          });
          Object.defineProperty(element, "_self", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self2
          });
          Object.defineProperty(element, "_source", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
          });
          if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
          }
        }
        return element;
      };
      function jsxDEV(type, config, maybeKey, source, self2) {
        {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          if (maybeKey !== undefined) {
            {
              checkKeyStringCoercion(maybeKey);
            }
            key = "" + maybeKey;
          }
          if (hasValidKey(config)) {
            {
              checkKeyStringCoercion(config.key);
            }
            key = "" + config.key;
          }
          if (hasValidRef(config)) {
            ref = config.ref;
            warnIfStringRefCannotBeAutoConverted(config, self2);
          }
          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config[propName];
            }
          }
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === undefined) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          if (key || ref) {
            var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
            if (key) {
              defineKeyPropWarningGetter(props, displayName);
            }
            if (ref) {
              defineRefPropWarningGetter(props, displayName);
            }
          }
          return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
        }
      }
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement$1(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }
      var propTypesMisspellWarningShown;
      {
        propTypesMisspellWarningShown = false;
      }
      function isValidElement(object) {
        {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
      }
      function getDeclarationErrorAddendum() {
        {
          if (ReactCurrentOwner$1.current) {
            var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
            if (name) {
              return `

Check the render method of \`` + name + "`.";
            }
          }
          return "";
        }
      }
      function getSourceInfoErrorAddendum(source) {
        {
          if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return `

Check your code at ` + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = `

Check the top-level render call using <` + parentName + ">.";
            }
          }
          return info;
        }
      }
      function validateExplicitKey(element, parentType) {
        {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
            childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
          }
          setCurrentlyValidatingElement$1(element);
          error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
          setCurrentlyValidatingElement$1(null);
        }
      }
      function validateChildKeys(node, parentType) {
        {
          if (typeof node !== "object") {
            return;
          }
          if (isArray(node)) {
            for (var i2 = 0;i2 < node.length; i2++) {
              var child = node[i2];
              if (isValidElement(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement(node)) {
            if (node._store) {
              node._store.validated = true;
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type === null || type === undefined || typeof type === "string") {
            return;
          }
          var propTypes;
          if (typeof type === "function") {
            propTypes = type.propTypes;
          } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
            propTypes = type.propTypes;
          } else {
            return;
          }
          if (propTypes) {
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
          } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true;
            var _name = getComponentNameFromType(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
            error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
          }
        }
      }
      function validateFragmentProps(fragment) {
        {
          var keys = Object.keys(fragment.props);
          for (var i2 = 0;i2 < keys.length; i2++) {
            var key = keys[i2];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
              setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error("Invalid attribute `ref` supplied to `React.Fragment`.");
            setCurrentlyValidatingElement$1(null);
          }
        }
      }
      function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
        {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendum(source);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (isArray(type)) {
              typeString = "array";
            } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
          }
          var element = jsxDEV(type, props, key, source, self2);
          if (element == null) {
            return element;
          }
          if (validType) {
            var children = props.children;
            if (children !== undefined) {
              if (isStaticChildren) {
                if (isArray(children)) {
                  for (var i2 = 0;i2 < children.length; i2++) {
                    validateChildKeys(children[i2], type);
                  }
                  if (Object.freeze) {
                    Object.freeze(children);
                  }
                } else {
                  error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                }
              } else {
                validateChildKeys(children, type);
              }
            }
          }
          if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
      }
      var jsxDEV$1 = jsxWithValidation;
      exports.Fragment = REACT_FRAGMENT_TYPE;
      exports.jsxDEV = jsxDEV$1;
    })();
  }
});
var require_jsx_dev_runtime = __commonJS2((exports, module) => {
  var react_jsx_dev_runtime_development = __toESM2(require_react_jsx_dev_runtime_development(), 1);
  if (false) {} else {
    module.exports = react_jsx_dev_runtime_development;
  }
});
var React3 = __toESM2(require_react(), 1);
var import_react = __toESM2(require_react(), 1);
var import_react2 = __toESM2(require_react(), 1);
var import_react3 = __toESM2(require_react(), 1);
var import_react4 = __toESM2(require_react(), 1);
var import_react5 = __toESM2(require_react(), 1);
var import_react6 = __toESM2(require_react(), 1);
var jsx_dev_runtime = __toESM2(require_jsx_dev_runtime(), 1);
var import_react7 = __toESM2(require_react(), 1);
var import_react8 = __toESM2(require_react(), 1);
var import_react9 = __toESM2(require_react(), 1);
var import_react10 = __toESM2(require_react(), 1);
var import_react11 = __toESM2(require_react(), 1);
var import_react12 = __toESM2(require_react(), 1);
var jsx_dev_runtime2 = __toESM2(require_jsx_dev_runtime(), 1);
var jsx_dev_runtime3 = __toESM2(require_jsx_dev_runtime(), 1);
var import_react13 = __toESM2(require_react(), 1);
var import_react14 = __toESM2(require_react(), 1);
var import_react15 = __toESM2(require_react(), 1);
var jsx_dev_runtime4 = __toESM2(require_jsx_dev_runtime(), 1);
var jsx_dev_runtime5 = __toESM2(require_jsx_dev_runtime(), 1);
var import_react16 = __toESM2(require_react(), 1);
var jsx_dev_runtime6 = __toESM2(require_jsx_dev_runtime(), 1);
var jsx_dev_runtime7 = __toESM2(require_jsx_dev_runtime(), 1);
var import_react17 = __toESM2(require_react(), 1);
var import_react18 = __toESM2(require_react(), 1);
var import_react19 = __toESM2(require_react(), 1);
var jsx_dev_runtime8 = __toESM2(require_jsx_dev_runtime(), 1);
var jsx_dev_runtime9 = __toESM2(require_jsx_dev_runtime(), 1);
var jsx_dev_runtime10 = __toESM2(require_jsx_dev_runtime(), 1);
var jsx_dev_runtime11 = __toESM2(require_jsx_dev_runtime(), 1);
var import_react20 = __toESM2(require_react(), 1);
var import_react21 = __toESM2(require_react(), 1);
var import_react22 = __toESM2(require_react(), 1);
var import_react23 = __toESM2(require_react(), 1);
var import_react24 = __toESM2(require_react(), 1);
var import_react25 = __toESM2(require_react(), 1);
var import_react26 = __toESM2(require_react(), 1);
var jsx_dev_runtime12 = __toESM2(require_jsx_dev_runtime(), 1);
var import_react27 = __toESM2(require_react(), 1);
var jsx_dev_runtime13 = __toESM2(require_jsx_dev_runtime(), 1);
var import_react28 = __toESM2(require_react(), 1);
var import_react29 = __toESM2(require_react(), 1);
var jsx_dev_runtime14 = __toESM2(require_jsx_dev_runtime(), 1);
var import_react30 = __toESM2(require_react(), 1);
var jsx_dev_runtime15 = __toESM2(require_jsx_dev_runtime(), 1);
var import_react31 = __toESM2(require_react(), 1);
var import_react32 = __toESM2(require_react(), 1);
var import_react33 = __toESM2(require_react(), 1);
var import_react34 = __toESM2(require_react(), 1);
var jsx_dev_runtime16 = __toESM2(require_jsx_dev_runtime(), 1);
var useSelection = function({ items, maxRows = items.length.valueOf() }) {
  const [selectedIndex, setSelectedIndex] = import_react3.useState(0);
  const [scroll, setScroll] = import_react3.useState(0);
  const numItems = import_react3.useMemo(() => items.length.valueOf(), [items]);
  import_react3.useEffect(() => {
    const defaultSelected = x4(items, (item) => {
      return typeof item === "object" && !!item?.selected;
    });
    if (defaultSelected >= 0) {
      setSelectedIndex(defaultSelected);
    }
  }, [items, setSelectedIndex]);
  const scrollDown = import_react3.useCallback((rows = 1) => {
    setScroll((scroll2) => Math.min(numItems - maxRows, scroll2 + rows));
  }, [setScroll, numItems, maxRows]);
  const scrollUp = import_react3.useCallback((rows = 1) => {
    setScroll((scroll2) => Math.max(0, scroll2 - rows));
  }, [setScroll]);
  const fixScroll = import_react3.useCallback((index) => {
    if (maxRows && index - scroll >= maxRows) {
      scrollDown(Math.max(1, scroll - maxRows + index + 1));
    }
    if (index - scroll < 0) {
      scrollUp(Math.max(1, scroll - index));
    }
  }, [scroll, maxRows, scrollUp, scrollDown]);
  const select = import_react3.useCallback((index) => {
    const newIndex = Math.max(0, Math.min(index, numItems - 1));
    setSelectedIndex(newIndex);
  }, [setSelectedIndex, numItems]);
  const moveSelection = import_react3.useCallback((dy2) => {
    if (dy2) {
      setSelectedIndex((index) => {
        const newIndex = Math.max(0, Math.min(index + dy2, numItems - 1));
        fixScroll(newIndex);
        return newIndex;
      });
    }
  }, [setSelectedIndex, fixScroll, numItems]);
  const selectedItem = import_react3.useMemo(() => items.at(selectedIndex), [items, selectedIndex]);
  return {
    select,
    moveSelection,
    selectedItem,
    scroll,
    scrollUp,
    scrollDown,
    selectedIndex
  };
};
var useInitControlContext = function({ popupControl }) {
  const context = import_react6.useMemo(() => ({
    popupControl
  }), [popupControl]);
  return context;
};
var useControls = function({ active, listener }) {
  const { popupControl } = useControlContext();
  import_react4.useEffect(() => {
    if (active) {
      popupControl.addListener(listener);
      return () => popupControl.removeListener(listener);
    }
  }, [listener, popupControl, active]);
  return { lockState: active ? LockStatus.UNLOCKED : LockStatus.LOCKED, popupControl };
};
var useMouseHover = function({ active }) {
  const [mouseHoverEnabled, setMouseHoverEnabled] = import_react7.useState(false);
  const enableMouseHover = import_react7.useCallback(!mouseHoverEnabled ? () => setMouseHoverEnabled(true) : () => {}, [mouseHoverEnabled]);
  const disableMouseHover = import_react7.useCallback(!mouseHoverEnabled ? () => {} : () => setMouseHoverEnabled(false), [mouseHoverEnabled]);
  const onUp = import_react7.useCallback(() => {
    setMouseHoverEnabled(false);
  }, [setMouseHoverEnabled]);
  const onDown = import_react7.useCallback(() => {
    setMouseHoverEnabled(false);
  }, [setMouseHoverEnabled]);
  useControls({
    active,
    listener: import_react7.useMemo(() => ({
      onUp,
      onDown
    }), [setMouseHoverEnabled, onUp, onDown])
  });
  return { mouseHoverEnabled, enableMouseHover, disableMouseHover };
};
var useMenu = function({ items, maxRows, onSelect, onBack, active }) {
  const { scroll, scrollUp, scrollDown, select, moveSelection, selectedItem } = useSelection({ items, maxRows });
  const onItemAction = import_react2.useCallback((item) => {
    if (!item) {
      return;
    }
    if (typeof item === "object" && item.action) {
      item.action().then(() => onSelect(item));
    } else {
      onSelect(item);
    }
  }, [onSelect]);
  const onMenuAction = import_react2.useCallback((index) => {
    onItemAction(items.at(index));
  }, [items, onItemAction]);
  const onAction = import_react2.useCallback(() => {
    onItemAction(selectedItem);
  }, [onItemAction, selectedItem]);
  const onUp = import_react2.useCallback(() => {
    moveSelection(-1);
  }, [moveSelection]);
  const onDown = import_react2.useCallback(() => {
    moveSelection(1);
  }, [moveSelection]);
  const onRight = import_react2.useCallback(() => {
    if (typeof selectedItem === "object" && selectedItem.submenu) {
      onItemAction(selectedItem);
    }
  }, [onItemAction, selectedItem]);
  const { lockState } = useControls({
    active,
    listener: import_react2.useMemo(() => ({
      onAction,
      onStart: onAction,
      onUp,
      onDown,
      onBack,
      onRight
    }), [moveSelection, onAction, onBack, onUp, onDown])
  });
  const { enableMouseHover, mouseHoverEnabled } = useMouseHover({ active });
  return {
    selectedItem,
    select,
    scroll,
    scrollUp,
    scrollDown,
    disabled: lockState === LockStatus.LOCKED,
    enableMouseHover,
    mouseHoverEnabled,
    onMenuAction,
    onUp,
    onDown
  };
};
var useInitLayoutContext = function() {
  const layoutModels = import_react12.useMemo(() => ({}), []);
  const getLayout = import_react12.useCallback((layout) => {
    if (typeof layout === "string") {
      return layoutModels[layout] ?? undefined;
    }
    if (layout.name) {
      layoutModels[layout.name] = layout;
    }
    return layout;
  }, [layoutModels]);
  const uniqueLayout = import_react12.useMemo(() => new x22, []);
  const context = import_react12.useMemo(() => ({
    getLayout,
    uniqueLayout
  }), [getLayout, uniqueLayout]);
  return context;
};
var usePopupLayout = function({ layout, setVisible }) {
  const { getLayout, uniqueLayout } = useLayoutContext();
  const layoutModel = getLayout(layout);
  const x32 = layoutModel?.position?.[0] ?? DEFAULT_HORIZONTAL_PADDING;
  const y4 = layoutModel?.position?.[1] ?? DEFAULT_VERTICAL_PADDING;
  const left = layoutModel?.positionFromRight ? `calc(100% - ${x32}px)` : x32;
  const top = layoutModel?.positionFromBottom ? `calc(100% - ${y4}px)` : y4;
  const right = DEFAULT_HORIZONTAL_PADDING;
  const bottom = DEFAULT_VERTICAL_PADDING;
  const width = layoutModel?.size?.[0] || undefined;
  const height = layoutModel?.size?.[1] || undefined;
  import_react10.useEffect(() => {
    const uid = typeof layout === "string" ? layout : layout.name;
    if (uid) {
      return uniqueLayout.registerLayout(uid, setVisible);
    }
  }, [setVisible, uniqueLayout]);
  return { left, top, right, bottom, width, height, valid: !!layoutModel };
};
var Popup2 = function({
  children,
  layout,
  style,
  disabled,
  removed,
  onBack,
  fit,
  zIndex,
  clickThrough,
  leaveBorderUnchanged,
  setVisible,
  visible
}) {
  const [h6, setH] = import_react9.useState(0);
  import_react9.useEffect(() => {
    requestAnimationFrame(() => setH(100));
  }, [setH]);
  const [localVisible, setLocalVisible] = import_react9.useState(true);
  const { top, left, right, bottom, width, height, valid } = usePopupLayout({
    layout,
    setVisible: setVisible ?? setLocalVisible
  });
  return jsx_dev_runtime3.jsxDEV("div", {
    style: {
      position: "fixed",
      left: 0,
      top: 0,
      width: "100vw",
      height: "100vh",
      zIndex,
      pointerEvents: clickThrough ? "none" : undefined
    },
    children: [
      onBack ? jsx_dev_runtime3.jsxDEV("div", {
        style: {
          position: "absolute",
          left: 0,
          top: 0,
          width: "100%",
          height: "100%",
          cursor: "pointer"
        },
        onClick: onBack
      }, undefined, false, undefined, this) : undefined,
      jsx_dev_runtime3.jsxDEV("div", {
        style: {
          ...OVERLAP,
          left,
          top,
          right,
          bottom,
          width,
          height: fit ? 0 : height,
          fontSize: style?.fontSize ?? DEFAULT_FONT_SIZE,
          display: valid && (visible ?? localVisible) ? "" : "none"
        },
        children: jsx_dev_runtime3.jsxDEV("div", {
          className: "pop-up",
          style: {
            ...POPUP_CSS,
            marginTop: `${removed ? height ? `${height}px` : "80%" : "0px"}`,
            width: "100%",
            height: removed ? 0 : fit ? undefined : `${h6}%`,
            overflow: "hidden",
            opacity: removed ? 0 : 1,
            transition: "height .2s, margin-top .2s, opacity .2s",
            outlineColor: !leaveBorderUnchanged && disabled ? "whitesmoke" : "white"
          },
          children: jsx_dev_runtime3.jsxDEV("div", {
            className: "double-border",
            style: {
              ...DOUBLE_BORDER_CSS,
              height: fit ? undefined : `calc(100% - ${DOUBLE_BORDER_HEIGHT_OFFSET}px)`,
              borderColor: !leaveBorderUnchanged && disabled ? "silver" : "white",
              overflow: "hidden"
            },
            children: removed ? undefined : children
          }, undefined, false, undefined, this)
        }, undefined, false, undefined, this)
      }, undefined, false, undefined, this)
    ]
  }, undefined, true, undefined, this);
};
var useRemove = function() {
  const [removed, setRemoved] = import_react13.useState(false);
  const remove = import_react13.useCallback((onClose) => {
    setRemoved(true);
    const timeout = setTimeout(() => {
      setRemoved(false);
      onClose();
    }, 150);
    return () => clearTimeout(timeout);
  }, [setRemoved]);
  return { removed, remove };
};
var Images = function({ images }) {
  const imgs = import_react15.useMemo(() => Array.isArray(images) ? images : [images], [images]);
  return jsx_dev_runtime4.jsxDEV(jsx_dev_runtime4.Fragment, {
    children: imgs.map((image, index) => {
      const imgModel = typeof image === "string" ? { src: image } : image;
      return jsx_dev_runtime4.jsxDEV("div", {
        style: {
          backgroundImage: `url("${imgModel.src}")`,
          backgroundSize: imgModel.size ?? "contain",
          width: "100%",
          height: "100%",
          backgroundRepeat: "no-repeat",
          backgroundPosition: "center",
          marginTop: `-${index * 100}%`,
          transform: imgModel.transform
        }
      }, index, false, undefined, this);
    })
  }, undefined, false, undefined, this);
};
var Picture = function({ picture, removed }) {
  return jsx_dev_runtime5.jsxDEV(jsx_dev_runtime5.Fragment, {
    children: [
      jsx_dev_runtime5.jsxDEV(Popup2, {
        layout: picture.layout ?? {},
        style: picture.style,
        removed,
        clickThrough: true,
        children: jsx_dev_runtime5.jsxDEV("div", {
          style: {
            width: "100%",
            height: "100%",
            pointerEvents: "none",
            overflow: "hidden"
          },
          children: jsx_dev_runtime5.jsxDEV(Images, {
            images: picture.images
          }, undefined, false, undefined, this)
        }, undefined, false, undefined, this)
      }, undefined, false, undefined, this),
      picture.dialog && jsx_dev_runtime5.jsxDEV(Container2, {
        dialog: picture.dialog,
        focusLess: true,
        removed
      }, undefined, false, undefined, this)
    ]
  }, undefined, true, undefined, this);
};
var Label = function({ label }) {
  return label && jsx_dev_runtime6.jsxDEV("div", {
    style: { margin: 5, textAlign: "center" },
    children: label
  }, undefined, false, undefined, this);
};
var Button = function({ stretch, selected, hideOutline, emoji, text, padding, margin, disabled, onMouseOver, onMouseDown, onClick }) {
  return jsx_dev_runtime7.jsxDEV("div", {
    style: {
      padding,
      margin,
      outline: !hideOutline ? "1px solid #333333" : undefined,
      backgroundColor: selected ? "white" : "black",
      opacity: disabled ? 0.3 : 1,
      transition: "opacity .3s",
      textAlign: "center",
      flexGrow: stretch ? 1 : undefined
    },
    onMouseOver,
    onMouseDown,
    onClick,
    children: [
      jsx_dev_runtime7.jsxDEV("span", {
        style: {
          color: selected ? "transparent" : "white",
          textShadow: selected ? "0 0 0 black" : undefined
        },
        children: emoji
      }, undefined, false, undefined, this),
      jsx_dev_runtime7.jsxDEV("span", {
        style: {
          color: selected ? "black" : "white"
        },
        children: text
      }, undefined, false, undefined, this)
    ]
  }, undefined, true, undefined, this);
};
var useEditControlContext = function() {
  const [editing, setEditing] = import_react19.useState(false);
  const context = import_react19.useMemo(() => ({
    editing,
    toggleEditing: () => {
      setEditing((editing2) => !editing2);
    }
  }), [editing, setEditing]);
  return context;
};
var EditToggle = function() {
  const { editing, toggleEditing } = useEditContext();
  return jsx_dev_runtime8.jsxDEV("button", {
    style: {
      position: "absolute",
      top: 0,
      right: 0,
      cursor: "pointer",
      zIndex: 1000,
      padding: "5px 15px",
      backgroundColor: editing ? "#cceeff" : undefined
    },
    onClick: () => toggleEditing(),
    children: editing ? "EDIT ON" : "EDIT OFF"
  }, undefined, false, undefined, this);
};
var BasicPopup = function(props) {
  return jsx_dev_runtime10.jsxDEV(LayoutContextProvider, {
    children: jsx_dev_runtime10.jsxDEV(ControlContextProvider, {
      popupControl: props.popupControl,
      children: jsx_dev_runtime10.jsxDEV(EditContextProvider2, {
        editor: props.editor,
        children: jsx_dev_runtime10.jsxDEV(Container2, {
          ...props
        }, undefined, false, undefined, this)
      }, undefined, false, undefined, this)
    }, undefined, false, undefined, this)
  }, undefined, false, undefined, this);
};
var openMenu = function({
  layouts,
  pictures,
  menu,
  dialog,
  prompt: prompt2,
  onSelect = (item) => console.log("SELECT", item),
  onPrompt = (text) => console.log("PROMPT", text),
  onClose = () => console.log("CLOSE"),
  root = document.body,
  popupControl = new PopupControl,
  editor
}) {
  const rootElem = document.createElement("div");
  rootElem.style.position = "absolute";
  rootElem.style.left = "0px";
  rootElem.style.top = "0px";
  rootElem.style.width = "100%";
  rootElem.style.height = "100%";
  rootElem.style.overflow = "hidden";
  const reactRoot = client.default.createRoot(rootElem);
  const detach = async () => reactRoot.unmount();
  const html = jsx_dev_runtime11.jsxDEV(BasicPopup, {
    layouts,
    pictures,
    dialog,
    menu,
    prompt: prompt2,
    onSelect,
    onPrompt,
    detach,
    popupControl,
    onClose: async () => setTimeout(() => {
      detach();
      onClose();
    }, 10),
    editor
  }, undefined, false, undefined, this);
  reactRoot.render(html);
  root.appendChild(rootElem);
  return { popupControl, detach };
};
var useLanguageModel = function({ languages }) {
  const [lang, setLang] = import_react17.useState(0);
  const currentLanguageModel = import_react17.useMemo(() => {
    const language = languages?.[lang ?? 0] ?? DEFAULT_LANGUAGE;
    return typeof language === "string" ? DEFAULT_LANGUAGES[language] : language;
  }, [prompt, languages, lang]);
  const getLanguageModel = import_react17.useCallback((language) => {
    return typeof language === "string" ? DEFAULT_LANGUAGES[language] : language;
  }, []);
  const { popupControl } = useControlContext();
  const chooseLanguage = import_react17.useCallback(() => {
    openMenu({
      menu: {
        builtIn: true,
        layout: {
          position: [150, 50],
          size: [200, 200]
        },
        items: languages?.map((language, index) => {
          const languageModel = getLanguageModel(language);
          return {
            emoji: languageModel.emoji,
            label: languageModel.name,
            index,
            back: true,
            selected: lang === index
          };
        }) ?? []
      },
      popupControl,
      onSelect(item) {
        setLang(item.index);
      }
    });
  }, [languages, getLanguageModel, setLang, lang, popupControl]);
  return { currentLanguageModel, getLanguageModel, chooseLanguage: languages ? chooseLanguage : undefined };
};
var useAlphabet = function({ languageModel }) {
  const [capitalize, setCapitalize] = import_react20.useState(false);
  import_react20.useEffect(() => {
    if (!languageModel.capitalize) {
      setCapitalize(false);
    }
  }, [languageModel, setCapitalize]);
  const alphabet = import_react20.useMemo(() => {
    const letters = import_hangul_js.default.disassemble(languageModel.alphabet);
    return capitalize ? letters.map((l4) => l4.toUpperCase()) : letters;
  }, [capitalize, import_hangul_js.default, languageModel]);
  return { alphabet, setCapitalize };
};
var useTextInput = function({ defaultText, randomList }) {
  const [text, setText] = import_react21.useState(defaultText);
  const addLetter = import_react21.useCallback((letter) => {
    setText((text2) => {
      const letters = import_hangul_js2.default.disassemble(text2 ?? "");
      letters.push(letter);
      return import_hangul_js2.default.assemble(letters);
    });
  }, [import_hangul_js2.default, setText]);
  const deleteLetter = import_react21.useCallback(() => {
    setText((text2) => {
      const letters = import_hangul_js2.default.disassemble(text2 ?? "");
      letters.pop();
      return import_hangul_js2.default.assemble(letters);
    });
  }, [import_hangul_js2.default, setText]);
  const randomizeText = import_react21.useCallback(() => {
    if (randomList) {
      const len = randomList.length.valueOf();
      setText((text2) => {
        const list = [];
        for (let i2 = 0;i2 < len; i2++) {
          const str = randomList.at(i2);
          if (randomList.at(i2) !== text2) {
            list.push(str);
          }
        }
        return list.at(Math.floor(Math.random() * list.length));
      });
    }
  }, [randomList, setText]);
  return { text, setText, addLetter, deleteLetter, randomizeText };
};
var useInputFocus = function({ text }) {
  const { popupControl } = useControlContext();
  const [inputFocus, setInputFocus] = import_react22.useState(false);
  import_react22.useEffect(() => {
    if (inputFocus) {
      popupControl.deactivate();
      return () => popupControl.activate();
    }
  }, [popupControl, inputFocus]);
  const inputRef = import_react22.useRef(null);
  import_react22.useEffect(() => {
    const input = inputRef.current;
    if (input) {
      const onFocus = () => {
        setInputFocus(true);
        window.getSelection()?.selectAllChildren(input);
      };
      const onBlur = () => {
        setInputFocus(false);
        window.getSelection()?.empty();
      };
      input.addEventListener("focus", onFocus);
      input.addEventListener("blur", onBlur);
    }
  }, [inputRef.current, setInputFocus]);
  import_react22.useEffect(() => {
    const input = inputRef.current;
    if (input && input.textContent !== text) {
      input.textContent = text ?? null;
    }
  }, [text, inputRef.current]);
  const setEndOfContenteditable = import_react22.useCallback((elem) => {
    window.getSelection()?.selectAllChildren(elem);
    window.getSelection()?.collapseToEnd();
  }, []);
  const focus = import_react22.useCallback((end) => {
    if (inputRef.current) {
      inputRef.current.focus();
      if (end) {
        setEndOfContenteditable(inputRef.current);
      }
    }
  }, [inputRef.current, setEndOfContenteditable]);
  return { inputRef, inputFocus, focus };
};
var useActiveFocus = function({ disabled } = {}) {
  const [active, setActive] = import_react23.useState(!disabled);
  const { popupControl } = useControlContext();
  import_react23.useEffect(() => {
    if (!disabled) {
      return popupControl.registerActive(setActive);
    }
  }, [popupControl, setActive, disabled]);
  return { active };
};
var useKeyDown = function({ enabled, key, callback }) {
  import_react24.useEffect(() => {
    if (enabled) {
      const listener = (e3) => {
        if (key.indexOf(e3.code) >= 0) {
          callback();
        }
      };
      document.addEventListener("keydown", listener);
      return () => document.removeEventListener("keydown", listener);
    }
  }, [enabled, key, callback]);
};
var usePromptControl = function({
  alphabet,
  onClose,
  addLetter,
  deleteLetter,
  randomizeText,
  chooseLanguage,
  toggleCapitalize,
  onConfirm,
  text,
  randomList,
  inputFocus,
  canCapitalize,
  focus
}) {
  const { active } = useActiveFocus();
  const { removed, remove } = useRemove();
  const [position, setPosition] = import_react25.useState([0, 0]);
  const actionBar = import_react25.useMemo(() => {
    const leftSide = [];
    if (chooseLanguage) {
      leftSide.push(ActionButton.LANG);
    }
    if (canCapitalize) {
      leftSide.push(ActionButton.CAP);
    }
    const rightSize = [ActionButton.DEL, ActionButton.OK];
    const mid = new Array(COLUMNS - leftSide.length - rightSize.length).fill(ActionButton.SPACE);
    return leftSide.concat(mid).concat(rightSize);
  }, [canCapitalize, chooseLanguage]);
  const closePrompt = import_react25.useCallback(() => {
    remove(onClose);
  }, [remove, onClose]);
  const onSpace = import_react25.useCallback((pos) => {
    return actionBar[pos[0]] === ActionButton.SPACE && pos[1] === 4;
  }, [actionBar]);
  const onLetter = import_react25.useCallback((pos) => {
    return pos[1] >= 0 && pos[1] <= 3;
  }, []);
  const confirmText = import_react25.useCallback(() => {
    if (text) {
      onConfirm(text);
      closePrompt();
    }
  }, [text, onConfirm, closePrompt]);
  const onAction = import_react25.useCallback(() => {
    if (onLetter(position)) {
      addLetter(alphabet[position[1] * COLUMNS + position[0]]);
      return;
    }
    if (onSpace(position)) {
      addLetter(" ");
      return;
    }
    if (position[1] === -1) {
      randomizeText();
      return;
    }
    if (position[1] === 4) {
      switch (actionBar[position[0]]) {
        case ActionButton.LANG:
          chooseLanguage?.();
          break;
        case ActionButton.CAP:
          toggleCapitalize();
          break;
        case ActionButton.DEL:
          deleteLetter();
          break;
        case ActionButton.OK:
          confirmText();
          break;
      }
    }
  }, [chooseLanguage, position, toggleCapitalize, onLetter, alphabet, randomizeText, confirmText, addLetter, deleteLetter, actionBar]);
  const onLeft = import_react25.useCallback(() => {
    setPosition((pos) => {
      if (onSpace(pos)) {
        let i2;
        for (i2 = 0;i2 < actionBar.length; i2++) {
          if (actionBar[i2] === ActionButton.SPACE) {
            break;
          }
        }
        return [Math.max(0, i2 - 1), pos[1]];
      }
      return [Math.max(pos[0] - 1, 0), pos[1]];
    });
  }, [setPosition, onSpace, actionBar]);
  const onRight = import_react25.useCallback(() => {
    setPosition((pos) => {
      if (onSpace(pos)) {
        let i2;
        for (i2 = actionBar.length - 1;i2 >= 0; i2--) {
          if (actionBar[i2] === ActionButton.SPACE) {
            break;
          }
        }
        return [Math.min(actionBar.length - 1, i2 + 1), pos[1]];
      }
      return [Math.min(pos[0] + 1, COLUMNS - 1), pos[1]];
    });
  }, [setPosition, onSpace, actionBar]);
  const onUp = import_react25.useCallback(() => {
    setPosition((pos) => [pos[0], Math.max(randomList ? -1 : 0, pos[1] - 1)]);
  }, [setPosition, randomList]);
  const onDown = import_react25.useCallback(() => {
    setPosition((pos) => [pos[0], Math.min(4, pos[1] + 1)]);
  }, [setPosition]);
  const { lockState, popupControl } = useControls({
    active,
    listener: import_react25.useMemo(() => ({
      onLeft,
      onRight,
      onUp,
      onDown,
      onBack: closePrompt,
      onAction,
      onStart: confirmText
    }), [onLeft, onRight, onUp, onDown, closePrompt, onAction])
  });
  useKeyDown({
    enabled: import_react25.useMemo(() => canCapitalize && !inputFocus, [canCapitalize, inputFocus]),
    key: ["ShiftLeft", "ShiftRight"],
    callback: toggleCapitalize
  });
  useKeyDown({
    enabled: !inputFocus,
    key: ["Enter"],
    callback: import_react25.useCallback(() => popupControl.onAction(), [popupControl])
  });
  useKeyDown({
    enabled: !inputFocus,
    key: ["Backspace", "Tab"],
    callback: () => focus(true)
  });
  const { enableMouseHover, mouseHoverEnabled } = useMouseHover({ active });
  return {
    disabled: lockState === LockStatus.LOCKED,
    removed,
    enableMouseHover,
    mouseHoverEnabled,
    position,
    setPosition,
    actionButtonSelected: position[1] < 0 ? ActionButton.RANDOM : position[1] !== 4 ? undefined : actionBar[position[0]],
    onAction
  };
};
var __spreadArray = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i2 = 0, l4 = from.length, ar2;i2 < l4; i2++) {
      if (ar2 || !(i2 in from)) {
        if (!ar2)
          ar2 = Array.prototype.slice.call(from, 0, i2);
        ar2[i2] = from[i2];
      }
    }
  return to.concat(ar2 || Array.prototype.slice.call(from));
};
var hash = function(value, length) {
  return charat(value, 0) ^ 45 ? (((length << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;
};
var trim = function(value) {
  return value.trim();
};
var match = function(value, pattern) {
  return (value = pattern.exec(value)) ? value[0] : value;
};
var replace = function(value, pattern, replacement) {
  return value.replace(pattern, replacement);
};
var indexof = function(value, search, position) {
  return value.indexOf(search, position);
};
var charat = function(value, index) {
  return value.charCodeAt(index) | 0;
};
var substr = function(value, begin, end) {
  return value.slice(begin, end);
};
var strlen = function(value) {
  return value.length;
};
var sizeof = function(value) {
  return value.length;
};
var append = function(value, array) {
  return array.push(value), value;
};
var combine = function(array, callback) {
  return array.map(callback).join("");
};
var filter = function(array, pattern) {
  return array.filter(function(value) {
    return !match(value, pattern);
  });
};
var node = function(value, root, parent, type, props, children, length, siblings) {
  return { value, root, parent, type, props, children, line, column, length, return: "", siblings };
};
var copy = function(root, props) {
  return assign(node("", null, null, "", null, null, 0, root.siblings), root, { length: -root.length }, props);
};
var lift = function(root) {
  while (root.root)
    root = copy(root.root, { children: [root] });
  append(root, root.siblings);
};
var char = function() {
  return character;
};
var prev = function() {
  character = position > 0 ? charat(characters, --position) : 0;
  if (column--, character === 10)
    column = 1, line--;
  return character;
};
var next = function() {
  character = position < length ? charat(characters, position++) : 0;
  if (column++, character === 10)
    column = 1, line++;
  return character;
};
var peek = function() {
  return charat(characters, position);
};
var caret = function() {
  return position;
};
var slice = function(begin, end) {
  return substr(characters, begin, end);
};
var token = function(type) {
  switch (type) {
    case 0:
    case 9:
    case 10:
    case 13:
    case 32:
      return 5;
    case 33:
    case 43:
    case 44:
    case 47:
    case 62:
    case 64:
    case 126:
    case 59:
    case 123:
    case 125:
      return 4;
    case 58:
      return 3;
    case 34:
    case 39:
    case 40:
    case 91:
      return 2;
    case 41:
    case 93:
      return 1;
  }
  return 0;
};
var alloc = function(value) {
  return line = column = 1, length = strlen(characters = value), position = 0, [];
};
var dealloc = function(value) {
  return characters = "", value;
};
var delimit = function(type) {
  return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
};
var whitespace = function(type) {
  while (character = peek())
    if (character < 33)
      next();
    else
      break;
  return token(type) > 2 || token(character) > 3 ? "" : " ";
};
var escaping = function(index, count) {
  while (--count && next())
    if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
      break;
  return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32));
};
var delimiter = function(type) {
  while (next())
    switch (character) {
      case type:
        return position;
      case 34:
      case 39:
        if (type !== 34 && type !== 39)
          delimiter(character);
        break;
      case 40:
        if (type === 41)
          delimiter(type);
        break;
      case 92:
        next();
        break;
    }
  return position;
};
var commenter = function(type, index) {
  while (next())
    if (type + character === 47 + 10)
      break;
    else if (type + character === 42 + 42 && peek() === 47)
      break;
  return "/*" + slice(index, position - 1) + "*" + from(type === 47 ? type : next());
};
var identifier = function(index) {
  while (!token(peek()))
    next();
  return slice(index, position);
};
var compile = function(value) {
  return dealloc(parse("", null, null, null, [""], value = alloc(value), 0, [0], value));
};
var parse = function(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
  var index = 0;
  var offset = 0;
  var length2 = pseudo;
  var atrule = 0;
  var property = 0;
  var previous = 0;
  var variable = 1;
  var scanning = 1;
  var ampersand = 1;
  var character2 = 0;
  var type = "";
  var props = rules;
  var children = rulesets;
  var reference = rule;
  var characters2 = type;
  while (scanning)
    switch (previous = character2, character2 = next()) {
      case 40:
        if (previous != 108 && charat(characters2, length2 - 1) == 58) {
          if (indexof(characters2 += replace(delimit(character2), "&", "&\f"), "&\f", abs(index ? points[index - 1] : 0)) != -1)
            ampersand = -1;
          break;
        }
      case 34:
      case 39:
      case 91:
        characters2 += delimit(character2);
        break;
      case 9:
      case 10:
      case 13:
      case 32:
        characters2 += whitespace(previous);
        break;
      case 92:
        characters2 += escaping(caret() - 1, 7);
        continue;
      case 47:
        switch (peek()) {
          case 42:
          case 47:
            append(comment(commenter(next(), caret()), root, parent, declarations), declarations);
            break;
          default:
            characters2 += "/";
        }
        break;
      case 123 * variable:
        points[index++] = strlen(characters2) * ampersand;
      case 125 * variable:
      case 59:
      case 0:
        switch (character2) {
          case 0:
          case 125:
            scanning = 0;
          case 59 + offset:
            if (ampersand == -1)
              characters2 = replace(characters2, /\f/g, "");
            if (property > 0 && strlen(characters2) - length2)
              append(property > 32 ? declaration(characters2 + ";", rule, parent, length2 - 1, declarations) : declaration(replace(characters2, " ", "") + ";", rule, parent, length2 - 2, declarations), declarations);
            break;
          case 59:
            characters2 += ";";
          default:
            append(reference = ruleset(characters2, root, parent, index, offset, rules, points, type, props = [], children = [], length2, rulesets), rulesets);
            if (character2 === 123)
              if (offset === 0)
                parse(characters2, root, reference, reference, props, rulesets, length2, points, children);
              else
                switch (atrule === 99 && charat(characters2, 3) === 110 ? 100 : atrule) {
                  case 100:
                  case 108:
                  case 109:
                  case 115:
                    parse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length2, children), children), rules, children, length2, points, rule ? props : children);
                    break;
                  default:
                    parse(characters2, reference, reference, reference, [""], children, 0, points, children);
                }
        }
        index = offset = property = 0, variable = ampersand = 1, type = characters2 = "", length2 = pseudo;
        break;
      case 58:
        length2 = 1 + strlen(characters2), property = previous;
      default:
        if (variable < 1) {
          if (character2 == 123)
            --variable;
          else if (character2 == 125 && variable++ == 0 && prev() == 125)
            continue;
        }
        switch (characters2 += from(character2), character2 * variable) {
          case 38:
            ampersand = offset > 0 ? 1 : (characters2 += "\f", -1);
            break;
          case 44:
            points[index++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
            break;
          case 64:
            if (peek() === 45)
              characters2 += delimit(next());
            atrule = peek(), offset = length2 = strlen(type = characters2 += identifier(caret())), character2++;
            break;
          case 45:
            if (previous === 45 && strlen(characters2) == 2)
              variable = 0;
        }
    }
  return rulesets;
};
var ruleset = function(value, root, parent, index, offset, rules, points, type, props, children, length2, siblings) {
  var post = offset - 1;
  var rule = offset === 0 ? rules : [""];
  var size = sizeof(rule);
  for (var i2 = 0, j2 = 0, k2 = 0;i2 < index; ++i2)
    for (var x32 = 0, y4 = substr(value, post + 1, post = abs(j2 = points[i2])), z3 = value;x32 < size; ++x32)
      if (z3 = trim(j2 > 0 ? rule[x32] + " " + y4 : replace(y4, /&\f/g, rule[x32])))
        props[k2++] = z3;
  return node(value, root, parent, offset === 0 ? RULESET : type, props, children, length2, siblings);
};
var comment = function(value, root, parent, siblings) {
  return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0, siblings);
};
var declaration = function(value, root, parent, length2, siblings) {
  return node(value, root, parent, DECLARATION, substr(value, 0, length2), substr(value, length2 + 1, -1), length2, siblings);
};
var prefix = function(value, length2, children) {
  switch (hash(value, length2)) {
    case 5103:
      return WEBKIT + "print-" + value + value;
    case 5737:
    case 4201:
    case 3177:
    case 3433:
    case 1641:
    case 4457:
    case 2921:
    case 5572:
    case 6356:
    case 5844:
    case 3191:
    case 6645:
    case 3005:
    case 6391:
    case 5879:
    case 5623:
    case 6135:
    case 4599:
    case 4855:
    case 4215:
    case 6389:
    case 5109:
    case 5365:
    case 5621:
    case 3829:
      return WEBKIT + value + value;
    case 4789:
      return MOZ + value + value;
    case 5349:
    case 4246:
    case 4810:
    case 6968:
    case 2756:
      return WEBKIT + value + MOZ + value + MS + value + value;
    case 5936:
      switch (charat(value, length2 + 11)) {
        case 114:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
        case 108:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
        case 45:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
      }
    case 6828:
    case 4268:
    case 2903:
      return WEBKIT + value + MS + value + value;
    case 6165:
      return WEBKIT + value + MS + "flex-" + value + value;
    case 5187:
      return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value;
    case 5443:
      return WEBKIT + value + MS + "flex-item-" + replace(value, /flex-|-self/g, "") + (!match(value, /flex-|baseline/) ? MS + "grid-row-" + replace(value, /flex-|-self/g, "") : "") + value;
    case 4675:
      return WEBKIT + value + MS + "flex-line-pack" + replace(value, /align-content|flex-|-self/g, "") + value;
    case 5548:
      return WEBKIT + value + MS + replace(value, "shrink", "negative") + value;
    case 5292:
      return WEBKIT + value + MS + replace(value, "basis", "preferred-size") + value;
    case 6060:
      return WEBKIT + "box-" + replace(value, "-grow", "") + WEBKIT + value + MS + replace(value, "grow", "positive") + value;
    case 4554:
      return WEBKIT + replace(value, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value;
    case 6187:
      return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
    case 5495:
    case 3959:
      return replace(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
    case 4968:
      return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value + value;
    case 4200:
      if (!match(value, /flex-|baseline/))
        return MS + "grid-column-align" + substr(value, length2) + value;
      break;
    case 2592:
    case 3360:
      return MS + replace(value, "template-", "") + value;
    case 4384:
    case 3616:
      if (children && children.some(function(element, index) {
        return length2 = index, match(element.props, /grid-\w+-end/);
      })) {
        return ~indexof(value + (children = children[length2].value), "span", 0) ? value : MS + replace(value, "-start", "") + value + MS + "grid-row-span:" + (~indexof(children, "span", 0) ? match(children, /\d+/) : +match(children, /\d+/) - +match(value, /\d+/)) + ";";
      }
      return MS + replace(value, "-start", "") + value;
    case 4896:
    case 4128:
      return children && children.some(function(element) {
        return match(element.props, /grid-\w+-start/);
      }) ? value : MS + replace(replace(value, "-end", "-span"), "span ", "") + value;
    case 4095:
    case 3583:
    case 4068:
    case 2532:
      return replace(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
    case 8116:
    case 7059:
    case 5753:
    case 5535:
    case 5445:
    case 5701:
    case 4933:
    case 4677:
    case 5533:
    case 5789:
    case 5021:
    case 4765:
      if (strlen(value) - 1 - length2 > 6)
        switch (charat(value, length2 + 1)) {
          case 109:
            if (charat(value, length2 + 4) !== 45)
              break;
          case 102:
            return replace(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length2 + 3) == 108 ? "$3" : "$2-$3")) + value;
          case 115:
            return ~indexof(value, "stretch", 0) ? prefix(replace(value, "stretch", "fill-available"), length2, children) + value : value;
        }
      break;
    case 5152:
    case 5920:
      return replace(value, /(.+?):(\d+)(\s*\/\s*(span)?\s*(\d+))?(.*)/, function(_3, a22, b3, c22, d2, e3, f4) {
        return MS + a22 + ":" + b3 + f4 + (c22 ? MS + a22 + "-span:" + (d2 ? e3 : +e3 - +b3) + f4 : "") + value;
      });
    case 4949:
      if (charat(value, length2 + 6) === 121)
        return replace(value, ":", ":" + WEBKIT) + value;
      break;
    case 6444:
      switch (charat(value, charat(value, 14) === 45 ? 18 : 11)) {
        case 120:
          return replace(value, /(.+:)([^;\s!]+)(;|(\s+)?!.+)?/, "$1" + WEBKIT + (charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value;
        case 100:
          return replace(value, ":", ":" + MS) + value;
      }
      break;
    case 5719:
    case 2647:
    case 2135:
    case 3927:
    case 2391:
      return replace(value, "scroll-", "scroll-snap-") + value;
  }
  return value;
};
var serialize = function(children, callback) {
  var output = "";
  for (var i2 = 0;i2 < children.length; i2++)
    output += callback(children[i2], i2, children, callback) || "";
  return output;
};
var stringify = function(element, index, children, callback) {
  switch (element.type) {
    case LAYER:
      if (element.children.length)
        break;
    case IMPORT:
    case DECLARATION:
      return element.return = element.return || element.value;
    case COMMENT:
      return "";
    case KEYFRAMES:
      return element.return = element.value + "{" + serialize(element.children, callback) + "}";
    case RULESET:
      if (!strlen(element.value = element.props.join(",")))
        return "";
  }
  return strlen(children = serialize(element.children, callback)) ? element.return = element.value + "{" + children + "}" : "";
};
var middleware = function(collection) {
  var length2 = sizeof(collection);
  return function(element, index, children, callback) {
    var output = "";
    for (var i2 = 0;i2 < length2; i2++)
      output += collection[i2](element, index, children, callback) || "";
    return output;
  };
};
var rulesheet = function(callback) {
  return function(element) {
    if (!element.root) {
      if (element = element.return)
        callback(element);
    }
  };
};
var prefixer = function(element, index, children, callback) {
  if (element.length > -1) {
    if (!element.return)
      switch (element.type) {
        case DECLARATION:
          element.return = prefix(element.value, element.length, children);
          return;
        case KEYFRAMES:
          return serialize([copy(element, { value: replace(element.value, "@", "@" + WEBKIT) })], callback);
        case RULESET:
          if (element.length)
            return combine(children = element.props, function(value) {
              switch (match(value, callback = /(::plac\w+|:read-\w+)/)) {
                case ":read-only":
                case ":read-write":
                  lift(copy(element, { props: [replace(value, /:(read-\w+)/, ":" + MOZ + "$1")] }));
                  lift(copy(element, { props: [value] }));
                  assign(element, { props: filter(children, callback) });
                  break;
                case "::placeholder":
                  lift(copy(element, { props: [replace(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")] }));
                  lift(copy(element, { props: [replace(value, /:(plac\w+)/, ":" + MOZ + "$1")] }));
                  lift(copy(element, { props: [replace(value, /:(plac\w+)/, MS + "input-$1")] }));
                  lift(copy(element, { props: [value] }));
                  assign(element, { props: filter(children, callback) });
                  break;
              }
              return "";
            });
      }
  }
};
var Prompt = function({ prompt: prompt2, onConfirm, onClose }) {
  const { currentLanguageModel, chooseLanguage } = useLanguageModel({ languages: prompt2.languages });
  const { alphabet, setCapitalize } = useAlphabet({ languageModel: currentLanguageModel });
  const { addLetter, deleteLetter, randomizeText, text, setText } = useTextInput({ defaultText: prompt2.defaultText, randomList: prompt2.randomText });
  const { inputFocus, inputRef, focus } = useInputFocus({ text });
  const { disabled, removed, enableMouseHover, mouseHoverEnabled, position: position2, setPosition, actionButtonSelected, onAction } = usePromptControl({
    alphabet,
    text,
    onClose,
    addLetter,
    deleteLetter,
    randomizeText,
    toggleCapitalize: import_react16.useCallback(() => setCapitalize((cap) => !cap), [setCapitalize]),
    chooseLanguage,
    onConfirm: prompt2.input ?? onConfirm,
    randomList: prompt2.randomText,
    inputFocus,
    canCapitalize: currentLanguageModel.capitalize,
    focus
  });
  const clickable = import_react16.useMemo(() => !disabled && mouseHoverEnabled, [disabled, mouseHoverEnabled]);
  return jsx_dev_runtime12.jsxDEV(jsx_dev_runtime12.Fragment, {
    children: jsx_dev_runtime12.jsxDEV(Popup2, {
      layout: prompt2.layout ?? {},
      style: prompt2.style,
      removed,
      disabled,
      onBack: onClose,
      fit: true,
      children: jsx_dev_runtime12.jsxDEV("div", {
        style: { padding: 5 },
        children: [
          jsx_dev_runtime12.jsxDEV(Label, {
            label: prompt2.label
          }, undefined, false, undefined, this),
          jsx_dev_runtime12.jsxDEV("div", {
            style: { padding: 5, display: "flex" },
            children: [
              jsx_dev_runtime12.jsxDEV("div", {
                autoCorrect: "off",
                autoCapitalize: "off",
                spellCheck: "false",
                style: {
                  flex: 1,
                  color: "white",
                  backgroundColor: "black",
                  fontSize: 20,
                  border: "2px solid white",
                  borderRadius: "5px",
                  padding: 10,
                  cursor: "text",
                  minHeight: 25
                },
                onClick: () => focus(),
                children: [
                  jsx_dev_runtime12.jsxDEV("div", {
                    ref: inputRef,
                    contentEditable: true,
                    style: { width: "100%", display: "inline" },
                    onKeyDown: (e3) => {
                      if (e3.code === "Enter") {
                        e3.preventDefault();
                      }
                    },
                    onKeyUp: ({ code, currentTarget }) => {
                      if (code === "Escape") {
                        currentTarget.blur();
                      } else if (code === "Enter") {
                        currentTarget.blur();
                        setPosition([COLUMNS2 - 1, 4]);
                      }
                    },
                    onInput: ({ currentTarget }) => setText(currentTarget.textContent ?? undefined)
                  }, undefined, false, undefined, this),
                  !inputFocus && jsx_dev_runtime12.jsxDEV(Blink, {
                    children: "  "
                  }, undefined, false, undefined, this)
                ]
              }, undefined, true, undefined, this),
              prompt2.randomText ? jsx_dev_runtime12.jsxDEV(Button, {
                hideOutline: true,
                selected: !inputFocus && actionButtonSelected === ActionButton.RANDOM,
                padding: 5,
                margin: 5,
                emoji: "\uD83C\uDFB2",
                disabled: inputFocus,
                onMouseOver: () => {
                  setPosition([COLUMNS2 - 1, -1]);
                },
                onMouseDown: () => {
                  setPosition([COLUMNS2 - 1, -1]);
                },
                onClick: onAction
              }, undefined, false, undefined, this) : undefined
            ]
          }, undefined, true, undefined, this),
          jsx_dev_runtime12.jsxDEV("div", {
            style: {
              pointerEvents: inputFocus ? "none" : undefined,
              opacity: inputFocus ? 0.3 : 1,
              transition: "opacity .3s",
              cursor: clickable ? "inherit" : "auto"
            },
            onMouseMove: () => {
              if (!disabled) {
                enableMouseHover();
              }
            },
            children: jsx_dev_runtime12.jsxDEV("div", {
              children: [
                jsx_dev_runtime12.jsxDEV("div", {
                  style: {
                    margin: 5,
                    display: "grid",
                    gridTemplateColumns: GRID_TEMPLATE_COLUMN
                  },
                  children: alphabet.map((letter, index) => {
                    return jsx_dev_runtime12.jsxDEV(Button, {
                      selected: !inputFocus && Math.floor(index / COLUMNS2) === position2[1] && index % COLUMNS2 === position2[0],
                      padding: 3,
                      text: letter,
                      onMouseOver: () => {
                        if (mouseHoverEnabled) {
                          setPosition([index % COLUMNS2, Math.floor(index / COLUMNS2)]);
                        }
                      },
                      onMouseDown: () => {
                        if (mouseHoverEnabled) {
                          setPosition([index % COLUMNS2, Math.floor(index / COLUMNS2)]);
                        }
                      },
                      onClick: onAction
                    }, index, false, undefined, this);
                  })
                }, undefined, false, undefined, this),
                jsx_dev_runtime12.jsxDEV("div", {
                  style: { margin: 5, display: "flex", gap: 10 },
                  children: [
                    prompt2.languages && jsx_dev_runtime12.jsxDEV(Button, {
                      selected: !inputFocus && actionButtonSelected === ActionButton.LANG,
                      padding: "0px 5px",
                      emoji: "\uD83C\uDF10",
                      onMouseOver: () => {
                        if (mouseHoverEnabled) {
                          setPosition([0, 4]);
                        }
                      },
                      onMouseDown: () => {
                        if (mouseHoverEnabled) {
                          setPosition([0, 4]);
                        }
                      },
                      onClick: onAction
                    }, undefined, false, undefined, this),
                    currentLanguageModel.capitalize && jsx_dev_runtime12.jsxDEV(Button, {
                      selected: !inputFocus && actionButtonSelected === ActionButton.CAP,
                      padding: "0px 5px",
                      text: "Aa",
                      onMouseOver: () => {
                        if (mouseHoverEnabled) {
                          setPosition([1, 4]);
                        }
                      },
                      onMouseDown: () => {
                        if (mouseHoverEnabled) {
                          setPosition([1, 4]);
                        }
                      },
                      onClick: onAction
                    }, undefined, false, undefined, this),
                    jsx_dev_runtime12.jsxDEV(Button, {
                      selected: !inputFocus && actionButtonSelected === ActionButton.SPACE,
                      padding: "0px 10px",
                      stretch: true,
                      text: "space",
                      onMouseOver: () => {
                        if (mouseHoverEnabled) {
                          setPosition([5, 4]);
                        }
                      },
                      onMouseDown: () => {
                        if (mouseHoverEnabled) {
                          setPosition([5, 4]);
                        }
                      },
                      onClick: onAction
                    }, undefined, false, undefined, this),
                    jsx_dev_runtime12.jsxDEV(Button, {
                      selected: !inputFocus && actionButtonSelected === ActionButton.DEL,
                      padding: "0px 10px",
                      text: "del",
                      disabled: !text?.length,
                      onMouseOver: () => {
                        if (mouseHoverEnabled && text?.length) {
                          setPosition([COLUMNS2 - 2, 4]);
                        }
                      },
                      onMouseDown: () => {
                        if (mouseHoverEnabled && text?.length) {
                          setPosition([COLUMNS2 - 2, 4]);
                        }
                      },
                      onClick: onAction
                    }, undefined, false, undefined, this),
                    jsx_dev_runtime12.jsxDEV(Button, {
                      selected: !inputFocus && actionButtonSelected === ActionButton.OK,
                      padding: "0px 20px",
                      text: "ok",
                      disabled: !text?.length,
                      onMouseOver: () => {
                        if (mouseHoverEnabled && text?.length) {
                          setPosition([COLUMNS2 - 1, 4]);
                        }
                      },
                      onMouseDown: () => {
                        if (mouseHoverEnabled && text?.length) {
                          setPosition([COLUMNS2 - 1, 4]);
                        }
                      },
                      onClick: onAction
                    }, undefined, false, undefined, this)
                  ]
                }, undefined, true, undefined, this)
              ]
            }, undefined, true, undefined, this)
          }, undefined, false, undefined, this)
        ]
      }, undefined, true, undefined, this)
    }, undefined, false, undefined, this)
  }, undefined, false, undefined, this);
};
var useLayoutRegistry = function({ layouts }) {
  const { getLayout } = useLayoutContext();
  import_react27.useEffect(() => {
    A6(layouts, (layout) => {
      if (layout) {
        getLayout(layout);
      }
    });
  }, [layouts, useLayoutContext]);
};
var Container2 = function({
  layouts,
  pictures,
  dialog,
  menu,
  prompt: prompt2,
  onSelect = async () => {},
  onClose = async () => {},
  onPrompt = async () => {},
  removed,
  focusLess
}) {
  const [index, setIndex] = import_react14.useState(0);
  const onNext = import_react14.useCallback(async () => {
    setIndex((index2) => index2 + 1);
  }, [setIndex]);
  useLayoutRegistry({ layouts });
  const elems = import_react14.useMemo(() => {
    return [
      dialog ? jsx_dev_runtime13.jsxDEV(Dialog, {
        dialog,
        onSelect,
        onPrompt,
        onClose: onNext,
        focusLess
      }, undefined, false, undefined, this) : undefined,
      menu ? jsx_dev_runtime13.jsxDEV(Menu2, {
        menu,
        onSelect,
        onPrompt,
        onClose: onNext
      }, undefined, false, undefined, this) : undefined,
      prompt2 ? jsx_dev_runtime13.jsxDEV(Prompt, {
        prompt: prompt2,
        onConfirm: onPrompt,
        onClose: onNext
      }, undefined, false, undefined, this) : undefined
    ].filter((e3) => !!e3);
  }, [menu, dialog, prompt2, onSelect, onNext]);
  import_react14.useEffect(() => {
    if (elems.length && index >= elems.length) {
      onClose();
    }
  }, [index, elems, onClose]);
  return jsx_dev_runtime13.jsxDEV(jsx_dev_runtime13.Fragment, {
    children: [
      elems[index],
      pictures?.map((picture, index2) => jsx_dev_runtime13.jsxDEV(Picture, {
        removed,
        picture
      }, index2, false, undefined, this))
    ]
  }, undefined, true, undefined, this);
};
var useEditMenu = function({ menu, active }) {
  const { editing } = useEditContext();
  const [editCount, setEditCount] = import_react28.useState(0);
  const addItem = import_react28.useCallback(async () => {
    const items2 = [];
    let i2;
    for (i2 = 1;x4(menu.items, (item) => {
      const label = typeof item === "string" ? item : item.label;
      return label === "untitled " + i2;
    }) >= 0; i2++) {}
    A6(menu.items, (item) => {
      items2.push(item);
    });
    items2.push({
      label: `untitled ${i2}`
    });
    menu.items = items2;
    setEditCount((count) => count + 1);
  }, [menu, setEditCount, editCount]);
  const onAddSubmenu = import_react28.useCallback((index) => {
    const items2 = [];
    A6(menu.items, (item2) => items2.push(item2));
    const item = items2[index];
    const itemModel = !item ? { label: "untitled" } : typeof item === "string" ? { label: item } : item;
    itemModel.submenu = itemModel.submenu ?? { items: [] };
    items2[index] = itemModel;
    menu.items = items2;
    setEditCount((count) => count + 1);
  }, [menu, setEditCount, editCount]);
  const onRemoveSubmenu = import_react28.useCallback((index) => {
    const items2 = [];
    A6(menu.items, (item2) => items2.push(item2));
    const item = items2[index];
    const itemModel = !item ? { label: "untitled" } : typeof item === "string" ? { label: item } : item;
    delete itemModel.submenu;
    items2[index] = itemModel;
    menu.items = items2;
    setEditCount((count) => count + 1);
  }, [menu, setEditCount, editCount]);
  const onAddDialog = import_react28.useCallback((index) => {
    const items2 = [];
    A6(menu.items, (item2) => items2.push(item2));
    const item = items2[index];
    const itemModel = !item ? { label: "untitled" } : typeof item === "string" ? { label: item } : item;
    itemModel.dialog = itemModel.dialog ?? {
      messages: [
        { text: "" }
      ]
    };
    items2[index] = itemModel;
    menu.items = items2;
    setEditCount((count) => count + 1);
  }, [menu, setEditCount, editCount]);
  const onRemoveDialog = import_react28.useCallback((index) => {
    const items2 = [];
    A6(menu.items, (item2) => items2.push(item2));
    const item = items2[index];
    const itemModel = !item ? { label: "untitled" } : typeof item === "string" ? { label: item } : item;
    delete itemModel.dialog;
    items2[index] = itemModel;
    menu.items = items2;
    setEditCount((count) => count + 1);
  }, [menu, setEditCount, editCount]);
  const onToggleBack = import_react28.useCallback((index) => {
    const items2 = [];
    A6(menu.items, (item2) => items2.push(item2));
    const item = items2[index];
    const itemModel = !item ? { label: "untitled" } : typeof item === "string" ? { label: item } : item;
    if (itemModel.back) {
      delete itemModel.back;
    } else {
      itemModel.back = true;
    }
    items2[index] = itemModel;
    menu.items = items2;
    setEditCount((count) => count + 1);
  }, [menu, setEditCount, editCount]);
  const onToggleHideOnSelect = import_react28.useCallback((index) => {
    const items2 = [];
    A6(menu.items, (item2) => items2.push(item2));
    const item = items2[index];
    const itemModel = !item ? { label: "untitled" } : typeof item === "string" ? { label: item } : item;
    if (itemModel.hideOnSelect) {
      delete itemModel.hideOnSelect;
    } else {
      itemModel.hideOnSelect = true;
    }
    items2[index] = itemModel;
    menu.items = items2;
    setEditCount((count) => count + 1);
  }, [menu, setEditCount, editCount]);
  const onEditLabel = import_react28.useCallback((index, text) => {
    const items2 = [];
    A6(menu.items, (item2) => items2.push(item2));
    const item = items2[index];
    const itemModel = !item ? { label: "untitled" } : typeof item === "string" ? { label: item } : item;
    itemModel.label = text;
    items2[index] = itemModel;
    menu.items = items2;
    setEditCount((count) => count + 1);
  }, []);
  const deleteMenuItem = import_react28.useCallback((index) => {
    const items2 = [];
    A6(menu.items, (item, idx) => {
      if (index !== idx) {
        items2.push(item);
      }
    });
    menu.items = items2;
    setEditCount((count) => count + 1);
  }, []);
  const items = import_react28.useMemo(() => {
    if (!editing || !active) {
      return menu.items;
    }
    const items2 = B5(menu.items ?? [], (item) => item);
    const editMenu = menu.builtIn ? [] : [
      { label: "edit menu", builtIn: true, submenu: {
        layout: {
          position: [300, 300],
          size: [300, 300]
        },
        builtIn: true,
        items: [
          {
            label: "new item",
            builtIn: true,
            action: addItem
          },
          { label: "edit pictures", builtIn: true },
          { label: "exit", builtIn: true, back: true }
        ]
      } }
    ];
    return items2.concat(editMenu);
  }, [menu, editing, active, editCount, addItem]);
  const visibleItems = import_react28.useMemo(() => {
    const visibleItems2 = [];
    A6(items, (item) => {
      const itemModel = !item ? { label: "untitled" } : typeof item === "string" ? { label: item } : item;
      if (item && !itemModel.hidden) {
        visibleItems2.push(item);
      }
    });
    return visibleItems2;
  }, [items]);
  return {
    ...menu,
    items: visibleItems,
    editable: editing,
    onAddSubmenu,
    onRemoveSubmenu,
    onAddDialog,
    onRemoveDialog,
    onToggleBack,
    onToggleHideOnSelect,
    onEditLabel,
    deleteMenuItem
  };
};
async function promptText({
  label,
  defaultText,
  languages = ["english", "korean"],
  popupControl = new PopupControl
}) {
  return new Promise((resolve) => {
    openMenu({
      prompt: {
        label,
        defaultText,
        languages
      },
      onPrompt(text) {
        resolve(text);
      },
      onClose() {
        resolve(undefined);
      },
      popupControl
    });
  });
}
var MenuRow = function({ item, index, selectedItem, onMouseMove, onMouseOver, onClick, disabled, editable, active, onAddSubmenu, onRemoveSubmenu, onToggleBack, onToggleHideOnSelect, onEditLabel, builtIn, deleteMenuItem, onAddDialog, onRemoveDialog }) {
  const itemModel = typeof item === "string" ? { label: item } : item;
  const rowSelected = selectedItem === item;
  const [editMenuOn, setEditMenuOn] = import_react29.useState(false);
  const { popupControl } = useControlContext();
  const builtInItem = import_react29.useMemo(() => builtIn ?? itemModel?.builtIn, [itemModel, builtIn]);
  const promptDeleteItem = import_react29.useCallback(async () => {
    const label = itemModel?.label;
    openMenu({
      dialog: {
        layout: {
          position: [150, 50],
          size: [400, 200]
        },
        messages: [
          {
            text: `Do you really want ot delete "${label}"?`,
            menu: {
              builtIn: true,
              layout: {
                position: [150, 270],
                size: [200, 200]
              },
              items: [
                { label: `Yes`, back: true },
                { label: "Cancel", back: true, selected: true }
              ]
            }
          }
        ]
      },
      popupControl,
      onSelect(item2) {
        if (item2.label === "Yes") {
          deleteMenuItem?.(index);
        }
      }
    });
  }, [itemModel, popupControl, deleteMenuItem]);
  const editMenu = import_react29.useMemo(() => ({
    builtIn: true,
    layout: {
      position: [450, 200],
      size: [400, 300],
      positionFromRight: true
    },
    items: [
      {
        label: "edit label",
        action: async () => {
          const newLabel = await promptText({
            label: "Enter a new label",
            defaultText: itemModel?.label,
            popupControl
          });
          if (newLabel) {
            onEditLabel?.(index, newLabel);
          }
        }
      },
      {
        label: "create submenu",
        action: async () => onAddSubmenu?.(index),
        back: true,
        hidden: !!itemModel?.submenu
      },
      {
        label: "remove submenu",
        action: async () => onRemoveSubmenu?.(index),
        back: true,
        hidden: !itemModel?.submenu
      },
      {
        label: "create dialog",
        action: async () => onAddDialog?.(index),
        back: true,
        hidden: !!itemModel?.dialog
      },
      {
        label: "remove dialog",
        action: async () => onRemoveDialog?.(index),
        back: true,
        hidden: !itemModel?.dialog
      },
      {
        label: "back (" + (itemModel?.back ? "ON" : "OFF") + ")",
        action: async () => onToggleBack?.(index)
      },
      {
        label: "hide on select (" + (itemModel?.hideOnSelect ? "ON" : "OFF") + ")",
        action: async () => onToggleHideOnSelect?.(index)
      },
      {
        label: "delete menu item",
        back: true,
        action: promptDeleteItem
      },
      {
        label: "exit",
        back: true
      }
    ]
  }), [itemModel, onAddSubmenu, onRemoveSubmenu, onToggleBack, onToggleHideOnSelect, onEditLabel, promptDeleteItem, index, popupControl]);
  useKeyDown({
    enabled: import_react29.useMemo(() => editable && active && rowSelected && !builtInItem, [editable, active, rowSelected, itemModel, builtInItem]),
    key: "KeyE",
    callback: import_react29.useCallback(() => {
      openMenu({
        menu: editMenu,
        popupControl
      });
    }, [editMenu, popupControl])
  });
  useKeyDown({
    enabled: import_react29.useMemo(() => editable && active && rowSelected && !builtInItem, [editable, active, rowSelected, itemModel, builtInItem]),
    key: "Backspace",
    callback: promptDeleteItem
  });
  return jsx_dev_runtime14.jsxDEV(jsx_dev_runtime14.Fragment, {
    children: jsx_dev_runtime14.jsxDEV("div", {
      style: {
        color: rowSelected ? builtInItem ? "#0000ee" : "black" : disabled ? "silver" : "white",
        backgroundColor: !rowSelected ? builtInItem ? "#0000ee" : "black" : disabled ? "silver" : "white",
        transition: "color .05s, background-color .05s",
        display: "flex"
      },
      onMouseMove,
      onMouseOver,
      onClick: editable && !builtInItem ? () => setEditMenuOn(true) : onClick,
      children: [
        jsx_dev_runtime14.jsxDEV("div", {
          style: { flex: 1, display: "flex", padding: "0 10px" },
          children: [
            itemModel?.icon && jsx_dev_runtime14.jsxDEV("div", {
              style: { width: 30 },
              children: jsx_dev_runtime14.jsxDEV(Images, {
                images: itemModel.icon
              }, undefined, false, undefined, this)
            }, undefined, false, undefined, this),
            itemModel?.emoji && jsx_dev_runtime14.jsxDEV("span", {
              style: { height: 30 },
              children: [
                itemModel?.emoji,
                " "
              ]
            }, undefined, true, undefined, this),
            jsx_dev_runtime14.jsxDEV("span", {
              children: itemModel?.label
            }, undefined, false, undefined, this),
            (itemModel?.showTriangle || itemModel?.showTriangle === undefined && itemModel?.submenu) && jsx_dev_runtime14.jsxDEV("span", {
              style: { height: 30 },
              children: " ⏵"
            }, undefined, false, undefined, this)
          ]
        }, undefined, true, undefined, this),
        editable && active && rowSelected && !builtInItem && jsx_dev_runtime14.jsxDEV("div", {
          style: {
            ...ICON_STYLE,
            backgroundColor: "blue"
          },
          children: "E"
        }, undefined, false, undefined, this),
        editable && !builtInItem && itemModel?.submenu && jsx_dev_runtime14.jsxDEV("div", {
          style: {
            ...ICON_STYLE,
            backgroundColor: "green"
          },
          children: jsx_dev_runtime14.jsxDEV("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            style: {
              height: 30,
              width: 30
            },
            children: [
              jsx_dev_runtime14.jsxDEV("line", {
                x1: "10",
                y1: "10",
                x2: "20",
                y2: "10",
                stroke: "white",
                strokeWidth: "2"
              }, undefined, false, undefined, this),
              jsx_dev_runtime14.jsxDEV("line", {
                x1: "10",
                y1: "14",
                x2: "20",
                y2: "14",
                stroke: "white",
                strokeWidth: "2"
              }, undefined, false, undefined, this),
              jsx_dev_runtime14.jsxDEV("line", {
                x1: "10",
                y1: "18",
                x2: "20",
                y2: "18",
                stroke: "white",
                strokeWidth: "2"
              }, undefined, false, undefined, this)
            ]
          }, undefined, true, undefined, this)
        }, undefined, false, undefined, this),
        editable && !builtInItem && itemModel?.dialog && jsx_dev_runtime14.jsxDEV("div", {
          style: {
            ...ICON_STYLE,
            backgroundColor: "orange"
          },
          children: "D"
        }, undefined, false, undefined, this),
        editable && !builtInItem && itemModel?.back && jsx_dev_runtime14.jsxDEV("div", {
          style: {
            ...ICON_STYLE,
            backgroundColor: "red"
          },
          children: "B"
        }, undefined, false, undefined, this),
        editMenuOn && jsx_dev_runtime14.jsxDEV(Container2, {
          menu: editMenu,
          onClose: () => setEditMenuOn(false)
        }, undefined, false, undefined, this),
        rowSelected && itemModel?.onHover && jsx_dev_runtime14.jsxDEV(Container2, {
          dialog: itemModel.onHover.dialog,
          pictures: itemModel.onHover.pictures,
          focusLess: true
        }, undefined, false, undefined, this)
      ]
    }, undefined, true, undefined, this)
  }, undefined, false, undefined, this);
};
var useMaxRows = function({ size }) {
  const [maxRows, setMaxRows] = import_react30.useState(size);
  const menuRef = import_react30.useRef(null);
  import_react30.useEffect(() => {
    if (!menuRef.current)
      return;
    const resizeObserver = new ResizeObserver((entries) => {
      const height = entries[0].contentRect.height;
      const rows = Math.floor(height / 30);
      if (rows) {
        setMaxRows(rows);
      }
    });
    resizeObserver.observe(menuRef.current);
    return () => resizeObserver.disconnect();
  }, [setMaxRows, menuRef.current]);
  return { maxRows, menuRef };
};
var Menu2 = function({
  menu,
  onSelect,
  onPrompt,
  onClose
}) {
  const { removed, remove } = useRemove();
  const [sub, setSub] = import_react8.useState();
  const [postClose, setPostClose] = import_react8.useState();
  const [hidden, setHidden] = import_react8.useState(false);
  const onBack = import_react8.useCallback((force) => {
    if (menu.backEnabled || force) {
      remove(onClose);
    }
  }, [remove, onClose, menu]);
  const { active } = useActiveFocus();
  const { items = [], style, layout, editable, onAddSubmenu, onRemoveSubmenu, onAddDialog, onRemoveDialog, onToggleBack, onToggleHideOnSelect, onEditLabel, deleteMenuItem } = useEditMenu({ menu, active });
  const { maxRows, menuRef } = useMaxRows({ size: items.length.valueOf() });
  const executeMenuItem = import_react8.useCallback((item) => {
    if (typeof item === "object") {
      if (item.hideOnSelect) {
        setHidden(true);
      }
      if (item.dialog || item.submenu || item.prompt) {
        const { dialog, submenu, prompt: prompt2, ...rest } = item;
        setSub({ dialog, menu: submenu, prompt: prompt2 });
        setPostClose(rest);
      } else {
        setPostClose(undefined);
        setSub(undefined);
        onSelect(item);
        if (item.back) {
          onBack(true);
        }
      }
    } else {
      onSelect(item);
    }
  }, [onSelect, setSub, onBack, setPostClose, setHidden]);
  const { scroll, scrollUp, scrollDown, selectedItem, select, disabled, mouseHoverEnabled, enableMouseHover, onMenuAction } = useMenu({ items, maxRows, onSelect: executeMenuItem, onBack, active });
  const onCloseSub = import_react8.useCallback(async () => {
    setSub(undefined);
    if (postClose) {
      executeMenuItem(postClose);
    }
    setHidden(false);
  }, [setSub, executeMenuItem, setHidden, postClose]);
  const clickable = import_react.useMemo(() => !disabled && mouseHoverEnabled, [disabled, mouseHoverEnabled]);
  return jsx_dev_runtime15.jsxDEV(jsx_dev_runtime15.Fragment, {
    children: [
      jsx_dev_runtime15.jsxDEV(Popup2, {
        layout: layout ?? {},
        style,
        disabled,
        removed: removed || hidden,
        onBack: menu.backEnabled ? onBack : undefined,
        children: [
          jsx_dev_runtime15.jsxDEV("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            style: {
              position: "absolute",
              height: 20,
              marginTop: -8,
              width: 200,
              display: scroll > 0 ? "" : "none",
              left: `calc(50% - 100px)`
            },
            onClick: () => scrollUp(),
            children: jsx_dev_runtime15.jsxDEV("polygon", {
              points: "100,10 110,20 90,20",
              style: { fill: "white" }
            }, undefined, false, undefined, this)
          }, undefined, false, undefined, this),
          jsx_dev_runtime15.jsxDEV("div", {
            style: {
              paddingTop: 10,
              cursor: clickable ? "inherit" : "auto"
            },
            children: jsx_dev_runtime15.jsxDEV("div", {
              ref: menuRef,
              style: { height: `calc(100% - 27px)`, overflow: "hidden" },
              children: jsx_dev_runtime15.jsxDEV("div", {
                style: { marginTop: scroll * -31, transition: "margin-top .2s" },
                children: B5(items, (item, index) => jsx_dev_runtime15.jsxDEV(MenuRow, {
                  index,
                  item,
                  selectedItem,
                  onAddSubmenu,
                  onRemoveSubmenu,
                  onAddDialog,
                  onRemoveDialog,
                  onToggleBack,
                  onToggleHideOnSelect,
                  onEditLabel,
                  deleteMenuItem,
                  disabled,
                  onMouseMove: () => {
                    if (!disabled) {
                      enableMouseHover();
                      select(index);
                    }
                  },
                  active,
                  editable,
                  onMouseOver: clickable ? () => select(index) : undefined,
                  onClick: clickable ? () => onMenuAction(index) : undefined,
                  builtIn: menu.builtIn
                }, index, false, undefined, this))
              }, undefined, false, undefined, this)
            }, undefined, false, undefined, this)
          }, undefined, false, undefined, this),
          jsx_dev_runtime15.jsxDEV("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            style: {
              position: "absolute",
              height: 20,
              width: 200,
              marginTop: -5,
              display: scroll + (maxRows ?? items.length.valueOf()) < items.length.valueOf() ? "" : "none",
              left: `calc(50% - 100px)`
            },
            onClick: () => scrollDown(),
            children: jsx_dev_runtime15.jsxDEV("polygon", {
              points: "100,20 110,10 90,10",
              style: { fill: "white" }
            }, undefined, false, undefined, this)
          }, undefined, false, undefined, this)
        ]
      }, undefined, true, undefined, this),
      sub && jsx_dev_runtime15.jsxDEV(Container2, {
        menu: sub.menu,
        dialog: sub.dialog,
        prompt: sub.prompt,
        pictures: menu.pictures,
        onSelect,
        onClose: onCloseSub,
        onPrompt,
        removed
      }, undefined, false, undefined, this)
    ]
  }, undefined, true, undefined, this);
};
var useDialogState = function() {
  const [index, setIndex] = import_react32.useState(0);
  return {
    index,
    setIndex,
    next: import_react32.useCallback(() => setIndex((index2) => index2 + 1), [setIndex])
  };
};
var useEditDialog = function({ dialog, active }) {
  const { editing } = useEditContext();
  const [editCount, setEditCount] = import_react33.useState(0);
  const insertMessage = import_react33.useCallback((index, text) => {
    const messages2 = B5(dialog.messages, (m22) => m22).filter((m22) => !!m22);
    messages2.splice(index, 0, {
      text
    });
    dialog.messages = messages2;
    setEditCount((count) => count + 1);
  }, [dialog]);
  const deleteMessage = import_react33.useCallback((index) => {
    const messages2 = B5(dialog.messages, (m22) => m22).filter((m22) => !!m22);
    messages2.splice(index, 1);
    dialog.messages = messages2;
    setEditCount((count) => count + 1);
  }, [dialog]);
  const editMessage = import_react33.useCallback((index, text) => {
    const messages2 = B5(dialog.messages, (m22) => m22).filter((m22) => !!m22);
    const message = messages2[index];
    const messageModel = !message ? {} : typeof message === "string" ? { text: message } : message;
    messageModel.text = text;
    messages2[index] = messageModel;
    dialog.messages = messages2;
    setEditCount((count) => count + 1);
  }, [dialog]);
  const messages = import_react33.useMemo(() => !active ? dialog.messages : B5(dialog.messages, (m22) => m22), [dialog, editCount, active]);
  return {
    ...dialog,
    messages,
    editable: editing,
    editMessage,
    insertMessage,
    deleteMessage
  };
};
var useHideMessage = function({ message }) {
  const [visible, setVisible] = import_react34.useState(true);
  const [messageHidden, setMessageHidden] = import_react34.useState(false);
  import_react34.useEffect(() => {
    if (!visible) {
      setMessageHidden(true);
    }
  }, [visible, setMessageHidden]);
  import_react34.useEffect(() => {
    setMessageHidden(false);
  }, [message, setMessageHidden]);
  return { visible: visible && !messageHidden, setVisible };
};
var Dialog = function({ dialog, onSelect, onClose, onPrompt, focusLess }) {
  const { next: next2, index } = useDialogState();
  const [menu, setMenu] = import_react31.useState();
  const [prompt2, setPrompt] = import_react31.useState();
  const { active } = useActiveFocus({ disabled: focusLess });
  const { editing } = useEditContext();
  const [textProgressing, setTextProgressing] = import_react31.useState(true);
  const [subdialog, setSubDialog] = import_react31.useState();
  const [actionPromise, setActionPromise] = import_react31.useState();
  const [waitingForAction, setWaitingForAction] = import_react31.useState(false);
  const nextMessage = import_react31.useCallback(() => {
    if (waitingForAction) {
      return;
    }
    if (actionPromise) {
      setWaitingForAction(true);
      actionPromise.then(next2);
    } else {
      next2();
    }
  }, [next2, actionPromise, setWaitingForAction, waitingForAction]);
  const { lockState, popupControl } = useControls({
    active,
    listener: import_react31.useMemo(() => ({
      onAction: textProgressing ? undefined : nextMessage,
      onBack: !dialog.backEnabled || textProgressing ? undefined : nextMessage
    }), [nextMessage, dialog, textProgressing])
  });
  const { editable, editMessage, insertMessage, deleteMessage, messages } = useEditDialog({ dialog, active });
  const message = import_react31.useMemo(() => {
    const message2 = messages.at(index);
    return typeof message2 == "string" ? { text: message2 } : message2;
  }, [index, messages]);
  import_react31.useEffect(() => {
    setWaitingForAction(false);
  }, [message, setWaitingForAction]);
  import_react31.useEffect(() => {
    setActionPromise(message?.action?.());
  }, [message, setActionPromise]);
  import_react31.useEffect(() => {
    actionPromise?.then(() => setActionPromise(undefined));
  }, [actionPromise, setActionPromise]);
  import_react31.useEffect(() => {
    if (message) {
      if (message.autoNext !== undefined && !waitingForAction) {
        const timeout = setTimeout(nextMessage, message.autoNext);
        return () => {
          clearTimeout(timeout);
        };
      }
    }
  }, [message, nextMessage, waitingForAction]);
  import_react31.useEffect(() => {
    setTextProgressing(true);
    const timeout = setTimeout(() => {
      setTextProgressing(false);
    }, (message?.text?.length ?? 0) * PERIOD);
    return () => clearTimeout(timeout);
  }, [setTextProgressing, PERIOD, message]);
  import_react31.useEffect(() => {
    setSubDialog(message?.subdialog);
    setMenu(message?.menu);
    setPrompt(message?.prompt);
  }, [message, setMenu, setPrompt, setSubDialog]);
  const { removed, remove } = useRemove();
  const { visible, setVisible } = useHideMessage({ message });
  import_react31.useEffect(() => {
    if (index >= messages.length.valueOf() && visible) {
      remove(onClose);
    }
  }, [messages, index, remove, onClose, visible]);
  const onCloseMenu = import_react31.useCallback(async () => {
    setMenu(undefined);
    nextMessage();
  }, [setMenu, nextMessage]);
  const [editDialogOn, setEditDialogOn] = import_react31.useState(false);
  useKeyDown({
    enabled: import_react31.useMemo(() => editable && active && !dialog.builtIn, [active, dialog]),
    key: "KeyE",
    callback: import_react31.useCallback(() => {
      setEditDialogOn((value) => !value);
    }, [setEditDialogOn])
  });
  const editMenu = import_react31.useMemo(() => ({
    builtIn: true,
    layout: {
      position: [50, 200],
      size: [400, 300]
    },
    items: [
      {
        label: "insert new message",
        back: true,
        action: async () => {
          const newText = await promptText({
            label: "Enter a text for the new message",
            popupControl
          });
          if (newText) {
            insertMessage?.(index, newText);
          }
        }
      },
      {
        label: "delete message",
        back: true,
        action: async () => {
          deleteMessage(index);
        }
      },
      {
        label: "edit text",
        back: true,
        action: async () => {
          const newText = await promptText({
            label: "Enter a new text",
            defaultText: message?.text,
            popupControl
          });
          if (newText) {
            editMessage(index, newText);
          }
        }
      },
      { label: "exit", builtIn: true, back: true }
    ]
  }), [message, index, popupControl, editMessage, insertMessage, deleteMessage]);
  const pictures = import_react31.useMemo(() => [...B5(dialog.pictures ?? [], (p32) => p32), ...B5(message?.pictures ?? [], (p32) => p32)].filter((p32) => !!p32), [dialog, message]);
  return jsx_dev_runtime16.jsxDEV(jsx_dev_runtime16.Fragment, {
    children: message?.text && jsx_dev_runtime16.jsxDEV(jsx_dev_runtime16.Fragment, {
      children: [
        jsx_dev_runtime16.jsxDEV(Popup2, {
          layout: dialog.layout ?? {},
          style: dialog.style,
          disabled: lockState === LockStatus.LOCKED,
          removed,
          onBack: dialog.backEnabled ? next2 : undefined,
          clickThrough: focusLess,
          leaveBorderUnchanged: true,
          visible,
          setVisible,
          children: jsx_dev_runtime16.jsxDEV("div", {
            style: {
              width: "100%",
              height: "100%",
              display: "flex",
              padding: 10
            },
            onClick: () => popupControl.onAction(),
            children: [
              !waitingForAction && jsx_dev_runtime16.jsxDEV("div", {
                style: { flex: 1 },
                children: jsx_dev_runtime16.jsxDEV("progressive-text", {
                  period: `${PERIOD}`,
                  children: message?.text
                }, undefined, false, undefined, this)
              }, undefined, false, undefined, this),
              editing && active && jsx_dev_runtime16.jsxDEV("div", {
                style: {
                  textAlign: "center",
                  backgroundColor: "blue",
                  borderRadius: "50%",
                  width: "30px",
                  height: "30px",
                  color: "white"
                },
                children: "E"
              }, undefined, false, undefined, this)
            ]
          }, undefined, true, undefined, this)
        }, undefined, false, undefined, this),
        subdialog && jsx_dev_runtime16.jsxDEV(Container2, {
          dialog: subdialog,
          focusLess: true,
          removed
        }, undefined, false, undefined, this),
        jsx_dev_runtime16.jsxDEV(Container2, {
          pictures,
          menu: !textProgressing ? menu : undefined,
          prompt: !textProgressing ? prompt2 : undefined,
          onSelect,
          onClose: onCloseMenu,
          onPrompt,
          removed
        }, undefined, false, undefined, this),
        editDialogOn && jsx_dev_runtime16.jsxDEV(Container2, {
          menu: editMenu,
          onClose: () => setEditDialogOn(false)
        }, undefined, false, undefined, this)
      ]
    }, undefined, true, undefined, this)
  }, undefined, false, undefined, this);
};
var __create22 = Object.create;
var __defProp22 = Object.defineProperty;
var __getProtoOf22 = Object.getPrototypeOf;
var __getOwnPropNames22 = Object.getOwnPropertyNames;
var __hasOwnProp22 = Object.prototype.hasOwnProperty;
var __toESM22 = (mod, isNodeMode, target) => {
  target = mod != null ? __create22(__getProtoOf22(mod)) : {};
  const to = isNodeMode || !mod || !mod.__esModule ? __defProp22(target, "default", { value: mod, enumerable: true }) : target;
  for (let key of __getOwnPropNames22(mod))
    if (!__hasOwnProp22.call(to, key))
      __defProp22(to, key, {
        get: () => mod[key],
        enumerable: true
      });
  return to;
};
var __commonJS22 = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);
var require_scheduler_development = __commonJS22((exports) => {
  if (true) {
    (function() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error);
      }
      var enableSchedulerDebugging = false;
      var enableProfiling = false;
      var frameYieldMs = 5;
      function push(heap, node2) {
        var index = heap.length;
        heap.push(node2);
        siftUp(heap, node2, index);
      }
      function peek2(heap) {
        return heap.length === 0 ? null : heap[0];
      }
      function pop(heap) {
        if (heap.length === 0) {
          return null;
        }
        var first = heap[0];
        var last = heap.pop();
        if (last !== first) {
          heap[0] = last;
          siftDown(heap, last, 0);
        }
        return first;
      }
      function siftUp(heap, node2, i2) {
        var index = i2;
        while (index > 0) {
          var parentIndex = index - 1 >>> 1;
          var parent = heap[parentIndex];
          if (compare(parent, node2) > 0) {
            heap[parentIndex] = node2;
            heap[index] = parent;
            index = parentIndex;
          } else {
            return;
          }
        }
      }
      function siftDown(heap, node2, i2) {
        var index = i2;
        var length = heap.length;
        var halfLength = length >>> 1;
        while (index < halfLength) {
          var leftIndex = (index + 1) * 2 - 1;
          var left = heap[leftIndex];
          var rightIndex = leftIndex + 1;
          var right = heap[rightIndex];
          if (compare(left, node2) < 0) {
            if (rightIndex < length && compare(right, left) < 0) {
              heap[index] = right;
              heap[rightIndex] = node2;
              index = rightIndex;
            } else {
              heap[index] = left;
              heap[leftIndex] = node2;
              index = leftIndex;
            }
          } else if (rightIndex < length && compare(right, node2) < 0) {
            heap[index] = right;
            heap[rightIndex] = node2;
            index = rightIndex;
          } else {
            return;
          }
        }
      }
      function compare(a22, b3) {
        var diff = a22.sortIndex - b3.sortIndex;
        return diff !== 0 ? diff : a22.id - b3.id;
      }
      var ImmediatePriority = 1;
      var UserBlockingPriority = 2;
      var NormalPriority = 3;
      var LowPriority = 4;
      var IdlePriority = 5;
      function markTaskErrored(task, ms) {}
      var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
      if (hasPerformanceNow) {
        var localPerformance = performance;
        exports.unstable_now = function() {
          return localPerformance.now();
        };
      } else {
        var localDate = Date;
        var initialTime = localDate.now();
        exports.unstable_now = function() {
          return localDate.now() - initialTime;
        };
      }
      var maxSigned31BitInt = 1073741823;
      var IMMEDIATE_PRIORITY_TIMEOUT = -1;
      var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
      var NORMAL_PRIORITY_TIMEOUT = 5000;
      var LOW_PRIORITY_TIMEOUT = 1e4;
      var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
      var taskQueue = [];
      var timerQueue = [];
      var taskIdCounter = 1;
      var currentTask = null;
      var currentPriorityLevel = NormalPriority;
      var isPerformingWork = false;
      var isHostCallbackScheduled = false;
      var isHostTimeoutScheduled = false;
      var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
      var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
      var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
      var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
      function advanceTimers(currentTime) {
        var timer = peek2(timerQueue);
        while (timer !== null) {
          if (timer.callback === null) {
            pop(timerQueue);
          } else if (timer.startTime <= currentTime) {
            pop(timerQueue);
            timer.sortIndex = timer.expirationTime;
            push(taskQueue, timer);
          } else {
            return;
          }
          timer = peek2(timerQueue);
        }
      }
      function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled) {
          if (peek2(taskQueue) !== null) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          } else {
            var firstTimer = peek2(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
          }
        }
      }
      function flushWork(hasTimeRemaining, initialTime2) {
        isHostCallbackScheduled = false;
        if (isHostTimeoutScheduled) {
          isHostTimeoutScheduled = false;
          cancelHostTimeout();
        }
        isPerformingWork = true;
        var previousPriorityLevel = currentPriorityLevel;
        try {
          if (enableProfiling) {
            try {
              return workLoop(hasTimeRemaining, initialTime2);
            } catch (error) {
              if (currentTask !== null) {
                var currentTime = exports.unstable_now();
                markTaskErrored(currentTask, currentTime);
                currentTask.isQueued = false;
              }
              throw error;
            }
          } else {
            return workLoop(hasTimeRemaining, initialTime2);
          }
        } finally {
          currentTask = null;
          currentPriorityLevel = previousPriorityLevel;
          isPerformingWork = false;
        }
      }
      function workLoop(hasTimeRemaining, initialTime2) {
        var currentTime = initialTime2;
        advanceTimers(currentTime);
        currentTask = peek2(taskQueue);
        while (currentTask !== null && !enableSchedulerDebugging) {
          if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
            break;
          }
          var callback = currentTask.callback;
          if (typeof callback === "function") {
            currentTask.callback = null;
            currentPriorityLevel = currentTask.priorityLevel;
            var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
            var continuationCallback = callback(didUserCallbackTimeout);
            currentTime = exports.unstable_now();
            if (typeof continuationCallback === "function") {
              currentTask.callback = continuationCallback;
            } else {
              if (currentTask === peek2(taskQueue)) {
                pop(taskQueue);
              }
            }
            advanceTimers(currentTime);
          } else {
            pop(taskQueue);
          }
          currentTask = peek2(taskQueue);
        }
        if (currentTask !== null) {
          return true;
        } else {
          var firstTimer = peek2(timerQueue);
          if (firstTimer !== null) {
            requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
          }
          return false;
        }
      }
      function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch (priorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
          case LowPriority:
          case IdlePriority:
            break;
          default:
            priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }
      function unstable_next(eventHandler) {
        var priorityLevel;
        switch (currentPriorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
            priorityLevel = NormalPriority;
            break;
          default:
            priorityLevel = currentPriorityLevel;
            break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }
      function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = parentPriorityLevel;
          try {
            return callback.apply(this, arguments);
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        };
      }
      function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now();
        var startTime2;
        if (typeof options === "object" && options !== null) {
          var delay = options.delay;
          if (typeof delay === "number" && delay > 0) {
            startTime2 = currentTime + delay;
          } else {
            startTime2 = currentTime;
          }
        } else {
          startTime2 = currentTime;
        }
        var timeout;
        switch (priorityLevel) {
          case ImmediatePriority:
            timeout = IMMEDIATE_PRIORITY_TIMEOUT;
            break;
          case UserBlockingPriority:
            timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
            break;
          case IdlePriority:
            timeout = IDLE_PRIORITY_TIMEOUT;
            break;
          case LowPriority:
            timeout = LOW_PRIORITY_TIMEOUT;
            break;
          case NormalPriority:
          default:
            timeout = NORMAL_PRIORITY_TIMEOUT;
            break;
        }
        var expirationTime = startTime2 + timeout;
        var newTask = {
          id: taskIdCounter++,
          callback,
          priorityLevel,
          startTime: startTime2,
          expirationTime,
          sortIndex: -1
        };
        if (startTime2 > currentTime) {
          newTask.sortIndex = startTime2;
          push(timerQueue, newTask);
          if (peek2(taskQueue) === null && newTask === peek2(timerQueue)) {
            if (isHostTimeoutScheduled) {
              cancelHostTimeout();
            } else {
              isHostTimeoutScheduled = true;
            }
            requestHostTimeout(handleTimeout, startTime2 - currentTime);
          }
        } else {
          newTask.sortIndex = expirationTime;
          push(taskQueue, newTask);
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        return newTask;
      }
      function unstable_pauseExecution() {}
      function unstable_continueExecution() {
        if (!isHostCallbackScheduled && !isPerformingWork) {
          isHostCallbackScheduled = true;
          requestHostCallback(flushWork);
        }
      }
      function unstable_getFirstCallbackNode() {
        return peek2(taskQueue);
      }
      function unstable_cancelCallback(task) {
        task.callback = null;
      }
      function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
      }
      var isMessageLoopRunning = false;
      var scheduledHostCallback = null;
      var taskTimeoutID = -1;
      var frameInterval = frameYieldMs;
      var startTime = -1;
      function shouldYieldToHost() {
        var timeElapsed = exports.unstable_now() - startTime;
        if (timeElapsed < frameInterval) {
          return false;
        }
        return true;
      }
      function requestPaint() {}
      function forceFrameRate(fps) {
        if (fps < 0 || fps > 125) {
          console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
          return;
        }
        if (fps > 0) {
          frameInterval = Math.floor(1000 / fps);
        } else {
          frameInterval = frameYieldMs;
        }
      }
      var performWorkUntilDeadline = function() {
        if (scheduledHostCallback !== null) {
          var currentTime = exports.unstable_now();
          startTime = currentTime;
          var hasTimeRemaining = true;
          var hasMoreWork = true;
          try {
            hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
          } finally {
            if (hasMoreWork) {
              schedulePerformWorkUntilDeadline();
            } else {
              isMessageLoopRunning = false;
              scheduledHostCallback = null;
            }
          }
        } else {
          isMessageLoopRunning = false;
        }
      };
      var schedulePerformWorkUntilDeadline;
      if (typeof localSetImmediate === "function") {
        schedulePerformWorkUntilDeadline = function() {
          localSetImmediate(performWorkUntilDeadline);
        };
      } else if (typeof MessageChannel !== "undefined") {
        var channel = new MessageChannel;
        var port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        schedulePerformWorkUntilDeadline = function() {
          port.postMessage(null);
        };
      } else {
        schedulePerformWorkUntilDeadline = function() {
          localSetTimeout(performWorkUntilDeadline, 0);
        };
      }
      function requestHostCallback(callback) {
        scheduledHostCallback = callback;
        if (!isMessageLoopRunning) {
          isMessageLoopRunning = true;
          schedulePerformWorkUntilDeadline();
        }
      }
      function requestHostTimeout(callback, ms) {
        taskTimeoutID = localSetTimeout(function() {
          callback(exports.unstable_now());
        }, ms);
      }
      function cancelHostTimeout() {
        localClearTimeout(taskTimeoutID);
        taskTimeoutID = -1;
      }
      var unstable_requestPaint = requestPaint;
      var unstable_Profiling = null;
      exports.unstable_IdlePriority = IdlePriority;
      exports.unstable_ImmediatePriority = ImmediatePriority;
      exports.unstable_LowPriority = LowPriority;
      exports.unstable_NormalPriority = NormalPriority;
      exports.unstable_Profiling = unstable_Profiling;
      exports.unstable_UserBlockingPriority = UserBlockingPriority;
      exports.unstable_cancelCallback = unstable_cancelCallback;
      exports.unstable_continueExecution = unstable_continueExecution;
      exports.unstable_forceFrameRate = forceFrameRate;
      exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
      exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
      exports.unstable_next = unstable_next;
      exports.unstable_pauseExecution = unstable_pauseExecution;
      exports.unstable_requestPaint = unstable_requestPaint;
      exports.unstable_runWithPriority = unstable_runWithPriority;
      exports.unstable_scheduleCallback = unstable_scheduleCallback;
      exports.unstable_shouldYield = shouldYieldToHost;
      exports.unstable_wrapCallback = unstable_wrapCallback;
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error);
      }
    })();
  }
});
var require_scheduler = __commonJS22((exports, module) => {
  var scheduler_development = __toESM22(require_scheduler_development(), 1);
  if (false) {} else {
    module.exports = scheduler_development;
  }
});
var require_react_dom_development = __commonJS22((exports) => {
  var Scheduler = __toESM22(require_scheduler(), 1);
  if (true) {
    (function() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error);
      }
      var ReactSharedInternals = React3.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      var suppressWarning = false;
      function setSuppressWarning(newSuppressWarning) {
        {
          suppressWarning = newSuppressWarning;
        }
      }
      function warn(format) {
        {
          if (!suppressWarning) {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1;_key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format, args);
          }
        }
      }
      function error(format) {
        {
          if (!suppressWarning) {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1;_key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var FunctionComponent = 0;
      var ClassComponent = 1;
      var IndeterminateComponent = 2;
      var HostRoot = 3;
      var HostPortal = 4;
      var HostComponent = 5;
      var HostText = 6;
      var Fragment32 = 7;
      var Mode = 8;
      var ContextConsumer = 9;
      var ContextProvider = 10;
      var ForwardRef = 11;
      var Profiler = 12;
      var SuspenseComponent = 13;
      var MemoComponent = 14;
      var SimpleMemoComponent = 15;
      var LazyComponent = 16;
      var IncompleteClassComponent = 17;
      var DehydratedFragment = 18;
      var SuspenseListComponent = 19;
      var ScopeComponent = 21;
      var OffscreenComponent = 22;
      var LegacyHiddenComponent = 23;
      var CacheComponent = 24;
      var TracingMarkerComponent = 25;
      var enableClientRenderFallbackOnTextMismatch = true;
      var enableNewReconciler = false;
      var enableLazyContextPropagation = false;
      var enableLegacyHidden = false;
      var enableSuspenseAvoidThisFallback = false;
      var disableCommentsAsDOMContainers = true;
      var enableCustomElementPropertySupport = false;
      var warnAboutStringRefs = false;
      var enableSchedulingProfiler = true;
      var enableProfilerTimer = true;
      var enableProfilerCommitHooks = true;
      var allNativeEvents = new Set;
      var registrationNameDependencies = {};
      var possibleRegistrationNames = {};
      function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies);
        registerDirectEvent(registrationName + "Capture", dependencies);
      }
      function registerDirectEvent(registrationName, dependencies) {
        {
          if (registrationNameDependencies[registrationName]) {
            error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
          }
        }
        registrationNameDependencies[registrationName] = dependencies;
        {
          var lowerCasedName = registrationName.toLowerCase();
          possibleRegistrationNames[lowerCasedName] = registrationName;
          if (registrationName === "onDoubleClick") {
            possibleRegistrationNames.ondblclick = registrationName;
          }
        }
        for (var i2 = 0;i2 < dependencies.length; i2++) {
          allNativeEvents.add(dependencies[i2]);
        }
      }
      var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
          var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        {
          try {
            testStringCoercion(value);
            return false;
          } catch (e3) {
            return true;
          }
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkAttributeStringCoercion(value, attributeName) {
        {
          if (willCoercionThrow(value)) {
            error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkKeyStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkPropStringCoercion(value, propName) {
        {
          if (willCoercionThrow(value)) {
            error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkCSSPropertyStringCoercion(value, propName) {
        {
          if (willCoercionThrow(value)) {
            error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkHtmlStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkFormFieldValueStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      var RESERVED = 0;
      var STRING = 1;
      var BOOLEANISH_STRING = 2;
      var BOOLEAN = 3;
      var OVERLOADED_BOOLEAN = 4;
      var NUMERIC = 5;
      var POSITIVE_NUMERIC = 6;
      var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
      var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
      var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
      var illegalAttributeNameCache = {};
      var validatedAttributeNameCache = {};
      function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
          return true;
        }
        if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
          return false;
        }
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
          validatedAttributeNameCache[attributeName] = true;
          return true;
        }
        illegalAttributeNameCache[attributeName] = true;
        {
          error("Invalid attribute name: `%s`", attributeName);
        }
        return false;
      }
      function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null) {
          return propertyInfo.type === RESERVED;
        }
        if (isCustomComponentTag) {
          return false;
        }
        if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
          return true;
        }
        return false;
      }
      function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED) {
          return false;
        }
        switch (typeof value) {
          case "function":
          case "symbol":
            return true;
          case "boolean": {
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              return !propertyInfo.acceptsBooleans;
            } else {
              var prefix22 = name.toLowerCase().slice(0, 5);
              return prefix22 !== "data-" && prefix22 !== "aria-";
            }
          }
          default:
            return false;
        }
      }
      function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
        if (value === null || typeof value === "undefined") {
          return true;
        }
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
          return true;
        }
        if (isCustomComponentTag) {
          return false;
        }
        if (propertyInfo !== null) {
          switch (propertyInfo.type) {
            case BOOLEAN:
              return !value;
            case OVERLOADED_BOOLEAN:
              return value === false;
            case NUMERIC:
              return isNaN(value);
            case POSITIVE_NUMERIC:
              return isNaN(value) || value < 1;
          }
        }
        return false;
      }
      function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
      }
      function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
        this.attributeName = attributeName;
        this.attributeNamespace = attributeNamespace;
        this.mustUseProperty = mustUseProperty;
        this.propertyName = name;
        this.type = type;
        this.sanitizeURL = sanitizeURL2;
        this.removeEmptyString = removeEmptyString;
      }
      var properties = {};
      var reservedProps = [
        "children",
        "dangerouslySetInnerHTML",
        "defaultValue",
        "defaultChecked",
        "innerHTML",
        "suppressContentEditableWarning",
        "suppressHydrationWarning",
        "style"
      ];
      reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
      });
      [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
      });
      ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
      });
      ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
      });
      [
        "allowFullScreen",
        "async",
        "autoFocus",
        "autoPlay",
        "controls",
        "default",
        "defer",
        "disabled",
        "disablePictureInPicture",
        "disableRemotePlayback",
        "formNoValidate",
        "hidden",
        "loop",
        "noModule",
        "noValidate",
        "open",
        "playsInline",
        "readOnly",
        "required",
        "reversed",
        "scoped",
        "seamless",
        "itemScope"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
      });
      [
        "checked",
        "multiple",
        "muted",
        "selected"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
      });
      [
        "capture",
        "download"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
      });
      [
        "cols",
        "rows",
        "size",
        "span"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
      });
      ["rowSpan", "start"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
      });
      var CAMELIZE = /[\-\:]([a-z])/g;
      var capitalize = function(token2) {
        return token2[1].toUpperCase();
      };
      [
        "accent-height",
        "alignment-baseline",
        "arabic-form",
        "baseline-shift",
        "cap-height",
        "clip-path",
        "clip-rule",
        "color-interpolation",
        "color-interpolation-filters",
        "color-profile",
        "color-rendering",
        "dominant-baseline",
        "enable-background",
        "fill-opacity",
        "fill-rule",
        "flood-color",
        "flood-opacity",
        "font-family",
        "font-size",
        "font-size-adjust",
        "font-stretch",
        "font-style",
        "font-variant",
        "font-weight",
        "glyph-name",
        "glyph-orientation-horizontal",
        "glyph-orientation-vertical",
        "horiz-adv-x",
        "horiz-origin-x",
        "image-rendering",
        "letter-spacing",
        "lighting-color",
        "marker-end",
        "marker-mid",
        "marker-start",
        "overline-position",
        "overline-thickness",
        "paint-order",
        "panose-1",
        "pointer-events",
        "rendering-intent",
        "shape-rendering",
        "stop-color",
        "stop-opacity",
        "strikethrough-position",
        "strikethrough-thickness",
        "stroke-dasharray",
        "stroke-dashoffset",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-opacity",
        "stroke-width",
        "text-anchor",
        "text-decoration",
        "text-rendering",
        "underline-position",
        "underline-thickness",
        "unicode-bidi",
        "unicode-range",
        "units-per-em",
        "v-alphabetic",
        "v-hanging",
        "v-ideographic",
        "v-mathematical",
        "vector-effect",
        "vert-adv-y",
        "vert-origin-x",
        "vert-origin-y",
        "word-spacing",
        "writing-mode",
        "xmlns:xlink",
        "x-height"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
      });
      [
        "xlink:actuate",
        "xlink:arcrole",
        "xlink:role",
        "xlink:show",
        "xlink:title",
        "xlink:type"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
      });
      [
        "xml:base",
        "xml:lang",
        "xml:space"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
      });
      ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
      });
      var xlinkHref = "xlinkHref";
      properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
      ["src", "href", "action", "formAction"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
      });
      var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
      var didWarn = false;
      function sanitizeURL(url) {
        {
          if (!didWarn && isJavaScriptProtocol.test(url)) {
            didWarn = true;
            error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
          }
        }
      }
      function getValueForProperty(node2, name, expected, propertyInfo) {
        {
          if (propertyInfo.mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            return node2[propertyName];
          } else {
            {
              checkAttributeStringCoercion(expected, name);
            }
            if (propertyInfo.sanitizeURL) {
              sanitizeURL("" + expected);
            }
            var attributeName = propertyInfo.attributeName;
            var stringValue = null;
            if (propertyInfo.type === OVERLOADED_BOOLEAN) {
              if (node2.hasAttribute(attributeName)) {
                var value = node2.getAttribute(attributeName);
                if (value === "") {
                  return true;
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return value;
                }
                if (value === "" + expected) {
                  return expected;
                }
                return value;
              }
            } else if (node2.hasAttribute(attributeName)) {
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return node2.getAttribute(attributeName);
              }
              if (propertyInfo.type === BOOLEAN) {
                return expected;
              }
              stringValue = node2.getAttribute(attributeName);
            }
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
              return stringValue === null ? expected : stringValue;
            } else if (stringValue === "" + expected) {
              return expected;
            } else {
              return stringValue;
            }
          }
        }
      }
      function getValueForAttribute(node2, name, expected, isCustomComponentTag) {
        {
          if (!isAttributeNameSafe(name)) {
            return;
          }
          if (!node2.hasAttribute(name)) {
            return expected === undefined ? undefined : null;
          }
          var value = node2.getAttribute(name);
          {
            checkAttributeStringCoercion(expected, name);
          }
          if (value === "" + expected) {
            return expected;
          }
          return value;
        }
      }
      function setValueForProperty(node2, name, value, isCustomComponentTag) {
        var propertyInfo = getPropertyInfo(name);
        if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
          return;
        }
        if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
          value = null;
        }
        if (isCustomComponentTag || propertyInfo === null) {
          if (isAttributeNameSafe(name)) {
            var _attributeName = name;
            if (value === null) {
              node2.removeAttribute(_attributeName);
            } else {
              {
                checkAttributeStringCoercion(value, name);
              }
              node2.setAttribute(_attributeName, "" + value);
            }
          }
          return;
        }
        var mustUseProperty = propertyInfo.mustUseProperty;
        if (mustUseProperty) {
          var propertyName = propertyInfo.propertyName;
          if (value === null) {
            var type = propertyInfo.type;
            node2[propertyName] = type === BOOLEAN ? false : "";
          } else {
            node2[propertyName] = value;
          }
          return;
        }
        var { attributeName, attributeNamespace } = propertyInfo;
        if (value === null) {
          node2.removeAttribute(attributeName);
        } else {
          var _type = propertyInfo.type;
          var attributeValue;
          if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
            attributeValue = "";
          } else {
            {
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
            }
            if (propertyInfo.sanitizeURL) {
              sanitizeURL(attributeValue.toString());
            }
          }
          if (attributeNamespace) {
            node2.setAttributeNS(attributeNamespace, attributeName, attributeValue);
          } else {
            node2.setAttribute(attributeName, attributeValue);
          }
        }
      }
      var REACT_ELEMENT_TYPE = Symbol.for("react.element");
      var REACT_PORTAL_TYPE = Symbol.for("react.portal");
      var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
      var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
      var REACT_CONTEXT_TYPE = Symbol.for("react.context");
      var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
      var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
      var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
      var REACT_MEMO_TYPE = Symbol.for("react.memo");
      var REACT_LAZY_TYPE = Symbol.for("react.lazy");
      var REACT_SCOPE_TYPE = Symbol.for("react.scope");
      var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
      var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
      var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
      var REACT_CACHE_TYPE = Symbol.for("react.cache");
      var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var assign = Object.assign;
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {}
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix2;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix2 === undefined) {
            try {
              throw Error();
            } catch (x32) {
              var match2 = x32.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match2 && match2[1] || "";
            }
          }
          return `
` + prefix2 + name;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap;
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) {
          return "";
        }
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== undefined) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher.current;
          ReactCurrentDispatcher.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x32) {
                control = x32;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x32) {
                control = x32;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x32) {
              control = x32;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split(`
`);
            var controlLines = control.stack.split(`
`);
            var s2 = sampleLines.length - 1;
            var c22 = controlLines.length - 1;
            while (s2 >= 1 && c22 >= 0 && sampleLines[s2] !== controlLines[c22]) {
              c22--;
            }
            for (;s2 >= 1 && c22 >= 0; s2--, c22--) {
              if (sampleLines[s2] !== controlLines[c22]) {
                if (s2 !== 1 || c22 !== 1) {
                  do {
                    s2--;
                    c22--;
                    if (c22 < 0 || sampleLines[s2] !== controlLines[c22]) {
                      var _frame = `
` + sampleLines[s2].replace(" at new ", " at ");
                      if (fn.displayName && _frame.includes("<anonymous>")) {
                        _frame = _frame.replace("<anonymous>", fn.displayName);
                      }
                      {
                        if (typeof fn === "function") {
                          componentFrameCache.set(fn, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s2 >= 1 && c22 >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        {
          if (typeof fn === "function") {
            componentFrameCache.set(fn, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeClassComponentFrame(ctor, source, ownerFn) {
        {
          return describeNativeComponentFrame(ctor, true);
        }
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn, false);
        }
      }
      function shouldConstruct(Component2) {
        var prototype = Component2.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) {
          return "";
        }
        if (typeof type === "function") {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type));
          }
        }
        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type);
        }
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch (x32) {}
            }
          }
        }
        return "";
      }
      function describeFiber(fiber) {
        var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
        var source = fiber._debugSource;
        switch (fiber.tag) {
          case HostComponent:
            return describeBuiltInComponentFrame(fiber.type);
          case LazyComponent:
            return describeBuiltInComponentFrame("Lazy");
          case SuspenseComponent:
            return describeBuiltInComponentFrame("Suspense");
          case SuspenseListComponent:
            return describeBuiltInComponentFrame("SuspenseList");
          case FunctionComponent:
          case IndeterminateComponent:
          case SimpleMemoComponent:
            return describeFunctionComponentFrame(fiber.type);
          case ForwardRef:
            return describeFunctionComponentFrame(fiber.type.render);
          case ClassComponent:
            return describeClassComponentFrame(fiber.type);
          default:
            return "";
        }
      }
      function getStackByFiberInDevAndProd(workInProgress2) {
        try {
          var info = "";
          var node2 = workInProgress2;
          do {
            info += describeFiber(node2);
            node2 = node2.return;
          } while (node2);
          return info;
        } catch (x32) {
          return `
Error generating stack: ` + x32.message + `
` + x32.stack;
        }
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) {
          return displayName;
        }
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === "number") {
            error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
          return type;
        }
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              if (outerName !== null) {
                return outerName;
              }
              return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch (x32) {
                return null;
              }
            }
          }
        }
        return null;
      }
      function getWrappedName$1(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || "";
        return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
      }
      function getContextName$1(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromFiber(fiber) {
        var { tag, type } = fiber;
        switch (tag) {
          case CacheComponent:
            return "Cache";
          case ContextConsumer:
            var context = type;
            return getContextName$1(context) + ".Consumer";
          case ContextProvider:
            var provider = type;
            return getContextName$1(provider._context) + ".Provider";
          case DehydratedFragment:
            return "DehydratedFragment";
          case ForwardRef:
            return getWrappedName$1(type, type.render, "ForwardRef");
          case Fragment32:
            return "Fragment";
          case HostComponent:
            return type;
          case HostPortal:
            return "Portal";
          case HostRoot:
            return "Root";
          case HostText:
            return "Text";
          case LazyComponent:
            return getComponentNameFromType(type);
          case Mode:
            if (type === REACT_STRICT_MODE_TYPE) {
              return "StrictMode";
            }
            return "Mode";
          case OffscreenComponent:
            return "Offscreen";
          case Profiler:
            return "Profiler";
          case ScopeComponent:
            return "Scope";
          case SuspenseComponent:
            return "Suspense";
          case SuspenseListComponent:
            return "SuspenseList";
          case TracingMarkerComponent:
            return "TracingMarker";
          case ClassComponent:
          case FunctionComponent:
          case IncompleteClassComponent:
          case IndeterminateComponent:
          case MemoComponent:
          case SimpleMemoComponent:
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            break;
        }
        return null;
      }
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      var current = null;
      var isRendering = false;
      function getCurrentFiberOwnerNameInDevOrNull() {
        {
          if (current === null) {
            return null;
          }
          var owner = current._debugOwner;
          if (owner !== null && typeof owner !== "undefined") {
            return getComponentNameFromFiber(owner);
          }
        }
        return null;
      }
      function getCurrentFiberStackInDev() {
        {
          if (current === null) {
            return "";
          }
          return getStackByFiberInDevAndProd(current);
        }
      }
      function resetCurrentFiber() {
        {
          ReactDebugCurrentFrame.getCurrentStack = null;
          current = null;
          isRendering = false;
        }
      }
      function setCurrentFiber(fiber) {
        {
          ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
          current = fiber;
          isRendering = false;
        }
      }
      function getCurrentFiber() {
        {
          return current;
        }
      }
      function setIsRendering(rendering) {
        {
          isRendering = rendering;
        }
      }
      function toString(value) {
        return "" + value;
      }
      function getToStringValue(value) {
        switch (typeof value) {
          case "boolean":
          case "number":
          case "string":
          case "undefined":
            return value;
          case "object":
            {
              checkFormFieldValueStringCoercion(value);
            }
            return value;
          default:
            return "";
        }
      }
      var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
      };
      function checkControlledValueProps(tagName, props) {
        {
          if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
            error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
          }
          if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
            error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
          }
        }
      }
      function isCheckable(elem) {
        var type = elem.type;
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
      }
      function getTracker(node2) {
        return node2._valueTracker;
      }
      function detachTracker(node2) {
        node2._valueTracker = null;
      }
      function getValueFromNode(node2) {
        var value = "";
        if (!node2) {
          return value;
        }
        if (isCheckable(node2)) {
          value = node2.checked ? "true" : "false";
        } else {
          value = node2.value;
        }
        return value;
      }
      function trackValueOnNode(node2) {
        var valueField = isCheckable(node2) ? "checked" : "value";
        var descriptor = Object.getOwnPropertyDescriptor(node2.constructor.prototype, valueField);
        {
          checkFormFieldValueStringCoercion(node2[valueField]);
        }
        var currentValue = "" + node2[valueField];
        if (node2.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
          return;
        }
        var { get: get2, set: set2 } = descriptor;
        Object.defineProperty(node2, valueField, {
          configurable: true,
          get: function() {
            return get2.call(this);
          },
          set: function(value) {
            {
              checkFormFieldValueStringCoercion(value);
            }
            currentValue = "" + value;
            set2.call(this, value);
          }
        });
        Object.defineProperty(node2, valueField, {
          enumerable: descriptor.enumerable
        });
        var tracker = {
          getValue: function() {
            return currentValue;
          },
          setValue: function(value) {
            {
              checkFormFieldValueStringCoercion(value);
            }
            currentValue = "" + value;
          },
          stopTracking: function() {
            detachTracker(node2);
            delete node2[valueField];
          }
        };
        return tracker;
      }
      function track(node2) {
        if (getTracker(node2)) {
          return;
        }
        node2._valueTracker = trackValueOnNode(node2);
      }
      function updateValueIfChanged(node2) {
        if (!node2) {
          return false;
        }
        var tracker = getTracker(node2);
        if (!tracker) {
          return true;
        }
        var lastValue = tracker.getValue();
        var nextValue = getValueFromNode(node2);
        if (nextValue !== lastValue) {
          tracker.setValue(nextValue);
          return true;
        }
        return false;
      }
      function getActiveElement(doc) {
        doc = doc || (typeof document !== "undefined" ? document : undefined);
        if (typeof doc === "undefined") {
          return null;
        }
        try {
          return doc.activeElement || doc.body;
        } catch (e3) {
          return doc.body;
        }
      }
      var didWarnValueDefaultValue = false;
      var didWarnCheckedDefaultChecked = false;
      var didWarnControlledToUncontrolled = false;
      var didWarnUncontrolledToControlled = false;
      function isControlled(props) {
        var usesChecked = props.type === "checkbox" || props.type === "radio";
        return usesChecked ? props.checked != null : props.value != null;
      }
      function getHostProps(element, props) {
        var node2 = element;
        var checked = props.checked;
        var hostProps = assign({}, props, {
          defaultChecked: undefined,
          defaultValue: undefined,
          value: undefined,
          checked: checked != null ? checked : node2._wrapperState.initialChecked
        });
        return hostProps;
      }
      function initWrapperState(element, props) {
        {
          checkControlledValueProps("input", props);
          if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
            error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
            didWarnCheckedDefaultChecked = true;
          }
          if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
            error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
            didWarnValueDefaultValue = true;
          }
        }
        var node2 = element;
        var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
        node2._wrapperState = {
          initialChecked: props.checked != null ? props.checked : props.defaultChecked,
          initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
          controlled: isControlled(props)
        };
      }
      function updateChecked(element, props) {
        var node2 = element;
        var checked = props.checked;
        if (checked != null) {
          setValueForProperty(node2, "checked", checked, false);
        }
      }
      function updateWrapper(element, props) {
        var node2 = element;
        {
          var controlled = isControlled(props);
          if (!node2._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
            error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnUncontrolledToControlled = true;
          }
          if (node2._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
            error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnControlledToUncontrolled = true;
          }
        }
        updateChecked(element, props);
        var value = getToStringValue(props.value);
        var type = props.type;
        if (value != null) {
          if (type === "number") {
            if (value === 0 && node2.value === "" || node2.value != value) {
              node2.value = toString(value);
            }
          } else if (node2.value !== toString(value)) {
            node2.value = toString(value);
          }
        } else if (type === "submit" || type === "reset") {
          node2.removeAttribute("value");
          return;
        }
        {
          if (props.hasOwnProperty("value")) {
            setDefaultValue(node2, props.type, value);
          } else if (props.hasOwnProperty("defaultValue")) {
            setDefaultValue(node2, props.type, getToStringValue(props.defaultValue));
          }
        }
        {
          if (props.checked == null && props.defaultChecked != null) {
            node2.defaultChecked = !!props.defaultChecked;
          }
        }
      }
      function postMountWrapper(element, props, isHydrating2) {
        var node2 = element;
        if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
          var type = props.type;
          var isButton = type === "submit" || type === "reset";
          if (isButton && (props.value === undefined || props.value === null)) {
            return;
          }
          var initialValue = toString(node2._wrapperState.initialValue);
          if (!isHydrating2) {
            {
              if (initialValue !== node2.value) {
                node2.value = initialValue;
              }
            }
          }
          {
            node2.defaultValue = initialValue;
          }
        }
        var name = node2.name;
        if (name !== "") {
          node2.name = "";
        }
        {
          node2.defaultChecked = !node2.defaultChecked;
          node2.defaultChecked = !!node2._wrapperState.initialChecked;
        }
        if (name !== "") {
          node2.name = name;
        }
      }
      function restoreControlledState(element, props) {
        var node2 = element;
        updateWrapper(node2, props);
        updateNamedCousins(node2, props);
      }
      function updateNamedCousins(rootNode, props) {
        var name = props.name;
        if (props.type === "radio" && name != null) {
          var queryRoot = rootNode;
          while (queryRoot.parentNode) {
            queryRoot = queryRoot.parentNode;
          }
          {
            checkAttributeStringCoercion(name, "name");
          }
          var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
          for (var i2 = 0;i2 < group.length; i2++) {
            var otherNode = group[i2];
            if (otherNode === rootNode || otherNode.form !== rootNode.form) {
              continue;
            }
            var otherProps = getFiberCurrentPropsFromNode(otherNode);
            if (!otherProps) {
              throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
            }
            updateValueIfChanged(otherNode);
            updateWrapper(otherNode, otherProps);
          }
        }
      }
      function setDefaultValue(node2, type, value) {
        if (type !== "number" || getActiveElement(node2.ownerDocument) !== node2) {
          if (value == null) {
            node2.defaultValue = toString(node2._wrapperState.initialValue);
          } else if (node2.defaultValue !== toString(value)) {
            node2.defaultValue = toString(value);
          }
        }
      }
      var didWarnSelectedSetOnOption = false;
      var didWarnInvalidChild = false;
      var didWarnInvalidInnerHTML = false;
      function validateProps(element, props) {
        {
          if (props.value == null) {
            if (typeof props.children === "object" && props.children !== null) {
              React3.Children.forEach(props.children, function(child) {
                if (child == null) {
                  return;
                }
                if (typeof child === "string" || typeof child === "number") {
                  return;
                }
                if (!didWarnInvalidChild) {
                  didWarnInvalidChild = true;
                  error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                }
              });
            } else if (props.dangerouslySetInnerHTML != null) {
              if (!didWarnInvalidInnerHTML) {
                didWarnInvalidInnerHTML = true;
                error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
              }
            }
          }
          if (props.selected != null && !didWarnSelectedSetOnOption) {
            error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
            didWarnSelectedSetOnOption = true;
          }
        }
      }
      function postMountWrapper$1(element, props) {
        if (props.value != null) {
          element.setAttribute("value", toString(getToStringValue(props.value)));
        }
      }
      var isArrayImpl = Array.isArray;
      function isArray(a22) {
        return isArrayImpl(a22);
      }
      var didWarnValueDefaultValue$1;
      {
        didWarnValueDefaultValue$1 = false;
      }
      function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        if (ownerName) {
          return `

Check the render method of \`` + ownerName + "`.";
        }
        return "";
      }
      var valuePropNames = ["value", "defaultValue"];
      function checkSelectPropTypes(props) {
        {
          checkControlledValueProps("select", props);
          for (var i2 = 0;i2 < valuePropNames.length; i2++) {
            var propName = valuePropNames[i2];
            if (props[propName] == null) {
              continue;
            }
            var propNameIsArray = isArray(props[propName]);
            if (props.multiple && !propNameIsArray) {
              error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
            } else if (!props.multiple && propNameIsArray) {
              error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
            }
          }
        }
      }
      function updateOptions(node2, multiple, propValue, setDefaultSelected) {
        var options2 = node2.options;
        if (multiple) {
          var selectedValues = propValue;
          var selectedValue = {};
          for (var i2 = 0;i2 < selectedValues.length; i2++) {
            selectedValue["$" + selectedValues[i2]] = true;
          }
          for (var _i = 0;_i < options2.length; _i++) {
            var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
            if (options2[_i].selected !== selected) {
              options2[_i].selected = selected;
            }
            if (selected && setDefaultSelected) {
              options2[_i].defaultSelected = true;
            }
          }
        } else {
          var _selectedValue = toString(getToStringValue(propValue));
          var defaultSelected = null;
          for (var _i2 = 0;_i2 < options2.length; _i2++) {
            if (options2[_i2].value === _selectedValue) {
              options2[_i2].selected = true;
              if (setDefaultSelected) {
                options2[_i2].defaultSelected = true;
              }
              return;
            }
            if (defaultSelected === null && !options2[_i2].disabled) {
              defaultSelected = options2[_i2];
            }
          }
          if (defaultSelected !== null) {
            defaultSelected.selected = true;
          }
        }
      }
      function getHostProps$1(element, props) {
        return assign({}, props, {
          value: undefined
        });
      }
      function initWrapperState$1(element, props) {
        var node2 = element;
        {
          checkSelectPropTypes(props);
        }
        node2._wrapperState = {
          wasMultiple: !!props.multiple
        };
        {
          if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
            error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
            didWarnValueDefaultValue$1 = true;
          }
        }
      }
      function postMountWrapper$2(element, props) {
        var node2 = element;
        node2.multiple = !!props.multiple;
        var value = props.value;
        if (value != null) {
          updateOptions(node2, !!props.multiple, value, false);
        } else if (props.defaultValue != null) {
          updateOptions(node2, !!props.multiple, props.defaultValue, true);
        }
      }
      function postUpdateWrapper(element, props) {
        var node2 = element;
        var wasMultiple = node2._wrapperState.wasMultiple;
        node2._wrapperState.wasMultiple = !!props.multiple;
        var value = props.value;
        if (value != null) {
          updateOptions(node2, !!props.multiple, value, false);
        } else if (wasMultiple !== !!props.multiple) {
          if (props.defaultValue != null) {
            updateOptions(node2, !!props.multiple, props.defaultValue, true);
          } else {
            updateOptions(node2, !!props.multiple, props.multiple ? [] : "", false);
          }
        }
      }
      function restoreControlledState$1(element, props) {
        var node2 = element;
        var value = props.value;
        if (value != null) {
          updateOptions(node2, !!props.multiple, value, false);
        }
      }
      var didWarnValDefaultVal = false;
      function getHostProps$2(element, props) {
        var node2 = element;
        if (props.dangerouslySetInnerHTML != null) {
          throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
        }
        var hostProps = assign({}, props, {
          value: undefined,
          defaultValue: undefined,
          children: toString(node2._wrapperState.initialValue)
        });
        return hostProps;
      }
      function initWrapperState$2(element, props) {
        var node2 = element;
        {
          checkControlledValueProps("textarea", props);
          if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
            error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
            didWarnValDefaultVal = true;
          }
        }
        var initialValue = props.value;
        if (initialValue == null) {
          var { children, defaultValue } = props;
          if (children != null) {
            {
              error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
            }
            {
              if (defaultValue != null) {
                throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
              }
              if (isArray(children)) {
                if (children.length > 1) {
                  throw new Error("<textarea> can only have at most one child.");
                }
                children = children[0];
              }
              defaultValue = children;
            }
          }
          if (defaultValue == null) {
            defaultValue = "";
          }
          initialValue = defaultValue;
        }
        node2._wrapperState = {
          initialValue: getToStringValue(initialValue)
        };
      }
      function updateWrapper$1(element, props) {
        var node2 = element;
        var value = getToStringValue(props.value);
        var defaultValue = getToStringValue(props.defaultValue);
        if (value != null) {
          var newValue = toString(value);
          if (newValue !== node2.value) {
            node2.value = newValue;
          }
          if (props.defaultValue == null && node2.defaultValue !== newValue) {
            node2.defaultValue = newValue;
          }
        }
        if (defaultValue != null) {
          node2.defaultValue = toString(defaultValue);
        }
      }
      function postMountWrapper$3(element, props) {
        var node2 = element;
        var textContent = node2.textContent;
        if (textContent === node2._wrapperState.initialValue) {
          if (textContent !== "" && textContent !== null) {
            node2.value = textContent;
          }
        }
      }
      function restoreControlledState$2(element, props) {
        updateWrapper$1(element, props);
      }
      var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
      var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
      var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
      function getIntrinsicNamespace(type) {
        switch (type) {
          case "svg":
            return SVG_NAMESPACE;
          case "math":
            return MATH_NAMESPACE;
          default:
            return HTML_NAMESPACE;
        }
      }
      function getChildNamespace(parentNamespace, type) {
        if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
          return getIntrinsicNamespace(type);
        }
        if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
          return HTML_NAMESPACE;
        }
        return parentNamespace;
      }
      var createMicrosoftUnsafeLocalFunction = function(func) {
        if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
          return function(arg0, arg1, arg2, arg3) {
            MSApp.execUnsafeLocalFunction(function() {
              return func(arg0, arg1, arg2, arg3);
            });
          };
        } else {
          return func;
        }
      };
      var reusableSVGContainer;
      var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node2, html) {
        if (node2.namespaceURI === SVG_NAMESPACE) {
          if (!("innerHTML" in node2)) {
            reusableSVGContainer = reusableSVGContainer || document.createElement("div");
            reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
            var svgNode = reusableSVGContainer.firstChild;
            while (node2.firstChild) {
              node2.removeChild(node2.firstChild);
            }
            while (svgNode.firstChild) {
              node2.appendChild(svgNode.firstChild);
            }
            return;
          }
        }
        node2.innerHTML = html;
      });
      var ELEMENT_NODE = 1;
      var TEXT_NODE = 3;
      var COMMENT_NODE = 8;
      var DOCUMENT_NODE = 9;
      var DOCUMENT_FRAGMENT_NODE = 11;
      var setTextContent = function(node2, text) {
        if (text) {
          var firstChild = node2.firstChild;
          if (firstChild && firstChild === node2.lastChild && firstChild.nodeType === TEXT_NODE) {
            firstChild.nodeValue = text;
            return;
          }
        }
        node2.textContent = text;
      };
      var shorthandToLonghand = {
        animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
        background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
        backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
        border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
        borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
        borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
        borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
        borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
        borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
        borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
        borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
        borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
        borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
        borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
        borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
        borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
        borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
        columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
        columns: ["columnCount", "columnWidth"],
        flex: ["flexBasis", "flexGrow", "flexShrink"],
        flexFlow: ["flexDirection", "flexWrap"],
        font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
        fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
        gap: ["columnGap", "rowGap"],
        grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
        gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
        gridColumn: ["gridColumnEnd", "gridColumnStart"],
        gridColumnGap: ["columnGap"],
        gridGap: ["columnGap", "rowGap"],
        gridRow: ["gridRowEnd", "gridRowStart"],
        gridRowGap: ["rowGap"],
        gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
        listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
        margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
        marker: ["markerEnd", "markerMid", "markerStart"],
        mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
        maskPosition: ["maskPositionX", "maskPositionY"],
        outline: ["outlineColor", "outlineStyle", "outlineWidth"],
        overflow: ["overflowX", "overflowY"],
        padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
        placeContent: ["alignContent", "justifyContent"],
        placeItems: ["alignItems", "justifyItems"],
        placeSelf: ["alignSelf", "justifySelf"],
        textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
        textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
        transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
        wordWrap: ["overflowWrap"]
      };
      var isUnitlessNumber = {
        animationIterationCount: true,
        aspectRatio: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
      };
      function prefixKey(prefix22, key) {
        return prefix22 + key.charAt(0).toUpperCase() + key.substring(1);
      }
      var prefixes = ["Webkit", "ms", "Moz", "O"];
      Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix22) {
          isUnitlessNumber[prefixKey(prefix22, prop)] = isUnitlessNumber[prop];
        });
      });
      function dangerousStyleValue(name, value, isCustomProperty) {
        var isEmpty = value == null || typeof value === "boolean" || value === "";
        if (isEmpty) {
          return "";
        }
        if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
          return value + "px";
        }
        {
          checkCSSPropertyStringCoercion(value, name);
        }
        return ("" + value).trim();
      }
      var uppercasePattern = /([A-Z])/g;
      var msPattern = /^ms-/;
      function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
      }
      var warnValidStyle = function() {};
      {
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
        var msPattern$1 = /^-ms-/;
        var hyphenPattern = /-(.)/g;
        var badStyleValueWithSemicolonPattern = /;\s*$/;
        var warnedStyleNames = {};
        var warnedStyleValues = {};
        var warnedForNaNValue = false;
        var warnedForInfinityValue = false;
        var camelize = function(string) {
          return string.replace(hyphenPattern, function(_3, character) {
            return character.toUpperCase();
          });
        };
        var warnHyphenatedStyleName = function(name) {
          if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
            return;
          }
          warnedStyleNames[name] = true;
          error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")));
        };
        var warnBadVendoredStyleName = function(name) {
          if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
            return;
          }
          warnedStyleNames[name] = true;
          error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
        };
        var warnStyleValueWithSemicolon = function(name, value) {
          if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
            return;
          }
          warnedStyleValues[value] = true;
          error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
        };
        var warnStyleValueIsNaN = function(name, value) {
          if (warnedForNaNValue) {
            return;
          }
          warnedForNaNValue = true;
          error("`NaN` is an invalid value for the `%s` css style property.", name);
        };
        var warnStyleValueIsInfinity = function(name, value) {
          if (warnedForInfinityValue) {
            return;
          }
          warnedForInfinityValue = true;
          error("`Infinity` is an invalid value for the `%s` css style property.", name);
        };
        warnValidStyle = function(name, value) {
          if (name.indexOf("-") > -1) {
            warnHyphenatedStyleName(name);
          } else if (badVendoredStyleNamePattern.test(name)) {
            warnBadVendoredStyleName(name);
          } else if (badStyleValueWithSemicolonPattern.test(value)) {
            warnStyleValueWithSemicolon(name, value);
          }
          if (typeof value === "number") {
            if (isNaN(value)) {
              warnStyleValueIsNaN(name, value);
            } else if (!isFinite(value)) {
              warnStyleValueIsInfinity(name, value);
            }
          }
        };
      }
      var warnValidStyle$1 = warnValidStyle;
      function createDangerousStringForStyles(styles) {
        {
          var serialized = "";
          var delimiter2 = "";
          for (var styleName in styles) {
            if (!styles.hasOwnProperty(styleName)) {
              continue;
            }
            var styleValue = styles[styleName];
            if (styleValue != null) {
              var isCustomProperty = styleName.indexOf("--") === 0;
              serialized += delimiter2 + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
              serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
              delimiter2 = ";";
            }
          }
          return serialized || null;
        }
      }
      function setValueForStyles(node2, styles) {
        var style2 = node2.style;
        for (var styleName in styles) {
          if (!styles.hasOwnProperty(styleName)) {
            continue;
          }
          var isCustomProperty = styleName.indexOf("--") === 0;
          {
            if (!isCustomProperty) {
              warnValidStyle$1(styleName, styles[styleName]);
            }
          }
          var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
          if (styleName === "float") {
            styleName = "cssFloat";
          }
          if (isCustomProperty) {
            style2.setProperty(styleName, styleValue);
          } else {
            style2[styleName] = styleValue;
          }
        }
      }
      function isValueEmpty(value) {
        return value == null || typeof value === "boolean" || value === "";
      }
      function expandShorthandMap(styles) {
        var expanded = {};
        for (var key in styles) {
          var longhands = shorthandToLonghand[key] || [key];
          for (var i2 = 0;i2 < longhands.length; i2++) {
            expanded[longhands[i2]] = key;
          }
        }
        return expanded;
      }
      function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
        {
          if (!nextStyles) {
            return;
          }
          var expandedUpdates = expandShorthandMap(styleUpdates);
          var expandedStyles = expandShorthandMap(nextStyles);
          var warnedAbout = {};
          for (var key in expandedUpdates) {
            var originalKey = expandedUpdates[key];
            var correctOriginalKey = expandedStyles[key];
            if (correctOriginalKey && originalKey !== correctOriginalKey) {
              var warningKey = originalKey + "," + correctOriginalKey;
              if (warnedAbout[warningKey]) {
                continue;
              }
              warnedAbout[warningKey] = true;
              error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
            }
          }
        }
      }
      var omittedCloseTags = {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true
      };
      var voidElementTags = assign({
        menuitem: true
      }, omittedCloseTags);
      var HTML = "__html";
      function assertValidProps(tag, props) {
        if (!props) {
          return;
        }
        if (voidElementTags[tag]) {
          if (props.children != null || props.dangerouslySetInnerHTML != null) {
            throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
          }
        }
        if (props.dangerouslySetInnerHTML != null) {
          if (props.children != null) {
            throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          }
          if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
            throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
          }
        }
        {
          if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
            error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
          }
        }
        if (props.style != null && typeof props.style !== "object") {
          throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
        }
      }
      function isCustomComponent(tagName, props) {
        if (tagName.indexOf("-") === -1) {
          return typeof props.is === "string";
        }
        switch (tagName) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return false;
          default:
            return true;
        }
      }
      var possibleStandardNames = {
        accept: "accept",
        acceptcharset: "acceptCharset",
        "accept-charset": "acceptCharset",
        accesskey: "accessKey",
        action: "action",
        allowfullscreen: "allowFullScreen",
        alt: "alt",
        as: "as",
        async: "async",
        autocapitalize: "autoCapitalize",
        autocomplete: "autoComplete",
        autocorrect: "autoCorrect",
        autofocus: "autoFocus",
        autoplay: "autoPlay",
        autosave: "autoSave",
        capture: "capture",
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        challenge: "challenge",
        charset: "charSet",
        checked: "checked",
        children: "children",
        cite: "cite",
        class: "className",
        classid: "classID",
        classname: "className",
        cols: "cols",
        colspan: "colSpan",
        content: "content",
        contenteditable: "contentEditable",
        contextmenu: "contextMenu",
        controls: "controls",
        controlslist: "controlsList",
        coords: "coords",
        crossorigin: "crossOrigin",
        dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
        data: "data",
        datetime: "dateTime",
        default: "default",
        defaultchecked: "defaultChecked",
        defaultvalue: "defaultValue",
        defer: "defer",
        dir: "dir",
        disabled: "disabled",
        disablepictureinpicture: "disablePictureInPicture",
        disableremoteplayback: "disableRemotePlayback",
        download: "download",
        draggable: "draggable",
        enctype: "encType",
        enterkeyhint: "enterKeyHint",
        for: "htmlFor",
        form: "form",
        formmethod: "formMethod",
        formaction: "formAction",
        formenctype: "formEncType",
        formnovalidate: "formNoValidate",
        formtarget: "formTarget",
        frameborder: "frameBorder",
        headers: "headers",
        height: "height",
        hidden: "hidden",
        high: "high",
        href: "href",
        hreflang: "hrefLang",
        htmlfor: "htmlFor",
        httpequiv: "httpEquiv",
        "http-equiv": "httpEquiv",
        icon: "icon",
        id: "id",
        imagesizes: "imageSizes",
        imagesrcset: "imageSrcSet",
        innerhtml: "innerHTML",
        inputmode: "inputMode",
        integrity: "integrity",
        is: "is",
        itemid: "itemID",
        itemprop: "itemProp",
        itemref: "itemRef",
        itemscope: "itemScope",
        itemtype: "itemType",
        keyparams: "keyParams",
        keytype: "keyType",
        kind: "kind",
        label: "label",
        lang: "lang",
        list: "list",
        loop: "loop",
        low: "low",
        manifest: "manifest",
        marginwidth: "marginWidth",
        marginheight: "marginHeight",
        max: "max",
        maxlength: "maxLength",
        media: "media",
        mediagroup: "mediaGroup",
        method: "method",
        min: "min",
        minlength: "minLength",
        multiple: "multiple",
        muted: "muted",
        name: "name",
        nomodule: "noModule",
        nonce: "nonce",
        novalidate: "noValidate",
        open: "open",
        optimum: "optimum",
        pattern: "pattern",
        placeholder: "placeholder",
        playsinline: "playsInline",
        poster: "poster",
        preload: "preload",
        profile: "profile",
        radiogroup: "radioGroup",
        readonly: "readOnly",
        referrerpolicy: "referrerPolicy",
        rel: "rel",
        required: "required",
        reversed: "reversed",
        role: "role",
        rows: "rows",
        rowspan: "rowSpan",
        sandbox: "sandbox",
        scope: "scope",
        scoped: "scoped",
        scrolling: "scrolling",
        seamless: "seamless",
        selected: "selected",
        shape: "shape",
        size: "size",
        sizes: "sizes",
        span: "span",
        spellcheck: "spellCheck",
        src: "src",
        srcdoc: "srcDoc",
        srclang: "srcLang",
        srcset: "srcSet",
        start: "start",
        step: "step",
        style: "style",
        summary: "summary",
        tabindex: "tabIndex",
        target: "target",
        title: "title",
        type: "type",
        usemap: "useMap",
        value: "value",
        width: "width",
        wmode: "wmode",
        wrap: "wrap",
        about: "about",
        accentheight: "accentHeight",
        "accent-height": "accentHeight",
        accumulate: "accumulate",
        additive: "additive",
        alignmentbaseline: "alignmentBaseline",
        "alignment-baseline": "alignmentBaseline",
        allowreorder: "allowReorder",
        alphabetic: "alphabetic",
        amplitude: "amplitude",
        arabicform: "arabicForm",
        "arabic-form": "arabicForm",
        ascent: "ascent",
        attributename: "attributeName",
        attributetype: "attributeType",
        autoreverse: "autoReverse",
        azimuth: "azimuth",
        basefrequency: "baseFrequency",
        baselineshift: "baselineShift",
        "baseline-shift": "baselineShift",
        baseprofile: "baseProfile",
        bbox: "bbox",
        begin: "begin",
        bias: "bias",
        by: "by",
        calcmode: "calcMode",
        capheight: "capHeight",
        "cap-height": "capHeight",
        clip: "clip",
        clippath: "clipPath",
        "clip-path": "clipPath",
        clippathunits: "clipPathUnits",
        cliprule: "clipRule",
        "clip-rule": "clipRule",
        color: "color",
        colorinterpolation: "colorInterpolation",
        "color-interpolation": "colorInterpolation",
        colorinterpolationfilters: "colorInterpolationFilters",
        "color-interpolation-filters": "colorInterpolationFilters",
        colorprofile: "colorProfile",
        "color-profile": "colorProfile",
        colorrendering: "colorRendering",
        "color-rendering": "colorRendering",
        contentscripttype: "contentScriptType",
        contentstyletype: "contentStyleType",
        cursor: "cursor",
        cx: "cx",
        cy: "cy",
        d: "d",
        datatype: "datatype",
        decelerate: "decelerate",
        descent: "descent",
        diffuseconstant: "diffuseConstant",
        direction: "direction",
        display: "display",
        divisor: "divisor",
        dominantbaseline: "dominantBaseline",
        "dominant-baseline": "dominantBaseline",
        dur: "dur",
        dx: "dx",
        dy: "dy",
        edgemode: "edgeMode",
        elevation: "elevation",
        enablebackground: "enableBackground",
        "enable-background": "enableBackground",
        end: "end",
        exponent: "exponent",
        externalresourcesrequired: "externalResourcesRequired",
        fill: "fill",
        fillopacity: "fillOpacity",
        "fill-opacity": "fillOpacity",
        fillrule: "fillRule",
        "fill-rule": "fillRule",
        filter: "filter",
        filterres: "filterRes",
        filterunits: "filterUnits",
        floodopacity: "floodOpacity",
        "flood-opacity": "floodOpacity",
        floodcolor: "floodColor",
        "flood-color": "floodColor",
        focusable: "focusable",
        fontfamily: "fontFamily",
        "font-family": "fontFamily",
        fontsize: "fontSize",
        "font-size": "fontSize",
        fontsizeadjust: "fontSizeAdjust",
        "font-size-adjust": "fontSizeAdjust",
        fontstretch: "fontStretch",
        "font-stretch": "fontStretch",
        fontstyle: "fontStyle",
        "font-style": "fontStyle",
        fontvariant: "fontVariant",
        "font-variant": "fontVariant",
        fontweight: "fontWeight",
        "font-weight": "fontWeight",
        format: "format",
        from: "from",
        fx: "fx",
        fy: "fy",
        g1: "g1",
        g2: "g2",
        glyphname: "glyphName",
        "glyph-name": "glyphName",
        glyphorientationhorizontal: "glyphOrientationHorizontal",
        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
        glyphorientationvertical: "glyphOrientationVertical",
        "glyph-orientation-vertical": "glyphOrientationVertical",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        hanging: "hanging",
        horizadvx: "horizAdvX",
        "horiz-adv-x": "horizAdvX",
        horizoriginx: "horizOriginX",
        "horiz-origin-x": "horizOriginX",
        ideographic: "ideographic",
        imagerendering: "imageRendering",
        "image-rendering": "imageRendering",
        in2: "in2",
        in: "in",
        inlist: "inlist",
        intercept: "intercept",
        k1: "k1",
        k2: "k2",
        k3: "k3",
        k4: "k4",
        k: "k",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        kerning: "kerning",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        letterspacing: "letterSpacing",
        "letter-spacing": "letterSpacing",
        lightingcolor: "lightingColor",
        "lighting-color": "lightingColor",
        limitingconeangle: "limitingConeAngle",
        local: "local",
        markerend: "markerEnd",
        "marker-end": "markerEnd",
        markerheight: "markerHeight",
        markermid: "markerMid",
        "marker-mid": "markerMid",
        markerstart: "markerStart",
        "marker-start": "markerStart",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        mask: "mask",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        mathematical: "mathematical",
        mode: "mode",
        numoctaves: "numOctaves",
        offset: "offset",
        opacity: "opacity",
        operator: "operator",
        order: "order",
        orient: "orient",
        orientation: "orientation",
        origin: "origin",
        overflow: "overflow",
        overlineposition: "overlinePosition",
        "overline-position": "overlinePosition",
        overlinethickness: "overlineThickness",
        "overline-thickness": "overlineThickness",
        paintorder: "paintOrder",
        "paint-order": "paintOrder",
        panose1: "panose1",
        "panose-1": "panose1",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointerevents: "pointerEvents",
        "pointer-events": "pointerEvents",
        points: "points",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        prefix: "prefix",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        property: "property",
        r: "r",
        radius: "radius",
        refx: "refX",
        refy: "refY",
        renderingintent: "renderingIntent",
        "rendering-intent": "renderingIntent",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        resource: "resource",
        restart: "restart",
        result: "result",
        results: "results",
        rotate: "rotate",
        rx: "rx",
        ry: "ry",
        scale: "scale",
        security: "security",
        seed: "seed",
        shaperendering: "shapeRendering",
        "shape-rendering": "shapeRendering",
        slope: "slope",
        spacing: "spacing",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        speed: "speed",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stemh: "stemh",
        stemv: "stemv",
        stitchtiles: "stitchTiles",
        stopcolor: "stopColor",
        "stop-color": "stopColor",
        stopopacity: "stopOpacity",
        "stop-opacity": "stopOpacity",
        strikethroughposition: "strikethroughPosition",
        "strikethrough-position": "strikethroughPosition",
        strikethroughthickness: "strikethroughThickness",
        "strikethrough-thickness": "strikethroughThickness",
        string: "string",
        stroke: "stroke",
        strokedasharray: "strokeDasharray",
        "stroke-dasharray": "strokeDasharray",
        strokedashoffset: "strokeDashoffset",
        "stroke-dashoffset": "strokeDashoffset",
        strokelinecap: "strokeLinecap",
        "stroke-linecap": "strokeLinecap",
        strokelinejoin: "strokeLinejoin",
        "stroke-linejoin": "strokeLinejoin",
        strokemiterlimit: "strokeMiterlimit",
        "stroke-miterlimit": "strokeMiterlimit",
        strokewidth: "strokeWidth",
        "stroke-width": "strokeWidth",
        strokeopacity: "strokeOpacity",
        "stroke-opacity": "strokeOpacity",
        suppresscontenteditablewarning: "suppressContentEditableWarning",
        suppresshydrationwarning: "suppressHydrationWarning",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textanchor: "textAnchor",
        "text-anchor": "textAnchor",
        textdecoration: "textDecoration",
        "text-decoration": "textDecoration",
        textlength: "textLength",
        textrendering: "textRendering",
        "text-rendering": "textRendering",
        to: "to",
        transform: "transform",
        typeof: "typeof",
        u1: "u1",
        u2: "u2",
        underlineposition: "underlinePosition",
        "underline-position": "underlinePosition",
        underlinethickness: "underlineThickness",
        "underline-thickness": "underlineThickness",
        unicode: "unicode",
        unicodebidi: "unicodeBidi",
        "unicode-bidi": "unicodeBidi",
        unicoderange: "unicodeRange",
        "unicode-range": "unicodeRange",
        unitsperem: "unitsPerEm",
        "units-per-em": "unitsPerEm",
        unselectable: "unselectable",
        valphabetic: "vAlphabetic",
        "v-alphabetic": "vAlphabetic",
        values: "values",
        vectoreffect: "vectorEffect",
        "vector-effect": "vectorEffect",
        version: "version",
        vertadvy: "vertAdvY",
        "vert-adv-y": "vertAdvY",
        vertoriginx: "vertOriginX",
        "vert-origin-x": "vertOriginX",
        vertoriginy: "vertOriginY",
        "vert-origin-y": "vertOriginY",
        vhanging: "vHanging",
        "v-hanging": "vHanging",
        videographic: "vIdeographic",
        "v-ideographic": "vIdeographic",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        visibility: "visibility",
        vmathematical: "vMathematical",
        "v-mathematical": "vMathematical",
        vocab: "vocab",
        widths: "widths",
        wordspacing: "wordSpacing",
        "word-spacing": "wordSpacing",
        writingmode: "writingMode",
        "writing-mode": "writingMode",
        x1: "x1",
        x2: "x2",
        x: "x",
        xchannelselector: "xChannelSelector",
        xheight: "xHeight",
        "x-height": "xHeight",
        xlinkactuate: "xlinkActuate",
        "xlink:actuate": "xlinkActuate",
        xlinkarcrole: "xlinkArcrole",
        "xlink:arcrole": "xlinkArcrole",
        xlinkhref: "xlinkHref",
        "xlink:href": "xlinkHref",
        xlinkrole: "xlinkRole",
        "xlink:role": "xlinkRole",
        xlinkshow: "xlinkShow",
        "xlink:show": "xlinkShow",
        xlinktitle: "xlinkTitle",
        "xlink:title": "xlinkTitle",
        xlinktype: "xlinkType",
        "xlink:type": "xlinkType",
        xmlbase: "xmlBase",
        "xml:base": "xmlBase",
        xmllang: "xmlLang",
        "xml:lang": "xmlLang",
        xmlns: "xmlns",
        "xml:space": "xmlSpace",
        xmlnsxlink: "xmlnsXlink",
        "xmlns:xlink": "xmlnsXlink",
        xmlspace: "xmlSpace",
        y1: "y1",
        y2: "y2",
        y: "y",
        ychannelselector: "yChannelSelector",
        z: "z",
        zoomandpan: "zoomAndPan"
      };
      var ariaProperties = {
        "aria-current": 0,
        "aria-description": 0,
        "aria-details": 0,
        "aria-disabled": 0,
        "aria-hidden": 0,
        "aria-invalid": 0,
        "aria-keyshortcuts": 0,
        "aria-label": 0,
        "aria-roledescription": 0,
        "aria-autocomplete": 0,
        "aria-checked": 0,
        "aria-expanded": 0,
        "aria-haspopup": 0,
        "aria-level": 0,
        "aria-modal": 0,
        "aria-multiline": 0,
        "aria-multiselectable": 0,
        "aria-orientation": 0,
        "aria-placeholder": 0,
        "aria-pressed": 0,
        "aria-readonly": 0,
        "aria-required": 0,
        "aria-selected": 0,
        "aria-sort": 0,
        "aria-valuemax": 0,
        "aria-valuemin": 0,
        "aria-valuenow": 0,
        "aria-valuetext": 0,
        "aria-atomic": 0,
        "aria-busy": 0,
        "aria-live": 0,
        "aria-relevant": 0,
        "aria-dropeffect": 0,
        "aria-grabbed": 0,
        "aria-activedescendant": 0,
        "aria-colcount": 0,
        "aria-colindex": 0,
        "aria-colspan": 0,
        "aria-controls": 0,
        "aria-describedby": 0,
        "aria-errormessage": 0,
        "aria-flowto": 0,
        "aria-labelledby": 0,
        "aria-owns": 0,
        "aria-posinset": 0,
        "aria-rowcount": 0,
        "aria-rowindex": 0,
        "aria-rowspan": 0,
        "aria-setsize": 0
      };
      var warnedProperties = {};
      var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
      var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
      function validateProperty(tagName, name) {
        {
          if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
            return true;
          }
          if (rARIACamel.test(name)) {
            var ariaName = "aria-" + name.slice(4).toLowerCase();
            var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
            if (correctName == null) {
              error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
              warnedProperties[name] = true;
              return true;
            }
            if (name !== correctName) {
              error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
              warnedProperties[name] = true;
              return true;
            }
          }
          if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase();
            var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
            if (standardName == null) {
              warnedProperties[name] = true;
              return false;
            }
            if (name !== standardName) {
              error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
              warnedProperties[name] = true;
              return true;
            }
          }
        }
        return true;
      }
      function warnInvalidARIAProps(type, props) {
        {
          var invalidProps = [];
          for (var key in props) {
            var isValid = validateProperty(type, key);
            if (!isValid) {
              invalidProps.push(key);
            }
          }
          var unknownPropString = invalidProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          if (invalidProps.length === 1) {
            error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
          } else if (invalidProps.length > 1) {
            error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
          }
        }
      }
      function validateProperties(type, props) {
        if (isCustomComponent(type, props)) {
          return;
        }
        warnInvalidARIAProps(type, props);
      }
      var didWarnValueNull = false;
      function validateProperties$1(type, props) {
        {
          if (type !== "input" && type !== "textarea" && type !== "select") {
            return;
          }
          if (props != null && props.value === null && !didWarnValueNull) {
            didWarnValueNull = true;
            if (type === "select" && props.multiple) {
              error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
            } else {
              error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
            }
          }
        }
      }
      var validateProperty$1 = function() {};
      {
        var warnedProperties$1 = {};
        var EVENT_NAME_REGEX = /^on./;
        var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
        var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        validateProperty$1 = function(tagName, name, value, eventRegistry) {
          if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
            return true;
          }
          var lowerCasedName = name.toLowerCase();
          if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
            error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
            warnedProperties$1[name] = true;
            return true;
          }
          if (eventRegistry != null) {
            var { registrationNameDependencies: registrationNameDependencies2, possibleRegistrationNames: possibleRegistrationNames2 } = eventRegistry;
            if (registrationNameDependencies2.hasOwnProperty(name)) {
              return true;
            }
            var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
            if (registrationName != null) {
              error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (EVENT_NAME_REGEX.test(name)) {
              error("Unknown event handler property `%s`. It will be ignored.", name);
              warnedProperties$1[name] = true;
              return true;
            }
          } else if (EVENT_NAME_REGEX.test(name)) {
            if (INVALID_EVENT_NAME_REGEX.test(name)) {
              error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
            }
            warnedProperties$1[name] = true;
            return true;
          }
          if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
            return true;
          }
          if (lowerCasedName === "innerhtml") {
            error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
            warnedProperties$1[name] = true;
            return true;
          }
          if (lowerCasedName === "aria") {
            error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
            warnedProperties$1[name] = true;
            return true;
          }
          if (lowerCasedName === "is" && value !== null && value !== undefined && typeof value !== "string") {
            error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
            warnedProperties$1[name] = true;
            return true;
          }
          if (typeof value === "number" && isNaN(value)) {
            error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
            warnedProperties$1[name] = true;
            return true;
          }
          var propertyInfo = getPropertyInfo(name);
          var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
          if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name) {
              error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
              warnedProperties$1[name] = true;
              return true;
            }
          } else if (!isReserved && name !== lowerCasedName) {
            error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
            warnedProperties$1[name] = true;
            return true;
          }
          if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            if (value) {
              error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
            } else {
              error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
            }
            warnedProperties$1[name] = true;
            return true;
          }
          if (isReserved) {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            warnedProperties$1[name] = true;
            return false;
          }
          if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
            error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
            warnedProperties$1[name] = true;
            return true;
          }
          return true;
        };
      }
      var warnUnknownProperties = function(type, props, eventRegistry) {
        {
          var unknownProps = [];
          for (var key in props) {
            var isValid = validateProperty$1(type, key, props[key], eventRegistry);
            if (!isValid) {
              unknownProps.push(key);
            }
          }
          var unknownPropString = unknownProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          if (unknownProps.length === 1) {
            error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
          } else if (unknownProps.length > 1) {
            error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
          }
        }
      };
      function validateProperties$2(type, props, eventRegistry) {
        if (isCustomComponent(type, props)) {
          return;
        }
        warnUnknownProperties(type, props, eventRegistry);
      }
      var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
      var IS_NON_DELEGATED = 1 << 1;
      var IS_CAPTURE_PHASE = 1 << 2;
      var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
      var currentReplayingEvent = null;
      function setReplayingEvent(event) {
        {
          if (currentReplayingEvent !== null) {
            error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        currentReplayingEvent = event;
      }
      function resetReplayingEvent() {
        {
          if (currentReplayingEvent === null) {
            error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        currentReplayingEvent = null;
      }
      function isReplayingEvent(event) {
        return event === currentReplayingEvent;
      }
      function getEventTarget(nativeEvent) {
        var target = nativeEvent.target || nativeEvent.srcElement || window;
        if (target.correspondingUseElement) {
          target = target.correspondingUseElement;
        }
        return target.nodeType === TEXT_NODE ? target.parentNode : target;
      }
      var restoreImpl = null;
      var restoreTarget = null;
      var restoreQueue = null;
      function restoreStateOfTarget(target) {
        var internalInstance = getInstanceFromNode(target);
        if (!internalInstance) {
          return;
        }
        if (typeof restoreImpl !== "function") {
          throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
        }
        var stateNode = internalInstance.stateNode;
        if (stateNode) {
          var _props = getFiberCurrentPropsFromNode(stateNode);
          restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
        }
      }
      function setRestoreImplementation(impl) {
        restoreImpl = impl;
      }
      function enqueueStateRestore(target) {
        if (restoreTarget) {
          if (restoreQueue) {
            restoreQueue.push(target);
          } else {
            restoreQueue = [target];
          }
        } else {
          restoreTarget = target;
        }
      }
      function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
      }
      function restoreStateIfNeeded() {
        if (!restoreTarget) {
          return;
        }
        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target);
        if (queuedTargets) {
          for (var i2 = 0;i2 < queuedTargets.length; i2++) {
            restoreStateOfTarget(queuedTargets[i2]);
          }
        }
      }
      var batchedUpdatesImpl = function(fn, bookkeeping) {
        return fn(bookkeeping);
      };
      var flushSyncImpl = function() {};
      var isInsideEventHandler = false;
      function finishEventHandler() {
        var controlledComponentsHavePendingUpdates = needsStateRestore();
        if (controlledComponentsHavePendingUpdates) {
          flushSyncImpl();
          restoreStateIfNeeded();
        }
      }
      function batchedUpdates(fn, a22, b3) {
        if (isInsideEventHandler) {
          return fn(a22, b3);
        }
        isInsideEventHandler = true;
        try {
          return batchedUpdatesImpl(fn, a22, b3);
        } finally {
          isInsideEventHandler = false;
          finishEventHandler();
        }
      }
      function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl;
        flushSyncImpl = _flushSyncImpl;
      }
      function isInteractive(tag) {
        return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
      }
      function shouldPreventMouseEvent(name, type, props) {
        switch (name) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
          case "onMouseEnter":
            return !!(props.disabled && isInteractive(type));
          default:
            return false;
        }
      }
      function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (stateNode === null) {
          return null;
        }
        var props = getFiberCurrentPropsFromNode(stateNode);
        if (props === null) {
          return null;
        }
        var listener = props[registrationName];
        if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
          return null;
        }
        if (listener && typeof listener !== "function") {
          throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        }
        return listener;
      }
      var passiveBrowserEventsSupported = false;
      if (canUseDOM) {
        try {
          var options = {};
          Object.defineProperty(options, "passive", {
            get: function() {
              passiveBrowserEventsSupported = true;
            }
          });
          window.addEventListener("test", options, options);
          window.removeEventListener("test", options, options);
        } catch (e3) {
          passiveBrowserEventsSupported = false;
        }
      }
      function invokeGuardedCallbackProd(name, func, context, a22, b3, c22, d2, e3, f4) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        try {
          func.apply(context, funcArgs);
        } catch (error2) {
          this.onError(error2);
        }
      }
      var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
      {
        if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
          var fakeNode = document.createElement("react");
          invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a22, b3, c22, d2, e3, f4) {
            if (typeof document === "undefined" || document === null) {
              throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
            }
            var evt = document.createEvent("Event");
            var didCall = false;
            var didError = true;
            var windowEvent = window.event;
            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
            function restoreAfterDispatch() {
              fakeNode.removeEventListener(evtType, callCallback2, false);
              if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                window.event = windowEvent;
              }
            }
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            function callCallback2() {
              didCall = true;
              restoreAfterDispatch();
              func.apply(context, funcArgs);
              didError = false;
            }
            var error2;
            var didSetError = false;
            var isCrossOriginError = false;
            function handleWindowError(event) {
              error2 = event.error;
              didSetError = true;
              if (error2 === null && event.colno === 0 && event.lineno === 0) {
                isCrossOriginError = true;
              }
              if (event.defaultPrevented) {
                if (error2 != null && typeof error2 === "object") {
                  try {
                    error2._suppressLogging = true;
                  } catch (inner) {}
                }
              }
            }
            var evtType = "react-" + (name ? name : "invokeguardedcallback");
            window.addEventListener("error", handleWindowError);
            fakeNode.addEventListener(evtType, callCallback2, false);
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);
            if (windowEventDescriptor) {
              Object.defineProperty(window, "event", windowEventDescriptor);
            }
            if (didCall && didError) {
              if (!didSetError) {
                error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
              } else if (isCrossOriginError) {
                error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
              }
              this.onError(error2);
            }
            window.removeEventListener("error", handleWindowError);
            if (!didCall) {
              restoreAfterDispatch();
              return invokeGuardedCallbackProd.apply(this, arguments);
            }
          };
        }
      }
      var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
      var hasError = false;
      var caughtError = null;
      var hasRethrowError = false;
      var rethrowError = null;
      var reporter = {
        onError: function(error2) {
          hasError = true;
          caughtError = error2;
        }
      };
      function invokeGuardedCallback(name, func, context, a22, b3, c22, d2, e3, f4) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl$1.apply(reporter, arguments);
      }
      function invokeGuardedCallbackAndCatchFirstError(name, func, context, a22, b3, c22, d2, e3, f4) {
        invokeGuardedCallback.apply(this, arguments);
        if (hasError) {
          var error2 = clearCaughtError();
          if (!hasRethrowError) {
            hasRethrowError = true;
            rethrowError = error2;
          }
        }
      }
      function rethrowCaughtError() {
        if (hasRethrowError) {
          var error2 = rethrowError;
          hasRethrowError = false;
          rethrowError = null;
          throw error2;
        }
      }
      function hasCaughtError() {
        return hasError;
      }
      function clearCaughtError() {
        if (hasError) {
          var error2 = caughtError;
          hasError = false;
          caughtError = null;
          return error2;
        } else {
          throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      function get(key) {
        return key._reactInternals;
      }
      function has(key) {
        return key._reactInternals !== undefined;
      }
      function set(key, value) {
        key._reactInternals = value;
      }
      var NoFlags = 0;
      var PerformedWork = 1;
      var Placement = 2;
      var Update = 4;
      var ChildDeletion = 16;
      var ContentReset = 32;
      var Callback = 64;
      var DidCapture = 128;
      var ForceClientRender = 256;
      var Ref = 512;
      var Snapshot = 1024;
      var Passive = 2048;
      var Hydrating = 4096;
      var Visibility = 8192;
      var StoreConsistency = 16384;
      var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
      var HostEffectMask = 32767;
      var Incomplete = 32768;
      var ShouldCapture = 65536;
      var ForceUpdateForLegacySuspense = 131072;
      var Forked = 1048576;
      var RefStatic = 2097152;
      var LayoutStatic = 4194304;
      var PassiveStatic = 8388608;
      var MountLayoutDev = 16777216;
      var MountPassiveDev = 33554432;
      var BeforeMutationMask = Update | Snapshot | 0;
      var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
      var LayoutMask = Update | Callback | Ref | Visibility;
      var PassiveMask = Passive | ChildDeletion;
      var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
      function getNearestMountedFiber(fiber) {
        var node2 = fiber;
        var nearestMounted = fiber;
        if (!fiber.alternate) {
          var nextNode = node2;
          do {
            node2 = nextNode;
            if ((node2.flags & (Placement | Hydrating)) !== NoFlags) {
              nearestMounted = node2.return;
            }
            nextNode = node2.return;
          } while (nextNode);
        } else {
          while (node2.return) {
            node2 = node2.return;
          }
        }
        if (node2.tag === HostRoot) {
          return nearestMounted;
        }
        return null;
      }
      function getSuspenseInstanceFromFiber(fiber) {
        if (fiber.tag === SuspenseComponent) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState === null) {
            var current2 = fiber.alternate;
            if (current2 !== null) {
              suspenseState = current2.memoizedState;
            }
          }
          if (suspenseState !== null) {
            return suspenseState.dehydrated;
          }
        }
        return null;
      }
      function getContainerFromFiber(fiber) {
        return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
      }
      function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
      }
      function isMounted(component) {
        {
          var owner = ReactCurrentOwner.current;
          if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;
            if (!instance._warnedAboutRefsInRender) {
              error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
            }
            instance._warnedAboutRefsInRender = true;
          }
        }
        var fiber = get(component);
        if (!fiber) {
          return false;
        }
        return getNearestMountedFiber(fiber) === fiber;
      }
      function assertIsMounted(fiber) {
        if (getNearestMountedFiber(fiber) !== fiber) {
          throw new Error("Unable to find node on an unmounted component.");
        }
      }
      function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
          var nearestMounted = getNearestMountedFiber(fiber);
          if (nearestMounted === null) {
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (nearestMounted !== fiber) {
            return null;
          }
          return fiber;
        }
        var a22 = fiber;
        var b3 = alternate;
        while (true) {
          var parentA = a22.return;
          if (parentA === null) {
            break;
          }
          var parentB = parentA.alternate;
          if (parentB === null) {
            var nextParent = parentA.return;
            if (nextParent !== null) {
              a22 = b3 = nextParent;
              continue;
            }
            break;
          }
          if (parentA.child === parentB.child) {
            var child = parentA.child;
            while (child) {
              if (child === a22) {
                assertIsMounted(parentA);
                return fiber;
              }
              if (child === b3) {
                assertIsMounted(parentA);
                return alternate;
              }
              child = child.sibling;
            }
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (a22.return !== b3.return) {
            a22 = parentA;
            b3 = parentB;
          } else {
            var didFindChild = false;
            var _child = parentA.child;
            while (_child) {
              if (_child === a22) {
                didFindChild = true;
                a22 = parentA;
                b3 = parentB;
                break;
              }
              if (_child === b3) {
                didFindChild = true;
                b3 = parentA;
                a22 = parentB;
                break;
              }
              _child = _child.sibling;
            }
            if (!didFindChild) {
              _child = parentB.child;
              while (_child) {
                if (_child === a22) {
                  didFindChild = true;
                  a22 = parentB;
                  b3 = parentA;
                  break;
                }
                if (_child === b3) {
                  didFindChild = true;
                  b3 = parentB;
                  a22 = parentA;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
              }
            }
          }
          if (a22.alternate !== b3) {
            throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        if (a22.tag !== HostRoot) {
          throw new Error("Unable to find node on an unmounted component.");
        }
        if (a22.stateNode.current === a22) {
          return fiber;
        }
        return alternate;
      }
      function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
      }
      function findCurrentHostFiberImpl(node2) {
        if (node2.tag === HostComponent || node2.tag === HostText) {
          return node2;
        }
        var child = node2.child;
        while (child !== null) {
          var match2 = findCurrentHostFiberImpl(child);
          if (match2 !== null) {
            return match2;
          }
          child = child.sibling;
        }
        return null;
      }
      function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
      }
      function findCurrentHostFiberWithNoPortalsImpl(node2) {
        if (node2.tag === HostComponent || node2.tag === HostText) {
          return node2;
        }
        var child = node2.child;
        while (child !== null) {
          if (child.tag !== HostPortal) {
            var match2 = findCurrentHostFiberWithNoPortalsImpl(child);
            if (match2 !== null) {
              return match2;
            }
          }
          child = child.sibling;
        }
        return null;
      }
      var scheduleCallback = Scheduler.unstable_scheduleCallback;
      var cancelCallback = Scheduler.unstable_cancelCallback;
      var shouldYield = Scheduler.unstable_shouldYield;
      var requestPaint = Scheduler.unstable_requestPaint;
      var now = Scheduler.unstable_now;
      var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
      var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
      var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
      var NormalPriority = Scheduler.unstable_NormalPriority;
      var LowPriority = Scheduler.unstable_LowPriority;
      var IdlePriority = Scheduler.unstable_IdlePriority;
      var unstable_yieldValue2 = Scheduler.unstable_yieldValue;
      var unstable_setDisableYieldValue2 = Scheduler.unstable_setDisableYieldValue;
      var rendererID = null;
      var injectedHook = null;
      var injectedProfilingHooks = null;
      var hasLoggedError = false;
      var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
      function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
          return false;
        }
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled) {
          return true;
        }
        if (!hook.supportsFiber) {
          {
            error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
          }
          return true;
        }
        try {
          if (enableSchedulingProfiler) {
            internals = assign({}, internals, {
              getLaneLabelMap,
              injectProfilingHooks
            });
          }
          rendererID = hook.inject(internals);
          injectedHook = hook;
        } catch (err) {
          {
            error("React instrumentation encountered an error: %s.", err);
          }
        }
        if (hook.checkDCE) {
          return true;
        } else {
          return false;
        }
      }
      function onScheduleRoot(root2, children) {
        {
          if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
            try {
              injectedHook.onScheduleFiberRoot(rendererID, root2, children);
            } catch (err) {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function onCommitRoot(root2, eventPriority) {
        if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
          try {
            var didError = (root2.current.flags & DidCapture) === DidCapture;
            if (enableProfilerTimer) {
              var schedulerPriority;
              switch (eventPriority) {
                case DiscreteEventPriority:
                  schedulerPriority = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriority = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriority = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriority = IdlePriority;
                  break;
                default:
                  schedulerPriority = NormalPriority;
                  break;
              }
              injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
            } else {
              injectedHook.onCommitFiberRoot(rendererID, root2, undefined, didError);
            }
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function onPostCommitRoot(root2) {
        if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
          try {
            injectedHook.onPostCommitFiberRoot(rendererID, root2);
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function onCommitUnmount(fiber) {
        if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
          try {
            injectedHook.onCommitFiberUnmount(rendererID, fiber);
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function setIsStrictModeForDevtools(newIsStrictMode) {
        {
          if (typeof unstable_yieldValue2 === "function") {
            unstable_setDisableYieldValue2(newIsStrictMode);
            setSuppressWarning(newIsStrictMode);
          }
          if (injectedHook && typeof injectedHook.setStrictMode === "function") {
            try {
              injectedHook.setStrictMode(rendererID, newIsStrictMode);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
      }
      function injectProfilingHooks(profilingHooks) {
        injectedProfilingHooks = profilingHooks;
      }
      function getLaneLabelMap() {
        {
          var map = new Map;
          var lane = 1;
          for (var index2 = 0;index2 < TotalLanes; index2++) {
            var label = getLabelForLane(lane);
            map.set(lane, label);
            lane *= 2;
          }
          return map;
        }
      }
      function markCommitStarted(lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
            injectedProfilingHooks.markCommitStarted(lanes);
          }
        }
      }
      function markCommitStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
            injectedProfilingHooks.markCommitStopped();
          }
        }
      }
      function markComponentRenderStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
            injectedProfilingHooks.markComponentRenderStarted(fiber);
          }
        }
      }
      function markComponentRenderStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
            injectedProfilingHooks.markComponentRenderStopped();
          }
        }
      }
      function markComponentPassiveEffectMountStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
            injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
          }
        }
      }
      function markComponentPassiveEffectMountStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
            injectedProfilingHooks.markComponentPassiveEffectMountStopped();
          }
        }
      }
      function markComponentPassiveEffectUnmountStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
            injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
          }
        }
      }
      function markComponentPassiveEffectUnmountStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
            injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
          }
        }
      }
      function markComponentLayoutEffectMountStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
            injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
          }
        }
      }
      function markComponentLayoutEffectMountStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
            injectedProfilingHooks.markComponentLayoutEffectMountStopped();
          }
        }
      }
      function markComponentLayoutEffectUnmountStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
            injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
          }
        }
      }
      function markComponentLayoutEffectUnmountStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
            injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
          }
        }
      }
      function markComponentErrored(fiber, thrownValue, lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
            injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
          }
        }
      }
      function markComponentSuspended(fiber, wakeable, lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
            injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
          }
        }
      }
      function markLayoutEffectsStarted(lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
            injectedProfilingHooks.markLayoutEffectsStarted(lanes);
          }
        }
      }
      function markLayoutEffectsStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
            injectedProfilingHooks.markLayoutEffectsStopped();
          }
        }
      }
      function markPassiveEffectsStarted(lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
            injectedProfilingHooks.markPassiveEffectsStarted(lanes);
          }
        }
      }
      function markPassiveEffectsStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
            injectedProfilingHooks.markPassiveEffectsStopped();
          }
        }
      }
      function markRenderStarted(lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
            injectedProfilingHooks.markRenderStarted(lanes);
          }
        }
      }
      function markRenderYielded() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
            injectedProfilingHooks.markRenderYielded();
          }
        }
      }
      function markRenderStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
            injectedProfilingHooks.markRenderStopped();
          }
        }
      }
      function markRenderScheduled(lane) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
            injectedProfilingHooks.markRenderScheduled(lane);
          }
        }
      }
      function markForceUpdateScheduled(fiber, lane) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
            injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
          }
        }
      }
      function markStateUpdateScheduled(fiber, lane) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
            injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
          }
        }
      }
      var NoMode = 0;
      var ConcurrentMode = 1;
      var ProfileMode = 2;
      var StrictLegacyMode = 8;
      var StrictEffectsMode = 16;
      var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
      var log = Math.log;
      var LN2 = Math.LN2;
      function clz32Fallback(x32) {
        var asUint = x32 >>> 0;
        if (asUint === 0) {
          return 32;
        }
        return 31 - (log(asUint) / LN2 | 0) | 0;
      }
      var TotalLanes = 31;
      var NoLanes = 0;
      var NoLane = 0;
      var SyncLane = 1;
      var InputContinuousHydrationLane = 2;
      var InputContinuousLane = 4;
      var DefaultHydrationLane = 8;
      var DefaultLane = 16;
      var TransitionHydrationLane = 32;
      var TransitionLanes = 4194240;
      var TransitionLane1 = 64;
      var TransitionLane2 = 128;
      var TransitionLane3 = 256;
      var TransitionLane4 = 512;
      var TransitionLane5 = 1024;
      var TransitionLane6 = 2048;
      var TransitionLane7 = 4096;
      var TransitionLane8 = 8192;
      var TransitionLane9 = 16384;
      var TransitionLane10 = 32768;
      var TransitionLane11 = 65536;
      var TransitionLane12 = 131072;
      var TransitionLane13 = 262144;
      var TransitionLane14 = 524288;
      var TransitionLane15 = 1048576;
      var TransitionLane16 = 2097152;
      var RetryLanes = 130023424;
      var RetryLane1 = 4194304;
      var RetryLane2 = 8388608;
      var RetryLane3 = 16777216;
      var RetryLane4 = 33554432;
      var RetryLane5 = 67108864;
      var SomeRetryLane = RetryLane1;
      var SelectiveHydrationLane = 134217728;
      var NonIdleLanes = 268435455;
      var IdleHydrationLane = 268435456;
      var IdleLane = 536870912;
      var OffscreenLane = 1073741824;
      function getLabelForLane(lane) {
        {
          if (lane & SyncLane) {
            return "Sync";
          }
          if (lane & InputContinuousHydrationLane) {
            return "InputContinuousHydration";
          }
          if (lane & InputContinuousLane) {
            return "InputContinuous";
          }
          if (lane & DefaultHydrationLane) {
            return "DefaultHydration";
          }
          if (lane & DefaultLane) {
            return "Default";
          }
          if (lane & TransitionHydrationLane) {
            return "TransitionHydration";
          }
          if (lane & TransitionLanes) {
            return "Transition";
          }
          if (lane & RetryLanes) {
            return "Retry";
          }
          if (lane & SelectiveHydrationLane) {
            return "SelectiveHydration";
          }
          if (lane & IdleHydrationLane) {
            return "IdleHydration";
          }
          if (lane & IdleLane) {
            return "Idle";
          }
          if (lane & OffscreenLane) {
            return "Offscreen";
          }
        }
      }
      var NoTimestamp = -1;
      var nextTransitionLane = TransitionLane1;
      var nextRetryLane = RetryLane1;
      function getHighestPriorityLanes(lanes) {
        switch (getHighestPriorityLane(lanes)) {
          case SyncLane:
            return SyncLane;
          case InputContinuousHydrationLane:
            return InputContinuousHydrationLane;
          case InputContinuousLane:
            return InputContinuousLane;
          case DefaultHydrationLane:
            return DefaultHydrationLane;
          case DefaultLane:
            return DefaultLane;
          case TransitionHydrationLane:
            return TransitionHydrationLane;
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
            return lanes & TransitionLanes;
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
          case RetryLane5:
            return lanes & RetryLanes;
          case SelectiveHydrationLane:
            return SelectiveHydrationLane;
          case IdleHydrationLane:
            return IdleHydrationLane;
          case IdleLane:
            return IdleLane;
          case OffscreenLane:
            return OffscreenLane;
          default:
            {
              error("Should have found matching lanes. This is a bug in React.");
            }
            return lanes;
        }
      }
      function getNextLanes(root2, wipLanes) {
        var pendingLanes = root2.pendingLanes;
        if (pendingLanes === NoLanes) {
          return NoLanes;
        }
        var nextLanes = NoLanes;
        var suspendedLanes = root2.suspendedLanes;
        var pingedLanes = root2.pingedLanes;
        var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
        if (nonIdlePendingLanes !== NoLanes) {
          var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
          if (nonIdleUnblockedLanes !== NoLanes) {
            nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
          } else {
            var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
            if (nonIdlePingedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
            }
          }
        } else {
          var unblockedLanes = pendingLanes & ~suspendedLanes;
          if (unblockedLanes !== NoLanes) {
            nextLanes = getHighestPriorityLanes(unblockedLanes);
          } else {
            if (pingedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(pingedLanes);
            }
          }
        }
        if (nextLanes === NoLanes) {
          return NoLanes;
        }
        if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
          var nextLane = getHighestPriorityLane(nextLanes);
          var wipLane = getHighestPriorityLane(wipLanes);
          if (nextLane >= wipLane || nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
            return wipLanes;
          }
        }
        if ((nextLanes & InputContinuousLane) !== NoLanes) {
          nextLanes |= pendingLanes & DefaultLane;
        }
        var entangledLanes = root2.entangledLanes;
        if (entangledLanes !== NoLanes) {
          var entanglements = root2.entanglements;
          var lanes = nextLanes & entangledLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            nextLanes |= entanglements[index2];
            lanes &= ~lane;
          }
        }
        return nextLanes;
      }
      function getMostRecentEventTime(root2, lanes) {
        var eventTimes = root2.eventTimes;
        var mostRecentEventTime = NoTimestamp;
        while (lanes > 0) {
          var index2 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index2;
          var eventTime = eventTimes[index2];
          if (eventTime > mostRecentEventTime) {
            mostRecentEventTime = eventTime;
          }
          lanes &= ~lane;
        }
        return mostRecentEventTime;
      }
      function computeExpirationTime(lane, currentTime) {
        switch (lane) {
          case SyncLane:
          case InputContinuousHydrationLane:
          case InputContinuousLane:
            return currentTime + 250;
          case DefaultHydrationLane:
          case DefaultLane:
          case TransitionHydrationLane:
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
            return currentTime + 5000;
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
          case RetryLane5:
            return NoTimestamp;
          case SelectiveHydrationLane:
          case IdleHydrationLane:
          case IdleLane:
          case OffscreenLane:
            return NoTimestamp;
          default:
            {
              error("Should have found matching lanes. This is a bug in React.");
            }
            return NoTimestamp;
        }
      }
      function markStarvedLanesAsExpired(root2, currentTime) {
        var pendingLanes = root2.pendingLanes;
        var suspendedLanes = root2.suspendedLanes;
        var pingedLanes = root2.pingedLanes;
        var expirationTimes = root2.expirationTimes;
        var lanes = pendingLanes;
        while (lanes > 0) {
          var index2 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index2;
          var expirationTime = expirationTimes[index2];
          if (expirationTime === NoTimestamp) {
            if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
              expirationTimes[index2] = computeExpirationTime(lane, currentTime);
            }
          } else if (expirationTime <= currentTime) {
            root2.expiredLanes |= lane;
          }
          lanes &= ~lane;
        }
      }
      function getHighestPriorityPendingLanes(root2) {
        return getHighestPriorityLanes(root2.pendingLanes);
      }
      function getLanesToRetrySynchronouslyOnError(root2) {
        var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
        if (everythingButOffscreen !== NoLanes) {
          return everythingButOffscreen;
        }
        if (everythingButOffscreen & OffscreenLane) {
          return OffscreenLane;
        }
        return NoLanes;
      }
      function includesSyncLane(lanes) {
        return (lanes & SyncLane) !== NoLanes;
      }
      function includesNonIdleWork(lanes) {
        return (lanes & NonIdleLanes) !== NoLanes;
      }
      function includesOnlyRetries(lanes) {
        return (lanes & RetryLanes) === lanes;
      }
      function includesOnlyNonUrgentLanes(lanes) {
        var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
        return (lanes & UrgentLanes) === NoLanes;
      }
      function includesOnlyTransitions(lanes) {
        return (lanes & TransitionLanes) === lanes;
      }
      function includesBlockingLane(root2, lanes) {
        var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
        return (lanes & SyncDefaultLanes) !== NoLanes;
      }
      function includesExpiredLane(root2, lanes) {
        return (lanes & root2.expiredLanes) !== NoLanes;
      }
      function isTransitionLane(lane) {
        return (lane & TransitionLanes) !== NoLanes;
      }
      function claimNextTransitionLane() {
        var lane = nextTransitionLane;
        nextTransitionLane <<= 1;
        if ((nextTransitionLane & TransitionLanes) === NoLanes) {
          nextTransitionLane = TransitionLane1;
        }
        return lane;
      }
      function claimNextRetryLane() {
        var lane = nextRetryLane;
        nextRetryLane <<= 1;
        if ((nextRetryLane & RetryLanes) === NoLanes) {
          nextRetryLane = RetryLane1;
        }
        return lane;
      }
      function getHighestPriorityLane(lanes) {
        return lanes & -lanes;
      }
      function pickArbitraryLane(lanes) {
        return getHighestPriorityLane(lanes);
      }
      function pickArbitraryLaneIndex(lanes) {
        return 31 - clz32(lanes);
      }
      function laneToIndex(lane) {
        return pickArbitraryLaneIndex(lane);
      }
      function includesSomeLane(a22, b3) {
        return (a22 & b3) !== NoLanes;
      }
      function isSubsetOfLanes(set2, subset) {
        return (set2 & subset) === subset;
      }
      function mergeLanes(a22, b3) {
        return a22 | b3;
      }
      function removeLanes(set2, subset) {
        return set2 & ~subset;
      }
      function intersectLanes(a22, b3) {
        return a22 & b3;
      }
      function laneToLanes(lane) {
        return lane;
      }
      function higherPriorityLane(a22, b3) {
        return a22 !== NoLane && a22 < b3 ? a22 : b3;
      }
      function createLaneMap(initial) {
        var laneMap = [];
        for (var i2 = 0;i2 < TotalLanes; i2++) {
          laneMap.push(initial);
        }
        return laneMap;
      }
      function markRootUpdated(root2, updateLane, eventTime) {
        root2.pendingLanes |= updateLane;
        if (updateLane !== IdleLane) {
          root2.suspendedLanes = NoLanes;
          root2.pingedLanes = NoLanes;
        }
        var eventTimes = root2.eventTimes;
        var index2 = laneToIndex(updateLane);
        eventTimes[index2] = eventTime;
      }
      function markRootSuspended(root2, suspendedLanes) {
        root2.suspendedLanes |= suspendedLanes;
        root2.pingedLanes &= ~suspendedLanes;
        var expirationTimes = root2.expirationTimes;
        var lanes = suspendedLanes;
        while (lanes > 0) {
          var index2 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index2;
          expirationTimes[index2] = NoTimestamp;
          lanes &= ~lane;
        }
      }
      function markRootPinged(root2, pingedLanes, eventTime) {
        root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
      }
      function markRootFinished(root2, remainingLanes) {
        var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
        root2.pendingLanes = remainingLanes;
        root2.suspendedLanes = NoLanes;
        root2.pingedLanes = NoLanes;
        root2.expiredLanes &= remainingLanes;
        root2.mutableReadLanes &= remainingLanes;
        root2.entangledLanes &= remainingLanes;
        var entanglements = root2.entanglements;
        var eventTimes = root2.eventTimes;
        var expirationTimes = root2.expirationTimes;
        var lanes = noLongerPendingLanes;
        while (lanes > 0) {
          var index2 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index2;
          entanglements[index2] = NoLanes;
          eventTimes[index2] = NoTimestamp;
          expirationTimes[index2] = NoTimestamp;
          lanes &= ~lane;
        }
      }
      function markRootEntangled(root2, entangledLanes) {
        var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
        var entanglements = root2.entanglements;
        var lanes = rootEntangledLanes;
        while (lanes) {
          var index2 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index2;
          if (lane & entangledLanes | entanglements[index2] & entangledLanes) {
            entanglements[index2] |= entangledLanes;
          }
          lanes &= ~lane;
        }
      }
      function getBumpedLaneForHydration(root2, renderLanes2) {
        var renderLane = getHighestPriorityLane(renderLanes2);
        var lane;
        switch (renderLane) {
          case InputContinuousLane:
            lane = InputContinuousHydrationLane;
            break;
          case DefaultLane:
            lane = DefaultHydrationLane;
            break;
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
          case RetryLane5:
            lane = TransitionHydrationLane;
            break;
          case IdleLane:
            lane = IdleHydrationLane;
            break;
          default:
            lane = NoLane;
            break;
        }
        if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
          return NoLane;
        }
        return lane;
      }
      function addFiberToLanesMap(root2, fiber, lanes) {
        if (!isDevToolsPresent) {
          return;
        }
        var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
        while (lanes > 0) {
          var index2 = laneToIndex(lanes);
          var lane = 1 << index2;
          var updaters = pendingUpdatersLaneMap[index2];
          updaters.add(fiber);
          lanes &= ~lane;
        }
      }
      function movePendingFibersToMemoized(root2, lanes) {
        if (!isDevToolsPresent) {
          return;
        }
        var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
        var memoizedUpdaters = root2.memoizedUpdaters;
        while (lanes > 0) {
          var index2 = laneToIndex(lanes);
          var lane = 1 << index2;
          var updaters = pendingUpdatersLaneMap[index2];
          if (updaters.size > 0) {
            updaters.forEach(function(fiber) {
              var alternate = fiber.alternate;
              if (alternate === null || !memoizedUpdaters.has(alternate)) {
                memoizedUpdaters.add(fiber);
              }
            });
            updaters.clear();
          }
          lanes &= ~lane;
        }
      }
      function getTransitionsForLanes(root2, lanes) {
        {
          return null;
        }
      }
      var DiscreteEventPriority = SyncLane;
      var ContinuousEventPriority = InputContinuousLane;
      var DefaultEventPriority = DefaultLane;
      var IdleEventPriority = IdleLane;
      var currentUpdatePriority = NoLane;
      function getCurrentUpdatePriority() {
        return currentUpdatePriority;
      }
      function setCurrentUpdatePriority(newPriority) {
        currentUpdatePriority = newPriority;
      }
      function runWithPriority(priority, fn) {
        var previousPriority = currentUpdatePriority;
        try {
          currentUpdatePriority = priority;
          return fn();
        } finally {
          currentUpdatePriority = previousPriority;
        }
      }
      function higherEventPriority(a22, b3) {
        return a22 !== 0 && a22 < b3 ? a22 : b3;
      }
      function lowerEventPriority(a22, b3) {
        return a22 === 0 || a22 > b3 ? a22 : b3;
      }
      function isHigherEventPriority(a22, b3) {
        return a22 !== 0 && a22 < b3;
      }
      function lanesToEventPriority(lanes) {
        var lane = getHighestPriorityLane(lanes);
        if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
          return DiscreteEventPriority;
        }
        if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
          return ContinuousEventPriority;
        }
        if (includesNonIdleWork(lane)) {
          return DefaultEventPriority;
        }
        return IdleEventPriority;
      }
      function isRootDehydrated(root2) {
        var currentState = root2.current.memoizedState;
        return currentState.isDehydrated;
      }
      var _attemptSynchronousHydration;
      function setAttemptSynchronousHydration(fn) {
        _attemptSynchronousHydration = fn;
      }
      function attemptSynchronousHydration(fiber) {
        _attemptSynchronousHydration(fiber);
      }
      var attemptContinuousHydration;
      function setAttemptContinuousHydration(fn) {
        attemptContinuousHydration = fn;
      }
      var attemptHydrationAtCurrentPriority;
      function setAttemptHydrationAtCurrentPriority(fn) {
        attemptHydrationAtCurrentPriority = fn;
      }
      var getCurrentUpdatePriority$1;
      function setGetCurrentUpdatePriority(fn) {
        getCurrentUpdatePriority$1 = fn;
      }
      var attemptHydrationAtPriority;
      function setAttemptHydrationAtPriority(fn) {
        attemptHydrationAtPriority = fn;
      }
      var hasScheduledReplayAttempt = false;
      var queuedDiscreteEvents = [];
      var queuedFocus = null;
      var queuedDrag = null;
      var queuedMouse = null;
      var queuedPointers = new Map;
      var queuedPointerCaptures = new Map;
      var queuedExplicitHydrationTargets = [];
      var discreteReplayableEvents = [
        "mousedown",
        "mouseup",
        "touchcancel",
        "touchend",
        "touchstart",
        "auxclick",
        "dblclick",
        "pointercancel",
        "pointerdown",
        "pointerup",
        "dragend",
        "dragstart",
        "drop",
        "compositionend",
        "compositionstart",
        "keydown",
        "keypress",
        "keyup",
        "input",
        "textInput",
        "copy",
        "cut",
        "paste",
        "click",
        "change",
        "contextmenu",
        "reset",
        "submit"
      ];
      function isDiscreteEventThatRequiresHydration(eventType) {
        return discreteReplayableEvents.indexOf(eventType) > -1;
      }
      function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return {
          blockedOn,
          domEventName,
          eventSystemFlags,
          nativeEvent,
          targetContainers: [targetContainer]
        };
      }
      function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch (domEventName) {
          case "focusin":
          case "focusout":
            queuedFocus = null;
            break;
          case "dragenter":
          case "dragleave":
            queuedDrag = null;
            break;
          case "mouseover":
          case "mouseout":
            queuedMouse = null;
            break;
          case "pointerover":
          case "pointerout": {
            var pointerId = nativeEvent.pointerId;
            queuedPointers.delete(pointerId);
            break;
          }
          case "gotpointercapture":
          case "lostpointercapture": {
            var _pointerId = nativeEvent.pointerId;
            queuedPointerCaptures.delete(_pointerId);
            break;
          }
        }
      }
      function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
          var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (blockedOn !== null) {
            var _fiber2 = getInstanceFromNode(blockedOn);
            if (_fiber2 !== null) {
              attemptContinuousHydration(_fiber2);
            }
          }
          return queuedEvent;
        }
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        var targetContainers = existingQueuedEvent.targetContainers;
        if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
          targetContainers.push(targetContainer);
        }
        return existingQueuedEvent;
      }
      function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        switch (domEventName) {
          case "focusin": {
            var focusEvent = nativeEvent;
            queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
            return true;
          }
          case "dragenter": {
            var dragEvent = nativeEvent;
            queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
            return true;
          }
          case "mouseover": {
            var mouseEvent = nativeEvent;
            queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
            return true;
          }
          case "pointerover": {
            var pointerEvent = nativeEvent;
            var pointerId = pointerEvent.pointerId;
            queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
            return true;
          }
          case "gotpointercapture": {
            var _pointerEvent = nativeEvent;
            var _pointerId2 = _pointerEvent.pointerId;
            queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
            return true;
          }
        }
        return false;
      }
      function attemptExplicitHydrationTarget(queuedTarget) {
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (targetInst !== null) {
          var nearestMounted = getNearestMountedFiber(targetInst);
          if (nearestMounted !== null) {
            var tag = nearestMounted.tag;
            if (tag === SuspenseComponent) {
              var instance = getSuspenseInstanceFromFiber(nearestMounted);
              if (instance !== null) {
                queuedTarget.blockedOn = instance;
                attemptHydrationAtPriority(queuedTarget.priority, function() {
                  attemptHydrationAtCurrentPriority(nearestMounted);
                });
                return;
              }
            } else if (tag === HostRoot) {
              var root2 = nearestMounted.stateNode;
              if (isRootDehydrated(root2)) {
                queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                return;
              }
            }
          }
        }
        queuedTarget.blockedOn = null;
      }
      function queueExplicitHydrationTarget(target) {
        var updatePriority = getCurrentUpdatePriority$1();
        var queuedTarget = {
          blockedOn: null,
          target,
          priority: updatePriority
        };
        var i2 = 0;
        for (;i2 < queuedExplicitHydrationTargets.length; i2++) {
          if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i2].priority)) {
            break;
          }
        }
        queuedExplicitHydrationTargets.splice(i2, 0, queuedTarget);
        if (i2 === 0) {
          attemptExplicitHydrationTarget(queuedTarget);
        }
      }
      function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (queuedEvent.blockedOn !== null) {
          return false;
        }
        var targetContainers = queuedEvent.targetContainers;
        while (targetContainers.length > 0) {
          var targetContainer = targetContainers[0];
          var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
          if (nextBlockedOn === null) {
            {
              var nativeEvent = queuedEvent.nativeEvent;
              var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
              setReplayingEvent(nativeEventClone);
              nativeEvent.target.dispatchEvent(nativeEventClone);
              resetReplayingEvent();
            }
          } else {
            var _fiber3 = getInstanceFromNode(nextBlockedOn);
            if (_fiber3 !== null) {
              attemptContinuousHydration(_fiber3);
            }
            queuedEvent.blockedOn = nextBlockedOn;
            return false;
          }
          targetContainers.shift();
        }
        return true;
      }
      function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
        if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
          map.delete(key);
        }
      }
      function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false;
        if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
          queuedFocus = null;
        }
        if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
          queuedDrag = null;
        }
        if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
          queuedMouse = null;
        }
        queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
        queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
      }
      function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        if (queuedEvent.blockedOn === unblocked) {
          queuedEvent.blockedOn = null;
          if (!hasScheduledReplayAttempt) {
            hasScheduledReplayAttempt = true;
            Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
          }
        }
      }
      function retryIfBlockedOn(unblocked) {
        if (queuedDiscreteEvents.length > 0) {
          scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
          for (var i2 = 1;i2 < queuedDiscreteEvents.length; i2++) {
            var queuedEvent = queuedDiscreteEvents[i2];
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
            }
          }
        }
        if (queuedFocus !== null) {
          scheduleCallbackIfUnblocked(queuedFocus, unblocked);
        }
        if (queuedDrag !== null) {
          scheduleCallbackIfUnblocked(queuedDrag, unblocked);
        }
        if (queuedMouse !== null) {
          scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        }
        var unblock = function(queuedEvent2) {
          return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
        };
        queuedPointers.forEach(unblock);
        queuedPointerCaptures.forEach(unblock);
        for (var _i = 0;_i < queuedExplicitHydrationTargets.length; _i++) {
          var queuedTarget = queuedExplicitHydrationTargets[_i];
          if (queuedTarget.blockedOn === unblocked) {
            queuedTarget.blockedOn = null;
          }
        }
        while (queuedExplicitHydrationTargets.length > 0) {
          var nextExplicitTarget = queuedExplicitHydrationTargets[0];
          if (nextExplicitTarget.blockedOn !== null) {
            break;
          } else {
            attemptExplicitHydrationTarget(nextExplicitTarget);
            if (nextExplicitTarget.blockedOn === null) {
              queuedExplicitHydrationTargets.shift();
            }
          }
        }
      }
      var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
      var _enabled = true;
      function setEnabled(enabled) {
        _enabled = !!enabled;
      }
      function isEnabled() {
        return _enabled;
      }
      function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
        var eventPriority = getEventPriority(domEventName);
        var listenerWrapper;
        switch (eventPriority) {
          case DiscreteEventPriority:
            listenerWrapper = dispatchDiscreteEvent;
            break;
          case ContinuousEventPriority:
            listenerWrapper = dispatchContinuousEvent;
            break;
          case DefaultEventPriority:
          default:
            listenerWrapper = dispatchEvent;
            break;
        }
        return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
      }
      function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
          setCurrentUpdatePriority(DiscreteEventPriority);
          dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig.transition = prevTransition;
        }
      }
      function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
          setCurrentUpdatePriority(ContinuousEventPriority);
          dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig.transition = prevTransition;
        }
      }
      function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (!_enabled) {
          return;
        }
        {
          dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        }
      }
      function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn === null) {
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
          clearIfContinuousEvent(domEventName, nativeEvent);
          return;
        }
        if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
          nativeEvent.stopPropagation();
          return;
        }
        clearIfContinuousEvent(domEventName, nativeEvent);
        if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
          while (blockedOn !== null) {
            var fiber = getInstanceFromNode(blockedOn);
            if (fiber !== null) {
              attemptSynchronousHydration(fiber);
            }
            var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (nextBlockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
            }
            if (nextBlockedOn === blockedOn) {
              break;
            }
            blockedOn = nextBlockedOn;
          }
          if (blockedOn !== null) {
            nativeEvent.stopPropagation();
          }
          return;
        }
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
      }
      var return_targetInst = null;
      function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return_targetInst = null;
        var nativeEventTarget = getEventTarget(nativeEvent);
        var targetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (targetInst !== null) {
          var nearestMounted = getNearestMountedFiber(targetInst);
          if (nearestMounted === null) {
            targetInst = null;
          } else {
            var tag = nearestMounted.tag;
            if (tag === SuspenseComponent) {
              var instance = getSuspenseInstanceFromFiber(nearestMounted);
              if (instance !== null) {
                return instance;
              }
              targetInst = null;
            } else if (tag === HostRoot) {
              var root2 = nearestMounted.stateNode;
              if (isRootDehydrated(root2)) {
                return getContainerFromFiber(nearestMounted);
              }
              targetInst = null;
            } else if (nearestMounted !== targetInst) {
              targetInst = null;
            }
          }
        }
        return_targetInst = targetInst;
        return null;
      }
      function getEventPriority(domEventName) {
        switch (domEventName) {
          case "cancel":
          case "click":
          case "close":
          case "contextmenu":
          case "copy":
          case "cut":
          case "auxclick":
          case "dblclick":
          case "dragend":
          case "dragstart":
          case "drop":
          case "focusin":
          case "focusout":
          case "input":
          case "invalid":
          case "keydown":
          case "keypress":
          case "keyup":
          case "mousedown":
          case "mouseup":
          case "paste":
          case "pause":
          case "play":
          case "pointercancel":
          case "pointerdown":
          case "pointerup":
          case "ratechange":
          case "reset":
          case "resize":
          case "seeked":
          case "submit":
          case "touchcancel":
          case "touchend":
          case "touchstart":
          case "volumechange":
          case "change":
          case "selectionchange":
          case "textInput":
          case "compositionstart":
          case "compositionend":
          case "compositionupdate":
          case "beforeblur":
          case "afterblur":
          case "beforeinput":
          case "blur":
          case "fullscreenchange":
          case "focus":
          case "hashchange":
          case "popstate":
          case "select":
          case "selectstart":
            return DiscreteEventPriority;
          case "drag":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "mousemove":
          case "mouseout":
          case "mouseover":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "scroll":
          case "toggle":
          case "touchmove":
          case "wheel":
          case "mouseenter":
          case "mouseleave":
          case "pointerenter":
          case "pointerleave":
            return ContinuousEventPriority;
          case "message": {
            var schedulerPriority = getCurrentPriorityLevel();
            switch (schedulerPriority) {
              case ImmediatePriority:
                return DiscreteEventPriority;
              case UserBlockingPriority:
                return ContinuousEventPriority;
              case NormalPriority:
              case LowPriority:
                return DefaultEventPriority;
              case IdlePriority:
                return IdleEventPriority;
              default:
                return DefaultEventPriority;
            }
          }
          default:
            return DefaultEventPriority;
        }
      }
      function addEventBubbleListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, false);
        return listener;
      }
      function addEventCaptureListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, true);
        return listener;
      }
      function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
          capture: true,
          passive
        });
        return listener;
      }
      function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
          passive
        });
        return listener;
      }
      var root = null;
      var startText = null;
      var fallbackText = null;
      function initialize(nativeEventTarget) {
        root = nativeEventTarget;
        startText = getText();
        return true;
      }
      function reset() {
        root = null;
        startText = null;
        fallbackText = null;
      }
      function getData() {
        if (fallbackText) {
          return fallbackText;
        }
        var start;
        var startValue = startText;
        var startLength = startValue.length;
        var end;
        var endValue = getText();
        var endLength = endValue.length;
        for (start = 0;start < startLength; start++) {
          if (startValue[start] !== endValue[start]) {
            break;
          }
        }
        var minEnd = startLength - start;
        for (end = 1;end <= minEnd; end++) {
          if (startValue[startLength - end] !== endValue[endLength - end]) {
            break;
          }
        }
        var sliceTail = end > 1 ? 1 - end : undefined;
        fallbackText = endValue.slice(start, sliceTail);
        return fallbackText;
      }
      function getText() {
        if ("value" in root) {
          return root.value;
        }
        return root.textContent;
      }
      function getEventCharCode(nativeEvent) {
        var charCode;
        var keyCode = nativeEvent.keyCode;
        if ("charCode" in nativeEvent) {
          charCode = nativeEvent.charCode;
          if (charCode === 0 && keyCode === 13) {
            charCode = 13;
          }
        } else {
          charCode = keyCode;
        }
        if (charCode === 10) {
          charCode = 13;
        }
        if (charCode >= 32 || charCode === 13) {
          return charCode;
        }
        return 0;
      }
      function functionThatReturnsTrue() {
        return true;
      }
      function functionThatReturnsFalse() {
        return false;
      }
      function createSyntheticEvent(Interface) {
        function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
          this._reactName = reactName;
          this._targetInst = targetInst;
          this.type = reactEventType;
          this.nativeEvent = nativeEvent;
          this.target = nativeEventTarget;
          this.currentTarget = null;
          for (var _propName in Interface) {
            if (!Interface.hasOwnProperty(_propName)) {
              continue;
            }
            var normalize = Interface[_propName];
            if (normalize) {
              this[_propName] = normalize(nativeEvent);
            } else {
              this[_propName] = nativeEvent[_propName];
            }
          }
          var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
          if (defaultPrevented) {
            this.isDefaultPrevented = functionThatReturnsTrue;
          } else {
            this.isDefaultPrevented = functionThatReturnsFalse;
          }
          this.isPropagationStopped = functionThatReturnsFalse;
          return this;
        }
        assign(SyntheticBaseEvent.prototype, {
          preventDefault: function() {
            this.defaultPrevented = true;
            var event = this.nativeEvent;
            if (!event) {
              return;
            }
            if (event.preventDefault) {
              event.preventDefault();
            } else if (typeof event.returnValue !== "unknown") {
              event.returnValue = false;
            }
            this.isDefaultPrevented = functionThatReturnsTrue;
          },
          stopPropagation: function() {
            var event = this.nativeEvent;
            if (!event) {
              return;
            }
            if (event.stopPropagation) {
              event.stopPropagation();
            } else if (typeof event.cancelBubble !== "unknown") {
              event.cancelBubble = true;
            }
            this.isPropagationStopped = functionThatReturnsTrue;
          },
          persist: function() {},
          isPersistent: functionThatReturnsTrue
        });
        return SyntheticBaseEvent;
      }
      var EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function(event) {
          return event.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
      };
      var SyntheticEvent = createSyntheticEvent(EventInterface);
      var UIEventInterface = assign({}, EventInterface, {
        view: 0,
        detail: 0
      });
      var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
      var lastMovementX;
      var lastMovementY;
      var lastMouseEvent;
      function updateMouseMovementPolyfillState(event) {
        if (event !== lastMouseEvent) {
          if (lastMouseEvent && event.type === "mousemove") {
            lastMovementX = event.screenX - lastMouseEvent.screenX;
            lastMovementY = event.screenY - lastMouseEvent.screenY;
          } else {
            lastMovementX = 0;
            lastMovementY = 0;
          }
          lastMouseEvent = event;
        }
      }
      var MouseEventInterface = assign({}, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function(event) {
          if (event.relatedTarget === undefined)
            return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
          return event.relatedTarget;
        },
        movementX: function(event) {
          if ("movementX" in event) {
            return event.movementX;
          }
          updateMouseMovementPolyfillState(event);
          return lastMovementX;
        },
        movementY: function(event) {
          if ("movementY" in event) {
            return event.movementY;
          }
          return lastMovementY;
        }
      });
      var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
      var DragEventInterface = assign({}, MouseEventInterface, {
        dataTransfer: 0
      });
      var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
      var FocusEventInterface = assign({}, UIEventInterface, {
        relatedTarget: 0
      });
      var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
      var AnimationEventInterface = assign({}, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      });
      var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
      var ClipboardEventInterface = assign({}, EventInterface, {
        clipboardData: function(event) {
          return "clipboardData" in event ? event.clipboardData : window.clipboardData;
        }
      });
      var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
      var CompositionEventInterface = assign({}, EventInterface, {
        data: 0
      });
      var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
      var SyntheticInputEvent = SyntheticCompositionEvent;
      var normalizeKey = {
        Esc: "Escape",
        Spacebar: " ",
        Left: "ArrowLeft",
        Up: "ArrowUp",
        Right: "ArrowRight",
        Down: "ArrowDown",
        Del: "Delete",
        Win: "OS",
        Menu: "ContextMenu",
        Apps: "ContextMenu",
        Scroll: "ScrollLock",
        MozPrintableKey: "Unidentified"
      };
      var translateToKey = {
        "8": "Backspace",
        "9": "Tab",
        "12": "Clear",
        "13": "Enter",
        "16": "Shift",
        "17": "Control",
        "18": "Alt",
        "19": "Pause",
        "20": "CapsLock",
        "27": "Escape",
        "32": " ",
        "33": "PageUp",
        "34": "PageDown",
        "35": "End",
        "36": "Home",
        "37": "ArrowLeft",
        "38": "ArrowUp",
        "39": "ArrowRight",
        "40": "ArrowDown",
        "45": "Insert",
        "46": "Delete",
        "112": "F1",
        "113": "F2",
        "114": "F3",
        "115": "F4",
        "116": "F5",
        "117": "F6",
        "118": "F7",
        "119": "F8",
        "120": "F9",
        "121": "F10",
        "122": "F11",
        "123": "F12",
        "144": "NumLock",
        "145": "ScrollLock",
        "224": "Meta"
      };
      function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
          var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
          if (key !== "Unidentified") {
            return key;
          }
        }
        if (nativeEvent.type === "keypress") {
          var charCode = getEventCharCode(nativeEvent);
          return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
        }
        if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
          return translateToKey[nativeEvent.keyCode] || "Unidentified";
        }
        return "";
      }
      var modifierKeyToProp = {
        Alt: "altKey",
        Control: "ctrlKey",
        Meta: "metaKey",
        Shift: "shiftKey"
      };
      function modifierStateGetter(keyArg) {
        var syntheticEvent = this;
        var nativeEvent = syntheticEvent.nativeEvent;
        if (nativeEvent.getModifierState) {
          return nativeEvent.getModifierState(keyArg);
        }
        var keyProp = modifierKeyToProp[keyArg];
        return keyProp ? !!nativeEvent[keyProp] : false;
      }
      function getEventModifierState(nativeEvent) {
        return modifierStateGetter;
      }
      var KeyboardEventInterface = assign({}, UIEventInterface, {
        key: getEventKey,
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        charCode: function(event) {
          if (event.type === "keypress") {
            return getEventCharCode(event);
          }
          return 0;
        },
        keyCode: function(event) {
          if (event.type === "keydown" || event.type === "keyup") {
            return event.keyCode;
          }
          return 0;
        },
        which: function(event) {
          if (event.type === "keypress") {
            return getEventCharCode(event);
          }
          if (event.type === "keydown" || event.type === "keyup") {
            return event.keyCode;
          }
          return 0;
        }
      });
      var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
      var PointerEventInterface = assign({}, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
      });
      var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
      var TouchEventInterface = assign({}, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
      });
      var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
      var TransitionEventInterface = assign({}, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      });
      var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
      var WheelEventInterface = assign({}, MouseEventInterface, {
        deltaX: function(event) {
          return "deltaX" in event ? event.deltaX : ("wheelDeltaX" in event) ? -event.wheelDeltaX : 0;
        },
        deltaY: function(event) {
          return "deltaY" in event ? event.deltaY : ("wheelDeltaY" in event) ? -event.wheelDeltaY : ("wheelDelta" in event) ? -event.wheelDelta : 0;
        },
        deltaZ: 0,
        deltaMode: 0
      });
      var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
      var END_KEYCODES = [9, 13, 27, 32];
      var START_KEYCODE = 229;
      var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
      var documentMode = null;
      if (canUseDOM && "documentMode" in document) {
        documentMode = document.documentMode;
      }
      var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
      var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
      var SPACEBAR_CODE = 32;
      var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
      function registerEvents() {
        registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
        registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
      }
      var hasSpaceKeypress = false;
      function isKeypressCommand(nativeEvent) {
        return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
      }
      function getCompositionEventType(domEventName) {
        switch (domEventName) {
          case "compositionstart":
            return "onCompositionStart";
          case "compositionend":
            return "onCompositionEnd";
          case "compositionupdate":
            return "onCompositionUpdate";
        }
      }
      function isFallbackCompositionStart(domEventName, nativeEvent) {
        return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
      }
      function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch (domEventName) {
          case "keyup":
            return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
          case "keydown":
            return nativeEvent.keyCode !== START_KEYCODE;
          case "keypress":
          case "mousedown":
          case "focusout":
            return true;
          default:
            return false;
        }
      }
      function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail;
        if (typeof detail === "object" && "data" in detail) {
          return detail.data;
        }
        return null;
      }
      function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === "ko";
      }
      var isComposing = false;
      function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var eventType;
        var fallbackData;
        if (canUseCompositionEvent) {
          eventType = getCompositionEventType(domEventName);
        } else if (!isComposing) {
          if (isFallbackCompositionStart(domEventName, nativeEvent)) {
            eventType = "onCompositionStart";
          }
        } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
          eventType = "onCompositionEnd";
        }
        if (!eventType) {
          return null;
        }
        if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
          if (!isComposing && eventType === "onCompositionStart") {
            isComposing = initialize(nativeEventTarget);
          } else if (eventType === "onCompositionEnd") {
            if (isComposing) {
              fallbackData = getData();
            }
          }
        }
        var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
        if (listeners.length > 0) {
          var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event,
            listeners
          });
          if (fallbackData) {
            event.data = fallbackData;
          } else {
            var customData = getDataFromCustomEvent(nativeEvent);
            if (customData !== null) {
              event.data = customData;
            }
          }
        }
      }
      function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch (domEventName) {
          case "compositionend":
            return getDataFromCustomEvent(nativeEvent);
          case "keypress":
            var which = nativeEvent.which;
            if (which !== SPACEBAR_CODE) {
              return null;
            }
            hasSpaceKeypress = true;
            return SPACEBAR_CHAR;
          case "textInput":
            var chars = nativeEvent.data;
            if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
              return null;
            }
            return chars;
          default:
            return null;
        }
      }
      function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        if (isComposing) {
          if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
            var chars = getData();
            reset();
            isComposing = false;
            return chars;
          }
          return null;
        }
        switch (domEventName) {
          case "paste":
            return null;
          case "keypress":
            if (!isKeypressCommand(nativeEvent)) {
              if (nativeEvent.char && nativeEvent.char.length > 1) {
                return nativeEvent.char;
              } else if (nativeEvent.which) {
                return String.fromCharCode(nativeEvent.which);
              }
            }
            return null;
          case "compositionend":
            return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
          default:
            return null;
        }
      }
      function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var chars;
        if (canUseTextInputEvent) {
          chars = getNativeBeforeInputChars(domEventName, nativeEvent);
        } else {
          chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
        }
        if (!chars) {
          return null;
        }
        var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
        if (listeners.length > 0) {
          var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event,
            listeners
          });
          event.data = chars;
        }
      }
      function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
      }
      var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        "datetime-local": true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
      };
      function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        if (nodeName === "input") {
          return !!supportedInputTypes[elem.type];
        }
        if (nodeName === "textarea") {
          return true;
        }
        return false;
      }
      function isEventSupported(eventNameSuffix) {
        if (!canUseDOM) {
          return false;
        }
        var eventName = "on" + eventNameSuffix;
        var isSupported = eventName in document;
        if (!isSupported) {
          var element = document.createElement("div");
          element.setAttribute(eventName, "return;");
          isSupported = typeof element[eventName] === "function";
        }
        return isSupported;
      }
      function registerEvents$1() {
        registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
      }
      function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
        enqueueStateRestore(target);
        var listeners = accumulateTwoPhaseListeners(inst, "onChange");
        if (listeners.length > 0) {
          var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
          dispatchQueue.push({
            event,
            listeners
          });
        }
      }
      var activeElement = null;
      var activeElementInst = null;
      function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === "select" || nodeName === "input" && elem.type === "file";
      }
      function manualDispatchChangeEvent(nativeEvent) {
        var dispatchQueue = [];
        createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
        batchedUpdates(runEventInBatch, dispatchQueue);
      }
      function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0);
      }
      function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode)) {
          return targetInst;
        }
      }
      function getTargetInstForChangeEvent(domEventName, targetInst) {
        if (domEventName === "change") {
          return targetInst;
        }
      }
      var isInputEventSupported = false;
      if (canUseDOM) {
        isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
      }
      function startWatchingForValueChange(target, targetInst) {
        activeElement = target;
        activeElementInst = targetInst;
        activeElement.attachEvent("onpropertychange", handlePropertyChange);
      }
      function stopWatchingForValueChange() {
        if (!activeElement) {
          return;
        }
        activeElement.detachEvent("onpropertychange", handlePropertyChange);
        activeElement = null;
        activeElementInst = null;
      }
      function handlePropertyChange(nativeEvent) {
        if (nativeEvent.propertyName !== "value") {
          return;
        }
        if (getInstIfValueChanged(activeElementInst)) {
          manualDispatchChangeEvent(nativeEvent);
        }
      }
      function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        if (domEventName === "focusin") {
          stopWatchingForValueChange();
          startWatchingForValueChange(target, targetInst);
        } else if (domEventName === "focusout") {
          stopWatchingForValueChange();
        }
      }
      function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
        if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
          return getInstIfValueChanged(activeElementInst);
        }
      }
      function shouldUseClickEvent(elem) {
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
      }
      function getTargetInstForClickEvent(domEventName, targetInst) {
        if (domEventName === "click") {
          return getInstIfValueChanged(targetInst);
        }
      }
      function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if (domEventName === "input" || domEventName === "change") {
          return getInstIfValueChanged(targetInst);
        }
      }
      function handleControlledInputBlur(node2) {
        var state = node2._wrapperState;
        if (!state || !state.controlled || node2.type !== "number") {
          return;
        }
        {
          setDefaultValue(node2, "number", node2.value);
        }
      }
      function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        var getTargetInstFunc, handleEventFunc;
        if (shouldUseChangeEvent(targetNode)) {
          getTargetInstFunc = getTargetInstForChangeEvent;
        } else if (isTextInputElement(targetNode)) {
          if (isInputEventSupported) {
            getTargetInstFunc = getTargetInstForInputOrChangeEvent;
          } else {
            getTargetInstFunc = getTargetInstForInputEventPolyfill;
            handleEventFunc = handleEventsForInputEventPolyfill;
          }
        } else if (shouldUseClickEvent(targetNode)) {
          getTargetInstFunc = getTargetInstForClickEvent;
        }
        if (getTargetInstFunc) {
          var inst = getTargetInstFunc(domEventName, targetInst);
          if (inst) {
            createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
            return;
          }
        }
        if (handleEventFunc) {
          handleEventFunc(domEventName, targetNode, targetInst);
        }
        if (domEventName === "focusout") {
          handleControlledInputBlur(targetNode);
        }
      }
      function registerEvents$2() {
        registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
        registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
        registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
        registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
      }
      function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
        var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
        if (isOverEvent && !isReplayingEvent(nativeEvent)) {
          var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
          if (related) {
            if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
              return;
            }
          }
        }
        if (!isOutEvent && !isOverEvent) {
          return;
        }
        var win;
        if (nativeEventTarget.window === nativeEventTarget) {
          win = nativeEventTarget;
        } else {
          var doc = nativeEventTarget.ownerDocument;
          if (doc) {
            win = doc.defaultView || doc.parentWindow;
          } else {
            win = window;
          }
        }
        var from;
        var to;
        if (isOutEvent) {
          var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
          from = targetInst;
          to = _related ? getClosestInstanceFromNode(_related) : null;
          if (to !== null) {
            var nearestMounted = getNearestMountedFiber(to);
            if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
              to = null;
            }
          }
        } else {
          from = null;
          to = targetInst;
        }
        if (from === to) {
          return;
        }
        var SyntheticEventCtor = SyntheticMouseEvent;
        var leaveEventType = "onMouseLeave";
        var enterEventType = "onMouseEnter";
        var eventTypePrefix = "mouse";
        if (domEventName === "pointerout" || domEventName === "pointerover") {
          SyntheticEventCtor = SyntheticPointerEvent;
          leaveEventType = "onPointerLeave";
          enterEventType = "onPointerEnter";
          eventTypePrefix = "pointer";
        }
        var fromNode = from == null ? win : getNodeFromInstance(from);
        var toNode = to == null ? win : getNodeFromInstance(to);
        var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
        leave.target = fromNode;
        leave.relatedTarget = toNode;
        var enter = null;
        var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (nativeTargetInst === targetInst) {
          var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
          enterEvent.target = toNode;
          enterEvent.relatedTarget = fromNode;
          enter = enterEvent;
        }
        accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
      }
      function is(x32, y4) {
        return x32 === y4 && (x32 !== 0 || 1 / x32 === 1 / y4) || x32 !== x32 && y4 !== y4;
      }
      var objectIs = typeof Object.is === "function" ? Object.is : is;
      function shallowEqual(objA, objB) {
        if (objectIs(objA, objB)) {
          return true;
        }
        if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
          return false;
        }
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) {
          return false;
        }
        for (var i2 = 0;i2 < keysA.length; i2++) {
          var currentKey = keysA[i2];
          if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
            return false;
          }
        }
        return true;
      }
      function getLeafNode(node2) {
        while (node2 && node2.firstChild) {
          node2 = node2.firstChild;
        }
        return node2;
      }
      function getSiblingNode(node2) {
        while (node2) {
          if (node2.nextSibling) {
            return node2.nextSibling;
          }
          node2 = node2.parentNode;
        }
      }
      function getNodeForCharacterOffset(root2, offset) {
        var node2 = getLeafNode(root2);
        var nodeStart = 0;
        var nodeEnd = 0;
        while (node2) {
          if (node2.nodeType === TEXT_NODE) {
            nodeEnd = nodeStart + node2.textContent.length;
            if (nodeStart <= offset && nodeEnd >= offset) {
              return {
                node: node2,
                offset: offset - nodeStart
              };
            }
            nodeStart = nodeEnd;
          }
          node2 = getLeafNode(getSiblingNode(node2));
        }
      }
      function getOffsets(outerNode) {
        var ownerDocument = outerNode.ownerDocument;
        var win = ownerDocument && ownerDocument.defaultView || window;
        var selection = win.getSelection && win.getSelection();
        if (!selection || selection.rangeCount === 0) {
          return null;
        }
        var { anchorNode, anchorOffset, focusNode, focusOffset } = selection;
        try {
          anchorNode.nodeType;
          focusNode.nodeType;
        } catch (e3) {
          return null;
        }
        return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
      }
      function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
        var length = 0;
        var start = -1;
        var end = -1;
        var indexWithinAnchor = 0;
        var indexWithinFocus = 0;
        var node2 = outerNode;
        var parentNode = null;
        outer:
          while (true) {
            var next2 = null;
            while (true) {
              if (node2 === anchorNode && (anchorOffset === 0 || node2.nodeType === TEXT_NODE)) {
                start = length + anchorOffset;
              }
              if (node2 === focusNode && (focusOffset === 0 || node2.nodeType === TEXT_NODE)) {
                end = length + focusOffset;
              }
              if (node2.nodeType === TEXT_NODE) {
                length += node2.nodeValue.length;
              }
              if ((next2 = node2.firstChild) === null) {
                break;
              }
              parentNode = node2;
              node2 = next2;
            }
            while (true) {
              if (node2 === outerNode) {
                break outer;
              }
              if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                start = length;
              }
              if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                end = length;
              }
              if ((next2 = node2.nextSibling) !== null) {
                break;
              }
              node2 = parentNode;
              parentNode = node2.parentNode;
            }
            node2 = next2;
          }
        if (start === -1 || end === -1) {
          return null;
        }
        return {
          start,
          end
        };
      }
      function setOffsets(node2, offsets) {
        var doc = node2.ownerDocument || document;
        var win = doc && doc.defaultView || window;
        if (!win.getSelection) {
          return;
        }
        var selection = win.getSelection();
        var length = node2.textContent.length;
        var start = Math.min(offsets.start, length);
        var end = offsets.end === undefined ? start : Math.min(offsets.end, length);
        if (!selection.extend && start > end) {
          var temp = end;
          end = start;
          start = temp;
        }
        var startMarker = getNodeForCharacterOffset(node2, start);
        var endMarker = getNodeForCharacterOffset(node2, end);
        if (startMarker && endMarker) {
          if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
            return;
          }
          var range = doc.createRange();
          range.setStart(startMarker.node, startMarker.offset);
          selection.removeAllRanges();
          if (start > end) {
            selection.addRange(range);
            selection.extend(endMarker.node, endMarker.offset);
          } else {
            range.setEnd(endMarker.node, endMarker.offset);
            selection.addRange(range);
          }
        }
      }
      function isTextNode(node2) {
        return node2 && node2.nodeType === TEXT_NODE;
      }
      function containsNode(outerNode, innerNode) {
        if (!outerNode || !innerNode) {
          return false;
        } else if (outerNode === innerNode) {
          return true;
        } else if (isTextNode(outerNode)) {
          return false;
        } else if (isTextNode(innerNode)) {
          return containsNode(outerNode, innerNode.parentNode);
        } else if ("contains" in outerNode) {
          return outerNode.contains(innerNode);
        } else if (outerNode.compareDocumentPosition) {
          return !!(outerNode.compareDocumentPosition(innerNode) & 16);
        } else {
          return false;
        }
      }
      function isInDocument(node2) {
        return node2 && node2.ownerDocument && containsNode(node2.ownerDocument.documentElement, node2);
      }
      function isSameOriginFrame(iframe) {
        try {
          return typeof iframe.contentWindow.location.href === "string";
        } catch (err) {
          return false;
        }
      }
      function getActiveElementDeep() {
        var win = window;
        var element = getActiveElement();
        while (element instanceof win.HTMLIFrameElement) {
          if (isSameOriginFrame(element)) {
            win = element.contentWindow;
          } else {
            return element;
          }
          element = getActiveElement(win.document);
        }
        return element;
      }
      function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
      }
      function getSelectionInformation() {
        var focusedElem = getActiveElementDeep();
        return {
          focusedElem,
          selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
        };
      }
      function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep();
        var priorFocusedElem = priorSelectionInformation.focusedElem;
        var priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
          if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
            setSelection(priorFocusedElem, priorSelectionRange);
          }
          var ancestors = [];
          var ancestor = priorFocusedElem;
          while (ancestor = ancestor.parentNode) {
            if (ancestor.nodeType === ELEMENT_NODE) {
              ancestors.push({
                element: ancestor,
                left: ancestor.scrollLeft,
                top: ancestor.scrollTop
              });
            }
          }
          if (typeof priorFocusedElem.focus === "function") {
            priorFocusedElem.focus();
          }
          for (var i2 = 0;i2 < ancestors.length; i2++) {
            var info = ancestors[i2];
            info.element.scrollLeft = info.left;
            info.element.scrollTop = info.top;
          }
        }
      }
      function getSelection(input) {
        var selection;
        if ("selectionStart" in input) {
          selection = {
            start: input.selectionStart,
            end: input.selectionEnd
          };
        } else {
          selection = getOffsets(input);
        }
        return selection || {
          start: 0,
          end: 0
        };
      }
      function setSelection(input, offsets) {
        var start = offsets.start;
        var end = offsets.end;
        if (end === undefined) {
          end = start;
        }
        if ("selectionStart" in input) {
          input.selectionStart = start;
          input.selectionEnd = Math.min(end, input.value.length);
        } else {
          setOffsets(input, offsets);
        }
      }
      var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
      function registerEvents$3() {
        registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
      }
      var activeElement$1 = null;
      var activeElementInst$1 = null;
      var lastSelection = null;
      var mouseDown = false;
      function getSelection$1(node2) {
        if ("selectionStart" in node2 && hasSelectionCapabilities(node2)) {
          return {
            start: node2.selectionStart,
            end: node2.selectionEnd
          };
        } else {
          var win = node2.ownerDocument && node2.ownerDocument.defaultView || window;
          var selection = win.getSelection();
          return {
            anchorNode: selection.anchorNode,
            anchorOffset: selection.anchorOffset,
            focusNode: selection.focusNode,
            focusOffset: selection.focusOffset
          };
        }
      }
      function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
      }
      function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        var doc = getEventTargetDocument(nativeEventTarget);
        if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
          return;
        }
        var currentSelection = getSelection$1(activeElement$1);
        if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
          lastSelection = currentSelection;
          var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
          if (listeners.length > 0) {
            var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            event.target = activeElement$1;
          }
        }
      }
      function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        switch (domEventName) {
          case "focusin":
            if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
              activeElement$1 = targetNode;
              activeElementInst$1 = targetInst;
              lastSelection = null;
            }
            break;
          case "focusout":
            activeElement$1 = null;
            activeElementInst$1 = null;
            lastSelection = null;
            break;
          case "mousedown":
            mouseDown = true;
            break;
          case "contextmenu":
          case "mouseup":
          case "dragend":
            mouseDown = false;
            constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            break;
          case "selectionchange":
            if (skipSelectionChangeEvent) {
              break;
            }
          case "keydown":
          case "keyup":
            constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
        }
      }
      function makePrefixMap(styleProp, eventName) {
        var prefixes2 = {};
        prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes2["Webkit" + styleProp] = "webkit" + eventName;
        prefixes2["Moz" + styleProp] = "moz" + eventName;
        return prefixes2;
      }
      var vendorPrefixes = {
        animationend: makePrefixMap("Animation", "AnimationEnd"),
        animationiteration: makePrefixMap("Animation", "AnimationIteration"),
        animationstart: makePrefixMap("Animation", "AnimationStart"),
        transitionend: makePrefixMap("Transition", "TransitionEnd")
      };
      var prefixedEventNames = {};
      var style = {};
      if (canUseDOM) {
        style = document.createElement("div").style;
        if (!("AnimationEvent" in window)) {
          delete vendorPrefixes.animationend.animation;
          delete vendorPrefixes.animationiteration.animation;
          delete vendorPrefixes.animationstart.animation;
        }
        if (!("TransitionEvent" in window)) {
          delete vendorPrefixes.transitionend.transition;
        }
      }
      function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) {
          return prefixedEventNames[eventName];
        } else if (!vendorPrefixes[eventName]) {
          return eventName;
        }
        var prefixMap = vendorPrefixes[eventName];
        for (var styleProp in prefixMap) {
          if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
            return prefixedEventNames[eventName] = prefixMap[styleProp];
          }
        }
        return eventName;
      }
      var ANIMATION_END = getVendorPrefixedEventName("animationend");
      var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
      var ANIMATION_START = getVendorPrefixedEventName("animationstart");
      var TRANSITION_END = getVendorPrefixedEventName("transitionend");
      var topLevelEventsToReactNames = new Map;
      var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
      function registerSimpleEvent(domEventName, reactName) {
        topLevelEventsToReactNames.set(domEventName, reactName);
        registerTwoPhaseEvent(reactName, [domEventName]);
      }
      function registerSimpleEvents() {
        for (var i2 = 0;i2 < simpleEventPluginEvents.length; i2++) {
          var eventName = simpleEventPluginEvents[i2];
          var domEventName = eventName.toLowerCase();
          var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
          registerSimpleEvent(domEventName, "on" + capitalizedEvent);
        }
        registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
        registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
        registerSimpleEvent(ANIMATION_START, "onAnimationStart");
        registerSimpleEvent("dblclick", "onDoubleClick");
        registerSimpleEvent("focusin", "onFocus");
        registerSimpleEvent("focusout", "onBlur");
        registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
      }
      function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var reactName = topLevelEventsToReactNames.get(domEventName);
        if (reactName === undefined) {
          return;
        }
        var SyntheticEventCtor = SyntheticEvent;
        var reactEventType = domEventName;
        switch (domEventName) {
          case "keypress":
            if (getEventCharCode(nativeEvent) === 0) {
              return;
            }
          case "keydown":
          case "keyup":
            SyntheticEventCtor = SyntheticKeyboardEvent;
            break;
          case "focusin":
            reactEventType = "focus";
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "focusout":
            reactEventType = "blur";
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "beforeblur":
          case "afterblur":
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "click":
            if (nativeEvent.button === 2) {
              return;
            }
          case "auxclick":
          case "dblclick":
          case "mousedown":
          case "mousemove":
          case "mouseup":
          case "mouseout":
          case "mouseover":
          case "contextmenu":
            SyntheticEventCtor = SyntheticMouseEvent;
            break;
          case "drag":
          case "dragend":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "dragstart":
          case "drop":
            SyntheticEventCtor = SyntheticDragEvent;
            break;
          case "touchcancel":
          case "touchend":
          case "touchmove":
          case "touchstart":
            SyntheticEventCtor = SyntheticTouchEvent;
            break;
          case ANIMATION_END:
          case ANIMATION_ITERATION:
          case ANIMATION_START:
            SyntheticEventCtor = SyntheticAnimationEvent;
            break;
          case TRANSITION_END:
            SyntheticEventCtor = SyntheticTransitionEvent;
            break;
          case "scroll":
            SyntheticEventCtor = SyntheticUIEvent;
            break;
          case "wheel":
            SyntheticEventCtor = SyntheticWheelEvent;
            break;
          case "copy":
          case "cut":
          case "paste":
            SyntheticEventCtor = SyntheticClipboardEvent;
            break;
          case "gotpointercapture":
          case "lostpointercapture":
          case "pointercancel":
          case "pointerdown":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "pointerup":
            SyntheticEventCtor = SyntheticPointerEvent;
            break;
        }
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        {
          var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
          var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
          if (_listeners.length > 0) {
            var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event: _event,
              listeners: _listeners
            });
          }
        }
      }
      registerSimpleEvents();
      registerEvents$2();
      registerEvents$1();
      registerEvents$3();
      registerEvents();
      function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
        if (shouldProcessPolyfillPlugins) {
          extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
      }
      var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
      var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
      function executeDispatch(event, listener, currentTarget) {
        var type = event.type || "unknown-event";
        event.currentTarget = currentTarget;
        invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
        event.currentTarget = null;
      }
      function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
        var previousInstance;
        if (inCapturePhase) {
          for (var i2 = dispatchListeners.length - 1;i2 >= 0; i2--) {
            var _dispatchListeners$i = dispatchListeners[i2], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
            if (instance !== previousInstance && event.isPropagationStopped()) {
              return;
            }
            executeDispatch(event, listener, currentTarget);
            previousInstance = instance;
          }
        } else {
          for (var _i = 0;_i < dispatchListeners.length; _i++) {
            var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
            if (_instance !== previousInstance && event.isPropagationStopped()) {
              return;
            }
            executeDispatch(event, _listener, _currentTarget);
            previousInstance = _instance;
          }
        }
      }
      function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        for (var i2 = 0;i2 < dispatchQueue.length; i2++) {
          var _dispatchQueue$i = dispatchQueue[i2], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
          processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
        }
        rethrowCaughtError();
      }
      function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var nativeEventTarget = getEventTarget(nativeEvent);
        var dispatchQueue = [];
        extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        processDispatchQueue(dispatchQueue, eventSystemFlags);
      }
      function listenToNonDelegatedEvent(domEventName, targetElement) {
        {
          if (!nonDelegatedEvents.has(domEventName)) {
            error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
          }
        }
        var isCapturePhaseListener = false;
        var listenerSet = getEventListenerSet(targetElement);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
        if (!listenerSet.has(listenerSetKey)) {
          addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
          listenerSet.add(listenerSetKey);
        }
      }
      function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
        {
          if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
            error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
          }
        }
        var eventSystemFlags = 0;
        if (isCapturePhaseListener) {
          eventSystemFlags |= IS_CAPTURE_PHASE;
        }
        addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
      }
      var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
      function listenToAllSupportedEvents(rootContainerElement) {
        if (!rootContainerElement[listeningMarker]) {
          rootContainerElement[listeningMarker] = true;
          allNativeEvents.forEach(function(domEventName) {
            if (domEventName !== "selectionchange") {
              if (!nonDelegatedEvents.has(domEventName)) {
                listenToNativeEvent(domEventName, false, rootContainerElement);
              }
              listenToNativeEvent(domEventName, true, rootContainerElement);
            }
          });
          var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          if (ownerDocument !== null) {
            if (!ownerDocument[listeningMarker]) {
              ownerDocument[listeningMarker] = true;
              listenToNativeEvent("selectionchange", false, ownerDocument);
            }
          }
        }
      }
      function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
        var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
        var isPassiveListener = undefined;
        if (passiveBrowserEventsSupported) {
          if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
            isPassiveListener = true;
          }
        }
        targetContainer = targetContainer;
        var unsubscribeListener;
        if (isCapturePhaseListener) {
          if (isPassiveListener !== undefined) {
            unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
          } else {
            unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
          }
        } else {
          if (isPassiveListener !== undefined) {
            unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
          } else {
            unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
          }
        }
      }
      function isMatchingRootContainer(grandContainer, targetContainer) {
        return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
      }
      function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var ancestorInst = targetInst;
        if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
          var targetContainerNode = targetContainer;
          if (targetInst !== null) {
            var node2 = targetInst;
            mainLoop:
              while (true) {
                if (node2 === null) {
                  return;
                }
                var nodeTag = node2.tag;
                if (nodeTag === HostRoot || nodeTag === HostPortal) {
                  var container = node2.stateNode.containerInfo;
                  if (isMatchingRootContainer(container, targetContainerNode)) {
                    break;
                  }
                  if (nodeTag === HostPortal) {
                    var grandNode = node2.return;
                    while (grandNode !== null) {
                      var grandTag = grandNode.tag;
                      if (grandTag === HostRoot || grandTag === HostPortal) {
                        var grandContainer = grandNode.stateNode.containerInfo;
                        if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                          return;
                        }
                      }
                      grandNode = grandNode.return;
                    }
                  }
                  while (container !== null) {
                    var parentNode = getClosestInstanceFromNode(container);
                    if (parentNode === null) {
                      return;
                    }
                    var parentTag = parentNode.tag;
                    if (parentTag === HostComponent || parentTag === HostText) {
                      node2 = ancestorInst = parentNode;
                      continue mainLoop;
                    }
                    container = container.parentNode;
                  }
                }
                node2 = node2.return;
              }
          }
        }
        batchedUpdates(function() {
          return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
        });
      }
      function createDispatchListener(instance, listener, currentTarget) {
        return {
          instance,
          listener,
          currentTarget
        };
      }
      function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
        var captureName = reactName !== null ? reactName + "Capture" : null;
        var reactEventName = inCapturePhase ? captureName : reactName;
        var listeners = [];
        var instance = targetFiber;
        var lastHostComponent = null;
        while (instance !== null) {
          var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
          if (tag === HostComponent && stateNode !== null) {
            lastHostComponent = stateNode;
            if (reactEventName !== null) {
              var listener = getListener(instance, reactEventName);
              if (listener != null) {
                listeners.push(createDispatchListener(instance, listener, lastHostComponent));
              }
            }
          }
          if (accumulateTargetOnly) {
            break;
          }
          instance = instance.return;
        }
        return listeners;
      }
      function accumulateTwoPhaseListeners(targetFiber, reactName) {
        var captureName = reactName + "Capture";
        var listeners = [];
        var instance = targetFiber;
        while (instance !== null) {
          var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
          if (tag === HostComponent && stateNode !== null) {
            var currentTarget = stateNode;
            var captureListener = getListener(instance, captureName);
            if (captureListener != null) {
              listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
            }
            var bubbleListener = getListener(instance, reactName);
            if (bubbleListener != null) {
              listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
            }
          }
          instance = instance.return;
        }
        return listeners;
      }
      function getParent(inst) {
        if (inst === null) {
          return null;
        }
        do {
          inst = inst.return;
        } while (inst && inst.tag !== HostComponent);
        if (inst) {
          return inst;
        }
        return null;
      }
      function getLowestCommonAncestor(instA, instB) {
        var nodeA = instA;
        var nodeB = instB;
        var depthA = 0;
        for (var tempA = nodeA;tempA; tempA = getParent(tempA)) {
          depthA++;
        }
        var depthB = 0;
        for (var tempB = nodeB;tempB; tempB = getParent(tempB)) {
          depthB++;
        }
        while (depthA - depthB > 0) {
          nodeA = getParent(nodeA);
          depthA--;
        }
        while (depthB - depthA > 0) {
          nodeB = getParent(nodeB);
          depthB--;
        }
        var depth = depthA;
        while (depth--) {
          if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
            return nodeA;
          }
          nodeA = getParent(nodeA);
          nodeB = getParent(nodeB);
        }
        return null;
      }
      function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
        var registrationName = event._reactName;
        var listeners = [];
        var instance = target;
        while (instance !== null) {
          if (instance === common) {
            break;
          }
          var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
          if (alternate !== null && alternate === common) {
            break;
          }
          if (tag === HostComponent && stateNode !== null) {
            var currentTarget = stateNode;
            if (inCapturePhase) {
              var captureListener = getListener(instance, registrationName);
              if (captureListener != null) {
                listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
              }
            } else if (!inCapturePhase) {
              var bubbleListener = getListener(instance, registrationName);
              if (bubbleListener != null) {
                listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
              }
            }
          }
          instance = instance.return;
        }
        if (listeners.length !== 0) {
          dispatchQueue.push({
            event,
            listeners
          });
        }
      }
      function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
        var common = from && to ? getLowestCommonAncestor(from, to) : null;
        if (from !== null) {
          accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
        }
        if (to !== null && enterEvent !== null) {
          accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
        }
      }
      function getListenerSetKey(domEventName, capture) {
        return domEventName + "__" + (capture ? "capture" : "bubble");
      }
      var didWarnInvalidHydration = false;
      var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
      var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
      var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
      var AUTOFOCUS = "autoFocus";
      var CHILDREN = "children";
      var STYLE = "style";
      var HTML$1 = "__html";
      var warnedUnknownTags;
      var validatePropertiesInDevelopment;
      var warnForPropDifference;
      var warnForExtraAttributes;
      var warnForInvalidEventListener;
      var canDiffStyleForHydrationWarning;
      var normalizeHTML;
      {
        warnedUnknownTags = {
          dialog: true,
          webview: true
        };
        validatePropertiesInDevelopment = function(type, props) {
          validateProperties(type, props);
          validateProperties$1(type, props);
          validateProperties$2(type, props, {
            registrationNameDependencies,
            possibleRegistrationNames
          });
        };
        canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
        warnForPropDifference = function(propName, serverValue, clientValue) {
          if (didWarnInvalidHydration) {
            return;
          }
          var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
          var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
          if (normalizedServerValue === normalizedClientValue) {
            return;
          }
          didWarnInvalidHydration = true;
          error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
        };
        warnForExtraAttributes = function(attributeNames) {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          var names = [];
          attributeNames.forEach(function(name) {
            names.push(name);
          });
          error("Extra attributes from the server: %s", names);
        };
        warnForInvalidEventListener = function(registrationName, listener) {
          if (listener === false) {
            error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
          } else {
            error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
          }
        };
        normalizeHTML = function(parent, html) {
          var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
          testElement.innerHTML = html;
          return testElement.innerHTML;
        };
      }
      var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
      var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
      function normalizeMarkupForTextOrAttribute(markup) {
        {
          checkHtmlStringCoercion(markup);
        }
        var markupString = typeof markup === "string" ? markup : "" + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, `
`).replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
      }
      function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
        var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
        if (normalizedServerText === normalizedClientText) {
          return;
        }
        if (shouldWarnDev) {
          {
            if (!didWarnInvalidHydration) {
              didWarnInvalidHydration = true;
              error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
            }
          }
        }
        if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
          throw new Error("Text content does not match server-rendered HTML.");
        }
      }
      function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
      }
      function noop() {}
      function trapClickOnNonInteractiveElement(node2) {
        node2.onclick = noop;
      }
      function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
        for (var propKey in nextProps) {
          if (!nextProps.hasOwnProperty(propKey)) {
            continue;
          }
          var nextProp = nextProps[propKey];
          if (propKey === STYLE) {
            {
              if (nextProp) {
                Object.freeze(nextProp);
              }
            }
            setValueForStyles(domElement, nextProp);
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
            if (nextHtml != null) {
              setInnerHTML(domElement, nextHtml);
            }
          } else if (propKey === CHILDREN) {
            if (typeof nextProp === "string") {
              var canSetTextContent = tag !== "textarea" || nextProp !== "";
              if (canSetTextContent) {
                setTextContent(domElement, nextProp);
              }
            } else if (typeof nextProp === "number") {
              setTextContent(domElement, "" + nextProp);
            }
          } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
            ;
          else if (propKey === AUTOFOCUS)
            ;
          else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              if (typeof nextProp !== "function") {
                warnForInvalidEventListener(propKey, nextProp);
              }
              if (propKey === "onScroll") {
                listenToNonDelegatedEvent("scroll", domElement);
              }
            }
          } else if (nextProp != null) {
            setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
          }
        }
      }
      function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
        for (var i2 = 0;i2 < updatePayload.length; i2 += 2) {
          var propKey = updatePayload[i2];
          var propValue = updatePayload[i2 + 1];
          if (propKey === STYLE) {
            setValueForStyles(domElement, propValue);
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            setInnerHTML(domElement, propValue);
          } else if (propKey === CHILDREN) {
            setTextContent(domElement, propValue);
          } else {
            setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
          }
        }
      }
      function createElement(type, props, rootContainerElement, parentNamespace) {
        var isCustomComponentTag;
        var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
        var domElement;
        var namespaceURI = parentNamespace;
        if (namespaceURI === HTML_NAMESPACE) {
          namespaceURI = getIntrinsicNamespace(type);
        }
        if (namespaceURI === HTML_NAMESPACE) {
          {
            isCustomComponentTag = isCustomComponent(type, props);
            if (!isCustomComponentTag && type !== type.toLowerCase()) {
              error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
            }
          }
          if (type === "script") {
            var div = ownerDocument.createElement("div");
            div.innerHTML = "<script></script>";
            var firstChild = div.firstChild;
            domElement = div.removeChild(firstChild);
          } else if (typeof props.is === "string") {
            domElement = ownerDocument.createElement(type, {
              is: props.is
            });
          } else {
            domElement = ownerDocument.createElement(type);
            if (type === "select") {
              var node2 = domElement;
              if (props.multiple) {
                node2.multiple = true;
              } else if (props.size) {
                node2.size = props.size;
              }
            }
          }
        } else {
          domElement = ownerDocument.createElementNS(namespaceURI, type);
        }
        {
          if (namespaceURI === HTML_NAMESPACE) {
            if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
              warnedUnknownTags[type] = true;
              error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
            }
          }
        }
        return domElement;
      }
      function createTextNode(text, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
      }
      function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
        var isCustomComponentTag = isCustomComponent(tag, rawProps);
        {
          validatePropertiesInDevelopment(tag, rawProps);
        }
        var props;
        switch (tag) {
          case "dialog":
            listenToNonDelegatedEvent("cancel", domElement);
            listenToNonDelegatedEvent("close", domElement);
            props = rawProps;
            break;
          case "iframe":
          case "object":
          case "embed":
            listenToNonDelegatedEvent("load", domElement);
            props = rawProps;
            break;
          case "video":
          case "audio":
            for (var i2 = 0;i2 < mediaEventTypes.length; i2++) {
              listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
            }
            props = rawProps;
            break;
          case "source":
            listenToNonDelegatedEvent("error", domElement);
            props = rawProps;
            break;
          case "img":
          case "image":
          case "link":
            listenToNonDelegatedEvent("error", domElement);
            listenToNonDelegatedEvent("load", domElement);
            props = rawProps;
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", domElement);
            props = rawProps;
            break;
          case "input":
            initWrapperState(domElement, rawProps);
            props = getHostProps(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "option":
            validateProps(domElement, rawProps);
            props = rawProps;
            break;
          case "select":
            initWrapperState$1(domElement, rawProps);
            props = getHostProps$1(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "textarea":
            initWrapperState$2(domElement, rawProps);
            props = getHostProps$2(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          default:
            props = rawProps;
        }
        assertValidProps(tag, props);
        setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
        switch (tag) {
          case "input":
            track(domElement);
            postMountWrapper(domElement, rawProps, false);
            break;
          case "textarea":
            track(domElement);
            postMountWrapper$3(domElement);
            break;
          case "option":
            postMountWrapper$1(domElement, rawProps);
            break;
          case "select":
            postMountWrapper$2(domElement, rawProps);
            break;
          default:
            if (typeof props.onClick === "function") {
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
        }
      }
      function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
        {
          validatePropertiesInDevelopment(tag, nextRawProps);
        }
        var updatePayload = null;
        var lastProps;
        var nextProps;
        switch (tag) {
          case "input":
            lastProps = getHostProps(domElement, lastRawProps);
            nextProps = getHostProps(domElement, nextRawProps);
            updatePayload = [];
            break;
          case "select":
            lastProps = getHostProps$1(domElement, lastRawProps);
            nextProps = getHostProps$1(domElement, nextRawProps);
            updatePayload = [];
            break;
          case "textarea":
            lastProps = getHostProps$2(domElement, lastRawProps);
            nextProps = getHostProps$2(domElement, nextRawProps);
            updatePayload = [];
            break;
          default:
            lastProps = lastRawProps;
            nextProps = nextRawProps;
            if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
        }
        assertValidProps(tag, nextProps);
        var propKey;
        var styleName;
        var styleUpdates = null;
        for (propKey in lastProps) {
          if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
            continue;
          }
          if (propKey === STYLE) {
            var lastStyle = lastProps[propKey];
            for (styleName in lastStyle) {
              if (lastStyle.hasOwnProperty(styleName)) {
                if (!styleUpdates) {
                  styleUpdates = {};
                }
                styleUpdates[styleName] = "";
              }
            }
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
            ;
          else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
            ;
          else if (propKey === AUTOFOCUS)
            ;
          else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (!updatePayload) {
              updatePayload = [];
            }
          } else {
            (updatePayload = updatePayload || []).push(propKey, null);
          }
        }
        for (propKey in nextProps) {
          var nextProp = nextProps[propKey];
          var lastProp = lastProps != null ? lastProps[propKey] : undefined;
          if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
            continue;
          }
          if (propKey === STYLE) {
            {
              if (nextProp) {
                Object.freeze(nextProp);
              }
            }
            if (lastProp) {
              for (styleName in lastProp) {
                if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = "";
                }
              }
              for (styleName in nextProp) {
                if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = nextProp[styleName];
                }
              }
            } else {
              if (!styleUpdates) {
                if (!updatePayload) {
                  updatePayload = [];
                }
                updatePayload.push(propKey, styleUpdates);
              }
              styleUpdates = nextProp;
            }
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
            var lastHtml = lastProp ? lastProp[HTML$1] : undefined;
            if (nextHtml != null) {
              if (lastHtml !== nextHtml) {
                (updatePayload = updatePayload || []).push(propKey, nextHtml);
              }
            }
          } else if (propKey === CHILDREN) {
            if (typeof nextProp === "string" || typeof nextProp === "number") {
              (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
            }
          } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
            ;
          else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              if (typeof nextProp !== "function") {
                warnForInvalidEventListener(propKey, nextProp);
              }
              if (propKey === "onScroll") {
                listenToNonDelegatedEvent("scroll", domElement);
              }
            }
            if (!updatePayload && lastProp !== nextProp) {
              updatePayload = [];
            }
          } else {
            (updatePayload = updatePayload || []).push(propKey, nextProp);
          }
        }
        if (styleUpdates) {
          {
            validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
          }
          (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
        }
        return updatePayload;
      }
      function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
        if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
          updateChecked(domElement, nextRawProps);
        }
        var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
        var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
        updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
        switch (tag) {
          case "input":
            updateWrapper(domElement, nextRawProps);
            break;
          case "textarea":
            updateWrapper$1(domElement, nextRawProps);
            break;
          case "select":
            postUpdateWrapper(domElement, nextRawProps);
            break;
        }
      }
      function getPossibleStandardName(propName) {
        {
          var lowerCasedName = propName.toLowerCase();
          if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            return null;
          }
          return possibleStandardNames[lowerCasedName] || null;
        }
      }
      function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
        var isCustomComponentTag;
        var extraAttributeNames;
        {
          isCustomComponentTag = isCustomComponent(tag, rawProps);
          validatePropertiesInDevelopment(tag, rawProps);
        }
        switch (tag) {
          case "dialog":
            listenToNonDelegatedEvent("cancel", domElement);
            listenToNonDelegatedEvent("close", domElement);
            break;
          case "iframe":
          case "object":
          case "embed":
            listenToNonDelegatedEvent("load", domElement);
            break;
          case "video":
          case "audio":
            for (var i2 = 0;i2 < mediaEventTypes.length; i2++) {
              listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
            }
            break;
          case "source":
            listenToNonDelegatedEvent("error", domElement);
            break;
          case "img":
          case "image":
          case "link":
            listenToNonDelegatedEvent("error", domElement);
            listenToNonDelegatedEvent("load", domElement);
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", domElement);
            break;
          case "input":
            initWrapperState(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "option":
            validateProps(domElement, rawProps);
            break;
          case "select":
            initWrapperState$1(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "textarea":
            initWrapperState$2(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
        }
        assertValidProps(tag, rawProps);
        {
          extraAttributeNames = new Set;
          var attributes = domElement.attributes;
          for (var _i = 0;_i < attributes.length; _i++) {
            var name = attributes[_i].name.toLowerCase();
            switch (name) {
              case "value":
                break;
              case "checked":
                break;
              case "selected":
                break;
              default:
                extraAttributeNames.add(attributes[_i].name);
            }
          }
        }
        var updatePayload = null;
        for (var propKey in rawProps) {
          if (!rawProps.hasOwnProperty(propKey)) {
            continue;
          }
          var nextProp = rawProps[propKey];
          if (propKey === CHILDREN) {
            if (typeof nextProp === "string") {
              if (domElement.textContent !== nextProp) {
                if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                  checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                }
                updatePayload = [CHILDREN, nextProp];
              }
            } else if (typeof nextProp === "number") {
              if (domElement.textContent !== "" + nextProp) {
                if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                  checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                }
                updatePayload = [CHILDREN, "" + nextProp];
              }
            }
          } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              if (typeof nextProp !== "function") {
                warnForInvalidEventListener(propKey, nextProp);
              }
              if (propKey === "onScroll") {
                listenToNonDelegatedEvent("scroll", domElement);
              }
            }
          } else if (shouldWarnDev && true && typeof isCustomComponentTag === "boolean") {
            var serverValue = undefined;
            var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
            if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
              ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
              ;
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var serverHTML = domElement.innerHTML;
              var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
              if (nextHtml != null) {
                var expectedHTML = normalizeHTML(domElement, nextHtml);
                if (expectedHTML !== serverHTML) {
                  warnForPropDifference(propKey, serverHTML, expectedHTML);
                }
              }
            } else if (propKey === STYLE) {
              extraAttributeNames.delete(propKey);
              if (canDiffStyleForHydrationWarning) {
                var expectedStyle = createDangerousStringForStyles(nextProp);
                serverValue = domElement.getAttribute("style");
                if (expectedStyle !== serverValue) {
                  warnForPropDifference(propKey, serverValue, expectedStyle);
                }
              }
            } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
              extraAttributeNames.delete(propKey.toLowerCase());
              serverValue = getValueForAttribute(domElement, propKey, nextProp);
              if (nextProp !== serverValue) {
                warnForPropDifference(propKey, serverValue, nextProp);
              }
            } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
              var isMismatchDueToBadCasing = false;
              if (propertyInfo !== null) {
                extraAttributeNames.delete(propertyInfo.attributeName);
                serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
              } else {
                var ownNamespace = parentNamespace;
                if (ownNamespace === HTML_NAMESPACE) {
                  ownNamespace = getIntrinsicNamespace(tag);
                }
                if (ownNamespace === HTML_NAMESPACE) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                } else {
                  var standardName = getPossibleStandardName(propKey);
                  if (standardName !== null && standardName !== propKey) {
                    isMismatchDueToBadCasing = true;
                    extraAttributeNames.delete(standardName);
                  }
                  extraAttributeNames.delete(propKey);
                }
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
              }
              var dontWarnCustomElement = enableCustomElementPropertySupport;
              if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                warnForPropDifference(propKey, serverValue, nextProp);
              }
            }
          }
        }
        {
          if (shouldWarnDev) {
            if (extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
              warnForExtraAttributes(extraAttributeNames);
            }
          }
        }
        switch (tag) {
          case "input":
            track(domElement);
            postMountWrapper(domElement, rawProps, true);
            break;
          case "textarea":
            track(domElement);
            postMountWrapper$3(domElement);
            break;
          case "select":
          case "option":
            break;
          default:
            if (typeof rawProps.onClick === "function") {
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
        }
        return updatePayload;
      }
      function diffHydratedText(textNode, text, isConcurrentMode) {
        var isDifferent = textNode.nodeValue !== text;
        return isDifferent;
      }
      function warnForDeletedHydratableElement(parentNode, child) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
        }
      }
      function warnForDeletedHydratableText(parentNode, child) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
        }
      }
      function warnForInsertedHydratedElement(parentNode, tag, props) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
        }
      }
      function warnForInsertedHydratedText(parentNode, text) {
        {
          if (text === "") {
            return;
          }
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
        }
      }
      function restoreControlledState$3(domElement, tag, props) {
        switch (tag) {
          case "input":
            restoreControlledState(domElement, props);
            return;
          case "textarea":
            restoreControlledState$2(domElement, props);
            return;
          case "select":
            restoreControlledState$1(domElement, props);
            return;
        }
      }
      var validateDOMNesting = function() {};
      var updatedAncestorInfo = function() {};
      {
        var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
        var inScopeTags = [
          "applet",
          "caption",
          "html",
          "table",
          "td",
          "th",
          "marquee",
          "object",
          "template",
          "foreignObject",
          "desc",
          "title"
        ];
        var buttonScopeTags = inScopeTags.concat(["button"]);
        var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
        var emptyAncestorInfo = {
          current: null,
          formTag: null,
          aTagInScope: null,
          buttonTagInScope: null,
          nobrTagInScope: null,
          pTagInButtonScope: null,
          listItemTagAutoclosing: null,
          dlItemTagAutoclosing: null
        };
        updatedAncestorInfo = function(oldInfo, tag) {
          var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
          var info = {
            tag
          };
          if (inScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.aTagInScope = null;
            ancestorInfo.buttonTagInScope = null;
            ancestorInfo.nobrTagInScope = null;
          }
          if (buttonScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.pTagInButtonScope = null;
          }
          if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
            ancestorInfo.listItemTagAutoclosing = null;
            ancestorInfo.dlItemTagAutoclosing = null;
          }
          ancestorInfo.current = info;
          if (tag === "form") {
            ancestorInfo.formTag = info;
          }
          if (tag === "a") {
            ancestorInfo.aTagInScope = info;
          }
          if (tag === "button") {
            ancestorInfo.buttonTagInScope = info;
          }
          if (tag === "nobr") {
            ancestorInfo.nobrTagInScope = info;
          }
          if (tag === "p") {
            ancestorInfo.pTagInButtonScope = info;
          }
          if (tag === "li") {
            ancestorInfo.listItemTagAutoclosing = info;
          }
          if (tag === "dd" || tag === "dt") {
            ancestorInfo.dlItemTagAutoclosing = info;
          }
          return ancestorInfo;
        };
        var isTagValidWithParent = function(tag, parentTag) {
          switch (parentTag) {
            case "select":
              return tag === "option" || tag === "optgroup" || tag === "#text";
            case "optgroup":
              return tag === "option" || tag === "#text";
            case "option":
              return tag === "#text";
            case "tr":
              return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
            case "tbody":
            case "thead":
            case "tfoot":
              return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
            case "colgroup":
              return tag === "col" || tag === "template";
            case "table":
              return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
            case "head":
              return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
            case "html":
              return tag === "head" || tag === "body" || tag === "frameset";
            case "frameset":
              return tag === "frame";
            case "#document":
              return tag === "html";
          }
          switch (tag) {
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
            case "rp":
            case "rt":
              return impliedEndTags.indexOf(parentTag) === -1;
            case "body":
            case "caption":
            case "col":
            case "colgroup":
            case "frameset":
            case "frame":
            case "head":
            case "html":
            case "tbody":
            case "td":
            case "tfoot":
            case "th":
            case "thead":
            case "tr":
              return parentTag == null;
          }
          return true;
        };
        var findInvalidAncestorForTag = function(tag, ancestorInfo) {
          switch (tag) {
            case "address":
            case "article":
            case "aside":
            case "blockquote":
            case "center":
            case "details":
            case "dialog":
            case "dir":
            case "div":
            case "dl":
            case "fieldset":
            case "figcaption":
            case "figure":
            case "footer":
            case "header":
            case "hgroup":
            case "main":
            case "menu":
            case "nav":
            case "ol":
            case "p":
            case "section":
            case "summary":
            case "ul":
            case "pre":
            case "listing":
            case "table":
            case "hr":
            case "xmp":
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              return ancestorInfo.pTagInButtonScope;
            case "form":
              return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case "li":
              return ancestorInfo.listItemTagAutoclosing;
            case "dd":
            case "dt":
              return ancestorInfo.dlItemTagAutoclosing;
            case "button":
              return ancestorInfo.buttonTagInScope;
            case "a":
              return ancestorInfo.aTagInScope;
            case "nobr":
              return ancestorInfo.nobrTagInScope;
          }
          return null;
        };
        var didWarn$1 = {};
        validateDOMNesting = function(childTag, childText, ancestorInfo) {
          ancestorInfo = ancestorInfo || emptyAncestorInfo;
          var parentInfo = ancestorInfo.current;
          var parentTag = parentInfo && parentInfo.tag;
          if (childText != null) {
            if (childTag != null) {
              error("validateDOMNesting: when childText is passed, childTag should be null");
            }
            childTag = "#text";
          }
          var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
          var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
          var invalidParentOrAncestor = invalidParent || invalidAncestor;
          if (!invalidParentOrAncestor) {
            return;
          }
          var ancestorTag = invalidParentOrAncestor.tag;
          var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
          if (didWarn$1[warnKey]) {
            return;
          }
          didWarn$1[warnKey] = true;
          var tagDisplayName = childTag;
          var whitespaceInfo = "";
          if (childTag === "#text") {
            if (/\S/.test(childText)) {
              tagDisplayName = "Text nodes";
            } else {
              tagDisplayName = "Whitespace text nodes";
              whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
            }
          } else {
            tagDisplayName = "<" + childTag + ">";
          }
          if (invalidParent) {
            var info = "";
            if (ancestorTag === "table" && childTag === "tr") {
              info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
            }
            error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
          } else {
            error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
          }
        };
      }
      var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
      var SUSPENSE_START_DATA = "$";
      var SUSPENSE_END_DATA = "/$";
      var SUSPENSE_PENDING_START_DATA = "$?";
      var SUSPENSE_FALLBACK_START_DATA = "$!";
      var STYLE$1 = "style";
      var eventsEnabled = null;
      var selectionInformation = null;
      function getRootHostContext(rootContainerInstance) {
        var type;
        var namespace;
        var nodeType = rootContainerInstance.nodeType;
        switch (nodeType) {
          case DOCUMENT_NODE:
          case DOCUMENT_FRAGMENT_NODE: {
            type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
            var root2 = rootContainerInstance.documentElement;
            namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
            break;
          }
          default: {
            var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
            var ownNamespace = container.namespaceURI || null;
            type = container.tagName;
            namespace = getChildNamespace(ownNamespace, type);
            break;
          }
        }
        {
          var validatedTag = type.toLowerCase();
          var ancestorInfo = updatedAncestorInfo(null, validatedTag);
          return {
            namespace,
            ancestorInfo
          };
        }
      }
      function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        {
          var parentHostContextDev = parentHostContext;
          var namespace = getChildNamespace(parentHostContextDev.namespace, type);
          var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
          return {
            namespace,
            ancestorInfo
          };
        }
      }
      function getPublicInstance(instance) {
        return instance;
      }
      function prepareForCommit(containerInfo) {
        eventsEnabled = isEnabled();
        selectionInformation = getSelectionInformation();
        var activeInstance = null;
        setEnabled(false);
        return activeInstance;
      }
      function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation);
        setEnabled(eventsEnabled);
        eventsEnabled = null;
        selectionInformation = null;
      }
      function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var parentNamespace;
        {
          var hostContextDev = hostContext;
          validateDOMNesting(type, null, hostContextDev.ancestorInfo);
          if (typeof props.children === "string" || typeof props.children === "number") {
            var string = "" + props.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
          }
          parentNamespace = hostContextDev.namespace;
        }
        var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
        precacheFiberNode(internalInstanceHandle, domElement);
        updateFiberProps(domElement, props);
        return domElement;
      }
      function appendInitialChild(parentInstance, child) {
        parentInstance.appendChild(child);
      }
      function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
        setInitialProperties(domElement, type, props, rootContainerInstance);
        switch (type) {
          case "button":
          case "input":
          case "select":
          case "textarea":
            return !!props.autoFocus;
          case "img":
            return true;
          default:
            return false;
        }
      }
      function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
        {
          var hostContextDev = hostContext;
          if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
            var string = "" + newProps.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
          }
        }
        return diffProperties(domElement, type, oldProps, newProps);
      }
      function shouldSetTextContent(type, props) {
        return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
      }
      function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        {
          var hostContextDev = hostContext;
          validateDOMNesting(null, text, hostContextDev.ancestorInfo);
        }
        var textNode = createTextNode(text, rootContainerInstance);
        precacheFiberNode(internalInstanceHandle, textNode);
        return textNode;
      }
      function getCurrentEventPriority() {
        var currentEvent = window.event;
        if (currentEvent === undefined) {
          return DefaultEventPriority;
        }
        return getEventPriority(currentEvent.type);
      }
      var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : undefined;
      var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : undefined;
      var noTimeout = -1;
      var localPromise = typeof Promise === "function" ? Promise : undefined;
      var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
        return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
      } : scheduleTimeout;
      function handleErrorInNextTick(error2) {
        setTimeout(function() {
          throw error2;
        });
      }
      function commitMount(domElement, type, newProps, internalInstanceHandle) {
        switch (type) {
          case "button":
          case "input":
          case "select":
          case "textarea":
            if (newProps.autoFocus) {
              domElement.focus();
            }
            return;
          case "img": {
            if (newProps.src) {
              domElement.src = newProps.src;
            }
            return;
          }
        }
      }
      function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
        updateProperties(domElement, updatePayload, type, oldProps, newProps);
        updateFiberProps(domElement, newProps);
      }
      function resetTextContent(domElement) {
        setTextContent(domElement, "");
      }
      function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
      }
      function appendChild(parentInstance, child) {
        parentInstance.appendChild(child);
      }
      function appendChildToContainer(container, child) {
        var parentNode;
        if (container.nodeType === COMMENT_NODE) {
          parentNode = container.parentNode;
          parentNode.insertBefore(child, container);
        } else {
          parentNode = container;
          parentNode.appendChild(child);
        }
        var reactRootContainer = container._reactRootContainer;
        if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
          trapClickOnNonInteractiveElement(parentNode);
        }
      }
      function insertBefore(parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild);
      }
      function insertInContainerBefore(container, child, beforeChild) {
        if (container.nodeType === COMMENT_NODE) {
          container.parentNode.insertBefore(child, beforeChild);
        } else {
          container.insertBefore(child, beforeChild);
        }
      }
      function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
      }
      function removeChildFromContainer(container, child) {
        if (container.nodeType === COMMENT_NODE) {
          container.parentNode.removeChild(child);
        } else {
          container.removeChild(child);
        }
      }
      function clearSuspenseBoundary(parentInstance, suspenseInstance) {
        var node2 = suspenseInstance;
        var depth = 0;
        do {
          var nextNode = node2.nextSibling;
          parentInstance.removeChild(node2);
          if (nextNode && nextNode.nodeType === COMMENT_NODE) {
            var data = nextNode.data;
            if (data === SUSPENSE_END_DATA) {
              if (depth === 0) {
                parentInstance.removeChild(nextNode);
                retryIfBlockedOn(suspenseInstance);
                return;
              } else {
                depth--;
              }
            } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
              depth++;
            }
          }
          node2 = nextNode;
        } while (node2);
        retryIfBlockedOn(suspenseInstance);
      }
      function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
        if (container.nodeType === COMMENT_NODE) {
          clearSuspenseBoundary(container.parentNode, suspenseInstance);
        } else if (container.nodeType === ELEMENT_NODE) {
          clearSuspenseBoundary(container, suspenseInstance);
        }
        retryIfBlockedOn(container);
      }
      function hideInstance(instance) {
        instance = instance;
        var style2 = instance.style;
        if (typeof style2.setProperty === "function") {
          style2.setProperty("display", "none", "important");
        } else {
          style2.display = "none";
        }
      }
      function hideTextInstance(textInstance) {
        textInstance.nodeValue = "";
      }
      function unhideInstance(instance, props) {
        instance = instance;
        var styleProp = props[STYLE$1];
        var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
        instance.style.display = dangerousStyleValue("display", display);
      }
      function unhideTextInstance(textInstance, text) {
        textInstance.nodeValue = text;
      }
      function clearContainer(container) {
        if (container.nodeType === ELEMENT_NODE) {
          container.textContent = "";
        } else if (container.nodeType === DOCUMENT_NODE) {
          if (container.documentElement) {
            container.removeChild(container.documentElement);
          }
        }
      }
      function canHydrateInstance(instance, type, props) {
        if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
          return null;
        }
        return instance;
      }
      function canHydrateTextInstance(instance, text) {
        if (text === "" || instance.nodeType !== TEXT_NODE) {
          return null;
        }
        return instance;
      }
      function canHydrateSuspenseInstance(instance) {
        if (instance.nodeType !== COMMENT_NODE) {
          return null;
        }
        return instance;
      }
      function isSuspenseInstancePending(instance) {
        return instance.data === SUSPENSE_PENDING_START_DATA;
      }
      function isSuspenseInstanceFallback(instance) {
        return instance.data === SUSPENSE_FALLBACK_START_DATA;
      }
      function getSuspenseInstanceFallbackErrorDetails(instance) {
        var dataset = instance.nextSibling && instance.nextSibling.dataset;
        var digest, message, stack;
        if (dataset) {
          digest = dataset.dgst;
          {
            message = dataset.msg;
            stack = dataset.stck;
          }
        }
        {
          return {
            message,
            digest,
            stack
          };
        }
      }
      function registerSuspenseInstanceRetry(instance, callback) {
        instance._reactRetry = callback;
      }
      function getNextHydratable(node2) {
        for (;node2 != null; node2 = node2.nextSibling) {
          var nodeType = node2.nodeType;
          if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
            break;
          }
          if (nodeType === COMMENT_NODE) {
            var nodeData = node2.data;
            if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
              break;
            }
            if (nodeData === SUSPENSE_END_DATA) {
              return null;
            }
          }
        }
        return node2;
      }
      function getNextHydratableSibling(instance) {
        return getNextHydratable(instance.nextSibling);
      }
      function getFirstHydratableChild(parentInstance) {
        return getNextHydratable(parentInstance.firstChild);
      }
      function getFirstHydratableChildWithinContainer(parentContainer) {
        return getNextHydratable(parentContainer.firstChild);
      }
      function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
        return getNextHydratable(parentInstance.nextSibling);
      }
      function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, instance);
        updateFiberProps(instance, props);
        var parentNamespace;
        {
          var hostContextDev = hostContext;
          parentNamespace = hostContextDev.namespace;
        }
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
      }
      function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, textInstance);
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedText(textInstance, text);
      }
      function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, suspenseInstance);
      }
      function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        var node2 = suspenseInstance.nextSibling;
        var depth = 0;
        while (node2) {
          if (node2.nodeType === COMMENT_NODE) {
            var data = node2.data;
            if (data === SUSPENSE_END_DATA) {
              if (depth === 0) {
                return getNextHydratableSibling(node2);
              } else {
                depth--;
              }
            } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
              depth++;
            }
          }
          node2 = node2.nextSibling;
        }
        return null;
      }
      function getParentSuspenseInstance(targetInstance) {
        var node2 = targetInstance.previousSibling;
        var depth = 0;
        while (node2) {
          if (node2.nodeType === COMMENT_NODE) {
            var data = node2.data;
            if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
              if (depth === 0) {
                return node2;
              } else {
                depth--;
              }
            } else if (data === SUSPENSE_END_DATA) {
              depth++;
            }
          }
          node2 = node2.previousSibling;
        }
        return null;
      }
      function commitHydratedContainer(container) {
        retryIfBlockedOn(container);
      }
      function commitHydratedSuspenseInstance(suspenseInstance) {
        retryIfBlockedOn(suspenseInstance);
      }
      function shouldDeleteUnhydratedTailInstances(parentType) {
        return parentType !== "head" && parentType !== "body";
      }
      function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
        var shouldWarnDev = true;
        checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
      }
      function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
          var shouldWarnDev = true;
          checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
        }
      }
      function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
        {
          if (instance.nodeType === ELEMENT_NODE) {
            warnForDeletedHydratableElement(parentContainer, instance);
          } else if (instance.nodeType === COMMENT_NODE)
            ;
          else {
            warnForDeletedHydratableText(parentContainer, instance);
          }
        }
      }
      function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
        {
          var parentNode = parentInstance.parentNode;
          if (parentNode !== null) {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentNode, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentNode, instance);
            }
          }
        }
      }
      function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
        {
          if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentInstance, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentInstance, instance);
            }
          }
        }
      }
      function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
        {
          warnForInsertedHydratedElement(parentContainer, type);
        }
      }
      function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
        {
          warnForInsertedHydratedText(parentContainer, text);
        }
      }
      function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
        {
          var parentNode = parentInstance.parentNode;
          if (parentNode !== null)
            warnForInsertedHydratedElement(parentNode, type);
        }
      }
      function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
        {
          var parentNode = parentInstance.parentNode;
          if (parentNode !== null)
            warnForInsertedHydratedText(parentNode, text);
        }
      }
      function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
        {
          if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedElement(parentInstance, type);
          }
        }
      }
      function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
        {
          if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedText(parentInstance, text);
          }
        }
      }
      function errorHydratingContainer(parentContainer) {
        {
          error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
        }
      }
      function preparePortalMount(portalInstance) {
        listenToAllSupportedEvents(portalInstance);
      }
      var randomKey = Math.random().toString(36).slice(2);
      var internalInstanceKey = "__reactFiber$" + randomKey;
      var internalPropsKey = "__reactProps$" + randomKey;
      var internalContainerInstanceKey = "__reactContainer$" + randomKey;
      var internalEventHandlersKey = "__reactEvents$" + randomKey;
      var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
      var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
      function detachDeletedInstance(node2) {
        delete node2[internalInstanceKey];
        delete node2[internalPropsKey];
        delete node2[internalEventHandlersKey];
        delete node2[internalEventHandlerListenersKey];
        delete node2[internalEventHandlesSetKey];
      }
      function precacheFiberNode(hostInst, node2) {
        node2[internalInstanceKey] = hostInst;
      }
      function markContainerAsRoot(hostRoot, node2) {
        node2[internalContainerInstanceKey] = hostRoot;
      }
      function unmarkContainerAsRoot(node2) {
        node2[internalContainerInstanceKey] = null;
      }
      function isContainerMarkedAsRoot(node2) {
        return !!node2[internalContainerInstanceKey];
      }
      function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst) {
          return targetInst;
        }
        var parentNode = targetNode.parentNode;
        while (parentNode) {
          targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
          if (targetInst) {
            var alternate = targetInst.alternate;
            if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
              var suspenseInstance = getParentSuspenseInstance(targetNode);
              while (suspenseInstance !== null) {
                var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                if (targetSuspenseInst) {
                  return targetSuspenseInst;
                }
                suspenseInstance = getParentSuspenseInstance(suspenseInstance);
              }
            }
            return targetInst;
          }
          targetNode = parentNode;
          parentNode = targetNode.parentNode;
        }
        return null;
      }
      function getInstanceFromNode(node2) {
        var inst = node2[internalInstanceKey] || node2[internalContainerInstanceKey];
        if (inst) {
          if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
            return inst;
          } else {
            return null;
          }
        }
        return null;
      }
      function getNodeFromInstance(inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) {
          return inst.stateNode;
        }
        throw new Error("getNodeFromInstance: Invalid argument.");
      }
      function getFiberCurrentPropsFromNode(node2) {
        return node2[internalPropsKey] || null;
      }
      function updateFiberProps(node2, props) {
        node2[internalPropsKey] = props;
      }
      function getEventListenerSet(node2) {
        var elementListenerSet = node2[internalEventHandlersKey];
        if (elementListenerSet === undefined) {
          elementListenerSet = node2[internalEventHandlersKey] = new Set;
        }
        return elementListenerSet;
      }
      var loggedTypeFailures = {};
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes(typeSpecs, values, location, componentName, element) {
        {
          var has2 = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs) {
            if (has2(typeSpecs, typeSpecName)) {
              var error$1 = undefined;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }
      var valueStack = [];
      var fiberStack;
      {
        fiberStack = [];
      }
      var index = -1;
      function createCursor(defaultValue) {
        return {
          current: defaultValue
        };
      }
      function pop(cursor, fiber) {
        if (index < 0) {
          {
            error("Unexpected pop.");
          }
          return;
        }
        {
          if (fiber !== fiberStack[index]) {
            error("Unexpected Fiber popped.");
          }
        }
        cursor.current = valueStack[index];
        valueStack[index] = null;
        {
          fiberStack[index] = null;
        }
        index--;
      }
      function push(cursor, value, fiber) {
        index++;
        valueStack[index] = cursor.current;
        {
          fiberStack[index] = fiber;
        }
        cursor.current = value;
      }
      var warnedAboutMissingGetChildContext;
      {
        warnedAboutMissingGetChildContext = {};
      }
      var emptyContextObject = {};
      {
        Object.freeze(emptyContextObject);
      }
      var contextStackCursor = createCursor(emptyContextObject);
      var didPerformWorkStackCursor = createCursor(false);
      var previousContext = emptyContextObject;
      function getUnmaskedContext(workInProgress2, Component2, didPushOwnContextIfProvider) {
        {
          if (didPushOwnContextIfProvider && isContextProvider(Component2)) {
            return previousContext;
          }
          return contextStackCursor.current;
        }
      }
      function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
        {
          var instance = workInProgress2.stateNode;
          instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
          instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
        }
      }
      function getMaskedContext(workInProgress2, unmaskedContext) {
        {
          var type = workInProgress2.type;
          var contextTypes = type.contextTypes;
          if (!contextTypes) {
            return emptyContextObject;
          }
          var instance = workInProgress2.stateNode;
          if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
            return instance.__reactInternalMemoizedMaskedChildContext;
          }
          var context = {};
          for (var key in contextTypes) {
            context[key] = unmaskedContext[key];
          }
          {
            var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
            checkPropTypes(contextTypes, context, "context", name);
          }
          if (instance) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return context;
        }
      }
      function hasContextChanged() {
        {
          return didPerformWorkStackCursor.current;
        }
      }
      function isContextProvider(type) {
        {
          var childContextTypes = type.childContextTypes;
          return childContextTypes !== null && childContextTypes !== undefined;
        }
      }
      function popContext(fiber) {
        {
          pop(didPerformWorkStackCursor, fiber);
          pop(contextStackCursor, fiber);
        }
      }
      function popTopLevelContextObject(fiber) {
        {
          pop(didPerformWorkStackCursor, fiber);
          pop(contextStackCursor, fiber);
        }
      }
      function pushTopLevelContextObject(fiber, context, didChange) {
        {
          if (contextStackCursor.current !== emptyContextObject) {
            throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
          }
          push(contextStackCursor, context, fiber);
          push(didPerformWorkStackCursor, didChange, fiber);
        }
      }
      function processChildContext(fiber, type, parentContext) {
        {
          var instance = fiber.stateNode;
          var childContextTypes = type.childContextTypes;
          if (typeof instance.getChildContext !== "function") {
            {
              var componentName = getComponentNameFromFiber(fiber) || "Unknown";
              if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
              }
            }
            return parentContext;
          }
          var childContext = instance.getChildContext();
          for (var contextKey in childContext) {
            if (!(contextKey in childContextTypes)) {
              throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
            }
          }
          {
            var name = getComponentNameFromFiber(fiber) || "Unknown";
            checkPropTypes(childContextTypes, childContext, "child context", name);
          }
          return assign({}, parentContext, childContext);
        }
      }
      function pushContextProvider(workInProgress2) {
        {
          var instance = workInProgress2.stateNode;
          var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
          previousContext = contextStackCursor.current;
          push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
          push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
          return true;
        }
      }
      function invalidateContextProvider(workInProgress2, type, didChange) {
        {
          var instance = workInProgress2.stateNode;
          if (!instance) {
            throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
          }
          if (didChange) {
            var mergedContext = processChildContext(workInProgress2, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext;
            pop(didPerformWorkStackCursor, workInProgress2);
            pop(contextStackCursor, workInProgress2);
            push(contextStackCursor, mergedContext, workInProgress2);
            push(didPerformWorkStackCursor, didChange, workInProgress2);
          } else {
            pop(didPerformWorkStackCursor, workInProgress2);
            push(didPerformWorkStackCursor, didChange, workInProgress2);
          }
        }
      }
      function findCurrentUnmaskedContext(fiber) {
        {
          if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
            throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
          }
          var node2 = fiber;
          do {
            switch (node2.tag) {
              case HostRoot:
                return node2.stateNode.context;
              case ClassComponent: {
                var Component2 = node2.type;
                if (isContextProvider(Component2)) {
                  return node2.stateNode.__reactInternalMemoizedMergedChildContext;
                }
                break;
              }
            }
            node2 = node2.return;
          } while (node2 !== null);
          throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      var LegacyRoot = 0;
      var ConcurrentRoot = 1;
      var syncQueue = null;
      var includesLegacySyncCallbacks = false;
      var isFlushingSyncQueue = false;
      function scheduleSyncCallback(callback) {
        if (syncQueue === null) {
          syncQueue = [callback];
        } else {
          syncQueue.push(callback);
        }
      }
      function scheduleLegacySyncCallback(callback) {
        includesLegacySyncCallbacks = true;
        scheduleSyncCallback(callback);
      }
      function flushSyncCallbacksOnlyInLegacyMode() {
        if (includesLegacySyncCallbacks) {
          flushSyncCallbacks();
        }
      }
      function flushSyncCallbacks() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
          isFlushingSyncQueue = true;
          var i2 = 0;
          var previousUpdatePriority = getCurrentUpdatePriority();
          try {
            var isSync = true;
            var queue = syncQueue;
            setCurrentUpdatePriority(DiscreteEventPriority);
            for (;i2 < queue.length; i2++) {
              var callback = queue[i2];
              do {
                callback = callback(isSync);
              } while (callback !== null);
            }
            syncQueue = null;
            includesLegacySyncCallbacks = false;
          } catch (error2) {
            if (syncQueue !== null) {
              syncQueue = syncQueue.slice(i2 + 1);
            }
            scheduleCallback(ImmediatePriority, flushSyncCallbacks);
            throw error2;
          } finally {
            setCurrentUpdatePriority(previousUpdatePriority);
            isFlushingSyncQueue = false;
          }
        }
        return null;
      }
      var forkStack = [];
      var forkStackIndex = 0;
      var treeForkProvider = null;
      var treeForkCount = 0;
      var idStack = [];
      var idStackIndex = 0;
      var treeContextProvider = null;
      var treeContextId = 1;
      var treeContextOverflow = "";
      function isForkedChild(workInProgress2) {
        warnIfNotHydrating();
        return (workInProgress2.flags & Forked) !== NoFlags;
      }
      function getForksAtLevel(workInProgress2) {
        warnIfNotHydrating();
        return treeForkCount;
      }
      function getTreeId() {
        var overflow = treeContextOverflow;
        var idWithLeadingBit = treeContextId;
        var id2 = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
        return id2.toString(32) + overflow;
      }
      function pushTreeFork(workInProgress2, totalChildren) {
        warnIfNotHydrating();
        forkStack[forkStackIndex++] = treeForkCount;
        forkStack[forkStackIndex++] = treeForkProvider;
        treeForkProvider = workInProgress2;
        treeForkCount = totalChildren;
      }
      function pushTreeId(workInProgress2, totalChildren, index2) {
        warnIfNotHydrating();
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextProvider = workInProgress2;
        var baseIdWithLeadingBit = treeContextId;
        var baseOverflow = treeContextOverflow;
        var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
        var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
        var slot = index2 + 1;
        var length = getBitLength(totalChildren) + baseLength;
        if (length > 30) {
          var numberOfOverflowBits = baseLength - baseLength % 5;
          var newOverflowBits = (1 << numberOfOverflowBits) - 1;
          var newOverflow = (baseId & newOverflowBits).toString(32);
          var restOfBaseId = baseId >> numberOfOverflowBits;
          var restOfBaseLength = baseLength - numberOfOverflowBits;
          var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
          var restOfNewBits = slot << restOfBaseLength;
          var id2 = restOfNewBits | restOfBaseId;
          var overflow = newOverflow + baseOverflow;
          treeContextId = 1 << restOfLength | id2;
          treeContextOverflow = overflow;
        } else {
          var newBits = slot << baseLength;
          var _id = newBits | baseId;
          var _overflow = baseOverflow;
          treeContextId = 1 << length | _id;
          treeContextOverflow = _overflow;
        }
      }
      function pushMaterializedTreeId(workInProgress2) {
        warnIfNotHydrating();
        var returnFiber = workInProgress2.return;
        if (returnFiber !== null) {
          var numberOfForks = 1;
          var slotIndex = 0;
          pushTreeFork(workInProgress2, numberOfForks);
          pushTreeId(workInProgress2, numberOfForks, slotIndex);
        }
      }
      function getBitLength(number) {
        return 32 - clz32(number);
      }
      function getLeadingBit(id2) {
        return 1 << getBitLength(id2) - 1;
      }
      function popTreeContext(workInProgress2) {
        while (workInProgress2 === treeForkProvider) {
          treeForkProvider = forkStack[--forkStackIndex];
          forkStack[forkStackIndex] = null;
          treeForkCount = forkStack[--forkStackIndex];
          forkStack[forkStackIndex] = null;
        }
        while (workInProgress2 === treeContextProvider) {
          treeContextProvider = idStack[--idStackIndex];
          idStack[idStackIndex] = null;
          treeContextOverflow = idStack[--idStackIndex];
          idStack[idStackIndex] = null;
          treeContextId = idStack[--idStackIndex];
          idStack[idStackIndex] = null;
        }
      }
      function getSuspendedTreeContext() {
        warnIfNotHydrating();
        if (treeContextProvider !== null) {
          return {
            id: treeContextId,
            overflow: treeContextOverflow
          };
        } else {
          return null;
        }
      }
      function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
        warnIfNotHydrating();
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextId = suspendedContext.id;
        treeContextOverflow = suspendedContext.overflow;
        treeContextProvider = workInProgress2;
      }
      function warnIfNotHydrating() {
        {
          if (!getIsHydrating()) {
            error("Expected to be hydrating. This is a bug in React. Please file an issue.");
          }
        }
      }
      var hydrationParentFiber = null;
      var nextHydratableInstance = null;
      var isHydrating = false;
      var didSuspendOrErrorDEV = false;
      var hydrationErrors = null;
      function warnIfHydrating() {
        {
          if (isHydrating) {
            error("We should not be hydrating here. This is a bug in React. Please file a bug.");
          }
        }
      }
      function markDidThrowWhileHydratingDEV() {
        {
          didSuspendOrErrorDEV = true;
        }
      }
      function didSuspendOrErrorWhileHydratingDEV() {
        {
          return didSuspendOrErrorDEV;
        }
      }
      function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        hydrationErrors = null;
        didSuspendOrErrorDEV = false;
        return true;
      }
      function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
        nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        hydrationErrors = null;
        didSuspendOrErrorDEV = false;
        if (treeContext !== null) {
          restoreSuspendedTreeContext(fiber, treeContext);
        }
        return true;
      }
      function warnUnhydratedInstance(returnFiber, instance) {
        {
          switch (returnFiber.tag) {
            case HostRoot: {
              didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
              break;
            }
            case HostComponent: {
              var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
              didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, isConcurrentMode);
              break;
            }
            case SuspenseComponent: {
              var suspenseState = returnFiber.memoizedState;
              if (suspenseState.dehydrated !== null)
                didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
              break;
            }
          }
        }
      }
      function deleteHydratableInstance(returnFiber, instance) {
        warnUnhydratedInstance(returnFiber, instance);
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance;
        childToDelete.return = returnFiber;
        var deletions = returnFiber.deletions;
        if (deletions === null) {
          returnFiber.deletions = [childToDelete];
          returnFiber.flags |= ChildDeletion;
        } else {
          deletions.push(childToDelete);
        }
      }
      function warnNonhydratedInstance(returnFiber, fiber) {
        {
          if (didSuspendOrErrorDEV) {
            return;
          }
          switch (returnFiber.tag) {
            case HostRoot: {
              var parentContainer = returnFiber.stateNode.containerInfo;
              switch (fiber.tag) {
                case HostComponent:
                  var type = fiber.type;
                  var props = fiber.pendingProps;
                  didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                  break;
                case HostText:
                  var text = fiber.pendingProps;
                  didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                  break;
              }
              break;
            }
            case HostComponent: {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;
              switch (fiber.tag) {
                case HostComponent: {
                  var _type = fiber.type;
                  var _props = fiber.pendingProps;
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, isConcurrentMode);
                  break;
                }
                case HostText: {
                  var _text = fiber.pendingProps;
                  var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, _isConcurrentMode);
                  break;
                }
              }
              break;
            }
            case SuspenseComponent: {
              var suspenseState = returnFiber.memoizedState;
              var _parentInstance = suspenseState.dehydrated;
              if (_parentInstance !== null)
                switch (fiber.tag) {
                  case HostComponent:
                    var _type2 = fiber.type;
                    var _props2 = fiber.pendingProps;
                    didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                    break;
                  case HostText:
                    var _text2 = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                    break;
                }
              break;
            }
            default:
              return;
          }
        }
      }
      function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.flags = fiber.flags & ~Hydrating | Placement;
        warnNonhydratedInstance(returnFiber, fiber);
      }
      function tryHydrate(fiber, nextInstance) {
        switch (fiber.tag) {
          case HostComponent: {
            var type = fiber.type;
            var props = fiber.pendingProps;
            var instance = canHydrateInstance(nextInstance, type);
            if (instance !== null) {
              fiber.stateNode = instance;
              hydrationParentFiber = fiber;
              nextHydratableInstance = getFirstHydratableChild(instance);
              return true;
            }
            return false;
          }
          case HostText: {
            var text = fiber.pendingProps;
            var textInstance = canHydrateTextInstance(nextInstance, text);
            if (textInstance !== null) {
              fiber.stateNode = textInstance;
              hydrationParentFiber = fiber;
              nextHydratableInstance = null;
              return true;
            }
            return false;
          }
          case SuspenseComponent: {
            var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
            if (suspenseInstance !== null) {
              var suspenseState = {
                dehydrated: suspenseInstance,
                treeContext: getSuspendedTreeContext(),
                retryLane: OffscreenLane
              };
              fiber.memoizedState = suspenseState;
              var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
              dehydratedFragment.return = fiber;
              fiber.child = dehydratedFragment;
              hydrationParentFiber = fiber;
              nextHydratableInstance = null;
              return true;
            }
            return false;
          }
          default:
            return false;
        }
      }
      function shouldClientRenderOnMismatch(fiber) {
        return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
      }
      function throwOnHydrationMismatch(fiber) {
        throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
      }
      function tryToClaimNextHydratableInstance(fiber) {
        if (!isHydrating) {
          return;
        }
        var nextInstance = nextHydratableInstance;
        if (!nextInstance) {
          if (shouldClientRenderOnMismatch(fiber)) {
            warnNonhydratedInstance(hydrationParentFiber, fiber);
            throwOnHydrationMismatch();
          }
          insertNonHydratedInstance(hydrationParentFiber, fiber);
          isHydrating = false;
          hydrationParentFiber = fiber;
          return;
        }
        var firstAttemptedInstance = nextInstance;
        if (!tryHydrate(fiber, nextInstance)) {
          if (shouldClientRenderOnMismatch(fiber)) {
            warnNonhydratedInstance(hydrationParentFiber, fiber);
            throwOnHydrationMismatch();
          }
          nextInstance = getNextHydratableSibling(firstAttemptedInstance);
          var prevHydrationParentFiber = hydrationParentFiber;
          if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
        }
      }
      function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        var instance = fiber.stateNode;
        var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
        var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
        fiber.updateQueue = updatePayload;
        if (updatePayload !== null) {
          return true;
        }
        return false;
      }
      function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode;
        var textContent = fiber.memoizedProps;
        var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        if (shouldUpdate) {
          var returnFiber = hydrationParentFiber;
          if (returnFiber !== null) {
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, isConcurrentMode);
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, _isConcurrentMode2);
                break;
              }
            }
          }
        }
        return shouldUpdate;
      }
      function prepareToHydrateHostSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) {
          throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        }
        hydrateSuspenseInstance(suspenseInstance, fiber);
      }
      function skipPastDehydratedSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) {
          throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        }
        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
      }
      function popToNextHostParent(fiber) {
        var parent = fiber.return;
        while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
          parent = parent.return;
        }
        hydrationParentFiber = parent;
      }
      function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) {
          return false;
        }
        if (!isHydrating) {
          popToNextHostParent(fiber);
          isHydrating = true;
          return false;
        }
        if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
          var nextInstance = nextHydratableInstance;
          if (nextInstance) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnIfUnhydratedTailNodes(fiber);
              throwOnHydrationMismatch();
            } else {
              while (nextInstance) {
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
              }
            }
          }
        }
        popToNextHostParent(fiber);
        if (fiber.tag === SuspenseComponent) {
          nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
        } else {
          nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        }
        return true;
      }
      function hasUnhydratedTailNodes() {
        return isHydrating && nextHydratableInstance !== null;
      }
      function warnIfUnhydratedTailNodes(fiber) {
        var nextInstance = nextHydratableInstance;
        while (nextInstance) {
          warnUnhydratedInstance(fiber, nextInstance);
          nextInstance = getNextHydratableSibling(nextInstance);
        }
      }
      function resetHydrationState() {
        hydrationParentFiber = null;
        nextHydratableInstance = null;
        isHydrating = false;
        didSuspendOrErrorDEV = false;
      }
      function upgradeHydrationErrorsToRecoverable() {
        if (hydrationErrors !== null) {
          queueRecoverableErrors(hydrationErrors);
          hydrationErrors = null;
        }
      }
      function getIsHydrating() {
        return isHydrating;
      }
      function queueHydrationError(error2) {
        if (hydrationErrors === null) {
          hydrationErrors = [error2];
        } else {
          hydrationErrors.push(error2);
        }
      }
      var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
      var NoTransition = null;
      function requestCurrentTransition() {
        return ReactCurrentBatchConfig$1.transition;
      }
      var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function(fiber, instance) {},
        flushPendingUnsafeLifecycleWarnings: function() {},
        recordLegacyContextWarning: function(fiber, instance) {},
        flushLegacyContextWarning: function() {},
        discardPendingWarnings: function() {}
      };
      {
        var findStrictRoot = function(fiber) {
          var maybeStrictRoot = null;
          var node2 = fiber;
          while (node2 !== null) {
            if (node2.mode & StrictLegacyMode) {
              maybeStrictRoot = node2;
            }
            node2 = node2.return;
          }
          return maybeStrictRoot;
        };
        var setToSortedString = function(set2) {
          var array = [];
          set2.forEach(function(value) {
            array.push(value);
          });
          return array.sort().join(", ");
        };
        var pendingComponentWillMountWarnings = [];
        var pendingUNSAFE_ComponentWillMountWarnings = [];
        var pendingComponentWillReceivePropsWarnings = [];
        var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        var pendingComponentWillUpdateWarnings = [];
        var pendingUNSAFE_ComponentWillUpdateWarnings = [];
        var didWarnAboutUnsafeLifecycles = new Set;
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
          if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
            return;
          }
          if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
            pendingComponentWillMountWarnings.push(fiber);
          }
          if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
            pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
          }
          if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
            pendingComponentWillReceivePropsWarnings.push(fiber);
          }
          if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
          }
          if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
            pendingComponentWillUpdateWarnings.push(fiber);
          }
          if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
            pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
          }
        };
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
          var componentWillMountUniqueNames = new Set;
          if (pendingComponentWillMountWarnings.length > 0) {
            pendingComponentWillMountWarnings.forEach(function(fiber) {
              componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillMountWarnings = [];
          }
          var UNSAFE_componentWillMountUniqueNames = new Set;
          if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
            pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
              UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillMountWarnings = [];
          }
          var componentWillReceivePropsUniqueNames = new Set;
          if (pendingComponentWillReceivePropsWarnings.length > 0) {
            pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
              componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillReceivePropsWarnings = [];
          }
          var UNSAFE_componentWillReceivePropsUniqueNames = new Set;
          if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
              UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          }
          var componentWillUpdateUniqueNames = new Set;
          if (pendingComponentWillUpdateWarnings.length > 0) {
            pendingComponentWillUpdateWarnings.forEach(function(fiber) {
              componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillUpdateWarnings = [];
          }
          var UNSAFE_componentWillUpdateUniqueNames = new Set;
          if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
              UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
          }
          if (UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error(`Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code with side effects to componentDidMount, and set initial state in the constructor.

Please update the following components: %s`, sortedNames);
          }
          if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
            error(`Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state

Please update the following components: %s`, _sortedNames);
          }
          if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
            error(`Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.

Please update the following components: %s`, _sortedNames2);
          }
          if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
            warn(`componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code with side effects to componentDidMount, and set initial state in the constructor.
* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, _sortedNames3);
          }
          if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
            warn(`componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state
* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, _sortedNames4);
          }
          if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
            warn(`componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, _sortedNames5);
          }
        };
        var pendingLegacyContextWarning = new Map;
        var didWarnAboutLegacyContext = new Set;
        ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
          var strictRoot = findStrictRoot(fiber);
          if (strictRoot === null) {
            error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
            return;
          }
          if (didWarnAboutLegacyContext.has(fiber.type)) {
            return;
          }
          var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
          if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
            if (warningsForRoot === undefined) {
              warningsForRoot = [];
              pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
            }
            warningsForRoot.push(fiber);
          }
        };
        ReactStrictModeWarnings.flushLegacyContextWarning = function() {
          pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
            if (fiberArray.length === 0) {
              return;
            }
            var firstFiber = fiberArray[0];
            var uniqueNames = new Set;
            fiberArray.forEach(function(fiber) {
              uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            try {
              setCurrentFiber(firstFiber);
              error(`Legacy context API has been detected within a strict-mode tree.

The old API will be supported in all 16.x releases, but applications using it should migrate to the new version.

Please update the following components: %s

Learn more about this warning here: https://reactjs.org/link/legacy-context`, sortedNames);
            } finally {
              resetCurrentFiber();
            }
          });
        };
        ReactStrictModeWarnings.discardPendingWarnings = function() {
          pendingComponentWillMountWarnings = [];
          pendingUNSAFE_ComponentWillMountWarnings = [];
          pendingComponentWillReceivePropsWarnings = [];
          pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          pendingComponentWillUpdateWarnings = [];
          pendingUNSAFE_ComponentWillUpdateWarnings = [];
          pendingLegacyContextWarning = new Map;
        };
      }
      function resolveDefaultProps(Component2, baseProps) {
        if (Component2 && Component2.defaultProps) {
          var props = assign({}, baseProps);
          var defaultProps = Component2.defaultProps;
          for (var propName in defaultProps) {
            if (props[propName] === undefined) {
              props[propName] = defaultProps[propName];
            }
          }
          return props;
        }
        return baseProps;
      }
      var valueCursor = createCursor(null);
      var rendererSigil;
      {
        rendererSigil = {};
      }
      var currentlyRenderingFiber = null;
      var lastContextDependency = null;
      var lastFullyObservedContext = null;
      var isDisallowedContextReadInDEV = false;
      function resetContextDependencies() {
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastFullyObservedContext = null;
        {
          isDisallowedContextReadInDEV = false;
        }
      }
      function enterDisallowedContextReadInDEV() {
        {
          isDisallowedContextReadInDEV = true;
        }
      }
      function exitDisallowedContextReadInDEV() {
        {
          isDisallowedContextReadInDEV = false;
        }
      }
      function pushProvider(providerFiber, context, nextValue) {
        {
          push(valueCursor, context._currentValue, providerFiber);
          context._currentValue = nextValue;
          {
            if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
              error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
            }
            context._currentRenderer = rendererSigil;
          }
        }
      }
      function popProvider(context, providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber);
        {
          {
            context._currentValue = currentValue;
          }
        }
      }
      function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
        var node2 = parent;
        while (node2 !== null) {
          var alternate = node2.alternate;
          if (!isSubsetOfLanes(node2.childLanes, renderLanes2)) {
            node2.childLanes = mergeLanes(node2.childLanes, renderLanes2);
            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
            }
          } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
            alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
          }
          if (node2 === propagationRoot) {
            break;
          }
          node2 = node2.return;
        }
        {
          if (node2 !== propagationRoot) {
            error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
      function propagateContextChange(workInProgress2, context, renderLanes2) {
        {
          propagateContextChange_eager(workInProgress2, context, renderLanes2);
        }
      }
      function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
        var fiber = workInProgress2.child;
        if (fiber !== null) {
          fiber.return = workInProgress2;
        }
        while (fiber !== null) {
          var nextFiber = undefined;
          var list = fiber.dependencies;
          if (list !== null) {
            nextFiber = fiber.child;
            var dependency = list.firstContext;
            while (dependency !== null) {
              if (dependency.context === context) {
                if (fiber.tag === ClassComponent) {
                  var lane = pickArbitraryLane(renderLanes2);
                  var update = createUpdate(NoTimestamp, lane);
                  update.tag = ForceUpdate;
                  var updateQueue = fiber.updateQueue;
                  if (updateQueue === null)
                    ;
                  else {
                    var sharedQueue = updateQueue.shared;
                    var pending = sharedQueue.pending;
                    if (pending === null) {
                      update.next = update;
                    } else {
                      update.next = pending.next;
                      pending.next = update;
                    }
                    sharedQueue.pending = update;
                  }
                }
                fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                var alternate = fiber.alternate;
                if (alternate !== null) {
                  alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                list.lanes = mergeLanes(list.lanes, renderLanes2);
                break;
              }
              dependency = dependency.next;
            }
          } else if (fiber.tag === ContextProvider) {
            nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
          } else if (fiber.tag === DehydratedFragment) {
            var parentSuspense = fiber.return;
            if (parentSuspense === null) {
              throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
            }
            parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
            var _alternate = parentSuspense.alternate;
            if (_alternate !== null) {
              _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
            nextFiber = fiber.sibling;
          } else {
            nextFiber = fiber.child;
          }
          if (nextFiber !== null) {
            nextFiber.return = fiber;
          } else {
            nextFiber = fiber;
            while (nextFiber !== null) {
              if (nextFiber === workInProgress2) {
                nextFiber = null;
                break;
              }
              var sibling = nextFiber.sibling;
              if (sibling !== null) {
                sibling.return = nextFiber.return;
                nextFiber = sibling;
                break;
              }
              nextFiber = nextFiber.return;
            }
          }
          fiber = nextFiber;
        }
      }
      function prepareToReadContext(workInProgress2, renderLanes2) {
        currentlyRenderingFiber = workInProgress2;
        lastContextDependency = null;
        lastFullyObservedContext = null;
        var dependencies = workInProgress2.dependencies;
        if (dependencies !== null) {
          {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
              if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                markWorkInProgressReceivedUpdate();
              }
              dependencies.firstContext = null;
            }
          }
        }
      }
      function readContext(context) {
        {
          if (isDisallowedContextReadInDEV) {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          }
        }
        var value = context._currentValue;
        if (lastFullyObservedContext === context)
          ;
        else {
          var contextItem = {
            context,
            memoizedValue: value,
            next: null
          };
          if (lastContextDependency === null) {
            if (currentlyRenderingFiber === null) {
              throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
            lastContextDependency = contextItem;
            currentlyRenderingFiber.dependencies = {
              lanes: NoLanes,
              firstContext: contextItem
            };
          } else {
            lastContextDependency = lastContextDependency.next = contextItem;
          }
        }
        return value;
      }
      var concurrentQueues = null;
      function pushConcurrentUpdateQueue(queue) {
        if (concurrentQueues === null) {
          concurrentQueues = [queue];
        } else {
          concurrentQueues.push(queue);
        }
      }
      function finishQueueingConcurrentUpdates() {
        if (concurrentQueues !== null) {
          for (var i2 = 0;i2 < concurrentQueues.length; i2++) {
            var queue = concurrentQueues[i2];
            var lastInterleavedUpdate = queue.interleaved;
            if (lastInterleavedUpdate !== null) {
              queue.interleaved = null;
              var firstInterleavedUpdate = lastInterleavedUpdate.next;
              var lastPendingUpdate = queue.pending;
              if (lastPendingUpdate !== null) {
                var firstPendingUpdate = lastPendingUpdate.next;
                lastPendingUpdate.next = firstInterleavedUpdate;
                lastInterleavedUpdate.next = firstPendingUpdate;
              }
              queue.pending = lastInterleavedUpdate;
            }
          }
          concurrentQueues = null;
        }
      }
      function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        if (interleaved === null) {
          update.next = update;
          pushConcurrentUpdateQueue(queue);
        } else {
          update.next = interleaved.next;
          interleaved.next = update;
        }
        queue.interleaved = update;
        return markUpdateLaneFromFiberToRoot(fiber, lane);
      }
      function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        if (interleaved === null) {
          update.next = update;
          pushConcurrentUpdateQueue(queue);
        } else {
          update.next = interleaved.next;
          interleaved.next = update;
        }
        queue.interleaved = update;
      }
      function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        if (interleaved === null) {
          update.next = update;
          pushConcurrentUpdateQueue(queue);
        } else {
          update.next = interleaved.next;
          interleaved.next = update;
        }
        queue.interleaved = update;
        return markUpdateLaneFromFiberToRoot(fiber, lane);
      }
      function enqueueConcurrentRenderForLane(fiber, lane) {
        return markUpdateLaneFromFiberToRoot(fiber, lane);
      }
      var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
      function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
        var alternate = sourceFiber.alternate;
        if (alternate !== null) {
          alternate.lanes = mergeLanes(alternate.lanes, lane);
        }
        {
          if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
            warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
          }
        }
        var node2 = sourceFiber;
        var parent = sourceFiber.return;
        while (parent !== null) {
          parent.childLanes = mergeLanes(parent.childLanes, lane);
          alternate = parent.alternate;
          if (alternate !== null) {
            alternate.childLanes = mergeLanes(alternate.childLanes, lane);
          } else {
            {
              if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
          }
          node2 = parent;
          parent = parent.return;
        }
        if (node2.tag === HostRoot) {
          var root2 = node2.stateNode;
          return root2;
        } else {
          return null;
        }
      }
      var UpdateState = 0;
      var ReplaceState = 1;
      var ForceUpdate = 2;
      var CaptureUpdate = 3;
      var hasForceUpdate = false;
      var didWarnUpdateInsideUpdate;
      var currentlyProcessingQueue;
      {
        didWarnUpdateInsideUpdate = false;
        currentlyProcessingQueue = null;
      }
      function initializeUpdateQueue(fiber) {
        var queue = {
          baseState: fiber.memoizedState,
          firstBaseUpdate: null,
          lastBaseUpdate: null,
          shared: {
            pending: null,
            interleaved: null,
            lanes: NoLanes
          },
          effects: null
        };
        fiber.updateQueue = queue;
      }
      function cloneUpdateQueue(current2, workInProgress2) {
        var queue = workInProgress2.updateQueue;
        var currentQueue = current2.updateQueue;
        if (queue === currentQueue) {
          var clone = {
            baseState: currentQueue.baseState,
            firstBaseUpdate: currentQueue.firstBaseUpdate,
            lastBaseUpdate: currentQueue.lastBaseUpdate,
            shared: currentQueue.shared,
            effects: currentQueue.effects
          };
          workInProgress2.updateQueue = clone;
        }
      }
      function createUpdate(eventTime, lane) {
        var update = {
          eventTime,
          lane,
          tag: UpdateState,
          payload: null,
          callback: null,
          next: null
        };
        return update;
      }
      function enqueueUpdate(fiber, update, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) {
          return null;
        }
        var sharedQueue = updateQueue.shared;
        {
          if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
            error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
            didWarnUpdateInsideUpdate = true;
          }
        }
        if (isUnsafeClassRenderPhaseUpdate()) {
          var pending = sharedQueue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          sharedQueue.pending = update;
          return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
        } else {
          return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
        }
      }
      function entangleTransitions(root2, fiber, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) {
          return;
        }
        var sharedQueue = updateQueue.shared;
        if (isTransitionLane(lane)) {
          var queueLanes = sharedQueue.lanes;
          queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
          var newQueueLanes = mergeLanes(queueLanes, lane);
          sharedQueue.lanes = newQueueLanes;
          markRootEntangled(root2, newQueueLanes);
        }
      }
      function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
        var queue = workInProgress2.updateQueue;
        var current2 = workInProgress2.alternate;
        if (current2 !== null) {
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var newFirst = null;
            var newLast = null;
            var firstBaseUpdate = queue.firstBaseUpdate;
            if (firstBaseUpdate !== null) {
              var update = firstBaseUpdate;
              do {
                var clone = {
                  eventTime: update.eventTime,
                  lane: update.lane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                if (newLast === null) {
                  newFirst = newLast = clone;
                } else {
                  newLast.next = clone;
                  newLast = clone;
                }
                update = update.next;
              } while (update !== null);
              if (newLast === null) {
                newFirst = newLast = capturedUpdate;
              } else {
                newLast.next = capturedUpdate;
                newLast = capturedUpdate;
              }
            } else {
              newFirst = newLast = capturedUpdate;
            }
            queue = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: newFirst,
              lastBaseUpdate: newLast,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = queue;
            return;
          }
        }
        var lastBaseUpdate = queue.lastBaseUpdate;
        if (lastBaseUpdate === null) {
          queue.firstBaseUpdate = capturedUpdate;
        } else {
          lastBaseUpdate.next = capturedUpdate;
        }
        queue.lastBaseUpdate = capturedUpdate;
      }
      function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
        switch (update.tag) {
          case ReplaceState: {
            var payload = update.payload;
            if (typeof payload === "function") {
              {
                enterDisallowedContextReadInDEV();
              }
              var nextState = payload.call(instance, prevState, nextProps);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    payload.call(instance, prevState, nextProps);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                exitDisallowedContextReadInDEV();
              }
              return nextState;
            }
            return payload;
          }
          case CaptureUpdate: {
            workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
          }
          case UpdateState: {
            var _payload = update.payload;
            var partialState;
            if (typeof _payload === "function") {
              {
                enterDisallowedContextReadInDEV();
              }
              partialState = _payload.call(instance, prevState, nextProps);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    _payload.call(instance, prevState, nextProps);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                exitDisallowedContextReadInDEV();
              }
            } else {
              partialState = _payload;
            }
            if (partialState === null || partialState === undefined) {
              return prevState;
            }
            return assign({}, prevState, partialState);
          }
          case ForceUpdate: {
            hasForceUpdate = true;
            return prevState;
          }
        }
        return prevState;
      }
      function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
        var queue = workInProgress2.updateQueue;
        hasForceUpdate = false;
        {
          currentlyProcessingQueue = queue.shared;
        }
        var firstBaseUpdate = queue.firstBaseUpdate;
        var lastBaseUpdate = queue.lastBaseUpdate;
        var pendingQueue = queue.shared.pending;
        if (pendingQueue !== null) {
          queue.shared.pending = null;
          var lastPendingUpdate = pendingQueue;
          var firstPendingUpdate = lastPendingUpdate.next;
          lastPendingUpdate.next = null;
          if (lastBaseUpdate === null) {
            firstBaseUpdate = firstPendingUpdate;
          } else {
            lastBaseUpdate.next = firstPendingUpdate;
          }
          lastBaseUpdate = lastPendingUpdate;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
            if (currentLastBaseUpdate !== lastBaseUpdate) {
              if (currentLastBaseUpdate === null) {
                currentQueue.firstBaseUpdate = firstPendingUpdate;
              } else {
                currentLastBaseUpdate.next = firstPendingUpdate;
              }
              currentQueue.lastBaseUpdate = lastPendingUpdate;
            }
          }
        }
        if (firstBaseUpdate !== null) {
          var newState = queue.baseState;
          var newLanes = NoLanes;
          var newBaseState = null;
          var newFirstBaseUpdate = null;
          var newLastBaseUpdate = null;
          var update = firstBaseUpdate;
          do {
            var updateLane = update.lane;
            var updateEventTime = update.eventTime;
            if (!isSubsetOfLanes(renderLanes2, updateLane)) {
              var clone = {
                eventTime: updateEventTime,
                lane: updateLane,
                tag: update.tag,
                payload: update.payload,
                callback: update.callback,
                next: null
              };
              if (newLastBaseUpdate === null) {
                newFirstBaseUpdate = newLastBaseUpdate = clone;
                newBaseState = newState;
              } else {
                newLastBaseUpdate = newLastBaseUpdate.next = clone;
              }
              newLanes = mergeLanes(newLanes, updateLane);
            } else {
              if (newLastBaseUpdate !== null) {
                var _clone = {
                  eventTime: updateEventTime,
                  lane: NoLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                newLastBaseUpdate = newLastBaseUpdate.next = _clone;
              }
              newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
              var callback = update.callback;
              if (callback !== null && update.lane !== NoLane) {
                workInProgress2.flags |= Callback;
                var effects = queue.effects;
                if (effects === null) {
                  queue.effects = [update];
                } else {
                  effects.push(update);
                }
              }
            }
            update = update.next;
            if (update === null) {
              pendingQueue = queue.shared.pending;
              if (pendingQueue === null) {
                break;
              } else {
                var _lastPendingUpdate = pendingQueue;
                var _firstPendingUpdate = _lastPendingUpdate.next;
                _lastPendingUpdate.next = null;
                update = _firstPendingUpdate;
                queue.lastBaseUpdate = _lastPendingUpdate;
                queue.shared.pending = null;
              }
            }
          } while (true);
          if (newLastBaseUpdate === null) {
            newBaseState = newState;
          }
          queue.baseState = newBaseState;
          queue.firstBaseUpdate = newFirstBaseUpdate;
          queue.lastBaseUpdate = newLastBaseUpdate;
          var lastInterleaved = queue.shared.interleaved;
          if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do {
              newLanes = mergeLanes(newLanes, interleaved.lane);
              interleaved = interleaved.next;
            } while (interleaved !== lastInterleaved);
          } else if (firstBaseUpdate === null) {
            queue.shared.lanes = NoLanes;
          }
          markSkippedUpdateLanes(newLanes);
          workInProgress2.lanes = newLanes;
          workInProgress2.memoizedState = newState;
        }
        {
          currentlyProcessingQueue = null;
        }
      }
      function callCallback(callback, context) {
        if (typeof callback !== "function") {
          throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
        }
        callback.call(context);
      }
      function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
      }
      function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
      }
      function commitUpdateQueue(finishedWork, finishedQueue, instance) {
        var effects = finishedQueue.effects;
        finishedQueue.effects = null;
        if (effects !== null) {
          for (var i2 = 0;i2 < effects.length; i2++) {
            var effect = effects[i2];
            var callback = effect.callback;
            if (callback !== null) {
              effect.callback = null;
              callCallback(callback, instance);
            }
          }
        }
      }
      var fakeInternalInstance = {};
      var emptyRefsObject = new React3.Component().refs;
      var didWarnAboutStateAssignmentForComponent;
      var didWarnAboutUninitializedState;
      var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
      var didWarnAboutLegacyLifecyclesAndDerivedState;
      var didWarnAboutUndefinedDerivedState;
      var warnOnUndefinedDerivedState;
      var warnOnInvalidCallback;
      var didWarnAboutDirectlyAssigningPropsToState;
      var didWarnAboutContextTypeAndContextTypes;
      var didWarnAboutInvalidateContextType;
      {
        didWarnAboutStateAssignmentForComponent = new Set;
        didWarnAboutUninitializedState = new Set;
        didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set;
        didWarnAboutLegacyLifecyclesAndDerivedState = new Set;
        didWarnAboutDirectlyAssigningPropsToState = new Set;
        didWarnAboutUndefinedDerivedState = new Set;
        didWarnAboutContextTypeAndContextTypes = new Set;
        didWarnAboutInvalidateContextType = new Set;
        var didWarnOnInvalidCallback = new Set;
        warnOnInvalidCallback = function(callback, callerName) {
          if (callback === null || typeof callback === "function") {
            return;
          }
          var key = callerName + "_" + callback;
          if (!didWarnOnInvalidCallback.has(key)) {
            didWarnOnInvalidCallback.add(key);
            error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
          }
        };
        warnOnUndefinedDerivedState = function(type, partialState) {
          if (partialState === undefined) {
            var componentName = getComponentNameFromType(type) || "Component";
            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
              didWarnAboutUndefinedDerivedState.add(componentName);
              error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
            }
          }
        };
        Object.defineProperty(fakeInternalInstance, "_processChildContext", {
          enumerable: false,
          value: function() {
            throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
          }
        });
        Object.freeze(fakeInternalInstance);
      }
      function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress2.memoizedState;
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        {
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              partialState = getDerivedStateFromProps(nextProps, prevState);
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          warnOnUndefinedDerivedState(ctor, partialState);
        }
        var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);
        workInProgress2.memoizedState = memoizedState;
        if (workInProgress2.lanes === NoLanes) {
          var updateQueue = workInProgress2.updateQueue;
          updateQueue.baseState = memoizedState;
        }
      }
      var classComponentUpdater = {
        isMounted,
        enqueueSetState: function(inst, payload, callback) {
          var fiber = get(inst);
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = createUpdate(eventTime, lane);
          update.payload = payload;
          if (callback !== undefined && callback !== null) {
            {
              warnOnInvalidCallback(callback, "setState");
            }
            update.callback = callback;
          }
          var root2 = enqueueUpdate(fiber, update, lane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            entangleTransitions(root2, fiber, lane);
          }
          {
            markStateUpdateScheduled(fiber, lane);
          }
        },
        enqueueReplaceState: function(inst, payload, callback) {
          var fiber = get(inst);
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = createUpdate(eventTime, lane);
          update.tag = ReplaceState;
          update.payload = payload;
          if (callback !== undefined && callback !== null) {
            {
              warnOnInvalidCallback(callback, "replaceState");
            }
            update.callback = callback;
          }
          var root2 = enqueueUpdate(fiber, update, lane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            entangleTransitions(root2, fiber, lane);
          }
          {
            markStateUpdateScheduled(fiber, lane);
          }
        },
        enqueueForceUpdate: function(inst, callback) {
          var fiber = get(inst);
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = createUpdate(eventTime, lane);
          update.tag = ForceUpdate;
          if (callback !== undefined && callback !== null) {
            {
              warnOnInvalidCallback(callback, "forceUpdate");
            }
            update.callback = callback;
          }
          var root2 = enqueueUpdate(fiber, update, lane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            entangleTransitions(root2, fiber, lane);
          }
          {
            markForceUpdateScheduled(fiber, lane);
          }
        }
      };
      function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress2.stateNode;
        if (typeof instance.shouldComponentUpdate === "function") {
          var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            if (shouldUpdate === undefined) {
              error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
            }
          }
          return shouldUpdate;
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent) {
          return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        }
        return true;
      }
      function checkClassInstance(workInProgress2, ctor, newProps) {
        var instance = workInProgress2.stateNode;
        {
          var name = getComponentNameFromType(ctor) || "Component";
          var renderPresent = instance.render;
          if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === "function") {
              error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
            } else {
              error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
            }
          }
          if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
            error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
          }
          if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
            error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
          }
          if (instance.propTypes) {
            error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
          }
          if (instance.contextType) {
            error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
          }
          {
            if (instance.contextTypes) {
              error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
            }
            if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
              didWarnAboutContextTypeAndContextTypes.add(ctor);
              error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
            }
          }
          if (typeof instance.componentShouldUpdate === "function") {
            error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
            error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
          }
          if (typeof instance.componentDidUnmount === "function") {
            error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
          }
          if (typeof instance.componentDidReceiveProps === "function") {
            error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
          }
          if (typeof instance.componentWillRecieveProps === "function") {
            error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
          }
          if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
            error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
          }
          var hasMutatedProps = instance.props !== newProps;
          if (instance.props !== undefined && hasMutatedProps) {
            error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
          }
          if (instance.defaultProps) {
            error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
            error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
          }
          if (typeof instance.getDerivedStateFromProps === "function") {
            error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
          }
          if (typeof instance.getDerivedStateFromError === "function") {
            error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
          }
          if (typeof ctor.getSnapshotBeforeUpdate === "function") {
            error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
          }
          var _state = instance.state;
          if (_state && (typeof _state !== "object" || isArray(_state))) {
            error("%s.state: must be set to an object or null", name);
          }
          if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
            error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
          }
        }
      }
      function adoptClassInstance(workInProgress2, instance) {
        instance.updater = classComponentUpdater;
        workInProgress2.stateNode = instance;
        set(instance, workInProgress2);
        {
          instance._reactInternalInstance = fakeInternalInstance;
        }
      }
      function constructClassInstance(workInProgress2, ctor, props) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context = emptyContextObject;
        var contextType = ctor.contextType;
        {
          if ("contextType" in ctor) {
            var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined;
            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
              didWarnAboutInvalidateContextType.add(ctor);
              var addendum = "";
              if (contextType === undefined) {
                addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
              } else if (typeof contextType !== "object") {
                addendum = " However, it is set to a " + typeof contextType + ".";
              } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                addendum = " Did you accidentally pass the Context.Provider instead?";
              } else if (contextType._context !== undefined) {
                addendum = " Did you accidentally pass the Context.Consumer instead?";
              } else {
                addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
              }
              error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
            }
          }
        }
        if (typeof contextType === "object" && contextType !== null) {
          context = readContext(contextType);
        } else {
          unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          var contextTypes = ctor.contextTypes;
          isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
          context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
        }
        var instance = new ctor(props, context);
        {
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              instance = new ctor(props, context);
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
        }
        var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
        adoptClassInstance(workInProgress2, instance);
        {
          if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            if (!didWarnAboutUninitializedState.has(componentName)) {
              didWarnAboutUninitializedState.add(componentName);
              error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
            }
          }
          if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
            var foundWillMountName = null;
            var foundWillReceivePropsName = null;
            var foundWillUpdateName = null;
            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
              foundWillMountName = "componentWillMount";
            } else if (typeof instance.UNSAFE_componentWillMount === "function") {
              foundWillMountName = "UNSAFE_componentWillMount";
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              foundWillReceivePropsName = "componentWillReceiveProps";
            } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              foundWillUpdateName = "componentWillUpdate";
            } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
              foundWillUpdateName = "UNSAFE_componentWillUpdate";
            }
            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
              var _componentName = getComponentNameFromType(ctor) || "Component";
              var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
              if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                error(`Unsafe legacy lifecycles will not be called for components using new component APIs.

%s uses %s but also contains the following legacy lifecycles:%s%s%s

The above lifecycles should be removed. Learn more about this warning here:
https://reactjs.org/link/unsafe-component-lifecycles`, _componentName, newApiName, foundWillMountName !== null ? `
  ` + foundWillMountName : "", foundWillReceivePropsName !== null ? `
  ` + foundWillReceivePropsName : "", foundWillUpdateName !== null ? `
  ` + foundWillUpdateName : "");
              }
            }
          }
        }
        if (isLegacyContextConsumer) {
          cacheContext(workInProgress2, unmaskedContext, context);
        }
        return instance;
      }
      function callComponentWillMount(workInProgress2, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount === "function") {
          instance.componentWillMount();
        }
        if (typeof instance.UNSAFE_componentWillMount === "function") {
          instance.UNSAFE_componentWillMount();
        }
        if (oldState !== instance.state) {
          {
            error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
          }
          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
      }
      function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
        var oldState = instance.state;
        if (typeof instance.componentWillReceiveProps === "function") {
          instance.componentWillReceiveProps(newProps, nextContext);
        }
        if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
          instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        }
        if (instance.state !== oldState) {
          {
            var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
              didWarnAboutStateAssignmentForComponent.add(componentName);
              error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
            }
          }
          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
      }
      function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
        {
          checkClassInstance(workInProgress2, ctor, newProps);
        }
        var instance = workInProgress2.stateNode;
        instance.props = newProps;
        instance.state = workInProgress2.memoizedState;
        instance.refs = emptyRefsObject;
        initializeUpdateQueue(workInProgress2);
        var contextType = ctor.contextType;
        if (typeof contextType === "object" && contextType !== null) {
          instance.context = readContext(contextType);
        } else {
          var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          instance.context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        {
          if (instance.state === newProps) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
              didWarnAboutDirectlyAssigningPropsToState.add(componentName);
              error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
            }
          }
          if (workInProgress2.mode & StrictLegacyMode) {
            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
          }
          {
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
          }
        }
        instance.state = workInProgress2.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
          instance.state = workInProgress2.memoizedState;
        }
        if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
          callComponentWillMount(workInProgress2, instance);
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          instance.state = workInProgress2.memoizedState;
        }
        if (typeof instance.componentDidMount === "function") {
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          workInProgress2.flags |= fiberFlags;
        }
      }
      function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
        var instance = workInProgress2.stateNode;
        var oldProps = workInProgress2.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === "object" && contextType !== null) {
          nextContext = readContext(contextType);
        } else {
          var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
          if (oldProps !== newProps || oldContext !== nextContext) {
            callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
          }
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress2.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
        newState = workInProgress2.memoizedState;
        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
          if (typeof instance.componentDidMount === "function") {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            workInProgress2.flags |= fiberFlags;
          }
          return false;
        }
        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
          newState = workInProgress2.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
          }
          if (typeof instance.componentDidMount === "function") {
            var _fiberFlags = Update;
            {
              _fiberFlags |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              _fiberFlags |= MountLayoutDev;
            }
            workInProgress2.flags |= _fiberFlags;
          }
        } else {
          if (typeof instance.componentDidMount === "function") {
            var _fiberFlags2 = Update;
            {
              _fiberFlags2 |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              _fiberFlags2 |= MountLayoutDev;
            }
            workInProgress2.flags |= _fiberFlags2;
          }
          workInProgress2.memoizedProps = newProps;
          workInProgress2.memoizedState = newState;
        }
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
      }
      function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
        var instance = workInProgress2.stateNode;
        cloneUpdateQueue(current2, workInProgress2);
        var unresolvedOldProps = workInProgress2.memoizedProps;
        var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
        instance.props = oldProps;
        var unresolvedNewProps = workInProgress2.pendingProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === "object" && contextType !== null) {
          nextContext = readContext(contextType);
        } else {
          var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
          if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
            callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
          }
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress2.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
        newState = workInProgress2.memoizedState;
        if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
          if (typeof instance.componentDidUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Update;
            }
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Snapshot;
            }
          }
          return false;
        }
        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
          newState = workInProgress2.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || enableLazyContextPropagation;
        if (shouldUpdate) {
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
            if (typeof instance.componentWillUpdate === "function") {
              instance.componentWillUpdate(newProps, newState, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillUpdate === "function") {
              instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
            }
          }
          if (typeof instance.componentDidUpdate === "function") {
            workInProgress2.flags |= Update;
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            workInProgress2.flags |= Snapshot;
          }
        } else {
          if (typeof instance.componentDidUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Update;
            }
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Snapshot;
            }
          }
          workInProgress2.memoizedProps = newProps;
          workInProgress2.memoizedState = newState;
        }
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
      }
      var didWarnAboutMaps;
      var didWarnAboutGenerators;
      var didWarnAboutStringRefs;
      var ownerHasKeyUseWarning;
      var ownerHasFunctionTypeWarning;
      var warnForMissingKey = function(child, returnFiber) {};
      {
        didWarnAboutMaps = false;
        didWarnAboutGenerators = false;
        didWarnAboutStringRefs = {};
        ownerHasKeyUseWarning = {};
        ownerHasFunctionTypeWarning = {};
        warnForMissingKey = function(child, returnFiber) {
          if (child === null || typeof child !== "object") {
            return;
          }
          if (!child._store || child._store.validated || child.key != null) {
            return;
          }
          if (typeof child._store !== "object") {
            throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
          }
          child._store.validated = true;
          var componentName = getComponentNameFromFiber(returnFiber) || "Component";
          if (ownerHasKeyUseWarning[componentName]) {
            return;
          }
          ownerHasKeyUseWarning[componentName] = true;
          error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
        };
      }
      function coerceRef(returnFiber, current2, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
          {
            if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (!didWarnAboutStringRefs[componentName]) {
                {
                  error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                }
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
          if (element._owner) {
            var owner = element._owner;
            var inst;
            if (owner) {
              var ownerFiber = owner;
              if (ownerFiber.tag !== ClassComponent) {
                throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
              }
              inst = ownerFiber.stateNode;
            }
            if (!inst) {
              throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
            }
            var resolvedInst = inst;
            {
              checkPropStringCoercion(mixedRef, "ref");
            }
            var stringRef = "" + mixedRef;
            if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
              return current2.ref;
            }
            var ref = function(value) {
              var refs = resolvedInst.refs;
              if (refs === emptyRefsObject) {
                refs = resolvedInst.refs = {};
              }
              if (value === null) {
                delete refs[stringRef];
              } else {
                refs[stringRef] = value;
              }
            };
            ref._stringRef = stringRef;
            return ref;
          } else {
            if (typeof mixedRef !== "string") {
              throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
            }
            if (!element._owner) {
              throw new Error("Element ref was specified as a string (" + mixedRef + `) but no owner was set. This could happen for one of the following reasons:
1. You may be adding a ref to a function component
2. You may be adding a ref to a component that was not created inside a component's render method
3. You have multiple copies of React loaded
See https://reactjs.org/link/refs-must-have-owner for more information.`);
            }
          }
        }
        return mixedRef;
      }
      function throwOnInvalidObjectType(returnFiber, newChild) {
        var childString = Object.prototype.toString.call(newChild);
        throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
      }
      function warnOnFunctionType(returnFiber) {
        {
          var componentName = getComponentNameFromFiber(returnFiber) || "Component";
          if (ownerHasFunctionTypeWarning[componentName]) {
            return;
          }
          ownerHasFunctionTypeWarning[componentName] = true;
          error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
        }
      }
      function resolveLazy(lazyType) {
        var payload = lazyType._payload;
        var init = lazyType._init;
        return init(payload);
      }
      function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
          if (!shouldTrackSideEffects) {
            return;
          }
          var deletions = returnFiber.deletions;
          if (deletions === null) {
            returnFiber.deletions = [childToDelete];
            returnFiber.flags |= ChildDeletion;
          } else {
            deletions.push(childToDelete);
          }
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
          if (!shouldTrackSideEffects) {
            return null;
          }
          var childToDelete = currentFirstChild;
          while (childToDelete !== null) {
            deleteChild(returnFiber, childToDelete);
            childToDelete = childToDelete.sibling;
          }
          return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
          var existingChildren = new Map;
          var existingChild = currentFirstChild;
          while (existingChild !== null) {
            if (existingChild.key !== null) {
              existingChildren.set(existingChild.key, existingChild);
            } else {
              existingChildren.set(existingChild.index, existingChild);
            }
            existingChild = existingChild.sibling;
          }
          return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
          var clone = createWorkInProgress(fiber, pendingProps);
          clone.index = 0;
          clone.sibling = null;
          return clone;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
          newFiber.index = newIndex;
          if (!shouldTrackSideEffects) {
            newFiber.flags |= Forked;
            return lastPlacedIndex;
          }
          var current2 = newFiber.alternate;
          if (current2 !== null) {
            var oldIndex = current2.index;
            if (oldIndex < lastPlacedIndex) {
              newFiber.flags |= Placement;
              return lastPlacedIndex;
            } else {
              return oldIndex;
            }
          } else {
            newFiber.flags |= Placement;
            return lastPlacedIndex;
          }
        }
        function placeSingleChild(newFiber) {
          if (shouldTrackSideEffects && newFiber.alternate === null) {
            newFiber.flags |= Placement;
          }
          return newFiber;
        }
        function updateTextNode(returnFiber, current2, textContent, lanes) {
          if (current2 === null || current2.tag !== HostText) {
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current2, textContent);
            existing.return = returnFiber;
            return existing;
          }
        }
        function updateElement(returnFiber, current2, element, lanes) {
          var elementType = element.type;
          if (elementType === REACT_FRAGMENT_TYPE) {
            return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
          }
          if (current2 !== null) {
            if (current2.elementType === elementType || isCompatibleFamilyForHotReloading(current2, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
              var existing = useFiber(current2, element.props);
              existing.ref = coerceRef(returnFiber, current2, element);
              existing.return = returnFiber;
              {
                existing._debugSource = element._source;
                existing._debugOwner = element._owner;
              }
              return existing;
            }
          }
          var created = createFiberFromElement(element, returnFiber.mode, lanes);
          created.ref = coerceRef(returnFiber, current2, element);
          created.return = returnFiber;
          return created;
        }
        function updatePortal(returnFiber, current2, portal, lanes) {
          if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current2, portal.children || []);
            existing.return = returnFiber;
            return existing;
          }
        }
        function updateFragment2(returnFiber, current2, fragment, lanes, key) {
          if (current2 === null || current2.tag !== Fragment32) {
            var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current2, fragment);
            existing.return = returnFiber;
            return existing;
          }
        }
        function createChild(returnFiber, newChild, lanes) {
          if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
            var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                _created.ref = coerceRef(returnFiber, null, newChild);
                _created.return = returnFiber;
                return _created;
              }
              case REACT_PORTAL_TYPE: {
                var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                _created2.return = returnFiber;
                return _created2;
              }
              case REACT_LAZY_TYPE: {
                var payload = newChild._payload;
                var init = newChild._init;
                return createChild(returnFiber, init(payload), lanes);
              }
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
              _created3.return = returnFiber;
              return _created3;
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
          var key = oldFiber !== null ? oldFiber.key : null;
          if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
            if (key !== null) {
              return null;
            }
            return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                if (newChild.key === key) {
                  return updateElement(returnFiber, oldFiber, newChild, lanes);
                } else {
                  return null;
                }
              }
              case REACT_PORTAL_TYPE: {
                if (newChild.key === key) {
                  return updatePortal(returnFiber, oldFiber, newChild, lanes);
                } else {
                  return null;
                }
              }
              case REACT_LAZY_TYPE: {
                var payload = newChild._payload;
                var init = newChild._init;
                return updateSlot(returnFiber, oldFiber, init(payload), lanes);
              }
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              if (key !== null) {
                return null;
              }
              return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
          if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
            var matchedFiber = existingChildren.get(newIdx) || null;
            return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                return updateElement(returnFiber, _matchedFiber, newChild, lanes);
              }
              case REACT_PORTAL_TYPE: {
                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
              }
              case REACT_LAZY_TYPE:
                var payload = newChild._payload;
                var init = newChild._init;
                return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              var _matchedFiber3 = existingChildren.get(newIdx) || null;
              return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }
        function warnOnInvalidKey(child, knownKeys, returnFiber) {
          {
            if (typeof child !== "object" || child === null) {
              return knownKeys;
            }
            switch (child.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                warnForMissingKey(child, returnFiber);
                var key = child.key;
                if (typeof key !== "string") {
                  break;
                }
                if (knownKeys === null) {
                  knownKeys = new Set;
                  knownKeys.add(key);
                  break;
                }
                if (!knownKeys.has(key)) {
                  knownKeys.add(key);
                  break;
                }
                error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be " + "duplicated and/or omitted — the behavior is unsupported and " + "could change in a future version.", key);
                break;
              case REACT_LAZY_TYPE:
                var payload = child._payload;
                var init = child._init;
                warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                break;
            }
          }
          return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
          {
            var knownKeys = null;
            for (var i2 = 0;i2 < newChildren.length; i2++) {
              var child = newChildren[i2];
              knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
          }
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;
          for (;oldFiber !== null && newIdx < newChildren.length; newIdx++) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }
            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }
              break;
            }
            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }
            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }
          if (newIdx === newChildren.length) {
            deleteRemainingChildren(returnFiber, oldFiber);
            if (getIsHydrating()) {
              var numberOfForks = newIdx;
              pushTreeFork(returnFiber, numberOfForks);
            }
            return resultingFirstChild;
          }
          if (oldFiber === null) {
            for (;newIdx < newChildren.length; newIdx++) {
              var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
              if (_newFiber === null) {
                continue;
              }
              lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber;
              } else {
                previousNewFiber.sibling = _newFiber;
              }
              previousNewFiber = _newFiber;
            }
            if (getIsHydrating()) {
              var _numberOfForks = newIdx;
              pushTreeFork(returnFiber, _numberOfForks);
            }
            return resultingFirstChild;
          }
          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
          for (;newIdx < newChildren.length; newIdx++) {
            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
            if (_newFiber2 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber2.alternate !== null) {
                  existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                }
              }
              lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber2;
              } else {
                previousNewFiber.sibling = _newFiber2;
              }
              previousNewFiber = _newFiber2;
            }
          }
          if (shouldTrackSideEffects) {
            existingChildren.forEach(function(child2) {
              return deleteChild(returnFiber, child2);
            });
          }
          if (getIsHydrating()) {
            var _numberOfForks2 = newIdx;
            pushTreeFork(returnFiber, _numberOfForks2);
          }
          return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
          var iteratorFn = getIteratorFn(newChildrenIterable);
          if (typeof iteratorFn !== "function") {
            throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
          }
          {
            if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
              if (!didWarnAboutGenerators) {
                error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
              }
              didWarnAboutGenerators = true;
            }
            if (newChildrenIterable.entries === iteratorFn) {
              if (!didWarnAboutMaps) {
                error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
              }
              didWarnAboutMaps = true;
            }
            var _newChildren = iteratorFn.call(newChildrenIterable);
            if (_newChildren) {
              var knownKeys = null;
              var _step = _newChildren.next();
              for (;!_step.done; _step = _newChildren.next()) {
                var child = _step.value;
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
          }
          var newChildren = iteratorFn.call(newChildrenIterable);
          if (newChildren == null) {
            throw new Error("An iterable object provided no iterator.");
          }
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;
          var step = newChildren.next();
          for (;oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }
            var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }
              break;
            }
            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }
            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }
          if (step.done) {
            deleteRemainingChildren(returnFiber, oldFiber);
            if (getIsHydrating()) {
              var numberOfForks = newIdx;
              pushTreeFork(returnFiber, numberOfForks);
            }
            return resultingFirstChild;
          }
          if (oldFiber === null) {
            for (;!step.done; newIdx++, step = newChildren.next()) {
              var _newFiber3 = createChild(returnFiber, step.value, lanes);
              if (_newFiber3 === null) {
                continue;
              }
              lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber3;
              } else {
                previousNewFiber.sibling = _newFiber3;
              }
              previousNewFiber = _newFiber3;
            }
            if (getIsHydrating()) {
              var _numberOfForks3 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks3);
            }
            return resultingFirstChild;
          }
          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
          for (;!step.done; newIdx++, step = newChildren.next()) {
            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
            if (_newFiber4 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber4.alternate !== null) {
                  existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                }
              }
              lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber4;
              } else {
                previousNewFiber.sibling = _newFiber4;
              }
              previousNewFiber = _newFiber4;
            }
          }
          if (shouldTrackSideEffects) {
            existingChildren.forEach(function(child2) {
              return deleteChild(returnFiber, child2);
            });
          }
          if (getIsHydrating()) {
            var _numberOfForks4 = newIdx;
            pushTreeFork(returnFiber, _numberOfForks4);
          }
          return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
          if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
            var existing = useFiber(currentFirstChild, textContent);
            existing.return = returnFiber;
            return existing;
          }
          deleteRemainingChildren(returnFiber, currentFirstChild);
          var created = createFiberFromText(textContent, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
          var key = element.key;
          var child = currentFirstChild;
          while (child !== null) {
            if (child.key === key) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                if (child.tag === Fragment32) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, element.props.children);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              } else {
                if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var _existing = useFiber(child, element.props);
                  _existing.ref = coerceRef(returnFiber, child, element);
                  _existing.return = returnFiber;
                  {
                    _existing._debugSource = element._source;
                    _existing._debugOwner = element._owner;
                  }
                  return _existing;
                }
              }
              deleteRemainingChildren(returnFiber, child);
              break;
            } else {
              deleteChild(returnFiber, child);
            }
            child = child.sibling;
          }
          if (element.type === REACT_FRAGMENT_TYPE) {
            var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
            created.return = returnFiber;
            return created;
          } else {
            var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
            _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
            _created4.return = returnFiber;
            return _created4;
          }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
          var key = portal.key;
          var child = currentFirstChild;
          while (child !== null) {
            if (child.key === key) {
              if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, portal.children || []);
                existing.return = returnFiber;
                return existing;
              } else {
                deleteRemainingChildren(returnFiber, child);
                break;
              }
            } else {
              deleteChild(returnFiber, child);
            }
            child = child.sibling;
          }
          var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        }
        function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
          var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
          if (isUnkeyedTopLevelFragment) {
            newChild = newChild.props.children;
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
              case REACT_PORTAL_TYPE:
                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
              case REACT_LAZY_TYPE:
                var payload = newChild._payload;
                var init = newChild._init;
                return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
            }
            if (isArray(newChild)) {
              return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
            }
            if (getIteratorFn(newChild)) {
              return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return reconcileChildFibers2;
      }
      var reconcileChildFibers = ChildReconciler(true);
      var mountChildFibers = ChildReconciler(false);
      function cloneChildFibers(current2, workInProgress2) {
        if (current2 !== null && workInProgress2.child !== current2.child) {
          throw new Error("Resuming work not yet implemented.");
        }
        if (workInProgress2.child === null) {
          return;
        }
        var currentChild = workInProgress2.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
        workInProgress2.child = newChild;
        newChild.return = workInProgress2;
        while (currentChild.sibling !== null) {
          currentChild = currentChild.sibling;
          newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
          newChild.return = workInProgress2;
        }
        newChild.sibling = null;
      }
      function resetChildFibers(workInProgress2, lanes) {
        var child = workInProgress2.child;
        while (child !== null) {
          resetWorkInProgress(child, lanes);
          child = child.sibling;
        }
      }
      var NO_CONTEXT = {};
      var contextStackCursor$1 = createCursor(NO_CONTEXT);
      var contextFiberStackCursor = createCursor(NO_CONTEXT);
      var rootInstanceStackCursor = createCursor(NO_CONTEXT);
      function requiredContext(c22) {
        if (c22 === NO_CONTEXT) {
          throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
        }
        return c22;
      }
      function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
      }
      function pushHostContainer(fiber, nextRootInstance) {
        push(rootInstanceStackCursor, nextRootInstance, fiber);
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance);
        pop(contextStackCursor$1, fiber);
        push(contextStackCursor$1, nextRootContext, fiber);
      }
      function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
      }
      function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
      }
      function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context, fiber.type);
        if (context === nextContext) {
          return;
        }
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, nextContext, fiber);
      }
      function popHostContext(fiber) {
        if (contextFiberStackCursor.current !== fiber) {
          return;
        }
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
      }
      var DefaultSuspenseContext = 0;
      var SubtreeSuspenseContextMask = 1;
      var InvisibleParentSuspenseContext = 1;
      var ForceSuspenseFallback = 2;
      var suspenseStackCursor = createCursor(DefaultSuspenseContext);
      function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
      }
      function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
      }
      function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
      }
      function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
      }
      function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
      }
      function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
      }
      function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
        var nextState = workInProgress2.memoizedState;
        if (nextState !== null) {
          if (nextState.dehydrated !== null) {
            return true;
          }
          return false;
        }
        var props = workInProgress2.memoizedProps;
        {
          return true;
        }
      }
      function findFirstSuspended(row) {
        var node2 = row;
        while (node2 !== null) {
          if (node2.tag === SuspenseComponent) {
            var state = node2.memoizedState;
            if (state !== null) {
              var dehydrated = state.dehydrated;
              if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                return node2;
              }
            }
          } else if (node2.tag === SuspenseListComponent && node2.memoizedProps.revealOrder !== undefined) {
            var didSuspend = (node2.flags & DidCapture) !== NoFlags;
            if (didSuspend) {
              return node2;
            }
          } else if (node2.child !== null) {
            node2.child.return = node2;
            node2 = node2.child;
            continue;
          }
          if (node2 === row) {
            return null;
          }
          while (node2.sibling === null) {
            if (node2.return === null || node2.return === row) {
              return null;
            }
            node2 = node2.return;
          }
          node2.sibling.return = node2.return;
          node2 = node2.sibling;
        }
        return null;
      }
      var NoFlags$1 = 0;
      var HasEffect = 1;
      var Insertion = 2;
      var Layout = 4;
      var Passive$1 = 8;
      var workInProgressSources = [];
      function resetWorkInProgressVersions() {
        for (var i2 = 0;i2 < workInProgressSources.length; i2++) {
          var mutableSource = workInProgressSources[i2];
          {
            mutableSource._workInProgressVersionPrimary = null;
          }
        }
        workInProgressSources.length = 0;
      }
      function registerMutableSourceForHydration(root2, mutableSource) {
        var getVersion = mutableSource._getVersion;
        var version = getVersion(mutableSource._source);
        if (root2.mutableSourceEagerHydrationData == null) {
          root2.mutableSourceEagerHydrationData = [mutableSource, version];
        } else {
          root2.mutableSourceEagerHydrationData.push(mutableSource, version);
        }
      }
      var { ReactCurrentDispatcher: ReactCurrentDispatcher$1, ReactCurrentBatchConfig: ReactCurrentBatchConfig$2 } = ReactSharedInternals;
      var didWarnAboutMismatchedHooksForComponent;
      var didWarnUncachedGetSnapshot;
      {
        didWarnAboutMismatchedHooksForComponent = new Set;
      }
      var renderLanes = NoLanes;
      var currentlyRenderingFiber$1 = null;
      var currentHook = null;
      var workInProgressHook = null;
      var didScheduleRenderPhaseUpdate = false;
      var didScheduleRenderPhaseUpdateDuringThisPass = false;
      var localIdCounter = 0;
      var globalClientIdCounter = 0;
      var RE_RENDER_LIMIT = 25;
      var currentHookNameInDev = null;
      var hookTypesDev = null;
      var hookTypesUpdateIndexDev = -1;
      var ignorePreviousDependencies = false;
      function mountHookTypesDev() {
        {
          var hookName = currentHookNameInDev;
          if (hookTypesDev === null) {
            hookTypesDev = [hookName];
          } else {
            hookTypesDev.push(hookName);
          }
        }
      }
      function updateHookTypesDev() {
        {
          var hookName = currentHookNameInDev;
          if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++;
            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
              warnOnHookMismatchInDev(hookName);
            }
          }
        }
      }
      function checkDepsAreArrayDev(deps) {
        {
          if (deps !== undefined && deps !== null && !isArray(deps)) {
            error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
          }
        }
      }
      function warnOnHookMismatchInDev(currentHookName) {
        {
          var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
          if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName);
            if (hookTypesDev !== null) {
              var table = "";
              var secondColumnStart = 30;
              for (var i2 = 0;i2 <= hookTypesUpdateIndexDev; i2++) {
                var oldHookName = hookTypesDev[i2];
                var newHookName = i2 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                var row = i2 + 1 + ". " + oldHookName;
                while (row.length < secondColumnStart) {
                  row += " ";
                }
                row += newHookName + `
`;
                table += row;
              }
              error(`React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks

   Previous render            Next render
   ------------------------------------------------------
%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
`, componentName, table);
            }
          }
        }
      }
      function throwInvalidHookError() {
        throw new Error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`);
      }
      function areHookInputsEqual(nextDeps, prevDeps) {
        {
          if (ignorePreviousDependencies) {
            return false;
          }
        }
        if (prevDeps === null) {
          {
            error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
          }
          return false;
        }
        {
          if (nextDeps.length !== prevDeps.length) {
            error(`The final argument passed to %s changed size between renders. The order and size of this array must remain constant.

Previous: %s
Incoming: %s`, currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
          }
        }
        for (var i2 = 0;i2 < prevDeps.length && i2 < nextDeps.length; i2++) {
          if (objectIs(nextDeps[i2], prevDeps[i2])) {
            continue;
          }
          return false;
        }
        return true;
      }
      function renderWithHooks(current2, workInProgress2, Component2, props, secondArg, nextRenderLanes) {
        renderLanes = nextRenderLanes;
        currentlyRenderingFiber$1 = workInProgress2;
        {
          hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
          hookTypesUpdateIndexDev = -1;
          ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
        }
        workInProgress2.memoizedState = null;
        workInProgress2.updateQueue = null;
        workInProgress2.lanes = NoLanes;
        {
          if (current2 !== null && current2.memoizedState !== null) {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
          } else if (hookTypesDev !== null) {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
          } else {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
          }
        }
        var children = Component2(props, secondArg);
        if (didScheduleRenderPhaseUpdateDuringThisPass) {
          var numberOfReRenders = 0;
          do {
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
            if (numberOfReRenders >= RE_RENDER_LIMIT) {
              throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
            }
            numberOfReRenders += 1;
            {
              ignorePreviousDependencies = false;
            }
            currentHook = null;
            workInProgressHook = null;
            workInProgress2.updateQueue = null;
            {
              hookTypesUpdateIndexDev = -1;
            }
            ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
            children = Component2(props, secondArg);
          } while (didScheduleRenderPhaseUpdateDuringThisPass);
        }
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        {
          workInProgress2._debugHookTypes = hookTypesDev;
        }
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        {
          currentHookNameInDev = null;
          hookTypesDev = null;
          hookTypesUpdateIndexDev = -1;
          if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && (current2.mode & ConcurrentMode) !== NoMode) {
            error("Internal React error: Expected static flag was missing. Please notify the React team.");
          }
        }
        didScheduleRenderPhaseUpdate = false;
        if (didRenderTooFewHooks) {
          throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        }
        return children;
      }
      function checkDidRenderIdHook() {
        var didRenderIdHook = localIdCounter !== 0;
        localIdCounter = 0;
        return didRenderIdHook;
      }
      function bailoutHooks(current2, workInProgress2, lanes) {
        workInProgress2.updateQueue = current2.updateQueue;
        if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
          workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
        } else {
          workInProgress2.flags &= ~(Passive | Update);
        }
        current2.lanes = removeLanes(current2.lanes, lanes);
      }
      function resetHooksAfterThrow() {
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        if (didScheduleRenderPhaseUpdate) {
          var hook = currentlyRenderingFiber$1.memoizedState;
          while (hook !== null) {
            var queue = hook.queue;
            if (queue !== null) {
              queue.pending = null;
            }
            hook = hook.next;
          }
          didScheduleRenderPhaseUpdate = false;
        }
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        {
          hookTypesDev = null;
          hookTypesUpdateIndexDev = -1;
          currentHookNameInDev = null;
          isUpdatingOpaqueValueInRenderPhase = false;
        }
        didScheduleRenderPhaseUpdateDuringThisPass = false;
        localIdCounter = 0;
      }
      function mountWorkInProgressHook() {
        var hook = {
          memoizedState: null,
          baseState: null,
          baseQueue: null,
          queue: null,
          next: null
        };
        if (workInProgressHook === null) {
          currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
        } else {
          workInProgressHook = workInProgressHook.next = hook;
        }
        return workInProgressHook;
      }
      function updateWorkInProgressHook() {
        var nextCurrentHook;
        if (currentHook === null) {
          var current2 = currentlyRenderingFiber$1.alternate;
          if (current2 !== null) {
            nextCurrentHook = current2.memoizedState;
          } else {
            nextCurrentHook = null;
          }
        } else {
          nextCurrentHook = currentHook.next;
        }
        var nextWorkInProgressHook;
        if (workInProgressHook === null) {
          nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
        } else {
          nextWorkInProgressHook = workInProgressHook.next;
        }
        if (nextWorkInProgressHook !== null) {
          workInProgressHook = nextWorkInProgressHook;
          nextWorkInProgressHook = workInProgressHook.next;
          currentHook = nextCurrentHook;
        } else {
          if (nextCurrentHook === null) {
            throw new Error("Rendered more hooks than during the previous render.");
          }
          currentHook = nextCurrentHook;
          var newHook = {
            memoizedState: currentHook.memoizedState,
            baseState: currentHook.baseState,
            baseQueue: currentHook.baseQueue,
            queue: currentHook.queue,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
          } else {
            workInProgressHook = workInProgressHook.next = newHook;
          }
        }
        return workInProgressHook;
      }
      function createFunctionComponentUpdateQueue() {
        return {
          lastEffect: null,
          stores: null
        };
      }
      function basicStateReducer(state, action) {
        return typeof action === "function" ? action(state) : action;
      }
      function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        var initialState;
        if (init !== undefined) {
          initialState = init(initialArg);
        } else {
          initialState = initialArg;
        }
        hook.memoizedState = hook.baseState = initialState;
        var queue = {
          pending: null,
          interleaved: null,
          lanes: NoLanes,
          dispatch: null,
          lastRenderedReducer: reducer,
          lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch];
      }
      function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (queue === null) {
          throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        }
        queue.lastRenderedReducer = reducer;
        var current2 = currentHook;
        var baseQueue = current2.baseQueue;
        var pendingQueue = queue.pending;
        if (pendingQueue !== null) {
          if (baseQueue !== null) {
            var baseFirst = baseQueue.next;
            var pendingFirst = pendingQueue.next;
            baseQueue.next = pendingFirst;
            pendingQueue.next = baseFirst;
          }
          {
            if (current2.baseQueue !== baseQueue) {
              error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
            }
          }
          current2.baseQueue = baseQueue = pendingQueue;
          queue.pending = null;
        }
        if (baseQueue !== null) {
          var first = baseQueue.next;
          var newState = current2.baseState;
          var newBaseState = null;
          var newBaseQueueFirst = null;
          var newBaseQueueLast = null;
          var update = first;
          do {
            var updateLane = update.lane;
            if (!isSubsetOfLanes(renderLanes, updateLane)) {
              var clone = {
                lane: updateLane,
                action: update.action,
                hasEagerState: update.hasEagerState,
                eagerState: update.eagerState,
                next: null
              };
              if (newBaseQueueLast === null) {
                newBaseQueueFirst = newBaseQueueLast = clone;
                newBaseState = newState;
              } else {
                newBaseQueueLast = newBaseQueueLast.next = clone;
              }
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
              markSkippedUpdateLanes(updateLane);
            } else {
              if (newBaseQueueLast !== null) {
                var _clone = {
                  lane: NoLane,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                };
                newBaseQueueLast = newBaseQueueLast.next = _clone;
              }
              if (update.hasEagerState) {
                newState = update.eagerState;
              } else {
                var action = update.action;
                newState = reducer(newState, action);
              }
            }
            update = update.next;
          } while (update !== null && update !== first);
          if (newBaseQueueLast === null) {
            newBaseState = newState;
          } else {
            newBaseQueueLast.next = newBaseQueueFirst;
          }
          if (!objectIs(newState, hook.memoizedState)) {
            markWorkInProgressReceivedUpdate();
          }
          hook.memoizedState = newState;
          hook.baseState = newBaseState;
          hook.baseQueue = newBaseQueueLast;
          queue.lastRenderedState = newState;
        }
        var lastInterleaved = queue.interleaved;
        if (lastInterleaved !== null) {
          var interleaved = lastInterleaved;
          do {
            var interleavedLane = interleaved.lane;
            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
            markSkippedUpdateLanes(interleavedLane);
            interleaved = interleaved.next;
          } while (interleaved !== lastInterleaved);
        } else if (baseQueue === null) {
          queue.lanes = NoLanes;
        }
        var dispatch = queue.dispatch;
        return [hook.memoizedState, dispatch];
      }
      function rerenderReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (queue === null) {
          throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        }
        queue.lastRenderedReducer = reducer;
        var dispatch = queue.dispatch;
        var lastRenderPhaseUpdate = queue.pending;
        var newState = hook.memoizedState;
        if (lastRenderPhaseUpdate !== null) {
          queue.pending = null;
          var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
          var update = firstRenderPhaseUpdate;
          do {
            var action = update.action;
            newState = reducer(newState, action);
            update = update.next;
          } while (update !== firstRenderPhaseUpdate);
          if (!objectIs(newState, hook.memoizedState)) {
            markWorkInProgressReceivedUpdate();
          }
          hook.memoizedState = newState;
          if (hook.baseQueue === null) {
            hook.baseState = newState;
          }
          queue.lastRenderedState = newState;
        }
        return [newState, dispatch];
      }
      function mountMutableSource(source, getSnapshot, subscribe) {
        {
          return;
        }
      }
      function updateMutableSource(source, getSnapshot, subscribe) {
        {
          return;
        }
      }
      function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1;
        var hook = mountWorkInProgressHook();
        var nextSnapshot;
        var isHydrating2 = getIsHydrating();
        if (isHydrating2) {
          if (getServerSnapshot === undefined) {
            throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
          }
          nextSnapshot = getServerSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              if (nextSnapshot !== getServerSnapshot()) {
                error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
        } else {
          nextSnapshot = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedSnapshot = getSnapshot();
              if (!objectIs(nextSnapshot, cachedSnapshot)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var root2 = getWorkInProgressRoot();
          if (root2 === null) {
            throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
          }
          if (!includesBlockingLane(root2, renderLanes)) {
            pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
          }
        }
        hook.memoizedState = nextSnapshot;
        var inst = {
          value: nextSnapshot,
          getSnapshot
        };
        hook.queue = inst;
        mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
        fiber.flags |= Passive;
        pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);
        return nextSnapshot;
      }
      function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1;
        var hook = updateWorkInProgressHook();
        var nextSnapshot = getSnapshot();
        {
          if (!didWarnUncachedGetSnapshot) {
            var cachedSnapshot = getSnapshot();
            if (!objectIs(nextSnapshot, cachedSnapshot)) {
              error("The result of getSnapshot should be cached to avoid an infinite loop");
              didWarnUncachedGetSnapshot = true;
            }
          }
        }
        var prevSnapshot = hook.memoizedState;
        var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
        if (snapshotChanged) {
          hook.memoizedState = nextSnapshot;
          markWorkInProgressReceivedUpdate();
        }
        var inst = hook.queue;
        updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
        if (inst.getSnapshot !== getSnapshot || snapshotChanged || workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
          fiber.flags |= Passive;
          pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);
          var root2 = getWorkInProgressRoot();
          if (root2 === null) {
            throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
          }
          if (!includesBlockingLane(root2, renderLanes)) {
            pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
          }
        }
        return nextSnapshot;
      }
      function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
        fiber.flags |= StoreConsistency;
        var check = {
          getSnapshot,
          value: renderedSnapshot
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
          componentUpdateQueue = createFunctionComponentUpdateQueue();
          currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
          componentUpdateQueue.stores = [check];
        } else {
          var stores = componentUpdateQueue.stores;
          if (stores === null) {
            componentUpdateQueue.stores = [check];
          } else {
            stores.push(check);
          }
        }
      }
      function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
        inst.value = nextSnapshot;
        inst.getSnapshot = getSnapshot;
        if (checkIfSnapshotChanged(inst)) {
          forceStoreRerender(fiber);
        }
      }
      function subscribeToStore(fiber, inst, subscribe) {
        var handleStoreChange = function() {
          if (checkIfSnapshotChanged(inst)) {
            forceStoreRerender(fiber);
          }
        };
        return subscribe(handleStoreChange);
      }
      function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot;
        var prevValue = inst.value;
        try {
          var nextValue = latestGetSnapshot();
          return !objectIs(prevValue, nextValue);
        } catch (error2) {
          return true;
        }
      }
      function forceStoreRerender(fiber) {
        var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root2 !== null) {
          scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
        }
      }
      function mountState(initialState) {
        var hook = mountWorkInProgressHook();
        if (typeof initialState === "function") {
          initialState = initialState();
        }
        hook.memoizedState = hook.baseState = initialState;
        var queue = {
          pending: null,
          interleaved: null,
          lanes: NoLanes,
          dispatch: null,
          lastRenderedReducer: basicStateReducer,
          lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch];
      }
      function updateState(initialState) {
        return updateReducer(basicStateReducer);
      }
      function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer);
      }
      function pushEffect(tag, create, destroy, deps) {
        var effect = {
          tag,
          create,
          destroy,
          deps,
          next: null
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
          componentUpdateQueue = createFunctionComponentUpdateQueue();
          currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
          componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
          var lastEffect = componentUpdateQueue.lastEffect;
          if (lastEffect === null) {
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var firstEffect = lastEffect.next;
            lastEffect.next = effect;
            effect.next = firstEffect;
            componentUpdateQueue.lastEffect = effect;
          }
        }
        return effect;
      }
      function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        {
          var _ref2 = {
            current: initialValue
          };
          hook.memoizedState = _ref2;
          return _ref2;
        }
      }
      function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
      }
      function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
      }
      function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var destroy = undefined;
        if (currentHook !== null) {
          var prevEffect = currentHook.memoizedState;
          destroy = prevEffect.destroy;
          if (nextDeps !== null) {
            var prevDeps = prevEffect.deps;
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
              return;
            }
          }
        }
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
      }
      function mountEffect(create, deps) {
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
          return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
        } else {
          return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
        }
      }
      function updateEffect(create, deps) {
        return updateEffectImpl(Passive, Passive$1, create, deps);
      }
      function mountInsertionEffect(create, deps) {
        return mountEffectImpl(Update, Insertion, create, deps);
      }
      function updateInsertionEffect(create, deps) {
        return updateEffectImpl(Update, Insertion, create, deps);
      }
      function mountLayoutEffect(create, deps) {
        var fiberFlags = Update;
        {
          fiberFlags |= LayoutStatic;
        }
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
          fiberFlags |= MountLayoutDev;
        }
        return mountEffectImpl(fiberFlags, Layout, create, deps);
      }
      function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update, Layout, create, deps);
      }
      function imperativeHandleEffect(create, ref) {
        if (typeof ref === "function") {
          var refCallback = ref;
          var _inst = create();
          refCallback(_inst);
          return function() {
            refCallback(null);
          };
        } else if (ref !== null && ref !== undefined) {
          var refObject = ref;
          {
            if (!refObject.hasOwnProperty("current")) {
              error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
            }
          }
          var _inst2 = create();
          refObject.current = _inst2;
          return function() {
            refObject.current = null;
          };
        }
      }
      function mountImperativeHandle(ref, create, deps) {
        {
          if (typeof create !== "function") {
            error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
          }
        }
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
        var fiberFlags = Update;
        {
          fiberFlags |= LayoutStatic;
        }
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
          fiberFlags |= MountLayoutDev;
        }
        return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
      }
      function updateImperativeHandle(ref, create, deps) {
        {
          if (typeof create !== "function") {
            error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
          }
        }
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
        return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
      }
      function mountDebugValue(value, formatterFn) {}
      var updateDebugValue = mountDebugValue;
      function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        hook.memoizedState = [callback, nextDeps];
        return callback;
      }
      function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
          if (nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0];
            }
          }
        }
        hook.memoizedState = [callback, nextDeps];
        return callback;
      }
      function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var nextValue = nextCreate();
        hook.memoizedState = [nextValue, nextDeps];
        return nextValue;
      }
      function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
          if (nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0];
            }
          }
        }
        var nextValue = nextCreate();
        hook.memoizedState = [nextValue, nextDeps];
        return nextValue;
      }
      function mountDeferredValue(value) {
        var hook = mountWorkInProgressHook();
        hook.memoizedState = value;
        return value;
      }
      function updateDeferredValue(value) {
        var hook = updateWorkInProgressHook();
        var resolvedCurrentHook = currentHook;
        var prevValue = resolvedCurrentHook.memoizedState;
        return updateDeferredValueImpl(hook, prevValue, value);
      }
      function rerenderDeferredValue(value) {
        var hook = updateWorkInProgressHook();
        if (currentHook === null) {
          hook.memoizedState = value;
          return value;
        } else {
          var prevValue = currentHook.memoizedState;
          return updateDeferredValueImpl(hook, prevValue, value);
        }
      }
      function updateDeferredValueImpl(hook, prevValue, value) {
        var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
        if (shouldDeferValue) {
          if (!objectIs(value, prevValue)) {
            var deferredLane = claimNextTransitionLane();
            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
            markSkippedUpdateLanes(deferredLane);
            hook.baseState = true;
          }
          return prevValue;
        } else {
          if (hook.baseState) {
            hook.baseState = false;
            markWorkInProgressReceivedUpdate();
          }
          hook.memoizedState = value;
          return value;
        }
      }
      function startTransition(setPending, callback, options2) {
        var previousPriority = getCurrentUpdatePriority();
        setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
        setPending(true);
        var prevTransition = ReactCurrentBatchConfig$2.transition;
        ReactCurrentBatchConfig$2.transition = {};
        var currentTransition = ReactCurrentBatchConfig$2.transition;
        {
          ReactCurrentBatchConfig$2.transition._updatedFibers = new Set;
        }
        try {
          setPending(false);
          callback();
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$2.transition = prevTransition;
          {
            if (prevTransition === null && currentTransition._updatedFibers) {
              var updatedFibersCount = currentTransition._updatedFibers.size;
              if (updatedFibersCount > 10) {
                warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
              }
              currentTransition._updatedFibers.clear();
            }
          }
        }
      }
      function mountTransition() {
        var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
        var start = startTransition.bind(null, setPending);
        var hook = mountWorkInProgressHook();
        hook.memoizedState = start;
        return [isPending, start];
      }
      function updateTransition() {
        var _updateState = updateState(), isPending = _updateState[0];
        var hook = updateWorkInProgressHook();
        var start = hook.memoizedState;
        return [isPending, start];
      }
      function rerenderTransition() {
        var _rerenderState = rerenderState(), isPending = _rerenderState[0];
        var hook = updateWorkInProgressHook();
        var start = hook.memoizedState;
        return [isPending, start];
      }
      var isUpdatingOpaqueValueInRenderPhase = false;
      function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
        {
          return isUpdatingOpaqueValueInRenderPhase;
        }
      }
      function mountId() {
        var hook = mountWorkInProgressHook();
        var root2 = getWorkInProgressRoot();
        var identifierPrefix = root2.identifierPrefix;
        var id2;
        if (getIsHydrating()) {
          var treeId = getTreeId();
          id2 = ":" + identifierPrefix + "R" + treeId;
          var localId = localIdCounter++;
          if (localId > 0) {
            id2 += "H" + localId.toString(32);
          }
          id2 += ":";
        } else {
          var globalClientId = globalClientIdCounter++;
          id2 = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
        }
        hook.memoizedState = id2;
        return id2;
      }
      function updateId() {
        var hook = updateWorkInProgressHook();
        var id2 = hook.memoizedState;
        return id2;
      }
      function dispatchReducerAction(fiber, queue, action) {
        {
          if (typeof arguments[3] === "function") {
            error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
          }
        }
        var lane = requestUpdateLane(fiber);
        var update = {
          lane,
          action,
          hasEagerState: false,
          eagerState: null,
          next: null
        };
        if (isRenderPhaseUpdate(fiber)) {
          enqueueRenderPhaseUpdate(queue, update);
        } else {
          var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            entangleTransitionUpdate(root2, queue, lane);
          }
        }
        markUpdateInDevTools(fiber, lane);
      }
      function dispatchSetState(fiber, queue, action) {
        {
          if (typeof arguments[3] === "function") {
            error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
          }
        }
        var lane = requestUpdateLane(fiber);
        var update = {
          lane,
          action,
          hasEagerState: false,
          eagerState: null,
          next: null
        };
        if (isRenderPhaseUpdate(fiber)) {
          enqueueRenderPhaseUpdate(queue, update);
        } else {
          var alternate = fiber.alternate;
          if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
            var lastRenderedReducer = queue.lastRenderedReducer;
            if (lastRenderedReducer !== null) {
              var prevDispatcher;
              {
                prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              }
              try {
                var currentState = queue.lastRenderedState;
                var eagerState = lastRenderedReducer(currentState, action);
                update.hasEagerState = true;
                update.eagerState = eagerState;
                if (objectIs(eagerState, currentState)) {
                  enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                  return;
                }
              } catch (error2) {} finally {
                {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }
            }
          }
          var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            entangleTransitionUpdate(root2, queue, lane);
          }
        }
        markUpdateInDevTools(fiber, lane);
      }
      function isRenderPhaseUpdate(fiber) {
        var alternate = fiber.alternate;
        return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
      }
      function enqueueRenderPhaseUpdate(queue, update) {
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
        var pending = queue.pending;
        if (pending === null) {
          update.next = update;
        } else {
          update.next = pending.next;
          pending.next = update;
        }
        queue.pending = update;
      }
      function entangleTransitionUpdate(root2, queue, lane) {
        if (isTransitionLane(lane)) {
          var queueLanes = queue.lanes;
          queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
          var newQueueLanes = mergeLanes(queueLanes, lane);
          queue.lanes = newQueueLanes;
          markRootEntangled(root2, newQueueLanes);
        }
      }
      function markUpdateInDevTools(fiber, lane, action) {
        {
          markStateUpdateScheduled(fiber, lane);
        }
      }
      var ContextOnlyDispatcher = {
        readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useInsertionEffect: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useSyncExternalStore: throwInvalidHookError,
        useId: throwInvalidHookError,
        unstable_isNewReconciler: enableNewReconciler
      };
      var HooksDispatcherOnMountInDEV = null;
      var HooksDispatcherOnMountWithHookTypesInDEV = null;
      var HooksDispatcherOnUpdateInDEV = null;
      var HooksDispatcherOnRerenderInDEV = null;
      var InvalidNestedHooksDispatcherOnMountInDEV = null;
      var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
      var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
      {
        var warnInvalidContextAccess = function() {
          error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        };
        var warnInvalidHookAccess = function() {
          error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
        };
        HooksDispatcherOnMountInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            mountHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            mountHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            mountHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            mountHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            mountHookTypesDev();
            return mountMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            mountHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            mountHookTypesDev();
            return mountId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        HooksDispatcherOnMountWithHookTypesInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return mountEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return mountInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return mountMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return mountId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        HooksDispatcherOnUpdateInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return updateDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return updateTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return updateMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        HooksDispatcherOnRerenderInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return rerenderState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return rerenderDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return rerenderTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return updateMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        InvalidNestedHooksDispatcherOnMountInDEV = {
          readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        InvalidNestedHooksDispatcherOnUpdateInDEV = {
          readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        InvalidNestedHooksDispatcherOnRerenderInDEV = {
          readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return rerenderState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
      }
      var now$1 = Scheduler.unstable_now;
      var commitTime = 0;
      var layoutEffectStartTime = -1;
      var profilerStartTime = -1;
      var passiveEffectStartTime = -1;
      var currentUpdateIsNested = false;
      var nestedUpdateScheduled = false;
      function isCurrentUpdateNested() {
        return currentUpdateIsNested;
      }
      function markNestedUpdateScheduled() {
        {
          nestedUpdateScheduled = true;
        }
      }
      function resetNestedUpdateFlag() {
        {
          currentUpdateIsNested = false;
          nestedUpdateScheduled = false;
        }
      }
      function syncNestedUpdateFlag() {
        {
          currentUpdateIsNested = nestedUpdateScheduled;
          nestedUpdateScheduled = false;
        }
      }
      function getCommitTime() {
        return commitTime;
      }
      function recordCommitTime() {
        commitTime = now$1();
      }
      function startProfilerTimer(fiber) {
        profilerStartTime = now$1();
        if (fiber.actualStartTime < 0) {
          fiber.actualStartTime = now$1();
        }
      }
      function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
      }
      function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
          var elapsedTime = now$1() - profilerStartTime;
          fiber.actualDuration += elapsedTime;
          if (overrideBaseTime) {
            fiber.selfBaseDuration = elapsedTime;
          }
          profilerStartTime = -1;
        }
      }
      function recordLayoutEffectDuration(fiber) {
        if (layoutEffectStartTime >= 0) {
          var elapsedTime = now$1() - layoutEffectStartTime;
          layoutEffectStartTime = -1;
          var parentFiber = fiber.return;
          while (parentFiber !== null) {
            switch (parentFiber.tag) {
              case HostRoot:
                var root2 = parentFiber.stateNode;
                root2.effectDuration += elapsedTime;
                return;
              case Profiler:
                var parentStateNode = parentFiber.stateNode;
                parentStateNode.effectDuration += elapsedTime;
                return;
            }
            parentFiber = parentFiber.return;
          }
        }
      }
      function recordPassiveEffectDuration(fiber) {
        if (passiveEffectStartTime >= 0) {
          var elapsedTime = now$1() - passiveEffectStartTime;
          passiveEffectStartTime = -1;
          var parentFiber = fiber.return;
          while (parentFiber !== null) {
            switch (parentFiber.tag) {
              case HostRoot:
                var root2 = parentFiber.stateNode;
                if (root2 !== null) {
                  root2.passiveEffectDuration += elapsedTime;
                }
                return;
              case Profiler:
                var parentStateNode = parentFiber.stateNode;
                if (parentStateNode !== null) {
                  parentStateNode.passiveEffectDuration += elapsedTime;
                }
                return;
            }
            parentFiber = parentFiber.return;
          }
        }
      }
      function startLayoutEffectTimer() {
        layoutEffectStartTime = now$1();
      }
      function startPassiveEffectTimer() {
        passiveEffectStartTime = now$1();
      }
      function transferActualDuration(fiber) {
        var child = fiber.child;
        while (child) {
          fiber.actualDuration += child.actualDuration;
          child = child.sibling;
        }
      }
      function createCapturedValueAtFiber(value, source) {
        return {
          value,
          source,
          stack: getStackByFiberInDevAndProd(source),
          digest: null
        };
      }
      function createCapturedValue(value, digest, stack) {
        return {
          value,
          source: null,
          stack: stack != null ? stack : null,
          digest: digest != null ? digest : null
        };
      }
      function showErrorDialog(boundary, errorInfo) {
        return true;
      }
      function logCapturedError(boundary, errorInfo) {
        try {
          var logError = showErrorDialog(boundary, errorInfo);
          if (logError === false) {
            return;
          }
          var error2 = errorInfo.value;
          if (true) {
            var source = errorInfo.source;
            var stack = errorInfo.stack;
            var componentStack = stack !== null ? stack : "";
            if (error2 != null && error2._suppressLogging) {
              if (boundary.tag === ClassComponent) {
                return;
              }
              console["error"](error2);
            }
            var componentName = source ? getComponentNameFromFiber(source) : null;
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
            var errorBoundaryMessage;
            if (boundary.tag === HostRoot) {
              errorBoundaryMessage = `Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.`;
            } else {
              var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
              errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            }
            var combinedMessage = componentNameMessage + `
` + componentStack + `

` + ("" + errorBoundaryMessage);
            console["error"](combinedMessage);
          } else {}
        } catch (e3) {
          setTimeout(function() {
            throw e3;
          });
        }
      }
      var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
      function createRootErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        update.payload = {
          element: null
        };
        var error2 = errorInfo.value;
        update.callback = function() {
          onUncaughtError(error2);
          logCapturedError(fiber, errorInfo);
        };
        return update;
      }
      function createClassErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError === "function") {
          var error$1 = errorInfo.value;
          update.payload = function() {
            return getDerivedStateFromError(error$1);
          };
          update.callback = function() {
            {
              markFailedErrorBoundaryForHotReloading(fiber);
            }
            logCapturedError(fiber, errorInfo);
          };
        }
        var inst = fiber.stateNode;
        if (inst !== null && typeof inst.componentDidCatch === "function") {
          update.callback = function callback() {
            {
              markFailedErrorBoundaryForHotReloading(fiber);
            }
            logCapturedError(fiber, errorInfo);
            if (typeof getDerivedStateFromError !== "function") {
              markLegacyErrorBoundaryAsFailed(this);
            }
            var error$12 = errorInfo.value;
            var stack = errorInfo.stack;
            this.componentDidCatch(error$12, {
              componentStack: stack !== null ? stack : ""
            });
            {
              if (typeof getDerivedStateFromError !== "function") {
                if (!includesSomeLane(fiber.lanes, SyncLane)) {
                  error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                }
              }
            }
          };
        }
        return update;
      }
      function attachPingListener(root2, wakeable, lanes) {
        var pingCache = root2.pingCache;
        var threadIDs;
        if (pingCache === null) {
          pingCache = root2.pingCache = new PossiblyWeakMap$1;
          threadIDs = new Set;
          pingCache.set(wakeable, threadIDs);
        } else {
          threadIDs = pingCache.get(wakeable);
          if (threadIDs === undefined) {
            threadIDs = new Set;
            pingCache.set(wakeable, threadIDs);
          }
        }
        if (!threadIDs.has(lanes)) {
          threadIDs.add(lanes);
          var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
          {
            if (isDevToolsPresent) {
              restorePendingUpdaters(root2, lanes);
            }
          }
          wakeable.then(ping, ping);
        }
      }
      function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
        var wakeables = suspenseBoundary.updateQueue;
        if (wakeables === null) {
          var updateQueue = new Set;
          updateQueue.add(wakeable);
          suspenseBoundary.updateQueue = updateQueue;
        } else {
          wakeables.add(wakeable);
        }
      }
      function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
        var tag = sourceFiber.tag;
        if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
          var currentSource = sourceFiber.alternate;
          if (currentSource) {
            sourceFiber.updateQueue = currentSource.updateQueue;
            sourceFiber.memoizedState = currentSource.memoizedState;
            sourceFiber.lanes = currentSource.lanes;
          } else {
            sourceFiber.updateQueue = null;
            sourceFiber.memoizedState = null;
          }
        }
      }
      function getNearestSuspenseBoundaryToCapture(returnFiber) {
        var node2 = returnFiber;
        do {
          if (node2.tag === SuspenseComponent && shouldCaptureSuspense(node2)) {
            return node2;
          }
          node2 = node2.return;
        } while (node2 !== null);
        return null;
      }
      function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
        if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
          if (suspenseBoundary === returnFiber) {
            suspenseBoundary.flags |= ShouldCapture;
          } else {
            suspenseBoundary.flags |= DidCapture;
            sourceFiber.flags |= ForceUpdateForLegacySuspense;
            sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
            if (sourceFiber.tag === ClassComponent) {
              var currentSourceFiber = sourceFiber.alternate;
              if (currentSourceFiber === null) {
                sourceFiber.tag = IncompleteClassComponent;
              } else {
                var update = createUpdate(NoTimestamp, SyncLane);
                update.tag = ForceUpdate;
                enqueueUpdate(sourceFiber, update, SyncLane);
              }
            }
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
          }
          return suspenseBoundary;
        }
        suspenseBoundary.flags |= ShouldCapture;
        suspenseBoundary.lanes = rootRenderLanes;
        return suspenseBoundary;
      }
      function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
        sourceFiber.flags |= Incomplete;
        {
          if (isDevToolsPresent) {
            restorePendingUpdaters(root2, rootRenderLanes);
          }
        }
        if (value !== null && typeof value === "object" && typeof value.then === "function") {
          var wakeable = value;
          resetSuspendedComponent(sourceFiber);
          {
            if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
              markDidThrowWhileHydratingDEV();
            }
          }
          var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
          if (suspenseBoundary !== null) {
            suspenseBoundary.flags &= ~ForceClientRender;
            markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
            if (suspenseBoundary.mode & ConcurrentMode) {
              attachPingListener(root2, wakeable, rootRenderLanes);
            }
            attachRetryListener(suspenseBoundary, root2, wakeable);
            return;
          } else {
            if (!includesSyncLane(rootRenderLanes)) {
              attachPingListener(root2, wakeable, rootRenderLanes);
              renderDidSuspendDelayIfPossible();
              return;
            }
            var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
            value = uncaughtSuspenseError;
          }
        } else {
          if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
            markDidThrowWhileHydratingDEV();
            var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
            if (_suspenseBoundary !== null) {
              if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                _suspenseBoundary.flags |= ForceClientRender;
              }
              markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
              queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
              return;
            }
          }
        }
        value = createCapturedValueAtFiber(value, sourceFiber);
        renderDidError(value);
        var workInProgress2 = returnFiber;
        do {
          switch (workInProgress2.tag) {
            case HostRoot: {
              var _errorInfo = value;
              workInProgress2.flags |= ShouldCapture;
              var lane = pickArbitraryLane(rootRenderLanes);
              workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
              var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
              enqueueCapturedUpdate(workInProgress2, update);
              return;
            }
            case ClassComponent:
              var errorInfo = value;
              var ctor = workInProgress2.type;
              var instance = workInProgress2.stateNode;
              if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                workInProgress2.flags |= ShouldCapture;
                var _lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                enqueueCapturedUpdate(workInProgress2, _update);
                return;
              }
              break;
          }
          workInProgress2 = workInProgress2.return;
        } while (workInProgress2 !== null);
      }
      function getSuspendedCache() {
        {
          return null;
        }
      }
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
      var didReceiveUpdate = false;
      var didWarnAboutBadClass;
      var didWarnAboutModulePatternComponent;
      var didWarnAboutContextTypeOnFunctionComponent;
      var didWarnAboutGetDerivedStateOnFunctionComponent;
      var didWarnAboutFunctionRefs;
      var didWarnAboutReassigningProps;
      var didWarnAboutRevealOrder;
      var didWarnAboutTailOptions;
      {
        didWarnAboutBadClass = {};
        didWarnAboutModulePatternComponent = {};
        didWarnAboutContextTypeOnFunctionComponent = {};
        didWarnAboutGetDerivedStateOnFunctionComponent = {};
        didWarnAboutFunctionRefs = {};
        didWarnAboutReassigningProps = false;
        didWarnAboutRevealOrder = {};
        didWarnAboutTailOptions = {};
      }
      function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
        if (current2 === null) {
          workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        } else {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
        }
      }
      function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
        workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
        workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
      }
      function updateForwardRef(current2, workInProgress2, Component2, nextProps, renderLanes2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component2.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component2));
            }
          }
        }
        var render2 = Component2.render;
        var ref = workInProgress2.ref;
        var nextChildren;
        var hasId;
        prepareToReadContext(workInProgress2, renderLanes2);
        {
          markComponentRenderStarted(workInProgress2);
        }
        {
          ReactCurrentOwner$1.current = workInProgress2;
          setIsRendering(true);
          nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
          hasId = checkDidRenderIdHook();
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
        if (current2 !== null && !didReceiveUpdate) {
          bailoutHooks(current2, workInProgress2, renderLanes2);
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        if (getIsHydrating() && hasId) {
          pushMaterializedTreeId(workInProgress2);
        }
        workInProgress2.flags |= PerformedWork;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateMemoComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
        if (current2 === null) {
          var type = Component2.type;
          if (isSimpleFunctionComponent(type) && Component2.compare === null && Component2.defaultProps === undefined) {
            var resolvedType = type;
            {
              resolvedType = resolveFunctionForHotReloading(type);
            }
            workInProgress2.tag = SimpleMemoComponent;
            workInProgress2.type = resolvedType;
            {
              validateFunctionComponentInDev(workInProgress2, type);
            }
            return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
          }
          {
            var innerPropTypes = type.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(type));
            }
          }
          var child = createFiberFromTypeAndProps(Component2.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
          child.ref = workInProgress2.ref;
          child.return = workInProgress2;
          workInProgress2.child = child;
          return child;
        }
        {
          var _type = Component2.type;
          var _innerPropTypes = _type.propTypes;
          if (_innerPropTypes) {
            checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentNameFromType(_type));
          }
        }
        var currentChild = current2.child;
        var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
        if (!hasScheduledUpdateOrContext) {
          var prevProps = currentChild.memoizedProps;
          var compare = Component2.compare;
          compare = compare !== null ? compare : shallowEqual;
          if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
        }
        workInProgress2.flags |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        newChild.ref = workInProgress2.ref;
        newChild.return = workInProgress2;
        workInProgress2.child = newChild;
        return newChild;
      }
      function updateSimpleMemoComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var outerMemoType = workInProgress2.elementType;
            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
              var lazyComponent = outerMemoType;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                outerMemoType = init(payload);
              } catch (x32) {
                outerMemoType = null;
              }
              var outerPropTypes = outerMemoType && outerMemoType.propTypes;
              if (outerPropTypes) {
                checkPropTypes(outerPropTypes, nextProps, "prop", getComponentNameFromType(outerMemoType));
              }
            }
          }
        }
        if (current2 !== null) {
          var prevProps = current2.memoizedProps;
          if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
            didReceiveUpdate = false;
            workInProgress2.pendingProps = nextProps = prevProps;
            if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
              workInProgress2.lanes = current2.lanes;
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
              didReceiveUpdate = true;
            }
          }
        }
        return updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2);
      }
      function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps;
        var nextChildren = nextProps.children;
        var prevState = current2 !== null ? current2.memoizedState : null;
        if (nextProps.mode === "hidden" || enableLegacyHidden) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            var nextState = {
              baseLanes: NoLanes,
              cachePool: null,
              transitions: null
            };
            workInProgress2.memoizedState = nextState;
            pushRenderLanes(workInProgress2, renderLanes2);
          } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
            var spawnedCachePool = null;
            var nextBaseLanes;
            if (prevState !== null) {
              var prevBaseLanes = prevState.baseLanes;
              nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
            } else {
              nextBaseLanes = renderLanes2;
            }
            workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
            var _nextState = {
              baseLanes: nextBaseLanes,
              cachePool: spawnedCachePool,
              transitions: null
            };
            workInProgress2.memoizedState = _nextState;
            workInProgress2.updateQueue = null;
            pushRenderLanes(workInProgress2, nextBaseLanes);
            return null;
          } else {
            var _nextState2 = {
              baseLanes: NoLanes,
              cachePool: null,
              transitions: null
            };
            workInProgress2.memoizedState = _nextState2;
            var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
            pushRenderLanes(workInProgress2, subtreeRenderLanes2);
          }
        } else {
          var _subtreeRenderLanes;
          if (prevState !== null) {
            _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
            workInProgress2.memoizedState = null;
          } else {
            _subtreeRenderLanes = renderLanes2;
          }
          pushRenderLanes(workInProgress2, _subtreeRenderLanes);
        }
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateFragment(current2, workInProgress2, renderLanes2) {
        var nextChildren = workInProgress2.pendingProps;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateMode(current2, workInProgress2, renderLanes2) {
        var nextChildren = workInProgress2.pendingProps.children;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateProfiler(current2, workInProgress2, renderLanes2) {
        {
          workInProgress2.flags |= Update;
          {
            var stateNode = workInProgress2.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }
        }
        var nextProps = workInProgress2.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function markRef(current2, workInProgress2) {
        var ref = workInProgress2.ref;
        if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
          workInProgress2.flags |= Ref;
          {
            workInProgress2.flags |= RefStatic;
          }
        }
      }
      function updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component2.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component2));
            }
          }
        }
        var context;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, true);
          context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        var nextChildren;
        var hasId;
        prepareToReadContext(workInProgress2, renderLanes2);
        {
          markComponentRenderStarted(workInProgress2);
        }
        {
          ReactCurrentOwner$1.current = workInProgress2;
          setIsRendering(true);
          nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
          hasId = checkDidRenderIdHook();
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
        if (current2 !== null && !didReceiveUpdate) {
          bailoutHooks(current2, workInProgress2, renderLanes2);
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        if (getIsHydrating() && hasId) {
          pushMaterializedTreeId(workInProgress2);
        }
        workInProgress2.flags |= PerformedWork;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateClassComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
        {
          switch (shouldError(workInProgress2)) {
            case false: {
              var _instance = workInProgress2.stateNode;
              var ctor = workInProgress2.type;
              var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
              var state = tempInstance.state;
              _instance.updater.enqueueSetState(_instance, state, null);
              break;
            }
            case true: {
              workInProgress2.flags |= DidCapture;
              workInProgress2.flags |= ShouldCapture;
              var error$1 = new Error("Simulated error coming from DevTools");
              var lane = pickArbitraryLane(renderLanes2);
              workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
              var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
              enqueueCapturedUpdate(workInProgress2, update);
              break;
            }
          }
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component2.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component2));
            }
          }
        }
        var hasContext;
        if (isContextProvider(Component2)) {
          hasContext = true;
          pushContextProvider(workInProgress2);
        } else {
          hasContext = false;
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        var instance = workInProgress2.stateNode;
        var shouldUpdate;
        if (instance === null) {
          resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
          constructClassInstance(workInProgress2, Component2, nextProps);
          mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
          shouldUpdate = true;
        } else if (current2 === null) {
          shouldUpdate = resumeMountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
        } else {
          shouldUpdate = updateClassInstance(current2, workInProgress2, Component2, nextProps, renderLanes2);
        }
        var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2);
        {
          var inst = workInProgress2.stateNode;
          if (shouldUpdate && inst.props !== nextProps) {
            if (!didWarnAboutReassigningProps) {
              error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
            }
            didWarnAboutReassigningProps = true;
          }
        }
        return nextUnitOfWork;
      }
      function finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2) {
        markRef(current2, workInProgress2);
        var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
        if (!shouldUpdate && !didCaptureError) {
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component2, false);
          }
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        var instance = workInProgress2.stateNode;
        ReactCurrentOwner$1.current = workInProgress2;
        var nextChildren;
        if (didCaptureError && typeof Component2.getDerivedStateFromError !== "function") {
          nextChildren = null;
          {
            stopProfilerTimerIfRunning();
          }
        } else {
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            setIsRendering(true);
            nextChildren = instance.render();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                instance.render();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
        }
        workInProgress2.flags |= PerformedWork;
        if (current2 !== null && didCaptureError) {
          forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
        } else {
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        }
        workInProgress2.memoizedState = instance.state;
        if (hasContext) {
          invalidateContextProvider(workInProgress2, Component2, true);
        }
        return workInProgress2.child;
      }
      function pushHostRootContext(workInProgress2) {
        var root2 = workInProgress2.stateNode;
        if (root2.pendingContext) {
          pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
        } else if (root2.context) {
          pushTopLevelContextObject(workInProgress2, root2.context, false);
        }
        pushHostContainer(workInProgress2, root2.containerInfo);
      }
      function updateHostRoot(current2, workInProgress2, renderLanes2) {
        pushHostRootContext(workInProgress2);
        if (current2 === null) {
          throw new Error("Should have a current fiber. This is a bug in React.");
        }
        var nextProps = workInProgress2.pendingProps;
        var prevState = workInProgress2.memoizedState;
        var prevChildren = prevState.element;
        cloneUpdateQueue(current2, workInProgress2);
        processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
        var nextState = workInProgress2.memoizedState;
        var root2 = workInProgress2.stateNode;
        var nextChildren = nextState.element;
        if (prevState.isDehydrated) {
          var overrideState = {
            element: nextChildren,
            isDehydrated: false,
            cache: nextState.cache,
            pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
            transitions: nextState.transitions
          };
          var updateQueue = workInProgress2.updateQueue;
          updateQueue.baseState = overrideState;
          workInProgress2.memoizedState = overrideState;
          if (workInProgress2.flags & ForceClientRender) {
            var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
            return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
          } else if (nextChildren !== prevChildren) {
            var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
            return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
          } else {
            enterHydrationState(workInProgress2);
            var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            workInProgress2.child = child;
            var node2 = child;
            while (node2) {
              node2.flags = node2.flags & ~Placement | Hydrating;
              node2 = node2.sibling;
            }
          }
        } else {
          resetHydrationState();
          if (nextChildren === prevChildren) {
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        }
        return workInProgress2.child;
      }
      function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
        resetHydrationState();
        queueHydrationError(recoverableError);
        workInProgress2.flags |= ForceClientRender;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateHostComponent(current2, workInProgress2, renderLanes2) {
        pushHostContext(workInProgress2);
        if (current2 === null) {
          tryToClaimNextHydratableInstance(workInProgress2);
        }
        var type = workInProgress2.type;
        var nextProps = workInProgress2.pendingProps;
        var prevProps = current2 !== null ? current2.memoizedProps : null;
        var nextChildren = nextProps.children;
        var isDirectTextChild = shouldSetTextContent(type, nextProps);
        if (isDirectTextChild) {
          nextChildren = null;
        } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
          workInProgress2.flags |= ContentReset;
        }
        markRef(current2, workInProgress2);
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateHostText(current2, workInProgress2) {
        if (current2 === null) {
          tryToClaimNextHydratableInstance(workInProgress2);
        }
        return null;
      }
      function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
        var props = workInProgress2.pendingProps;
        var lazyComponent = elementType;
        var payload = lazyComponent._payload;
        var init = lazyComponent._init;
        var Component2 = init(payload);
        workInProgress2.type = Component2;
        var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component2);
        var resolvedProps = resolveDefaultProps(Component2, props);
        var child;
        switch (resolvedTag) {
          case FunctionComponent: {
            {
              validateFunctionComponentInDev(workInProgress2, Component2);
              workInProgress2.type = Component2 = resolveFunctionForHotReloading(Component2);
            }
            child = updateFunctionComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
            return child;
          }
          case ClassComponent: {
            {
              workInProgress2.type = Component2 = resolveClassForHotReloading(Component2);
            }
            child = updateClassComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
            return child;
          }
          case ForwardRef: {
            {
              workInProgress2.type = Component2 = resolveForwardRefForHotReloading(Component2);
            }
            child = updateForwardRef(null, workInProgress2, Component2, resolvedProps, renderLanes2);
            return child;
          }
          case MemoComponent: {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerPropTypes = Component2.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentNameFromType(Component2));
                }
              }
            }
            child = updateMemoComponent(null, workInProgress2, Component2, resolveDefaultProps(Component2.type, resolvedProps), renderLanes2);
            return child;
          }
        }
        var hint = "";
        {
          if (Component2 !== null && typeof Component2 === "object" && Component2.$$typeof === REACT_LAZY_TYPE) {
            hint = " Did you wrap a component in React.lazy() more than once?";
          }
        }
        throw new Error("Element type is invalid. Received a promise that resolves to: " + Component2 + ". " + ("Lazy element type must resolve to a class or function." + hint));
      }
      function mountIncompleteClassComponent(_current, workInProgress2, Component2, nextProps, renderLanes2) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
        workInProgress2.tag = ClassComponent;
        var hasContext;
        if (isContextProvider(Component2)) {
          hasContext = true;
          pushContextProvider(workInProgress2);
        } else {
          hasContext = false;
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        constructClassInstance(workInProgress2, Component2, nextProps);
        mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
        return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
      }
      function mountIndeterminateComponent(_current, workInProgress2, Component2, renderLanes2) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
        var props = workInProgress2.pendingProps;
        var context;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, false);
          context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        var value;
        var hasId;
        {
          markComponentRenderStarted(workInProgress2);
        }
        {
          if (Component2.prototype && typeof Component2.prototype.render === "function") {
            var componentName = getComponentNameFromType(Component2) || "Unknown";
            if (!didWarnAboutBadClass[componentName]) {
              error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
              didWarnAboutBadClass[componentName] = true;
            }
          }
          if (workInProgress2.mode & StrictLegacyMode) {
            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
          }
          setIsRendering(true);
          ReactCurrentOwner$1.current = workInProgress2;
          value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
          hasId = checkDidRenderIdHook();
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
        workInProgress2.flags |= PerformedWork;
        {
          if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === undefined) {
            var _componentName = getComponentNameFromType(Component2) || "Unknown";
            if (!didWarnAboutModulePatternComponent[_componentName]) {
              error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
              didWarnAboutModulePatternComponent[_componentName] = true;
            }
          }
        }
        if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === undefined) {
          {
            var _componentName2 = getComponentNameFromType(Component2) || "Unknown";
            if (!didWarnAboutModulePatternComponent[_componentName2]) {
              error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
              didWarnAboutModulePatternComponent[_componentName2] = true;
            }
          }
          workInProgress2.tag = ClassComponent;
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          var hasContext = false;
          if (isContextProvider(Component2)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          workInProgress2.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
          initializeUpdateQueue(workInProgress2);
          adoptClassInstance(workInProgress2, value);
          mountClassInstance(workInProgress2, Component2, props, renderLanes2);
          return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
        } else {
          workInProgress2.tag = FunctionComponent;
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          reconcileChildren(null, workInProgress2, value, renderLanes2);
          {
            validateFunctionComponentInDev(workInProgress2, Component2);
          }
          return workInProgress2.child;
        }
      }
      function validateFunctionComponentInDev(workInProgress2, Component2) {
        {
          if (Component2) {
            if (Component2.childContextTypes) {
              error("%s(...): childContextTypes cannot be defined on a function component.", Component2.displayName || Component2.name || "Component");
            }
          }
          if (workInProgress2.ref !== null) {
            var info = "";
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              info += `

Check the render method of \`` + ownerName + "`.";
            }
            var warningKey = ownerName || "";
            var debugSource = workInProgress2._debugSource;
            if (debugSource) {
              warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
            }
            if (!didWarnAboutFunctionRefs[warningKey]) {
              didWarnAboutFunctionRefs[warningKey] = true;
              error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
            }
          }
          if (typeof Component2.getDerivedStateFromProps === "function") {
            var _componentName3 = getComponentNameFromType(Component2) || "Unknown";
            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
              error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
              didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
            }
          }
          if (typeof Component2.contextType === "object" && Component2.contextType !== null) {
            var _componentName4 = getComponentNameFromType(Component2) || "Unknown";
            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
              error("%s: Function components do not support contextType.", _componentName4);
              didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
            }
          }
        }
      }
      var SUSPENDED_MARKER = {
        dehydrated: null,
        treeContext: null,
        retryLane: NoLane
      };
      function mountSuspenseOffscreenState(renderLanes2) {
        return {
          baseLanes: renderLanes2,
          cachePool: getSuspendedCache(),
          transitions: null
        };
      }
      function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
        var cachePool = null;
        return {
          baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
          cachePool,
          transitions: prevOffscreenState.transitions
        };
      }
      function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
        if (current2 !== null) {
          var suspenseState = current2.memoizedState;
          if (suspenseState === null) {
            return false;
          }
        }
        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
      }
      function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
        return removeLanes(current2.childLanes, renderLanes2);
      }
      function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps;
        {
          if (shouldSuspend(workInProgress2)) {
            workInProgress2.flags |= DidCapture;
          }
        }
        var suspenseContext = suspenseStackCursor.current;
        var showFallback = false;
        var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
        if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
          showFallback = true;
          workInProgress2.flags &= ~DidCapture;
        } else {
          if (current2 === null || current2.memoizedState !== null) {
            {
              suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
            }
          }
        }
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        pushSuspenseContext(workInProgress2, suspenseContext);
        if (current2 === null) {
          tryToClaimNextHydratableInstance(workInProgress2);
          var suspenseState = workInProgress2.memoizedState;
          if (suspenseState !== null) {
            var dehydrated = suspenseState.dehydrated;
            if (dehydrated !== null) {
              return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
            }
          }
          var nextPrimaryChildren = nextProps.children;
          var nextFallbackChildren = nextProps.fallback;
          if (showFallback) {
            var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
            var primaryChildFragment = workInProgress2.child;
            primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
            workInProgress2.memoizedState = SUSPENDED_MARKER;
            return fallbackFragment;
          } else {
            return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
          }
        } else {
          var prevState = current2.memoizedState;
          if (prevState !== null) {
            var _dehydrated = prevState.dehydrated;
            if (_dehydrated !== null) {
              return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
            }
          }
          if (showFallback) {
            var _nextFallbackChildren = nextProps.fallback;
            var _nextPrimaryChildren = nextProps.children;
            var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
            var _primaryChildFragment2 = workInProgress2.child;
            var prevOffscreenState = current2.child.memoizedState;
            _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
            _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
            workInProgress2.memoizedState = SUSPENDED_MARKER;
            return fallbackChildFragment;
          } else {
            var _nextPrimaryChildren2 = nextProps.children;
            var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
            workInProgress2.memoizedState = null;
            return _primaryChildFragment3;
          }
        }
      }
      function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
        var mode = workInProgress2.mode;
        var primaryChildProps = {
          mode: "visible",
          children: primaryChildren
        };
        var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
        primaryChildFragment.return = workInProgress2;
        workInProgress2.child = primaryChildFragment;
        return primaryChildFragment;
      }
      function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var mode = workInProgress2.mode;
        var progressedPrimaryFragment = workInProgress2.child;
        var primaryChildProps = {
          mode: "hidden",
          children: primaryChildren
        };
        var primaryChildFragment;
        var fallbackChildFragment;
        if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
          primaryChildFragment = progressedPrimaryFragment;
          primaryChildFragment.childLanes = NoLanes;
          primaryChildFragment.pendingProps = primaryChildProps;
          if (workInProgress2.mode & ProfileMode) {
            primaryChildFragment.actualDuration = 0;
            primaryChildFragment.actualStartTime = -1;
            primaryChildFragment.selfBaseDuration = 0;
            primaryChildFragment.treeBaseDuration = 0;
          }
          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
        } else {
          primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
        }
        primaryChildFragment.return = workInProgress2;
        fallbackChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress2.child = primaryChildFragment;
        return fallbackChildFragment;
      }
      function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
        return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
      }
      function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
        return createWorkInProgress(current2, offscreenProps);
      }
      function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
        var currentPrimaryChildFragment = current2.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
          mode: "visible",
          children: primaryChildren
        });
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          primaryChildFragment.lanes = renderLanes2;
        }
        primaryChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = null;
        if (currentFallbackChildFragment !== null) {
          var deletions = workInProgress2.deletions;
          if (deletions === null) {
            workInProgress2.deletions = [currentFallbackChildFragment];
            workInProgress2.flags |= ChildDeletion;
          } else {
            deletions.push(currentFallbackChildFragment);
          }
        }
        workInProgress2.child = primaryChildFragment;
        return primaryChildFragment;
      }
      function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var mode = workInProgress2.mode;
        var currentPrimaryChildFragment = current2.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildProps = {
          mode: "hidden",
          children: primaryChildren
        };
        var primaryChildFragment;
        if ((mode & ConcurrentMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
          var progressedPrimaryFragment = workInProgress2.child;
          primaryChildFragment = progressedPrimaryFragment;
          primaryChildFragment.childLanes = NoLanes;
          primaryChildFragment.pendingProps = primaryChildProps;
          if (workInProgress2.mode & ProfileMode) {
            primaryChildFragment.actualDuration = 0;
            primaryChildFragment.actualStartTime = -1;
            primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
            primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
          }
          workInProgress2.deletions = null;
        } else {
          primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
          primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
        }
        var fallbackChildFragment;
        if (currentFallbackChildFragment !== null) {
          fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
        } else {
          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          fallbackChildFragment.flags |= Placement;
        }
        fallbackChildFragment.return = workInProgress2;
        primaryChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress2.child = primaryChildFragment;
        return fallbackChildFragment;
      }
      function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
        if (recoverableError !== null) {
          queueHydrationError(recoverableError);
        }
        reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
        var nextProps = workInProgress2.pendingProps;
        var primaryChildren = nextProps.children;
        var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
        primaryChildFragment.flags |= Placement;
        workInProgress2.memoizedState = null;
        return primaryChildFragment;
      }
      function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var fiberMode = workInProgress2.mode;
        var primaryChildProps = {
          mode: "visible",
          children: primaryChildren
        };
        var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
        var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
        fallbackChildFragment.flags |= Placement;
        primaryChildFragment.return = workInProgress2;
        fallbackChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress2.child = primaryChildFragment;
        if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
          reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
        }
        return fallbackChildFragment;
      }
      function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          {
            error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
          }
          workInProgress2.lanes = laneToLanes(SyncLane);
        } else if (isSuspenseInstanceFallback(suspenseInstance)) {
          workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
        } else {
          workInProgress2.lanes = laneToLanes(OffscreenLane);
        }
        return null;
      }
      function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
        if (!didSuspend) {
          warnIfHydrating();
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, null);
          }
          if (isSuspenseInstanceFallback(suspenseInstance)) {
            var digest, message, stack;
            {
              var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
              digest = _getSuspenseInstanceF.digest;
              message = _getSuspenseInstanceF.message;
              stack = _getSuspenseInstanceF.stack;
            }
            var error2;
            if (message) {
              error2 = new Error(message);
            } else {
              error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
            }
            var capturedValue = createCapturedValue(error2, digest, stack);
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
          }
          var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
          if (didReceiveUpdate || hasContextChanged2) {
            var root2 = getWorkInProgressRoot();
            if (root2 !== null) {
              var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
              if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                suspenseState.retryLane = attemptHydrationAtLane;
                var eventTime = NoTimestamp;
                enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
              }
            }
            renderDidSuspendDelayIfPossible();
            var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
          } else if (isSuspenseInstancePending(suspenseInstance)) {
            workInProgress2.flags |= DidCapture;
            workInProgress2.child = current2.child;
            var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
            registerSuspenseInstanceRetry(suspenseInstance, retry);
            return null;
          } else {
            reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Hydrating;
            return primaryChildFragment;
          }
        } else {
          if (workInProgress2.flags & ForceClientRender) {
            workInProgress2.flags &= ~ForceClientRender;
            var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
          } else if (workInProgress2.memoizedState !== null) {
            workInProgress2.child = current2.child;
            workInProgress2.flags |= DidCapture;
            return null;
          } else {
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
            var _primaryChildFragment4 = workInProgress2.child;
            _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
            workInProgress2.memoizedState = SUSPENDED_MARKER;
            return fallbackChildFragment;
          }
        }
      }
      function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
        fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
        var alternate = fiber.alternate;
        if (alternate !== null) {
          alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
        }
        scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
      }
      function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
        var node2 = firstChild;
        while (node2 !== null) {
          if (node2.tag === SuspenseComponent) {
            var state = node2.memoizedState;
            if (state !== null) {
              scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
            }
          } else if (node2.tag === SuspenseListComponent) {
            scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
          } else if (node2.child !== null) {
            node2.child.return = node2;
            node2 = node2.child;
            continue;
          }
          if (node2 === workInProgress2) {
            return;
          }
          while (node2.sibling === null) {
            if (node2.return === null || node2.return === workInProgress2) {
              return;
            }
            node2 = node2.return;
          }
          node2.sibling.return = node2.return;
          node2 = node2.sibling;
        }
      }
      function findLastContentRow(firstChild) {
        var row = firstChild;
        var lastContentRow = null;
        while (row !== null) {
          var currentRow = row.alternate;
          if (currentRow !== null && findFirstSuspended(currentRow) === null) {
            lastContentRow = row;
          }
          row = row.sibling;
        }
        return lastContentRow;
      }
      function validateRevealOrder(revealOrder) {
        {
          if (revealOrder !== undefined && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
            didWarnAboutRevealOrder[revealOrder] = true;
            if (typeof revealOrder === "string") {
              switch (revealOrder.toLowerCase()) {
                case "together":
                case "forwards":
                case "backwards": {
                  error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                  break;
                }
                case "forward":
                case "backward": {
                  error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                  break;
                }
                default:
                  error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                  break;
              }
            } else {
              error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
            }
          }
        }
      }
      function validateTailOptions(tailMode, revealOrder) {
        {
          if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
            if (tailMode !== "collapsed" && tailMode !== "hidden") {
              didWarnAboutTailOptions[tailMode] = true;
              error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
            } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
              didWarnAboutTailOptions[tailMode] = true;
              error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
            }
          }
        }
      }
      function validateSuspenseListNestedChild(childSlot, index2) {
        {
          var isAnArray = isArray(childSlot);
          var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
          if (isAnArray || isIterable) {
            var type = isAnArray ? "array" : "iterable";
            error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
            return false;
          }
        }
        return true;
      }
      function validateSuspenseListChildren(children, revealOrder) {
        {
          if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== undefined && children !== null && children !== false) {
            if (isArray(children)) {
              for (var i2 = 0;i2 < children.length; i2++) {
                if (!validateSuspenseListNestedChild(children[i2], i2)) {
                  return;
                }
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var childrenIterator = iteratorFn.call(children);
                if (childrenIterator) {
                  var step = childrenIterator.next();
                  var _i = 0;
                  for (;!step.done; step = childrenIterator.next()) {
                    if (!validateSuspenseListNestedChild(step.value, _i)) {
                      return;
                    }
                    _i++;
                  }
                }
              } else {
                error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
              }
            }
          }
        }
      }
      function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
        var renderState = workInProgress2.memoizedState;
        if (renderState === null) {
          workInProgress2.memoizedState = {
            isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail,
            tailMode
          };
        } else {
          renderState.isBackwards = isBackwards;
          renderState.rendering = null;
          renderState.renderingStartTime = 0;
          renderState.last = lastContentRow;
          renderState.tail = tail;
          renderState.tailMode = tailMode;
        }
      }
      function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps;
        var revealOrder = nextProps.revealOrder;
        var tailMode = nextProps.tail;
        var newChildren = nextProps.children;
        validateRevealOrder(revealOrder);
        validateTailOptions(tailMode, revealOrder);
        validateSuspenseListChildren(newChildren, revealOrder);
        reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
        var suspenseContext = suspenseStackCursor.current;
        var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        if (shouldForceFallback) {
          suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
          workInProgress2.flags |= DidCapture;
        } else {
          var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
          if (didSuspendBefore) {
            propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }
        pushSuspenseContext(workInProgress2, suspenseContext);
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          workInProgress2.memoizedState = null;
        } else {
          switch (revealOrder) {
            case "forwards": {
              var lastContentRow = findLastContentRow(workInProgress2.child);
              var tail;
              if (lastContentRow === null) {
                tail = workInProgress2.child;
                workInProgress2.child = null;
              } else {
                tail = lastContentRow.sibling;
                lastContentRow.sibling = null;
              }
              initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode);
              break;
            }
            case "backwards": {
              var _tail = null;
              var row = workInProgress2.child;
              workInProgress2.child = null;
              while (row !== null) {
                var currentRow = row.alternate;
                if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                  workInProgress2.child = row;
                  break;
                }
                var nextRow = row.sibling;
                row.sibling = _tail;
                _tail = row;
                row = nextRow;
              }
              initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode);
              break;
            }
            case "together": {
              initSuspenseListRenderState(workInProgress2, false, null, null, undefined);
              break;
            }
            default: {
              workInProgress2.memoizedState = null;
            }
          }
        }
        return workInProgress2.child;
      }
      function updatePortalComponent(current2, workInProgress2, renderLanes2) {
        pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
        var nextChildren = workInProgress2.pendingProps;
        if (current2 === null) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        } else {
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        }
        return workInProgress2.child;
      }
      var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
      function updateContextProvider(current2, workInProgress2, renderLanes2) {
        var providerType = workInProgress2.type;
        var context = providerType._context;
        var newProps = workInProgress2.pendingProps;
        var oldProps = workInProgress2.memoizedProps;
        var newValue = newProps.value;
        {
          if (!("value" in newProps)) {
            if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
              hasWarnedAboutUsingNoValuePropOnContextProvider = true;
              error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
            }
          }
          var providerPropTypes = workInProgress2.type.propTypes;
          if (providerPropTypes) {
            checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
          }
        }
        pushProvider(workInProgress2, context, newValue);
        {
          if (oldProps !== null) {
            var oldValue = oldProps.value;
            if (objectIs(oldValue, newValue)) {
              if (oldProps.children === newProps.children && !hasContextChanged()) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            } else {
              propagateContextChange(workInProgress2, context, renderLanes2);
            }
          }
        }
        var newChildren = newProps.children;
        reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
        return workInProgress2.child;
      }
      var hasWarnedAboutUsingContextAsConsumer = false;
      function updateContextConsumer(current2, workInProgress2, renderLanes2) {
        var context = workInProgress2.type;
        {
          if (context._context === undefined) {
            if (context !== context.Consumer) {
              if (!hasWarnedAboutUsingContextAsConsumer) {
                hasWarnedAboutUsingContextAsConsumer = true;
                error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
              }
            }
          } else {
            context = context._context;
          }
        }
        var newProps = workInProgress2.pendingProps;
        var render2 = newProps.children;
        {
          if (typeof render2 !== "function") {
            error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
          }
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        var newValue = readContext(context);
        {
          markComponentRenderStarted(workInProgress2);
        }
        var newChildren;
        {
          ReactCurrentOwner$1.current = workInProgress2;
          setIsRendering(true);
          newChildren = render2(newValue);
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
        workInProgress2.flags |= PerformedWork;
        reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
        return workInProgress2.child;
      }
      function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
      }
      function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          if (current2 !== null) {
            current2.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.flags |= Placement;
          }
        }
      }
      function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
        if (current2 !== null) {
          workInProgress2.dependencies = current2.dependencies;
        }
        {
          stopProfilerTimerIfRunning();
        }
        markSkippedUpdateLanes(workInProgress2.lanes);
        if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
          {
            return null;
          }
        }
        cloneChildFibers(current2, workInProgress2);
        return workInProgress2.child;
      }
      function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
        {
          var returnFiber = oldWorkInProgress.return;
          if (returnFiber === null) {
            throw new Error("Cannot swap the root fiber.");
          }
          current2.alternate = null;
          oldWorkInProgress.alternate = null;
          newWorkInProgress.index = oldWorkInProgress.index;
          newWorkInProgress.sibling = oldWorkInProgress.sibling;
          newWorkInProgress.return = oldWorkInProgress.return;
          newWorkInProgress.ref = oldWorkInProgress.ref;
          if (oldWorkInProgress === returnFiber.child) {
            returnFiber.child = newWorkInProgress;
          } else {
            var prevSibling = returnFiber.child;
            if (prevSibling === null) {
              throw new Error("Expected parent to have a child.");
            }
            while (prevSibling.sibling !== oldWorkInProgress) {
              prevSibling = prevSibling.sibling;
              if (prevSibling === null) {
                throw new Error("Expected to find the previous sibling.");
              }
            }
            prevSibling.sibling = newWorkInProgress;
          }
          var deletions = returnFiber.deletions;
          if (deletions === null) {
            returnFiber.deletions = [current2];
            returnFiber.flags |= ChildDeletion;
          } else {
            deletions.push(current2);
          }
          newWorkInProgress.flags |= Placement;
          return newWorkInProgress;
        }
      }
      function checkScheduledUpdateOrContext(current2, renderLanes2) {
        var updateLanes = current2.lanes;
        if (includesSomeLane(updateLanes, renderLanes2)) {
          return true;
        }
        return false;
      }
      function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
        switch (workInProgress2.tag) {
          case HostRoot:
            pushHostRootContext(workInProgress2);
            var root2 = workInProgress2.stateNode;
            resetHydrationState();
            break;
          case HostComponent:
            pushHostContext(workInProgress2);
            break;
          case ClassComponent: {
            var Component2 = workInProgress2.type;
            if (isContextProvider(Component2)) {
              pushContextProvider(workInProgress2);
            }
            break;
          }
          case HostPortal:
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            break;
          case ContextProvider: {
            var newValue = workInProgress2.memoizedProps.value;
            var context = workInProgress2.type._context;
            pushProvider(workInProgress2, context, newValue);
            break;
          }
          case Profiler:
            {
              var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
              if (hasChildWork) {
                workInProgress2.flags |= Update;
              }
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            break;
          case SuspenseComponent: {
            var state = workInProgress2.memoizedState;
            if (state !== null) {
              if (state.dehydrated !== null) {
                pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                workInProgress2.flags |= DidCapture;
                return null;
              }
              var primaryChildFragment = workInProgress2.child;
              var primaryChildLanes = primaryChildFragment.childLanes;
              if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              } else {
                pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                if (child !== null) {
                  return child.sibling;
                } else {
                  return null;
                }
              }
            } else {
              pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
            }
            break;
          }
          case SuspenseListComponent: {
            var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
            var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
            if (didSuspendBefore) {
              if (_hasChildWork) {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              workInProgress2.flags |= DidCapture;
            }
            var renderState = workInProgress2.memoizedState;
            if (renderState !== null) {
              renderState.rendering = null;
              renderState.tail = null;
              renderState.lastEffect = null;
            }
            pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
            if (_hasChildWork) {
              break;
            } else {
              return null;
            }
          }
          case OffscreenComponent:
          case LegacyHiddenComponent: {
            workInProgress2.lanes = NoLanes;
            return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
          }
        }
        return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
      }
      function beginWork(current2, workInProgress2, renderLanes2) {
        {
          if (workInProgress2._debugNeedsRemount && current2 !== null) {
            return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
          }
        }
        if (current2 !== null) {
          var oldProps = current2.memoizedProps;
          var newProps = workInProgress2.pendingProps;
          if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
            didReceiveUpdate = true;
          } else {
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext && (workInProgress2.flags & DidCapture) === NoFlags) {
              didReceiveUpdate = false;
              return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
            }
            if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
              didReceiveUpdate = true;
            } else {
              didReceiveUpdate = false;
            }
          }
        } else {
          didReceiveUpdate = false;
          if (getIsHydrating() && isForkedChild(workInProgress2)) {
            var slotIndex = workInProgress2.index;
            var numberOfForks = getForksAtLevel();
            pushTreeId(workInProgress2, numberOfForks, slotIndex);
          }
        }
        workInProgress2.lanes = NoLanes;
        switch (workInProgress2.tag) {
          case IndeterminateComponent: {
            return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
          }
          case LazyComponent: {
            var elementType = workInProgress2.elementType;
            return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
          }
          case FunctionComponent: {
            var Component2 = workInProgress2.type;
            var unresolvedProps = workInProgress2.pendingProps;
            var resolvedProps = workInProgress2.elementType === Component2 ? unresolvedProps : resolveDefaultProps(Component2, unresolvedProps);
            return updateFunctionComponent(current2, workInProgress2, Component2, resolvedProps, renderLanes2);
          }
          case ClassComponent: {
            var _Component = workInProgress2.type;
            var _unresolvedProps = workInProgress2.pendingProps;
            var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
            return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
          }
          case HostRoot:
            return updateHostRoot(current2, workInProgress2, renderLanes2);
          case HostComponent:
            return updateHostComponent(current2, workInProgress2, renderLanes2);
          case HostText:
            return updateHostText(current2, workInProgress2);
          case SuspenseComponent:
            return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
          case HostPortal:
            return updatePortalComponent(current2, workInProgress2, renderLanes2);
          case ForwardRef: {
            var type = workInProgress2.type;
            var _unresolvedProps2 = workInProgress2.pendingProps;
            var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
            return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
          }
          case Fragment32:
            return updateFragment(current2, workInProgress2, renderLanes2);
          case Mode:
            return updateMode(current2, workInProgress2, renderLanes2);
          case Profiler:
            return updateProfiler(current2, workInProgress2, renderLanes2);
          case ContextProvider:
            return updateContextProvider(current2, workInProgress2, renderLanes2);
          case ContextConsumer:
            return updateContextConsumer(current2, workInProgress2, renderLanes2);
          case MemoComponent: {
            var _type2 = workInProgress2.type;
            var _unresolvedProps3 = workInProgress2.pendingProps;
            var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerPropTypes = _type2.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentNameFromType(_type2));
                }
              }
            }
            _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
            return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
          }
          case SimpleMemoComponent: {
            return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
          }
          case IncompleteClassComponent: {
            var _Component2 = workInProgress2.type;
            var _unresolvedProps4 = workInProgress2.pendingProps;
            var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
            return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
          }
          case SuspenseListComponent: {
            return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
          }
          case ScopeComponent: {
            break;
          }
          case OffscreenComponent: {
            return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
          }
        }
        throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
      }
      function markUpdate(workInProgress2) {
        workInProgress2.flags |= Update;
      }
      function markRef$1(workInProgress2) {
        workInProgress2.flags |= Ref;
        {
          workInProgress2.flags |= RefStatic;
        }
      }
      var appendAllChildren;
      var updateHostContainer;
      var updateHostComponent$1;
      var updateHostText$1;
      {
        appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
          var node2 = workInProgress2.child;
          while (node2 !== null) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              appendInitialChild(parent, node2.stateNode);
            } else if (node2.tag === HostPortal)
              ;
            else if (node2.child !== null) {
              node2.child.return = node2;
              node2 = node2.child;
              continue;
            }
            if (node2 === workInProgress2) {
              return;
            }
            while (node2.sibling === null) {
              if (node2.return === null || node2.return === workInProgress2) {
                return;
              }
              node2 = node2.return;
            }
            node2.sibling.return = node2.return;
            node2 = node2.sibling;
          }
        };
        updateHostContainer = function(current2, workInProgress2) {};
        updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
          var oldProps = current2.memoizedProps;
          if (oldProps === newProps) {
            return;
          }
          var instance = workInProgress2.stateNode;
          var currentHostContext = getHostContext();
          var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
          workInProgress2.updateQueue = updatePayload;
          if (updatePayload) {
            markUpdate(workInProgress2);
          }
        };
        updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
          if (oldText !== newText) {
            markUpdate(workInProgress2);
          }
        };
      }
      function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (getIsHydrating()) {
          return;
        }
        switch (renderState.tailMode) {
          case "hidden": {
            var tailNode = renderState.tail;
            var lastTailNode = null;
            while (tailNode !== null) {
              if (tailNode.alternate !== null) {
                lastTailNode = tailNode;
              }
              tailNode = tailNode.sibling;
            }
            if (lastTailNode === null) {
              renderState.tail = null;
            } else {
              lastTailNode.sibling = null;
            }
            break;
          }
          case "collapsed": {
            var _tailNode = renderState.tail;
            var _lastTailNode = null;
            while (_tailNode !== null) {
              if (_tailNode.alternate !== null) {
                _lastTailNode = _tailNode;
              }
              _tailNode = _tailNode.sibling;
            }
            if (_lastTailNode === null) {
              if (!hasRenderedATailFallback && renderState.tail !== null) {
                renderState.tail.sibling = null;
              } else {
                renderState.tail = null;
              }
            } else {
              _lastTailNode.sibling = null;
            }
            break;
          }
        }
      }
      function bubbleProperties(completedWork) {
        var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
        var newChildLanes = NoLanes;
        var subtreeFlags = NoFlags;
        if (!didBailout) {
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            var actualDuration = completedWork.actualDuration;
            var treeBaseDuration = completedWork.selfBaseDuration;
            var child = completedWork.child;
            while (child !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
              subtreeFlags |= child.subtreeFlags;
              subtreeFlags |= child.flags;
              actualDuration += child.actualDuration;
              treeBaseDuration += child.treeBaseDuration;
              child = child.sibling;
            }
            completedWork.actualDuration = actualDuration;
            completedWork.treeBaseDuration = treeBaseDuration;
          } else {
            var _child = completedWork.child;
            while (_child !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
              subtreeFlags |= _child.subtreeFlags;
              subtreeFlags |= _child.flags;
              _child.return = completedWork;
              _child = _child.sibling;
            }
          }
          completedWork.subtreeFlags |= subtreeFlags;
        } else {
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            var _treeBaseDuration = completedWork.selfBaseDuration;
            var _child2 = completedWork.child;
            while (_child2 !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
              subtreeFlags |= _child2.subtreeFlags & StaticMask;
              subtreeFlags |= _child2.flags & StaticMask;
              _treeBaseDuration += _child2.treeBaseDuration;
              _child2 = _child2.sibling;
            }
            completedWork.treeBaseDuration = _treeBaseDuration;
          } else {
            var _child3 = completedWork.child;
            while (_child3 !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
              subtreeFlags |= _child3.subtreeFlags & StaticMask;
              subtreeFlags |= _child3.flags & StaticMask;
              _child3.return = completedWork;
              _child3 = _child3.sibling;
            }
          }
          completedWork.subtreeFlags |= subtreeFlags;
        }
        completedWork.childLanes = newChildLanes;
        return didBailout;
      }
      function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
        if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
          warnIfUnhydratedTailNodes(workInProgress2);
          resetHydrationState();
          workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
          return false;
        }
        var wasHydrated = popHydrationState(workInProgress2);
        if (nextState !== null && nextState.dehydrated !== null) {
          if (current2 === null) {
            if (!wasHydrated) {
              throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
            }
            prepareToHydrateHostSuspenseInstance(workInProgress2);
            bubbleProperties(workInProgress2);
            {
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                var isTimedOutSuspense = nextState !== null;
                if (isTimedOutSuspense) {
                  var primaryChildFragment = workInProgress2.child;
                  if (primaryChildFragment !== null) {
                    workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                  }
                }
              }
            }
            return false;
          } else {
            resetHydrationState();
            if ((workInProgress2.flags & DidCapture) === NoFlags) {
              workInProgress2.memoizedState = null;
            }
            workInProgress2.flags |= Update;
            bubbleProperties(workInProgress2);
            {
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                var _isTimedOutSuspense = nextState !== null;
                if (_isTimedOutSuspense) {
                  var _primaryChildFragment = workInProgress2.child;
                  if (_primaryChildFragment !== null) {
                    workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                  }
                }
              }
            }
            return false;
          }
        } else {
          upgradeHydrationErrorsToRecoverable();
          return true;
        }
      }
      function completeWork(current2, workInProgress2, renderLanes2) {
        var newProps = workInProgress2.pendingProps;
        popTreeContext(workInProgress2);
        switch (workInProgress2.tag) {
          case IndeterminateComponent:
          case LazyComponent:
          case SimpleMemoComponent:
          case FunctionComponent:
          case ForwardRef:
          case Fragment32:
          case Mode:
          case Profiler:
          case ContextConsumer:
          case MemoComponent:
            bubbleProperties(workInProgress2);
            return null;
          case ClassComponent: {
            var Component2 = workInProgress2.type;
            if (isContextProvider(Component2)) {
              popContext(workInProgress2);
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case HostRoot: {
            var fiberRoot = workInProgress2.stateNode;
            popHostContainer(workInProgress2);
            popTopLevelContextObject(workInProgress2);
            resetWorkInProgressVersions();
            if (fiberRoot.pendingContext) {
              fiberRoot.context = fiberRoot.pendingContext;
              fiberRoot.pendingContext = null;
            }
            if (current2 === null || current2.child === null) {
              var wasHydrated = popHydrationState(workInProgress2);
              if (wasHydrated) {
                markUpdate(workInProgress2);
              } else {
                if (current2 !== null) {
                  var prevState = current2.memoizedState;
                  if (!prevState.isDehydrated || (workInProgress2.flags & ForceClientRender) !== NoFlags) {
                    workInProgress2.flags |= Snapshot;
                    upgradeHydrationErrorsToRecoverable();
                  }
                }
              }
            }
            updateHostContainer(current2, workInProgress2);
            bubbleProperties(workInProgress2);
            return null;
          }
          case HostComponent: {
            popHostContext(workInProgress2);
            var rootContainerInstance = getRootHostContainer();
            var type = workInProgress2.type;
            if (current2 !== null && workInProgress2.stateNode != null) {
              updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
              if (current2.ref !== workInProgress2.ref) {
                markRef$1(workInProgress2);
              }
            } else {
              if (!newProps) {
                if (workInProgress2.stateNode === null) {
                  throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              var currentHostContext = getHostContext();
              var _wasHydrated = popHydrationState(workInProgress2);
              if (_wasHydrated) {
                if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                  markUpdate(workInProgress2);
                }
              } else {
                var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                appendAllChildren(instance, workInProgress2, false, false);
                workInProgress2.stateNode = instance;
                if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                  markUpdate(workInProgress2);
                }
              }
              if (workInProgress2.ref !== null) {
                markRef$1(workInProgress2);
              }
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case HostText: {
            var newText = newProps;
            if (current2 && workInProgress2.stateNode != null) {
              var oldText = current2.memoizedProps;
              updateHostText$1(current2, workInProgress2, oldText, newText);
            } else {
              if (typeof newText !== "string") {
                if (workInProgress2.stateNode === null) {
                  throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var _rootContainerInstance = getRootHostContainer();
              var _currentHostContext = getHostContext();
              var _wasHydrated2 = popHydrationState(workInProgress2);
              if (_wasHydrated2) {
                if (prepareToHydrateHostTextInstance(workInProgress2)) {
                  markUpdate(workInProgress2);
                }
              } else {
                workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
              }
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case SuspenseComponent: {
            popSuspenseContext(workInProgress2);
            var nextState = workInProgress2.memoizedState;
            if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
              var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
              if (!fallthroughToNormalSuspensePath) {
                if (workInProgress2.flags & ShouldCapture) {
                  return workInProgress2;
                } else {
                  return null;
                }
              }
            }
            if ((workInProgress2.flags & DidCapture) !== NoFlags) {
              workInProgress2.lanes = renderLanes2;
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress2);
              }
              return workInProgress2;
            }
            var nextDidTimeout = nextState !== null;
            var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
            if (nextDidTimeout !== prevDidTimeout) {
              if (nextDidTimeout) {
                var _offscreenFiber2 = workInProgress2.child;
                _offscreenFiber2.flags |= Visibility;
                if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                  var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                  if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                    renderDidSuspend();
                  } else {
                    renderDidSuspendDelayIfPossible();
                  }
                }
              }
            }
            var wakeables = workInProgress2.updateQueue;
            if (wakeables !== null) {
              workInProgress2.flags |= Update;
            }
            bubbleProperties(workInProgress2);
            {
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                if (nextDidTimeout) {
                  var primaryChildFragment = workInProgress2.child;
                  if (primaryChildFragment !== null) {
                    workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                  }
                }
              }
            }
            return null;
          }
          case HostPortal:
            popHostContainer(workInProgress2);
            updateHostContainer(current2, workInProgress2);
            if (current2 === null) {
              preparePortalMount(workInProgress2.stateNode.containerInfo);
            }
            bubbleProperties(workInProgress2);
            return null;
          case ContextProvider:
            var context = workInProgress2.type._context;
            popProvider(context, workInProgress2);
            bubbleProperties(workInProgress2);
            return null;
          case IncompleteClassComponent: {
            var _Component = workInProgress2.type;
            if (isContextProvider(_Component)) {
              popContext(workInProgress2);
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case SuspenseListComponent: {
            popSuspenseContext(workInProgress2);
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              bubbleProperties(workInProgress2);
              return null;
            }
            var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
            var renderedTail = renderState.rendering;
            if (renderedTail === null) {
              if (!didSuspendAlready) {
                var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                if (!cannotBeSuspended) {
                  var row = workInProgress2.child;
                  while (row !== null) {
                    var suspended = findFirstSuspended(row);
                    if (suspended !== null) {
                      didSuspendAlready = true;
                      workInProgress2.flags |= DidCapture;
                      cutOffTailIfNeeded(renderState, false);
                      var newThenables = suspended.updateQueue;
                      if (newThenables !== null) {
                        workInProgress2.updateQueue = newThenables;
                        workInProgress2.flags |= Update;
                      }
                      workInProgress2.subtreeFlags = NoFlags;
                      resetChildFibers(workInProgress2, renderLanes2);
                      pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                      return workInProgress2.child;
                    }
                    row = row.sibling;
                  }
                }
                if (renderState.tail !== null && now() > getRenderTargetTime()) {
                  workInProgress2.flags |= DidCapture;
                  didSuspendAlready = true;
                  cutOffTailIfNeeded(renderState, false);
                  workInProgress2.lanes = SomeRetryLane;
                }
              } else {
                cutOffTailIfNeeded(renderState, false);
              }
            } else {
              if (!didSuspendAlready) {
                var _suspended = findFirstSuspended(renderedTail);
                if (_suspended !== null) {
                  workInProgress2.flags |= DidCapture;
                  didSuspendAlready = true;
                  var _newThenables = _suspended.updateQueue;
                  if (_newThenables !== null) {
                    workInProgress2.updateQueue = _newThenables;
                    workInProgress2.flags |= Update;
                  }
                  cutOffTailIfNeeded(renderState, true);
                  if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                  workInProgress2.flags |= DidCapture;
                  didSuspendAlready = true;
                  cutOffTailIfNeeded(renderState, false);
                  workInProgress2.lanes = SomeRetryLane;
                }
              }
              if (renderState.isBackwards) {
                renderedTail.sibling = workInProgress2.child;
                workInProgress2.child = renderedTail;
              } else {
                var previousSibling = renderState.last;
                if (previousSibling !== null) {
                  previousSibling.sibling = renderedTail;
                } else {
                  workInProgress2.child = renderedTail;
                }
                renderState.last = renderedTail;
              }
            }
            if (renderState.tail !== null) {
              var next2 = renderState.tail;
              renderState.rendering = next2;
              renderState.tail = next2.sibling;
              renderState.renderingStartTime = now();
              next2.sibling = null;
              var suspenseContext = suspenseStackCursor.current;
              if (didSuspendAlready) {
                suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              } else {
                suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
              }
              pushSuspenseContext(workInProgress2, suspenseContext);
              return next2;
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case ScopeComponent: {
            break;
          }
          case OffscreenComponent:
          case LegacyHiddenComponent: {
            popRenderLanes(workInProgress2);
            var _nextState = workInProgress2.memoizedState;
            var nextIsHidden = _nextState !== null;
            if (current2 !== null) {
              var _prevState = current2.memoizedState;
              var prevIsHidden = _prevState !== null;
              if (prevIsHidden !== nextIsHidden && !enableLegacyHidden) {
                workInProgress2.flags |= Visibility;
              }
            }
            if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
              bubbleProperties(workInProgress2);
            } else {
              if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                bubbleProperties(workInProgress2);
                {
                  if (workInProgress2.subtreeFlags & (Placement | Update)) {
                    workInProgress2.flags |= Visibility;
                  }
                }
              }
            }
            return null;
          }
          case CacheComponent: {
            return null;
          }
          case TracingMarkerComponent: {
            return null;
          }
        }
        throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
      }
      function unwindWork(current2, workInProgress2, renderLanes2) {
        popTreeContext(workInProgress2);
        switch (workInProgress2.tag) {
          case ClassComponent: {
            var Component2 = workInProgress2.type;
            if (isContextProvider(Component2)) {
              popContext(workInProgress2);
            }
            var flags = workInProgress2.flags;
            if (flags & ShouldCapture) {
              workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress2);
              }
              return workInProgress2;
            }
            return null;
          }
          case HostRoot: {
            var root2 = workInProgress2.stateNode;
            popHostContainer(workInProgress2);
            popTopLevelContextObject(workInProgress2);
            resetWorkInProgressVersions();
            var _flags = workInProgress2.flags;
            if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
              workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
              return workInProgress2;
            }
            return null;
          }
          case HostComponent: {
            popHostContext(workInProgress2);
            return null;
          }
          case SuspenseComponent: {
            popSuspenseContext(workInProgress2);
            var suspenseState = workInProgress2.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              if (workInProgress2.alternate === null) {
                throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
              }
              resetHydrationState();
            }
            var _flags2 = workInProgress2.flags;
            if (_flags2 & ShouldCapture) {
              workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress2);
              }
              return workInProgress2;
            }
            return null;
          }
          case SuspenseListComponent: {
            popSuspenseContext(workInProgress2);
            return null;
          }
          case HostPortal:
            popHostContainer(workInProgress2);
            return null;
          case ContextProvider:
            var context = workInProgress2.type._context;
            popProvider(context, workInProgress2);
            return null;
          case OffscreenComponent:
          case LegacyHiddenComponent:
            popRenderLanes(workInProgress2);
            return null;
          case CacheComponent:
            return null;
          default:
            return null;
        }
      }
      function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
        popTreeContext(interruptedWork);
        switch (interruptedWork.tag) {
          case ClassComponent: {
            var childContextTypes = interruptedWork.type.childContextTypes;
            if (childContextTypes !== null && childContextTypes !== undefined) {
              popContext(interruptedWork);
            }
            break;
          }
          case HostRoot: {
            var root2 = interruptedWork.stateNode;
            popHostContainer(interruptedWork);
            popTopLevelContextObject(interruptedWork);
            resetWorkInProgressVersions();
            break;
          }
          case HostComponent: {
            popHostContext(interruptedWork);
            break;
          }
          case HostPortal:
            popHostContainer(interruptedWork);
            break;
          case SuspenseComponent:
            popSuspenseContext(interruptedWork);
            break;
          case SuspenseListComponent:
            popSuspenseContext(interruptedWork);
            break;
          case ContextProvider:
            var context = interruptedWork.type._context;
            popProvider(context, interruptedWork);
            break;
          case OffscreenComponent:
          case LegacyHiddenComponent:
            popRenderLanes(interruptedWork);
            break;
        }
      }
      var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
      {
        didWarnAboutUndefinedSnapshotBeforeUpdate = new Set;
      }
      var offscreenSubtreeIsHidden = false;
      var offscreenSubtreeWasHidden = false;
      var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
      var nextEffect = null;
      var inProgressLanes = null;
      var inProgressRoot = null;
      function reportUncaughtErrorInDEV(error2) {
        {
          invokeGuardedCallback(null, function() {
            throw error2;
          });
          clearCaughtError();
        }
      }
      var callComponentWillUnmountWithTimer = function(current2, instance) {
        instance.props = current2.memoizedProps;
        instance.state = current2.memoizedState;
        if (current2.mode & ProfileMode) {
          try {
            startLayoutEffectTimer();
            instance.componentWillUnmount();
          } finally {
            recordLayoutEffectDuration(current2);
          }
        } else {
          instance.componentWillUnmount();
        }
      };
      function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
        try {
          commitHookEffectListMount(Layout, current2);
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
        try {
          callComponentWillUnmountWithTimer(current2, instance);
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
        try {
          instance.componentDidMount();
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyAttachRef(current2, nearestMountedAncestor) {
        try {
          commitAttachRef(current2);
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyDetachRef(current2, nearestMountedAncestor) {
        var ref = current2.ref;
        if (ref !== null) {
          if (typeof ref === "function") {
            var retVal;
            try {
              if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  retVal = ref(null);
                } finally {
                  recordLayoutEffectDuration(current2);
                }
              } else {
                retVal = ref(null);
              }
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
            {
              if (typeof retVal === "function") {
                error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
              }
            }
          } else {
            ref.current = null;
          }
        }
      }
      function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
        try {
          destroy();
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      var focusedInstanceHandle = null;
      var shouldFireAfterActiveInstanceBlur = false;
      function commitBeforeMutationEffects(root2, firstChild) {
        focusedInstanceHandle = prepareForCommit(root2.containerInfo);
        nextEffect = firstChild;
        commitBeforeMutationEffects_begin();
        var shouldFire = shouldFireAfterActiveInstanceBlur;
        shouldFireAfterActiveInstanceBlur = false;
        focusedInstanceHandle = null;
        return shouldFire;
      }
      function commitBeforeMutationEffects_begin() {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var child = fiber.child;
          if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
            child.return = fiber;
            nextEffect = child;
          } else {
            commitBeforeMutationEffects_complete();
          }
        }
      }
      function commitBeforeMutationEffects_complete() {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          setCurrentFiber(fiber);
          try {
            commitBeforeMutationEffectsOnFiber(fiber);
          } catch (error2) {
            captureCommitPhaseError(fiber, fiber.return, error2);
          }
          resetCurrentFiber();
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitBeforeMutationEffectsOnFiber(finishedWork) {
        var current2 = finishedWork.alternate;
        var flags = finishedWork.flags;
        if ((flags & Snapshot) !== NoFlags) {
          setCurrentFiber(finishedWork);
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              break;
            }
            case ClassComponent: {
              if (current2 !== null) {
                var prevProps = current2.memoizedProps;
                var prevState = current2.memoizedState;
                var instance = finishedWork.stateNode;
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    }
                  }
                }
                var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                {
                  var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                  if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                    didWarnSet.add(finishedWork.type);
                    error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                  }
                }
                instance.__reactInternalSnapshotBeforeUpdate = snapshot;
              }
              break;
            }
            case HostRoot: {
              {
                var root2 = finishedWork.stateNode;
                clearContainer(root2.containerInfo);
              }
              break;
            }
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
              break;
            default: {
              throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          resetCurrentFiber();
        }
      }
      function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          var effect = firstEffect;
          do {
            if ((effect.tag & flags) === flags) {
              var destroy = effect.destroy;
              effect.destroy = undefined;
              if (destroy !== undefined) {
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectUnmountStarted(finishedWork);
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectUnmountStarted(finishedWork);
                  }
                }
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(true);
                  }
                }
                safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(false);
                  }
                }
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectUnmountStopped();
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectUnmountStopped();
                  }
                }
              }
            }
            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }
      function commitHookEffectListMount(flags, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          var effect = firstEffect;
          do {
            if ((effect.tag & flags) === flags) {
              {
                if ((flags & Passive$1) !== NoFlags$1) {
                  markComponentPassiveEffectMountStarted(finishedWork);
                } else if ((flags & Layout) !== NoFlags$1) {
                  markComponentLayoutEffectMountStarted(finishedWork);
                }
              }
              var create = effect.create;
              {
                if ((flags & Insertion) !== NoFlags$1) {
                  setIsRunningInsertionEffect(true);
                }
              }
              effect.destroy = create();
              {
                if ((flags & Insertion) !== NoFlags$1) {
                  setIsRunningInsertionEffect(false);
                }
              }
              {
                if ((flags & Passive$1) !== NoFlags$1) {
                  markComponentPassiveEffectMountStopped();
                } else if ((flags & Layout) !== NoFlags$1) {
                  markComponentLayoutEffectMountStopped();
                }
              }
              {
                var destroy = effect.destroy;
                if (destroy !== undefined && typeof destroy !== "function") {
                  var hookName = undefined;
                  if ((effect.tag & Layout) !== NoFlags) {
                    hookName = "useLayoutEffect";
                  } else if ((effect.tag & Insertion) !== NoFlags) {
                    hookName = "useInsertionEffect";
                  } else {
                    hookName = "useEffect";
                  }
                  var addendum = undefined;
                  if (destroy === null) {
                    addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                  } else if (typeof destroy.then === "function") {
                    addendum = `

It looks like you wrote ` + hookName + `(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:

` + hookName + `(() => {
  async function fetchData() {
    // You can await here
    const response = await MyAPI.getData(someId);
    // ...
  }
  fetchData();
}, [someId]); // Or [] if effect doesn't need props or state

Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching`;
                  } else {
                    addendum = " You returned: " + destroy;
                  }
                  error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                }
              }
            }
            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }
      function commitPassiveEffectDurations(finishedRoot, finishedWork) {
        {
          if ((finishedWork.flags & Update) !== NoFlags) {
            switch (finishedWork.tag) {
              case Profiler: {
                var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                var _finishedWork$memoize = finishedWork.memoizedProps, id2 = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                var commitTime2 = getCommitTime();
                var phase = finishedWork.alternate === null ? "mount" : "update";
                {
                  if (isCurrentUpdateNested()) {
                    phase = "nested-update";
                  }
                }
                if (typeof onPostCommit === "function") {
                  onPostCommit(id2, phase, passiveEffectDuration, commitTime2);
                }
                var parentFiber = finishedWork.return;
                outer:
                  while (parentFiber !== null) {
                    switch (parentFiber.tag) {
                      case HostRoot:
                        var root2 = parentFiber.stateNode;
                        root2.passiveEffectDuration += passiveEffectDuration;
                        break outer;
                      case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        parentStateNode.passiveEffectDuration += passiveEffectDuration;
                        break outer;
                    }
                    parentFiber = parentFiber.return;
                  }
                break;
              }
            }
          }
        }
      }
      function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
        if ((finishedWork.flags & LayoutMask) !== NoFlags) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (!offscreenSubtreeWasHidden) {
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListMount(Layout | HasEffect, finishedWork);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Layout | HasEffect, finishedWork);
                }
              }
              break;
            }
            case ClassComponent: {
              var instance = finishedWork.stateNode;
              if (finishedWork.flags & Update) {
                if (!offscreenSubtreeWasHidden) {
                  if (current2 === null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        instance.componentDidMount();
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      instance.componentDidMount();
                    }
                  } else {
                    var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                    var prevState = current2.memoizedState;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    }
                  }
                }
              }
              var updateQueue = finishedWork.updateQueue;
              if (updateQueue !== null) {
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    }
                  }
                }
                commitUpdateQueue(finishedWork, updateQueue, instance);
              }
              break;
            }
            case HostRoot: {
              var _updateQueue = finishedWork.updateQueue;
              if (_updateQueue !== null) {
                var _instance = null;
                if (finishedWork.child !== null) {
                  switch (finishedWork.child.tag) {
                    case HostComponent:
                      _instance = getPublicInstance(finishedWork.child.stateNode);
                      break;
                    case ClassComponent:
                      _instance = finishedWork.child.stateNode;
                      break;
                  }
                }
                commitUpdateQueue(finishedWork, _updateQueue, _instance);
              }
              break;
            }
            case HostComponent: {
              var _instance2 = finishedWork.stateNode;
              if (current2 === null && finishedWork.flags & Update) {
                var type = finishedWork.type;
                var props = finishedWork.memoizedProps;
                commitMount(_instance2, type, props);
              }
              break;
            }
            case HostText: {
              break;
            }
            case HostPortal: {
              break;
            }
            case Profiler: {
              {
                var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                var effectDuration = finishedWork.stateNode.effectDuration;
                var commitTime2 = getCommitTime();
                var phase = current2 === null ? "mount" : "update";
                {
                  if (isCurrentUpdateNested()) {
                    phase = "nested-update";
                  }
                }
                if (typeof onRender === "function") {
                  onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                }
                {
                  if (typeof onCommit === "function") {
                    onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                  }
                  enqueuePendingPassiveProfilerEffect(finishedWork);
                  var parentFiber = finishedWork.return;
                  outer:
                    while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root2 = parentFiber.stateNode;
                          root2.effectDuration += effectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.effectDuration += effectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                }
              }
              break;
            }
            case SuspenseComponent: {
              commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
              break;
            }
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
            case TracingMarkerComponent: {
              break;
            }
            default:
              throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        if (!offscreenSubtreeWasHidden) {
          {
            if (finishedWork.flags & Ref) {
              commitAttachRef(finishedWork);
            }
          }
        }
      }
      function reappearLayoutEffectsOnFiber(node2) {
        switch (node2.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (node2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
              } finally {
                recordLayoutEffectDuration(node2);
              }
            } else {
              safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
            }
            break;
          }
          case ClassComponent: {
            var instance = node2.stateNode;
            if (typeof instance.componentDidMount === "function") {
              safelyCallComponentDidMount(node2, node2.return, instance);
            }
            safelyAttachRef(node2, node2.return);
            break;
          }
          case HostComponent: {
            safelyAttachRef(node2, node2.return);
            break;
          }
        }
      }
      function hideOrUnhideAllChildren(finishedWork, isHidden) {
        var hostSubtreeRoot = null;
        {
          var node2 = finishedWork;
          while (true) {
            if (node2.tag === HostComponent) {
              if (hostSubtreeRoot === null) {
                hostSubtreeRoot = node2;
                try {
                  var instance = node2.stateNode;
                  if (isHidden) {
                    hideInstance(instance);
                  } else {
                    unhideInstance(node2.stateNode, node2.memoizedProps);
                  }
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
            } else if (node2.tag === HostText) {
              if (hostSubtreeRoot === null) {
                try {
                  var _instance3 = node2.stateNode;
                  if (isHidden) {
                    hideTextInstance(_instance3);
                  } else {
                    unhideTextInstance(_instance3, node2.memoizedProps);
                  }
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
            } else if ((node2.tag === OffscreenComponent || node2.tag === LegacyHiddenComponent) && node2.memoizedState !== null && node2 !== finishedWork)
              ;
            else if (node2.child !== null) {
              node2.child.return = node2;
              node2 = node2.child;
              continue;
            }
            if (node2 === finishedWork) {
              return;
            }
            while (node2.sibling === null) {
              if (node2.return === null || node2.return === finishedWork) {
                return;
              }
              if (hostSubtreeRoot === node2) {
                hostSubtreeRoot = null;
              }
              node2 = node2.return;
            }
            if (hostSubtreeRoot === node2) {
              hostSubtreeRoot = null;
            }
            node2.sibling.return = node2.return;
            node2 = node2.sibling;
          }
        }
      }
      function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
          var instance = finishedWork.stateNode;
          var instanceToUse;
          switch (finishedWork.tag) {
            case HostComponent:
              instanceToUse = getPublicInstance(instance);
              break;
            default:
              instanceToUse = instance;
          }
          if (typeof ref === "function") {
            var retVal;
            if (finishedWork.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                retVal = ref(instanceToUse);
              } finally {
                recordLayoutEffectDuration(finishedWork);
              }
            } else {
              retVal = ref(instanceToUse);
            }
            {
              if (typeof retVal === "function") {
                error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
              }
            }
          } else {
            {
              if (!ref.hasOwnProperty("current")) {
                error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
              }
            }
            ref.current = instanceToUse;
          }
        }
      }
      function detachFiberMutation(fiber) {
        var alternate = fiber.alternate;
        if (alternate !== null) {
          alternate.return = null;
        }
        fiber.return = null;
      }
      function detachFiberAfterEffects(fiber) {
        var alternate = fiber.alternate;
        if (alternate !== null) {
          fiber.alternate = null;
          detachFiberAfterEffects(alternate);
        }
        {
          fiber.child = null;
          fiber.deletions = null;
          fiber.sibling = null;
          if (fiber.tag === HostComponent) {
            var hostInstance = fiber.stateNode;
            if (hostInstance !== null) {
              detachDeletedInstance(hostInstance);
            }
          }
          fiber.stateNode = null;
          {
            fiber._debugOwner = null;
          }
          {
            fiber.return = null;
            fiber.dependencies = null;
            fiber.memoizedProps = null;
            fiber.memoizedState = null;
            fiber.pendingProps = null;
            fiber.stateNode = null;
            fiber.updateQueue = null;
          }
        }
      }
      function getHostParentFiber(fiber) {
        var parent = fiber.return;
        while (parent !== null) {
          if (isHostParent(parent)) {
            return parent;
          }
          parent = parent.return;
        }
        throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
      }
      function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
      }
      function getHostSibling(fiber) {
        var node2 = fiber;
        siblings:
          while (true) {
            while (node2.sibling === null) {
              if (node2.return === null || isHostParent(node2.return)) {
                return null;
              }
              node2 = node2.return;
            }
            node2.sibling.return = node2.return;
            node2 = node2.sibling;
            while (node2.tag !== HostComponent && node2.tag !== HostText && node2.tag !== DehydratedFragment) {
              if (node2.flags & Placement) {
                continue siblings;
              }
              if (node2.child === null || node2.tag === HostPortal) {
                continue siblings;
              } else {
                node2.child.return = node2;
                node2 = node2.child;
              }
            }
            if (!(node2.flags & Placement)) {
              return node2.stateNode;
            }
          }
      }
      function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork);
        switch (parentFiber.tag) {
          case HostComponent: {
            var parent = parentFiber.stateNode;
            if (parentFiber.flags & ContentReset) {
              resetTextContent(parent);
              parentFiber.flags &= ~ContentReset;
            }
            var before = getHostSibling(finishedWork);
            insertOrAppendPlacementNode(finishedWork, before, parent);
            break;
          }
          case HostRoot:
          case HostPortal: {
            var _parent = parentFiber.stateNode.containerInfo;
            var _before = getHostSibling(finishedWork);
            insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
            break;
          }
          default:
            throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      function insertOrAppendPlacementNodeIntoContainer(node2, before, parent) {
        var tag = node2.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
          var stateNode = node2.stateNode;
          if (before) {
            insertInContainerBefore(parent, stateNode, before);
          } else {
            appendChildToContainer(parent, stateNode);
          }
        } else if (tag === HostPortal)
          ;
        else {
          var child = node2.child;
          if (child !== null) {
            insertOrAppendPlacementNodeIntoContainer(child, before, parent);
            var sibling = child.sibling;
            while (sibling !== null) {
              insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
              sibling = sibling.sibling;
            }
          }
        }
      }
      function insertOrAppendPlacementNode(node2, before, parent) {
        var tag = node2.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
          var stateNode = node2.stateNode;
          if (before) {
            insertBefore(parent, stateNode, before);
          } else {
            appendChild(parent, stateNode);
          }
        } else if (tag === HostPortal)
          ;
        else {
          var child = node2.child;
          if (child !== null) {
            insertOrAppendPlacementNode(child, before, parent);
            var sibling = child.sibling;
            while (sibling !== null) {
              insertOrAppendPlacementNode(sibling, before, parent);
              sibling = sibling.sibling;
            }
          }
        }
      }
      var hostParent = null;
      var hostParentIsContainer = false;
      function commitDeletionEffects(root2, returnFiber, deletedFiber) {
        {
          var parent = returnFiber;
          findParent:
            while (parent !== null) {
              switch (parent.tag) {
                case HostComponent: {
                  hostParent = parent.stateNode;
                  hostParentIsContainer = false;
                  break findParent;
                }
                case HostRoot: {
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break findParent;
                }
                case HostPortal: {
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break findParent;
                }
              }
              parent = parent.return;
            }
          if (hostParent === null) {
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
          hostParent = null;
          hostParentIsContainer = false;
        }
        detachFiberMutation(deletedFiber);
      }
      function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
        var child = parent.child;
        while (child !== null) {
          commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
          child = child.sibling;
        }
      }
      function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
        onCommitUnmount(deletedFiber);
        switch (deletedFiber.tag) {
          case HostComponent: {
            if (!offscreenSubtreeWasHidden) {
              safelyDetachRef(deletedFiber, nearestMountedAncestor);
            }
          }
          case HostText: {
            {
              var prevHostParent = hostParent;
              var prevHostParentIsContainer = hostParentIsContainer;
              hostParent = null;
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              hostParent = prevHostParent;
              hostParentIsContainer = prevHostParentIsContainer;
              if (hostParent !== null) {
                if (hostParentIsContainer) {
                  removeChildFromContainer(hostParent, deletedFiber.stateNode);
                } else {
                  removeChild(hostParent, deletedFiber.stateNode);
                }
              }
            }
            return;
          }
          case DehydratedFragment: {
            {
              if (hostParent !== null) {
                if (hostParentIsContainer) {
                  clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                } else {
                  clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                }
              }
            }
            return;
          }
          case HostPortal: {
            {
              var _prevHostParent = hostParent;
              var _prevHostParentIsContainer = hostParentIsContainer;
              hostParent = deletedFiber.stateNode.containerInfo;
              hostParentIsContainer = true;
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              hostParent = _prevHostParent;
              hostParentIsContainer = _prevHostParentIsContainer;
            }
            return;
          }
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent: {
            if (!offscreenSubtreeWasHidden) {
              var updateQueue = deletedFiber.updateQueue;
              if (updateQueue !== null) {
                var lastEffect = updateQueue.lastEffect;
                if (lastEffect !== null) {
                  var firstEffect = lastEffect.next;
                  var effect = firstEffect;
                  do {
                    var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                    if (destroy !== undefined) {
                      if ((tag & Insertion) !== NoFlags$1) {
                        safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                      } else if ((tag & Layout) !== NoFlags$1) {
                        {
                          markComponentLayoutEffectUnmountStarted(deletedFiber);
                        }
                        if (deletedFiber.mode & ProfileMode) {
                          startLayoutEffectTimer();
                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          recordLayoutEffectDuration(deletedFiber);
                        } else {
                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                        }
                        {
                          markComponentLayoutEffectUnmountStopped();
                        }
                      }
                    }
                    effect = effect.next;
                  } while (effect !== firstEffect);
                }
              }
            }
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case ClassComponent: {
            if (!offscreenSubtreeWasHidden) {
              safelyDetachRef(deletedFiber, nearestMountedAncestor);
              var instance = deletedFiber.stateNode;
              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
              }
            }
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case ScopeComponent: {
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case OffscreenComponent: {
            if (deletedFiber.mode & ConcurrentMode) {
              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            } else {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            }
            break;
          }
          default: {
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
        }
      }
      function commitSuspenseCallback(finishedWork) {
        var newState = finishedWork.memoizedState;
      }
      function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState === null) {
          var current2 = finishedWork.alternate;
          if (current2 !== null) {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var suspenseInstance = prevState.dehydrated;
              if (suspenseInstance !== null) {
                commitHydratedSuspenseInstance(suspenseInstance);
              }
            }
          }
        }
      }
      function attachSuspenseRetryListeners(finishedWork) {
        var wakeables = finishedWork.updateQueue;
        if (wakeables !== null) {
          finishedWork.updateQueue = null;
          var retryCache = finishedWork.stateNode;
          if (retryCache === null) {
            retryCache = finishedWork.stateNode = new PossiblyWeakSet;
          }
          wakeables.forEach(function(wakeable) {
            var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
            if (!retryCache.has(wakeable)) {
              retryCache.add(wakeable);
              {
                if (isDevToolsPresent) {
                  if (inProgressLanes !== null && inProgressRoot !== null) {
                    restorePendingUpdaters(inProgressRoot, inProgressLanes);
                  } else {
                    throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                  }
                }
              }
              wakeable.then(retry, retry);
            }
          });
        }
      }
      function commitMutationEffects(root2, finishedWork, committedLanes) {
        inProgressLanes = committedLanes;
        inProgressRoot = root2;
        setCurrentFiber(finishedWork);
        commitMutationEffectsOnFiber(finishedWork, root2);
        setCurrentFiber(finishedWork);
        inProgressLanes = null;
        inProgressRoot = null;
      }
      function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
        var deletions = parentFiber.deletions;
        if (deletions !== null) {
          for (var i2 = 0;i2 < deletions.length; i2++) {
            var childToDelete = deletions[i2];
            try {
              commitDeletionEffects(root2, parentFiber, childToDelete);
            } catch (error2) {
              captureCommitPhaseError(childToDelete, parentFiber, error2);
            }
          }
        }
        var prevDebugFiber = getCurrentFiber();
        if (parentFiber.subtreeFlags & MutationMask) {
          var child = parentFiber.child;
          while (child !== null) {
            setCurrentFiber(child);
            commitMutationEffectsOnFiber(child, root2);
            child = child.sibling;
          }
        }
        setCurrentFiber(prevDebugFiber);
      }
      function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
        var current2 = finishedWork.alternate;
        var flags = finishedWork.flags;
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Update) {
              try {
                commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                commitHookEffectListMount(Insertion | HasEffect, finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              if (finishedWork.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                recordLayoutEffectDuration(finishedWork);
              } else {
                try {
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
            }
            return;
          }
          case ClassComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Ref) {
              if (current2 !== null) {
                safelyDetachRef(current2, current2.return);
              }
            }
            return;
          }
          case HostComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Ref) {
              if (current2 !== null) {
                safelyDetachRef(current2, current2.return);
              }
            }
            {
              if (finishedWork.flags & ContentReset) {
                var instance = finishedWork.stateNode;
                try {
                  resetTextContent(instance);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
              if (flags & Update) {
                var _instance4 = finishedWork.stateNode;
                if (_instance4 != null) {
                  var newProps = finishedWork.memoizedProps;
                  var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                  var type = finishedWork.type;
                  var updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;
                  if (updatePayload !== null) {
                    try {
                      commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
              }
            }
            return;
          }
          case HostText: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Update) {
              {
                if (finishedWork.stateNode === null) {
                  throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                }
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps;
                var oldText = current2 !== null ? current2.memoizedProps : newText;
                try {
                  commitTextUpdate(textInstance, oldText, newText);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
            }
            return;
          }
          case HostRoot: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Update) {
              {
                if (current2 !== null) {
                  var prevRootState = current2.memoizedState;
                  if (prevRootState.isDehydrated) {
                    try {
                      commitHydratedContainer(root2.containerInfo);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
              }
            }
            return;
          }
          case HostPortal: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            return;
          }
          case SuspenseComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            var offscreenFiber = finishedWork.child;
            if (offscreenFiber.flags & Visibility) {
              var offscreenInstance = offscreenFiber.stateNode;
              var newState = offscreenFiber.memoizedState;
              var isHidden = newState !== null;
              offscreenInstance.isHidden = isHidden;
              if (isHidden) {
                var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                if (!wasHidden) {
                  markCommitTimeOfFallback();
                }
              }
            }
            if (flags & Update) {
              try {
                commitSuspenseCallback(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              attachSuspenseRetryListeners(finishedWork);
            }
            return;
          }
          case OffscreenComponent: {
            var _wasHidden = current2 !== null && current2.memoizedState !== null;
            if (finishedWork.mode & ConcurrentMode) {
              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
              recursivelyTraverseMutationEffects(root2, finishedWork);
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            } else {
              recursivelyTraverseMutationEffects(root2, finishedWork);
            }
            commitReconciliationEffects(finishedWork);
            if (flags & Visibility) {
              var _offscreenInstance = finishedWork.stateNode;
              var _newState = finishedWork.memoizedState;
              var _isHidden = _newState !== null;
              var offscreenBoundary = finishedWork;
              _offscreenInstance.isHidden = _isHidden;
              {
                if (_isHidden) {
                  if (!_wasHidden) {
                    if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                      nextEffect = offscreenBoundary;
                      var offscreenChild = offscreenBoundary.child;
                      while (offscreenChild !== null) {
                        nextEffect = offscreenChild;
                        disappearLayoutEffects_begin(offscreenChild);
                        offscreenChild = offscreenChild.sibling;
                      }
                    }
                  }
                }
              }
              {
                hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
              }
            }
            return;
          }
          case SuspenseListComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Update) {
              attachSuspenseRetryListeners(finishedWork);
            }
            return;
          }
          case ScopeComponent: {
            return;
          }
          default: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            return;
          }
        }
      }
      function commitReconciliationEffects(finishedWork) {
        var flags = finishedWork.flags;
        if (flags & Placement) {
          try {
            commitPlacement(finishedWork);
          } catch (error2) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error2);
          }
          finishedWork.flags &= ~Placement;
        }
        if (flags & Hydrating) {
          finishedWork.flags &= ~Hydrating;
        }
      }
      function commitLayoutEffects(finishedWork, root2, committedLanes) {
        inProgressLanes = committedLanes;
        inProgressRoot = root2;
        nextEffect = finishedWork;
        commitLayoutEffects_begin(finishedWork, root2, committedLanes);
        inProgressLanes = null;
        inProgressRoot = null;
      }
      function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
        var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var firstChild = fiber.child;
          if (fiber.tag === OffscreenComponent && isModernRoot) {
            var isHidden = fiber.memoizedState !== null;
            var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
            if (newOffscreenSubtreeIsHidden) {
              commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              continue;
            } else {
              var current2 = fiber.alternate;
              var wasHidden = current2 !== null && current2.memoizedState !== null;
              var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
              var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
              offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
              if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                nextEffect = fiber;
                reappearLayoutEffects_begin(fiber);
              }
              var child = firstChild;
              while (child !== null) {
                nextEffect = child;
                commitLayoutEffects_begin(child, root2, committedLanes);
                child = child.sibling;
              }
              nextEffect = fiber;
              offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              continue;
            }
          }
          if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
            firstChild.return = fiber;
            nextEffect = firstChild;
          } else {
            commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
          }
        }
      }
      function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          if ((fiber.flags & LayoutMask) !== NoFlags) {
            var current2 = fiber.alternate;
            setCurrentFiber(fiber);
            try {
              commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
          }
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function disappearLayoutEffects_begin(subtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var firstChild = fiber.child;
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              if (fiber.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  commitHookEffectListUnmount(Layout, fiber, fiber.return);
                } finally {
                  recordLayoutEffectDuration(fiber);
                }
              } else {
                commitHookEffectListUnmount(Layout, fiber, fiber.return);
              }
              break;
            }
            case ClassComponent: {
              safelyDetachRef(fiber, fiber.return);
              var instance = fiber.stateNode;
              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(fiber, fiber.return, instance);
              }
              break;
            }
            case HostComponent: {
              safelyDetachRef(fiber, fiber.return);
              break;
            }
            case OffscreenComponent: {
              var isHidden = fiber.memoizedState !== null;
              if (isHidden) {
                disappearLayoutEffects_complete(subtreeRoot);
                continue;
              }
              break;
            }
          }
          if (firstChild !== null) {
            firstChild.return = fiber;
            nextEffect = firstChild;
          } else {
            disappearLayoutEffects_complete(subtreeRoot);
          }
        }
      }
      function disappearLayoutEffects_complete(subtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function reappearLayoutEffects_begin(subtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var firstChild = fiber.child;
          if (fiber.tag === OffscreenComponent) {
            var isHidden = fiber.memoizedState !== null;
            if (isHidden) {
              reappearLayoutEffects_complete(subtreeRoot);
              continue;
            }
          }
          if (firstChild !== null) {
            firstChild.return = fiber;
            nextEffect = firstChild;
          } else {
            reappearLayoutEffects_complete(subtreeRoot);
          }
        }
      }
      function reappearLayoutEffects_complete(subtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          setCurrentFiber(fiber);
          try {
            reappearLayoutEffectsOnFiber(fiber);
          } catch (error2) {
            captureCommitPhaseError(fiber, fiber.return, error2);
          }
          resetCurrentFiber();
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
        nextEffect = finishedWork;
        commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
      }
      function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var firstChild = fiber.child;
          if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
            firstChild.return = fiber;
            nextEffect = firstChild;
          } else {
            commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
          }
        }
      }
      function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          if ((fiber.flags & Passive) !== NoFlags) {
            setCurrentFiber(fiber);
            try {
              commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
          }
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (finishedWork.mode & ProfileMode) {
              startPassiveEffectTimer();
              try {
                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
              } finally {
                recordPassiveEffectDuration(finishedWork);
              }
            } else {
              commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
            }
            break;
          }
        }
      }
      function commitPassiveUnmountEffects(firstChild) {
        nextEffect = firstChild;
        commitPassiveUnmountEffects_begin();
      }
      function commitPassiveUnmountEffects_begin() {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var child = fiber.child;
          if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
            var deletions = fiber.deletions;
            if (deletions !== null) {
              for (var i2 = 0;i2 < deletions.length; i2++) {
                var fiberToDelete = deletions[i2];
                nextEffect = fiberToDelete;
                commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
              }
              {
                var previousFiber = fiber.alternate;
                if (previousFiber !== null) {
                  var detachedChild = previousFiber.child;
                  if (detachedChild !== null) {
                    previousFiber.child = null;
                    do {
                      var detachedSibling = detachedChild.sibling;
                      detachedChild.sibling = null;
                      detachedChild = detachedSibling;
                    } while (detachedChild !== null);
                  }
                }
              }
              nextEffect = fiber;
            }
          }
          if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
            child.return = fiber;
            nextEffect = child;
          } else {
            commitPassiveUnmountEffects_complete();
          }
        }
      }
      function commitPassiveUnmountEffects_complete() {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          if ((fiber.flags & Passive) !== NoFlags) {
            setCurrentFiber(fiber);
            commitPassiveUnmountOnFiber(fiber);
            resetCurrentFiber();
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitPassiveUnmountOnFiber(finishedWork) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (finishedWork.mode & ProfileMode) {
              startPassiveEffectTimer();
              commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
              recordPassiveEffectDuration(finishedWork);
            } else {
              commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
            }
            break;
          }
        }
      }
      function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          setCurrentFiber(fiber);
          commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
          resetCurrentFiber();
          var child = fiber.child;
          if (child !== null) {
            child.return = fiber;
            nextEffect = child;
          } else {
            commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
          }
        }
      }
      function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var sibling = fiber.sibling;
          var returnFiber = fiber.return;
          {
            detachFiberAfterEffects(fiber);
            if (fiber === deletedSubtreeRoot) {
              nextEffect = null;
              return;
            }
          }
          if (sibling !== null) {
            sibling.return = returnFiber;
            nextEffect = sibling;
            return;
          }
          nextEffect = returnFiber;
        }
      }
      function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
        switch (current2.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (current2.mode & ProfileMode) {
              startPassiveEffectTimer();
              commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
              recordPassiveEffectDuration(current2);
            } else {
              commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
            }
            break;
          }
        }
      }
      function invokeLayoutEffectMountInDEV(fiber) {
        {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              try {
                commitHookEffectListMount(Layout | HasEffect, fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              break;
            }
            case ClassComponent: {
              var instance = fiber.stateNode;
              try {
                instance.componentDidMount();
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              break;
            }
          }
        }
      }
      function invokePassiveEffectMountInDEV(fiber) {
        {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              try {
                commitHookEffectListMount(Passive$1 | HasEffect, fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              break;
            }
          }
        }
      }
      function invokeLayoutEffectUnmountInDEV(fiber) {
        {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              try {
                commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              break;
            }
            case ClassComponent: {
              var instance = fiber.stateNode;
              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(fiber, fiber.return, instance);
              }
              break;
            }
          }
        }
      }
      function invokePassiveEffectUnmountInDEV(fiber) {
        {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              try {
                commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
            }
          }
        }
      }
      var COMPONENT_TYPE = 0;
      var HAS_PSEUDO_CLASS_TYPE = 1;
      var ROLE_TYPE = 2;
      var TEST_NAME_TYPE = 3;
      var TEXT_TYPE = 4;
      if (typeof Symbol === "function" && Symbol.for) {
        var symbolFor = Symbol.for;
        COMPONENT_TYPE = symbolFor("selector.component");
        HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
        ROLE_TYPE = symbolFor("selector.role");
        TEST_NAME_TYPE = symbolFor("selector.test_id");
        TEXT_TYPE = symbolFor("selector.text");
      }
      var commitHooks = [];
      function onCommitRoot$1() {
        {
          commitHooks.forEach(function(commitHook) {
            return commitHook();
          });
        }
      }
      var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
      function isLegacyActEnvironment(fiber) {
        {
          var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : undefined;
          var jestIsDefined = typeof jest !== "undefined";
          return jestIsDefined && isReactActEnvironmentGlobal !== false;
        }
      }
      function isConcurrentActEnvironment() {
        {
          var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : undefined;
          if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
            error("The current testing environment is not configured to support act(...)");
          }
          return isReactActEnvironmentGlobal;
        }
      }
      var ceil = Math.ceil;
      var { ReactCurrentDispatcher: ReactCurrentDispatcher$2, ReactCurrentOwner: ReactCurrentOwner$2, ReactCurrentBatchConfig: ReactCurrentBatchConfig$3, ReactCurrentActQueue: ReactCurrentActQueue$1 } = ReactSharedInternals;
      var NoContext = 0;
      var BatchedContext = 1;
      var RenderContext = 2;
      var CommitContext = 4;
      var RootInProgress = 0;
      var RootFatalErrored = 1;
      var RootErrored = 2;
      var RootSuspended = 3;
      var RootSuspendedWithDelay = 4;
      var RootCompleted = 5;
      var RootDidNotComplete = 6;
      var executionContext = NoContext;
      var workInProgressRoot = null;
      var workInProgress = null;
      var workInProgressRootRenderLanes = NoLanes;
      var subtreeRenderLanes = NoLanes;
      var subtreeRenderLanesCursor = createCursor(NoLanes);
      var workInProgressRootExitStatus = RootInProgress;
      var workInProgressRootFatalError = null;
      var workInProgressRootIncludedLanes = NoLanes;
      var workInProgressRootSkippedLanes = NoLanes;
      var workInProgressRootInterleavedUpdatedLanes = NoLanes;
      var workInProgressRootPingedLanes = NoLanes;
      var workInProgressRootConcurrentErrors = null;
      var workInProgressRootRecoverableErrors = null;
      var globalMostRecentFallbackTime = 0;
      var FALLBACK_THROTTLE_MS = 500;
      var workInProgressRootRenderTargetTime = Infinity;
      var RENDER_TIMEOUT_MS = 500;
      var workInProgressTransitions = null;
      function resetRenderTimer() {
        workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
      }
      function getRenderTargetTime() {
        return workInProgressRootRenderTargetTime;
      }
      var hasUncaughtError = false;
      var firstUncaughtError = null;
      var legacyErrorBoundariesThatAlreadyFailed = null;
      var rootDoesHavePassiveEffects = false;
      var rootWithPendingPassiveEffects = null;
      var pendingPassiveEffectsLanes = NoLanes;
      var pendingPassiveProfilerEffects = [];
      var pendingPassiveTransitions = null;
      var NESTED_UPDATE_LIMIT = 50;
      var nestedUpdateCount = 0;
      var rootWithNestedUpdates = null;
      var isFlushingPassiveEffects = false;
      var didScheduleUpdateDuringPassiveEffects = false;
      var NESTED_PASSIVE_UPDATE_LIMIT = 50;
      var nestedPassiveUpdateCount = 0;
      var rootWithPassiveNestedUpdates = null;
      var currentEventTime = NoTimestamp;
      var currentEventTransitionLane = NoLanes;
      var isRunningInsertionEffect = false;
      function getWorkInProgressRoot() {
        return workInProgressRoot;
      }
      function requestEventTime() {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          return now();
        }
        if (currentEventTime !== NoTimestamp) {
          return currentEventTime;
        }
        currentEventTime = now();
        return currentEventTime;
      }
      function requestUpdateLane(fiber) {
        var mode = fiber.mode;
        if ((mode & ConcurrentMode) === NoMode) {
          return SyncLane;
        } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
          return pickArbitraryLane(workInProgressRootRenderLanes);
        }
        var isTransition = requestCurrentTransition() !== NoTransition;
        if (isTransition) {
          if (ReactCurrentBatchConfig$3.transition !== null) {
            var transition = ReactCurrentBatchConfig$3.transition;
            if (!transition._updatedFibers) {
              transition._updatedFibers = new Set;
            }
            transition._updatedFibers.add(fiber);
          }
          if (currentEventTransitionLane === NoLane) {
            currentEventTransitionLane = claimNextTransitionLane();
          }
          return currentEventTransitionLane;
        }
        var updateLane = getCurrentUpdatePriority();
        if (updateLane !== NoLane) {
          return updateLane;
        }
        var eventLane = getCurrentEventPriority();
        return eventLane;
      }
      function requestRetryLane(fiber) {
        var mode = fiber.mode;
        if ((mode & ConcurrentMode) === NoMode) {
          return SyncLane;
        }
        return claimNextRetryLane();
      }
      function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
        checkForNestedUpdates();
        {
          if (isRunningInsertionEffect) {
            error("useInsertionEffect must not schedule updates.");
          }
        }
        {
          if (isFlushingPassiveEffects) {
            didScheduleUpdateDuringPassiveEffects = true;
          }
        }
        markRootUpdated(root2, lane, eventTime);
        if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
          warnAboutRenderPhaseUpdatesInDEV(fiber);
        } else {
          {
            if (isDevToolsPresent) {
              addFiberToLanesMap(root2, fiber, lane);
            }
          }
          warnIfUpdatesNotWrappedWithActDEV(fiber);
          if (root2 === workInProgressRoot) {
            if ((executionContext & RenderContext) === NoContext) {
              workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
            }
            if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
              markRootSuspended$1(root2, workInProgressRootRenderLanes);
            }
          }
          ensureRootIsScheduled(root2, eventTime);
          if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && !ReactCurrentActQueue$1.isBatchingLegacy) {
            resetRenderTimer();
            flushSyncCallbacksOnlyInLegacyMode();
          }
        }
      }
      function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
        var current2 = root2.current;
        current2.lanes = lane;
        markRootUpdated(root2, lane, eventTime);
        ensureRootIsScheduled(root2, eventTime);
      }
      function isUnsafeClassRenderPhaseUpdate(fiber) {
        return (executionContext & RenderContext) !== NoContext;
      }
      function ensureRootIsScheduled(root2, currentTime) {
        var existingCallbackNode = root2.callbackNode;
        markStarvedLanesAsExpired(root2, currentTime);
        var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (nextLanes === NoLanes) {
          if (existingCallbackNode !== null) {
            cancelCallback$1(existingCallbackNode);
          }
          root2.callbackNode = null;
          root2.callbackPriority = NoLane;
          return;
        }
        var newCallbackPriority = getHighestPriorityLane(nextLanes);
        var existingCallbackPriority = root2.callbackPriority;
        if (existingCallbackPriority === newCallbackPriority && !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
          {
            if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
              error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          return;
        }
        if (existingCallbackNode != null) {
          cancelCallback$1(existingCallbackNode);
        }
        var newCallbackNode;
        if (newCallbackPriority === SyncLane) {
          if (root2.tag === LegacyRoot) {
            if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
              ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
            }
            scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
          } else {
            scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
          }
          {
            if (ReactCurrentActQueue$1.current !== null) {
              ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
            } else {
              scheduleMicrotask(function() {
                if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                  flushSyncCallbacks();
                }
              });
            }
          }
          newCallbackNode = null;
        } else {
          var schedulerPriorityLevel;
          switch (lanesToEventPriority(nextLanes)) {
            case DiscreteEventPriority:
              schedulerPriorityLevel = ImmediatePriority;
              break;
            case ContinuousEventPriority:
              schedulerPriorityLevel = UserBlockingPriority;
              break;
            case DefaultEventPriority:
              schedulerPriorityLevel = NormalPriority;
              break;
            case IdleEventPriority:
              schedulerPriorityLevel = IdlePriority;
              break;
            default:
              schedulerPriorityLevel = NormalPriority;
              break;
          }
          newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
        }
        root2.callbackPriority = newCallbackPriority;
        root2.callbackNode = newCallbackNode;
      }
      function performConcurrentWorkOnRoot(root2, didTimeout) {
        {
          resetNestedUpdateFlag();
        }
        currentEventTime = NoTimestamp;
        currentEventTransitionLane = NoLanes;
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          throw new Error("Should not already be working.");
        }
        var originalCallbackNode = root2.callbackNode;
        var didFlushPassiveEffects = flushPassiveEffects();
        if (didFlushPassiveEffects) {
          if (root2.callbackNode !== originalCallbackNode) {
            return null;
          }
        }
        var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (lanes === NoLanes) {
          return null;
        }
        var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
        var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
        if (exitStatus !== RootInProgress) {
          if (exitStatus === RootErrored) {
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
            if (errorRetryLanes !== NoLanes) {
              lanes = errorRetryLanes;
              exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
            }
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root2, NoLanes);
            markRootSuspended$1(root2, lanes);
            ensureRootIsScheduled(root2, now());
            throw fatalError;
          }
          if (exitStatus === RootDidNotComplete) {
            markRootSuspended$1(root2, lanes);
          } else {
            var renderWasConcurrent = !includesBlockingLane(root2, lanes);
            var finishedWork = root2.current.alternate;
            if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
              exitStatus = renderRootSync(root2, lanes);
              if (exitStatus === RootErrored) {
                var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                if (_errorRetryLanes !== NoLanes) {
                  lanes = _errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var _fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw _fatalError;
              }
            }
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            finishConcurrentRender(root2, exitStatus, lanes);
          }
        }
        ensureRootIsScheduled(root2, now());
        if (root2.callbackNode === originalCallbackNode) {
          return performConcurrentWorkOnRoot.bind(null, root2);
        }
        return null;
      }
      function recoverFromConcurrentError(root2, errorRetryLanes) {
        var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
        if (isRootDehydrated(root2)) {
          var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
          rootWorkInProgress.flags |= ForceClientRender;
          {
            errorHydratingContainer(root2.containerInfo);
          }
        }
        var exitStatus = renderRootSync(root2, errorRetryLanes);
        if (exitStatus !== RootErrored) {
          var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
          workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
          if (errorsFromSecondAttempt !== null) {
            queueRecoverableErrors(errorsFromSecondAttempt);
          }
        }
        return exitStatus;
      }
      function queueRecoverableErrors(errors) {
        if (workInProgressRootRecoverableErrors === null) {
          workInProgressRootRecoverableErrors = errors;
        } else {
          workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
        }
      }
      function finishConcurrentRender(root2, exitStatus, lanes) {
        switch (exitStatus) {
          case RootInProgress:
          case RootFatalErrored: {
            throw new Error("Root did not complete. This is a bug in React.");
          }
          case RootErrored: {
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          case RootSuspended: {
            markRootSuspended$1(root2, lanes);
            if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
              var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
              if (msUntilTimeout > 10) {
                var nextLanes = getNextLanes(root2, NoLanes);
                if (nextLanes !== NoLanes) {
                  break;
                }
                var suspendedLanes = root2.suspendedLanes;
                if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                  var eventTime = requestEventTime();
                  markRootPinged(root2, suspendedLanes);
                  break;
                }
                root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                break;
              }
            }
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          case RootSuspendedWithDelay: {
            markRootSuspended$1(root2, lanes);
            if (includesOnlyTransitions(lanes)) {
              break;
            }
            if (!shouldForceFlushFallbacksInDEV()) {
              var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
              var eventTimeMs = mostRecentEventTime;
              var timeElapsedMs = now() - eventTimeMs;
              var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
              if (_msUntilTimeout > 10) {
                root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                break;
              }
            }
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          case RootCompleted: {
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          default: {
            throw new Error("Unknown root exit status.");
          }
        }
      }
      function isRenderConsistentWithExternalStores(finishedWork) {
        var node2 = finishedWork;
        while (true) {
          if (node2.flags & StoreConsistency) {
            var updateQueue = node2.updateQueue;
            if (updateQueue !== null) {
              var checks = updateQueue.stores;
              if (checks !== null) {
                for (var i2 = 0;i2 < checks.length; i2++) {
                  var check = checks[i2];
                  var getSnapshot = check.getSnapshot;
                  var renderedValue = check.value;
                  try {
                    if (!objectIs(getSnapshot(), renderedValue)) {
                      return false;
                    }
                  } catch (error2) {
                    return false;
                  }
                }
              }
            }
          }
          var child = node2.child;
          if (node2.subtreeFlags & StoreConsistency && child !== null) {
            child.return = node2;
            node2 = child;
            continue;
          }
          if (node2 === finishedWork) {
            return true;
          }
          while (node2.sibling === null) {
            if (node2.return === null || node2.return === finishedWork) {
              return true;
            }
            node2 = node2.return;
          }
          node2.sibling.return = node2.return;
          node2 = node2.sibling;
        }
        return true;
      }
      function markRootSuspended$1(root2, suspendedLanes) {
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
        markRootSuspended(root2, suspendedLanes);
      }
      function performSyncWorkOnRoot(root2) {
        {
          syncNestedUpdateFlag();
        }
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          throw new Error("Should not already be working.");
        }
        flushPassiveEffects();
        var lanes = getNextLanes(root2, NoLanes);
        if (!includesSomeLane(lanes, SyncLane)) {
          ensureRootIsScheduled(root2, now());
          return null;
        }
        var exitStatus = renderRootSync(root2, lanes);
        if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
          var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
          if (errorRetryLanes !== NoLanes) {
            lanes = errorRetryLanes;
            exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
          }
        }
        if (exitStatus === RootFatalErrored) {
          var fatalError = workInProgressRootFatalError;
          prepareFreshStack(root2, NoLanes);
          markRootSuspended$1(root2, lanes);
          ensureRootIsScheduled(root2, now());
          throw fatalError;
        }
        if (exitStatus === RootDidNotComplete) {
          throw new Error("Root did not complete. This is a bug in React.");
        }
        var finishedWork = root2.current.alternate;
        root2.finishedWork = finishedWork;
        root2.finishedLanes = lanes;
        commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
        ensureRootIsScheduled(root2, now());
        return null;
      }
      function flushRoot(root2, lanes) {
        if (lanes !== NoLanes) {
          markRootEntangled(root2, mergeLanes(lanes, SyncLane));
          ensureRootIsScheduled(root2, now());
          if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
            resetRenderTimer();
            flushSyncCallbacks();
          }
        }
      }
      function batchedUpdates$1(fn, a22) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
          return fn(a22);
        } finally {
          executionContext = prevExecutionContext;
          if (executionContext === NoContext && !ReactCurrentActQueue$1.isBatchingLegacy) {
            resetRenderTimer();
            flushSyncCallbacksOnlyInLegacyMode();
          }
        }
      }
      function discreteUpdates(fn, a22, b3, c22, d2) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
          ReactCurrentBatchConfig$3.transition = null;
          setCurrentUpdatePriority(DiscreteEventPriority);
          return fn(a22, b3, c22, d2);
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$3.transition = prevTransition;
          if (executionContext === NoContext) {
            resetRenderTimer();
          }
        }
      }
      function flushSync(fn) {
        if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
          flushPassiveEffects();
        }
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        var previousPriority = getCurrentUpdatePriority();
        try {
          ReactCurrentBatchConfig$3.transition = null;
          setCurrentUpdatePriority(DiscreteEventPriority);
          if (fn) {
            return fn();
          } else {
            return;
          }
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$3.transition = prevTransition;
          executionContext = prevExecutionContext;
          if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
            flushSyncCallbacks();
          }
        }
      }
      function isAlreadyRendering() {
        return (executionContext & (RenderContext | CommitContext)) !== NoContext;
      }
      function pushRenderLanes(fiber, lanes) {
        push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
        subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
        workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
      }
      function popRenderLanes(fiber) {
        subtreeRenderLanes = subtreeRenderLanesCursor.current;
        pop(subtreeRenderLanesCursor, fiber);
      }
      function prepareFreshStack(root2, lanes) {
        root2.finishedWork = null;
        root2.finishedLanes = NoLanes;
        var timeoutHandle = root2.timeoutHandle;
        if (timeoutHandle !== noTimeout) {
          root2.timeoutHandle = noTimeout;
          cancelTimeout(timeoutHandle);
        }
        if (workInProgress !== null) {
          var interruptedWork = workInProgress.return;
          while (interruptedWork !== null) {
            var current2 = interruptedWork.alternate;
            unwindInterruptedWork(current2, interruptedWork);
            interruptedWork = interruptedWork.return;
          }
        }
        workInProgressRoot = root2;
        var rootWorkInProgress = createWorkInProgress(root2.current, null);
        workInProgress = rootWorkInProgress;
        workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
        workInProgressRootExitStatus = RootInProgress;
        workInProgressRootFatalError = null;
        workInProgressRootSkippedLanes = NoLanes;
        workInProgressRootInterleavedUpdatedLanes = NoLanes;
        workInProgressRootPingedLanes = NoLanes;
        workInProgressRootConcurrentErrors = null;
        workInProgressRootRecoverableErrors = null;
        finishQueueingConcurrentUpdates();
        {
          ReactStrictModeWarnings.discardPendingWarnings();
        }
        return rootWorkInProgress;
      }
      function handleError(root2, thrownValue) {
        do {
          var erroredWork = workInProgress;
          try {
            resetContextDependencies();
            resetHooksAfterThrow();
            resetCurrentFiber();
            ReactCurrentOwner$2.current = null;
            if (erroredWork === null || erroredWork.return === null) {
              workInProgressRootExitStatus = RootFatalErrored;
              workInProgressRootFatalError = thrownValue;
              workInProgress = null;
              return;
            }
            if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
              stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
            }
            if (enableSchedulingProfiler) {
              markComponentRenderStopped();
              if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                var wakeable = thrownValue;
                markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
              } else {
                markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
              }
            }
            throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
            completeUnitOfWork(erroredWork);
          } catch (yetAnotherThrownValue) {
            thrownValue = yetAnotherThrownValue;
            if (workInProgress === erroredWork && erroredWork !== null) {
              erroredWork = erroredWork.return;
              workInProgress = erroredWork;
            } else {
              erroredWork = workInProgress;
            }
            continue;
          }
          return;
        } while (true);
      }
      function pushDispatcher() {
        var prevDispatcher = ReactCurrentDispatcher$2.current;
        ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
        if (prevDispatcher === null) {
          return ContextOnlyDispatcher;
        } else {
          return prevDispatcher;
        }
      }
      function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$2.current = prevDispatcher;
      }
      function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now();
      }
      function markSkippedUpdateLanes(lane) {
        workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
      }
      function renderDidSuspend() {
        if (workInProgressRootExitStatus === RootInProgress) {
          workInProgressRootExitStatus = RootSuspended;
        }
      }
      function renderDidSuspendDelayIfPossible() {
        if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
          workInProgressRootExitStatus = RootSuspendedWithDelay;
        }
        if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
          markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
        }
      }
      function renderDidError(error2) {
        if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
          workInProgressRootExitStatus = RootErrored;
        }
        if (workInProgressRootConcurrentErrors === null) {
          workInProgressRootConcurrentErrors = [error2];
        } else {
          workInProgressRootConcurrentErrors.push(error2);
        }
      }
      function renderHasNotSuspendedYet() {
        return workInProgressRootExitStatus === RootInProgress;
      }
      function renderRootSync(root2, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();
        if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
          {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root2.memoizedUpdaters;
              if (memoizedUpdaters.size > 0) {
                restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                memoizedUpdaters.clear();
              }
              movePendingFibersToMemoized(root2, lanes);
            }
          }
          workInProgressTransitions = getTransitionsForLanes();
          prepareFreshStack(root2, lanes);
        }
        {
          markRenderStarted(lanes);
        }
        do {
          try {
            workLoopSync();
            break;
          } catch (thrownValue) {
            handleError(root2, thrownValue);
          }
        } while (true);
        resetContextDependencies();
        executionContext = prevExecutionContext;
        popDispatcher(prevDispatcher);
        if (workInProgress !== null) {
          throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
        }
        {
          markRenderStopped();
        }
        workInProgressRoot = null;
        workInProgressRootRenderLanes = NoLanes;
        return workInProgressRootExitStatus;
      }
      function workLoopSync() {
        while (workInProgress !== null) {
          performUnitOfWork(workInProgress);
        }
      }
      function renderRootConcurrent(root2, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();
        if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
          {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root2.memoizedUpdaters;
              if (memoizedUpdaters.size > 0) {
                restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                memoizedUpdaters.clear();
              }
              movePendingFibersToMemoized(root2, lanes);
            }
          }
          workInProgressTransitions = getTransitionsForLanes();
          resetRenderTimer();
          prepareFreshStack(root2, lanes);
        }
        {
          markRenderStarted(lanes);
        }
        do {
          try {
            workLoopConcurrent();
            break;
          } catch (thrownValue) {
            handleError(root2, thrownValue);
          }
        } while (true);
        resetContextDependencies();
        popDispatcher(prevDispatcher);
        executionContext = prevExecutionContext;
        if (workInProgress !== null) {
          {
            markRenderYielded();
          }
          return RootInProgress;
        } else {
          {
            markRenderStopped();
          }
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        }
      }
      function workLoopConcurrent() {
        while (workInProgress !== null && !shouldYield()) {
          performUnitOfWork(workInProgress);
        }
      }
      function performUnitOfWork(unitOfWork) {
        var current2 = unitOfWork.alternate;
        setCurrentFiber(unitOfWork);
        var next2;
        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
          startProfilerTimer(unitOfWork);
          next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
          stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        } else {
          next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
        }
        resetCurrentFiber();
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        if (next2 === null) {
          completeUnitOfWork(unitOfWork);
        } else {
          workInProgress = next2;
        }
        ReactCurrentOwner$2.current = null;
      }
      function completeUnitOfWork(unitOfWork) {
        var completedWork = unitOfWork;
        do {
          var current2 = completedWork.alternate;
          var returnFiber = completedWork.return;
          if ((completedWork.flags & Incomplete) === NoFlags) {
            setCurrentFiber(completedWork);
            var next2 = undefined;
            if ((completedWork.mode & ProfileMode) === NoMode) {
              next2 = completeWork(current2, completedWork, subtreeRenderLanes);
            } else {
              startProfilerTimer(completedWork);
              next2 = completeWork(current2, completedWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
            }
            resetCurrentFiber();
            if (next2 !== null) {
              workInProgress = next2;
              return;
            }
          } else {
            var _next = unwindWork(current2, completedWork);
            if (_next !== null) {
              _next.flags &= HostEffectMask;
              workInProgress = _next;
              return;
            }
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              var actualDuration = completedWork.actualDuration;
              var child = completedWork.child;
              while (child !== null) {
                actualDuration += child.actualDuration;
                child = child.sibling;
              }
              completedWork.actualDuration = actualDuration;
            }
            if (returnFiber !== null) {
              returnFiber.flags |= Incomplete;
              returnFiber.subtreeFlags = NoFlags;
              returnFiber.deletions = null;
            } else {
              workInProgressRootExitStatus = RootDidNotComplete;
              workInProgress = null;
              return;
            }
          }
          var siblingFiber = completedWork.sibling;
          if (siblingFiber !== null) {
            workInProgress = siblingFiber;
            return;
          }
          completedWork = returnFiber;
          workInProgress = completedWork;
        } while (completedWork !== null);
        if (workInProgressRootExitStatus === RootInProgress) {
          workInProgressRootExitStatus = RootCompleted;
        }
      }
      function commitRoot(root2, recoverableErrors, transitions) {
        var previousUpdateLanePriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
          ReactCurrentBatchConfig$3.transition = null;
          setCurrentUpdatePriority(DiscreteEventPriority);
          commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
        } finally {
          ReactCurrentBatchConfig$3.transition = prevTransition;
          setCurrentUpdatePriority(previousUpdateLanePriority);
        }
        return null;
      }
      function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
        do {
          flushPassiveEffects();
        } while (rootWithPendingPassiveEffects !== null);
        flushRenderPhaseStrictModeWarningsInDEV();
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          throw new Error("Should not already be working.");
        }
        var finishedWork = root2.finishedWork;
        var lanes = root2.finishedLanes;
        {
          markCommitStarted(lanes);
        }
        if (finishedWork === null) {
          {
            markCommitStopped();
          }
          return null;
        } else {
          {
            if (lanes === NoLanes) {
              error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
            }
          }
        }
        root2.finishedWork = null;
        root2.finishedLanes = NoLanes;
        if (finishedWork === root2.current) {
          throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
        }
        root2.callbackNode = null;
        root2.callbackPriority = NoLane;
        var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
        markRootFinished(root2, remainingLanes);
        if (root2 === workInProgressRoot) {
          workInProgressRoot = null;
          workInProgress = null;
          workInProgressRootRenderLanes = NoLanes;
        }
        if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
          if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            pendingPassiveTransitions = transitions;
            scheduleCallback$1(NormalPriority, function() {
              flushPassiveEffects();
              return null;
            });
          }
        }
        var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
        var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
        if (subtreeHasEffects || rootHasEffect) {
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          ReactCurrentBatchConfig$3.transition = null;
          var previousPriority = getCurrentUpdatePriority();
          setCurrentUpdatePriority(DiscreteEventPriority);
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          ReactCurrentOwner$2.current = null;
          var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
          {
            recordCommitTime();
          }
          commitMutationEffects(root2, finishedWork, lanes);
          resetAfterCommit(root2.containerInfo);
          root2.current = finishedWork;
          {
            markLayoutEffectsStarted(lanes);
          }
          commitLayoutEffects(finishedWork, root2, lanes);
          {
            markLayoutEffectsStopped();
          }
          requestPaint();
          executionContext = prevExecutionContext;
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$3.transition = prevTransition;
        } else {
          root2.current = finishedWork;
          {
            recordCommitTime();
          }
        }
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
        if (rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = false;
          rootWithPendingPassiveEffects = root2;
          pendingPassiveEffectsLanes = lanes;
        } else {
          {
            nestedPassiveUpdateCount = 0;
            rootWithPassiveNestedUpdates = null;
          }
        }
        remainingLanes = root2.pendingLanes;
        if (remainingLanes === NoLanes) {
          legacyErrorBoundariesThatAlreadyFailed = null;
        }
        {
          if (!rootDidHavePassiveEffects) {
            commitDoubleInvokeEffectsInDEV(root2.current, false);
          }
        }
        onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
        {
          if (isDevToolsPresent) {
            root2.memoizedUpdaters.clear();
          }
        }
        {
          onCommitRoot$1();
        }
        ensureRootIsScheduled(root2, now());
        if (recoverableErrors !== null) {
          var onRecoverableError = root2.onRecoverableError;
          for (var i2 = 0;i2 < recoverableErrors.length; i2++) {
            var recoverableError = recoverableErrors[i2];
            var componentStack = recoverableError.stack;
            var digest = recoverableError.digest;
            onRecoverableError(recoverableError.value, {
              componentStack,
              digest
            });
          }
        }
        if (hasUncaughtError) {
          hasUncaughtError = false;
          var error$1 = firstUncaughtError;
          firstUncaughtError = null;
          throw error$1;
        }
        if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
          flushPassiveEffects();
        }
        remainingLanes = root2.pendingLanes;
        if (includesSomeLane(remainingLanes, SyncLane)) {
          {
            markNestedUpdateScheduled();
          }
          if (root2 === rootWithNestedUpdates) {
            nestedUpdateCount++;
          } else {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = root2;
          }
        } else {
          nestedUpdateCount = 0;
        }
        flushSyncCallbacks();
        {
          markCommitStopped();
        }
        return null;
      }
      function flushPassiveEffects() {
        if (rootWithPendingPassiveEffects !== null) {
          var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
          var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          var previousPriority = getCurrentUpdatePriority();
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(priority);
            return flushPassiveEffectsImpl();
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
          }
        }
        return false;
      }
      function enqueuePendingPassiveProfilerEffect(fiber) {
        {
          pendingPassiveProfilerEffects.push(fiber);
          if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback$1(NormalPriority, function() {
              flushPassiveEffects();
              return null;
            });
          }
        }
      }
      function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null) {
          return false;
        }
        var transitions = pendingPassiveTransitions;
        pendingPassiveTransitions = null;
        var root2 = rootWithPendingPassiveEffects;
        var lanes = pendingPassiveEffectsLanes;
        rootWithPendingPassiveEffects = null;
        pendingPassiveEffectsLanes = NoLanes;
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          throw new Error("Cannot flush passive effects while already rendering.");
        }
        {
          isFlushingPassiveEffects = true;
          didScheduleUpdateDuringPassiveEffects = false;
        }
        {
          markPassiveEffectsStarted(lanes);
        }
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        commitPassiveUnmountEffects(root2.current);
        commitPassiveMountEffects(root2, root2.current, lanes, transitions);
        {
          var profilerEffects = pendingPassiveProfilerEffects;
          pendingPassiveProfilerEffects = [];
          for (var i2 = 0;i2 < profilerEffects.length; i2++) {
            var _fiber = profilerEffects[i2];
            commitPassiveEffectDurations(root2, _fiber);
          }
        }
        {
          markPassiveEffectsStopped();
        }
        {
          commitDoubleInvokeEffectsInDEV(root2.current, true);
        }
        executionContext = prevExecutionContext;
        flushSyncCallbacks();
        {
          if (didScheduleUpdateDuringPassiveEffects) {
            if (root2 === rootWithPassiveNestedUpdates) {
              nestedPassiveUpdateCount++;
            } else {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = root2;
            }
          } else {
            nestedPassiveUpdateCount = 0;
          }
          isFlushingPassiveEffects = false;
          didScheduleUpdateDuringPassiveEffects = false;
        }
        onPostCommitRoot(root2);
        {
          var stateNode = root2.current.stateNode;
          stateNode.effectDuration = 0;
          stateNode.passiveEffectDuration = 0;
        }
        return true;
      }
      function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
      }
      function markLegacyErrorBoundaryAsFailed(instance) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) {
          legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
        } else {
          legacyErrorBoundariesThatAlreadyFailed.add(instance);
        }
      }
      function prepareToThrowUncaughtError(error2) {
        if (!hasUncaughtError) {
          hasUncaughtError = true;
          firstUncaughtError = error2;
        }
      }
      var onUncaughtError = prepareToThrowUncaughtError;
      function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
        var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
        var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
        var root2 = enqueueUpdate(rootFiber, update, SyncLane);
        var eventTime = requestEventTime();
        if (root2 !== null) {
          markRootUpdated(root2, SyncLane, eventTime);
          ensureRootIsScheduled(root2, eventTime);
        }
      }
      function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
        {
          reportUncaughtErrorInDEV(error$1);
          setIsRunningInsertionEffect(false);
        }
        if (sourceFiber.tag === HostRoot) {
          captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
          return;
        }
        var fiber = null;
        {
          fiber = nearestMountedAncestor;
        }
        while (fiber !== null) {
          if (fiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
            return;
          } else if (fiber.tag === ClassComponent) {
            var ctor = fiber.type;
            var instance = fiber.stateNode;
            if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
              var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
              var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
              var root2 = enqueueUpdate(fiber, update, SyncLane);
              var eventTime = requestEventTime();
              if (root2 !== null) {
                markRootUpdated(root2, SyncLane, eventTime);
                ensureRootIsScheduled(root2, eventTime);
              }
              return;
            }
          }
          fiber = fiber.return;
        }
        {
          error(`Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.

Error message:

%s`, error$1);
        }
      }
      function pingSuspendedRoot(root2, wakeable, pingedLanes) {
        var pingCache = root2.pingCache;
        if (pingCache !== null) {
          pingCache.delete(wakeable);
        }
        var eventTime = requestEventTime();
        markRootPinged(root2, pingedLanes);
        warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
        if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
          if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
            prepareFreshStack(root2, NoLanes);
          } else {
            workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
          }
        }
        ensureRootIsScheduled(root2, eventTime);
      }
      function retryTimedOutBoundary(boundaryFiber, retryLane) {
        if (retryLane === NoLane) {
          retryLane = requestRetryLane(boundaryFiber);
        }
        var eventTime = requestEventTime();
        var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
        if (root2 !== null) {
          markRootUpdated(root2, retryLane, eventTime);
          ensureRootIsScheduled(root2, eventTime);
        }
      }
      function retryDehydratedSuspenseBoundary(boundaryFiber) {
        var suspenseState = boundaryFiber.memoizedState;
        var retryLane = NoLane;
        if (suspenseState !== null) {
          retryLane = suspenseState.retryLane;
        }
        retryTimedOutBoundary(boundaryFiber, retryLane);
      }
      function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = NoLane;
        var retryCache;
        switch (boundaryFiber.tag) {
          case SuspenseComponent:
            retryCache = boundaryFiber.stateNode;
            var suspenseState = boundaryFiber.memoizedState;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            break;
          case SuspenseListComponent:
            retryCache = boundaryFiber.stateNode;
            break;
          default:
            throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
        }
        if (retryCache !== null) {
          retryCache.delete(wakeable);
        }
        retryTimedOutBoundary(boundaryFiber, retryLane);
      }
      function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
      }
      function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
          nestedUpdateCount = 0;
          rootWithNestedUpdates = null;
          throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
        }
        {
          if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
            nestedPassiveUpdateCount = 0;
            rootWithPassiveNestedUpdates = null;
            error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
          }
        }
      }
      function flushRenderPhaseStrictModeWarningsInDEV() {
        {
          ReactStrictModeWarnings.flushLegacyContextWarning();
          {
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
          }
        }
      }
      function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
        {
          setCurrentFiber(fiber);
          invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
          if (hasPassiveEffects) {
            invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
          }
          invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
          if (hasPassiveEffects) {
            invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
          }
          resetCurrentFiber();
        }
      }
      function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
        {
          var current2 = firstChild;
          var subtreeRoot = null;
          while (current2 !== null) {
            var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
            if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
              current2 = current2.child;
            } else {
              if ((current2.flags & fiberFlags) !== NoFlags) {
                invokeEffectFn(current2);
              }
              if (current2.sibling !== null) {
                current2 = current2.sibling;
              } else {
                current2 = subtreeRoot = current2.return;
              }
            }
          }
        }
      }
      var didWarnStateUpdateForNotYetMountedComponent = null;
      function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        {
          if ((executionContext & RenderContext) !== NoContext) {
            return;
          }
          if (!(fiber.mode & ConcurrentMode)) {
            return;
          }
          var tag = fiber.tag;
          if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
            return;
          }
          var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
          if (didWarnStateUpdateForNotYetMountedComponent !== null) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
              return;
            }
            didWarnStateUpdateForNotYetMountedComponent.add(componentName);
          } else {
            didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
          }
          var previousFiber = current;
          try {
            setCurrentFiber(fiber);
            error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
          } finally {
            if (previousFiber) {
              setCurrentFiber(fiber);
            } else {
              resetCurrentFiber();
            }
          }
        }
      }
      var beginWork$1;
      {
        var dummyFiber = null;
        beginWork$1 = function(current2, unitOfWork, lanes) {
          var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
          try {
            return beginWork(current2, unitOfWork, lanes);
          } catch (originalError) {
            if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
              throw originalError;
            }
            resetContextDependencies();
            resetHooksAfterThrow();
            unwindInterruptedWork(current2, unitOfWork);
            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
            if (unitOfWork.mode & ProfileMode) {
              startProfilerTimer(unitOfWork);
            }
            invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
            if (hasCaughtError()) {
              var replayError = clearCaughtError();
              if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                originalError._suppressLogging = true;
              }
            }
            throw originalError;
          }
        };
      }
      var didWarnAboutUpdateInRender = false;
      var didWarnAboutUpdateInRenderForAnotherComponent;
      {
        didWarnAboutUpdateInRenderForAnotherComponent = new Set;
      }
      function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        {
          if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                var dedupeKey = renderingComponentName;
                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                  didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                  var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                  error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                }
                break;
              }
              case ClassComponent: {
                if (!didWarnAboutUpdateInRender) {
                  error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                  didWarnAboutUpdateInRender = true;
                }
                break;
              }
            }
          }
        }
      }
      function restorePendingUpdaters(root2, lanes) {
        {
          if (isDevToolsPresent) {
            var memoizedUpdaters = root2.memoizedUpdaters;
            memoizedUpdaters.forEach(function(schedulingFiber) {
              addFiberToLanesMap(root2, schedulingFiber, lanes);
            });
          }
        }
      }
      var fakeActCallbackNode = {};
      function scheduleCallback$1(priorityLevel, callback) {
        {
          var actQueue = ReactCurrentActQueue$1.current;
          if (actQueue !== null) {
            actQueue.push(callback);
            return fakeActCallbackNode;
          } else {
            return scheduleCallback(priorityLevel, callback);
          }
        }
      }
      function cancelCallback$1(callbackNode) {
        if (callbackNode === fakeActCallbackNode) {
          return;
        }
        return cancelCallback(callbackNode);
      }
      function shouldForceFlushFallbacksInDEV() {
        return ReactCurrentActQueue$1.current !== null;
      }
      function warnIfUpdatesNotWrappedWithActDEV(fiber) {
        {
          if (fiber.mode & ConcurrentMode) {
            if (!isConcurrentActEnvironment()) {
              return;
            }
          } else {
            if (!isLegacyActEnvironment()) {
              return;
            }
            if (executionContext !== NoContext) {
              return;
            }
            if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
              return;
            }
          }
          if (ReactCurrentActQueue$1.current === null) {
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error(`An update to %s inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act`, getComponentNameFromFiber(fiber));
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
      }
      function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
        {
          if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
            error(`A suspended resource finished loading inside a test, but the event was not wrapped in act(...).

When testing, code that resolves suspended data should be wrapped into act(...):

act(() => {
  /* finish loading suspended data */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act`);
          }
        }
      }
      function setIsRunningInsertionEffect(isRunning) {
        {
          isRunningInsertionEffect = isRunning;
        }
      }
      var resolveFamily = null;
      var failedBoundaries = null;
      var setRefreshHandler = function(handler) {
        {
          resolveFamily = handler;
        }
      };
      function resolveFunctionForHotReloading(type) {
        {
          if (resolveFamily === null) {
            return type;
          }
          var family = resolveFamily(type);
          if (family === undefined) {
            return type;
          }
          return family.current;
        }
      }
      function resolveClassForHotReloading(type) {
        return resolveFunctionForHotReloading(type);
      }
      function resolveForwardRefForHotReloading(type) {
        {
          if (resolveFamily === null) {
            return type;
          }
          var family = resolveFamily(type);
          if (family === undefined) {
            if (type !== null && type !== undefined && typeof type.render === "function") {
              var currentRender = resolveFunctionForHotReloading(type.render);
              if (type.render !== currentRender) {
                var syntheticType = {
                  $$typeof: REACT_FORWARD_REF_TYPE,
                  render: currentRender
                };
                if (type.displayName !== undefined) {
                  syntheticType.displayName = type.displayName;
                }
                return syntheticType;
              }
            }
            return type;
          }
          return family.current;
        }
      }
      function isCompatibleFamilyForHotReloading(fiber, element) {
        {
          if (resolveFamily === null) {
            return false;
          }
          var prevType = fiber.elementType;
          var nextType = element.type;
          var needsCompareFamilies = false;
          var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
          switch (fiber.tag) {
            case ClassComponent: {
              if (typeof nextType === "function") {
                needsCompareFamilies = true;
              }
              break;
            }
            case FunctionComponent: {
              if (typeof nextType === "function") {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            case ForwardRef: {
              if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            case MemoComponent:
            case SimpleMemoComponent: {
              if ($$typeofNextType === REACT_MEMO_TYPE) {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            default:
              return false;
          }
          if (needsCompareFamilies) {
            var prevFamily = resolveFamily(prevType);
            if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
              return true;
            }
          }
          return false;
        }
      }
      function markFailedErrorBoundaryForHotReloading(fiber) {
        {
          if (resolveFamily === null) {
            return;
          }
          if (typeof WeakSet !== "function") {
            return;
          }
          if (failedBoundaries === null) {
            failedBoundaries = new WeakSet;
          }
          failedBoundaries.add(fiber);
        }
      }
      var scheduleRefresh = function(root2, update) {
        {
          if (resolveFamily === null) {
            return;
          }
          var { staleFamilies, updatedFamilies } = update;
          flushPassiveEffects();
          flushSync(function() {
            scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
          });
        }
      };
      var scheduleRoot = function(root2, element) {
        {
          if (root2.context !== emptyContextObject) {
            return;
          }
          flushPassiveEffects();
          flushSync(function() {
            updateContainer(element, root2, null, null);
          });
        }
      };
      function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        {
          var { alternate, child, sibling, tag, type } = fiber;
          var candidateType = null;
          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;
            case ForwardRef:
              candidateType = type.render;
              break;
          }
          if (resolveFamily === null) {
            throw new Error("Expected resolveFamily to be set during hot reload.");
          }
          var needsRender = false;
          var needsRemount = false;
          if (candidateType !== null) {
            var family = resolveFamily(candidateType);
            if (family !== undefined) {
              if (staleFamilies.has(family)) {
                needsRemount = true;
              } else if (updatedFamilies.has(family)) {
                if (tag === ClassComponent) {
                  needsRemount = true;
                } else {
                  needsRender = true;
                }
              }
            }
          }
          if (failedBoundaries !== null) {
            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
              needsRemount = true;
            }
          }
          if (needsRemount) {
            fiber._debugNeedsRemount = true;
          }
          if (needsRemount || needsRender) {
            var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (_root !== null) {
              scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
            }
          }
          if (child !== null && !needsRemount) {
            scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
          }
          if (sibling !== null) {
            scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
          }
        }
      }
      var findHostInstancesForRefresh = function(root2, families) {
        {
          var hostInstances = new Set;
          var types = new Set(families.map(function(family) {
            return family.current;
          }));
          findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
          return hostInstances;
        }
      };
      function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        {
          var { child, sibling, tag, type } = fiber;
          var candidateType = null;
          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;
            case ForwardRef:
              candidateType = type.render;
              break;
          }
          var didMatch = false;
          if (candidateType !== null) {
            if (types.has(candidateType)) {
              didMatch = true;
            }
          }
          if (didMatch) {
            findHostInstancesForFiberShallowly(fiber, hostInstances);
          } else {
            if (child !== null) {
              findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
            }
          }
          if (sibling !== null) {
            findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
          }
        }
      }
      function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
          if (foundHostInstances) {
            return;
          }
          var node2 = fiber;
          while (true) {
            switch (node2.tag) {
              case HostComponent:
                hostInstances.add(node2.stateNode);
                return;
              case HostPortal:
                hostInstances.add(node2.stateNode.containerInfo);
                return;
              case HostRoot:
                hostInstances.add(node2.stateNode.containerInfo);
                return;
            }
            if (node2.return === null) {
              throw new Error("Expected to reach root first.");
            }
            node2 = node2.return;
          }
        }
      }
      function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var node2 = fiber;
          var foundHostInstances = false;
          while (true) {
            if (node2.tag === HostComponent) {
              foundHostInstances = true;
              hostInstances.add(node2.stateNode);
            } else if (node2.child !== null) {
              node2.child.return = node2;
              node2 = node2.child;
              continue;
            }
            if (node2 === fiber) {
              return foundHostInstances;
            }
            while (node2.sibling === null) {
              if (node2.return === null || node2.return === fiber) {
                return foundHostInstances;
              }
              node2 = node2.return;
            }
            node2.sibling.return = node2.return;
            node2 = node2.sibling;
          }
        }
        return false;
      }
      var hasBadMapPolyfill;
      {
        hasBadMapPolyfill = false;
        try {
          var nonExtensibleObject = Object.preventExtensions({});
          new Map([[nonExtensibleObject, null]]);
          new Set([nonExtensibleObject]);
        } catch (e3) {
          hasBadMapPolyfill = true;
        }
      }
      function FiberNode(tag, pendingProps, key, mode) {
        this.tag = tag;
        this.key = key;
        this.elementType = null;
        this.type = null;
        this.stateNode = null;
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.dependencies = null;
        this.mode = mode;
        this.flags = NoFlags;
        this.subtreeFlags = NoFlags;
        this.deletions = null;
        this.lanes = NoLanes;
        this.childLanes = NoLanes;
        this.alternate = null;
        {
          this.actualDuration = Number.NaN;
          this.actualStartTime = Number.NaN;
          this.selfBaseDuration = Number.NaN;
          this.treeBaseDuration = Number.NaN;
          this.actualDuration = 0;
          this.actualStartTime = -1;
          this.selfBaseDuration = 0;
          this.treeBaseDuration = 0;
        }
        {
          this._debugSource = null;
          this._debugOwner = null;
          this._debugNeedsRemount = false;
          this._debugHookTypes = null;
          if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
            Object.preventExtensions(this);
          }
        }
      }
      var createFiber = function(tag, pendingProps, key, mode) {
        return new FiberNode(tag, pendingProps, key, mode);
      };
      function shouldConstruct$1(Component2) {
        var prototype = Component2.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function isSimpleFunctionComponent(type) {
        return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === undefined;
      }
      function resolveLazyComponentTag(Component2) {
        if (typeof Component2 === "function") {
          return shouldConstruct$1(Component2) ? ClassComponent : FunctionComponent;
        } else if (Component2 !== undefined && Component2 !== null) {
          var $$typeof = Component2.$$typeof;
          if ($$typeof === REACT_FORWARD_REF_TYPE) {
            return ForwardRef;
          }
          if ($$typeof === REACT_MEMO_TYPE) {
            return MemoComponent;
          }
        }
        return IndeterminateComponent;
      }
      function createWorkInProgress(current2, pendingProps) {
        var workInProgress2 = current2.alternate;
        if (workInProgress2 === null) {
          workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
          workInProgress2.elementType = current2.elementType;
          workInProgress2.type = current2.type;
          workInProgress2.stateNode = current2.stateNode;
          {
            workInProgress2._debugSource = current2._debugSource;
            workInProgress2._debugOwner = current2._debugOwner;
            workInProgress2._debugHookTypes = current2._debugHookTypes;
          }
          workInProgress2.alternate = current2;
          current2.alternate = workInProgress2;
        } else {
          workInProgress2.pendingProps = pendingProps;
          workInProgress2.type = current2.type;
          workInProgress2.flags = NoFlags;
          workInProgress2.subtreeFlags = NoFlags;
          workInProgress2.deletions = null;
          {
            workInProgress2.actualDuration = 0;
            workInProgress2.actualStartTime = -1;
          }
        }
        workInProgress2.flags = current2.flags & StaticMask;
        workInProgress2.childLanes = current2.childLanes;
        workInProgress2.lanes = current2.lanes;
        workInProgress2.child = current2.child;
        workInProgress2.memoizedProps = current2.memoizedProps;
        workInProgress2.memoizedState = current2.memoizedState;
        workInProgress2.updateQueue = current2.updateQueue;
        var currentDependencies = current2.dependencies;
        workInProgress2.dependencies = currentDependencies === null ? null : {
          lanes: currentDependencies.lanes,
          firstContext: currentDependencies.firstContext
        };
        workInProgress2.sibling = current2.sibling;
        workInProgress2.index = current2.index;
        workInProgress2.ref = current2.ref;
        {
          workInProgress2.selfBaseDuration = current2.selfBaseDuration;
          workInProgress2.treeBaseDuration = current2.treeBaseDuration;
        }
        {
          workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
              workInProgress2.type = resolveFunctionForHotReloading(current2.type);
              break;
            case ClassComponent:
              workInProgress2.type = resolveClassForHotReloading(current2.type);
              break;
            case ForwardRef:
              workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
              break;
          }
        }
        return workInProgress2;
      }
      function resetWorkInProgress(workInProgress2, renderLanes2) {
        workInProgress2.flags &= StaticMask | Placement;
        var current2 = workInProgress2.alternate;
        if (current2 === null) {
          workInProgress2.childLanes = NoLanes;
          workInProgress2.lanes = renderLanes2;
          workInProgress2.child = null;
          workInProgress2.subtreeFlags = NoFlags;
          workInProgress2.memoizedProps = null;
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.dependencies = null;
          workInProgress2.stateNode = null;
          {
            workInProgress2.selfBaseDuration = 0;
            workInProgress2.treeBaseDuration = 0;
          }
        } else {
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.subtreeFlags = NoFlags;
          workInProgress2.deletions = null;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          workInProgress2.type = current2.type;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
        }
        return workInProgress2;
      }
      function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
        var mode;
        if (tag === ConcurrentRoot) {
          mode = ConcurrentMode;
          if (isStrictMode === true) {
            mode |= StrictLegacyMode;
            {
              mode |= StrictEffectsMode;
            }
          }
        } else {
          mode = NoMode;
        }
        if (isDevToolsPresent) {
          mode |= ProfileMode;
        }
        return createFiber(HostRoot, null, null, mode);
      }
      function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
        var fiberTag = IndeterminateComponent;
        var resolvedType = type;
        if (typeof type === "function") {
          if (shouldConstruct$1(type)) {
            fiberTag = ClassComponent;
            {
              resolvedType = resolveClassForHotReloading(resolvedType);
            }
          } else {
            {
              resolvedType = resolveFunctionForHotReloading(resolvedType);
            }
          }
        } else if (typeof type === "string") {
          fiberTag = HostComponent;
        } else {
          getTag:
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);
              case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictLegacyMode;
                if ((mode & ConcurrentMode) !== NoMode) {
                  mode |= StrictEffectsMode;
                }
                break;
              case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);
              case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);
              case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
              case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
              case REACT_LEGACY_HIDDEN_TYPE:
              case REACT_SCOPE_TYPE:
              case REACT_CACHE_TYPE:
              case REACT_TRACING_MARKER_TYPE:
              case REACT_DEBUG_TRACING_MODE_TYPE:
              default: {
                if (typeof type === "object" && type !== null) {
                  switch (type.$$typeof) {
                    case REACT_PROVIDER_TYPE:
                      fiberTag = ContextProvider;
                      break getTag;
                    case REACT_CONTEXT_TYPE:
                      fiberTag = ContextConsumer;
                      break getTag;
                    case REACT_FORWARD_REF_TYPE:
                      fiberTag = ForwardRef;
                      {
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                      }
                      break getTag;
                    case REACT_MEMO_TYPE:
                      fiberTag = MemoComponent;
                      break getTag;
                    case REACT_LAZY_TYPE:
                      fiberTag = LazyComponent;
                      resolvedType = null;
                      break getTag;
                  }
                }
                var info = "";
                {
                  if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                    info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                  }
                  var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                  if (ownerName) {
                    info += `

Check the render method of \`` + ownerName + "`.";
                  }
                }
                throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
              }
            }
        }
        var fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.lanes = lanes;
        {
          fiber._debugOwner = owner;
        }
        return fiber;
      }
      function createFiberFromElement(element, mode, lanes) {
        var owner = null;
        {
          owner = element._owner;
        }
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
        {
          fiber._debugSource = element._source;
          fiber._debugOwner = element._owner;
        }
        return fiber;
      }
      function createFiberFromFragment(elements, mode, lanes, key) {
        var fiber = createFiber(Fragment32, elements, key, mode);
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromProfiler(pendingProps, mode, lanes, key) {
        {
          if (typeof pendingProps.id !== "string") {
            error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
          }
        }
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.lanes = lanes;
        {
          fiber.stateNode = {
            effectDuration: 0,
            passiveEffectDuration: 0
          };
        }
        return fiber;
      }
      function createFiberFromSuspense(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
        fiber.elementType = REACT_SUSPENSE_TYPE;
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
        fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
        var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
        fiber.elementType = REACT_OFFSCREEN_TYPE;
        fiber.lanes = lanes;
        var primaryChildInstance = {
          isHidden: false
        };
        fiber.stateNode = primaryChildInstance;
        return fiber;
      }
      function createFiberFromText(content, mode, lanes) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoMode);
        fiber.elementType = "DELETED";
        return fiber;
      }
      function createFiberFromDehydratedFragment(dehydratedNode) {
        var fiber = createFiber(DehydratedFragment, null, null, NoMode);
        fiber.stateNode = dehydratedNode;
        return fiber;
      }
      function createFiberFromPortal(portal, mode, lanes) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.lanes = lanes;
        fiber.stateNode = {
          containerInfo: portal.containerInfo,
          pendingChildren: null,
          implementation: portal.implementation
        };
        return fiber;
      }
      function assignFiberPropertiesInDEV(target, source) {
        if (target === null) {
          target = createFiber(IndeterminateComponent, null, null, NoMode);
        }
        target.tag = source.tag;
        target.key = source.key;
        target.elementType = source.elementType;
        target.type = source.type;
        target.stateNode = source.stateNode;
        target.return = source.return;
        target.child = source.child;
        target.sibling = source.sibling;
        target.index = source.index;
        target.ref = source.ref;
        target.pendingProps = source.pendingProps;
        target.memoizedProps = source.memoizedProps;
        target.updateQueue = source.updateQueue;
        target.memoizedState = source.memoizedState;
        target.dependencies = source.dependencies;
        target.mode = source.mode;
        target.flags = source.flags;
        target.subtreeFlags = source.subtreeFlags;
        target.deletions = source.deletions;
        target.lanes = source.lanes;
        target.childLanes = source.childLanes;
        target.alternate = source.alternate;
        {
          target.actualDuration = source.actualDuration;
          target.actualStartTime = source.actualStartTime;
          target.selfBaseDuration = source.selfBaseDuration;
          target.treeBaseDuration = source.treeBaseDuration;
        }
        target._debugSource = source._debugSource;
        target._debugOwner = source._debugOwner;
        target._debugNeedsRemount = source._debugNeedsRemount;
        target._debugHookTypes = source._debugHookTypes;
        return target;
      }
      function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
        this.tag = tag;
        this.containerInfo = containerInfo;
        this.pendingChildren = null;
        this.current = null;
        this.pingCache = null;
        this.finishedWork = null;
        this.timeoutHandle = noTimeout;
        this.context = null;
        this.pendingContext = null;
        this.callbackNode = null;
        this.callbackPriority = NoLane;
        this.eventTimes = createLaneMap(NoLanes);
        this.expirationTimes = createLaneMap(NoTimestamp);
        this.pendingLanes = NoLanes;
        this.suspendedLanes = NoLanes;
        this.pingedLanes = NoLanes;
        this.expiredLanes = NoLanes;
        this.mutableReadLanes = NoLanes;
        this.finishedLanes = NoLanes;
        this.entangledLanes = NoLanes;
        this.entanglements = createLaneMap(NoLanes);
        this.identifierPrefix = identifierPrefix;
        this.onRecoverableError = onRecoverableError;
        {
          this.mutableSourceEagerHydrationData = null;
        }
        {
          this.effectDuration = 0;
          this.passiveEffectDuration = 0;
        }
        {
          this.memoizedUpdaters = new Set;
          var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
          for (var _i = 0;_i < TotalLanes; _i++) {
            pendingUpdatersLaneMap.push(new Set);
          }
        }
        {
          switch (tag) {
            case ConcurrentRoot:
              this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
              break;
            case LegacyRoot:
              this._debugRootType = hydrate2 ? "hydrate()" : "render()";
              break;
          }
        }
      }
      function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
        var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
        root2.current = uninitializedFiber;
        uninitializedFiber.stateNode = root2;
        {
          var _initialState = {
            element: initialChildren,
            isDehydrated: hydrate2,
            cache: null,
            transitions: null,
            pendingSuspenseBoundaries: null
          };
          uninitializedFiber.memoizedState = _initialState;
        }
        initializeUpdateQueue(uninitializedFiber);
        return root2;
      }
      var ReactVersion = "18.2.0";
      function createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        {
          checkKeyStringCoercion(key);
        }
        return {
          $$typeof: REACT_PORTAL_TYPE,
          key: key == null ? null : "" + key,
          children,
          containerInfo,
          implementation
        };
      }
      var didWarnAboutNestedUpdates;
      var didWarnAboutFindNodeInStrictMode;
      {
        didWarnAboutNestedUpdates = false;
        didWarnAboutFindNodeInStrictMode = {};
      }
      function getContextForSubtree(parentComponent) {
        if (!parentComponent) {
          return emptyContextObject;
        }
        var fiber = get(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
          var Component2 = fiber.type;
          if (isContextProvider(Component2)) {
            return processChildContext(fiber, Component2, parentContext);
          }
        }
        return parentContext;
      }
      function findHostInstanceWithWarning(component, methodName) {
        {
          var fiber = get(component);
          if (fiber === undefined) {
            if (typeof component.render === "function") {
              throw new Error("Unable to find node on an unmounted component.");
            } else {
              var keys = Object.keys(component).join(",");
              throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
            }
          }
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          if (hostFiber.mode & StrictLegacyMode) {
            var componentName = getComponentNameFromFiber(fiber) || "Component";
            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
              didWarnAboutFindNodeInStrictMode[componentName] = true;
              var previousFiber = current;
              try {
                setCurrentFiber(hostFiber);
                if (fiber.mode & StrictLegacyMode) {
                  error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                } else {
                  error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                }
              } finally {
                if (previousFiber) {
                  setCurrentFiber(previousFiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          return hostFiber.stateNode;
        }
      }
      function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate2 = false;
        var initialChildren = null;
        return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
      }
      function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate2 = true;
        var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        root2.context = getContextForSubtree(null);
        var current2 = root2.current;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(current2);
        var update = createUpdate(eventTime, lane);
        update.callback = callback !== undefined && callback !== null ? callback : null;
        enqueueUpdate(current2, update, lane);
        scheduleInitialHydrationOnRoot(root2, lane, eventTime);
        return root2;
      }
      function updateContainer(element, container, parentComponent, callback) {
        {
          onScheduleRoot(container, element);
        }
        var current$1 = container.current;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(current$1);
        {
          markRenderScheduled(lane);
        }
        var context = getContextForSubtree(parentComponent);
        if (container.context === null) {
          container.context = context;
        } else {
          container.pendingContext = context;
        }
        {
          if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            error(`Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.

Check the render method of %s.`, getComponentNameFromFiber(current) || "Unknown");
          }
        }
        var update = createUpdate(eventTime, lane);
        update.payload = {
          element
        };
        callback = callback === undefined ? null : callback;
        if (callback !== null) {
          {
            if (typeof callback !== "function") {
              error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
            }
          }
          update.callback = callback;
        }
        var root2 = enqueueUpdate(current$1, update, lane);
        if (root2 !== null) {
          scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
          entangleTransitions(root2, current$1, lane);
        }
        return lane;
      }
      function getPublicRootInstance(container) {
        var containerFiber = container.current;
        if (!containerFiber.child) {
          return null;
        }
        switch (containerFiber.child.tag) {
          case HostComponent:
            return getPublicInstance(containerFiber.child.stateNode);
          default:
            return containerFiber.child.stateNode;
        }
      }
      function attemptSynchronousHydration$1(fiber) {
        switch (fiber.tag) {
          case HostRoot: {
            var root2 = fiber.stateNode;
            if (isRootDehydrated(root2)) {
              var lanes = getHighestPriorityPendingLanes(root2);
              flushRoot(root2, lanes);
            }
            break;
          }
          case SuspenseComponent: {
            flushSync(function() {
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
              }
            });
            var retryLane = SyncLane;
            markRetryLaneIfNotHydrated(fiber, retryLane);
            break;
          }
        }
      }
      function markRetryLaneImpl(fiber, retryLane) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState !== null && suspenseState.dehydrated !== null) {
          suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
        }
      }
      function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        var alternate = fiber.alternate;
        if (alternate) {
          markRetryLaneImpl(alternate, retryLane);
        }
      }
      function attemptContinuousHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) {
          return;
        }
        var lane = SelectiveHydrationLane;
        var root2 = enqueueConcurrentRenderForLane(fiber, lane);
        if (root2 !== null) {
          var eventTime = requestEventTime();
          scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
        }
        markRetryLaneIfNotHydrated(fiber, lane);
      }
      function attemptHydrationAtCurrentPriority$1(fiber) {
        if (fiber.tag !== SuspenseComponent) {
          return;
        }
        var lane = requestUpdateLane(fiber);
        var root2 = enqueueConcurrentRenderForLane(fiber, lane);
        if (root2 !== null) {
          var eventTime = requestEventTime();
          scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
        }
        markRetryLaneIfNotHydrated(fiber, lane);
      }
      function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        if (hostFiber === null) {
          return null;
        }
        return hostFiber.stateNode;
      }
      var shouldErrorImpl = function(fiber) {
        return null;
      };
      function shouldError(fiber) {
        return shouldErrorImpl(fiber);
      }
      var shouldSuspendImpl = function(fiber) {
        return false;
      };
      function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
      }
      var overrideHookState = null;
      var overrideHookStateDeletePath = null;
      var overrideHookStateRenamePath = null;
      var overrideProps = null;
      var overridePropsDeletePath = null;
      var overridePropsRenamePath = null;
      var scheduleUpdate = null;
      var setErrorHandler = null;
      var setSuspenseHandler = null;
      {
        var copyWithDeleteImpl = function(obj, path, index2) {
          var key = path[index2];
          var updated = isArray(obj) ? obj.slice() : assign({}, obj);
          if (index2 + 1 === path.length) {
            if (isArray(updated)) {
              updated.splice(key, 1);
            } else {
              delete updated[key];
            }
            return updated;
          }
          updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
          return updated;
        };
        var copyWithDelete = function(obj, path) {
          return copyWithDeleteImpl(obj, path, 0);
        };
        var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
          var oldKey = oldPath[index2];
          var updated = isArray(obj) ? obj.slice() : assign({}, obj);
          if (index2 + 1 === oldPath.length) {
            var newKey = newPath[index2];
            updated[newKey] = updated[oldKey];
            if (isArray(updated)) {
              updated.splice(oldKey, 1);
            } else {
              delete updated[oldKey];
            }
          } else {
            updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index2 + 1);
          }
          return updated;
        };
        var copyWithRename = function(obj, oldPath, newPath) {
          if (oldPath.length !== newPath.length) {
            warn("copyWithRename() expects paths of the same length");
            return;
          } else {
            for (var i2 = 0;i2 < newPath.length - 1; i2++) {
              if (oldPath[i2] !== newPath[i2]) {
                warn("copyWithRename() expects paths to be the same except for the deepest key");
                return;
              }
            }
          }
          return copyWithRenameImpl(obj, oldPath, newPath, 0);
        };
        var copyWithSetImpl = function(obj, path, index2, value) {
          if (index2 >= path.length) {
            return value;
          }
          var key = path[index2];
          var updated = isArray(obj) ? obj.slice() : assign({}, obj);
          updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
          return updated;
        };
        var copyWithSet = function(obj, path, value) {
          return copyWithSetImpl(obj, path, 0, value);
        };
        var findHook = function(fiber, id2) {
          var currentHook2 = fiber.memoizedState;
          while (currentHook2 !== null && id2 > 0) {
            currentHook2 = currentHook2.next;
            id2--;
          }
          return currentHook2;
        };
        overrideHookState = function(fiber, id2, path, value) {
          var hook = findHook(fiber, id2);
          if (hook !== null) {
            var newState = copyWithSet(hook.memoizedState, path, value);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
        };
        overrideHookStateDeletePath = function(fiber, id2, path) {
          var hook = findHook(fiber, id2);
          if (hook !== null) {
            var newState = copyWithDelete(hook.memoizedState, path);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
        };
        overrideHookStateRenamePath = function(fiber, id2, oldPath, newPath) {
          var hook = findHook(fiber, id2);
          if (hook !== null) {
            var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
        };
        overrideProps = function(fiber, path, value) {
          fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        };
        overridePropsDeletePath = function(fiber, path) {
          fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        };
        overridePropsRenamePath = function(fiber, oldPath, newPath) {
          fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        };
        scheduleUpdate = function(fiber) {
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        };
        setErrorHandler = function(newShouldErrorImpl) {
          shouldErrorImpl = newShouldErrorImpl;
        };
        setSuspenseHandler = function(newShouldSuspendImpl) {
          shouldSuspendImpl = newShouldSuspendImpl;
        };
      }
      function findHostInstanceByFiber(fiber) {
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) {
          return null;
        }
        return hostFiber.stateNode;
      }
      function emptyFindFiberByHostInstance(instance) {
        return null;
      }
      function getCurrentFiberForDevTools() {
        return current;
      }
      function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals({
          bundleType: devToolsConfig.bundleType,
          version: devToolsConfig.version,
          rendererPackageName: devToolsConfig.rendererPackageName,
          rendererConfig: devToolsConfig.rendererConfig,
          overrideHookState,
          overrideHookStateDeletePath,
          overrideHookStateRenamePath,
          overrideProps,
          overridePropsDeletePath,
          overridePropsRenamePath,
          setErrorHandler,
          setSuspenseHandler,
          scheduleUpdate,
          currentDispatcherRef: ReactCurrentDispatcher2,
          findHostInstanceByFiber,
          findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
          findHostInstancesForRefresh,
          scheduleRefresh,
          scheduleRoot,
          setRefreshHandler,
          getCurrentFiber: getCurrentFiberForDevTools,
          reconcilerVersion: ReactVersion
        });
      }
      var defaultOnRecoverableError = typeof reportError === "function" ? reportError : function(error2) {
        console["error"](error2);
      };
      function ReactDOMRoot(internalRoot) {
        this._internalRoot = internalRoot;
      }
      ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
        var root2 = this._internalRoot;
        if (root2 === null) {
          throw new Error("Cannot update an unmounted root.");
        }
        {
          if (typeof arguments[1] === "function") {
            error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
          } else if (isValidContainer(arguments[1])) {
            error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
          } else if (typeof arguments[1] !== "undefined") {
            error("You passed a second argument to root.render(...) but it only accepts one argument.");
          }
          var container = root2.containerInfo;
          if (container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(root2.current);
            if (hostInstance) {
              if (hostInstance.parentNode !== container) {
                error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
              }
            }
          }
        }
        updateContainer(children, root2, null, null);
      };
      ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
        {
          if (typeof arguments[0] === "function") {
            error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
          }
        }
        var root2 = this._internalRoot;
        if (root2 !== null) {
          this._internalRoot = null;
          var container = root2.containerInfo;
          {
            if (isAlreadyRendering()) {
              error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
            }
          }
          flushSync(function() {
            updateContainer(null, root2, null, null);
          });
          unmarkContainerAsRoot(container);
        }
      };
      function createRoot(container, options2) {
        if (!isValidContainer(container)) {
          throw new Error("createRoot(...): Target container is not a DOM element.");
        }
        warnIfReactDOMContainerInDEV(container);
        var isStrictMode = false;
        var concurrentUpdatesByDefaultOverride = false;
        var identifierPrefix = "";
        var onRecoverableError = defaultOnRecoverableError;
        var transitionCallbacks = null;
        if (options2 !== null && options2 !== undefined) {
          {
            if (options2.hydrate) {
              warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
            } else {
              if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                error(`You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:

  let root = createRoot(domContainer);
  root.render(<App />);`);
              }
            }
          }
          if (options2.unstable_strictMode === true) {
            isStrictMode = true;
          }
          if (options2.identifierPrefix !== undefined) {
            identifierPrefix = options2.identifierPrefix;
          }
          if (options2.onRecoverableError !== undefined) {
            onRecoverableError = options2.onRecoverableError;
          }
          if (options2.transitionCallbacks !== undefined) {
            transitionCallbacks = options2.transitionCallbacks;
          }
        }
        var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        markContainerAsRoot(root2.current, container);
        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        listenToAllSupportedEvents(rootContainerElement);
        return new ReactDOMRoot(root2);
      }
      function ReactDOMHydrationRoot(internalRoot) {
        this._internalRoot = internalRoot;
      }
      function scheduleHydration(target) {
        if (target) {
          queueExplicitHydrationTarget(target);
        }
      }
      ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
      function hydrateRoot(container, initialChildren, options2) {
        if (!isValidContainer(container)) {
          throw new Error("hydrateRoot(...): Target container is not a DOM element.");
        }
        warnIfReactDOMContainerInDEV(container);
        {
          if (initialChildren === undefined) {
            error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
          }
        }
        var hydrationCallbacks = options2 != null ? options2 : null;
        var mutableSources = options2 != null && options2.hydratedSources || null;
        var isStrictMode = false;
        var concurrentUpdatesByDefaultOverride = false;
        var identifierPrefix = "";
        var onRecoverableError = defaultOnRecoverableError;
        if (options2 !== null && options2 !== undefined) {
          if (options2.unstable_strictMode === true) {
            isStrictMode = true;
          }
          if (options2.identifierPrefix !== undefined) {
            identifierPrefix = options2.identifierPrefix;
          }
          if (options2.onRecoverableError !== undefined) {
            onRecoverableError = options2.onRecoverableError;
          }
        }
        var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        markContainerAsRoot(root2.current, container);
        listenToAllSupportedEvents(container);
        if (mutableSources) {
          for (var i2 = 0;i2 < mutableSources.length; i2++) {
            var mutableSource = mutableSources[i2];
            registerMutableSourceForHydration(root2, mutableSource);
          }
        }
        return new ReactDOMHydrationRoot(root2);
      }
      function isValidContainer(node2) {
        return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
      }
      function isValidContainerLegacy(node2) {
        return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || node2.nodeType === COMMENT_NODE && node2.nodeValue === " react-mount-point-unstable "));
      }
      function warnIfReactDOMContainerInDEV(container) {
        {
          if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
            error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
          }
          if (isContainerMarkedAsRoot(container)) {
            if (container._reactRootContainer) {
              error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
            } else {
              error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
            }
          }
        }
      }
      var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
      var topLevelUpdateWarnings;
      {
        topLevelUpdateWarnings = function(container) {
          if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
            if (hostInstance) {
              if (hostInstance.parentNode !== container) {
                error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
              }
            }
          }
          var isRootRenderedBySomeReact = !!container._reactRootContainer;
          var rootEl = getReactRootElementInContainer(container);
          var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
          if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
            error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
          }
          if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
            error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
          }
        };
      }
      function getReactRootElementInContainer(container) {
        if (!container) {
          return null;
        }
        if (container.nodeType === DOCUMENT_NODE) {
          return container.documentElement;
        } else {
          return container.firstChild;
        }
      }
      function noopOnRecoverableError() {}
      function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
        if (isHydrationContainer) {
          if (typeof callback === "function") {
            var originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(root2);
              originalCallback.call(instance);
            };
          }
          var root2 = createHydrationContainer(initialChildren, callback, container, LegacyRoot, null, false, false, "", noopOnRecoverableError);
          container._reactRootContainer = root2;
          markContainerAsRoot(root2.current, container);
          var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          listenToAllSupportedEvents(rootContainerElement);
          flushSync();
          return root2;
        } else {
          var rootSibling;
          while (rootSibling = container.lastChild) {
            container.removeChild(rootSibling);
          }
          if (typeof callback === "function") {
            var _originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(_root);
              _originalCallback.call(instance);
            };
          }
          var _root = createContainer(container, LegacyRoot, null, false, false, "", noopOnRecoverableError);
          container._reactRootContainer = _root;
          markContainerAsRoot(_root.current, container);
          var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          listenToAllSupportedEvents(_rootContainerElement);
          flushSync(function() {
            updateContainer(initialChildren, _root, parentComponent, callback);
          });
          return _root;
        }
      }
      function warnOnInvalidCallback$1(callback, callerName) {
        {
          if (callback !== null && typeof callback !== "function") {
            error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
          }
        }
      }
      function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
        {
          topLevelUpdateWarnings(container);
          warnOnInvalidCallback$1(callback === undefined ? null : callback, "render");
        }
        var maybeRoot = container._reactRootContainer;
        var root2;
        if (!maybeRoot) {
          root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
        } else {
          root2 = maybeRoot;
          if (typeof callback === "function") {
            var originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(root2);
              originalCallback.call(instance);
            };
          }
          updateContainer(children, root2, parentComponent, callback);
        }
        return getPublicRootInstance(root2);
      }
      function findDOMNode(componentOrElement) {
        {
          var owner = ReactCurrentOwner$3.current;
          if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            if (!warnedAboutRefsInRender) {
              error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
            }
            owner.stateNode._warnedAboutRefsInRender = true;
          }
        }
        if (componentOrElement == null) {
          return null;
        }
        if (componentOrElement.nodeType === ELEMENT_NODE) {
          return componentOrElement;
        }
        {
          return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
        }
      }
      function hydrate(element, container, callback) {
        {
          error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        }
        if (!isValidContainerLegacy(container)) {
          throw new Error("Target container is not a DOM element.");
        }
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
          if (isModernRoot) {
            error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
          }
        }
        return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
      }
      function render(element, container, callback) {
        {
          error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        }
        if (!isValidContainerLegacy(container)) {
          throw new Error("Target container is not a DOM element.");
        }
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
          if (isModernRoot) {
            error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
          }
        }
        return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
      }
      function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        {
          error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        }
        if (!isValidContainerLegacy(containerNode)) {
          throw new Error("Target container is not a DOM element.");
        }
        if (parentComponent == null || !has(parentComponent)) {
          throw new Error("parentComponent must be a valid React Component");
        }
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
      }
      function unmountComponentAtNode(container) {
        if (!isValidContainerLegacy(container)) {
          throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
        }
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
          if (isModernRoot) {
            error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
          }
        }
        if (container._reactRootContainer) {
          {
            var rootEl = getReactRootElementInContainer(container);
            var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
            if (renderedByDifferentReact) {
              error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
            }
          }
          flushSync(function() {
            legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
              container._reactRootContainer = null;
              unmarkContainerAsRoot(container);
            });
          });
          return true;
        } else {
          {
            var _rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
            var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
            if (hasNonRootReactChild) {
              error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
            }
          }
          return false;
        }
      }
      setAttemptSynchronousHydration(attemptSynchronousHydration$1);
      setAttemptContinuousHydration(attemptContinuousHydration$1);
      setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
      setGetCurrentUpdatePriority(getCurrentUpdatePriority);
      setAttemptHydrationAtPriority(runWithPriority);
      {
        if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
          error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
        }
      }
      setRestoreImplementation(restoreControlledState$3);
      setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
      function createPortal$1(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        if (!isValidContainer(container)) {
          throw new Error("Target container is not a DOM element.");
        }
        return createPortal(children, container, null, key);
      }
      function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
      }
      var Internals = {
        usingClientEntryPoint: false,
        Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
      };
      function createRoot$1(container, options2) {
        {
          if (!Internals.usingClientEntryPoint && true) {
            error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
          }
        }
        return createRoot(container, options2);
      }
      function hydrateRoot$1(container, initialChildren, options2) {
        {
          if (!Internals.usingClientEntryPoint && true) {
            error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
          }
        }
        return hydrateRoot(container, initialChildren, options2);
      }
      function flushSync$1(fn) {
        {
          if (isAlreadyRendering()) {
            error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
          }
        }
        return flushSync(fn);
      }
      var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: "react-dom"
      });
      {
        if (!foundDevTools && canUseDOM && window.top === window.self) {
          if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
            var protocol = window.location.protocol;
            if (/^(https?|file):$/.test(protocol)) {
              console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? `
You might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq` : ""), "font-weight:bold");
            }
          }
        }
      }
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
      exports.createPortal = createPortal$1;
      exports.createRoot = createRoot$1;
      exports.findDOMNode = findDOMNode;
      exports.flushSync = flushSync$1;
      exports.hydrate = hydrate;
      exports.hydrateRoot = hydrateRoot$1;
      exports.render = render;
      exports.unmountComponentAtNode = unmountComponentAtNode;
      exports.unstable_batchedUpdates = batchedUpdates$1;
      exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
      exports.version = ReactVersion;
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error);
      }
    })();
  }
});
var require_react_dom = __commonJS22((exports, module) => {
  var react_dom_development = __toESM22(require_react_dom_development(), 1);
  if (false) {} else {
    module.exports = react_dom_development;
  }
});
var require_client = __commonJS22((exports) => {
  var m4 = __toESM22(require_react_dom(), 1);
  if (false) {} else {
    i2 = m4.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    exports.createRoot = function(c22, o2) {
      i2.usingClientEntryPoint = true;
      try {
        return m4.createRoot(c22, o2);
      } finally {
        i2.usingClientEntryPoint = false;
      }
    };
    exports.hydrateRoot = function(c22, h6, o2) {
      i2.usingClientEntryPoint = true;
      try {
        return m4.hydrateRoot(c22, h6, o2);
      } finally {
        i2.usingClientEntryPoint = false;
      }
    };
  }
  var i2;
});
var require_hangul = __commonJS22((exports, module) => {
  (function() {
    var CHO = [
      "ㄱ",
      "ㄲ",
      "ㄴ",
      "ㄷ",
      "ㄸ",
      "ㄹ",
      "ㅁ",
      "ㅂ",
      "ㅃ",
      "ㅅ",
      "ㅆ",
      "ㅇ",
      "ㅈ",
      "ㅉ",
      "ㅊ",
      "ㅋ",
      "ㅌ",
      "ㅍ",
      "ㅎ"
    ], JUNG = [
      "ㅏ",
      "ㅐ",
      "ㅑ",
      "ㅒ",
      "ㅓ",
      "ㅔ",
      "ㅕ",
      "ㅖ",
      "ㅗ",
      ["ㅗ", "ㅏ"],
      ["ㅗ", "ㅐ"],
      ["ㅗ", "ㅣ"],
      "ㅛ",
      "ㅜ",
      ["ㅜ", "ㅓ"],
      ["ㅜ", "ㅔ"],
      ["ㅜ", "ㅣ"],
      "ㅠ",
      "ㅡ",
      ["ㅡ", "ㅣ"],
      "ㅣ"
    ], JONG = [
      "",
      "ㄱ",
      "ㄲ",
      ["ㄱ", "ㅅ"],
      "ㄴ",
      ["ㄴ", "ㅈ"],
      ["ㄴ", "ㅎ"],
      "ㄷ",
      "ㄹ",
      ["ㄹ", "ㄱ"],
      ["ㄹ", "ㅁ"],
      ["ㄹ", "ㅂ"],
      ["ㄹ", "ㅅ"],
      ["ㄹ", "ㅌ"],
      ["ㄹ", "ㅍ"],
      ["ㄹ", "ㅎ"],
      "ㅁ",
      "ㅂ",
      ["ㅂ", "ㅅ"],
      "ㅅ",
      "ㅆ",
      "ㅇ",
      "ㅈ",
      "ㅊ",
      "ㅋ",
      "ㅌ",
      "ㅍ",
      "ㅎ"
    ], HANGUL_OFFSET = 44032, CONSONANTS = [
      "ㄱ",
      "ㄲ",
      "ㄳ",
      "ㄴ",
      "ㄵ",
      "ㄶ",
      "ㄷ",
      "ㄸ",
      "ㄹ",
      "ㄺ",
      "ㄻ",
      "ㄼ",
      "ㄽ",
      "ㄾ",
      "ㄿ",
      "ㅀ",
      "ㅁ",
      "ㅂ",
      "ㅃ",
      "ㅄ",
      "ㅅ",
      "ㅆ",
      "ㅇ",
      "ㅈ",
      "ㅉ",
      "ㅊ",
      "ㅋ",
      "ㅌ",
      "ㅍ",
      "ㅎ"
    ], COMPLETE_CHO = [
      "ㄱ",
      "ㄲ",
      "ㄴ",
      "ㄷ",
      "ㄸ",
      "ㄹ",
      "ㅁ",
      "ㅂ",
      "ㅃ",
      "ㅅ",
      "ㅆ",
      "ㅇ",
      "ㅈ",
      "ㅉ",
      "ㅊ",
      "ㅋ",
      "ㅌ",
      "ㅍ",
      "ㅎ"
    ], COMPLETE_JUNG = [
      "ㅏ",
      "ㅐ",
      "ㅑ",
      "ㅒ",
      "ㅓ",
      "ㅔ",
      "ㅕ",
      "ㅖ",
      "ㅗ",
      "ㅘ",
      "ㅙ",
      "ㅚ",
      "ㅛ",
      "ㅜ",
      "ㅝ",
      "ㅞ",
      "ㅟ",
      "ㅠ",
      "ㅡ",
      "ㅢ",
      "ㅣ"
    ], COMPLETE_JONG = [
      "",
      "ㄱ",
      "ㄲ",
      "ㄳ",
      "ㄴ",
      "ㄵ",
      "ㄶ",
      "ㄷ",
      "ㄹ",
      "ㄺ",
      "ㄻ",
      "ㄼ",
      "ㄽ",
      "ㄾ",
      "ㄿ",
      "ㅀ",
      "ㅁ",
      "ㅂ",
      "ㅄ",
      "ㅅ",
      "ㅆ",
      "ㅇ",
      "ㅈ",
      "ㅊ",
      "ㅋ",
      "ㅌ",
      "ㅍ",
      "ㅎ"
    ], COMPLEX_CONSONANTS = [
      ["ㄱ", "ㅅ", "ㄳ"],
      ["ㄴ", "ㅈ", "ㄵ"],
      ["ㄴ", "ㅎ", "ㄶ"],
      ["ㄹ", "ㄱ", "ㄺ"],
      ["ㄹ", "ㅁ", "ㄻ"],
      ["ㄹ", "ㅂ", "ㄼ"],
      ["ㄹ", "ㅅ", "ㄽ"],
      ["ㄹ", "ㅌ", "ㄾ"],
      ["ㄹ", "ㅍ", "ㄿ"],
      ["ㄹ", "ㅎ", "ㅀ"],
      ["ㅂ", "ㅅ", "ㅄ"]
    ], COMPLEX_VOWELS = [
      ["ㅗ", "ㅏ", "ㅘ"],
      ["ㅗ", "ㅐ", "ㅙ"],
      ["ㅗ", "ㅣ", "ㅚ"],
      ["ㅜ", "ㅓ", "ㅝ"],
      ["ㅜ", "ㅔ", "ㅞ"],
      ["ㅜ", "ㅣ", "ㅟ"],
      ["ㅡ", "ㅣ", "ㅢ"]
    ], CONSONANTS_HASH, CHO_HASH, JUNG_HASH, JONG_HASH, COMPLEX_CONSONANTS_HASH, COMPLEX_VOWELS_HASH;
    function _makeHash(array) {
      var length = array.length, hash2 = { 0: 0 };
      for (var i2 = 0;i2 < length; i2++) {
        if (array[i2])
          hash2[array[i2].charCodeAt(0)] = i2;
      }
      return hash2;
    }
    CONSONANTS_HASH = _makeHash(CONSONANTS);
    CHO_HASH = _makeHash(COMPLETE_CHO);
    JUNG_HASH = _makeHash(COMPLETE_JUNG);
    JONG_HASH = _makeHash(COMPLETE_JONG);
    function _makeComplexHash(array) {
      var length = array.length, hash2 = {}, code1, code2;
      for (var i2 = 0;i2 < length; i2++) {
        code1 = array[i2][0].charCodeAt(0);
        code2 = array[i2][1].charCodeAt(0);
        if (typeof hash2[code1] === "undefined") {
          hash2[code1] = {};
        }
        hash2[code1][code2] = array[i2][2].charCodeAt(0);
      }
      return hash2;
    }
    COMPLEX_CONSONANTS_HASH = _makeComplexHash(COMPLEX_CONSONANTS);
    COMPLEX_VOWELS_HASH = _makeComplexHash(COMPLEX_VOWELS);
    function _isConsonant(c22) {
      return typeof CONSONANTS_HASH[c22] !== "undefined";
    }
    function _isCho(c22) {
      return typeof CHO_HASH[c22] !== "undefined";
    }
    function _isJung(c22) {
      return typeof JUNG_HASH[c22] !== "undefined";
    }
    function _isJong(c22) {
      return typeof JONG_HASH[c22] !== "undefined";
    }
    function _isHangul(c22) {
      return 44032 <= c22 && c22 <= 55203;
    }
    function _isJungJoinable(a22, b3) {
      return COMPLEX_VOWELS_HASH[a22] && COMPLEX_VOWELS_HASH[a22][b3] ? COMPLEX_VOWELS_HASH[a22][b3] : false;
    }
    function _isJongJoinable(a22, b3) {
      return COMPLEX_CONSONANTS_HASH[a22] && COMPLEX_CONSONANTS_HASH[a22][b3] ? COMPLEX_CONSONANTS_HASH[a22][b3] : false;
    }
    var disassemble = function(string, grouped) {
      if (string === null) {
        throw new Error("Arguments cannot be null");
      }
      if (typeof string === "object") {
        string = string.join("");
      }
      var result = [], length = string.length, cho, jung, jong, code, r2;
      for (var i2 = 0;i2 < length; i2++) {
        var temp = [];
        code = string.charCodeAt(i2);
        if (_isHangul(code)) {
          code -= HANGUL_OFFSET;
          jong = code % 28;
          jung = (code - jong) / 28 % 21;
          cho = parseInt((code - jong) / 28 / 21);
          temp.push(CHO[cho]);
          if (typeof JUNG[jung] === "object") {
            temp = temp.concat(JUNG[jung]);
          } else {
            temp.push(JUNG[jung]);
          }
          if (jong > 0) {
            if (typeof JONG[jong] === "object") {
              temp = temp.concat(JONG[jong]);
            } else {
              temp.push(JONG[jong]);
            }
          }
        } else if (_isConsonant(code)) {
          if (_isCho(code)) {
            r2 = CHO[CHO_HASH[code]];
          } else {
            r2 = JONG[JONG_HASH[code]];
          }
          if (typeof r2 === "string") {
            temp.push(r2);
          } else {
            temp = temp.concat(r2);
          }
        } else if (_isJung(code)) {
          r2 = JUNG[JUNG_HASH[code]];
          if (typeof r2 === "string") {
            temp.push(r2);
          } else {
            temp = temp.concat(r2);
          }
        } else {
          temp.push(string.charAt(i2));
        }
        if (grouped)
          result.push(temp);
        else
          result = result.concat(temp);
      }
      return result;
    };
    var disassembleToString = function(str) {
      if (typeof str !== "string") {
        return "";
      }
      str = disassemble(str);
      return str.join("");
    };
    var assemble = function(array) {
      if (typeof array === "string") {
        array = disassemble(array);
      }
      var result = [], length = array.length, code, stage = 0, complete_index = -1, previous_code, jong_joined = false;
      function _makeHangul(index) {
        var code2, cho, jung1, jung2, jong1 = 0, jong2, hangul2 = "";
        jong_joined = false;
        if (complete_index + 1 > index) {
          return;
        }
        for (var step = 1;; step++) {
          if (step === 1) {
            cho = array[complete_index + step].charCodeAt(0);
            if (_isJung(cho)) {
              if (complete_index + step + 1 <= index && _isJung(jung1 = array[complete_index + step + 1].charCodeAt(0))) {
                result.push(String.fromCharCode(_isJungJoinable(cho, jung1)));
                complete_index = index;
                return;
              } else {
                result.push(array[complete_index + step]);
                complete_index = index;
                return;
              }
            } else if (!_isCho(cho)) {
              result.push(array[complete_index + step]);
              complete_index = index;
              return;
            }
            hangul2 = array[complete_index + step];
          } else if (step === 2) {
            jung1 = array[complete_index + step].charCodeAt(0);
            if (_isCho(jung1)) {
              cho = _isJongJoinable(cho, jung1);
              hangul2 = String.fromCharCode(cho);
              result.push(hangul2);
              complete_index = index;
              return;
            } else {
              hangul2 = String.fromCharCode((CHO_HASH[cho] * 21 + JUNG_HASH[jung1]) * 28 + HANGUL_OFFSET);
            }
          } else if (step === 3) {
            jung2 = array[complete_index + step].charCodeAt(0);
            if (_isJungJoinable(jung1, jung2)) {
              jung1 = _isJungJoinable(jung1, jung2);
            } else {
              jong1 = jung2;
            }
            hangul2 = String.fromCharCode((CHO_HASH[cho] * 21 + JUNG_HASH[jung1]) * 28 + JONG_HASH[jong1] + HANGUL_OFFSET);
          } else if (step === 4) {
            jong2 = array[complete_index + step].charCodeAt(0);
            if (_isJongJoinable(jong1, jong2)) {
              jong1 = _isJongJoinable(jong1, jong2);
            } else {
              jong1 = jong2;
            }
            hangul2 = String.fromCharCode((CHO_HASH[cho] * 21 + JUNG_HASH[jung1]) * 28 + JONG_HASH[jong1] + HANGUL_OFFSET);
          } else if (step === 5) {
            jong2 = array[complete_index + step].charCodeAt(0);
            jong1 = _isJongJoinable(jong1, jong2);
            hangul2 = String.fromCharCode((CHO_HASH[cho] * 21 + JUNG_HASH[jung1]) * 28 + JONG_HASH[jong1] + HANGUL_OFFSET);
          }
          if (complete_index + step >= index) {
            result.push(hangul2);
            complete_index = index;
            return;
          }
        }
      }
      for (var i2 = 0;i2 < length; i2++) {
        code = array[i2].charCodeAt(0);
        if (!_isCho(code) && !_isJung(code) && !_isJong(code)) {
          _makeHangul(i2 - 1);
          _makeHangul(i2);
          stage = 0;
          continue;
        }
        if (stage === 0) {
          if (_isCho(code)) {
            stage = 1;
          } else if (_isJung(code)) {
            stage = 4;
          }
        } else if (stage == 1) {
          if (_isJung(code)) {
            stage = 2;
          } else {
            if (_isJongJoinable(previous_code, code)) {
              stage = 5;
            } else {
              _makeHangul(i2 - 1);
            }
          }
        } else if (stage == 2) {
          if (_isJong(code)) {
            stage = 3;
          } else if (_isJung(code)) {
            if (_isJungJoinable(previous_code, code)) {} else {
              _makeHangul(i2 - 1);
              stage = 4;
            }
          } else {
            _makeHangul(i2 - 1);
            stage = 1;
          }
        } else if (stage == 3) {
          if (_isJong(code)) {
            if (!jong_joined && _isJongJoinable(previous_code, code)) {
              jong_joined = true;
            } else {
              _makeHangul(i2 - 1);
              stage = 1;
            }
          } else if (_isCho(code)) {
            _makeHangul(i2 - 1);
            stage = 1;
          } else if (_isJung(code)) {
            _makeHangul(i2 - 2);
            stage = 2;
          }
        } else if (stage == 4) {
          if (_isJung(code)) {
            if (_isJungJoinable(previous_code, code)) {
              _makeHangul(i2);
              stage = 0;
            } else {
              _makeHangul(i2 - 1);
            }
          } else {
            _makeHangul(i2 - 1);
            stage = 1;
          }
        } else if (stage == 5) {
          if (_isJung(code)) {
            _makeHangul(i2 - 2);
            stage = 2;
          } else {
            _makeHangul(i2 - 1);
            stage = 1;
          }
        }
        previous_code = code;
      }
      _makeHangul(i2 - 1);
      return result.join("");
    };
    var search = function(a22, b3) {
      var ad2 = disassemble(a22).join(""), bd = disassemble(b3).join("");
      return ad2.indexOf(bd);
    };
    var rangeSearch = function(haystack, needle) {
      var hex = disassemble(haystack).join(""), nex = disassemble(needle).join(""), grouped = disassemble(haystack, true), re = new RegExp(nex, "gi"), indices = [], result;
      if (!needle.length)
        return [];
      while (result = re.exec(hex)) {
        indices.push(result.index);
      }
      function findStart(index) {
        for (var i2 = 0, length = 0;i2 < grouped.length; ++i2) {
          length += grouped[i2].length;
          if (index < length)
            return i2;
        }
      }
      function findEnd(index) {
        for (var i2 = 0, length = 0;i2 < grouped.length; ++i2) {
          length += grouped[i2].length;
          if (index + nex.length <= length)
            return i2;
        }
      }
      return indices.map(function(i2) {
        return [findStart(i2), findEnd(i2)];
      });
    };
    function Searcher(string) {
      this.string = string;
      this.disassembled = disassemble(string).join("");
    }
    Searcher.prototype.search = function(string) {
      return disassemble(string).join("").indexOf(this.disassembled);
    };
    var endsWithConsonant = function(string) {
      if (typeof string === "object") {
        string = string.join("");
      }
      var code = string.charCodeAt(string.length - 1);
      if (_isHangul(code)) {
        code -= HANGUL_OFFSET;
        var jong = code % 28;
        if (jong > 0) {
          return true;
        }
      } else if (_isConsonant(code)) {
        return true;
      }
      return false;
    };
    var endsWith = function(string, target) {
      return disassemble(string).pop() === target;
    };
    var hangul = {
      disassemble,
      d: disassemble,
      disassembleToString,
      ds: disassembleToString,
      assemble,
      a: assemble,
      search,
      rangeSearch,
      Searcher,
      endsWithConsonant,
      endsWith,
      isHangul: function(c22) {
        if (typeof c22 === "string")
          c22 = c22.charCodeAt(0);
        return _isHangul(c22);
      },
      isComplete: function(c22) {
        if (typeof c22 === "string")
          c22 = c22.charCodeAt(0);
        return _isHangul(c22);
      },
      isConsonant: function(c22) {
        if (typeof c22 === "string")
          c22 = c22.charCodeAt(0);
        return _isConsonant(c22);
      },
      isVowel: function(c22) {
        if (typeof c22 === "string")
          c22 = c22.charCodeAt(0);
        return _isJung(c22);
      },
      isCho: function(c22) {
        if (typeof c22 === "string")
          c22 = c22.charCodeAt(0);
        return _isCho(c22);
      },
      isJong: function(c22) {
        if (typeof c22 === "string")
          c22 = c22.charCodeAt(0);
        return _isJong(c22);
      },
      isHangulAll: function(str) {
        if (typeof str !== "string")
          return false;
        for (var i2 = 0;i2 < str.length; i2++) {
          if (!_isHangul(str.charCodeAt(i2)))
            return false;
        }
        return true;
      },
      isCompleteAll: function(str) {
        if (typeof str !== "string")
          return false;
        for (var i2 = 0;i2 < str.length; i2++) {
          if (!_isHangul(str.charCodeAt(i2)))
            return false;
        }
        return true;
      },
      isConsonantAll: function(str) {
        if (typeof str !== "string")
          return false;
        for (var i2 = 0;i2 < str.length; i2++) {
          if (!_isConsonant(str.charCodeAt(i2)))
            return false;
        }
        return true;
      },
      isVowelAll: function(str) {
        if (typeof str !== "string")
          return false;
        for (var i2 = 0;i2 < str.length; i2++) {
          if (!_isJung(str.charCodeAt(i2)))
            return false;
        }
        return true;
      },
      isChoAll: function(str) {
        if (typeof str !== "string")
          return false;
        for (var i2 = 0;i2 < str.length; i2++) {
          if (!_isCho(str.charCodeAt(i2)))
            return false;
        }
        return true;
      },
      isJongAll: function(str) {
        if (typeof str !== "string")
          return false;
        for (var i2 = 0;i2 < str.length; i2++) {
          if (!_isJong(str.charCodeAt(i2)))
            return false;
        }
        return true;
      }
    };
    if (typeof define == "function" && define.amd) {
      define(function() {
        return hangul;
      });
    } else if (typeof module !== "undefined") {
      module.exports = hangul;
    } else {
      window.Hangul = hangul;
    }
  })();
});
var require_shallowequal = __commonJS22((exports, module) => {
  module.exports = function shallowEqual(objA, objB, compare, compareContext) {
    var ret = compare ? compare.call(compareContext, objA, objB) : undefined;
    if (ret !== undefined) {
      return !!ret;
    }
    if (objA === objB) {
      return true;
    }
    if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
      return false;
    }
    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) {
      return false;
    }
    var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
    for (var idx = 0;idx < keysA.length; idx++) {
      var key = keysA[idx];
      if (!bHasOwnProperty(key)) {
        return false;
      }
      var valueA = objA[key];
      var valueB = objB[key];
      ret = compare ? compare.call(compareContext, valueA, valueB, key) : undefined;
      if (ret === false || ret === undefined && valueA !== valueB) {
        return false;
      }
    }
    return true;
  };
});
var A6 = function(j2, q2) {
  if (j2) {
    const u22 = j2.length.valueOf();
    for (let p4 = 0;p4 < u22; p4++)
      q2(j2.at(p4), p4);
  }
};
var B5 = function(j2, q2, u22 = []) {
  const p4 = u22 ?? [], v3 = j2.length.valueOf();
  p4.length = v3;
  for (let w2 = 0;w2 < v3; w2++) {
    const z3 = j2.at(w2);
    p4[w2] = q2(z3, w2);
  }
  return p4;
};
var x4 = function(j2, q2) {
  if (j2) {
    const u22 = j2.length.valueOf();
    for (let p4 = 0;p4 < u22; p4++) {
      const v3 = j2.at(p4);
      if (v3 !== undefined && q2(v3, p4))
        return p4;
    }
  }
  return -1;
};

class p4 {
  r;
  #r = {};
  constructor(r2) {
    this.setActive = r2;
  }
  registerLayout(r2, j2) {
    const f4 = this.#f(r2);
    if (f4[f4.length - 1])
      this.setActive(f4[f4.length - 1], false);
    return f4.push(j2), this.setActive(f4[f4.length - 1], true), () => this.unregisterLayout(r2, j2);
  }
  unregisterLayout(r2, j2) {
    const f4 = this.#f(r2).filter((z3) => z3 !== j2);
    if (this.#r[r2] = f4, f4[f4.length - 1])
      this.setActive(f4[f4.length - 1], true);
  }
  #f(r2) {
    return this.#r[r2] ?? (this.#r[r2] = []);
  }
}

class x22 extends p4 {
  constructor() {
    super((r2, j2) => r2(j2));
  }
}
var CONTROL_TAG = "control";

class PopupControl {
  #listeners = new Set;
  #uniqueControls = new x22;
  #activateListeners = new Set;
  activate() {
    this.#activateListeners.forEach((listener) => listener.activate?.());
  }
  deactivate() {
    this.#activateListeners.forEach((listener) => listener.deactivate?.());
  }
  addActivateListener(listener) {
    this.#activateListeners.add(listener);
  }
  removeActivateListener(listener) {
    this.#activateListeners.delete(listener);
  }
  registerActive(setActive) {
    return this.#uniqueControls.registerLayout(CONTROL_TAG, setActive);
  }
  onUp() {
    for (const listener of this.#listeners) {
      listener.onUp?.();
    }
  }
  onDown() {
    for (const listener of this.#listeners) {
      listener.onDown?.();
    }
  }
  onLeft() {
    for (const listener of this.#listeners) {
      listener.onLeft?.();
    }
  }
  onRight() {
    for (const listener of this.#listeners) {
      listener.onRight?.();
    }
  }
  onAction() {
    for (const listener of this.#listeners) {
      listener.onAction?.();
    }
  }
  onBack() {
    for (const listener of this.#listeners) {
      listener.onBack?.();
    }
  }
  onStart() {
    for (const listener of this.#listeners) {
      listener.onStart?.();
    }
  }
  addListener(listener) {
    this.#listeners.add(listener);
  }
  removeListener(listener) {
    this.#listeners.delete(listener);
  }
  static DOWN = (control) => control.onDown();
  static UP = (control) => control.onUp();
  static LEFT = (control) => control.onLeft();
  static RIGHT = (control) => control.onRight();
  static ACTION = (control) => control.onAction();
  static BACK = (control) => control.onBack();
  static START = (control) => control.onStart();
}
var DEFAULT_CONTROL_CONTEXT = {
  popupControl: new PopupControl
};
var Context = import_react5.default.createContext(DEFAULT_CONTROL_CONTEXT);
var ControlContextProvider = ({ children, popupControl }) => {
  const context = useInitControlContext({ popupControl });
  return jsx_dev_runtime.jsxDEV(Context.Provider, {
    value: context,
    children
  }, undefined, false, undefined, null);
};
var useControlContext = () => {
  const context = import_react5.useContext(Context);
  if (!context) {
    throw new Error("useControlContext must be used within a Provider");
  }
  return context;
};
var LockStatus;
(function(LockStatus2) {
  LockStatus2[LockStatus2["UNLOCKED"] = 0] = "UNLOCKED";
  LockStatus2[LockStatus2["LOCKED"] = 1] = "LOCKED";
})(LockStatus || (LockStatus = {}));
var DEFAULT_GAME_CONTEXT = {
  getLayout: (layout) => typeof layout === "object" ? layout : undefined,
  uniqueLayout: new x22
};
var Context2 = import_react11.default.createContext(DEFAULT_GAME_CONTEXT);
var LayoutContextProvider = ({ children }) => {
  const context = useInitLayoutContext();
  return jsx_dev_runtime2.jsxDEV(Context2.Provider, {
    value: context,
    children
  }, undefined, false, undefined, null);
};
var useLayoutContext = () => {
  const context = import_react11.useContext(Context2);
  if (!context) {
    throw new Error("useDialogContext must be used within a Provider");
  }
  return context;
};
var DEFAULT_HORIZONTAL_PADDING = 100;
var DEFAULT_VERTICAL_PADDING = 50;
var OVERLAP = {
  position: "absolute"
};
var POPUP_CSS = {
  outline: "3px solid #fff",
  backgroundColor: "black",
  borderRadius: 12,
  padding: 3,
  boxShadow: "10px 5px 0px #000000cc",
  transition: "outline-color .3s"
};
var DOUBLE_BORDER_CSS = {
  border: "3px solid white",
  borderRadius: 10,
  outline: "3px solid black",
  color: "white",
  cursor: "pointer",
  transition: "border-color .3s",
  userSelect: "none"
};
var DOUBLE_BORDER_HEIGHT_OFFSET = 5;
var DEFAULT_FONT_SIZE = 24;
var client = __toESM22(require_client(), 1);
var DEFAULT_EDIT_CONTEXT = {
  editing: false,
  toggleEditing() {}
};
var Context3 = import_react18.default.createContext(DEFAULT_EDIT_CONTEXT);
var EditContextProvider2 = ({ children, editor }) => {
  const context = useEditControlContext();
  return jsx_dev_runtime9.jsxDEV(Context3.Provider, {
    value: context,
    children: [
      editor && jsx_dev_runtime9.jsxDEV(EditToggle, {}, undefined, false, undefined, null),
      children
    ]
  }, undefined, true, undefined, null);
};
var useEditContext = () => {
  const context = import_react18.useContext(Context3);
  if (!context) {
    throw new Error("useEditContext must be used within a Provider");
  }
  return context;
};
var DEFAULT_LANGUAGES = {
  english: {
    emoji: "\uD83C\uDDEC\uD83C\uDDE7",
    name: "english",
    alphabet: "abcdefghijklmnopqrstuvwxyz.-!?0123456789",
    capitalize: true
  },
  korean: {
    emoji: "\uD83C\uDDF0\uD83C\uDDF7",
    name: "한국인",
    alphabet: "ㅂㅈㄷㄱ쇼ㅕㅑㅐㅔㅁㄴㅇㄹ호ㅓㅏㅣㅋㅌㅊ퓨ㅜㅡ.-!?0123456789",
    capitalize: false
  }
};
var DEFAULT_LANGUAGE = DEFAULT_LANGUAGES["english"];
var import_hangul_js = __toESM22(require_hangul(), 1);
var import_hangul_js2 = __toESM22(require_hangul(), 1);
var COLUMNS = 10;
var ActionButton;
(function(ActionButton2) {
  ActionButton2[ActionButton2["LANG"] = 0] = "LANG";
  ActionButton2[ActionButton2["CAP"] = 1] = "CAP";
  ActionButton2[ActionButton2["SPACE"] = 2] = "SPACE";
  ActionButton2[ActionButton2["DEL"] = 3] = "DEL";
  ActionButton2[ActionButton2["OK"] = 4] = "OK";
  ActionButton2[ActionButton2["RANDOM"] = 5] = "RANDOM";
})(ActionButton || (ActionButton = {}));
var __assign = function() {
  __assign = Object.assign || function __assign(t2) {
    for (var s2, i2 = 1, n4 = arguments.length;i2 < n4; i2++) {
      s2 = arguments[i2];
      for (var p22 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p22))
          t2[p22] = s2[p22];
    }
    return t2;
  };
  return __assign.apply(this, arguments);
};
var memoize = function(fn) {
  var cache = Object.create(null);
  return function(arg) {
    if (cache[arg] === undefined)
      cache[arg] = fn(arg);
    return cache[arg];
  };
};
var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
var isPropValid = memoize(function(prop) {
  return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
});
var import_shallowequal = __toESM22(require_shallowequal(), 1);
var MS = "-ms-";
var MOZ = "-moz-";
var WEBKIT = "-webkit-";
var COMMENT = "comm";
var RULESET = "rule";
var DECLARATION = "decl";
var IMPORT = "@import";
var KEYFRAMES = "@keyframes";
var LAYER = "@layer";
var abs = Math.abs;
var from = String.fromCharCode;
var assign = Object.assign;
var line = 1;
var column = 1;
var length = 0;
var position = 0;
var character = 0;
var characters = "";
var unitlessKeys = {
  animationIterationCount: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
};
var emotion_unitless_esm_default = unitlessKeys;
var I2 = function(e3, t2, n4) {
  return n4 === undefined && (n4 = C3), e3.theme !== n4.theme && e3.theme || t2 || n4.theme;
};
var R3 = function(e3) {
  return e3.replace(O2, "-").replace(D2, "");
};
var x32 = function(e3) {
  var t2, n4 = "";
  for (t2 = Math.abs(e3);t2 > k2; t2 = t2 / k2 | 0)
    n4 = j2(t2 % k2) + n4;
  return (j2(t2 % k2) + n4).replace(T4, "$1-$2");
};
var z3 = function(e3) {
  return x32($4(e3) >>> 0);
};
var B22 = function(e3) {
  return typeof e3 == "string" && e3 || e3.displayName || e3.name || "Component";
};
var L4 = function(e3) {
  return typeof e3 == "string" && e3.charAt(0) === e3.charAt(0).toLowerCase();
};
var X3 = function(e3) {
  return (("type" in (t2 = e3)) && t2.type.$$typeof) === Y ? U3 : ("$$typeof" in e3) ? J[e3.$$typeof] : q2;
  var t2;
};
var oe = function(e3, t2, n4) {
  if (typeof t2 != "string") {
    if (ne) {
      var o2 = te(t2);
      o2 && o2 !== ne && oe(e3, o2, n4);
    }
    var r2 = K(t2);
    Q3 && (r2 = r2.concat(Q3(t2)));
    for (var s2 = X3(e3), i2 = X3(t2), a22 = 0;a22 < r2.length; ++a22) {
      var c22 = r2[a22];
      if (!((c22 in H4) || n4 && n4[c22] || i2 && (c22 in i2) || s2 && (c22 in s2))) {
        var l22 = ee(t2, c22);
        try {
          Z3(e3, c22, l22);
        } catch (e22) {}
      }
    }
  }
  return e3;
};
var re = function(e3) {
  return typeof e3 == "function";
};
var se = function(e3) {
  return typeof e3 == "object" && "styledComponentId" in e3;
};
var ie = function(e3, t2) {
  return e3 && t2 ? "".concat(e3, " ").concat(t2) : e3 || t2 || "";
};
var ae = function(e3, t2) {
  if (e3.length === 0)
    return "";
  for (var n4 = e3[0], o2 = 1;o2 < e3.length; o2++)
    n4 += t2 ? t2 + e3[o2] : e3[o2];
  return n4;
};
var ce = function(e3) {
  return e3 !== null && typeof e3 == "object" && e3.constructor.name === Object.name && !(("props" in e3) && e3.$$typeof);
};
var le = function(e3, t2, n4) {
  if (n4 === undefined && (n4 = false), !n4 && !ce(e3) && !Array.isArray(e3))
    return t2;
  if (Array.isArray(t2))
    for (var o2 = 0;o2 < t2.length; o2++)
      e3[o2] = le(e3[o2], t2[o2]);
  else if (ce(t2))
    for (var o2 in t2)
      e3[o2] = le(e3[o2], t2[o2]);
  return e3;
};
var ue = function(e3, t2) {
  Object.defineProperty(e3, "toString", { value: t2 });
};
var de = function() {
  for (var e3 = [], t2 = 0;t2 < arguments.length; t2++)
    e3[t2] = arguments[t2];
  for (var n4 = e3[0], o2 = [], r2 = 1, s2 = e3.length;r2 < s2; r2 += 1)
    o2.push(e3[r2]);
  return o2.forEach(function(e22) {
    n4 = n4.replace(/%[a-z]/, e22);
  }), n4;
};
var he = function(t2) {
  for (var n4 = [], o2 = 1;o2 < arguments.length; o2++)
    n4[o2 - 1] = arguments[o2];
  return new Error(de.apply(undefined, __spreadArray([pe[t2]], n4, false)).trim());
};
var Pe = function() {
  return typeof __webpack_nonce__ != "undefined" ? __webpack_nonce__ : null;
};
var je = function(e3, t2) {
  return e3.map(function(e22) {
    return e22.type === "rule" && (e22.value = "".concat(t2, " ").concat(e22.value), e22.value = e22.value.replaceAll(",", ",".concat(t2, " ")), e22.props = e22.props.map(function(e32) {
      return "".concat(t2, " ").concat(e32);
    })), Array.isArray(e22.children) && e22.type !== "@keyframes" && (e22.children = je(e22.children, t2)), e22;
  });
};
var xe = function(e3) {
  var t2, n4, o2, r2 = e3 === undefined ? C3 : e3, s2 = r2.options, i2 = s2 === undefined ? C3 : s2, a22 = r2.plugins, c22 = a22 === undefined ? _3 : a22, l22 = function(e22, o3, r3) {
    return r3.startsWith(n4) && r3.endsWith(n4) && r3.replaceAll(n4, "").length > 0 ? ".".concat(t2) : e22;
  }, u22 = c22.slice();
  u22.push(function(e22) {
    e22.type === RULESET && e22.value.includes("&") && (e22.props[0] = e22.props[0].replace(Te2, n4).replace(o2, l22));
  }), i2.prefix && u22.push(prefixer), u22.push(stringify);
  var p32 = function(e22, r3, s3, a3) {
    r3 === undefined && (r3 = ""), s3 === undefined && (s3 = ""), a3 === undefined && (a3 = "&"), t2 = a3, n4 = r3, o2 = new RegExp("\\".concat(n4, "\\b"), "g");
    var c3 = e22.replace(ke, ""), l33 = compile(s3 || r3 ? "".concat(s3, " ").concat(r3, " { ").concat(c3, " }") : c3);
    i2.namespace && (l33 = je(l33, i2.namespace));
    var p42 = [];
    return serialize(l33, middleware(u22.concat(rulesheet(function(e32) {
      return p42.push(e32);
    })))), p42;
  };
  return p32.hash = c22.length ? c22.reduce(function(e22, t22) {
    return t22.name || he(15), M3(e22, t22.name);
  }, F).toString() : "", p32;
};
var Be = function() {
  return import_react26.useContext(Me);
};
var Le = function(e3) {
  var t2 = import_react26.useState(e3.stylisPlugins), n4 = t2[0], r2 = t2[1], c22 = Be().styleSheet, l22 = import_react26.useMemo(function() {
    var t22 = c22;
    return e3.sheet ? t22 = e3.sheet : e3.target && (t22 = t22.reconstructWithOptions({ target: e3.target }, false)), e3.disableCSSOMInjection && (t22 = t22.reconstructWithOptions({ useCSSOMInjection: false })), t22;
  }, [e3.disableCSSOMInjection, e3.sheet, e3.target, c22]), u22 = import_react26.useMemo(function() {
    return xe({ options: { namespace: e3.namespace, prefix: e3.enableVendorPrefixes }, plugins: n4 });
  }, [e3.enableVendorPrefixes, e3.namespace, n4]);
  import_react26.useEffect(function() {
    import_shallowequal.default(n4, e3.stylisPlugins) || r2(e3.stylisPlugins);
  }, [e3.stylisPlugins]);
  var d2 = import_react26.useMemo(function() {
    return { shouldForwardProp: e3.shouldForwardProp, styleSheet: l22, stylis: u22 };
  }, [e3.shouldForwardProp, l22, u22]);
  return import_react26.default.createElement(Me.Provider, { value: d2 }, import_react26.default.createElement(ze.Provider, { value: u22 }, e3.children));
};
var We = function(e3) {
  for (var t2 = "", n4 = 0;n4 < e3.length; n4++) {
    var o2 = e3[n4];
    if (n4 === 1 && o2 === "-" && e3[0] === "-")
      return e3;
    Ye(o2) ? t2 += "-" + o2.toLowerCase() : t2 += o2;
  }
  return t2.startsWith("ms-") ? "-" + t2 : t2;
};
var Ue = function(e3, t2, n4, o2) {
  if (qe(e3))
    return [];
  if (se(e3))
    return [".".concat(e3.styledComponentId)];
  if (re(e3)) {
    if (!re(s2 = e3) || s2.prototype && s2.prototype.isReactComponent || !t2)
      return [e3];
    var r2 = e3(t2);
    return typeof r2 != "object" || Array.isArray(r2) || r2 instanceof Ge || ce(r2) || r2 === null || console.error("".concat(B22(e3), " is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.")), Ue(r2, t2, n4, o2);
  }
  var s2;
  return e3 instanceof Ge ? n4 ? (e3.inject(n4, o2), [e3.getName(o2)]) : [e3] : ce(e3) ? He(e3) : Array.isArray(e3) ? Array.prototype.concat.apply(_3, e3.map(function(e22) {
    return Ue(e22, t2, n4, o2);
  })) : [e3.toString()];
};
var Je = function(e3) {
  for (var t2 = 0;t2 < e3.length; t2 += 1) {
    var n4 = e3[t2];
    if (re(n4) && !se(n4))
      return false;
  }
  return true;
};
var rt = function(e3, r2, s2) {
  var i2 = se(e3), a22 = e3, c22 = !L4(e3), p32 = r2.attrs, d2 = p32 === undefined ? _3 : p32, h6 = r2.componentId, f4 = h6 === undefined ? function(e22, t2) {
    var n4 = typeof e22 != "string" ? "sc" : R3(e22);
    nt[n4] = (nt[n4] || 0) + 1;
    var o2 = "".concat(n4, "-").concat(z3(v3 + n4 + nt[n4]));
    return t2 ? "".concat(t2, "-").concat(o2) : o2;
  }(r2.displayName, r2.parentComponentId) : h6, m4 = r2.displayName, y4 = m4 === undefined ? function(e22) {
    return L4(e22) ? "styled.".concat(e22) : "Styled(".concat(B22(e22), ")");
  }(e3) : m4, g2 = r2.displayName && r2.componentId ? "".concat(R3(r2.displayName), "-").concat(r2.componentId) : r2.componentId || f4, S3 = i2 && a22.attrs ? a22.attrs.concat(d2).filter(Boolean) : d2, w2 = r2.shouldForwardProp;
  if (i2 && a22.shouldForwardProp) {
    var b3 = a22.shouldForwardProp;
    if (r2.shouldForwardProp) {
      var E3 = r2.shouldForwardProp;
      w2 = function(e22, t2) {
        return b3(e22, t2) && E3(e22, t2);
      };
    } else
      w2 = b3;
  }
  var N3 = new Ze(s2, g2, i2 ? a22.componentStyle : undefined);
  function O2(e22, r3) {
    return function(e32, r4, s3) {
      var { attrs: i3, componentStyle: a3, defaultProps: c3, foldedComponentIds: p42, styledComponentId: d22, target: h22 } = e32, f23 = import_react26.default.useContext(Ke), m22 = Be(), y23 = e32.shouldForwardProp || m22.shouldForwardProp;
      import_react26.useDebugValue(d22);
      var v3 = I2(r4, f23, c3) || C3, g22 = function(e4, n4, o2) {
        for (var r5, s4 = __assign(__assign({}, n4), { className: undefined, theme: o2 }), i4 = 0;i4 < e4.length; i4 += 1) {
          var a4 = re(r5 = e4[i4]) ? r5(s4) : r5;
          for (var c4 in a4)
            s4[c4] = c4 === "className" ? ie(s4[c4], a4[c4]) : c4 === "style" ? __assign(__assign({}, s4[c4]), a4[c4]) : a4[c4];
        }
        return n4.className && (s4.className = ie(s4.className, n4.className)), s4;
      }(i3, r4, v3), S22 = g22.as || h22, w22 = {};
      for (var b23 in g22)
        g22[b23] === undefined || b23[0] === "$" || b23 === "as" || b23 === "theme" && g22.theme === v3 || (b23 === "forwardedAs" ? w22.as = g22.forwardedAs : y23 && !y23(b23, S22) || (w22[b23] = g22[b23], y23 || false || isPropValid(b23) || ot.has(b23) || !A22.has(S22) || (ot.add(b23), console.warn('styled-components: it looks like an unknown prop "'.concat(b23, '" is being sent through to the DOM, which will likely trigger a React console error. If you would like automatic filtering of unknown props, you can opt-into that behavior via `<StyleSheetManager shouldForwardProp={...}>` (connect an API like `@emotion/is-prop-valid`) or consider using transient props (`$` prefix for automatic filtering.)')))));
      var E22 = function(e4, t2) {
        var n4 = Be(), o2 = e4.generateAndInjectStyles(t2, n4.styleSheet, n4.stylis);
        return import_react26.useDebugValue(o2), o2;
      }(a3, g22);
      e32.warnTooManyClasses && e32.warnTooManyClasses(E22);
      var N22 = ie(p42, d22);
      return E22 && (N22 += " " + E22), g22.className && (N22 += " " + g22.className), w22[L4(S22) && !A22.has(S22) ? "class" : "className"] = N22, w22.ref = s3, import_react26.createElement(S22, w22);
    }(D2, e22, r3);
  }
  O2.displayName = y4;
  var D2 = import_react26.default.forwardRef(O2);
  return D2.attrs = S3, D2.componentStyle = N3, D2.displayName = y4, D2.shouldForwardProp = w2, D2.foldedComponentIds = i2 ? ie(a22.foldedComponentIds, a22.styledComponentId) : "", D2.styledComponentId = g2, D2.target = i2 ? a22.target : e3, Object.defineProperty(D2, "defaultProps", { get: function() {
    return this._foldedDefaultProps;
  }, set: function(e22) {
    this._foldedDefaultProps = i2 ? function(e32) {
      for (var t2 = [], n4 = 1;n4 < arguments.length; n4++)
        t2[n4 - 1] = arguments[n4];
      for (var o2 = 0, r3 = t2;o2 < r3.length; o2++)
        le(e32, r3[o2], true);
      return e32;
    }({}, a22.defaultProps, e22) : e22;
  } }), P3(y4, g2), D2.warnTooManyClasses = function(e22, t2) {
    var n4 = {}, o2 = false;
    return function(r3) {
      if (!o2 && (n4[r3] = true, Object.keys(n4).length >= 200)) {
        var s3 = t2 ? ' with the id of "'.concat(t2, '"') : "";
        console.warn("Over ".concat(200, " classes were generated for component ").concat(e22).concat(s3, `.
`) + `Consider using the attrs method, together with a style object for frequently changed styles.
Example:
  const Component = styled.div.attrs(props => ({
    style: {
      background: props.background,
    },
  }))\`width: 100%;\`

  <Component />`), o2 = true, n4 = {};
      }
    };
  }(y4, g2), ue(D2, function() {
    return ".".concat(D2.styledComponentId);
  }), c22 && oe(D2, e3, { attrs: true, componentStyle: true, displayName: true, foldedComponentIds: true, shouldForwardProp: true, styledComponentId: true, target: true }), D2;
};
var st = function(e3, t2) {
  for (var n4 = [e3[0]], o2 = 0, r2 = t2.length;o2 < r2; o2 += 1)
    n4.push(t2[o2], e3[o2 + 1]);
  return n4;
};
var at = function(t2) {
  for (var n4 = [], o2 = 1;o2 < arguments.length; o2++)
    n4[o2 - 1] = arguments[o2];
  if (re(t2) || ce(t2))
    return it(Ue(st(_3, __spreadArray([t2], n4, true))));
  var r2 = t2;
  return n4.length === 0 && r2.length === 1 && typeof r2[0] == "string" ? Ue(r2) : it(Ue(st(r2, n4)));
};
var ct = function(n4, o2, r2) {
  if (r2 === undefined && (r2 = C3), !o2)
    throw he(1, o2);
  var s2 = function(t2) {
    for (var s3 = [], i2 = 1;i2 < arguments.length; i2++)
      s3[i2 - 1] = arguments[i2];
    return n4(o2, r2, at.apply(undefined, __spreadArray([t2], s3, false)));
  };
  return s2.attrs = function(e3) {
    return ct(n4, o2, __assign(__assign({}, r2), { attrs: Array.prototype.concat(r2.attrs, e3).filter(Boolean) }));
  }, s2.withConfig = function(e3) {
    return ct(n4, o2, __assign(__assign({}, r2), e3));
  }, s2;
};
var ht = function(t2) {
  for (var n4 = [], o2 = 1;o2 < arguments.length; o2++)
    n4[o2 - 1] = arguments[o2];
  typeof navigator != "undefined" && navigator.product === "ReactNative" && console.warn("`keyframes` cannot be used on ReactNative, only on the web. To do animation in ReactNative please use Animated.");
  var r2 = ae(at.apply(undefined, __spreadArray([t2], n4, false))), s2 = z3(r2);
  return new Ge(s2, r2);
};
var f4 = typeof process != "undefined" && process.env !== undefined && (process.env.REACT_APP_SC_ATTR || process.env.SC_ATTR) || "data-styled";
var m4 = "active";
var y4 = "data-styled-version";
var v3 = "6.1.8";
var g2 = `/*!sc*/
`;
var S3 = typeof window != "undefined" && "HTMLElement" in window;
var w2 = Boolean(typeof SC_DISABLE_SPEEDY == "boolean" ? SC_DISABLE_SPEEDY : typeof process != "undefined" && process.env !== undefined && process.env.REACT_APP_SC_DISABLE_SPEEDY !== undefined && process.env.REACT_APP_SC_DISABLE_SPEEDY !== "" ? process.env.REACT_APP_SC_DISABLE_SPEEDY !== "false" && process.env.REACT_APP_SC_DISABLE_SPEEDY : typeof process != "undefined" && process.env !== undefined && process.env.SC_DISABLE_SPEEDY !== undefined && process.env.SC_DISABLE_SPEEDY !== "" ? process.env.SC_DISABLE_SPEEDY !== "false" && process.env.SC_DISABLE_SPEEDY : true);
var E3 = /invalid hook call/i;
var N3 = new Set;
var P3 = function(t2, n4) {
  if (true) {
    var o2 = n4 ? ' with the id of "'.concat(n4, '"') : "", s2 = "The component ".concat(t2).concat(o2, ` has been created dynamically.
`) + `You may see this warning because you've called styled inside another component.
To resolve this only create new StyledComponents outside of any render method and function component.`, i2 = console.error;
    try {
      var a22 = true;
      console.error = function(t22) {
        for (var n22 = [], o3 = 1;o3 < arguments.length; o3++)
          n22[o3 - 1] = arguments[o3];
        E3.test(t22) ? (a22 = false, N3.delete(s2)) : i2.apply(undefined, __spreadArray([t22], n22, false));
      }, import_react26.useRef(), a22 && !N3.has(s2) && (console.warn(s2), N3.add(s2));
    } catch (e3) {
      E3.test(e3.message) && N3.delete(s2);
    } finally {
      console.error = i2;
    }
  }
};
var _3 = Object.freeze([]);
var C3 = Object.freeze({});
var A22 = new Set(["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "tr", "track", "u", "ul", "use", "var", "video", "wbr", "circle", "clipPath", "defs", "ellipse", "foreignObject", "g", "image", "line", "linearGradient", "marker", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "tspan"]);
var O2 = /[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g;
var D2 = /(^-|-$)/g;
var T4 = /(a)(d)/gi;
var k2 = 52;
var j2 = function(e3) {
  return String.fromCharCode(e3 + (e3 > 25 ? 39 : 97));
};
var V4;
var F = 5381;
var M3 = function(e3, t2) {
  for (var n4 = t2.length;n4; )
    e3 = 33 * e3 ^ t2.charCodeAt(--n4);
  return e3;
};
var $4 = function(e3) {
  return M3(F, e3);
};
var G4 = typeof Symbol == "function" && Symbol.for;
var Y = G4 ? Symbol.for("react.memo") : 60115;
var W3 = G4 ? Symbol.for("react.forward_ref") : 60112;
var q2 = { childContextTypes: true, contextType: true, contextTypes: true, defaultProps: true, displayName: true, getDefaultProps: true, getDerivedStateFromError: true, getDerivedStateFromProps: true, mixins: true, propTypes: true, type: true };
var H4 = { name: true, length: true, prototype: true, caller: true, callee: true, arguments: true, arity: true };
var U3 = { $$typeof: true, compare: true, defaultProps: true, displayName: true, propTypes: true, type: true };
var J = ((V4 = {})[W3] = { $$typeof: true, render: true, defaultProps: true, displayName: true, propTypes: true }, V4[Y] = U3, V4);
var Z3 = Object.defineProperty;
var K = Object.getOwnPropertyNames;
var Q3 = Object.getOwnPropertySymbols;
var ee = Object.getOwnPropertyDescriptor;
var te = Object.getPrototypeOf;
var ne = Object.prototype;
var pe = { 1: `Cannot create styled-component for component: %s.

`, 2: `Can't collect styles once you've consumed a \`ServerStyleSheet\`'s styles! \`ServerStyleSheet\` is a one off instance for each server-side render cycle.

- Are you trying to reuse it across renders?
- Are you accidentally calling collectStyles twice?

`, 3: `Streaming SSR is only supported in a Node.js environment; Please do not try to call this method in the browser.

`, 4: `The \`StyleSheetManager\` expects a valid target or sheet prop!

- Does this error occur on the client and is your target falsy?
- Does this error occur on the server and is the sheet falsy?

`, 5: `The clone method cannot be used on the client!

- Are you running in a client-like environment on the server?
- Are you trying to run SSR on the client?

`, 6: `Trying to insert a new style tag, but the given Node is unmounted!

- Are you using a custom target that isn't mounted?
- Does your document not have a valid head element?
- Have you accidentally removed a style tag manually?

`, 7: 'ThemeProvider: Please return an object from your "theme" prop function, e.g.\n\n```js\ntheme={() => ({})}\n```\n\n', 8: `ThemeProvider: Please make your "theme" prop an object.

`, 9: "Missing document `<head>`\n\n", 10: `Cannot find a StyleSheet instance. Usually this happens if there are multiple copies of styled-components loaded at once. Check out this issue for how to troubleshoot and fix the common cases where this situation can happen: https://github.com/styled-components/styled-components/issues/1941#issuecomment-417862021

`, 11: `_This error was replaced with a dev-time warning, it will be deleted for v4 final._ [createGlobalStyle] received children which will not be rendered. Please use the component without passing children elements.

`, 12: `It seems you are interpolating a keyframe declaration (%s) into an untagged string. This was supported in styled-components v3, but is not longer supported in v4 as keyframes are now injected on-demand. Please wrap your string in the css\\\`\\\` helper which ensures the styles are injected correctly. See https://www.styled-components.com/docs/api#css

`, 13: `%s is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.

`, 14: `ThemeProvider: "theme" prop is required.

`, 15: "A stylis plugin has been supplied that is not named. We need a name for each plugin to be able to prevent styling collisions between different stylis configurations within the same app. Before you pass your plugin to `<StyleSheetManager stylisPlugins={[]}>`, please make sure each plugin is uniquely-named, e.g.\n\n```js\nObject.defineProperty(importedPlugin, 'name', { value: 'some-unique-name' });\n```\n\n", 16: `Reached the limit of how many styled components may be created at group %s.
You may only create up to 1,073,741,824 components. If you're creating components dynamically,
as for instance in your render method then you may be running into this limitation.

`, 17: `CSSStyleSheet could not be found on HTMLStyleElement.
Has styled-components' style tag been unmounted or altered by another script?
`, 18: "ThemeProvider: Please make sure your useTheme hook is within a `<ThemeProvider>`" };
var fe = function() {
  function e3(e22) {
    this.groupSizes = new Uint32Array(512), this.length = 512, this.tag = e22;
  }
  return e3.prototype.indexOfGroup = function(e22) {
    for (var t2 = 0, n4 = 0;n4 < e22; n4++)
      t2 += this.groupSizes[n4];
    return t2;
  }, e3.prototype.insertRules = function(e22, t2) {
    if (e22 >= this.groupSizes.length) {
      for (var n4 = this.groupSizes, o2 = n4.length, r2 = o2;e22 >= r2; )
        if ((r2 <<= 1) < 0)
          throw he(16, "".concat(e22));
      this.groupSizes = new Uint32Array(r2), this.groupSizes.set(n4), this.length = r2;
      for (var s2 = o2;s2 < r2; s2++)
        this.groupSizes[s2] = 0;
    }
    for (var i2 = this.indexOfGroup(e22 + 1), a22 = (s2 = 0, t2.length);s2 < a22; s2++)
      this.tag.insertRule(i2, t2[s2]) && (this.groupSizes[e22]++, i2++);
  }, e3.prototype.clearGroup = function(e22) {
    if (e22 < this.length) {
      var t2 = this.groupSizes[e22], n4 = this.indexOfGroup(e22), o2 = n4 + t2;
      this.groupSizes[e22] = 0;
      for (var r2 = n4;r2 < o2; r2++)
        this.tag.deleteRule(n4);
    }
  }, e3.prototype.getGroup = function(e22) {
    var t2 = "";
    if (e22 >= this.length || this.groupSizes[e22] === 0)
      return t2;
    for (var n4 = this.groupSizes[e22], o2 = this.indexOfGroup(e22), r2 = o2 + n4, s2 = o2;s2 < r2; s2++)
      t2 += "".concat(this.tag.getRule(s2)).concat(g2);
    return t2;
  }, e3;
}();
var me = new Map;
var ye = new Map;
var ve = 1;
var ge = function(e3) {
  if (me.has(e3))
    return me.get(e3);
  for (;ye.has(ve); )
    ve++;
  var t2 = ve++;
  if ((0 | t2) < 0 || t2 > 1073741824)
    throw he(16, "".concat(t2));
  return me.set(e3, t2), ye.set(t2, e3), t2;
};
var Se = function(e3, t2) {
  ve = t2 + 1, me.set(e3, t2), ye.set(t2, e3);
};
var we = "style[".concat(f4, "][").concat(y4, '="').concat(v3, '"]');
var be = new RegExp("^".concat(f4, '\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'));
var Ee = function(e3, t2, n4) {
  for (var o2, r2 = n4.split(","), s2 = 0, i2 = r2.length;s2 < i2; s2++)
    (o2 = r2[s2]) && e3.registerName(t2, o2);
};
var Ne = function(e3, t2) {
  for (var n4, o2 = ((n4 = t2.textContent) !== null && n4 !== undefined ? n4 : "").split(g2), r2 = [], s2 = 0, i2 = o2.length;s2 < i2; s2++) {
    var a22 = o2[s2].trim();
    if (a22) {
      var c22 = a22.match(be);
      if (c22) {
        var l22 = 0 | parseInt(c22[1], 10), u22 = c22[2];
        l22 !== 0 && (Se(u22, l22), Ee(e3, u22, c22[3]), e3.getTag().insertRules(l22, r2)), r2.length = 0;
      } else
        r2.push(a22);
    }
  }
};
var _e = function(e3) {
  var t2 = document.head, n4 = e3 || t2, o2 = document.createElement("style"), r2 = function(e22) {
    var t22 = Array.from(e22.querySelectorAll("style[".concat(f4, "]")));
    return t22[t22.length - 1];
  }(n4), s2 = r2 !== undefined ? r2.nextSibling : null;
  o2.setAttribute(f4, m4), o2.setAttribute(y4, v3);
  var i2 = Pe();
  return i2 && o2.setAttribute("nonce", i2), n4.insertBefore(o2, s2), o2;
};
var Ce = function() {
  function e3(e22) {
    this.element = _e(e22), this.element.appendChild(document.createTextNode("")), this.sheet = function(e32) {
      if (e32.sheet)
        return e32.sheet;
      for (var t2 = document.styleSheets, n4 = 0, o2 = t2.length;n4 < o2; n4++) {
        var r2 = t2[n4];
        if (r2.ownerNode === e32)
          return r2;
      }
      throw he(17);
    }(this.element), this.length = 0;
  }
  return e3.prototype.insertRule = function(e22, t2) {
    try {
      return this.sheet.insertRule(t2, e22), this.length++, true;
    } catch (e32) {
      return false;
    }
  }, e3.prototype.deleteRule = function(e22) {
    this.sheet.deleteRule(e22), this.length--;
  }, e3.prototype.getRule = function(e22) {
    var t2 = this.sheet.cssRules[e22];
    return t2 && t2.cssText ? t2.cssText : "";
  }, e3;
}();
var Ie2 = function() {
  function e3(e22) {
    this.element = _e(e22), this.nodes = this.element.childNodes, this.length = 0;
  }
  return e3.prototype.insertRule = function(e22, t2) {
    if (e22 <= this.length && e22 >= 0) {
      var n4 = document.createTextNode(t2);
      return this.element.insertBefore(n4, this.nodes[e22] || null), this.length++, true;
    }
    return false;
  }, e3.prototype.deleteRule = function(e22) {
    this.element.removeChild(this.nodes[e22]), this.length--;
  }, e3.prototype.getRule = function(e22) {
    return e22 < this.length ? this.nodes[e22].textContent : "";
  }, e3;
}();
var Ae = function() {
  function e3(e22) {
    this.rules = [], this.length = 0;
  }
  return e3.prototype.insertRule = function(e22, t2) {
    return e22 <= this.length && (this.rules.splice(e22, 0, t2), this.length++, true);
  }, e3.prototype.deleteRule = function(e22) {
    this.rules.splice(e22, 1), this.length--;
  }, e3.prototype.getRule = function(e22) {
    return e22 < this.length ? this.rules[e22] : "";
  }, e3;
}();
var Oe = S3;
var De = { isServer: !S3, useCSSOMInjection: !w2 };
var Re = function() {
  function e3(e22, n4, o2) {
    e22 === undefined && (e22 = C3), n4 === undefined && (n4 = {});
    var r2 = this;
    this.options = __assign(__assign({}, De), e22), this.gs = n4, this.names = new Map(o2), this.server = !!e22.isServer, !this.server && S3 && Oe && (Oe = false, function(e32) {
      for (var t2 = document.querySelectorAll(we), n22 = 0, o3 = t2.length;n22 < o3; n22++) {
        var r3 = t2[n22];
        r3 && r3.getAttribute(f4) !== m4 && (Ne(e32, r3), r3.parentNode && r3.parentNode.removeChild(r3));
      }
    }(this)), ue(this, function() {
      return function(e32) {
        for (var t2 = e32.getTag(), n22 = t2.length, o3 = "", r3 = function(n33) {
          var r4 = function(e4) {
            return ye.get(e4);
          }(n33);
          if (r4 === undefined)
            return "continue";
          var s3 = e32.names.get(r4), i2 = t2.getGroup(n33);
          if (s3 === undefined || i2.length === 0)
            return "continue";
          var a22 = "".concat(f4, ".g").concat(n33, '[id="').concat(r4, '"]'), c22 = "";
          s3 !== undefined && s3.forEach(function(e4) {
            e4.length > 0 && (c22 += "".concat(e4, ","));
          }), o3 += "".concat(i2).concat(a22, '{content:"').concat(c22, '"}').concat(g2);
        }, s2 = 0;s2 < n22; s2++)
          r3(s2);
        return o3;
      }(r2);
    });
  }
  return e3.registerId = function(e22) {
    return ge(e22);
  }, e3.prototype.reconstructWithOptions = function(n4, o2) {
    return o2 === undefined && (o2 = true), new e3(__assign(__assign({}, this.options), n4), this.gs, o2 && this.names || undefined);
  }, e3.prototype.allocateGSInstance = function(e22) {
    return this.gs[e22] = (this.gs[e22] || 0) + 1;
  }, e3.prototype.getTag = function() {
    return this.tag || (this.tag = (e22 = function(e32) {
      var { useCSSOMInjection: t2, target: n4 } = e32;
      return e32.isServer ? new Ae(n4) : t2 ? new Ce(n4) : new Ie2(n4);
    }(this.options), new fe(e22)));
    var e22;
  }, e3.prototype.hasNameForId = function(e22, t2) {
    return this.names.has(e22) && this.names.get(e22).has(t2);
  }, e3.prototype.registerName = function(e22, t2) {
    if (ge(e22), this.names.has(e22))
      this.names.get(e22).add(t2);
    else {
      var n4 = new Set;
      n4.add(t2), this.names.set(e22, n4);
    }
  }, e3.prototype.insertRules = function(e22, t2, n4) {
    this.registerName(e22, t2), this.getTag().insertRules(ge(e22), n4);
  }, e3.prototype.clearNames = function(e22) {
    this.names.has(e22) && this.names.get(e22).clear();
  }, e3.prototype.clearRules = function(e22) {
    this.getTag().clearGroup(ge(e22)), this.clearNames(e22);
  }, e3.prototype.clearTag = function() {
    this.tag = undefined;
  }, e3;
}();
var Te2 = /&/g;
var ke = /^\s*\/\/.*$/gm;
var Ve = new Re;
var Fe = xe();
var Me = import_react26.default.createContext({ shouldForwardProp: undefined, styleSheet: Ve, stylis: Fe });
var $e = Me.Consumer;
var ze = import_react26.default.createContext(undefined);
var Ge = function() {
  function e3(e22, t2) {
    var n4 = this;
    this.inject = function(e32, t22) {
      t22 === undefined && (t22 = Fe);
      var o2 = n4.name + t22.hash;
      e32.hasNameForId(n4.id, o2) || e32.insertRules(n4.id, o2, t22(n4.rules, o2, "@keyframes"));
    }, this.name = e22, this.id = "sc-keyframes-".concat(e22), this.rules = t2, ue(this, function() {
      throw he(12, String(n4.name));
    });
  }
  return e3.prototype.getName = function(e22) {
    return e22 === undefined && (e22 = Fe), this.name + e22.hash;
  }, e3;
}();
var Ye = function(e3) {
  return e3 >= "A" && e3 <= "Z";
};
var qe = function(e3) {
  return e3 == null || e3 === false || e3 === "";
};
var He = function(t2) {
  var n4, o2, r2 = [];
  for (var s2 in t2) {
    var i2 = t2[s2];
    t2.hasOwnProperty(s2) && !qe(i2) && (Array.isArray(i2) && i2.isCss || re(i2) ? r2.push("".concat(We(s2), ":"), i2, ";") : ce(i2) ? r2.push.apply(r2, __spreadArray(__spreadArray(["".concat(s2, " {")], He(i2), false), ["}"], false)) : r2.push("".concat(We(s2), ": ").concat((n4 = s2, (o2 = i2) == null || typeof o2 == "boolean" || o2 === "" ? "" : typeof o2 != "number" || o2 === 0 || (n4 in emotion_unitless_esm_default) || n4.startsWith("--") ? String(o2).trim() : "".concat(o2, "px")), ";")));
  }
  return r2;
};
var Xe = $4(v3);
var Ze = function() {
  function e3(e22, t2, n4) {
    this.rules = e22, this.staticRulesId = "", this.isStatic = false, this.componentId = t2, this.baseHash = M3(Xe, t2), this.baseStyle = n4, Re.registerId(t2);
  }
  return e3.prototype.generateAndInjectStyles = function(e22, t2, n4) {
    var o2 = this.baseStyle ? this.baseStyle.generateAndInjectStyles(e22, t2, n4) : "";
    if (this.isStatic && !n4.hash)
      if (this.staticRulesId && t2.hasNameForId(this.componentId, this.staticRulesId))
        o2 = ie(o2, this.staticRulesId);
      else {
        var r2 = ae(Ue(this.rules, e22, t2, n4)), s2 = x32(M3(this.baseHash, r2) >>> 0);
        if (!t2.hasNameForId(this.componentId, s2)) {
          var i2 = n4(r2, ".".concat(s2), undefined, this.componentId);
          t2.insertRules(this.componentId, s2, i2);
        }
        o2 = ie(o2, s2), this.staticRulesId = s2;
      }
    else {
      for (var a22 = M3(this.baseHash, n4.hash), c22 = "", l22 = 0;l22 < this.rules.length; l22++) {
        var u22 = this.rules[l22];
        if (typeof u22 == "string")
          c22 += u22, a22 = M3(a22, u22);
        else if (u22) {
          var p32 = ae(Ue(u22, e22, t2, n4));
          a22 = M3(a22, p32 + l22), c22 += p32;
        }
      }
      if (c22) {
        var d2 = x32(a22 >>> 0);
        t2.hasNameForId(this.componentId, d2) || t2.insertRules(this.componentId, d2, n4(c22, ".".concat(d2), undefined, this.componentId)), o2 = ie(o2, d2);
      }
    }
    return o2;
  }, e3;
}();
var Ke = import_react26.default.createContext(undefined);
var Qe = Ke.Consumer;
var nt = {};
var ot = new Set;
var it = function(e3) {
  return Object.assign(e3, { isCss: true });
};
var lt2 = function(e3) {
  return ct(rt, e3);
};
var ut = lt2;
A22.forEach(function(e3) {
  ut[e3] = lt2(e3);
});
var pt = function() {
  function e3(e22, t2) {
    this.rules = e22, this.componentId = t2, this.isStatic = Je(e22), Re.registerId(this.componentId + 1);
  }
  return e3.prototype.createStyles = function(e22, t2, n4, o2) {
    var r2 = o2(ae(Ue(this.rules, t2, n4, o2)), ""), s2 = this.componentId + e22;
    n4.insertRules(s2, s2, r2);
  }, e3.prototype.removeStyles = function(e22, t2) {
    t2.clearRules(this.componentId + e22);
  }, e3.prototype.renderStyles = function(e22, t2, n4, o2) {
    e22 > 2 && Re.registerId(this.componentId + e22), this.removeStyles(e22, n4), this.createStyles(e22, t2, n4, o2);
  }, e3;
}();
var mt = function() {
  function e3() {
    var e22 = this;
    this._emitSheetCSS = function() {
      var t2 = e22.instance.toString(), n4 = Pe(), o2 = ae([n4 && 'nonce="'.concat(n4, '"'), "".concat(f4, '="true"'), "".concat(y4, '="').concat(v3, '"')].filter(Boolean), " ");
      return "<style ".concat(o2, ">").concat(t2, "</style>");
    }, this.getStyleTags = function() {
      if (e22.sealed)
        throw he(2);
      return e22._emitSheetCSS();
    }, this.getStyleElement = function() {
      var n4;
      if (e22.sealed)
        throw he(2);
      var r2 = ((n4 = {})[f4] = "", n4[y4] = v3, n4.dangerouslySetInnerHTML = { __html: e22.instance.toString() }, n4), s2 = Pe();
      return s2 && (r2.nonce = s2), [import_react26.default.createElement("style", __assign({}, r2, { key: "sc-0-0" }))];
    }, this.seal = function() {
      e22.sealed = true;
    }, this.instance = new Re({ isServer: true }), this.sealed = false;
  }
  return e3.prototype.collectStyles = function(e22) {
    if (this.sealed)
      throw he(2);
    return import_react26.default.createElement(Le, { sheet: this.instance }, e22);
  }, e3.prototype.interleaveWithNodeStream = function(e22) {
    throw he(3);
  }, e3;
}();
typeof navigator != "undefined" && navigator.product === "ReactNative" && console.warn(`It looks like you've imported 'styled-components' on React Native.
Perhaps you're looking to import 'styled-components/native'?
Read more about this at https://www.styled-components.com/docs/basics#react-native`);
var vt = "__sc-".concat(f4, "__");
typeof window != "undefined" && (window[vt] || (window[vt] = 0), window[vt] === 1 && console.warn(`It looks like there are several instances of 'styled-components' initialized in this application. This may cause dynamic styles to not render properly, errors during the rehydration process, a missing theme prop, and makes your application bigger without good reason.

See https://s-c.sh/2BAXzed for more info.`), window[vt] += 1);
var pulse = ht`
  0% {
    opacity: 0;
  }
  50% {
    opacity: 1;
  }
`;
var animation = () => at`
    ${pulse} .5s infinite alternate;
  `;
var Blink = ut.span`
  animation: ${animation};
  text-decoration: underline;
`;
var COLUMNS2 = 10;
var GRID_TEMPLATE_COLUMN = new Array(COLUMNS2).fill("auto").join(" ");
var ICON_STYLE = {
  textAlign: "center",
  borderRadius: "50%",
  width: "30px",
  height: "30px",
  color: "white",
  fontSize: "10pt",
  alignItems: "center",
  display: "grid"
};

class KeyboardControl {
  onKeyUp;
  onKeyDown;
  constructor(popupControl, keyMapping = {
    KeyS: PopupControl.DOWN,
    ArrowDown: PopupControl.DOWN,
    KeyW: PopupControl.UP,
    ArrowUp: PopupControl.UP,
    KeyA: PopupControl.LEFT,
    ArrowLeft: PopupControl.LEFT,
    KeyD: PopupControl.RIGHT,
    ArrowRight: PopupControl.RIGHT,
    Space: PopupControl.ACTION,
    Escape: PopupControl.BACK,
    Enter: PopupControl.START
  }) {
    let isKeyDown = false;
    this.onKeyUp = () => {
      isKeyDown = false;
    };
    this.onKeyDown = (e3) => {
      if (isKeyDown) {
        return;
      }
      isKeyDown = true;
      const action = keyMapping[e3.code];
      if (action) {
        action(popupControl);
        e3.preventDefault();
      }
    };
    this.activate();
    popupControl.addActivateListener(this);
  }
  activate() {
    document.removeEventListener("keyup", this.onKeyUp);
    document.removeEventListener("keydown", this.onKeyDown);
    document.addEventListener("keyup", this.onKeyUp);
    document.addEventListener("keydown", this.onKeyDown);
  }
  deactivate() {
    document.removeEventListener("keyup", this.onKeyUp);
    document.removeEventListener("keydown", this.onKeyDown);
  }
}

class ProgressiveText extends HTMLElement {
  #observer;
  #containerText;
  #hiddenText;
  #animationFrameRequest = 0;
  constructor() {
    super();
    const shadowRoot = this.attachShadow({ mode: "open" });
    this.#containerText = shadowRoot.appendChild(document.createElement("span"));
    this.#hiddenText = shadowRoot.appendChild(document.createElement("span"));
    this.#hiddenText.style.color = "#00000020";
    this.#observer = new MutationObserver((mutationsList) => this.handleMutation(mutationsList));
  }
  connectedCallback() {
    this.childNodes.forEach((node2) => {
      this.#observer.observe(node2, { characterData: true });
      this.startProgressingText(node2.textContent ?? "");
    });
  }
  disconnectedCallback() {
    this.#observer.disconnect();
  }
  handleMutation(mutationsList) {
    for (const mutation of mutationsList) {
      if (mutation.type === "characterData") {
        this.startProgressingText(mutation.target.textContent ?? "");
      }
    }
  }
  startProgressingText(text) {
    cancelAnimationFrame(this.#animationFrameRequest);
    let period = parseInt(this.getAttribute("period") ?? "10");
    if (isNaN(period)) {
      console.warn("Invalid period: ", period);
      period = 10;
      return;
    }
    let startTime = 0;
    const loop = (time) => {
      if (!startTime) {
        startTime = time;
      }
      const numChars = Math.floor((time - startTime) / period);
      const visibleText = text.slice(0, numChars);
      const hiddenText = text.slice(numChars);
      this.#containerText.textContent = visibleText;
      this.#hiddenText.textContent = hiddenText;
      if (numChars <= text.length) {
        requestAnimationFrame(loop);
      }
    };
    this.#animationFrameRequest = requestAnimationFrame(loop);
  }
}
customElements.define("progressive-text", ProgressiveText);
var PERIOD = 30;

class TurnStepAuxiliary extends ControlledLooper {
  turnCount = 0;
  constructor({ controls, turn, motor }, config = {}) {
    super(motor, controls, (controls2) => controls2.turnLeft || controls2.turnRight, { controls, turn, step: config.step ?? Math.PI / 2 });
  }
  refresh({ deltaTime, data, stopUpdate }) {
    const { turnLeft, turnRight } = data.controls;
    let dTurn = 0;
    if (turnLeft) {
      dTurn--;
    }
    if (turnRight) {
      dTurn++;
    }
    const { step } = data;
    const turnAngleVal = data.turn.angle;
    const turn = WK(turnAngleVal.valueOf(), step);
    if (dTurn || this.turnCount > 0) {
      turnAngleVal.progressTowards(WK(turn + step * dTurn, step), dTurn ? 1 / 200 : 1 / 100, this);
    }
    if (!dTurn) {
      this.turnCount = 0;
    }
    if (turnAngleVal.update(deltaTime)) {
      const newTurn = WK(turnAngleVal.valueOf(), step);
      if (newTurn !== turn) {
        this.turnCount++;
      }
    } else {
      stopUpdate();
    }
  }
}
var QUICK_TAP_TIME = 200;

class Keyboard {
  keys = {};
  keysUp = {};
  keyDownListener = new Set;
  keyUpListener = new Set;
  quickTapListener = new Set;
  timeProvider;
  isActive = false;
  constructor({ motor }) {
    this.keyDown = this.keyDown.bind(this);
    this.keyUp = this.keyUp.bind(this);
    this.timeProvider = motor;
  }
  keyDown(e3) {
    if (!this.keys[e3.code]) {
      const time = this.timeProvider.time;
      this.keys[e3.code] = time;
      this.keyDownListener.forEach((listener) => listener.onKeyDown?.(e3.code, time));
    }
    e3.preventDefault();
  }
  keyUp(e3) {
    const quickTap = this.timeProvider.time - this.keys[e3.code] < QUICK_TAP_TIME;
    this.keysUp[e3.code] = this.timeProvider.time;
    this.keys[e3.code] = 0;
    this.keyUpListener.forEach((listener) => listener.onKeyUp?.(e3.code, this.timeProvider.time));
    if (quickTap) {
      this.quickTapListener.forEach((listener) => listener.onQuickTap?.(e3.code, this.timeProvider.time));
    }
  }
  activate() {
    if (!this.isActive) {
      this.isActive = true;
      document.addEventListener("keydown", this.keyDown);
      document.addEventListener("keyup", this.keyUp);
    }
  }
  deactivate() {
    if (this.isActive) {
      document.removeEventListener("keydown", this.keyDown);
      document.removeEventListener("keyup", this.keyUp);
      this.isActive = false;
    }
  }
  addListener(listener) {
    if (listener.onKeyDown) {
      this.keyDownListener.add(listener);
    }
    if (listener.onKeyUp) {
      this.keyUpListener.add(listener);
    }
    if (listener.onQuickTap) {
      this.quickTapListener.add(listener);
    }
    return () => {
      this.removeListener(listener);
    };
  }
  removeListener(listener) {
    this.keyDownListener.delete(listener);
    this.keyUpListener.delete(listener);
    this.quickTapListener.delete(listener);
  }
}

class KeyboardControls {
  keyboard;
  #listeners = new Set;
  keys = {};
  #enabled = false;
  constructor(keyboard) {
    this.keyboard = keyboard;
  }
  setEnabled(enabled) {
    if (this.#enabled === enabled) {
      return;
    }
    this.#enabled = enabled;
    this.keys = enabled ? this.keyboard.keys : {};
    if (enabled) {
      this.keyboard.addListener(this);
    } else {
      this.onActionUp();
      this.keyboard.removeListener(this);
    }
  }
  onQuickTap(keyCode) {
    switch (keyCode) {
      case "Space":
        this.#listeners.forEach((listener) => listener.onQuickAction?.());
        break;
      case "ShiftRight":
        this.#listeners.forEach((listener) => listener.onQuickTiltReset?.());
        break;
    }
  }
  onKeyDown(_keyCode, _time) {
    this.onAction();
  }
  onKeyUp(_keyCode, _time) {
    this.onActionUp();
  }
  onAction() {
    this.#listeners.forEach((listener) => listener.onAction?.(this));
  }
  onActionUp() {
    this.#listeners.forEach((listener) => listener.onAction?.(this));
  }
  addListener(listener) {
    this.#listeners.add(listener);
  }
  removeListener(listener) {
    this.#listeners.delete(listener);
  }
  get forward() {
    const { keys } = this;
    return !!(keys.KeyW || keys.ArrowUp && !keys.ShiftRight);
  }
  get backward() {
    const { keys } = this;
    return !!(keys.KeyS || keys.ArrowDown && !keys.ShiftRight);
  }
  get left() {
    const { keys } = this;
    return !!(keys.KeyA || keys.ArrowLeft && !keys.ShiftRight);
  }
  get right() {
    const { keys } = this;
    return !!(keys.KeyD || keys.ArrowRight && !keys.ShiftRight);
  }
  get turnLeft() {
    const { keys } = this;
    return !!(keys.KeyQ || keys.ArrowLeft && keys.ShiftRight);
  }
  get turnRight() {
    const { keys } = this;
    return !!(keys.KeyE || keys.ArrowRight && keys.ShiftRight);
  }
  get up() {
    const { keys } = this;
    return !!(keys.ArrowUp && keys.ShiftRight);
  }
  get down() {
    const { keys } = this;
    return !!(keys.ArrowDown && keys.ShiftRight);
  }
  get action() {
    const { keys } = this;
    return !!keys.Space;
  }
  get exit() {
    const { keys } = this;
    return !!keys.Escape;
  }
}
var LOGO_SIZE = 512;
var CELLSIZE = 2;

class DemoGame extends Auxiliaries {
  camera;
  constructor({ engine, motor }) {
    super();
    const keyboard = new Keyboard({ motor });
    const gameControls = new KeyboardControls(keyboard);
    const popupControl = new PopupControl;
    popupControl.registerActive((enabled) => gameControls.setEnabled(enabled));
    const keyboardControl = new KeyboardControl(popupControl);
    const mediaAccumulator = new h3({
      elems: [
        new ItemsGroup([{
          id: 0,
          type: "image",
          src: "dobuki.png"
        }, {
          id: 11,
          type: "image",
          src: "bun.png"
        }, {
          id: 12,
          type: "image",
          src: "bun.png",
          postProcess: k
        }, {
          id: 8,
          type: "image",
          src: "dodo.png",
          spriteSheet: {
            spriteSize: [190, 209]
          }
        }, {
          id: 9,
          type: "image",
          src: "dodo.png",
          spriteSheet: {
            spriteSize: [190, 209]
          },
          postProcess: k
        }, {
          id: 13,
          type: "image",
          src: "wolf.png",
          spriteSheet: {
            spriteSize: [200, 256]
          }
        }, {
          id: 14,
          type: "image",
          src: "wolf.png",
          spriteSheet: {
            spriteSize: [200, 256]
          },
          postProcess: k
        }, {
          id: 1,
          type: "draw",
          draw: (ctx) => {
            const { canvas } = ctx;
            canvas.width = LOGO_SIZE;
            canvas.height = LOGO_SIZE;
            const centerX = canvas.width / 2, centerY = canvas.height / 2;
            const halfSize = canvas.width / 2;
            ctx.imageSmoothingEnabled = true;
            ctx.lineWidth = canvas.width / 50;
            ctx.strokeStyle = "black";
            ctx.fillStyle = "gold";
            ctx.beginPath();
            ctx.arc(centerX, centerY, halfSize * 0.8, 0, 2 * Math.PI);
            ctx.fill();
            ctx.stroke();
            ctx.beginPath();
            ctx.arc(centerX, centerY, halfSize * 0.5, 0, Math.PI);
            ctx.stroke();
            ctx.beginPath();
            ctx.arc(canvas.width / 3, canvas.height / 3, halfSize * 0.1, 0, Math.PI, true);
            ctx.stroke();
            ctx.beginPath();
            ctx.arc(canvas.width / 3 * 2, canvas.height / 3, halfSize * 0.1, 0, Math.PI * 2, true);
            ctx.stroke();
          }
        }, {
          id: 2,
          type: "draw",
          draw: (ctx) => {
            const { canvas } = ctx;
            canvas.width = LOGO_SIZE;
            canvas.height = LOGO_SIZE;
            ctx.fillStyle = "#ddd";
            ctx.lineWidth = canvas.width / 50;
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            ctx.strokeStyle = "black";
            ctx.fillStyle = "silver";
            ctx.beginPath();
            ctx.rect(canvas.width * 0.2, canvas.height * 0.2, canvas.width * 0.6, canvas.height * 0.6);
            ctx.fill();
            ctx.stroke();
          }
        }, {
          id: 17,
          type: "draw",
          draw: (ctx) => {
            const { canvas } = ctx;
            canvas.width = LOGO_SIZE;
            canvas.height = LOGO_SIZE;
            ctx.fillStyle = "green";
            ctx.lineWidth = canvas.width / 50;
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            ctx.strokeStyle = "#6f6";
            ctx.fillStyle = "lightgreen";
            ctx.beginPath();
            ctx.rect(canvas.width * 0.2, canvas.height * 0.2, canvas.width * 0.6, canvas.height * 0.6);
            ctx.fill();
            ctx.stroke();
          }
        }, {
          id: 7,
          type: "draw",
          draw: (ctx) => {
            const { canvas } = ctx;
            canvas.width = LOGO_SIZE;
            canvas.height = LOGO_SIZE;
            ctx.fillStyle = "#ddd";
            ctx.lineWidth = canvas.width / 50;
            ctx.fillRect(0, 0, canvas.width, canvas.height);
          }
        }, {
          id: 3,
          type: "video",
          src: "sample.mp4",
          volume: 0,
          fps: 30,
          playSpeed: 0.5,
          maxRefreshRate: 30
        }, {
          id: 4,
          type: "draw",
          draw: (ctx) => {
            const { canvas } = ctx;
            canvas.width = LOGO_SIZE;
            canvas.height = LOGO_SIZE;
            ctx.lineWidth = 40;
            ctx.setLineDash([20, 5]);
            ctx.strokeStyle = "lightblue";
            ctx.beginPath();
            ctx.rect(10, 10, canvas.width - 20, canvas.height - 20);
            ctx.stroke();
          }
        }, {
          id: 5,
          type: "draw",
          draw: (ctx) => {
            const { canvas } = ctx;
            canvas.width = LOGO_SIZE;
            canvas.height = LOGO_SIZE;
            ctx.lineWidth = 40;
            ctx.setLineDash([20, 5]);
            ctx.strokeStyle = "red";
            ctx.beginPath();
            ctx.rect(10, 10, canvas.width - 20, canvas.height - 20);
            ctx.stroke();
          }
        }, {
          id: 6,
          type: "draw",
          draw: (ctx) => {
            const { canvas } = ctx;
            canvas.width = 1024;
            canvas.height = 1024;
            ctx.fillStyle = "green";
            ctx.lineWidth = canvas.width / 50;
            ctx.fillRect(0, 0, canvas.width, canvas.height);
          }
        }, {
          id: 16,
          type: "draw",
          draw: (ctx) => {
            const { canvas } = ctx;
            canvas.width = 1024;
            canvas.height = 1024;
            ctx.fillStyle = "#050";
            ctx.lineWidth = canvas.width / 50;
            ctx.fillRect(0, 0, canvas.width, canvas.height);
          }
        }, {
          id: 15,
          type: "draw",
          draw: (ctx) => {
            const { canvas } = ctx;
            canvas.width = 1024;
            canvas.height = 1024;
            ctx.fillStyle = "#68f";
            ctx.lineWidth = canvas.width / 50;
            ctx.fillRect(0, 0, canvas.width, canvas.height);
          }
        }, {
          id: 10,
          type: "draw",
          draw: (ctx) => {
            const { canvas } = ctx;
            canvas.width = 200;
            canvas.height = 200;
            ctx.fillStyle = "#0f0";
            ctx.beginPath();
            ctx.moveTo(100, 0);
            ctx.lineTo(200, 150);
            ctx.lineTo(0, 150);
            ctx.fill();
            ctx.fillStyle = "#430";
            ctx.fillRect(75, 125, 50, 50);
          }
        }])
      ]
    });
    this.addAuxiliary(new MediaUpdater({ engine, motor, medias: mediaAccumulator }));
    this.addAuxiliary({
      activate() {
        mediaAccumulator.updateFully();
      }
    });
    const animationAccumulator = new h3({
      elems: [
        new ItemsGroup([{
          id: 0,
          frames: [0]
        }, {
          id: 1,
          frames: [1, 5],
          fps: 24
        }, {
          id: 2,
          frames: [0, 4],
          fps: 15
        }])
      ]
    });
    this.addAuxiliary(new AnimationUpdater({ engine, motor, animations: animationAccumulator }));
    this.addAuxiliary({
      activate() {
        animationAccumulator.updateFully();
      }
    });
    const cellTrackers = new M2;
    const spritesAccumulator = new h3({
      onChange: (value) => engine.setMaxSpriteCount(value)
    });
    this.addAuxiliary({
      deactivate() {
        engine.setMaxSpriteCount(0);
        spritesAccumulator.clear();
      }
    });
    this.addAuxiliary(new SpriteUpdater({ engine, motor, sprites: spritesAccumulator }));
    const worldColliders = new h3;
    const heroBox = {
      top: 1,
      bottom: -1,
      left: -0.9,
      right: 0.9,
      near: 0.9,
      far: -0.9
    };
    const blockBox = {
      top: 2,
      bottom: -1,
      left: -1,
      right: 1,
      near: 1,
      far: -1
    };
    const dobukiBox = {
      top: 1,
      bottom: -1,
      left: -0.1,
      right: 0.1,
      near: 0,
      far: -0.5
    };
    const exitBlock = {
      top: 2,
      bottom: -1,
      left: -0.1,
      right: 0.1,
      near: 0,
      far: -0.5
    };
    const cellTriggerTracker = new E2;
    cellTrackers.add(cellTriggerTracker);
    cellTriggerTracker.addTrigger(new CellTrigger({
      cells: [B4(0, 0, 0, CELLSIZE)],
      heroBox,
      triggerBox: exitBlock,
      worldColliders,
      spritesAccumulator,
      wireframeImageId: 4,
      onEnter: () => {
        displayBox.setImageId(5);
        openMenu({
          popupControl,
          dialog: {
            layout: {
              position: [200, 100],
              size: [300, 200]
            },
            messages: [
              "Going down...",
              {
                action: camera.fadeOut,
                autoNext: 0
              },
              {
                action: async () => {
                  this.deactivate();
                },
                autoNext: 0
              },
              {
                action: async () => console.log("Changing scene."),
                autoNext: 0
              }
            ]
          }
        });
      },
      onLeave() {
        displayBox.setImageId(4);
      }
    }));
    cellTriggerTracker.addTrigger(new CellTrigger({
      cells: [B4(-3, 0, -1, CELLSIZE)],
      blockerBox: blockBox,
      blockShift: [0, 0, -CELLSIZE],
      triggerBox: dobukiBox,
      heroBox,
      spriteImageId: 0,
      wireframeImageId: 4,
      worldColliders,
      spritesAccumulator,
      onCollide(collided) {
        displayBox.setImageId(collided ? 5 : 4);
      },
      onLeave() {
        displayBox.setImageId(4);
      },
      onEnter() {
        displayBox.setImageId(5);
        openMenu({
          popupControl,
          layouts: [
            {
              name: "main-dialog",
              position: [null, 200],
              positionFromBottom: true
            }
          ],
          dialog: {
            layout: "main-dialog",
            messages: [
              { text: "Hello there." },
              {
                text: "How are you?",
                menu: {
                  layout: {
                    position: [400, 360],
                    size: [null, 150],
                    positionFromRight: true,
                    positionFromBottom: true
                  },
                  items: [
                    {
                      label: "I don't know",
                      dialog: {
                        layout: {
                          position: [100, 100],
                          size: [300, 200]
                        },
                        messages: [
                          { text: "You should know!" }
                        ]
                      }
                    },
                    {
                      back: true,
                      label: "good",
                      dialog: {
                        layout: {
                          name: "main-dialog",
                          position: [null, 200],
                          positionFromBottom: true
                        },
                        messages: [
                          { text: "That's nice to know!" }
                        ]
                      }
                    },
                    {
                      back: true,
                      label: "bad"
                    }
                  ]
                }
              },
              { text: "Bye bye." },
              {
                autoNext: 0,
                action: async () => {
                  goBackAction(heroPos)?.();
                }
              }
            ]
          }
        });
      }
    }));
    cellTriggerTracker.addTrigger(new CellTrigger({
      cells: [
        [-1, 0, -1],
        [1, 0, -1],
        [0, 0, -1],
        [-1, 0, 0],
        [1, 0, 0]
      ].map(([x5, y5, z4]) => B4(x5, y5, z4, CELLSIZE)),
      heroBox,
      boxImage: {
        outside: 2,
        inside: 7
      },
      worldColliders,
      spritesAccumulator,
      blockerBox: blockBox,
      onCollide(collided) {
        displayBox.setImageId(collided ? 5 : 4);
      }
    }));
    cellTriggerTracker.addTrigger(new CellTrigger({
      cells: [B4(1, 0, 0, CELLSIZE)],
      heroBox,
      displayBox: blockBox,
      displayShift: [0.1, 0, 0],
      boxImage: {
        outside: 1,
        faces: [1]
      },
      worldColliders,
      spritesAccumulator
    }));
    cellTriggerTracker.addTrigger(new CellTrigger({
      cells: [B4(-1, 0, 0, CELLSIZE)],
      heroBox,
      displayBox: blockBox,
      displayShift: [-0.1, 0, 0],
      boxImage: {
        outside: 1,
        faces: [0]
      },
      worldColliders,
      spritesAccumulator
    }));
    cellTriggerTracker.addTrigger(new CellTrigger({
      cells: [
        [0, 0, 0],
        [0, 0, 1],
        [-1, 0, 1],
        [1, 0, 1]
      ].map(([x5, y5, z4]) => B4(x5, y5, z4, CELLSIZE)),
      heroBox,
      displayBox: blockBox,
      displayShift: [0, 0.01, 0],
      boxImage: {
        inside: 17,
        faces: [5]
      },
      worldColliders,
      spritesAccumulator
    }));
    const camPosition = new t0;
    const camera = this.camera = new Camera({
      engine,
      motor,
      position: camPosition,
      config: {
        distance: 15,
        tilt: 0.8,
        zoom: 0.25,
        perspective: 0.05,
        backgroundColor: 0
      }
    });
    this.addAuxiliary(camera);
    {
      const arrayPool = new h5((a3) => a3 ?? [], (a3) => a3.length = 0);
      const arrayPool2 = new h5((a3) => a3 ?? [], (a3) => a3.length = 0);
      const spritePool = new SpritePool;
      const spritesMap = new Map;
      const collidersMap = new Map;
      cellTrackers.add(q({
        trackCell: (cell) => {
          const rng = import_seedrandom.alea(cell.tag);
          const sprites = arrayPool.create();
          const cellPos = cell.pos;
          const px = cell.worldPosition[0];
          const pz = cell.worldPosition[2];
          const distSq = cellPos[0] * cellPos[0] + cellPos[2] * cellPos[2];
          const isWater = distSq > 1000;
          const hasTree = distSq > 10 && rng() < 0.1 && !isWater;
          const ground = spritePool.create(hasTree ? 16 : isWater ? 15 : 6);
          ground.spriteType = isWater ? 4 : 0;
          ground.transform.translate(px, -1 - (isWater ? 1 : 0), pz).rotateX(-Math.PI / 2);
          sprites.push(ground);
          const count = hasTree ? 5 + rng() * 10 : 0;
          for (let i2 = 0;i2 < count; i2++) {
            const tree = spritePool.create(10);
            tree.spriteType = 1;
            const size = 1 + Math.floor(2 * rng());
            tree.transform.translate(px + (rng() - 0.5) * 2.5, -1 + size / 2, pz + (rng() - 0.5) * 2.5).scale(0.2 + rng(), size, 0.2 + rng());
            sprites.push(tree);
          }
          if (!isWater && !count && rng() < 0.02) {
            const bun = spritePool.create(11);
            bun.spriteType = 1;
            bun.transform.translate(px, -0.7, pz).scale(0.5);
            const bunShadow = spritePool.create(12);
            bunShadow.transform.translate(px, -1, pz).rotateX(-Math.PI / 2).scale(0.5);
            sprites.push(bun, bunShadow);
          }
          if (!isWater && !count && rng() < 0.01) {
            const scale = 1.5;
            const wolf = spritePool.create(13);
            wolf.spriteType = 1;
            wolf.transform.translate(px, 0, pz).scale(scale);
            const shadow = spritePool.create(14);
            shadow.transform.translate(px, -0.99, pz - 0.5).rotateX(-Math.PI / 2).scale(scale);
            sprites.push(wolf, shadow);
          }
          spritesMap.set(cell.tag, sprites);
          spritesAccumulator.add(sprites);
          if (hasTree || isWater) {
            const colliders = arrayPool2.create();
            colliders.push(new CollisionDetector({
              blockerBox: blockBox,
              blockerPosition: [px, 0, pz],
              heroBox
            }, { shouldBlock: true }));
            collidersMap.set(cell.tag, colliders);
            worldColliders.add(colliders);
          }
          return sprites.length > 0;
        },
        untrackCells: function(cellTags) {
          cellTags.forEach((tag) => {
            const sprites = spritesMap.get(tag);
            if (sprites) {
              spritesAccumulator.remove(sprites);
              sprites.forEach((sprite) => spritePool.recycle(sprite));
              spritesMap.delete(tag);
              arrayPool.recycle(sprites);
            }
            const colliders = collidersMap.get(tag);
            if (colliders) {
              worldColliders.remove(colliders);
              collidersMap.delete(tag);
              arrayPool2.recycle(colliders);
            }
          });
        }
      }, new h4({ yRange: [0, 0] })));
    }
    const heroPos = new t0({ blockers: worldColliders }).movedTo(0, 0, 3);
    const heroSprites = new SpriteGroup([{
      imageId: 8,
      spriteType: 1,
      transform: f2.create().translate(0, -0.3, 0),
      animationId: 0
    }], heroPos);
    spritesAccumulator.add(heroSprites);
    this.addAuxiliary({
      activate() {
        spritesAccumulator.updateFully();
      }
    });
    const displayBox = new SpriteGroup(new DisplayBox({ box: heroBox, imageId: 4 }), heroPos);
    spritesAccumulator.add(displayBox);
    const shadowPos = new t0({});
    const shadowHeroSprites = new SpriteGroup([{
      imageId: 9,
      transform: f2.create().translate(0, -0.89, 0.5).rotateX(-Math.PI / 2).scale(1, 0.3, 1),
      animationId: 0
    }], shadowPos);
    this.addAuxiliary(new FollowAuxiliary({
      motor,
      follower: shadowPos,
      followee: heroPos
    }, {
      followY: false
    }));
    spritesAccumulator.add(shadowHeroSprites);
    spritesAccumulator.add(new SpriteGroup([{
      imageId: 3,
      spriteType: 3,
      transform: f2.create().translate(3000, 1000, -5000).scale(480, 270, 1)
    }]));
    const controlledMotor = new ControlledMotor(motor, { policy: Policy.INCOMING_CYCLE_PRIORITY });
    const stepBack = new StepBackAuxiliary({ motor: controlledMotor, position: heroPos });
    const posStep = new PositionStepAuxiliary({ motor: controlledMotor, controls: gameControls, positionStep: new PositionStep({ position: heroPos }), turnGoal: camera.turn.angle }, { speed: 1.5, airBoost: 1.5 });
    this.addAuxiliary(keyboard).addAuxiliary(new ToggleAuxiliary({ keyboard }, {
      auxiliariesMap: [{
        key: "Tab",
        aux: () => Auxiliaries.from(posStep, stepBack, new SmoothFollowAuxiliary({ motor, follower: camPosition, followee: heroPos }, { speed: 0.05, followY: false }), new JumpAuxiliary({ motor, controls: gameControls, position: heroPos }, { gravity: -2, jump: 3 }), new TurnStepAuxiliary({ motor, controls: gameControls, turn: camera.turn }))
      }, {
        key: "Tab",
        aux: () => Auxiliaries.from(new TurnAuxiliary({ motor, controls: gameControls, turn: camera.turn }), new TiltAuxiliary({ motor, controls: gameControls, tilt: camera.tilt }), new MoveAuxiliary({ motor, controls: gameControls, direction: camera.turn, position: heroPos }), new JumpAuxiliary({ motor, controls: gameControls, position: heroPos }), new TiltResetAuxiliary({ motor, controls: gameControls, tilt: camera.tilt }), new SmoothFollowAuxiliary({ motor, follower: camPosition, followee: heroPos }, { speed: 0.05 }))
      }]
    })).addAuxiliary(new DirAuxiliary({ controls: gameControls }, (dx) => {
      heroSprites.setOrientation(dx);
      shadowHeroSprites.setOrientation(dx);
    })).addAuxiliary(new MotionAuxiliary({ controls: gameControls }, (moving) => {
      const animId = moving ? 1 : 0;
      heroSprites.setAnimationId(animId);
      shadowHeroSprites.setAnimationId(animId);
    })).addAuxiliary(stepBack).addAuxiliary(new L2({ positionMatrix: heroPos }, { cellSize: CELLSIZE }).addListener(new A5({ cellTrack: cellTrackers }, {
      cellLimit: 100,
      range: [7, 3, 7],
      cellSize: CELLSIZE
    })).addListener(stepBack)).addAuxiliary(new TimeAuxiliary({ motor, engine }));
  }
}

class ResizeAux {
  engine;
  camera;
  canvas;
  constructor({ engine, camera, canvas }) {
    this.engine = engine;
    this.camera = camera;
    this.canvas = canvas;
    this.onResize = this.onResize.bind(this);
  }
  activate() {
    window.addEventListener("resize", this.onResize);
    this.checkCanvasSize();
  }
  deactivate() {
    window.removeEventListener("resize", this.onResize);
  }
  onResize() {
    this.checkCanvasSize();
  }
  checkCanvasSize() {
    if (this.canvas) {
      if (this.canvas instanceof HTMLCanvasElement) {
        this.canvas.width = this.canvas.offsetWidth * 2;
        this.canvas.height = this.canvas.offsetHeight * 2;
      }
      this.camera?.resizeViewport(this.canvas.width, this.canvas.height);
      this.engine.resetViewportSize();
    }
  }
}
function z4(j3, { onCall: h6, onProp: i2, onSet: c }) {
  return new Proxy(j3, { get(k3, b3) {
    const d2 = k3, f5 = d2[b3];
    if (typeof f5 === "function")
      return (...B6) => {
        const D3 = f5.apply(d2, B6);
        return h6?.(b3, B6, D3), D3;
      };
    else
      return i2?.(b3, f5), f5;
  }, set(k3, b3, d2) {
    const f5 = k3, q4 = f5[b3] = d2;
    return c?.(b3, d2, q4), d2 === q4;
  } });
}
function E4(j3, h6) {
  return z4(j3, { onCall: (i2, c, A7) => console.log(`${h6}.${String(i2)}(`, c, ") =", A7), onProp: (i2, c) => console.log(`${h6}.${String(i2)} =`, c), onSet: (i2, c) => console.log(`set ${h6}.${String(i2)} =`, c) });
}
var DEFAULT_ATTRIBUTES = {
  alpha: true,
  antialias: true,
  depth: true,
  failIfMajorPerformanceCaveat: undefined,
  powerPreference: "default",
  premultipliedAlpha: true,
  preserveDrawingBuffer: false,
  stencil: false
};

class WebGlCanvas {
  canvas;
  gl;
  constructor(canvas, { attributes } = {}, config) {
    this.canvas = canvas;
    const gl2 = canvas.getContext("webgl2", { ...DEFAULT_ATTRIBUTES, ...attributes });
    this.gl = config?.logGL ? E4(gl2, "gl") : gl2;
    canvas.style.pointerEvents = "none";
  }
}
async function hello() {
  console.info(`Welcome!
You are using Dok engine.
https://github.com/jacklehamster/bun-engine`);
}
var onStop;
async function testCanvas(canvas) {
  const motor = new Motor({}, { frameRate: 120 });
  const webGlCanvas = new WebGlCanvas(canvas);
  const pixelListener = {
    x: 0,
    y: 0,
    pixel: 0,
    setPixel(value) {
      this.pixel = value;
    }
  };
  canvas.addEventListener("mousemove", (e3) => {
    const x5 = (e3.pageX - canvas.offsetLeft) * 2;
    const y5 = (canvas.offsetHeight - (e3.pageY - canvas.offsetTop)) * 2;
    pixelListener.x = x5;
    pixelListener.y = y5;
  });
  const engine = new GraphicsEngine(webGlCanvas.gl);
  const core = new Auxiliaries;
  const world = new DemoGame({
    engine,
    motor
  });
  core.addAuxiliary(motor);
  core.addAuxiliary(engine);
  core.addAuxiliary(new ResizeAux({
    engine,
    camera: world.camera,
    canvas: webGlCanvas.canvas
  }));
  core.addAuxiliary(world);
  core.activate();
  motor.loop(engine, undefined);
  onStop = () => core.deactivate();
  return { engine, motor, world, core };
}
function stop() {
  onStop();
}
export {
  testCanvas,
  stop,
  hello
};
