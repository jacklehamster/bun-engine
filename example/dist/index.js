// /Users/vincent/bun-engine/example/node_modules/bun-engine/dist/index.js
var replaceTilda = function(inputString, replacementMap) {
  return inputString.replace(/~\{(\w+)\}/g, (match, variable) => {
    return replacementMap?.[variable] || match;
  });
};
var copySprite = function(sprite, dest) {
  if (!dest) {
    return {
      transform: w2.create().copy(sprite.transform),
      imageId: sprite.imageId,
      spriteType: sprite.spriteType,
      orientation: sprite.orientation,
      animationId: sprite.animationId,
      hidden: sprite.hidden
    };
  }
  dest.imageId = sprite.imageId;
  dest.spriteType = sprite.spriteType;
  dest.transform.copy(sprite.transform);
  dest.orientation = sprite.orientation;
  dest.animationId = sprite.animationId;
  dest.hidden = sprite.hidden;
  return dest;
};
var goBackAction = function(elem) {
  return () => elem.goBack?.();
};
var logProxy = function(gl) {
  const proxy = new Proxy(gl, {
    get(target, prop) {
      const t3 = target;
      const result = t3[prop];
      if (typeof result === "function") {
        const f2 = (...params) => {
          const returnValue = result.apply(t3, params);
          console.log(`gl.${String(prop)}(`, params, ") = ", returnValue);
          return returnValue;
        };
        return f2;
      } else {
        console.log(`gl.${String(prop)} = `, result);
        return result;
      }
    }
  });
  return proxy;
};
var Popup2 = function({
  children,
  position: [left, top],
  size: [width, height]
}) {
  return jsx_dev_runtime.jsxDEV("div", {
    className: "pop-up",
    style: {
      left,
      top,
      ...POPUP_CSS
    },
    children: jsx_dev_runtime.jsxDEV("div", {
      className: "double-border",
      style: {
        width,
        height,
        ...DOUBLE_BORDER_CSS
      },
      children
    }, undefined, false, undefined, this)
  }, undefined, false, undefined, this);
};
var rng = function() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
};
var unsafeStringify = function(arr, offset = 0) {
  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
};
var useControlsLock = function() {
  const context = useGameContext();
  const [locked, setLocked] = import_react3.useState(false);
  import_react3.useEffect(() => {
    if (locked) {
      const uid = v4_default();
      context.addControlsLock(uid);
      return () => {
        context.removeControlsLock(uid);
      };
    }
  }, [context, locked]);
  return {
    lock() {
      setLocked(true);
    },
    unlock() {
      setLocked(false);
    }
  };
};
var Menu = function({ menuData }) {
  const { lock, unlock } = useControlsLock();
  const { setMenu, controls } = useGameContext();
  const [selected, setSelected] = import_react4.useState(0);
  import_react4.useEffect(() => {
    if (menuData) {
      setSelected(0);
    }
  }, [menuData]);
  import_react4.useEffect(() => {
    if (menuData && controls) {
      lock();
      const listener = {
        onAction(controls2) {
          const dy2 = (controls2.forward ? -1 : 0) + (controls2.backward ? 1 : 0);
          setSelected((value) => (value + dy2 + menuData.items.length.valueOf()) % menuData.items.length.valueOf());
          if (controls2.exit) {
            setMenu(undefined);
          }
        }
      };
      controls.addListener(listener);
      return () => {
        controls.removeListener(listener);
        unlock();
      };
    }
  }, [menuData, setMenu, lock, unlock, controls]);
  return menuData && jsx_dev_runtime3.jsxDEV(Popup2, {
    position: [50, 50],
    size: [200, 200],
    children: z(menuData.items, (item, index) => {
      if (!item) {
        return;
      }
      const { label } = item;
      return jsx_dev_runtime3.jsxDEV("div", {
        style: {
          color: selected === index ? "black" : "white",
          backgroundColor: selected === index ? "white" : "black"
        },
        children: label
      }, index, false, undefined, this);
    })
  }, undefined, false, undefined, this);
};
var Dialog = function({ dialogData }) {
  const { lock, unlock } = useControlsLock();
  const [index, setIndex] = import_react5.useState(0);
  const { setDialog, controls } = useGameContext();
  import_react5.useEffect(() => {
    if (dialogData && index >= dialogData.conversation.messages.length.valueOf()) {
      setDialog(undefined);
    }
  }, [index, dialogData]);
  const nextMessage = import_react5.useCallback(() => {
    if (dialogData) {
      setIndex((value) => {
        return value + 1;
      });
    }
  }, [dialogData, setIndex]);
  import_react5.useEffect(() => {
    setIndex(0);
  }, [dialogData]);
  import_react5.useEffect(() => {
    if (dialogData && controls) {
      lock();
      const listener = {
        onAction(controls2) {
          if (controls2.action) {
            nextMessage();
          }
        }
      };
      controls.addListener(listener);
      return () => {
        controls.removeListener(listener);
        unlock();
      };
    }
  }, [dialogData, nextMessage, lock, unlock, controls]);
  import_react5.useEffect(() => {
    const message = dialogData?.conversation.messages.at(index);
    message?.action?.();
    if (message?.next) {
      nextMessage();
    }
  }, [index, dialogData, nextMessage]);
  const text = dialogData?.conversation.messages.at(index)?.text;
  return dialogData && jsx_dev_runtime4.jsxDEV(Popup2, {
    position: [50, 500],
    size: [500, 150],
    children: text && jsx_dev_runtime4.jsxDEV("div", {
      style: {
        padding: 10
      },
      children: text
    }, undefined, false, undefined, this)
  }, undefined, false, undefined, this);
};
var HudContent = function({ dialogManager, controls }) {
  const [menu, setMenu] = import_react6.useState();
  const [dialog, setDialog] = import_react6.useState();
  const [onClose, setOnClose] = import_react6.useState();
  const gameContext = import_react6.useMemo(() => ({
    addControlsLock: dialogManager.showPopup,
    removeControlsLock: dialogManager.dismiss,
    isMenuVisible: !!menu,
    setMenu,
    isDialogVisible: !!dialog,
    setDialog,
    controls
  }), [setMenu, menu, dialogManager, controls]);
  import_react6.useEffect(() => {
    dialogManager.showMenu = (menu2) => gameContext.setMenu(menu2);
    dialogManager.dismissMenu = () => gameContext.setMenu(undefined);
    dialogManager.showDialog = (dialog2, onClose2) => {
      gameContext.setDialog(dialog2);
      setOnClose(() => onClose2);
    };
    dialogManager.dismissDialog = () => {
      gameContext.setDialog(undefined);
    };
  }, [dialogManager, gameContext, setOnClose]);
  import_react6.useEffect(() => {
    if (!dialog) {
      onClose?.();
    }
  }, [dialog]);
  return jsx_dev_runtime5.jsxDEV(Provider, {
    context: gameContext,
    children: [
      jsx_dev_runtime5.jsxDEV("div", {
        children: "Title"
      }, undefined, false, undefined, this),
      jsx_dev_runtime5.jsxDEV(Menu, {
        menuData: menu
      }, undefined, false, undefined, this),
      jsx_dev_runtime5.jsxDEV(Dialog, {
        dialogData: dialog
      }, undefined, false, undefined, this)
    ]
  }, undefined, true, undefined, this);
};
async function hello() {
  console.info(`Welcome!
You are using Dok engine.
https://github.com/jacklehamster/bun-engine`);
}
async function testCanvas(canvas) {
  const motor = new j({}, { frameRate: 120 });
  const keyboard = new Keyboard({ motor });
  const gameControls = new KeyboardControls(keyboard);
  const menuControls = new KeyboardControls(keyboard);
  const webGlCanvas = new WebGlCanvas(canvas);
  const ui = new Hud({ controls: menuControls, webGlCanvas });
  ui.addDialogListener({
    onPopup(count) {
      gameControls.setActive(count === 0);
      menuControls.setActive(count !== 0);
    }
  });
  const pixelListener = {
    x: 0,
    y: 0,
    pixel: 0,
    setPixel(value) {
      this.pixel = value;
    }
  };
  canvas.addEventListener("mousemove", (e2) => {
    const x5 = (e2.pageX - canvas.offsetLeft) * 2;
    const y3 = (canvas.offsetHeight - (e2.pageY - canvas.offsetTop)) * 2;
    pixelListener.x = x5;
    pixelListener.y = y3;
  });
  const engine = new GraphicsEngine(webGlCanvas.gl);
  const core = new AuxiliaryHolder;
  const world = new DemoGame({
    engine,
    motor,
    ui,
    keyboard,
    controls: gameControls
  });
  core.addAuxiliary(motor);
  core.addAuxiliary(world);
  core.addAuxiliary(webGlCanvas);
  core.addAuxiliary(ui);
  core.addAuxiliary(gameControls);
  core.addAuxiliary(new ResizeAux({
    engine,
    camera: world.camera,
    canvas: webGlCanvas.elem
  }));
  core.activate();
  motor.loop(engine, undefined);
  onStop = () => core.deactivate();
  return { engine, motor, world, ui };
}
var stop = function() {
  onStop();
};
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __toESM = (mod, isNodeMode, target) => {
  target = mod != null ? __create(__getProtoOf(mod)) : {};
  const to = isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target;
  for (let key of __getOwnPropNames(mod))
    if (!__hasOwnProp.call(to, key))
      __defProp(to, key, {
        get: () => mod[key],
        enumerable: true
      });
  return to;
};
var __toCommonJS = (from) => {
  const moduleCache = __toCommonJS.moduleCache ??= new WeakMap;
  var cached = moduleCache.get(from);
  if (cached)
    return cached;
  var to = __defProp({}, "__esModule", { value: true });
  var desc = { enumerable: false };
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key))
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
        });
  }
  moduleCache.set(from, to);
  return to;
};
var __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {
      get: all[name],
      enumerable: true,
      configurable: true,
      set: (newValue) => all[name] = () => newValue
    });
};
var __esm = (fn, res) => () => (fn && (res = fn(fn = 0)), res);
var require_alea = __commonJS((exports, module) => {
  (function(global2, module2, define2) {
    function Alea(seed) {
      var me = this, mash = Mash();
      me.next = function() {
        var t2 = 2091639 * me.s0 + me.c * 0.00000000023283064365386964;
        me.s0 = me.s1;
        me.s1 = me.s2;
        return me.s2 = t2 - (me.c = t2 | 0);
      };
      me.c = 1;
      me.s0 = mash(" ");
      me.s1 = mash(" ");
      me.s2 = mash(" ");
      me.s0 -= mash(seed);
      if (me.s0 < 0) {
        me.s0 += 1;
      }
      me.s1 -= mash(seed);
      if (me.s1 < 0) {
        me.s1 += 1;
      }
      me.s2 -= mash(seed);
      if (me.s2 < 0) {
        me.s2 += 1;
      }
      mash = null;
    }
    function copy(f2, t2) {
      t2.c = f2.c;
      t2.s0 = f2.s0;
      t2.s1 = f2.s1;
      t2.s2 = f2.s2;
      return t2;
    }
    function impl(seed, opts) {
      var xg = new Alea(seed), state = opts && opts.state, prng = xg.next;
      prng.int32 = function() {
        return xg.next() * 4294967296 | 0;
      };
      prng.double = function() {
        return prng() + (prng() * 2097152 | 0) * 0.00000000000000011102230246251566;
      };
      prng.quick = prng;
      if (state) {
        if (typeof state == "object")
          copy(state, xg);
        prng.state = function() {
          return copy(xg, {});
        };
      }
      return prng;
    }
    function Mash() {
      var n3 = 4022871197;
      var mash = function(data) {
        data = String(data);
        for (var i = 0;i < data.length; i++) {
          n3 += data.charCodeAt(i);
          var h3 = 0.02519603282416938 * n3;
          n3 = h3 >>> 0;
          h3 -= n3;
          h3 *= n3;
          n3 = h3 >>> 0;
          h3 -= n3;
          n3 += h3 * 4294967296;
        }
        return (n3 >>> 0) * 0.00000000023283064365386964;
      };
      return mash;
    }
    if (module2 && module2.exports) {
      module2.exports = impl;
    } else if (define2 && define2.amd) {
      define2(function() {
        return impl;
      });
    } else {
      this.alea = impl;
    }
  })(exports, typeof module == "object" && module, typeof define == "function" && define);
});
var require_xor128 = __commonJS((exports, module) => {
  (function(global2, module2, define2) {
    function XorGen(seed) {
      var me = this, strseed = "";
      me.x = 0;
      me.y = 0;
      me.z = 0;
      me.w = 0;
      me.next = function() {
        var t2 = me.x ^ me.x << 11;
        me.x = me.y;
        me.y = me.z;
        me.z = me.w;
        return me.w ^= me.w >>> 19 ^ t2 ^ t2 >>> 8;
      };
      if (seed === (seed | 0)) {
        me.x = seed;
      } else {
        strseed += seed;
      }
      for (var k3 = 0;k3 < strseed.length + 64; k3++) {
        me.x ^= strseed.charCodeAt(k3) | 0;
        me.next();
      }
    }
    function copy(f2, t2) {
      t2.x = f2.x;
      t2.y = f2.y;
      t2.z = f2.z;
      t2.w = f2.w;
      return t2;
    }
    function impl(seed, opts) {
      var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
        return (xg.next() >>> 0) / 4294967296;
      };
      prng.double = function() {
        do {
          var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
        } while (result === 0);
        return result;
      };
      prng.int32 = xg.next;
      prng.quick = prng;
      if (state) {
        if (typeof state == "object")
          copy(state, xg);
        prng.state = function() {
          return copy(xg, {});
        };
      }
      return prng;
    }
    if (module2 && module2.exports) {
      module2.exports = impl;
    } else if (define2 && define2.amd) {
      define2(function() {
        return impl;
      });
    } else {
      this.xor128 = impl;
    }
  })(exports, typeof module == "object" && module, typeof define == "function" && define);
});
var require_xorwow = __commonJS((exports, module) => {
  (function(global2, module2, define2) {
    function XorGen(seed) {
      var me = this, strseed = "";
      me.next = function() {
        var t2 = me.x ^ me.x >>> 2;
        me.x = me.y;
        me.y = me.z;
        me.z = me.w;
        me.w = me.v;
        return (me.d = me.d + 362437 | 0) + (me.v = me.v ^ me.v << 4 ^ (t2 ^ t2 << 1)) | 0;
      };
      me.x = 0;
      me.y = 0;
      me.z = 0;
      me.w = 0;
      me.v = 0;
      if (seed === (seed | 0)) {
        me.x = seed;
      } else {
        strseed += seed;
      }
      for (var k3 = 0;k3 < strseed.length + 64; k3++) {
        me.x ^= strseed.charCodeAt(k3) | 0;
        if (k3 == strseed.length) {
          me.d = me.x << 10 ^ me.x >>> 4;
        }
        me.next();
      }
    }
    function copy(f2, t2) {
      t2.x = f2.x;
      t2.y = f2.y;
      t2.z = f2.z;
      t2.w = f2.w;
      t2.v = f2.v;
      t2.d = f2.d;
      return t2;
    }
    function impl(seed, opts) {
      var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
        return (xg.next() >>> 0) / 4294967296;
      };
      prng.double = function() {
        do {
          var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
        } while (result === 0);
        return result;
      };
      prng.int32 = xg.next;
      prng.quick = prng;
      if (state) {
        if (typeof state == "object")
          copy(state, xg);
        prng.state = function() {
          return copy(xg, {});
        };
      }
      return prng;
    }
    if (module2 && module2.exports) {
      module2.exports = impl;
    } else if (define2 && define2.amd) {
      define2(function() {
        return impl;
      });
    } else {
      this.xorwow = impl;
    }
  })(exports, typeof module == "object" && module, typeof define == "function" && define);
});
var require_xorshift7 = __commonJS((exports, module) => {
  (function(global2, module2, define2) {
    function XorGen(seed) {
      var me = this;
      me.next = function() {
        var { x: X4, i } = me, t2, v3, w3;
        t2 = X4[i];
        t2 ^= t2 >>> 7;
        v3 = t2 ^ t2 << 24;
        t2 = X4[i + 1 & 7];
        v3 ^= t2 ^ t2 >>> 10;
        t2 = X4[i + 3 & 7];
        v3 ^= t2 ^ t2 >>> 3;
        t2 = X4[i + 4 & 7];
        v3 ^= t2 ^ t2 << 7;
        t2 = X4[i + 7 & 7];
        t2 = t2 ^ t2 << 13;
        v3 ^= t2 ^ t2 << 9;
        X4[i] = v3;
        me.i = i + 1 & 7;
        return v3;
      };
      function init(me2, seed2) {
        var j3, w3, X4 = [];
        if (seed2 === (seed2 | 0)) {
          w3 = X4[0] = seed2;
        } else {
          seed2 = "" + seed2;
          for (j3 = 0;j3 < seed2.length; ++j3) {
            X4[j3 & 7] = X4[j3 & 7] << 15 ^ seed2.charCodeAt(j3) + X4[j3 + 1 & 7] << 13;
          }
        }
        while (X4.length < 8)
          X4.push(0);
        for (j3 = 0;j3 < 8 && X4[j3] === 0; ++j3)
          ;
        if (j3 == 8)
          w3 = X4[7] = -1;
        else
          w3 = X4[j3];
        me2.x = X4;
        me2.i = 0;
        for (j3 = 256;j3 > 0; --j3) {
          me2.next();
        }
      }
      init(me, seed);
    }
    function copy(f2, t2) {
      t2.x = f2.x.slice();
      t2.i = f2.i;
      return t2;
    }
    function impl(seed, opts) {
      if (seed == null)
        seed = +new Date;
      var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
        return (xg.next() >>> 0) / 4294967296;
      };
      prng.double = function() {
        do {
          var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
        } while (result === 0);
        return result;
      };
      prng.int32 = xg.next;
      prng.quick = prng;
      if (state) {
        if (state.x)
          copy(state, xg);
        prng.state = function() {
          return copy(xg, {});
        };
      }
      return prng;
    }
    if (module2 && module2.exports) {
      module2.exports = impl;
    } else if (define2 && define2.amd) {
      define2(function() {
        return impl;
      });
    } else {
      this.xorshift7 = impl;
    }
  })(exports, typeof module == "object" && module, typeof define == "function" && define);
});
var require_xor4096 = __commonJS((exports, module) => {
  (function(global2, module2, define2) {
    function XorGen(seed) {
      var me = this;
      me.next = function() {
        var { w: w3, X: X4, i } = me, t2, v3;
        me.w = w3 = w3 + 1640531527 | 0;
        v3 = X4[i + 34 & 127];
        t2 = X4[i = i + 1 & 127];
        v3 ^= v3 << 13;
        t2 ^= t2 << 17;
        v3 ^= v3 >>> 15;
        t2 ^= t2 >>> 12;
        v3 = X4[i] = v3 ^ t2;
        me.i = i;
        return v3 + (w3 ^ w3 >>> 16) | 0;
      };
      function init(me2, seed2) {
        var t2, v3, i, j3, w3, X4 = [], limit = 128;
        if (seed2 === (seed2 | 0)) {
          v3 = seed2;
          seed2 = null;
        } else {
          seed2 = seed2 + "\0";
          v3 = 0;
          limit = Math.max(limit, seed2.length);
        }
        for (i = 0, j3 = -32;j3 < limit; ++j3) {
          if (seed2)
            v3 ^= seed2.charCodeAt((j3 + 32) % seed2.length);
          if (j3 === 0)
            w3 = v3;
          v3 ^= v3 << 10;
          v3 ^= v3 >>> 15;
          v3 ^= v3 << 4;
          v3 ^= v3 >>> 13;
          if (j3 >= 0) {
            w3 = w3 + 1640531527 | 0;
            t2 = X4[j3 & 127] ^= v3 + w3;
            i = t2 == 0 ? i + 1 : 0;
          }
        }
        if (i >= 128) {
          X4[(seed2 && seed2.length || 0) & 127] = -1;
        }
        i = 127;
        for (j3 = 4 * 128;j3 > 0; --j3) {
          v3 = X4[i + 34 & 127];
          t2 = X4[i = i + 1 & 127];
          v3 ^= v3 << 13;
          t2 ^= t2 << 17;
          v3 ^= v3 >>> 15;
          t2 ^= t2 >>> 12;
          X4[i] = v3 ^ t2;
        }
        me2.w = w3;
        me2.X = X4;
        me2.i = i;
      }
      init(me, seed);
    }
    function copy(f2, t2) {
      t2.i = f2.i;
      t2.w = f2.w;
      t2.X = f2.X.slice();
      return t2;
    }
    function impl(seed, opts) {
      if (seed == null)
        seed = +new Date;
      var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
        return (xg.next() >>> 0) / 4294967296;
      };
      prng.double = function() {
        do {
          var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
        } while (result === 0);
        return result;
      };
      prng.int32 = xg.next;
      prng.quick = prng;
      if (state) {
        if (state.X)
          copy(state, xg);
        prng.state = function() {
          return copy(xg, {});
        };
      }
      return prng;
    }
    if (module2 && module2.exports) {
      module2.exports = impl;
    } else if (define2 && define2.amd) {
      define2(function() {
        return impl;
      });
    } else {
      this.xor4096 = impl;
    }
  })(exports, typeof module == "object" && module, typeof define == "function" && define);
});
var require_tychei = __commonJS((exports, module) => {
  (function(global2, module2, define2) {
    function XorGen(seed) {
      var me = this, strseed = "";
      me.next = function() {
        var { b: b3, c: c2, d: d2, a: a2 } = me;
        b3 = b3 << 25 ^ b3 >>> 7 ^ c2;
        c2 = c2 - d2 | 0;
        d2 = d2 << 24 ^ d2 >>> 8 ^ a2;
        a2 = a2 - b3 | 0;
        me.b = b3 = b3 << 20 ^ b3 >>> 12 ^ c2;
        me.c = c2 = c2 - d2 | 0;
        me.d = d2 << 16 ^ c2 >>> 16 ^ a2;
        return me.a = a2 - b3 | 0;
      };
      me.a = 0;
      me.b = 0;
      me.c = 2654435769 | 0;
      me.d = 1367130551;
      if (seed === Math.floor(seed)) {
        me.a = seed / 4294967296 | 0;
        me.b = seed | 0;
      } else {
        strseed += seed;
      }
      for (var k3 = 0;k3 < strseed.length + 20; k3++) {
        me.b ^= strseed.charCodeAt(k3) | 0;
        me.next();
      }
    }
    function copy(f2, t2) {
      t2.a = f2.a;
      t2.b = f2.b;
      t2.c = f2.c;
      t2.d = f2.d;
      return t2;
    }
    function impl(seed, opts) {
      var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
        return (xg.next() >>> 0) / 4294967296;
      };
      prng.double = function() {
        do {
          var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
        } while (result === 0);
        return result;
      };
      prng.int32 = xg.next;
      prng.quick = prng;
      if (state) {
        if (typeof state == "object")
          copy(state, xg);
        prng.state = function() {
          return copy(xg, {});
        };
      }
      return prng;
    }
    if (module2 && module2.exports) {
      module2.exports = impl;
    } else if (define2 && define2.amd) {
      define2(function() {
        return impl;
      });
    } else {
      this.tychei = impl;
    }
  })(exports, typeof module == "object" && module, typeof define == "function" && define);
});
var exports_crypto = {};
__export(exports_crypto, {
  webcrypto: () => {
    {
      return cw;
    }
  },
  timingSafeEqual: () => {
    {
      return x02;
    }
  },
  scryptSync: () => {
    {
      return Id;
    }
  },
  scrypt: () => {
    {
      return Td;
    }
  },
  randomUUID: () => {
    {
      return lw;
    }
  },
  getRandomValues: () => {
    {
      return uw;
    }
  },
  getCurves: () => {
    {
      return dw;
    }
  },
  default: () => {
    {
      return Wq;
    }
  },
  DEFAULT_ENCODING: () => {
    {
      return Ga;
    }
  }
});
var dw;
var pw;
var Xa;
var vw;
var bw;
var mw;
var gw;
var R02;
var T2;
var Ja;
var Ya;
var ot;
var rn;
var ur;
var Nd;
var Dd;
var Ut;
var Te;
var on;
var Ie;
var ki;
var W02;
var $f;
var pc;
var Z02;
var sn;
var V02;
var G02;
var J02;
var hn;
var co;
var Jf;
var po;
var Qf;
var vo;
var Pc;
var Oc;
var th;
var ph;
var Qc;
var np;
var ap;
var bh;
var Ao;
var Bo;
var pn;
var _p;
var Ep;
var gh;
var qp;
var yh;
var Op;
var ko;
var Tt;
var Gr;
var No;
var Jt;
var pa;
var Rh;
var pr;
var Y_;
var Oi;
var Fi;
var Ui;
var k1;
var yn;
var Vo;
var Go;
var Z1;
var Xo;
var Fh;
var ba;
var Jh;
var Dv;
var Qr;
var fu;
var ou;
var os;
var eb;
var cu;
var lb;
var bu;
var vf;
var S7;
var db;
var yi;
var bf;
var wb;
var mu;
var wu;
var Mu;
var Eb;
var _u;
var xu;
var Eu;
var Au;
var Ub;
var Iu;
var Tu;
var ar;
var vs;
var ku;
var Yb;
var Qb;
var em;
var im;
var nm;
var yf;
var om;
var um;
var dm;
var pm;
var bm;
var Pu;
var Ou;
var Fu;
var ws;
var Aa;
var Em;
var Wu;
var ju;
var Ba;
var Dm;
var Fm;
var Es;
var Hm;
var Vm;
var ji;
var Yu;
var Ym;
var Xm;
var As;
var tl;
var ol;
var rg;
var ag;
var hg;
var hl;
var pg;
var dl;
var kn;
var cl;
var bl;
var Ln;
var Ds;
var Lg;
var Dg;
var yl;
var Il;
var Yg;
var t2;
var i2;
var Ws;
var Ks;
var s22;
var ri;
var Nl;
var or;
var Oa;
var b22;
var y2;
var _22;
var Pl;
var Cr;
var Tf;
var Cl;
var N22;
var Fl;
var F2;
var Wl;
var Z22;
var V2;
var Q22;
var ty;
var e02;
var ny;
var t02;
var uy;
var dy;
var vy;
var yy;
var xy;
var Ey;
var Iy;
var o02;
var td;
var h02;
var u02;
var Kf;
var d02;
var c02;
var nd;
var Hy;
var od;
var hd;
var Jy;
var dd;
var r3;
var n3;
var o3;
var cd;
var d3;
var p3;
var v3;
var m3;
var Ha;
var bd;
var _32;
var A32;
var k3;
var N32;
var P3;
var _d;
var xd;
var w02;
var Ed;
var j3;
var Y3;
var X32;
var ow;
var qd;
var Xt;
var zq;
var Ga;
var uw;
var lw;
var Hq;
var x02;
var Id;
var Td;
var cw;
var Wq;
var init_crypto = __esm(() => {
  dw = function() {
    return Hq;
  };
  pw = Object.create;
  Xa = Object.defineProperty;
  vw = Object.getOwnPropertyDescriptor;
  bw = Object.getOwnPropertyNames;
  mw = Object.getPrototypeOf;
  gw = Object.prototype.hasOwnProperty;
  R02 = (t22, e2) => () => (t22 && (e2 = t22(t22 = 0)), e2);
  T2 = (t22, e2) => () => (e2 || t22((e2 = { exports: {} }).exports, e2), e2.exports);
  Ja = (t22, e2) => {
    for (var r2 in e2)
      Xa(t22, r2, { get: e2[r2], enumerable: true });
  };
  Ya = (t22, e2, r2, o2) => {
    if (e2 && typeof e2 == "object" || typeof e2 == "function")
      for (let f2 of bw(e2))
        !gw.call(t22, f2) && f2 !== r2 && Xa(t22, f2, { get: () => e2[f2], enumerable: !(o2 = vw(e2, f2)) || o2.enumerable });
    return t22;
  };
  ot = (t22, e2, r2) => (Ya(t22, e2, "default"), r2 && Ya(r2, e2, "default"));
  rn = (t22, e2, r2) => (r2 = t22 != null ? pw(mw(t22)) : {}, Ya(e2 || !t22 || !t22.__esModule ? Xa(r2, "default", { value: t22, enumerable: true }) : r2, t22));
  ur = (t22) => Ya(Xa({}, "__esModule", { value: true }), t22);
  Nd = T2((Qa) => {
    Qa.byteLength = ww;
    Qa.toByteArray = _w;
    Qa.fromByteArray = Ew;
    var jr = [], lr = [], yw = typeof Uint8Array < "u" ? Uint8Array : Array, B0 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (nn = 0, kd = B0.length;nn < kd; ++nn)
      jr[nn] = B0[nn], lr[B0.charCodeAt(nn)] = nn;
    var nn, kd;
    lr["-".charCodeAt(0)] = 62;
    lr["_".charCodeAt(0)] = 63;
    function Ld(t22) {
      var e2 = t22.length;
      if (e2 % 4 > 0)
        throw new Error("Invalid string. Length must be a multiple of 4");
      var r2 = t22.indexOf("=");
      r2 === -1 && (r2 = e2);
      var o2 = r2 === e2 ? 0 : 4 - r2 % 4;
      return [r2, o2];
    }
    function ww(t22) {
      var e2 = Ld(t22), r2 = e2[0], o2 = e2[1];
      return (r2 + o2) * 3 / 4 - o2;
    }
    function Mw(t22, e2, r2) {
      return (e2 + r2) * 3 / 4 - r2;
    }
    function _w(t22) {
      var e2, r2 = Ld(t22), o2 = r2[0], f2 = r2[1], p2 = new yw(Mw(t22, o2, f2)), m32 = 0, y22 = f2 > 0 ? o2 - 4 : o2, M3;
      for (M3 = 0;M3 < y22; M3 += 4)
        e2 = lr[t22.charCodeAt(M3)] << 18 | lr[t22.charCodeAt(M3 + 1)] << 12 | lr[t22.charCodeAt(M3 + 2)] << 6 | lr[t22.charCodeAt(M3 + 3)], p2[m32++] = e2 >> 16 & 255, p2[m32++] = e2 >> 8 & 255, p2[m32++] = e2 & 255;
      return f2 === 2 && (e2 = lr[t22.charCodeAt(M3)] << 2 | lr[t22.charCodeAt(M3 + 1)] >> 4, p2[m32++] = e2 & 255), f2 === 1 && (e2 = lr[t22.charCodeAt(M3)] << 10 | lr[t22.charCodeAt(M3 + 1)] << 4 | lr[t22.charCodeAt(M3 + 2)] >> 2, p2[m32++] = e2 >> 8 & 255, p2[m32++] = e2 & 255), p2;
    }
    function xw(t22) {
      return jr[t22 >> 18 & 63] + jr[t22 >> 12 & 63] + jr[t22 >> 6 & 63] + jr[t22 & 63];
    }
    function Sw(t22, e2, r2) {
      for (var o2, f2 = [], p2 = e2;p2 < r2; p2 += 3)
        o2 = (t22[p2] << 16 & 16711680) + (t22[p2 + 1] << 8 & 65280) + (t22[p2 + 2] & 255), f2.push(xw(o2));
      return f2.join("");
    }
    function Ew(t22) {
      for (var e2, r2 = t22.length, o2 = r2 % 3, f2 = [], p2 = 16383, m32 = 0, y22 = r2 - o2;m32 < y22; m32 += p2)
        f2.push(Sw(t22, m32, m32 + p2 > y22 ? y22 : m32 + p2));
      return o2 === 1 ? (e2 = t22[r2 - 1], f2.push(jr[e2 >> 2] + jr[e2 << 4 & 63] + "==")) : o2 === 2 && (e2 = (t22[r2 - 2] << 8) + t22[r2 - 1], f2.push(jr[e2 >> 10] + jr[e2 >> 4 & 63] + jr[e2 << 2 & 63] + "=")), f2.join("");
    }
  });
  Dd = T2((q02) => {
    q02.read = function(t22, e2, r2, o2, f2) {
      var p2, m32, y22 = f2 * 8 - o2 - 1, M3 = (1 << y22) - 1, x5 = M3 >> 1, S2 = -7, E4 = r2 ? f2 - 1 : 0, B5 = r2 ? -1 : 1, q = t22[e2 + E4];
      for (E4 += B5, p2 = q & (1 << -S2) - 1, q >>= -S2, S2 += y22;S2 > 0; p2 = p2 * 256 + t22[e2 + E4], E4 += B5, S2 -= 8)
        ;
      for (m32 = p2 & (1 << -S2) - 1, p2 >>= -S2, S2 += o2;S2 > 0; m32 = m32 * 256 + t22[e2 + E4], E4 += B5, S2 -= 8)
        ;
      if (p2 === 0)
        p2 = 1 - x5;
      else {
        if (p2 === M3)
          return m32 ? NaN : (q ? -1 : 1) * (1 / 0);
        m32 = m32 + Math.pow(2, o2), p2 = p2 - x5;
      }
      return (q ? -1 : 1) * m32 * Math.pow(2, p2 - o2);
    };
    q02.write = function(t22, e2, r2, o2, f2, p2) {
      var m32, y22, M3, x5 = p2 * 8 - f2 - 1, S2 = (1 << x5) - 1, E4 = S2 >> 1, B5 = f2 === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, q = o2 ? 0 : p2 - 1, L2 = o2 ? 1 : -1, ge = e2 < 0 || e2 === 0 && 1 / e2 < 0 ? 1 : 0;
      for (e2 = Math.abs(e2), isNaN(e2) || e2 === 1 / 0 ? (y22 = isNaN(e2) ? 1 : 0, m32 = S2) : (m32 = Math.floor(Math.log(e2) / Math.LN2), e2 * (M3 = Math.pow(2, -m32)) < 1 && (m32--, M3 *= 2), m32 + E4 >= 1 ? e2 += B5 / M3 : e2 += B5 * Math.pow(2, 1 - E4), e2 * M3 >= 2 && (m32++, M3 /= 2), m32 + E4 >= S2 ? (y22 = 0, m32 = S2) : m32 + E4 >= 1 ? (y22 = (e2 * M3 - 1) * Math.pow(2, f2), m32 = m32 + E4) : (y22 = e2 * Math.pow(2, E4 - 1) * Math.pow(2, f2), m32 = 0));f2 >= 8; t22[r2 + q] = y22 & 255, q += L2, y22 /= 256, f2 -= 8)
        ;
      for (m32 = m32 << f2 | y22, x5 += f2;x5 > 0; t22[r2 + q] = m32 & 255, q += L2, m32 /= 256, x5 -= 8)
        ;
      t22[r2 + q - L2] |= ge * 128;
    };
  });
  Ut = T2((Xn) => {
    var I02 = Nd(), Gn = Dd(), Pd = typeof Symbol == "function" && typeof Symbol.for == "function" ? Symbol.for("nodejs.util.inspect.custom") : null;
    Xn.Buffer = me;
    Xn.SlowBuffer = Tw;
    Xn.INSPECT_MAX_BYTES = 50;
    var eo = 2147483647;
    Xn.kMaxLength = eo;
    me.TYPED_ARRAY_SUPPORT = Aw();
    !me.TYPED_ARRAY_SUPPORT && typeof console < "u" && typeof console.error == "function" && console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
    function Aw() {
      try {
        let t22 = new Uint8Array(1), e2 = { foo: function() {
          return 42;
        } };
        return Object.setPrototypeOf(e2, Uint8Array.prototype), Object.setPrototypeOf(t22, e2), t22.foo() === 42;
      } catch {
        return false;
      }
    }
    Object.defineProperty(me.prototype, "parent", { enumerable: true, get: function() {
      if (!!me.isBuffer(this))
        return this.buffer;
    } });
    Object.defineProperty(me.prototype, "offset", { enumerable: true, get: function() {
      if (!!me.isBuffer(this))
        return this.byteOffset;
    } });
    function li(t22) {
      if (t22 > eo)
        throw new RangeError('The value "' + t22 + '" is invalid for option "size"');
      let e2 = new Uint8Array(t22);
      return Object.setPrototypeOf(e2, me.prototype), e2;
    }
    function me(t22, e2, r2) {
      if (typeof t22 == "number") {
        if (typeof e2 == "string")
          throw new TypeError('The "string" argument must be of type string. Received type number');
        return N02(t22);
      }
      return Ud(t22, e2, r2);
    }
    me.poolSize = 8192;
    function Ud(t22, e2, r2) {
      if (typeof t22 == "string")
        return Bw(t22, e2);
      if (ArrayBuffer.isView(t22))
        return qw(t22);
      if (t22 == null)
        throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof t22);
      if (Zr(t22, ArrayBuffer) || t22 && Zr(t22.buffer, ArrayBuffer) || typeof SharedArrayBuffer < "u" && (Zr(t22, SharedArrayBuffer) || t22 && Zr(t22.buffer, SharedArrayBuffer)))
        return k02(t22, e2, r2);
      if (typeof t22 == "number")
        throw new TypeError('The "value" argument must not be of type number. Received type number');
      let o2 = t22.valueOf && t22.valueOf();
      if (o2 != null && o2 !== t22)
        return me.from(o2, e2, r2);
      let f2 = Iw(t22);
      if (f2)
        return f2;
      if (typeof Symbol < "u" && Symbol.toPrimitive != null && typeof t22[Symbol.toPrimitive] == "function")
        return me.from(t22[Symbol.toPrimitive]("string"), e2, r2);
      throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof t22);
    }
    me.from = function(t22, e2, r2) {
      return Ud(t22, e2, r2);
    };
    Object.setPrototypeOf(me.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(me, Uint8Array);
    function zd(t22) {
      if (typeof t22 != "number")
        throw new TypeError('"size" argument must be of type number');
      if (t22 < 0)
        throw new RangeError('The value "' + t22 + '" is invalid for option "size"');
    }
    function Rw(t22, e2, r2) {
      return zd(t22), t22 <= 0 ? li(t22) : e2 !== undefined ? typeof r2 == "string" ? li(t22).fill(e2, r2) : li(t22).fill(e2) : li(t22);
    }
    me.alloc = function(t22, e2, r2) {
      return Rw(t22, e2, r2);
    };
    function N02(t22) {
      return zd(t22), li(t22 < 0 ? 0 : D02(t22) | 0);
    }
    me.allocUnsafe = function(t22) {
      return N02(t22);
    };
    me.allocUnsafeSlow = function(t22) {
      return N02(t22);
    };
    function Bw(t22, e2) {
      if ((typeof e2 != "string" || e2 === "") && (e2 = "utf8"), !me.isEncoding(e2))
        throw new TypeError("Unknown encoding: " + e2);
      let r2 = Hd(t22, e2) | 0, o2 = li(r2), f2 = o2.write(t22, e2);
      return f2 !== r2 && (o2 = o2.slice(0, f2)), o2;
    }
    function T02(t22) {
      let e2 = t22.length < 0 ? 0 : D02(t22.length) | 0, r2 = li(e2);
      for (let o2 = 0;o2 < e2; o2 += 1)
        r2[o2] = t22[o2] & 255;
      return r2;
    }
    function qw(t22) {
      if (Zr(t22, Uint8Array)) {
        let e2 = new Uint8Array(t22);
        return k02(e2.buffer, e2.byteOffset, e2.byteLength);
      }
      return T02(t22);
    }
    function k02(t22, e2, r2) {
      if (e2 < 0 || t22.byteLength < e2)
        throw new RangeError('"offset" is outside of buffer bounds');
      if (t22.byteLength < e2 + (r2 || 0))
        throw new RangeError('"length" is outside of buffer bounds');
      let o2;
      return e2 === undefined && r2 === undefined ? o2 = new Uint8Array(t22) : r2 === undefined ? o2 = new Uint8Array(t22, e2) : o2 = new Uint8Array(t22, e2, r2), Object.setPrototypeOf(o2, me.prototype), o2;
    }
    function Iw(t22) {
      if (me.isBuffer(t22)) {
        let e2 = D02(t22.length) | 0, r2 = li(e2);
        return r2.length === 0 || t22.copy(r2, 0, 0, e2), r2;
      }
      if (t22.length !== undefined)
        return typeof t22.length != "number" || C02(t22.length) ? li(0) : T02(t22);
      if (t22.type === "Buffer" && Array.isArray(t22.data))
        return T02(t22.data);
    }
    function D02(t22) {
      if (t22 >= eo)
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + eo.toString(16) + " bytes");
      return t22 | 0;
    }
    function Tw(t22) {
      return +t22 != t22 && (t22 = 0), me.alloc(+t22);
    }
    me.isBuffer = function(e2) {
      return e2 != null && e2._isBuffer === true && e2 !== me.prototype;
    };
    me.compare = function(e2, r2) {
      if (Zr(e2, Uint8Array) && (e2 = me.from(e2, e2.offset, e2.byteLength)), Zr(r2, Uint8Array) && (r2 = me.from(r2, r2.offset, r2.byteLength)), !me.isBuffer(e2) || !me.isBuffer(r2))
        throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
      if (e2 === r2)
        return 0;
      let o2 = e2.length, f2 = r2.length;
      for (let p2 = 0, m32 = Math.min(o2, f2);p2 < m32; ++p2)
        if (e2[p2] !== r2[p2]) {
          o2 = e2[p2], f2 = r2[p2];
          break;
        }
      return o2 < f2 ? -1 : f2 < o2 ? 1 : 0;
    };
    me.isEncoding = function(e2) {
      switch (String(e2).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    me.concat = function(e2, r2) {
      if (!Array.isArray(e2))
        throw new TypeError('"list" argument must be an Array of Buffers');
      if (e2.length === 0)
        return me.alloc(0);
      let o2;
      if (r2 === undefined)
        for (r2 = 0, o2 = 0;o2 < e2.length; ++o2)
          r2 += e2[o2].length;
      let f2 = me.allocUnsafe(r2), p2 = 0;
      for (o2 = 0;o2 < e2.length; ++o2) {
        let m32 = e2[o2];
        if (Zr(m32, Uint8Array))
          p2 + m32.length > f2.length ? (me.isBuffer(m32) || (m32 = me.from(m32)), m32.copy(f2, p2)) : Uint8Array.prototype.set.call(f2, m32, p2);
        else if (me.isBuffer(m32))
          m32.copy(f2, p2);
        else
          throw new TypeError('"list" argument must be an Array of Buffers');
        p2 += m32.length;
      }
      return f2;
    };
    function Hd(t22, e2) {
      if (me.isBuffer(t22))
        return t22.length;
      if (ArrayBuffer.isView(t22) || Zr(t22, ArrayBuffer))
        return t22.byteLength;
      if (typeof t22 != "string")
        throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof t22);
      let r2 = t22.length, o2 = arguments.length > 2 && arguments[2] === true;
      if (!o2 && r2 === 0)
        return 0;
      let f2 = false;
      for (;; )
        switch (e2) {
          case "ascii":
          case "latin1":
          case "binary":
            return r2;
          case "utf8":
          case "utf-8":
            return L02(t22).length;
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return r2 * 2;
          case "hex":
            return r2 >>> 1;
          case "base64":
            return Xd(t22).length;
          default:
            if (f2)
              return o2 ? -1 : L02(t22).length;
            e2 = ("" + e2).toLowerCase(), f2 = true;
        }
    }
    me.byteLength = Hd;
    function kw(t22, e2, r2) {
      let o2 = false;
      if ((e2 === undefined || e2 < 0) && (e2 = 0), e2 > this.length || ((r2 === undefined || r2 > this.length) && (r2 = this.length), r2 <= 0) || (r2 >>>= 0, e2 >>>= 0, r2 <= e2))
        return "";
      for (t22 || (t22 = "utf8");; )
        switch (t22) {
          case "hex":
            return Hw(this, e2, r2);
          case "utf8":
          case "utf-8":
            return Kd(this, e2, r2);
          case "ascii":
            return Uw(this, e2, r2);
          case "latin1":
          case "binary":
            return zw(this, e2, r2);
          case "base64":
            return Ow(this, e2, r2);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return Ww(this, e2, r2);
          default:
            if (o2)
              throw new TypeError("Unknown encoding: " + t22);
            t22 = (t22 + "").toLowerCase(), o2 = true;
        }
    }
    me.prototype._isBuffer = true;
    function fn(t22, e2, r2) {
      let o2 = t22[e2];
      t22[e2] = t22[r2], t22[r2] = o2;
    }
    me.prototype.swap16 = function() {
      let e2 = this.length;
      if (e2 % 2 !== 0)
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      for (let r2 = 0;r2 < e2; r2 += 2)
        fn(this, r2, r2 + 1);
      return this;
    };
    me.prototype.swap32 = function() {
      let e2 = this.length;
      if (e2 % 4 !== 0)
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      for (let r2 = 0;r2 < e2; r2 += 4)
        fn(this, r2, r2 + 3), fn(this, r2 + 1, r2 + 2);
      return this;
    };
    me.prototype.swap64 = function() {
      let e2 = this.length;
      if (e2 % 8 !== 0)
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      for (let r2 = 0;r2 < e2; r2 += 8)
        fn(this, r2, r2 + 7), fn(this, r2 + 1, r2 + 6), fn(this, r2 + 2, r2 + 5), fn(this, r2 + 3, r2 + 4);
      return this;
    };
    me.prototype.toString = function() {
      let e2 = this.length;
      return e2 === 0 ? "" : arguments.length === 0 ? Kd(this, 0, e2) : kw.apply(this, arguments);
    };
    me.prototype.toLocaleString = me.prototype.toString;
    me.prototype.equals = function(e2) {
      if (!me.isBuffer(e2))
        throw new TypeError("Argument must be a Buffer");
      return this === e2 ? true : me.compare(this, e2) === 0;
    };
    me.prototype.inspect = function() {
      let e2 = "", r2 = Xn.INSPECT_MAX_BYTES;
      return e2 = this.toString("hex", 0, r2).replace(/(.{2})/g, "$1 ").trim(), this.length > r2 && (e2 += " ... "), "<Buffer " + e2 + ">";
    };
    Pd && (me.prototype[Pd] = me.prototype.inspect);
    me.prototype.compare = function(e2, r2, o2, f2, p2) {
      if (Zr(e2, Uint8Array) && (e2 = me.from(e2, e2.offset, e2.byteLength)), !me.isBuffer(e2))
        throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof e2);
      if (r2 === undefined && (r2 = 0), o2 === undefined && (o2 = e2 ? e2.length : 0), f2 === undefined && (f2 = 0), p2 === undefined && (p2 = this.length), r2 < 0 || o2 > e2.length || f2 < 0 || p2 > this.length)
        throw new RangeError("out of range index");
      if (f2 >= p2 && r2 >= o2)
        return 0;
      if (f2 >= p2)
        return -1;
      if (r2 >= o2)
        return 1;
      if (r2 >>>= 0, o2 >>>= 0, f2 >>>= 0, p2 >>>= 0, this === e2)
        return 0;
      let m32 = p2 - f2, y22 = o2 - r2, M3 = Math.min(m32, y22), x5 = this.slice(f2, p2), S2 = e2.slice(r2, o2);
      for (let E4 = 0;E4 < M3; ++E4)
        if (x5[E4] !== S2[E4]) {
          m32 = x5[E4], y22 = S2[E4];
          break;
        }
      return m32 < y22 ? -1 : y22 < m32 ? 1 : 0;
    };
    function Wd(t22, e2, r2, o2, f2) {
      if (t22.length === 0)
        return -1;
      if (typeof r2 == "string" ? (o2 = r2, r2 = 0) : r2 > 2147483647 ? r2 = 2147483647 : r2 < -2147483648 && (r2 = -2147483648), r2 = +r2, C02(r2) && (r2 = f2 ? 0 : t22.length - 1), r2 < 0 && (r2 = t22.length + r2), r2 >= t22.length) {
        if (f2)
          return -1;
        r2 = t22.length - 1;
      } else if (r2 < 0)
        if (f2)
          r2 = 0;
        else
          return -1;
      if (typeof e2 == "string" && (e2 = me.from(e2, o2)), me.isBuffer(e2))
        return e2.length === 0 ? -1 : Cd(t22, e2, r2, o2, f2);
      if (typeof e2 == "number")
        return e2 = e2 & 255, typeof Uint8Array.prototype.indexOf == "function" ? f2 ? Uint8Array.prototype.indexOf.call(t22, e2, r2) : Uint8Array.prototype.lastIndexOf.call(t22, e2, r2) : Cd(t22, [e2], r2, o2, f2);
      throw new TypeError("val must be string, number or Buffer");
    }
    function Cd(t22, e2, r2, o2, f2) {
      let p2 = 1, m32 = t22.length, y22 = e2.length;
      if (o2 !== undefined && (o2 = String(o2).toLowerCase(), o2 === "ucs2" || o2 === "ucs-2" || o2 === "utf16le" || o2 === "utf-16le")) {
        if (t22.length < 2 || e2.length < 2)
          return -1;
        p2 = 2, m32 /= 2, y22 /= 2, r2 /= 2;
      }
      function M3(S2, E4) {
        return p2 === 1 ? S2[E4] : S2.readUInt16BE(E4 * p2);
      }
      let x5;
      if (f2) {
        let S2 = -1;
        for (x5 = r2;x5 < m32; x5++)
          if (M3(t22, x5) === M3(e2, S2 === -1 ? 0 : x5 - S2)) {
            if (S2 === -1 && (S2 = x5), x5 - S2 + 1 === y22)
              return S2 * p2;
          } else
            S2 !== -1 && (x5 -= x5 - S2), S2 = -1;
      } else
        for (r2 + y22 > m32 && (r2 = m32 - y22), x5 = r2;x5 >= 0; x5--) {
          let S2 = true;
          for (let E4 = 0;E4 < y22; E4++)
            if (M3(t22, x5 + E4) !== M3(e2, E4)) {
              S2 = false;
              break;
            }
          if (S2)
            return x5;
        }
      return -1;
    }
    me.prototype.includes = function(e2, r2, o2) {
      return this.indexOf(e2, r2, o2) !== -1;
    };
    me.prototype.indexOf = function(e2, r2, o2) {
      return Wd(this, e2, r2, o2, true);
    };
    me.prototype.lastIndexOf = function(e2, r2, o2) {
      return Wd(this, e2, r2, o2, false);
    };
    function Lw(t22, e2, r2, o2) {
      r2 = Number(r2) || 0;
      let f2 = t22.length - r2;
      o2 ? (o2 = Number(o2), o2 > f2 && (o2 = f2)) : o2 = f2;
      let p2 = e2.length;
      o2 > p2 / 2 && (o2 = p2 / 2);
      let m32;
      for (m32 = 0;m32 < o2; ++m32) {
        let y22 = parseInt(e2.substr(m32 * 2, 2), 16);
        if (C02(y22))
          return m32;
        t22[r2 + m32] = y22;
      }
      return m32;
    }
    function Nw(t22, e2, r2, o2) {
      return to(L02(e2, t22.length - r2), t22, r2, o2);
    }
    function Dw(t22, e2, r2, o2) {
      return to(Vw(e2), t22, r2, o2);
    }
    function Pw(t22, e2, r2, o2) {
      return to(Xd(e2), t22, r2, o2);
    }
    function Cw(t22, e2, r2, o2) {
      return to($w(e2, t22.length - r2), t22, r2, o2);
    }
    me.prototype.write = function(e2, r2, o2, f2) {
      if (r2 === undefined)
        f2 = "utf8", o2 = this.length, r2 = 0;
      else if (o2 === undefined && typeof r2 == "string")
        f2 = r2, o2 = this.length, r2 = 0;
      else if (isFinite(r2))
        r2 = r2 >>> 0, isFinite(o2) ? (o2 = o2 >>> 0, f2 === undefined && (f2 = "utf8")) : (f2 = o2, o2 = undefined);
      else
        throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
      let p2 = this.length - r2;
      if ((o2 === undefined || o2 > p2) && (o2 = p2), e2.length > 0 && (o2 < 0 || r2 < 0) || r2 > this.length)
        throw new RangeError("Attempt to write outside buffer bounds");
      f2 || (f2 = "utf8");
      let m32 = false;
      for (;; )
        switch (f2) {
          case "hex":
            return Lw(this, e2, r2, o2);
          case "utf8":
          case "utf-8":
            return Nw(this, e2, r2, o2);
          case "ascii":
          case "latin1":
          case "binary":
            return Dw(this, e2, r2, o2);
          case "base64":
            return Pw(this, e2, r2, o2);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return Cw(this, e2, r2, o2);
          default:
            if (m32)
              throw new TypeError("Unknown encoding: " + f2);
            f2 = ("" + f2).toLowerCase(), m32 = true;
        }
    };
    me.prototype.toJSON = function() {
      return { type: "Buffer", data: Array.prototype.slice.call(this._arr || this, 0) };
    };
    function Ow(t22, e2, r2) {
      return e2 === 0 && r2 === t22.length ? I02.fromByteArray(t22) : I02.fromByteArray(t22.slice(e2, r2));
    }
    function Kd(t22, e2, r2) {
      r2 = Math.min(t22.length, r2);
      let o2 = [], f2 = e2;
      for (;f2 < r2; ) {
        let p2 = t22[f2], m32 = null, y22 = p2 > 239 ? 4 : p2 > 223 ? 3 : p2 > 191 ? 2 : 1;
        if (f2 + y22 <= r2) {
          let M3, x5, S2, E4;
          switch (y22) {
            case 1:
              p2 < 128 && (m32 = p2);
              break;
            case 2:
              M3 = t22[f2 + 1], (M3 & 192) === 128 && (E4 = (p2 & 31) << 6 | M3 & 63, E4 > 127 && (m32 = E4));
              break;
            case 3:
              M3 = t22[f2 + 1], x5 = t22[f2 + 2], (M3 & 192) === 128 && (x5 & 192) === 128 && (E4 = (p2 & 15) << 12 | (M3 & 63) << 6 | x5 & 63, E4 > 2047 && (E4 < 55296 || E4 > 57343) && (m32 = E4));
              break;
            case 4:
              M3 = t22[f2 + 1], x5 = t22[f2 + 2], S2 = t22[f2 + 3], (M3 & 192) === 128 && (x5 & 192) === 128 && (S2 & 192) === 128 && (E4 = (p2 & 15) << 18 | (M3 & 63) << 12 | (x5 & 63) << 6 | S2 & 63, E4 > 65535 && E4 < 1114112 && (m32 = E4));
          }
        }
        m32 === null ? (m32 = 65533, y22 = 1) : m32 > 65535 && (m32 -= 65536, o2.push(m32 >>> 10 & 1023 | 55296), m32 = 56320 | m32 & 1023), o2.push(m32), f2 += y22;
      }
      return Fw(o2);
    }
    var Od = 4096;
    function Fw(t22) {
      let e2 = t22.length;
      if (e2 <= Od)
        return String.fromCharCode.apply(String, t22);
      let r2 = "", o2 = 0;
      for (;o2 < e2; )
        r2 += String.fromCharCode.apply(String, t22.slice(o2, o2 += Od));
      return r2;
    }
    function Uw(t22, e2, r2) {
      let o2 = "";
      r2 = Math.min(t22.length, r2);
      for (let f2 = e2;f2 < r2; ++f2)
        o2 += String.fromCharCode(t22[f2] & 127);
      return o2;
    }
    function zw(t22, e2, r2) {
      let o2 = "";
      r2 = Math.min(t22.length, r2);
      for (let f2 = e2;f2 < r2; ++f2)
        o2 += String.fromCharCode(t22[f2]);
      return o2;
    }
    function Hw(t22, e2, r2) {
      let o2 = t22.length;
      (!e2 || e2 < 0) && (e2 = 0), (!r2 || r2 < 0 || r2 > o2) && (r2 = o2);
      let f2 = "";
      for (let p2 = e2;p2 < r2; ++p2)
        f2 += Gw[t22[p2]];
      return f2;
    }
    function Ww(t22, e2, r2) {
      let o2 = t22.slice(e2, r2), f2 = "";
      for (let p2 = 0;p2 < o2.length - 1; p2 += 2)
        f2 += String.fromCharCode(o2[p2] + o2[p2 + 1] * 256);
      return f2;
    }
    me.prototype.slice = function(e2, r2) {
      let o2 = this.length;
      e2 = ~~e2, r2 = r2 === undefined ? o2 : ~~r2, e2 < 0 ? (e2 += o2, e2 < 0 && (e2 = 0)) : e2 > o2 && (e2 = o2), r2 < 0 ? (r2 += o2, r2 < 0 && (r2 = 0)) : r2 > o2 && (r2 = o2), r2 < e2 && (r2 = e2);
      let f2 = this.subarray(e2, r2);
      return Object.setPrototypeOf(f2, me.prototype), f2;
    };
    function Dt(t22, e2, r2) {
      if (t22 % 1 !== 0 || t22 < 0)
        throw new RangeError("offset is not uint");
      if (t22 + e2 > r2)
        throw new RangeError("Trying to access beyond buffer length");
    }
    me.prototype.readUintLE = me.prototype.readUIntLE = function(e2, r2, o2) {
      e2 = e2 >>> 0, r2 = r2 >>> 0, o2 || Dt(e2, r2, this.length);
      let f2 = this[e2], p2 = 1, m32 = 0;
      for (;++m32 < r2 && (p2 *= 256); )
        f2 += this[e2 + m32] * p2;
      return f2;
    };
    me.prototype.readUintBE = me.prototype.readUIntBE = function(e2, r2, o2) {
      e2 = e2 >>> 0, r2 = r2 >>> 0, o2 || Dt(e2, r2, this.length);
      let f2 = this[e2 + --r2], p2 = 1;
      for (;r2 > 0 && (p2 *= 256); )
        f2 += this[e2 + --r2] * p2;
      return f2;
    };
    me.prototype.readUint8 = me.prototype.readUInt8 = function(e2, r2) {
      return e2 = e2 >>> 0, r2 || Dt(e2, 1, this.length), this[e2];
    };
    me.prototype.readUint16LE = me.prototype.readUInt16LE = function(e2, r2) {
      return e2 = e2 >>> 0, r2 || Dt(e2, 2, this.length), this[e2] | this[e2 + 1] << 8;
    };
    me.prototype.readUint16BE = me.prototype.readUInt16BE = function(e2, r2) {
      return e2 = e2 >>> 0, r2 || Dt(e2, 2, this.length), this[e2] << 8 | this[e2 + 1];
    };
    me.prototype.readUint32LE = me.prototype.readUInt32LE = function(e2, r2) {
      return e2 = e2 >>> 0, r2 || Dt(e2, 4, this.length), (this[e2] | this[e2 + 1] << 8 | this[e2 + 2] << 16) + this[e2 + 3] * 16777216;
    };
    me.prototype.readUint32BE = me.prototype.readUInt32BE = function(e2, r2) {
      return e2 = e2 >>> 0, r2 || Dt(e2, 4, this.length), this[e2] * 16777216 + (this[e2 + 1] << 16 | this[e2 + 2] << 8 | this[e2 + 3]);
    };
    me.prototype.readBigUInt64LE = Ti(function(e2) {
      e2 = e2 >>> 0, Yn(e2, "offset");
      let r2 = this[e2], o2 = this[e2 + 7];
      (r2 === undefined || o2 === undefined) && Vf(e2, this.length - 8);
      let f2 = r2 + this[++e2] * 2 ** 8 + this[++e2] * 2 ** 16 + this[++e2] * 2 ** 24, p2 = this[++e2] + this[++e2] * 2 ** 8 + this[++e2] * 2 ** 16 + o2 * 2 ** 24;
      return BigInt(f2) + (BigInt(p2) << BigInt(32));
    });
    me.prototype.readBigUInt64BE = Ti(function(e2) {
      e2 = e2 >>> 0, Yn(e2, "offset");
      let r2 = this[e2], o2 = this[e2 + 7];
      (r2 === undefined || o2 === undefined) && Vf(e2, this.length - 8);
      let f2 = r2 * 2 ** 24 + this[++e2] * 2 ** 16 + this[++e2] * 2 ** 8 + this[++e2], p2 = this[++e2] * 2 ** 24 + this[++e2] * 2 ** 16 + this[++e2] * 2 ** 8 + o2;
      return (BigInt(f2) << BigInt(32)) + BigInt(p2);
    });
    me.prototype.readIntLE = function(e2, r2, o2) {
      e2 = e2 >>> 0, r2 = r2 >>> 0, o2 || Dt(e2, r2, this.length);
      let f2 = this[e2], p2 = 1, m32 = 0;
      for (;++m32 < r2 && (p2 *= 256); )
        f2 += this[e2 + m32] * p2;
      return p2 *= 128, f2 >= p2 && (f2 -= Math.pow(2, 8 * r2)), f2;
    };
    me.prototype.readIntBE = function(e2, r2, o2) {
      e2 = e2 >>> 0, r2 = r2 >>> 0, o2 || Dt(e2, r2, this.length);
      let f2 = r2, p2 = 1, m32 = this[e2 + --f2];
      for (;f2 > 0 && (p2 *= 256); )
        m32 += this[e2 + --f2] * p2;
      return p2 *= 128, m32 >= p2 && (m32 -= Math.pow(2, 8 * r2)), m32;
    };
    me.prototype.readInt8 = function(e2, r2) {
      return e2 = e2 >>> 0, r2 || Dt(e2, 1, this.length), this[e2] & 128 ? (255 - this[e2] + 1) * -1 : this[e2];
    };
    me.prototype.readInt16LE = function(e2, r2) {
      e2 = e2 >>> 0, r2 || Dt(e2, 2, this.length);
      let o2 = this[e2] | this[e2 + 1] << 8;
      return o2 & 32768 ? o2 | 4294901760 : o2;
    };
    me.prototype.readInt16BE = function(e2, r2) {
      e2 = e2 >>> 0, r2 || Dt(e2, 2, this.length);
      let o2 = this[e2 + 1] | this[e2] << 8;
      return o2 & 32768 ? o2 | 4294901760 : o2;
    };
    me.prototype.readInt32LE = function(e2, r2) {
      return e2 = e2 >>> 0, r2 || Dt(e2, 4, this.length), this[e2] | this[e2 + 1] << 8 | this[e2 + 2] << 16 | this[e2 + 3] << 24;
    };
    me.prototype.readInt32BE = function(e2, r2) {
      return e2 = e2 >>> 0, r2 || Dt(e2, 4, this.length), this[e2] << 24 | this[e2 + 1] << 16 | this[e2 + 2] << 8 | this[e2 + 3];
    };
    me.prototype.readBigInt64LE = Ti(function(e2) {
      e2 = e2 >>> 0, Yn(e2, "offset");
      let r2 = this[e2], o2 = this[e2 + 7];
      (r2 === undefined || o2 === undefined) && Vf(e2, this.length - 8);
      let f2 = this[e2 + 4] + this[e2 + 5] * 2 ** 8 + this[e2 + 6] * 2 ** 16 + (o2 << 24);
      return (BigInt(f2) << BigInt(32)) + BigInt(r2 + this[++e2] * 2 ** 8 + this[++e2] * 2 ** 16 + this[++e2] * 2 ** 24);
    });
    me.prototype.readBigInt64BE = Ti(function(e2) {
      e2 = e2 >>> 0, Yn(e2, "offset");
      let r2 = this[e2], o2 = this[e2 + 7];
      (r2 === undefined || o2 === undefined) && Vf(e2, this.length - 8);
      let f2 = (r2 << 24) + this[++e2] * 2 ** 16 + this[++e2] * 2 ** 8 + this[++e2];
      return (BigInt(f2) << BigInt(32)) + BigInt(this[++e2] * 2 ** 24 + this[++e2] * 2 ** 16 + this[++e2] * 2 ** 8 + o2);
    });
    me.prototype.readFloatLE = function(e2, r2) {
      return e2 = e2 >>> 0, r2 || Dt(e2, 4, this.length), Gn.read(this, e2, true, 23, 4);
    };
    me.prototype.readFloatBE = function(e2, r2) {
      return e2 = e2 >>> 0, r2 || Dt(e2, 4, this.length), Gn.read(this, e2, false, 23, 4);
    };
    me.prototype.readDoubleLE = function(e2, r2) {
      return e2 = e2 >>> 0, r2 || Dt(e2, 8, this.length), Gn.read(this, e2, true, 52, 8);
    };
    me.prototype.readDoubleBE = function(e2, r2) {
      return e2 = e2 >>> 0, r2 || Dt(e2, 8, this.length), Gn.read(this, e2, false, 52, 8);
    };
    function er(t22, e2, r2, o2, f2, p2) {
      if (!me.isBuffer(t22))
        throw new TypeError('"buffer" argument must be a Buffer instance');
      if (e2 > f2 || e2 < p2)
        throw new RangeError('"value" argument is out of bounds');
      if (r2 + o2 > t22.length)
        throw new RangeError("Index out of range");
    }
    me.prototype.writeUintLE = me.prototype.writeUIntLE = function(e2, r2, o2, f2) {
      if (e2 = +e2, r2 = r2 >>> 0, o2 = o2 >>> 0, !f2) {
        let y22 = Math.pow(2, 8 * o2) - 1;
        er(this, e2, r2, o2, y22, 0);
      }
      let p2 = 1, m32 = 0;
      for (this[r2] = e2 & 255;++m32 < o2 && (p2 *= 256); )
        this[r2 + m32] = e2 / p2 & 255;
      return r2 + o2;
    };
    me.prototype.writeUintBE = me.prototype.writeUIntBE = function(e2, r2, o2, f2) {
      if (e2 = +e2, r2 = r2 >>> 0, o2 = o2 >>> 0, !f2) {
        let y22 = Math.pow(2, 8 * o2) - 1;
        er(this, e2, r2, o2, y22, 0);
      }
      let p2 = o2 - 1, m32 = 1;
      for (this[r2 + p2] = e2 & 255;--p2 >= 0 && (m32 *= 256); )
        this[r2 + p2] = e2 / m32 & 255;
      return r2 + o2;
    };
    me.prototype.writeUint8 = me.prototype.writeUInt8 = function(e2, r2, o2) {
      return e2 = +e2, r2 = r2 >>> 0, o2 || er(this, e2, r2, 1, 255, 0), this[r2] = e2 & 255, r2 + 1;
    };
    me.prototype.writeUint16LE = me.prototype.writeUInt16LE = function(e2, r2, o2) {
      return e2 = +e2, r2 = r2 >>> 0, o2 || er(this, e2, r2, 2, 65535, 0), this[r2] = e2 & 255, this[r2 + 1] = e2 >>> 8, r2 + 2;
    };
    me.prototype.writeUint16BE = me.prototype.writeUInt16BE = function(e2, r2, o2) {
      return e2 = +e2, r2 = r2 >>> 0, o2 || er(this, e2, r2, 2, 65535, 0), this[r2] = e2 >>> 8, this[r2 + 1] = e2 & 255, r2 + 2;
    };
    me.prototype.writeUint32LE = me.prototype.writeUInt32LE = function(e2, r2, o2) {
      return e2 = +e2, r2 = r2 >>> 0, o2 || er(this, e2, r2, 4, 4294967295, 0), this[r2 + 3] = e2 >>> 24, this[r2 + 2] = e2 >>> 16, this[r2 + 1] = e2 >>> 8, this[r2] = e2 & 255, r2 + 4;
    };
    me.prototype.writeUint32BE = me.prototype.writeUInt32BE = function(e2, r2, o2) {
      return e2 = +e2, r2 = r2 >>> 0, o2 || er(this, e2, r2, 4, 4294967295, 0), this[r2] = e2 >>> 24, this[r2 + 1] = e2 >>> 16, this[r2 + 2] = e2 >>> 8, this[r2 + 3] = e2 & 255, r2 + 4;
    };
    function jd(t22, e2, r2, o2, f2) {
      Yd(e2, o2, f2, t22, r2, 7);
      let p2 = Number(e2 & BigInt(4294967295));
      t22[r2++] = p2, p2 = p2 >> 8, t22[r2++] = p2, p2 = p2 >> 8, t22[r2++] = p2, p2 = p2 >> 8, t22[r2++] = p2;
      let m32 = Number(e2 >> BigInt(32) & BigInt(4294967295));
      return t22[r2++] = m32, m32 = m32 >> 8, t22[r2++] = m32, m32 = m32 >> 8, t22[r2++] = m32, m32 = m32 >> 8, t22[r2++] = m32, r2;
    }
    function Zd(t22, e2, r2, o2, f2) {
      Yd(e2, o2, f2, t22, r2, 7);
      let p2 = Number(e2 & BigInt(4294967295));
      t22[r2 + 7] = p2, p2 = p2 >> 8, t22[r2 + 6] = p2, p2 = p2 >> 8, t22[r2 + 5] = p2, p2 = p2 >> 8, t22[r2 + 4] = p2;
      let m32 = Number(e2 >> BigInt(32) & BigInt(4294967295));
      return t22[r2 + 3] = m32, m32 = m32 >> 8, t22[r2 + 2] = m32, m32 = m32 >> 8, t22[r2 + 1] = m32, m32 = m32 >> 8, t22[r2] = m32, r2 + 8;
    }
    me.prototype.writeBigUInt64LE = Ti(function(e2, r2 = 0) {
      return jd(this, e2, r2, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    me.prototype.writeBigUInt64BE = Ti(function(e2, r2 = 0) {
      return Zd(this, e2, r2, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    me.prototype.writeIntLE = function(e2, r2, o2, f2) {
      if (e2 = +e2, r2 = r2 >>> 0, !f2) {
        let M3 = Math.pow(2, 8 * o2 - 1);
        er(this, e2, r2, o2, M3 - 1, -M3);
      }
      let p2 = 0, m32 = 1, y22 = 0;
      for (this[r2] = e2 & 255;++p2 < o2 && (m32 *= 256); )
        e2 < 0 && y22 === 0 && this[r2 + p2 - 1] !== 0 && (y22 = 1), this[r2 + p2] = (e2 / m32 >> 0) - y22 & 255;
      return r2 + o2;
    };
    me.prototype.writeIntBE = function(e2, r2, o2, f2) {
      if (e2 = +e2, r2 = r2 >>> 0, !f2) {
        let M3 = Math.pow(2, 8 * o2 - 1);
        er(this, e2, r2, o2, M3 - 1, -M3);
      }
      let p2 = o2 - 1, m32 = 1, y22 = 0;
      for (this[r2 + p2] = e2 & 255;--p2 >= 0 && (m32 *= 256); )
        e2 < 0 && y22 === 0 && this[r2 + p2 + 1] !== 0 && (y22 = 1), this[r2 + p2] = (e2 / m32 >> 0) - y22 & 255;
      return r2 + o2;
    };
    me.prototype.writeInt8 = function(e2, r2, o2) {
      return e2 = +e2, r2 = r2 >>> 0, o2 || er(this, e2, r2, 1, 127, -128), e2 < 0 && (e2 = 255 + e2 + 1), this[r2] = e2 & 255, r2 + 1;
    };
    me.prototype.writeInt16LE = function(e2, r2, o2) {
      return e2 = +e2, r2 = r2 >>> 0, o2 || er(this, e2, r2, 2, 32767, -32768), this[r2] = e2 & 255, this[r2 + 1] = e2 >>> 8, r2 + 2;
    };
    me.prototype.writeInt16BE = function(e2, r2, o2) {
      return e2 = +e2, r2 = r2 >>> 0, o2 || er(this, e2, r2, 2, 32767, -32768), this[r2] = e2 >>> 8, this[r2 + 1] = e2 & 255, r2 + 2;
    };
    me.prototype.writeInt32LE = function(e2, r2, o2) {
      return e2 = +e2, r2 = r2 >>> 0, o2 || er(this, e2, r2, 4, 2147483647, -2147483648), this[r2] = e2 & 255, this[r2 + 1] = e2 >>> 8, this[r2 + 2] = e2 >>> 16, this[r2 + 3] = e2 >>> 24, r2 + 4;
    };
    me.prototype.writeInt32BE = function(e2, r2, o2) {
      return e2 = +e2, r2 = r2 >>> 0, o2 || er(this, e2, r2, 4, 2147483647, -2147483648), e2 < 0 && (e2 = 4294967295 + e2 + 1), this[r2] = e2 >>> 24, this[r2 + 1] = e2 >>> 16, this[r2 + 2] = e2 >>> 8, this[r2 + 3] = e2 & 255, r2 + 4;
    };
    me.prototype.writeBigInt64LE = Ti(function(e2, r2 = 0) {
      return jd(this, e2, r2, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    me.prototype.writeBigInt64BE = Ti(function(e2, r2 = 0) {
      return Zd(this, e2, r2, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    function Vd(t22, e2, r2, o2, f2, p2) {
      if (r2 + o2 > t22.length)
        throw new RangeError("Index out of range");
      if (r2 < 0)
        throw new RangeError("Index out of range");
    }
    function $d(t22, e2, r2, o2, f2) {
      return e2 = +e2, r2 = r2 >>> 0, f2 || Vd(t22, e2, r2, 4, 340282346638528860000000000000000000000, -340282346638528860000000000000000000000), Gn.write(t22, e2, r2, o2, 23, 4), r2 + 4;
    }
    me.prototype.writeFloatLE = function(e2, r2, o2) {
      return $d(this, e2, r2, true, o2);
    };
    me.prototype.writeFloatBE = function(e2, r2, o2) {
      return $d(this, e2, r2, false, o2);
    };
    function Gd(t22, e2, r2, o2, f2) {
      return e2 = +e2, r2 = r2 >>> 0, f2 || Vd(t22, e2, rn.write(t22, e2, r2, o2, 52, 8), r2 + 8;
    }
    me.prototype.writeDoubleLE = function(e2, r2, o2) {
      return Gd(this, e2, r2, true, o2);
    };
    me.prototype.writeDoubleBE = function(e2, r2, o2) {
      return Gd(this, e2, r2, false, o2);
    };
    me.prototype.copy = function(e2, r2, o2, f2) {
      if (!me.isBuffer(e2))
        throw new TypeError("argument should be a Buffer");
      if (o2 || (o2 = 0), !f2 && f2 !== 0 && (f2 = this.length), r2 >= e2.length && (r2 = e2.length), r2 || (r2 = 0), f2 > 0 && f2 < o2 && (f2 = o2), f2 === o2 || e2.length === 0 || this.length === 0)
        return 0;
      if (r2 < 0)
        throw new RangeError("targetStart out of bounds");
      if (o2 < 0 || o2 >= this.length)
        throw new RangeError("Index out of range");
      if (f2 < 0)
        throw new RangeError("sourceEnd out of bounds");
      f2 > this.length && (f2 = this.length), e2.length - r2 < f2 - o2 && (f2 = e2.length - r2 + o2);
      let p2 = f2 - o2;
      return this === e2 && typeof Uint8Array.prototype.copyWithin == "function" ? this.copyWithin(r2, o2, f2) : Uint8Array.prototype.set.call(e2, this.subarray(o2, f2), r2), p2;
    };
    me.prototype.fill = function(e2, r2, o2, f2) {
      if (typeof e2 == "string") {
        if (typeof r2 == "string" ? (f2 = r2, r2 = 0, o2 = this.length) : typeof o2 == "string" && (f2 = o2, o2 = this.length), f2 !== undefined && typeof f2 != "string")
          throw new TypeError("encoding must be a string");
        if (typeof f2 == "string" && !me.isEncoding(f2))
          throw new TypeError("Unknown encoding: " + f2);
        if (e2.length === 1) {
          let m32 = e2.charCodeAt(0);
          (f2 === "utf8" && m32 < 128 || f2 === "latin1") && (e2 = m32);
        }
      } else
        typeof e2 == "number" ? e2 = e2 & 255 : typeof e2 == "boolean" && (e2 = Number(e2));
      if (r2 < 0 || this.length < r2 || this.length < o2)
        throw new RangeError("Out of range index");
      if (o2 <= r2)
        return this;
      r2 = r2 >>> 0, o2 = o2 === undefined ? this.length : o2 >>> 0, e2 || (e2 = 0);
      let p2;
      if (typeof e2 == "number")
        for (p2 = r2;p2 < o2; ++p2)
          this[p2] = e2;
      else {
        let m32 = me.isBuffer(e2) ? e2 : me.from(e2, f2), y22 = m32.length;
        if (y22 === 0)
          throw new TypeError('The value "' + e2 + '" is invalid for argument "value"');
        for (p2 = 0;p2 < o2 - r2; ++p2)
          this[p2 + r2] = m32[p2 % y22];
      }
      return this;
    };
    var $n = {};
    function P02(t22, e2, r2) {
      $n[t22] = class extends r2 {
        constructor() {
          super(), Object.defineProperty(this, "message", { value: e2.apply(this, arguments), writable: true, configurable: true }), this.name = `${this.name} [${t22}]`, this.stack, delete this.name;
        }
        get code() {
          return t22;
        }
        set code(f2) {
          Object.defineProperty(this, "code", { configurable: true, enumerable: true, value: f2, writable: true });
        }
        toString() {
          return `${this.name} [${t22}]: ${this.message}`;
        }
      };
    }
    P02("ERR_BUFFER_OUT_OF_BOUNDS", function(t22) {
      return t22 ? `${t22} is outside of buffer bounds` : "Attempt to access memory outside buffer bounds";
    }, RangeError);
    P02("ERR_INVALID_ARG_TYPE", function(t22, e2) {
      return `The "${t22}" argument must be of type number. Received type ${typeof e2}`;
    }, TypeError);
    P02("ERR_OUT_OF_RANGE", function(t22, e2, r2) {
      let o2 = `The value of "${t22}" is out of range.`, f2 = r2;
      return Number.isInteger(r2) && Math.abs(r2) > 2 ** 32 ? f2 = Fd(String(r2)) : typeof r2 == "bigint" && (f2 = String(r2), (r2 > BigInt(2) ** BigInt(32) || r2 < -(BigInt(2) ** BigInt(32))) && (f2 = Fd(f2)), f2 += "n"), o2 += ` It must be ${e2}. Received ${f2}`, o2;
    }, RangeError);
    function Fd(t22) {
      let e2 = "", r2 = t22.length, o2 = t22[0] === "-" ? 1 : 0;
      for (;r2 >= o2 + 4; r2 -= 3)
        e2 = `_${t22.slice(r2 - 3, r2)}${e2}`;
      return `${t22.slice(0, r2)}${e2}`;
    }
    function Kw(t22, e2, r2) {
      Yn(e2, "offset"), (t22[e2] === undefined || t22[e2 + r2] === undefined) && Vf(e2, t22.length - (r2 + 1));
    }
    function Yd(t22, e2, r2, o2, f2, p2) {
      if (t22 > r2 || t22 < e2) {
        let m32 = typeof e2 == "bigint" ? "n" : "", y22;
        throw p2 > 3 ? e2 === 0 || e2 === BigInt(0) ? y22 = `>= 0${m32} and < 2${m32} ** ${(p2 + 1) * 8}${m32}` : y22 = `>= -(2${m32} ** ${(p2 + 1) * 8 - 1}${m32}) and < 2 ** ${(p2 + 1) * 8 - 1}${m32}` : y22 = `>= ${e2}${m32} and <= ${r2}${m32}`, new $n.ERR_OUT_OF_RANGE("value", y22, t22);
      }
      Kw(o2, f2, p2);
    }
    function Yn(t22, e2) {
      if (typeof t22 != "number")
        throw new $n.ERR_INVALID_ARG_TYPE(e2, "number", t22);
    }
    function Vf(t22, e2, r2) {
      throw Math.floor(t22) !== t22 ? (Yn(t22, r2), new $n.ERR_OUT_OF_RANGE(r2 || "offset", "an integer", t22)) : e2 < 0 ? new $n.ERR_BUFFER_OUT_OF_BOUNDS : new $n.ERR_OUT_OF_RANGE(r2 || "offset", `>= ${r2 ? 1 : 0} and <= ${e2}`, t22);
    }
    var jw = /[^+/0-9A-Za-z-_]/g;
    function Zw(t22) {
      if (t22 = t22.split("=")[0], t22 = t22.trim().replace(jw, ""), t22.length < 2)
        return "";
      for (;t22.length % 4 !== 0; )
        t22 = t22 + "=";
      return t22;
    }
    function L02(t22, e2) {
      e2 = e2 || 1 / 0;
      let r2, o2 = t22.length, f2 = null, p2 = [];
      for (let m32 = 0;m32 < o2; ++m32) {
        if (r2 = t22.charCodeAt(m32), r2 > 55295 && r2 < 57344) {
          if (!f2) {
            if (r2 > 56319) {
              (e2 -= 3) > -1 && p2.push(239, 191, 189);
              continue;
            } else if (m32 + 1 === o2) {
              (e2 -= 3) > -1 && p2.push(239, 191, 189);
              continue;
            }
            f2 = r2;
            continue;
          }
          if (r2 < 56320) {
            (e2 -= 3) > -1 && p2.push(239, 191, 189), f2 = r2;
            continue;
          }
          r2 = (f2 - 55296 << 10 | r2 - 56320) + 65536;
        } else
          f2 && (e2 -= 3) > -1 && p2.push(239, 191, 189);
        if (f2 = null, r2 < 128) {
          if ((e2 -= 1) < 0)
            break;
          p2.push(r2);
        } else if (r2 < 2048) {
          if ((e2 -= 2) < 0)
            break;
          p2.push(r2 >> 6 | 192, r2 & 63 | 128);
        } else if (r2 < 65536) {
          if ((e2 -= 3) < 0)
            break;
          p2.push(r2 >> 12 | 224, r2 >> 6 & 63 | 128, r2 & 63 | 128);
        } else if (r2 < 1114112) {
          if ((e2 -= 4) < 0)
            break;
          p2.push(r2 >> 18 | 240, r2 >> 12 & 63 | 128, r2 >> 6 & 63 | 128, r2 & 63 | 128);
        } else
          throw new Error("Invalid code point");
      }
      return p2;
    }
    function Vw(t22) {
      let e2 = [];
      for (let r2 = 0;r2 < t22.length; ++r2)
        e2.push(t22.charCodeAt(r2) & 255);
      return e2;
    }
    function $w(t22, e2) {
      let r2, o2, f2, p2 = [];
      for (let m32 = 0;m32 < t22.length && !((e2 -= 2) < 0); ++m32)
        r2 = t22.charCodeAt(m32), o2 = r2 >> 8, f2 = r2 % 256, p2.push(f2), p2.push(o2);
      return p2;
    }
    function Xd(t22) {
      return I02.toByteArray(Zw(t22));
    }
    function to(t22, e2, r2, o2) {
      let f2;
      for (f2 = 0;f2 < o2 && !(f2 + r2 >= e2.length || f2 >= t22.length); ++f2)
        e2[f2 + r2] = t22[f2];
      return f2;
    }
    function Zr(t22, e2) {
      return t22 instanceof e2 || t22 != null && t22.constructor != null && t22.constructor.name != null && t22.constructor.name === e2.name;
    }
    function C02(t22) {
      return t22 !== t22;
    }
    var Gw = function() {
      let t22 = "0123456789abcdef", e2 = new Array(256);
      for (let r2 = 0;r2 < 16; ++r2) {
        let o2 = r2 * 16;
        for (let f2 = 0;f2 < 16; ++f2)
          e2[o2 + f2] = t22[r2] + t22[f2];
      }
      return e2;
    }();
    function Ti(t22) {
      return typeof BigInt > "u" ? Yw : t22;
    }
    function Yw() {
      throw new Error("BigInt not supported");
    }
  });
  Te = T2((O0, Qd) => {
    var ro = Ut(), Vr = ro.Buffer;
    function Jd(t22, e2) {
      for (var r2 in t22)
        e2[r2] = t22[r2];
    }
    Vr.from && Vr.alloc && Vr.allocUnsafe && Vr.allocUnsafeSlow ? Qd.exports = ro : (Jd(ro, O0), O0.Buffer = an);
    function an(t22, e2, r2) {
      return Vr(t22, e2, r2);
    }
    an.prototype = Object.create(Vr.prototype);
    Jd(Vr, an);
    an.from = function(t22, e2, r2) {
      if (typeof t22 == "number")
        throw new TypeError("Argument must not be a number");
      return Vr(t22, e2, r2);
    };
    an.alloc = function(t22, e2, r2) {
      if (typeof t22 != "number")
        throw new TypeError("Argument must be a number");
      var o2 = Vr(t22);
      return e2 !== undefined ? typeof r2 == "string" ? o2.fill(e2, r2) : o2.fill(e2) : o2.fill(0), o2;
    };
    an.allocUnsafe = function(t22) {
      if (typeof t22 != "number")
        throw new TypeError("Argument must be a number");
      return Vr(t22);
    };
    an.allocUnsafeSlow = function(t22) {
      if (typeof t22 != "number")
        throw new TypeError("Argument must be a number");
      return ro.SlowBuffer(t22);
    };
  });
  on = T2((Gq, U02) => {
    var F02 = 65536, Xw = 4294967295;
    function Jw() {
      throw new Error(`Secure random number generation is not supported by this browser.
Use Chrome, Firefox or Internet Explorer 11`);
    }
    var Qw = Te().Buffer, io = global.crypto || global.msCrypto;
    io && io.getRandomValues ? U02.exports = e6 : U02.exports = Jw;
    function e6(t22, e2) {
      if (t22 > Xw)
        throw new RangeError("requested too many random bytes");
      var r2 = Qw.allocUnsafe(t22);
      if (t22 > 0)
        if (t22 > F02)
          for (var o2 = 0;o2 < t22; o2 += F02)
            io.getRandomValues(r2.slice(o2, o2 + F02));
        else
          io.getRandomValues(r2);
      return typeof e2 == "function" ? process.nextTick(function() {
        e2(null, r2);
      }) : r2;
    }
  });
  Ie = T2((Yq, z02) => {
    typeof Object.create == "function" ? z02.exports = function(e2, r2) {
      r2 && (e2.super_ = r2, e2.prototype = Object.create(r2.prototype, { constructor: { value: e2, enumerable: false, writable: true, configurable: true } }));
    } : z02.exports = function(e2, r2) {
      if (r2) {
        e2.super_ = r2;
        var o2 = function() {
        };
        o2.prototype = r2.prototype, e2.prototype = new o2, e2.prototype.constructor = e2;
      }
    };
  });
  ki = T2((Xq, H02) => {
    var Jn = typeof Reflect == "object" ? Reflect : null, ec = Jn && typeof Jn.apply == "function" ? Jn.apply : function(e2, r2, o2) {
      return Function.prototype.apply.call(e2, r2, o2);
    }, no;
    Jn && typeof Jn.ownKeys == "function" ? no = Jn.ownKeys : Object.getOwnPropertySymbols ? no = function(e2) {
      return Object.getOwnPropertyNames(e2).concat(Object.getOwnPropertySymbols(e2));
    } : no = function(e2) {
      return Object.getOwnPropertyNames(e2);
    };
    function t6(t22) {
      console && console.warn && console.warn(t22);
    }
    var rc = Number.isNaN || function(e2) {
      return e2 !== e2;
    };
    function Fe() {
      Fe.init.call(this);
    }
    H02.exports = Fe;
    H02.exports.once = f6;
    Fe.EventEmitter = Fe;
    Fe.prototype._events = undefined;
    Fe.prototype._eventsCount = 0;
    Fe.prototype._maxListeners = undefined;
    var tc = 10;
    function fo(t22) {
      if (typeof t22 != "function")
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof t22);
    }
    Object.defineProperty(Fe, "defaultMaxListeners", { enumerable: true, get: function() {
      return tc;
    }, set: function(t22) {
      if (typeof t22 != "number" || t22 < 0 || rc(t22))
        throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + t22 + ".");
      tc = t22;
    } });
    Fe.init = function() {
      (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) && (this._events = Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || undefined;
    };
    Fe.prototype.setMaxListeners = function(e2) {
      if (typeof e2 != "number" || e2 < 0 || rc(e2))
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e2 + ".");
      return this._maxListeners = e2, this;
    };
    function ic(t22) {
      return t22._maxListeners === undefined ? Fe.defaultMaxListeners : t22._maxListeners;
    }
    Fe.prototype.getMaxListeners = function() {
      return ic(this);
    };
    Fe.prototype.emit = function(e2) {
      for (var r2 = [], o2 = 1;o2 < arguments.length; o2++)
        r2.push(arguments[o2]);
      var f2 = e2 === "error", p2 = this._events;
      if (p2 !== undefined)
        f2 = f2 && p2.error === undefined;
      else if (!f2)
        return false;
      if (f2) {
        var m32;
        if (r2.length > 0 && (m32 = r2[0]), m32 instanceof Error)
          throw m32;
        var y22 = new Error("Unhandled error." + (m32 ? " (" + m32.message + ")" : ""));
        throw y22.context = m32, y22;
      }
      var M3 = p2[e2];
      if (M3 === undefined)
        return false;
      if (typeof M3 == "function")
        ec(M3, this, r2);
      else
        for (var x5 = M3.length, S2 = sc(M3, x5), o2 = 0;o2 < x5; ++o2)
          ec(S2[o2], this, r2);
      return true;
    };
    function nc(t22, e2, r2, o2) {
      var f2, p2, m32;
      if (fo(r2), p2 = t22._events, p2 === undefined ? (p2 = t22._events = Object.create(null), t22._eventsCount = 0) : (p2.newListener !== undefined && (t22.emit("newListener", e2, r2.listener ? r2.listener : r2), p2 = t22._events), m32 = p2[e2]), m32 === undefined)
        m32 = p2[e2] = r2, ++t22._eventsCount;
      else if (typeof m32 == "function" ? m32 = p2[e2] = o2 ? [r2, m32] : [m32, r2] : o2 ? m32.unshift(r2) : m32.push(r2), f2 = ic(t22), f2 > 0 && m32.length > f2 && !m32.warned) {
        m32.warned = true;
        var y22 = new Error("Possible EventEmitter memory leak detected. " + m32.length + " " + String(e2) + " listeners added. Use emitter.setMaxListeners() to increase limit");
        y22.name = "MaxListenersExceededWarning", y22.emitter = t22, y22.type = e2, y22.count = m32.length, t6(y22);
      }
      return t22;
    }
    Fe.prototype.addListener = function(e2, r2) {
      return nc(this, e2, r2, false);
    };
    Fe.prototype.on = Fe.prototype.addListener;
    Fe.prototype.prependListener = function(e2, r2) {
      return nc(this, e2, r2, true);
    };
    function r6() {
      if (!this.fired)
        return this.target.removeListener(this.type, this.wrapFn), this.fired = true, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
    }
    function fc(t22, e2, r2) {
      var o2 = { fired: false, wrapFn: undefined, target: t22, type: e2, listener: r2 }, f2 = r6.bind(o2);
      return f2.listener = r2, o2.wrapFn = f2, f2;
    }
    Fe.prototype.once = function(e2, r2) {
      return fo(r2), this.on(e2, fc(this, e2, r2)), this;
    };
    Fe.prototype.prependOnceListener = function(e2, r2) {
      return fo(r2), this.prependListener(e2, fc(this, e2, r2)), this;
    };
    Fe.prototype.removeListener = function(e2, r2) {
      var o2, f2, p2, m32, y22;
      if (fo(r2), f2 = this._events, f2 === undefined)
        return this;
      if (o2 = f2[e2], o2 === undefined)
        return this;
      if (o2 === r2 || o2.listener === r2)
        --this._eventsCount === 0 ? this._events = Object.create(null) : (delete f2[e2], f2.removeListener && this.emit("removeListener", e2, o2.listener || r2));
      else if (typeof o2 != "function") {
        for (p2 = -1, m32 = o2.length - 1;m32 >= 0; m32--)
          if (o2[m32] === r2 || o2[m32].listener === r2) {
            y22 = o2[m32].listener, p2 = m32;
            break;
          }
        if (p2 < 0)
          return this;
        p2 === 0 ? o2.shift() : i6(o2, p2), o2.length === 1 && (f2[e2] = o2[0]), f2.removeListener !== undefined && this.emit("removeListener", e2, y22 || r2);
      }
      return this;
    };
    Fe.prototype.off = Fe.prototype.removeListener;
    Fe.prototype.removeAllListeners = function(e2) {
      var r2, o2, f2;
      if (o2 = this._events, o2 === undefined)
        return this;
      if (o2.removeListener === undefined)
        return arguments.length === 0 ? (this._events = Object.create(null), this._eventsCount = 0) : o2[e2] !== undefined && (--this._eventsCount === 0 ? this._events = Object.create(null) : delete o2[e2]), this;
      if (arguments.length === 0) {
        var p2 = Object.keys(o2), m32;
        for (f2 = 0;f2 < p2.length; ++f2)
          m32 = p2[f2], m32 !== "removeListener" && this.removeAllListeners(m32);
        return this.removeAllListeners("removeListener"), this._events = Object.create(null), this._eventsCount = 0, this;
      }
      if (r2 = o2[e2], typeof r2 == "function")
        this.removeListener(e2, r2);
      else if (r2 !== undefined)
        for (f2 = r2.length - 1;f2 >= 0; f2--)
          this.removeListener(e2, r2[f2]);
      return this;
    };
    function ac(t22, e2, r2) {
      var o2 = t22._events;
      if (o2 === undefined)
        return [];
      var f2 = o2[e2];
      return f2 === undefined ? [] : typeof f2 == "function" ? r2 ? [f2.listener || f2] : [f2] : r2 ? n6(f2) : sc(f2, f2.length);
    }
    Fe.prototype.listeners = function(e2) {
      return ac(this, e2, true);
    };
    Fe.prototype.rawListeners = function(e2) {
      return ac(this, e2, false);
    };
    Fe.listenerCount = function(t22, e2) {
      return typeof t22.listenerCount == "function" ? t22.listenerCount(e2) : oc.call(t22, e2);
    };
    Fe.prototype.listenerCount = oc;
    function oc(t22) {
      var e2 = this._events;
      if (e2 !== undefined) {
        var r2 = e2[t22];
        if (typeof r2 == "function")
          return 1;
        if (r2 !== undefined)
          return r2.length;
      }
      return 0;
    }
    Fe.prototype.eventNames = function() {
      return this._eventsCount > 0 ? no(this._events) : [];
    };
    function sc(t22, e2) {
      for (var r2 = new Array(e2), o2 = 0;o2 < e2; ++o2)
        r2[o2] = t22[o2];
      return r2;
    }
    function i6(t22, e2) {
      for (;e2 + 1 < t22.length; e2++)
        t22[e2] = t22[e2 + 1];
      t22.pop();
    }
    function n6(t22) {
      for (var e2 = new Array(t22.length), r2 = 0;r2 < e2.length; ++r2)
        e2[r2] = t22[r2].listener || t22[r2];
      return e2;
    }
    function f6(t22, e2) {
      return new Promise(function(r2, o2) {
        function f2(m32) {
          t22.removeListener(e2, p2), o2(m32);
        }
        function p2() {
          typeof t22.removeListener == "function" && t22.removeListener("error", f2), r2([].slice.call(arguments));
        }
        hc(t22, e2, p2, { once: true }), e2 !== "error" && a6(t22, f2, { once: true });
      });
    }
    function a6(t22, e2, r2) {
      typeof t22.on == "function" && hc(t22, "error", e2, r2);
    }
    function hc(t22, e2, r2, o2) {
      if (typeof t22.on == "function")
        o2.once ? t22.once(e2, r2) : t22.on(e2, r2);
      else if (typeof t22.addEventListener == "function")
        t22.addEventListener(e2, function f(p2) {
          o2.once && t22.removeEventListener(e2, f), r2(p2);
        });
      else
        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof t22);
    }
  });
  W02 = T2((Jq, uc) => {
    uc.exports = ki().EventEmitter;
  });
  $f = T2(() => {
  });
  pc = T2((tI, cc) => {
    function lc(t22, e2) {
      var r2 = Object.keys(t22);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(t22);
        e2 && (o2 = o2.filter(function(f2) {
          return Object.getOwnPropertyDescriptor(t22, f2).enumerable;
        })), r2.push.apply(r2, o2);
      }
      return r2;
    }
    function o6(t22) {
      for (var e2 = 1;e2 < arguments.length; e2++) {
        var r2 = arguments[e2] != null ? arguments[e2] : {};
        e2 % 2 ? lc(Object(r2), true).forEach(function(o2) {
          s6(t22, o2, r2[o2]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t22, Object.getOwnPropertyDescriptors(r2)) : lc(Object(r2)).forEach(function(o2) {
          Object.defineProperty(t22, o2, Object.getOwnPropertyDescriptor(r2, o2));
        });
      }
      return t22;
    }
    function s6(t22, e2, r2) {
      return e2 in t22 ? Object.defineProperty(t22, e2, { value: r2, enumerable: true, configurable: true, writable: true }) : t22[e2] = r2, t22;
    }
    function h6(t22, e2) {
      if (!(t22 instanceof e2))
        throw new TypeError("Cannot call a class as a function");
    }
    function dc(t22, e2) {
      for (var r2 = 0;r2 < e2.length; r2++) {
        var o2 = e2[r2];
        o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(t22, o2.key, o2);
      }
    }
    function u6(t22, e2, r2) {
      return e2 && dc(t22.prototype, e2), r2 && dc(t22, r2), t22;
    }
    var l6 = Ut(), ao = l6.Buffer, d6 = $f(), K02 = d6.inspect, c6 = K02 && K02.custom || "inspect";
    function p6(t22, e2, r2) {
      ao.prototype.copy.call(t22, e2, r2);
    }
    cc.exports = function() {
      function t22() {
        h6(this, t22), this.head = null, this.tail = null, this.length = 0;
      }
      return u6(t22, [{ key: "push", value: function(r2) {
        var o2 = { data: r2, next: null };
        this.length > 0 ? this.tail.next = o2 : this.head = o2, this.tail = o2, ++this.length;
      } }, { key: "unshift", value: function(r2) {
        var o2 = { data: r2, next: this.head };
        this.length === 0 && (this.tail = o2), this.head = o2, ++this.length;
      } }, { key: "shift", value: function() {
        if (this.length !== 0) {
          var r2 = this.head.data;
          return this.length === 1 ? this.head = this.tail = null : this.head = this.head.next, --this.length, r2;
        }
      } }, { key: "clear", value: function() {
        this.head = this.tail = null, this.length = 0;
      } }, { key: "join", value: function(r2) {
        if (this.length === 0)
          return "";
        for (var o2 = this.head, f2 = "" + o2.data;o2 = o2.next; )
          f2 += r2 + o2.data;
        return f2;
      } }, { key: "concat", value: function(r2) {
        if (this.length === 0)
          return ao.alloc(0);
        for (var o2 = ao.allocUnsafe(r2 >>> 0), f2 = this.head, p2 = 0;f2; )
          p6(f2.data, o2, p2), p2 += f2.data.length, f2 = f2.next;
        return o2;
      } }, { key: "consume", value: function(r2, o2) {
        var f2;
        return r2 < this.head.data.length ? (f2 = this.head.data.slice(0, r2), this.head.data = this.head.data.slice(r2)) : r2 === this.head.data.length ? f2 = this.shift() : f2 = o2 ? this._getString(r2) : this._getBuffer(r2), f2;
      } }, { key: "first", value: function() {
        return this.head.data;
      } }, { key: "_getString", value: function(r2) {
        var o2 = this.head, f2 = 1, p2 = o2.data;
        for (r2 -= p2.length;o2 = o2.next; ) {
          var m32 = o2.data, y22 = r2 > m32.length ? m32.length : r2;
          if (y22 === m32.length ? p2 += m32 : p2 += m32.slice(0, r2), r2 -= y22, r2 === 0) {
            y22 === m32.length ? (++f2, o2.next ? this.head = o2.next : this.head = this.tail = null) : (this.head = o2, o2.data = m32.slice(y22));
            break;
          }
          ++f2;
        }
        return this.length -= f2, p2;
      } }, { key: "_getBuffer", value: function(r2) {
        var o2 = ao.allocUnsafe(r2), f2 = this.head, p2 = 1;
        for (f2.data.copy(o2), r2 -= f2.data.length;f2 = f2.next; ) {
          var m32 = f2.data, y22 = r2 > m32.length ? m32.length : r2;
          if (m32.copy(o2, o2.length - r2, 0, y22), r2 -= y22, r2 === 0) {
            y22 === m32.length ? (++p2, f2.next ? this.head = f2.next : this.head = this.tail = null) : (this.head = f2, f2.data = m32.slice(y22));
            break;
          }
          ++p2;
        }
        return this.length -= p2, o2;
      } }, { key: c6, value: function(r2, o2) {
        return K02(this, o6({}, o2, { depth: 0, customInspect: false }));
      } }]), t22;
    }();
  });
  Z02 = T2((rI, bc) => {
    function v6(t22, e2) {
      var r2 = this, o2 = this._readableState && this._readableState.destroyed, f2 = this._writableState && this._writableState.destroyed;
      return o2 || f2 ? (e2 ? e2(t22) : t22 && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = true, process.nextTick(j02, this, t22)) : process.nextTick(j02, this, t22)), this) : (this._readableState && (this._readableState.destroyed = true), this._writableState && (this._writableState.destroyed = true), this._destroy(t22 || null, function(p2) {
        !e2 && p2 ? r2._writableState ? r2._writableState.errorEmitted ? process.nextTick(oo, r2) : (r2._writableState.errorEmitted = true, process.nextTick(vc, r2, p2)) : process.nextTick(vc, r2, p2) : e2 ? (process.nextTick(oo, r2), e2(p2)) : process.nextTick(oo, r2);
      }), this);
    }
    function vc(t22, e2) {
      j02(t22, e2), oo(t22);
    }
    function oo(t22) {
      t22._writableState && !t22._writableState.emitClose || t22._readableState && !t22._readableState.emitClose || t22.emit("close");
    }
    function b6() {
      this._readableState && (this._readableState.destroyed = false, this._readableState.reading = false, this._readableState.ended = false, this._readableState.endEmitted = false), this._writableState && (this._writableState.destroyed = false, this._writableState.ended = false, this._writableState.ending = false, this._writableState.finalCalled = false, this._writableState.prefinished = false, this._writableState.finished = false, this._writableState.errorEmitted = false);
    }
    function j02(t22, e2) {
      t22.emit("error", e2);
    }
    function m6(t22, e2) {
      var { _readableState: r2, _writableState: o2 } = t22;
      r2 && r2.autoDestroy || o2 && o2.autoDestroy ? t22.destroy(e2) : t22.emit("error", e2);
    }
    bc.exports = { destroy: v6, undestroy: b6, errorOrDestroy: m6 };
  });
  sn = T2((iI, yc) => {
    function g6(t22, e2) {
      t22.prototype = Object.create(e2.prototype), t22.prototype.constructor = t22, t22.__proto__ = e2;
    }
    var gc = {};
    function dr(t22, e2, r2) {
      r2 || (r2 = Error);
      function o2(p2, m32, y22) {
        return typeof e2 == "string" ? e2 : e2(p2, m32, y22);
      }
      var f2 = function(p2) {
        g6(m32, p2);
        function m32(y22, M3, x5) {
          return p2.call(this, o2(y22, M3, x5)) || this;
        }
        return m32;
      }(r2);
      f2.prototype.name = r2.name, f2.prototype.code = t22, gc[t22] = f2;
    }
    function mc(t22, e2) {
      if (Array.isArray(t22)) {
        var r2 = t22.length;
        return t22 = t22.map(function(o2) {
          return String(o2);
        }), r2 > 2 ? "one of ".concat(e2, " ").concat(t22.slice(0, r2 - 1).join(", "), ", or ") + t22[r2 - 1] : r2 === 2 ? "one of ".concat(e2, " ").concat(t22[0], " or ").concat(t22[1]) : "of ".concat(e2, " ").concat(t22[0]);
      } else
        return "of ".concat(e2, " ").concat(String(t22));
    }
    function y6(t22, e2, r2) {
      return t22.substr(!r2 || r2 < 0 ? 0 : +r2, e2.length) === e2;
    }
    function w6(t22, e2, r2) {
      return (r2 === undefined || r2 > t22.length) && (r2 = t22.length), t22.substring(r2 - e2.length, r2) === e2;
    }
    function M6(t22, e2, r2) {
      return typeof r2 != "number" && (r2 = 0), r2 + e2.length > t22.length ? false : t22.indexOf(e2, r2) !== -1;
    }
    dr("ERR_INVALID_OPT_VALUE", function(t22, e2) {
      return 'The value "' + e2 + '" is invalid for option "' + t22 + '"';
    }, TypeError);
    dr("ERR_INVALID_ARG_TYPE", function(t22, e2, r2) {
      var o2;
      typeof e2 == "string" && y6(e2, "not ") ? (o2 = "must not be", e2 = e2.replace(/^not /, "")) : o2 = "must be";
      var f2;
      if (w6(t22, " argument"))
        f2 = "The ".concat(t22, " ").concat(o2, " ").concat(mc(e2, "type"));
      else {
        var p2 = M6(t22, ".") ? "property" : "argument";
        f2 = 'The "'.concat(t22, '" ').concat(p2, " ").concat(o2, " ").concat(mc(e2, "type"));
      }
      return f2 += ". Received type ".concat(typeof r2), f2;
    }, TypeError);
    dr("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
    dr("ERR_METHOD_NOT_IMPLEMENTED", function(t22) {
      return "The " + t22 + " method is not implemented";
    });
    dr("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
    dr("ERR_STREAM_DESTROYED", function(t22) {
      return "Cannot call " + t22 + " after a stream was destroyed";
    });
    dr("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
    dr("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
    dr("ERR_STREAM_WRITE_AFTER_END", "write after end");
    dr("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
    dr("ERR_UNKNOWN_ENCODING", function(t22) {
      return "Unknown encoding: " + t22;
    }, TypeError);
    dr("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
    yc.exports.codes = gc;
  });
  V02 = T2((nI, wc) => {
    var _6 = sn().codes.ERR_INVALID_OPT_VALUE;
    function x6(t22, e2, r2) {
      return t22.highWaterMark != null ? t22.highWaterMark : e2 ? t22[r2] : null;
    }
    function S6(t22, e2, r2, o2) {
      var f2 = x6(e2, o2, r2);
      if (f2 != null) {
        if (!(isFinite(f2) && Math.floor(f2) === f2) || f2 < 0) {
          var p2 = o2 ? r2 : "highWaterMark";
          throw new _6(p2, f2);
        }
        return Math.floor(f2);
      }
      return t22.objectMode ? 16 : 16 * 1024;
    }
    wc.exports = { getHighWaterMark: S6 };
  });
  G02 = T2((fI, Mc) => {
    Mc.exports = E6;
    function E6(t22, e2) {
      if ($02("noDeprecation"))
        return t22;
      var r2 = false;
      function o2() {
        if (!r2) {
          if ($02("throwDeprecation"))
            throw new Error(e2);
          $02("traceDeprecation") ? console.trace(e2) : console.warn(e2), r2 = true;
        }
        return t22.apply(this, arguments);
      }
      return o2;
    }
    function $02(t22) {
      try {
        if (!global.localStorage)
          return false;
      } catch {
        return false;
      }
      var e2 = global.localStorage[t22];
      return e2 == null ? false : String(e2).toLowerCase() === "true";
    }
  });
  J02 = T2((aI, Rc) => {
    Rc.exports = ht;
    function xc(t22) {
      var e2 = this;
      this.next = null, this.entry = null, this.finish = function() {
        J6(e2, t22);
      };
    }
    var Qn;
    ht.WritableState = Yf;
    var A6 = { deprecate: G02() }, Sc = W02(), ho = Ut().Buffer, R6 = global.Uint8Array || function() {
    };
    function B6(t22) {
      return ho.from(t22);
    }
    function q6(t22) {
      return ho.isBuffer(t22) || t22 instanceof R6;
    }
    var X02 = Z02(), I6 = V02(), T6 = I6.getHighWaterMark, Li = sn().codes, k6 = Li.ERR_INVALID_ARG_TYPE, L6 = Li.ERR_METHOD_NOT_IMPLEMENTED, N6 = Li.ERR_MULTIPLE_CALLBACK, D6 = Li.ERR_STREAM_CANNOT_PIPE, P6 = Li.ERR_STREAM_DESTROYED, C6 = Li.ERR_STREAM_NULL_VALUES, O6 = Li.ERR_STREAM_WRITE_AFTER_END, F6 = Li.ERR_UNKNOWN_ENCODING, ef = X02.errorOrDestroy;
    Ie()(ht, Sc);
    function U6() {
    }
    function Yf(t22, e2, r2) {
      Qn = Qn || hn(), t22 = t22 || {}, typeof r2 != "boolean" && (r2 = e2 instanceof Qn), this.objectMode = !!t22.objectMode, r2 && (this.objectMode = this.objectMode || !!t22.writableObjectMode), this.highWaterMark = T6(this, t22, "writableHighWaterMark", r2), this.finalCalled = false, this.needDrain = false, this.ending = false, this.ended = false, this.finished = false, this.destroyed = false;
      var o2 = t22.decodeStrings === false;
      this.decodeStrings = !o2, this.defaultEncoding = t22.defaultEncoding || "utf8", this.length = 0, this.writing = false, this.corked = 0, this.sync = true, this.bufferProcessing = false, this.onwrite = function(f2) {
        V6(e2, f2);
      }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = false, this.errorEmitted = false, this.emitClose = t22.emitClose !== false, this.autoDestroy = !!t22.autoDestroy, this.bufferedRequestCount = 0, this.corkedRequestsFree = new xc(this);
    }
    Yf.prototype.getBuffer = function() {
      for (var e2 = this.bufferedRequest, r2 = [];e2; )
        r2.push(e2), e2 = e2.next;
      return r2;
    };
    (function() {
      try {
        Object.defineProperty(Yf.prototype, "buffer", { get: A6.deprecate(function() {
          return this.getBuffer();
        }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003") });
      } catch {
      }
    })();
    var so;
    typeof Symbol == "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] == "function" ? (so = Function.prototype[Symbol.hasInstance], Object.defineProperty(ht, Symbol.hasInstance, { value: function(e2) {
      return so.call(this, e2) ? true : this !== ht ? false : e2 && e2._writableState instanceof Yf;
    } })) : so = function(e2) {
      return e2 instanceof this;
    };
    function ht(t22) {
      Qn = Qn || hn();
      var e2 = this instanceof Qn;
      if (!e2 && !so.call(ht, this))
        return new ht(t22);
      this._writableState = new Yf(t22, this, e2), this.writable = true, t22 && (typeof t22.write == "function" && (this._write = t22.write), typeof t22.writev == "function" && (this._writev = t22.writev), typeof t22.destroy == "function" && (this._destroy = t22.destroy), typeof t22.final == "function" && (this._final = t22.final)), Sc.call(this);
    }
    ht.prototype.pipe = function() {
      ef(this, new D6);
    };
    function z6(t22, e2) {
      var r2 = new O6;
      ef(t22, r2), process.nextTick(e2, r2);
    }
    function H6(t22, e2, r2, o2) {
      var f2;
      return r2 === null ? f2 = new C6 : typeof r2 != "string" && !e2.objectMode && (f2 = new k6("chunk", ["string", "Buffer"], r2)), f2 ? (ef(t22, f2), process.nextTick(o2, f2), false) : true;
    }
    ht.prototype.write = function(t22, e2, r2) {
      var o2 = this._writableState, f2 = false, p2 = !o2.objectMode && q6(t22);
      return p2 && !ho.isBuffer(t22) && (t22 = B6(t22)), typeof e2 == "function" && (r2 = e2, e2 = null), p2 ? e2 = "buffer" : e2 || (e2 = o2.defaultEncoding), typeof r2 != "function" && (r2 = U6), o2.ending ? z6(this, r2) : (p2 || H6(this, o2, t22, r2)) && (o2.pendingcb++, f2 = K6(this, o2, p2, t22, e2, r2)), f2;
    };
    ht.prototype.cork = function() {
      this._writableState.corked++;
    };
    ht.prototype.uncork = function() {
      var t22 = this._writableState;
      t22.corked && (t22.corked--, !t22.writing && !t22.corked && !t22.bufferProcessing && t22.bufferedRequest && Ec(this, t22));
    };
    ht.prototype.setDefaultEncoding = function(e2) {
      if (typeof e2 == "string" && (e2 = e2.toLowerCase()), !(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((e2 + "").toLowerCase()) > -1))
        throw new F6(e2);
      return this._writableState.defaultEncoding = e2, this;
    };
    Object.defineProperty(ht.prototype, "writableBuffer", { enumerable: false, get: function() {
      return this._writableState && this._writableState.getBuffer();
    } });
    function W6(t22, e2, r2) {
      return !t22.objectMode && t22.decodeStrings !== false && typeof e2 == "string" && (e2 = ho.from(e2, r2)), e2;
    }
    Object.defineProperty(ht.prototype, "writableHighWaterMark", { enumerable: false, get: function() {
      return this._writableState.highWaterMark;
    } });
    function K6(t22, e2, r2, o2, f2, p2) {
      if (!r2) {
        var m32 = W6(e2, o2, f2);
        o2 !== m32 && (r2 = true, f2 = "buffer", o2 = m32);
      }
      var y22 = e2.objectMode ? 1 : o2.length;
      e2.length += y22;
      var M3 = e2.length < e2.highWaterMark;
      if (M3 || (e2.needDrain = true), e2.writing || e2.corked) {
        var x5 = e2.lastBufferedRequest;
        e2.lastBufferedRequest = { chunk: o2, encoding: f2, isBuf: r2, callback: p2, next: null }, x5 ? x5.next = e2.lastBufferedRequest : e2.bufferedRequest = e2.lastBufferedRequest, e2.bufferedRequestCount += 1;
      } else
        Y02(t22, e2, false, y22, o2, f2, p2);
      return M3;
    }
    function Y02(t22, e2, r2, o2, f2, p2, m32) {
      e2.writelen = o2, e2.writecb = m32, e2.writing = true, e2.sync = true, e2.destroyed ? e2.onwrite(new P6("write")) : r2 ? t22._writev(f2, e2.onwrite) : t22._write(f2, p2, e2.onwrite), e2.sync = false;
    }
    function j6(t22, e2, r2, o2, f2) {
      --e2.pendingcb, r2 ? (process.nextTick(f2, o2), process.nextTick(Gf, t22, e2), t22._writableState.errorEmitted = true, ef(t22, o2)) : (f2(o2), t22._writableState.errorEmitted = true, ef(t22, o2), Gf(t22, e2));
    }
    function Z6(t22) {
      t22.writing = false, t22.writecb = null, t22.length -= t22.writelen, t22.writelen = 0;
    }
    function V6(t22, e2) {
      var r2 = t22._writableState, o2 = r2.sync, f2 = r2.writecb;
      if (typeof f2 != "function")
        throw new N6;
      if (Z6(r2), e2)
        j6(t22, r2, o2, e2, f2);
      else {
        var p2 = Ac(r2) || t22.destroyed;
        !p2 && !r2.corked && !r2.bufferProcessing && r2.bufferedRequest && Ec(t22, r2), o2 ? process.nextTick(_c, t22, r2, p2, f2) : _c(t22, r2, p2, f2);
      }
    }
    function _c(t22, e2, r2, o2) {
      r2 || $6(t22, e2), e2.pendingcb--, o2(), Gf(t22, e2);
    }
    function $6(t22, e2) {
      e2.length === 0 && e2.needDrain && (e2.needDrain = false, t22.emit("drain"));
    }
    function Ec(t22, e2) {
      e2.bufferProcessing = true;
      var r2 = e2.bufferedRequest;
      if (t22._writev && r2 && r2.next) {
        var o2 = e2.bufferedRequestCount, f2 = new Array(o2), p2 = e2.corkedRequestsFree;
        p2.entry = r2;
        for (var m32 = 0, y22 = true;r2; )
          f2[m32] = r2, r2.isBuf || (y22 = false), r2 = r2.next, m32 += 1;
        f2.allBuffers = y22, Y02(t22, e2, true, e2.length, f2, "", p2.finish), e2.pendingcb++, e2.lastBufferedRequest = null, p2.next ? (e2.corkedRequestsFree = p2.next, p2.next = null) : e2.corkedRequestsFree = new xc(e2), e2.bufferedRequestCount = 0;
      } else {
        for (;r2; ) {
          var { chunk: M3, encoding: x5, callback: S2 } = r2, E4 = e2.objectMode ? 1 : M3.length;
          if (Y02(t22, e2, false, E4, M3, x5, S2), r2 = r2.next, e2.bufferedRequestCount--, e2.writing)
            break;
        }
        r2 === null && (e2.lastBufferedRequest = null);
      }
      e2.bufferedRequest = r2, e2.bufferProcessing = false;
    }
    ht.prototype._write = function(t22, e2, r2) {
      r2(new L6("_write()"));
    };
    ht.prototype._writev = null;
    ht.prototype.end = function(t22, e2, r2) {
      var o2 = this._writableState;
      return typeof t22 == "function" ? (r2 = t22, t22 = null, e2 = null) : typeof e2 == "function" && (r2 = e2, e2 = null), t22 != null && this.write(t22, e2), o2.corked && (o2.corked = 1, this.uncork()), o2.ending || X6(this, o2, r2), this;
    };
    Object.defineProperty(ht.prototype, "writableLength", { enumerable: false, get: function() {
      return this._writableState.length;
    } });
    function Ac(t22) {
      return t22.ending && t22.length === 0 && t22.bufferedRequest === null && !t22.finished && !t22.writing;
    }
    function G6(t22, e2) {
      t22._final(function(r2) {
        e2.pendingcb--, r2 && ef(t22, r2), e2.prefinished = true, t22.emit("prefinish"), Gf(t22, e2);
      });
    }
    function Y6(t22, e2) {
      !e2.prefinished && !e2.finalCalled && (typeof t22._final == "function" && !e2.destroyed ? (e2.pendingcb++, e2.finalCalled = true, process.nextTick(G6, t22, e2)) : (e2.prefinished = true, t22.emit("prefinish")));
    }
    function Gf(t22, e2) {
      var r2 = Ac(e2);
      if (r2 && (Y6(t22, e2), e2.pendingcb === 0 && (e2.finished = true, t22.emit("finish"), e2.autoDestroy))) {
        var o2 = t22._readableState;
        (!o2 || o2.autoDestroy && o2.endEmitted) && t22.destroy();
      }
      return r2;
    }
    function X6(t22, e2, r2) {
      e2.ending = true, Gf(t22, e2), r2 && (e2.finished ? process.nextTick(r2) : t22.once("finish", r2)), e2.ended = true, t22.writable = false;
    }
    function J6(t22, e2, r2) {
      var o2 = t22.entry;
      for (t22.entry = null;o2; ) {
        var f2 = o2.callback;
        e2.pendingcb--, f2(r2), o2 = o2.next;
      }
      e2.corkedRequestsFree.next = t22;
    }
    Object.defineProperty(ht.prototype, "destroyed", { enumerable: false, get: function() {
      return this._writableState === undefined ? false : this._writableState.destroyed;
    }, set: function(e2) {
      !this._writableState || (this._writableState.destroyed = e2);
    } });
    ht.prototype.destroy = X02.destroy;
    ht.prototype._undestroy = X02.undestroy;
    ht.prototype._destroy = function(t22, e2) {
      e2(t22);
    };
  });
  hn = T2((oI, qc) => {
    var Q6 = Object.keys || function(t22) {
      var e2 = [];
      for (var r2 in t22)
        e2.push(r2);
      return e2;
    };
    qc.exports = $r;
    var Bc = th(), eh = J02();
    Ie()($r, Bc);
    for (Q02 = Q6(eh.prototype), uo = 0;uo < Q02.length; uo++)
      lo = Q02[uo], $r.prototype[lo] || ($r.prototype[lo] = eh.prototype[lo]);
    var Q02, lo, uo;
    function $r(t22) {
      if (!(this instanceof $r))
        return new $r(t22);
      Bc.call(this, t22), eh.call(this, t22), this.allowHalfOpen = true, t22 && (t22.readable === false && (this.readable = false), t22.writable === false && (this.writable = false), t22.allowHalfOpen === false && (this.allowHalfOpen = false, this.once("end", eM)));
    }
    Object.defineProperty($r.prototype, "writableHighWaterMark", { enumerable: false, get: function() {
      return this._writableState.highWaterMark;
    } });
    Object.defineProperty($r.prototype, "writableBuffer", { enumerable: false, get: function() {
      return this._writableState && this._writableState.getBuffer();
    } });
    Object.defineProperty($r.prototype, "writableLength", { enumerable: false, get: function() {
      return this._writableState.length;
    } });
    function eM() {
      this._writableState.ended || process.nextTick(tM, this);
    }
    function tM(t22) {
      t22.end();
    }
    Object.defineProperty($r.prototype, "destroyed", { enumerable: false, get: function() {
      return this._readableState === undefined || this._writableState === undefined ? false : this._readableState.destroyed && this._writableState.destroyed;
    }, set: function(e2) {
      this._readableState === undefined || this._writableState === undefined || (this._readableState.destroyed = e2, this._writableState.destroyed = e2);
    } });
  });
  co = T2((Tc) => {
    var ih = Te().Buffer, Ic = ih.isEncoding || function(t22) {
      switch (t22 = "" + t22, t22 && t22.toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
          return true;
        default:
          return false;
      }
    };
    function rM(t22) {
      if (!t22)
        return "utf8";
      for (var e2;; )
        switch (t22) {
          case "utf8":
          case "utf-8":
            return "utf8";
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return "utf16le";
          case "latin1":
          case "binary":
            return "latin1";
          case "base64":
          case "ascii":
          case "hex":
            return t22;
          default:
            if (e2)
              return;
            t22 = ("" + t22).toLowerCase(), e2 = true;
        }
    }
    function iM(t22) {
      var e2 = rM(t22);
      if (typeof e2 != "string" && (ih.isEncoding === Ic || !Ic(t22)))
        throw new Error("Unknown encoding: " + t22);
      return e2 || t22;
    }
    Tc.StringDecoder = Xf;
    function Xf(t22) {
      this.encoding = iM(t22);
      var e2;
      switch (this.encoding) {
        case "utf16le":
          this.text = hM, this.end = uM, e2 = 4;
          break;
        case "utf8":
          this.fillLast = aM, e2 = 4;
          break;
        case "base64":
          this.text = lM, this.end = dM, e2 = 3;
          break;
        default:
          this.write = cM, this.end = pM;
          return;
      }
      this.lastNeed = 0, this.lastTotal = 0, this.lastChar = ih.allocUnsafe(e2);
    }
    Xf.prototype.write = function(t22) {
      if (t22.length === 0)
        return "";
      var e2, r2;
      if (this.lastNeed) {
        if (e2 = this.fillLast(t22), e2 === undefined)
          return "";
        r2 = this.lastNeed, this.lastNeed = 0;
      } else
        r2 = 0;
      return r2 < t22.length ? e2 ? e2 + this.text(t22, r2) : this.text(t22, r2) : e2 || "";
    };
    Xf.prototype.end = sM;
    Xf.prototype.text = oM;
    Xf.prototype.fillLast = function(t22) {
      if (this.lastNeed <= t22.length)
        return t22.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
      t22.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, t22.length), this.lastNeed -= t22.length;
    };
    function rh(t22) {
      return t22 <= 127 ? 0 : t22 >> 5 === 6 ? 2 : t22 >> 4 === 14 ? 3 : t22 >> 3 === 30 ? 4 : t22 >> 6 === 2 ? -1 : -2;
    }
    function nM(t22, e2, r2) {
      var o2 = e2.length - 1;
      if (o2 < r2)
        return 0;
      var f2 = rh(e2[o2]);
      return f2 >= 0 ? (f2 > 0 && (t22.lastNeed = f2 - 1), f2) : --o2 < r2 || f2 === -2 ? 0 : (f2 = rh(e2[o2]), f2 >= 0 ? (f2 > 0 && (t22.lastNeed = f2 - 2), f2) : --o2 < r2 || f2 === -2 ? 0 : (f2 = rh(e2[o2]), f2 >= 0 ? (f2 > 0 && (f2 === 2 ? f2 = 0 : t22.lastNeed = f2 - 3), f2) : 0));
    }
    function fM(t22, e2, r2) {
      if ((e2[0] & 192) !== 128)
        return t22.lastNeed = 0, "\uFFFD";
      if (t22.lastNeed > 1 && e2.length > 1) {
        if ((e2[1] & 192) !== 128)
          return t22.lastNeed = 1, "\uFFFD";
        if (t22.lastNeed > 2 && e2.length > 2 && (e2[2] & 192) !== 128)
          return t22.lastNeed = 2, "\uFFFD";
      }
    }
    function aM(t22) {
      var e2 = this.lastTotal - this.lastNeed, r2 = fM(this, t22, e2);
      if (r2 !== undefined)
        return r2;
      if (this.lastNeed <= t22.length)
        return t22.copy(this.lastChar, e2, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
      t22.copy(this.lastChar, e2, 0, t22.length), this.lastNeed -= t22.length;
    }
    function oM(t22, e2) {
      var r2 = nM(this, t22, e2);
      if (!this.lastNeed)
        return t22.toString("utf8", e2);
      this.lastTotal = r2;
      var o2 = t22.length - (r2 - this.lastNeed);
      return t22.copy(this.lastChar, 0, o2), t22.toString("utf8", e2, o2);
    }
    function sM(t22) {
      var e2 = t22 && t22.length ? this.write(t22) : "";
      return this.lastNeed ? e2 + "\uFFFD" : e2;
    }
    function hM(t22, e2) {
      if ((t22.length - e2) % 2 === 0) {
        var r2 = t22.toString("utf16le", e2);
        if (r2) {
          var o2 = r2.charCodeAt(r2.length - 1);
          if (o2 >= 55296 && o2 <= 56319)
            return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = t22[t22.length - 2], this.lastChar[1] = t22[t22.length - 1], r2.slice(0, -1);
        }
        return r2;
      }
      return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = t22[t22.length - 1], t22.toString("utf16le", e2, t22.length - 1);
    }
    function uM(t22) {
      var e2 = t22 && t22.length ? this.write(t22) : "";
      if (this.lastNeed) {
        var r2 = this.lastTotal - this.lastNeed;
        return e2 + this.lastChar.toString("utf16le", 0, r2);
      }
      return e2;
    }
    function lM(t22, e2) {
      var r2 = (t22.length - e2) % 3;
      return r2 === 0 ? t22.toString("base64", e2) : (this.lastNeed = 3 - r2, this.lastTotal = 3, r2 === 1 ? this.lastChar[0] = t22[t22.length - 1] : (this.lastChar[0] = t22[t22.length - 2], this.lastChar[1] = t22[t22.length - 1]), t22.toString("base64", e2, t22.length - r2));
    }
    function dM(t22) {
      var e2 = t22 && t22.length ? this.write(t22) : "";
      return this.lastNeed ? e2 + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : e2;
    }
    function cM(t22) {
      return t22.toString(this.encoding);
    }
    function pM(t22) {
      return t22 && t22.length ? this.write(t22) : "";
    }
  });
  Jf = {};
  Ja(Jf, { StringDecoder: () => po.StringDecoder, default: () => po.StringDecoder });
  Qf = R02(() => {
    po = rn(co());
  });
  vo = T2((hI, Nc) => {
    var kc = sn().codes.ERR_STREAM_PREMATURE_CLOSE;
    function vM(t22) {
      var e2 = false;
      return function() {
        if (!e2) {
          e2 = true;
          for (var r2 = arguments.length, o2 = new Array(r2), f2 = 0;f2 < r2; f2++)
            o2[f2] = arguments[f2];
          t22.apply(this, o2);
        }
      };
    }
    function bM() {
    }
    function mM(t22) {
      return t22.setHeader && typeof t22.abort == "function";
    }
    function Lc(t22, e2, r2) {
      if (typeof e2 == "function")
        return Lc(t22, null, e2);
      e2 || (e2 = {}), r2 = vM(r2 || bM);
      var o2 = e2.readable || e2.readable !== false && t22.readable, f2 = e2.writable || e2.writable !== false && t22.writable, p2 = function() {
        t22.writable || y22();
      }, m32 = t22._writableState && t22._writableState.finished, y22 = function() {
        f2 = false, m32 = true, o2 || r2.call(t22);
      }, M3 = t22._readableState && t22._readableState.endEmitted, x5 = function() {
        o2 = false, M3 = true, f2 || r2.call(t22);
      }, S2 = function(L2) {
        r2.call(t22, L2);
      }, E4 = function() {
        var L2;
        if (o2 && !M3)
          return (!t22._readableState || !t22._readableState.ended) && (L2 = new kc), r2.call(t22, L2);
        if (f2 && !m32)
          return (!t22._writableState || !t22._writableState.ended) && (L2 = new kc), r2.call(t22, L2);
      }, B5 = function() {
        t22.req.on("finish", y22);
      };
      return mM(t22) ? (t22.on("complete", y22), t22.on("abort", E4), t22.req ? B5() : t22.on("request", B5)) : f2 && !t22._writableState && (t22.on("end", p2), t22.on("close", p2)), t22.on("end", x5), t22.on("finish", y22), e2.error !== false && t22.on("error", S2), t22.on("close", E4), function() {
        t22.removeListener("complete", y22), t22.removeListener("abort", E4), t22.removeListener("request", B5), t22.req && t22.req.removeListener("finish", y22), t22.removeListener("end", p2), t22.removeListener("close", p2), t22.removeListener("finish", y22), t22.removeListener("end", x5), t22.removeListener("error", S2), t22.removeListener("close", E4);
      };
    }
    Nc.exports = Lc;
  });
  Pc = T2((uI, Dc) => {
    var bo;
    function Ni(t22, e2, r2) {
      return e2 in t22 ? Object.defineProperty(t22, e2, { value: r2, enumerable: true, configurable: true, writable: true }) : t22[e2] = r2, t22;
    }
    var gM = vo(), Di = Symbol("lastResolve"), un = Symbol("lastReject"), ea = Symbol("error"), mo = Symbol("ended"), ln = Symbol("lastPromise"), nh = Symbol("handlePromise"), dn = Symbol("stream");
    function Pi(t22, e2) {
      return { value: t22, done: e2 };
    }
    function yM(t22) {
      var e2 = t22[Di];
      if (e2 !== null) {
        var r2 = t22[dn].read();
        r2 !== null && (t22[ln] = null, t22[Di] = null, t22[un] = null, e2(Pi(r2, false)));
      }
    }
    function wM(t22) {
      process.nextTick(yM, t22);
    }
    function MM(t22, e2) {
      return function(r2, o2) {
        t22.then(function() {
          if (e2[mo]) {
            r2(Pi(undefined, true));
            return;
          }
          e2[nh](r2, o2);
        }, o2);
      };
    }
    var _M = Object.getPrototypeOf(function() {
    }), xM = Object.setPrototypeOf((bo = { get stream() {
      return this[dn];
    }, next: function() {
      var e2 = this, r2 = this[ea];
      if (r2 !== null)
        return Promise.reject(r2);
      if (this[mo])
        return Promise.resolve(Pi(undefined, true));
      if (this[dn].destroyed)
        return new Promise(function(m32, y22) {
          process.nextTick(function() {
            e2[ea] ? y22(e2[ea]) : m32(Pi(undefined, true));
          });
        });
      var o2 = this[ln], f2;
      if (o2)
        f2 = new Promise(MM(o2, this));
      else {
        var p2 = this[dn].read();
        if (p2 !== null)
          return Promise.resolve(Pi(p2, false));
        f2 = new Promise(this[nh]);
      }
      return this[ln] = f2, f2;
    } }, Ni(bo, Symbol.asyncIterator, function() {
      return this;
    }), Ni(bo, "return", function() {
      var e2 = this;
      return new Promise(function(r2, o2) {
        e2[dn].destroy(null, function(f2) {
          if (f2) {
            o2(f2);
            return;
          }
          r2(Pi(undefined, true));
        });
      });
    }), bo), _M), SM = function(e2) {
      var r2, o2 = Object.create(xM, (r2 = {}, Ni(r2, dn, { value: e2, writable: true }), Ni(r2, Di, { value: null, writable: true }), Ni(r2, un, { value: null, writable: true }), Ni(r2, ea, { value: null, writable: true }), Ni(r2, mo, { value: e2._readableState.endEmitted, writable: true }), Ni(r2, nh, { value: function(p2, m32) {
        var y22 = o2[dn].read();
        y22 ? (o2[ln] = null, o2[Di] = null, o2[un] = null, p2(Pi(y22, false))) : (o2[Di] = p2, o2[un] = m32);
      }, writable: true }), r2));
      return o2[ln] = null, gM(e2, function(f2) {
        if (f2 && f2.code !== "ERR_STREAM_PREMATURE_CLOSE") {
          var p2 = o2[un];
          p2 !== null && (o2[ln] = null, o2[Di] = null, o2[un] = null, p2(f2)), o2[ea] = f2;
          return;
        }
        var m32 = o2[Di];
        m32 !== null && (o2[ln] = null, o2[Di] = null, o2[un] = null, m32(Pi(undefined, true))), o2[mo] = true;
      }), e2.on("readable", wM.bind(null, o2)), o2;
    };
    Dc.exports = SM;
  });
  Oc = T2((lI, Cc) => {
    Cc.exports = function() {
      throw new Error("Readable.from is not available in the browser");
    };
  });
  th = T2((cI, $c) => {
    $c.exports = Ce;
    var tf;
    Ce.ReadableState = Hc;
    var dI = ki().EventEmitter, zc = function(e2, r2) {
      return e2.listeners(r2).length;
    }, ra = W02(), go = Ut().Buffer, EM = global.Uint8Array || function() {
    };
    function AM(t22) {
      return go.from(t22);
    }
    function RM(t22) {
      return go.isBuffer(t22) || t22 instanceof EM;
    }
    var fh = $f(), Ne;
    fh && fh.debuglog ? Ne = fh.debuglog("stream") : Ne = function() {
    };
    var BM = pc(), dh = Z02(), qM = V02(), IM = qM.getHighWaterMark, yo = sn().codes, TM = yo.ERR_INVALID_ARG_TYPE, kM = yo.ERR_STREAM_PUSH_AFTER_EOF, LM = yo.ERR_METHOD_NOT_IMPLEMENTED, NM = yo.ERR_STREAM_UNSHIFT_AFTER_END_EVENT, rf, ah, oh;
    Ie()(Ce, ra);
    var ta = dh.errorOrDestroy, sh = ["error", "close", "destroy", "pause", "resume"];
    function DM(t22, e2, r2) {
      if (typeof t22.prependListener == "function")
        return t22.prependListener(e2, r2);
      !t22._events || !t22._events[e2] ? t22.on(e2, r2) : Array.isArray(t22._events[e2]) ? t22._events[e2].unshift(r2) : t22._events[e2] = [r2, t22._events[e2]];
    }
    function Hc(t22, e2, r2) {
      tf = tf || hn(), t22 = t22 || {}, typeof r2 != "boolean" && (r2 = e2 instanceof tf), this.objectMode = !!t22.objectMode, r2 && (this.objectMode = this.objectMode || !!t22.readableObjectMode), this.highWaterMark = IM(this, t22, "readableHighWaterMark", r2), this.buffer = new BM, this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = false, this.endEmitted = false, this.reading = false, this.sync = true, this.needReadable = false, this.emittedReadable = false, this.readableListening = false, this.resumeScheduled = false, this.paused = true, this.emitClose = t22.emitClose !== false, this.autoDestroy = !!t22.autoDestroy, this.destroyed = false, this.defaultEncoding = t22.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = false, this.decoder = null, this.encoding = null, t22.encoding && (rf || (rf = (Qf(), ur(Jf)).StringDecoder), this.decoder = new rf(t22.encoding), this.encoding = t22.encoding);
    }
    function Ce(t22) {
      if (tf = tf || hn(), !(this instanceof Ce))
        return new Ce(t22);
      var e2 = this instanceof tf;
      this._readableState = new Hc(t22, this, e2), this.readable = true, t22 && (typeof t22.read == "function" && (this._read = t22.read), typeof t22.destroy == "function" && (this._destroy = t22.destroy)), ra.call(this);
    }
    Object.defineProperty(Ce.prototype, "destroyed", { enumerable: false, get: function() {
      return this._readableState === undefined ? false : this._readableState.destroyed;
    }, set: function(e2) {
      !this._readableState || (this._readableState.destroyed = e2);
    } });
    Ce.prototype.destroy = dh.destroy;
    Ce.prototype._undestroy = dh.undestroy;
    Ce.prototype._destroy = function(t22, e2) {
      e2(t22);
    };
    Ce.prototype.push = function(t22, e2) {
      var r2 = this._readableState, o2;
      return r2.objectMode ? o2 = true : typeof t22 == "string" && (e2 = e2 || r2.defaultEncoding, e2 !== r2.encoding && (t22 = go.from(t22, e2), e2 = ""), o2 = true), Wc(this, t22, e2, false, o2);
    };
    Ce.prototype.unshift = function(t22) {
      return Wc(this, t22, null, true, false);
    };
    function Wc(t22, e2, r2, o2, f2) {
      Ne("readableAddChunk", e2);
      var p2 = t22._readableState;
      if (e2 === null)
        p2.reading = false, OM(t22, p2);
      else {
        var m32;
        if (f2 || (m32 = PM(p2, e2)), m32)
          ta(t22, m32);
        else if (p2.objectMode || e2 && e2.length > 0)
          if (typeof e2 != "string" && !p2.objectMode && Object.getPrototypeOf(e2) !== go.prototype && (e2 = AM(e2)), o2)
            p2.endEmitted ? ta(t22, new NM) : hh(t22, p2, e2, true);
          else if (p2.ended)
            ta(t22, new kM);
          else {
            if (p2.destroyed)
              return false;
            p2.reading = false, p2.decoder && !r2 ? (e2 = p2.decoder.write(e2), p2.objectMode || e2.length !== 0 ? hh(t22, p2, e2, false) : lh(t22, p2)) : hh(t22, p2, e2, false);
          }
        else
          o2 || (p2.reading = false, lh(t22, p2));
      }
      return !p2.ended && (p2.length < p2.highWaterMark || p2.length === 0);
    }
    function hh(t22, e2, r2, o2) {
      e2.flowing && e2.length === 0 && !e2.sync ? (e2.awaitDrain = 0, t22.emit("data", r2)) : (e2.length += e2.objectMode ? 1 : r2.length, o2 ? e2.buffer.unshift(r2) : e2.buffer.push(r2), e2.needReadable && wo(t22)), lh(t22, e2);
    }
    function PM(t22, e2) {
      var r2;
      return !RM(e2) && typeof e2 != "string" && e2 !== undefined && !t22.objectMode && (r2 = new TM("chunk", ["string", "Buffer", "Uint8Array"], e2)), r2;
    }
    Ce.prototype.isPaused = function() {
      return this._readableState.flowing === false;
    };
    Ce.prototype.setEncoding = function(t22) {
      rf || (rf = (Qf(), ur(Jf)).StringDecoder);
      var e2 = new rf(t22);
      this._readableState.decoder = e2, this._readableState.encoding = this._readableState.decoder.encoding;
      for (var r2 = this._readableState.buffer.head, o2 = "";r2 !== null; )
        o2 += e2.write(r2.data), r2 = r2.next;
      return this._readableState.buffer.clear(), o2 !== "" && this._readableState.buffer.push(o2), this._readableState.length = o2.length, this;
    };
    var Fc = 1073741824;
    function CM(t22) {
      return t22 >= Fc ? t22 = Fc : (t22--, t22 |= t22 >>> 1, t22 |= t22 >>> 2, t22 |= t22 >>> 4, t22 |= t22 >>> 8, t22 |= t22 >>> 16, t22++), t22;
    }
    function Uc(t22, e2) {
      return t22 <= 0 || e2.length === 0 && e2.ended ? 0 : e2.objectMode ? 1 : t22 !== t22 ? e2.flowing && e2.length ? e2.buffer.head.data.length : e2.length : (t22 > e2.highWaterMark && (e2.highWaterMark = CM(t22)), t22 <= e2.length ? t22 : e2.ended ? e2.length : (e2.needReadable = true, 0));
    }
    Ce.prototype.read = function(t22) {
      Ne("read", t22), t22 = parseInt(t22, 10);
      var e2 = this._readableState, r2 = t22;
      if (t22 !== 0 && (e2.emittedReadable = false), t22 === 0 && e2.needReadable && ((e2.highWaterMark !== 0 ? e2.length >= e2.highWaterMark : e2.length > 0) || e2.ended))
        return Ne("read: emitReadable", e2.length, e2.ended), e2.length === 0 && e2.ended ? uh(this) : wo(this), null;
      if (t22 = Uc(t22, e2), t22 === 0 && e2.ended)
        return e2.length === 0 && uh(this), null;
      var o2 = e2.needReadable;
      Ne("need readable", o2), (e2.length === 0 || e2.length - t22 < e2.highWaterMark) && (o2 = true, Ne("length less than watermark", o2)), e2.ended || e2.reading ? (o2 = false, Ne("reading or ended", o2)) : o2 && (Ne("do read"), e2.reading = true, e2.sync = true, e2.length === 0 && (e2.needReadable = true), this._read(e2.highWaterMark), e2.sync = false, e2.reading || (t22 = Uc(r2, e2)));
      var f2;
      return t22 > 0 ? f2 = Zc(t22, e2) : f2 = null, f2 === null ? (e2.needReadable = e2.length <= e2.highWaterMark, t22 = 0) : (e2.length -= t22, e2.awaitDrain = 0), e2.length === 0 && (e2.ended || (e2.needReadable = true), r2 !== t22 && e2.ended && uh(this)), f2 !== null && this.emit("data", f2), f2;
    };
    function OM(t22, e2) {
      if (Ne("onEofChunk"), !e2.ended) {
        if (e2.decoder) {
          var r2 = e2.decoder.end();
          r2 && r2.length && (e2.buffer.push(r2), e2.length += e2.objectMode ? 1 : r2.length);
        }
        e2.ended = true, e2.sync ? wo(t22) : (e2.needReadable = false, e2.emittedReadable || (e2.emittedReadable = true, Kc(t22)));
      }
    }
    function wo(t22) {
      var e2 = t22._readableState;
      Ne("emitReadable", e2.needReadable, e2.emittedReadable), e2.needReadable = false, e2.emittedReadable || (Ne("emitReadable", e2.flowing), e2.emittedReadable = true, process.nextTick(Kc, t22));
    }
    function Kc(t22) {
      var e2 = t22._readableState;
      Ne("emitReadable_", e2.destroyed, e2.length, e2.ended), !e2.destroyed && (e2.length || e2.ended) && (t22.emit("readable"), e2.emittedReadable = false), e2.needReadable = !e2.flowing && !e2.ended && e2.length <= e2.highWaterMark, ch(t22);
    }
    function lh(t22, e2) {
      e2.readingMore || (e2.readingMore = true, process.nextTick(FM, t22, e2));
    }
    function FM(t22, e2) {
      for (;!e2.reading && !e2.ended && (e2.length < e2.highWaterMark || e2.flowing && e2.length === 0); ) {
        var r2 = e2.length;
        if (Ne("maybeReadMore read 0"), t22.read(0), r2 === e2.length)
          break;
      }
      e2.readingMore = false;
    }
    Ce.prototype._read = function(t22) {
      ta(this, new LM("_read()"));
    };
    Ce.prototype.pipe = function(t22, e2) {
      var r2 = this, o2 = this._readableState;
      switch (o2.pipesCount) {
        case 0:
          o2.pipes = t22;
          break;
        case 1:
          o2.pipes = [o2.pipes, t22];
          break;
        default:
          o2.pipes.push(t22);
          break;
      }
      o2.pipesCount += 1, Ne("pipe count=%d opts=%j", o2.pipesCount, e2);
      var f2 = (!e2 || e2.end !== false) && t22 !== process.stdout && t22 !== process.stderr, p2 = f2 ? y22 : ge;
      o2.endEmitted ? process.nextTick(p2) : r2.once("end", p2), t22.on("unpipe", m32);
      function m32(_e, N4) {
        Ne("onunpipe"), _e === r2 && N4 && N4.hasUnpiped === false && (N4.hasUnpiped = true, S2());
      }
      function y22() {
        Ne("onend"), t22.end();
      }
      var M3 = UM(r2);
      t22.on("drain", M3);
      var x5 = false;
      function S2() {
        Ne("cleanup"), t22.removeListener("close", q), t22.removeListener("finish", L2), t22.removeListener("drain", M3), t22.removeListener("error", B5), t22.removeListener("unpipe", m32), r2.removeListener("end", y22), r2.removeListener("end", ge), r2.removeListener("data", E4), x5 = true, o2.awaitDrain && (!t22._writableState || t22._writableState.needDrain) && M3();
      }
      r2.on("data", E4);
      function E4(_e) {
        Ne("ondata");
        var N4 = t22.write(_e);
        Ne("dest.write", N4), N4 === false && ((o2.pipesCount === 1 && o2.pipes === t22 || o2.pipesCount > 1 && Vc(o2.pipes, t22) !== -1) && !x5 && (Ne("false write response, pause", o2.awaitDrain), o2.awaitDrain++), r2.pause());
      }
      function B5(_e) {
        Ne("onerror", _e), ge(), t22.removeListener("error", B5), zc(t22, "error") === 0 && ta(t22, _e);
      }
      DM(t22, "error", B5);
      function q() {
        t22.removeListener("finish", L2), ge();
      }
      t22.once("close", q);
      function L2() {
        Ne("onfinish"), t22.removeListener("close", q), ge();
      }
      t22.once("finish", L2);
      function ge() {
        Ne("unpipe"), r2.unpipe(t22);
      }
      return t22.emit("pipe", r2), o2.flowing || (Ne("pipe resume"), r2.resume()), t22;
    };
    function UM(t22) {
      return function() {
        var r2 = t22._readableState;
        Ne("pipeOnDrain", r2.awaitDrain), r2.awaitDrain && r2.awaitDrain--, r2.awaitDrain === 0 && zc(t22, "data") && (r2.flowing = true, ch(t22));
      };
    }
    Ce.prototype.unpipe = function(t22) {
      var e2 = this._readableState, r2 = { hasUnpiped: false };
      if (e2.pipesCount === 0)
        return this;
      if (e2.pipesCount === 1)
        return t22 && t22 !== e2.pipes ? this : (t22 || (t22 = e2.pipes), e2.pipes = null, e2.pipesCount = 0, e2.flowing = false, t22 && t22.emit("unpipe", this, r2), this);
      if (!t22) {
        var { pipes: o2, pipesCount: f2 } = e2;
        e2.pipes = null, e2.pipesCount = 0, e2.flowing = false;
        for (var p2 = 0;p2 < f2; p2++)
          o2[p2].emit("unpipe", this, { hasUnpiped: false });
        return this;
      }
      var m32 = Vc(e2.pipes, t22);
      return m32 === -1 ? this : (e2.pipes.splice(m32, 1), e2.pipesCount -= 1, e2.pipesCount === 1 && (e2.pipes = e2.pipes[0]), t22.emit("unpipe", this, r2), this);
    };
    Ce.prototype.on = function(t22, e2) {
      var r2 = ra.prototype.on.call(this, t22, e2), o2 = this._readableState;
      return t22 === "data" ? (o2.readableListening = this.listenerCount("readable") > 0, o2.flowing !== false && this.resume()) : t22 === "readable" && !o2.endEmitted && !o2.readableListening && (o2.readableListening = o2.needReadable = true, o2.flowing = false, o2.emittedReadable = false, Ne("on readable", o2.length, o2.reading), o2.length ? wo(this) : o2.reading || process.nextTick(zM, this)), r2;
    };
    Ce.prototype.addListener = Ce.prototype.on;
    Ce.prototype.removeListener = function(t22, e2) {
      var r2 = ra.prototype.removeListener.call(this, t22, e2);
      return t22 === "readable" && process.nextTick(jc, this), r2;
    };
    Ce.prototype.removeAllListeners = function(t22) {
      var e2 = ra.prototype.removeAllListeners.apply(this, arguments);
      return (t22 === "readable" || t22 === undefined) && process.nextTick(jc, this), e2;
    };
    function jc(t22) {
      var e2 = t22._readableState;
      e2.readableListening = t22.listenerCount("readable") > 0, e2.resumeScheduled && !e2.paused ? e2.flowing = true : t22.listenerCount("data") > 0 && t22.resume();
    }
    function zM(t22) {
      Ne("readable nexttick read 0"), t22.read(0);
    }
    Ce.prototype.resume = function() {
      var t22 = this._readableState;
      return t22.flowing || (Ne("resume"), t22.flowing = !t22.readableListening, HM(this, t22)), t22.paused = false, this;
    };
    function HM(t22, e2) {
      e2.resumeScheduled || (e2.resumeScheduled = true, process.nextTick(WM, t22, e2));
    }
    function WM(t22, e2) {
      Ne("resume", e2.reading), e2.reading || t22.read(0), e2.resumeScheduled = false, t22.emit("resume"), ch(t22), e2.flowing && !e2.reading && t22.read(0);
    }
    Ce.prototype.pause = function() {
      return Ne("call pause flowing=%j", this._readableState.flowing), this._readableState.flowing !== false && (Ne("pause"), this._readableState.flowing = false, this.emit("pause")), this._readableState.paused = true, this;
    };
    function ch(t22) {
      var e2 = t22._readableState;
      for (Ne("flow", e2.flowing);e2.flowing && t22.read() !== null; )
        ;
    }
    Ce.prototype.wrap = function(t22) {
      var e2 = this, r2 = this._readableState, o2 = false;
      t22.on("end", function() {
        if (Ne("wrapped end"), r2.decoder && !r2.ended) {
          var m32 = r2.decoder.end();
          m32 && m32.length && e2.push(m32);
        }
        e2.push(null);
      }), t22.on("data", function(m32) {
        if (Ne("wrapped data"), r2.decoder && (m32 = r2.decoder.write(m32)), !(r2.objectMode && m32 == null) && !(!r2.objectMode && (!m32 || !m32.length))) {
          var y22 = e2.push(m32);
          y22 || (o2 = true, t22.pause());
        }
      });
      for (var f2 in t22)
        this[f2] === undefined && typeof t22[f2] == "function" && (this[f2] = function(y22) {
          return function() {
            return t22[y22].apply(t22, arguments);
          };
        }(f2));
      for (var p2 = 0;p2 < sh.length; p2++)
        t22.on(sh[p2], this.emit.bind(this, sh[p2]));
      return this._read = function(m32) {
        Ne("wrapped _read", m32), o2 && (o2 = false, t22.resume());
      }, this;
    };
    typeof Symbol == "function" && (Ce.prototype[Symbol.asyncIterator] = function() {
      return ah === undefined && (ah = Pc()), ah(this);
    });
    Object.defineProperty(Ce.prototype, "readableHighWaterMark", { enumerable: false, get: function() {
      return this._readableState.highWaterMark;
    } });
    Object.defineProperty(Ce.prototype, "readableBuffer", { enumerable: false, get: function() {
      return this._readableState && this._readableState.buffer;
    } });
    Object.defineProperty(Ce.prototype, "readableFlowing", { enumerable: false, get: function() {
      return this._readableState.flowing;
    }, set: function(e2) {
      this._readableState && (this._readableState.flowing = e2);
    } });
    Ce._fromList = Zc;
    Object.defineProperty(Ce.prototype, "readableLength", { enumerable: false, get: function() {
      return this._readableState.length;
    } });
    function Zc(t22, e2) {
      if (e2.length === 0)
        return null;
      var r2;
      return e2.objectMode ? r2 = e2.buffer.shift() : !t22 || t22 >= e2.length ? (e2.decoder ? r2 = e2.buffer.join("") : e2.buffer.length === 1 ? r2 = e2.buffer.first() : r2 = e2.buffer.concat(e2.length), e2.buffer.clear()) : r2 = e2.buffer.consume(t22, e2.decoder), r2;
    }
    function uh(t22) {
      var e2 = t22._readableState;
      Ne("endReadable", e2.endEmitted), e2.endEmitted || (e2.ended = true, process.nextTick(KM, e2, t22));
    }
    function KM(t22, e2) {
      if (Ne("endReadableNT", t22.endEmitted, t22.length), !t22.endEmitted && t22.length === 0 && (t22.endEmitted = true, e2.readable = false, e2.emit("end"), t22.autoDestroy)) {
        var r2 = e2._writableState;
        (!r2 || r2.autoDestroy && r2.finished) && e2.destroy();
      }
    }
    typeof Symbol == "function" && (Ce.from = function(t22, e2) {
      return oh === undefined && (oh = Oc()), oh(Ce, t22, e2);
    });
    function Vc(t22, e2) {
      for (var r2 = 0, o2 = t22.length;r2 < o2; r2++)
        if (t22[r2] === e2)
          return r2;
      return -1;
    }
  });
  ph = T2((pI, Yc) => {
    Yc.exports = di;
    var Mo = sn().codes, jM = Mo.ERR_METHOD_NOT_IMPLEMENTED, ZM = Mo.ERR_MULTIPLE_CALLBACK, VM = Mo.ERR_TRANSFORM_ALREADY_TRANSFORMING, $M = Mo.ERR_TRANSFORM_WITH_LENGTH_0, _o = hn();
    Ie()(di, _o);
    function GM(t22, e2) {
      var r2 = this._transformState;
      r2.transforming = false;
      var o2 = r2.writecb;
      if (o2 === null)
        return this.emit("error", new ZM);
      r2.writechunk = null, r2.writecb = null, e2 != null && this.push(e2), o2(t22);
      var f2 = this._readableState;
      f2.reading = false, (f2.needReadable || f2.length < f2.highWaterMark) && this._read(f2.highWaterMark);
    }
    function di(t22) {
      if (!(this instanceof di))
        return new di(t22);
      _o.call(this, t22), this._transformState = { afterTransform: GM.bind(this), needTransform: false, transforming: false, writecb: null, writechunk: null, writeencoding: null }, this._readableState.needReadable = true, this._readableState.sync = false, t22 && (typeof t22.transform == "function" && (this._transform = t22.transform), typeof t22.flush == "function" && (this._flush = t22.flush)), this.on("prefinish", YM);
    }
    function YM() {
      var t22 = this;
      typeof this._flush == "function" && !this._readableState.destroyed ? this._flush(function(e2, r2) {
        Gc(t22, e2, r2);
      }) : Gc(this, null, null);
    }
    di.prototype.push = function(t22, e2) {
      return this._transformState.needTransform = false, _o.prototype.push.call(this, t22, e2);
    };
    di.prototype._transform = function(t22, e2, r2) {
      r2(new jM("_transform()"));
    };
    di.prototype._write = function(t22, e2, r2) {
      var o2 = this._transformState;
      if (o2.writecb = r2, o2.writechunk = t22, o2.writeencoding = e2, !o2.transforming) {
        var f2 = this._readableState;
        (o2.needTransform || f2.needReadable || f2.length < f2.highWaterMark) && this._read(f2.highWaterMark);
      }
    };
    di.prototype._read = function(t22) {
      var e2 = this._transformState;
      e2.writechunk !== null && !e2.transforming ? (e2.transforming = true, this._transform(e2.writechunk, e2.writeencoding, e2.afterTransform)) : e2.needTransform = true;
    };
    di.prototype._destroy = function(t22, e2) {
      _o.prototype._destroy.call(this, t22, function(r2) {
        e2(r2);
      });
    };
    function Gc(t22, e2, r2) {
      if (e2)
        return t22.emit("error", e2);
      if (r2 != null && t22.push(r2), t22._writableState.length)
        throw new $M;
      if (t22._transformState.transforming)
        throw new VM;
      return t22.push(null);
    }
  });
  Qc = T2((vI, Jc) => {
    Jc.exports = ia;
    var Xc = ph();
    Ie()(ia, Xc);
    function ia(t22) {
      if (!(this instanceof ia))
        return new ia(t22);
      Xc.call(this, t22);
    }
    ia.prototype._transform = function(t22, e2, r2) {
      r2(null, t22);
    };
  });
  np = T2((bI, ip) => {
    var vh;
    function XM(t22) {
      var e2 = false;
      return function() {
        e2 || (e2 = true, t22.apply(undefined, arguments));
      };
    }
    var rp = sn().codes, JM = rp.ERR_MISSING_ARGS, QM = rp.ERR_STREAM_DESTROYED;
    function ep(t22) {
      if (t22)
        throw t22;
    }
    function e4(t22) {
      return t22.setHeader && typeof t22.abort == "function";
    }
    function t4(t22, e2, r2, o2) {
      o2 = XM(o2);
      var f2 = false;
      t22.on("close", function() {
        f2 = true;
      }), vh === undefined && (vh = vo()), vh(t22, { readable: e2, writable: r2 }, function(m32) {
        if (m32)
          return o2(m32);
        f2 = true, o2();
      });
      var p2 = false;
      return function(m32) {
        if (!f2 && !p2) {
          if (p2 = true, e4(t22))
            return t22.abort();
          if (typeof t22.destroy == "function")
            return t22.destroy();
          o2(m32 || new QM("pipe"));
        }
      };
    }
    function tp(t22) {
      t22();
    }
    function r4(t22, e2) {
      return t22.pipe(e2);
    }
    function i4(t22) {
      return !t22.length || typeof t22[t22.length - 1] != "function" ? ep : t22.pop();
    }
    function n4() {
      for (var t22 = arguments.length, e2 = new Array(t22), r2 = 0;r2 < t22; r2++)
        e2[r2] = arguments[r2];
      var o2 = i4(e2);
      if (Array.isArray(e2[0]) && (e2 = e2[0]), e2.length < 2)
        throw new JM("streams");
      var f2, p2 = e2.map(function(m32, y22) {
        var M3 = y22 < e2.length - 1, x5 = y22 > 0;
        return t4(m32, M3, x5, function(S2) {
          f2 || (f2 = S2), S2 && p2.forEach(tp), !M3 && (p2.forEach(tp), o2(f2));
        });
      });
      return e2.reduce(r4);
    }
    ip.exports = n4;
  });
  ap = T2((cr, fp) => {
    cr = fp.exports = th();
    cr.Stream = cr;
    cr.Readable = cr;
    cr.Writable = J02();
    cr.Duplex = hn();
    cr.Transform = ph();
    cr.PassThrough = Qc();
    cr.finished = vo();
    cr.pipeline = np();
  });
  bh = T2((mI, sp) => {
    var xo = Te().Buffer, op = ap().Transform, f4 = Ie();
    function a4(t22, e2) {
      if (!xo.isBuffer(t22) && typeof t22 != "string")
        throw new TypeError(e2 + " must be a string or a buffer");
    }
    function Ci(t22) {
      op.call(this), this._block = xo.allocUnsafe(t22), this._blockSize = t22, this._blockOffset = 0, this._length = [0, 0, 0, 0], this._finalized = false;
    }
    f4(Ci, op);
    Ci.prototype._transform = function(t22, e2, r2) {
      var o2 = null;
      try {
        this.update(t22, e2);
      } catch (f2) {
        o2 = f2;
      }
      r2(o2);
    };
    Ci.prototype._flush = function(t22) {
      var e2 = null;
      try {
        this.push(this.digest());
      } catch (r2) {
        e2 = r2;
      }
      t22(e2);
    };
    Ci.prototype.update = function(t22, e2) {
      if (a4(t22, "Data"), this._finalized)
        throw new Error("Digest already called");
      xo.isBuffer(t22) || (t22 = xo.from(t22, e2));
      for (var r2 = this._block, o2 = 0;this._blockOffset + t22.length - o2 >= this._blockSize; ) {
        for (var f2 = this._blockOffset;f2 < this._blockSize; )
          r2[f2++] = t22[o2++];
        this._update(), this._blockOffset = 0;
      }
      for (;o2 < t22.length; )
        r2[this._blockOffset++] = t22[o2++];
      for (var p2 = 0, m32 = t22.length * 8;m32 > 0; ++p2)
        this._length[p2] += m32, m32 = this._length[p2] / 4294967296 | 0, m32 > 0 && (this._length[p2] -= 4294967296 * m32);
      return this;
    };
    Ci.prototype._update = function() {
      throw new Error("_update is not implemented");
    };
    Ci.prototype.digest = function(t22) {
      if (this._finalized)
        throw new Error("Digest already called");
      this._finalized = true;
      var e2 = this._digest();
      t22 !== undefined && (e2 = e2.toString(t22)), this._block.fill(0), this._blockOffset = 0;
      for (var r2 = 0;r2 < 4; ++r2)
        this._length[r2] = 0;
      return e2;
    };
    Ci.prototype._digest = function() {
      throw new Error("_digest is not implemented");
    };
    sp.exports = Ci;
  });
  Ao = T2((gI, up) => {
    var o4 = Ie(), hp = bh(), s4 = Te().Buffer, h4 = new Array(16);
    function So() {
      hp.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878;
    }
    o4(So, hp);
    So.prototype._update = function() {
      for (var t22 = h4, e2 = 0;e2 < 16; ++e2)
        t22[e2] = this._block.readInt32LE(e2 * 4);
      var r2 = this._a, o2 = this._b, f2 = this._c, p2 = this._d;
      r2 = jt(r2, o2, f2, p2, t22[0], 3614090360, 7), p2 = jt(p2, r2, o2, f2, t22[1], 3905402710, 12), f2 = jt(f2, p2, r2, o2, t22[2], 606105819, 17), o2 = jt(o2, f2, p2, r2, t22[3], 3250441966, 22), r2 = jt(r2, o2, f2, p2, t22[4], 4118548399, 7), p2 = jt(p2, r2, o2, f2, t22[5], 1200080426, 12), f2 = jt(f2, p2, r2, o2, t22[6], 2821735955, 17), o2 = jt(o2, f2, p2, r2, t22[7], 4249261313, 22), r2 = jt(r2, o2, f2, p2, t22[8], 1770035416, 7), p2 = jt(p2, r2, o2, f2, t22[9], 2336552879, 12), f2 = jt(f2, p2, r2, o2, t22[10], 4294925233, 17), o2 = jt(o2, f2, p2, r2, t22[11], 2304563134, 22), r2 = jt(r2, o2, f2, p2, t22[12], 1804603682, 7), p2 = jt(p2, r2, o2, f2, t22[13], 4254626195, 12), f2 = jt(f2, p2, r2, o2, t22[14], 2792965006, 17), o2 = jt(o2, f2, p2, r2, t22[15], 1236535329, 22), r2 = Zt(r2, o2, f2, p2, t22[1], 4129170786, 5), p2 = Zt(p2, r2, o2, f2, t22[6], 3225465664, 9), f2 = Zt(f2, p2, r2, o2, t22[11], 643717713, 14), o2 = Zt(o2, f2, p2, r2, t22[0], 3921069994, 20), r2 = Zt(r2, o2, f2, p2, t22[5], 3593408605, 5), p2 = Zt(p2, r2, o2, f2, t22[10], 38016083, 9), f2 = Zt(f2, p2, r2, o2, t22[15], 3634488961, 14), o2 = Zt(o2, f2, p2, r2, t22[4], 3889429448, 20), r2 = Zt(r2, o2, f2, p2, t22[9], 568446438, 5), p2 = Zt(p2, r2, o2, f2, t22[14], 3275163606, 9), f2 = Zt(f2, p2, r2, o2, t22[3], 4107603335, 14), o2 = Zt(o2, f2, p2, r2, t22[8], 1163531501, 20), r2 = Zt(r2, o2, f2, p2, t22[13], 2850285829, 5), p2 = Zt(p2, r2, o2, f2, t22[2], 4243563512, 9), f2 = Zt(f2, p2, r2, o2, t22[7], 1735328473, 14), o2 = Zt(o2, f2, p2, r2, t22[12], 2368359562, 20), r2 = Vt(r2, o2, f2, p2, t22[5], 4294588738, 4), p2 = Vt(p2, r2, o2, f2, t22[8], 2272392833, 11), f2 = Vt(f2, p2, r2, o2, t22[11], 1839030562, 16), o2 = Vt(o2, f2, p2, r2, t22[14], 4259657740, 23), r2 = Vt(r2, o2, f2, p2, t22[1], 2763975236, 4), p2 = Vt(p2, r2, o2, f2, t22[4], 1272893353, 11), f2 = Vt(f2, p2, r2, o2, t22[7], 4139469664, 16), o2 = Vt(o2, f2, p2, r2, t22[10], 3200236656, 23), r2 = Vt(r2, o2, f2, p2, t22[13], 681279174, 4), p2 = Vt(p2, r2, o2, f2, t22[0], 3936430074, 11), f2 = Vt(f2, p2, r2, o2, t22[3], 3572445317, 16), o2 = Vt(o2, f2, p2, r2, t22[6], 76029189, 23), r2 = Vt(r2, o2, f2, p2, t22[9], 3654602809, 4), p2 = Vt(p2, r2, o2, f2, t22[12], 3873151461, 11), f2 = Vt(f2, p2, r2, o2, t22[15], 530742520, 16), o2 = Vt(o2, f2, p2, r2, t22[2], 3299628645, 23), r2 = $t(r2, o2, f2, p2, t22[0], 4096336452, 6), p2 = $t(p2, r2, o2, f2, t22[7], 1126891415, 10), f2 = $t(f2, p2, r2, o2, t22[14], 2878612391, 15), o2 = $t(o2, f2, p2, r2, t22[5], 4237533241, 21), r2 = $t(r2, o2, f2, p2, t22[12], 1700485571, 6), p2 = $t(p2, r2, o2, f2, t22[3], 2399980690, 10), f2 = $t(f2, p2, r2, o2, t22[10], 4293915773, 15), o2 = $t(o2, f2, p2, r2, t22[1], 2240044497, 21), r2 = $t(r2, o2, f2, p2, t22[8], 1873313359, 6), p2 = $t(p2, r2, o2, f2, t22[15], 4264355552, 10), f2 = $t(f2, p2, r2, o2, t22[6], 2734768916, 15), o2 = $t(o2, f2, p2, r2, t22[13], 1309151649, 21), r2 = $t(r2, o2, f2, p2, t22[4], 4149444226, 6), p2 = $t(p2, r2, o2, f2, t22[11], 3174756917, 10), f2 = $t(f2, p2, r2, o2, t22[2], 718787259, 15), o2 = $t(o2, f2, p2, r2, t22[9], 3951481745, 21), this._a = this._a + r2 | 0, this._b = this._b + o2 | 0, this._c = this._c + f2 | 0, this._d = this._d + p2 | 0;
    };
    So.prototype._digest = function() {
      this._block[this._blockOffset++] = 128, this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64), this._update(), this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), this._update();
      var t22 = s4.allocUnsafe(16);
      return t22.writeInt32LE(this._a, 0), t22.writeInt32LE(this._b, 4), t22.writeInt32LE(this._c, 8), t22.writeInt32LE(this._d, 12), t22;
    };
    function Eo(t22, e2) {
      return t22 << e2 | t22 >>> 32 - e2;
    }
    function jt(t22, e2, r2, o2, f2, p2, m32) {
      return Eo(t22 + (e2 & r2 | ~e2 & o2) + f2 + p2 | 0, m32) + e2 | 0;
    }
    function Zt(t22, e2, r2, o2, f2, p2, m32) {
      return Eo(t22 + (e2 & o2 | r2 & ~o2) + f2 + p2 | 0, m32) + e2 | 0;
    }
    function Vt(t22, e2, r2, o2, f2, p2, m32) {
      return Eo(t22 + (e2 ^ r2 ^ o2) + f2 + p2 | 0, m32) + e2 | 0;
    }
    function $t(t22, e2, r2, o2, f2, p2, m32) {
      return Eo(t22 + (r2 ^ (e2 | ~o2)) + f2 + p2 | 0, m32) + e2 | 0;
    }
    up.exports = So;
  });
  Bo = T2((yI, mp) => {
    var mh = Ut().Buffer, u4 = Ie(), bp = bh(), l4 = new Array(16), na = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13], fa = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11], aa = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6], oa = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11], sa = [0, 1518500249, 1859775393, 2400959708, 2840853838], ha = [1352829926, 1548603684, 1836072691, 2053994217, 0];
    function Ro() {
      bp.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520;
    }
    u4(Ro, bp);
    Ro.prototype._update = function() {
      for (var t22 = l4, e2 = 0;e2 < 16; ++e2)
        t22[e2] = this._block.readInt32LE(e2 * 4);
      for (var r2 = this._a | 0, o2 = this._b | 0, f2 = this._c | 0, p2 = this._d | 0, m32 = this._e | 0, y22 = this._a | 0, M3 = this._b | 0, x5 = this._c | 0, S2 = this._d | 0, E4 = this._e | 0, B5 = 0;B5 < 80; B5 += 1) {
        var q, L2;
        B5 < 16 ? (q = lp(r2, o2, f2, p2, m32, t22[na[B5]], sa[0], aa[B5]), L2 = vp(y22, M3, x5, S2, E4, t22[fa[B5]], ha[0], oa[B5])) : B5 < 32 ? (q = dp(r2, o2, f2, p2, m32, t22[na[B5]], sa[1], aa[B5]), L2 = pp(y22, M3, x5, S2, E4, t22[fa[B5]], ha[1], oa[B5])) : B5 < 48 ? (q = cp(r2, o2, f2, p2, m32, t22[na[B5]], sa[2], aa[B5]), L2 = cp(y22, M3, x5, S2, E4, t22[fa[B5]], ha[2], oa[B5])) : B5 < 64 ? (q = pp(r2, o2, f2, p2, m32, t22[na[B5]], sa[3], aa[B5]), L2 = dp(y22, M3, x5, S2, E4, t22[fa[B5]], ha[3], oa[B5])) : (q = vp(r2, o2, f2, p2, m32, t22[na[B5]], sa[4], aa[B5]), L2 = lp(y22, M3, x5, S2, E4, t22[fa[B5]], ha[4], oa[B5])), r2 = m32, m32 = p2, p2 = cn(f2, 10), f2 = o2, o2 = q, y22 = E4, E4 = S2, S2 = cn(x5, 10), x5 = M3, M3 = L2;
      }
      var ge = this._b + f2 + S2 | 0;
      this._b = this._c + p2 + E4 | 0, this._c = this._d + m32 + y22 | 0, this._d = this._e + r2 + M3 | 0, this._e = this._a + o2 + x5 | 0, this._a = ge;
    };
    Ro.prototype._digest = function() {
      this._block[this._blockOffset++] = 128, this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64), this._update(), this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), this._update();
      var t22 = mh.alloc ? mh.alloc(20) : new mh(20);
      return t22.writeInt32LE(this._a, 0), t22.writeInt32LE(this._b, 4), t22.writeInt32LE(this._c, 8), t22.writeInt32LE(this._d, 12), t22.writeInt32LE(this._e, 16), t22;
    };
    function cn(t22, e2) {
      return t22 << e2 | t22 >>> 32 - e2;
    }
    function lp(t22, e2, r2, o2, f2, p2, m32, y22) {
      return cn(t22 + (e2 ^ r2 ^ o2) + p2 + m32 | 0, y22) + f2 | 0;
    }
    function dp(t22, e2, r2, o2, f2, p2, m32, y22) {
      return cn(t22 + (e2 & r2 | ~e2 & o2) + p2 + m32 | 0, y22) + f2 | 0;
    }
    function cp(t22, e2, r2, o2, f2, p2, m32, y22) {
      return cn(t22 + ((e2 | ~r2) ^ o2) + p2 + m32 | 0, y22) + f2 | 0;
    }
    function pp(t22, e2, r2, o2, f2, p2, m32, y22) {
      return cn(t22 + (e2 & o2 | r2 & ~o2) + p2 + m32 | 0, y22) + f2 | 0;
    }
    function vp(t22, e2, r2, o2, f2, p2, m32, y22) {
      return cn(t22 + (e2 ^ (r2 | ~o2)) + p2 + m32 | 0, y22) + f2 | 0;
    }
    mp.exports = Ro;
  });
  pn = T2((wI, yp) => {
    var gp = Te().Buffer;
    function qo(t22, e2) {
      this._block = gp.alloc(t22), this._finalSize = e2, this._blockSize = t22, this._len = 0;
    }
    qo.prototype.update = function(t22, e2) {
      typeof t22 == "string" && (e2 = e2 || "utf8", t22 = gp.from(t22, e2));
      for (var r2 = this._block, o2 = this._blockSize, f2 = t22.length, p2 = this._len, m32 = 0;m32 < f2; ) {
        for (var y22 = p2 % o2, M3 = Math.min(f2 - m32, o2 - y22), x5 = 0;x5 < M3; x5++)
          r2[y22 + x5] = t22[m32 + x5];
        p2 += M3, m32 += M3, p2 % o2 === 0 && this._update(r2);
      }
      return this._len += f2, this;
    };
    qo.prototype.digest = function(t22) {
      var e2 = this._len % this._blockSize;
      this._block[e2] = 128, this._block.fill(0, e2 + 1), e2 >= this._finalSize && (this._update(this._block), this._block.fill(0));
      var r2 = this._len * 8;
      if (r2 <= 4294967295)
        this._block.writeUInt32BE(r2, this._blockSize - 4);
      else {
        var o2 = (r2 & 4294967295) >>> 0, f2 = (r2 - o2) / 4294967296;
        this._block.writeUInt32BE(f2, this._blockSize - 8), this._block.writeUInt32BE(o2, this._blockSize - 4);
      }
      this._update(this._block);
      var p2 = this._hash();
      return t22 ? p2.toString(t22) : p2;
    };
    qo.prototype._update = function() {
      throw new Error("_update must be implemented by subclass");
    };
    yp.exports = qo;
  });
  _p = T2((MI, Mp) => {
    var d4 = Ie(), wp = pn(), c4 = Te().Buffer, p4 = [1518500249, 1859775393, -1894007588, -899497514], v4 = new Array(80);
    function ua() {
      this.init(), this._w = v4, wp.call(this, 64, 56);
    }
    d4(ua, wp);
    ua.prototype.init = function() {
      return this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520, this;
    };
    function b4(t22) {
      return t22 << 5 | t22 >>> 27;
    }
    function m4(t22) {
      return t22 << 30 | t22 >>> 2;
    }
    function g4(t22, e2, r2, o2) {
      return t22 === 0 ? e2 & r2 | ~e2 & o2 : t22 === 2 ? e2 & r2 | e2 & o2 | r2 & o2 : e2 ^ r2 ^ o2;
    }
    ua.prototype._update = function(t22) {
      for (var e2 = this._w, r2 = this._a | 0, o2 = this._b | 0, f2 = this._c | 0, p2 = this._d | 0, m32 = this._e | 0, y22 = 0;y22 < 16; ++y22)
        e2[y22] = t22.readInt32BE(y22 * 4);
      for (;y22 < 80; ++y22)
        e2[y22] = e2[y22 - 3] ^ e2[y22 - 8] ^ e2[y22 - 14] ^ e2[y22 - 16];
      for (var M3 = 0;M3 < 80; ++M3) {
        var x5 = ~~(M3 / 20), S2 = b4(r2) + g4(x5, o2, f2, p2) + m32 + e2[M3] + p4[x5] | 0;
        m32 = p2, p2 = f2, f2 = m4(o2), o2 = r2, r2 = S2;
      }
      this._a = r2 + this._a | 0, this._b = o2 + this._b | 0, this._c = f2 + this._c | 0, this._d = p2 + this._d | 0, this._e = m32 + this._e | 0;
    };
    ua.prototype._hash = function() {
      var t22 = c4.allocUnsafe(20);
      return t22.writeInt32BE(this._a | 0, 0), t22.writeInt32BE(this._b | 0, 4), t22.writeInt32BE(this._c | 0, 8), t22.writeInt32BE(this._d | 0, 12), t22.writeInt32BE(this._e | 0, 16), t22;
    };
    Mp.exports = ua;
  });
  Ep = T2((_I, Sp) => {
    var y4 = Ie(), xp = pn(), w4 = Te().Buffer, M4 = [1518500249, 1859775393, -1894007588, -899497514], _42 = new Array(80);
    function la() {
      this.init(), this._w = _42, xp.call(this, 64, 56);
    }
    y4(la, xp);
    la.prototype.init = function() {
      return this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520, this;
    };
    function x42(t22) {
      return t22 << 1 | t22 >>> 31;
    }
    function S4(t22) {
      return t22 << 5 | t22 >>> 27;
    }
    function E4(t22) {
      return t22 << 30 | t22 >>> 2;
    }
    function A42(t22, e2, r2, o2) {
      return t22 === 0 ? e2 & r2 | ~e2 & o2 : t22 === 2 ? e2 & r2 | e2 & o2 | r2 & o2 : e2 ^ r2 ^ o2;
    }
    la.prototype._update = function(t22) {
      for (var e2 = this._w, r2 = this._a | 0, o2 = this._b | 0, f2 = this._c | 0, p2 = this._d | 0, m32 = this._e | 0, y22 = 0;y22 < 16; ++y22)
        e2[y22] = t22.readInt32BE(y22 * 4);
      for (;y22 < 80; ++y22)
        e2[y22] = x42(e2[y22 - 3] ^ e2[y22 - 8] ^ e2[y22 - 14] ^ e2[y22 - 16]);
      for (var M3 = 0;M3 < 80; ++M3) {
        var x5 = ~~(M3 / 20), S2 = S4(r2) + A42(x5, o2, f2, p2) + m32 + e2[M3] + M4[x5] | 0;
        m32 = p2, p2 = f2, f2 = E4(o2), o2 = r2, r2 = S2;
      }
      this._a = r2 + this._a | 0, this._b = o2 + this._b | 0, this._c = f2 + this._c | 0, this._d = p2 + this._d | 0, this._e = m32 + this._e | 0;
    };
    la.prototype._hash = function() {
      var t22 = w4.allocUnsafe(20);
      return t22.writeInt32BE(this._a | 0, 0), t22.writeInt32BE(this._b | 0, 4), t22.writeInt32BE(this._c | 0, 8), t22.writeInt32BE(this._d | 0, 12), t22.writeInt32BE(this._e | 0, 16), t22;
    };
    Sp.exports = la;
  });
  gh = T2((xI, Rp) => {
    var R4 = Ie(), Ap = pn(), B42 = Te().Buffer, q4 = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298], I4 = new Array(64);
    function da() {
      this.init(), this._w = I4, Ap.call(this, 64, 56);
    }
    R4(da, Ap);
    da.prototype.init = function() {
      return this._a = 1779033703, this._b = 3144134277, this._c = 1013904242, this._d = 2773480762, this._e = 1359893119, this._f = 2600822924, this._g = 528734635, this._h = 1541459225, this;
    };
    function T4(t22, e2, r2) {
      return r2 ^ t22 & (e2 ^ r2);
    }
    function k4(t22, e2, r2) {
      return t22 & e2 | r2 & (t22 | e2);
    }
    function L4(t22) {
      return (t22 >>> 2 | t22 << 30) ^ (t22 >>> 13 | t22 << 19) ^ (t22 >>> 22 | t22 << 10);
    }
    function N4(t22) {
      return (t22 >>> 6 | t22 << 26) ^ (t22 >>> 11 | t22 << 21) ^ (t22 >>> 25 | t22 << 7);
    }
    function D4(t22) {
      return (t22 >>> 7 | t22 << 25) ^ (t22 >>> 18 | t22 << 14) ^ t22 >>> 3;
    }
    function P4(t22) {
      return (t22 >>> 17 | t22 << 15) ^ (t22 >>> 19 | t22 << 13) ^ t22 >>> 10;
    }
    da.prototype._update = function(t22) {
      for (var e2 = this._w, r2 = this._a | 0, o2 = this._b | 0, f2 = this._c | 0, p2 = this._d | 0, m32 = this._e | 0, y22 = this._f | 0, M3 = this._g | 0, x5 = this._h | 0, S2 = 0;S2 < 16; ++S2)
        e2[S2] = t22.readInt32BE(S2 * 4);
      for (;S2 < 64; ++S2)
        e2[S2] = P4(e2[S2 - 2]) + e2[S2 - 7] + D4(e2[S2 - 15]) + e2[S2 - 16] | 0;
      for (var E4 = 0;E4 < 64; ++E4) {
        var B5 = x5 + N4(m32) + T4(m32, y22, M3) + q4[E4] + e2[E4] | 0, q = L4(r2) + k4(r2, o2, f2) | 0;
        x5 = M3, M3 = y22, y22 = m32, m32 = p2 + B5 | 0, p2 = f2, f2 = o2, o2 = r2, r2 = B5 + q | 0;
      }
      this._a = r2 + this._a | 0, this._b = o2 + this._b | 0, this._c = f2 + this._c | 0, this._d = p2 + this._d | 0, this._e = m32 + this._e | 0, this._f = y22 + this._f | 0, this._g = M3 + this._g | 0, this._h = x5 + this._h | 0;
    };
    da.prototype._hash = function() {
      var t22 = B42.allocUnsafe(32);
      return t22.writeInt32BE(this._a, 0), t22.writeInt32BE(this._b, 4), t22.writeInt32BE(this._c, 8), t22.writeInt32BE(this._d, 12), t22.writeInt32BE(this._e, 16), t22.writeInt32BE(this._f, 20), t22.writeInt32BE(this._g, 24), t22.writeInt32BE(this._h, 28), t22;
    };
    Rp.exports = da;
  });
  qp = T2((SI, Bp) => {
    var C4 = Ie(), O4 = gh(), F4 = pn(), U4 = Te().Buffer, z4 = new Array(64);
    function Io() {
      this.init(), this._w = z4, F4.call(this, 64, 56);
    }
    C4(Io, O4);
    Io.prototype.init = function() {
      return this._a = 3238371032, this._b = 914150663, this._c = 812702999, this._d = 4144912697, this._e = 4290775857, this._f = 1750603025, this._g = 1694076839, this._h = 3204075428, this;
    };
    Io.prototype._hash = function() {
      var t22 = U4.allocUnsafe(28);
      return t22.writeInt32BE(this._a, 0), t22.writeInt32BE(this._b, 4), t22.writeInt32BE(this._c, 8), t22.writeInt32BE(this._d, 12), t22.writeInt32BE(this._e, 16), t22.writeInt32BE(this._f, 20), t22.writeInt32BE(this._g, 24), t22;
    };
    Bp.exports = Io;
  });
  yh = T2((EI, Pp) => {
    var H4 = Ie(), Dp = pn(), W4 = Te().Buffer, Ip = [1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591], K4 = new Array(160);
    function ca() {
      this.init(), this._w = K4, Dp.call(this, 128, 112);
    }
    H4(ca, Dp);
    ca.prototype.init = function() {
      return this._ah = 1779033703, this._bh = 3144134277, this._ch = 1013904242, this._dh = 2773480762, this._eh = 1359893119, this._fh = 2600822924, this._gh = 528734635, this._hh = 1541459225, this._al = 4089235720, this._bl = 2227873595, this._cl = 4271175723, this._dl = 1595750129, this._el = 2917565137, this._fl = 725511199, this._gl = 4215389547, this._hl = 327033209, this;
    };
    function Tp(t22, e2, r2) {
      return r2 ^ t22 & (e2 ^ r2);
    }
    function kp(t22, e2, r2) {
      return t22 & e2 | r2 & (t22 | e2);
    }
    function Lp(t22, e2) {
      return (t22 >>> 28 | e2 << 4) ^ (e2 >>> 2 | t22 << 30) ^ (e2 >>> 7 | t22 << 25);
    }
    function Np(t22, e2) {
      return (t22 >>> 14 | e2 << 18) ^ (t22 >>> 18 | e2 << 14) ^ (e2 >>> 9 | t22 << 23);
    }
    function j4(t22, e2) {
      return (t22 >>> 1 | e2 << 31) ^ (t22 >>> 8 | e2 << 24) ^ t22 >>> 7;
    }
    function Z4(t22, e2) {
      return (t22 >>> 1 | e2 << 31) ^ (t22 >>> 8 | e2 << 24) ^ (t22 >>> 7 | e2 << 25);
    }
    function V4(t22, e2) {
      return (t22 >>> 19 | e2 << 13) ^ (e2 >>> 29 | t22 << 3) ^ t22 >>> 6;
    }
    function $4(t22, e2) {
      return (t22 >>> 19 | e2 << 13) ^ (e2 >>> 29 | t22 << 3) ^ (t22 >>> 6 | e2 << 26);
    }
    function Pt(t22, e2) {
      return t22 >>> 0 < e2 >>> 0 ? 1 : 0;
    }
    ca.prototype._update = function(t22) {
      for (var e2 = this._w, r2 = this._ah | 0, o2 = this._bh | 0, f2 = this._ch | 0, p2 = this._dh | 0, m32 = this._eh | 0, y22 = this._fh | 0, M3 = this._gh | 0, x5 = this._hh | 0, S2 = this._al | 0, E4 = this._bl | 0, B5 = this._cl | 0, q = this._dl | 0, L2 = this._el | 0, ge = this._fl | 0, _e = this._gl | 0, N4 = this._hl | 0, we = 0;we < 32; we += 2)
        e2[we] = t22.readInt32BE(we * 4), e2[we + 1] = t22.readInt32BE(we * 4 + 4);
      for (;we < 160; we += 2) {
        var ye = e2[we - 30], xe = e2[we - 15 * 2 + 1], Re = j4(ye, xe), Ee = Z4(xe, ye);
        ye = e2[we - 2 * 2], xe = e2[we - 2 * 2 + 1];
        var Ae = V4(ye, xe), P = $4(xe, ye), Se = e2[we - 7 * 2], v32 = e2[we - 7 * 2 + 1], i = e2[we - 16 * 2], a2 = e2[we - 16 * 2 + 1], h3 = Ee + v32 | 0, s3 = Re + Se + Pt(h3, Ee) | 0;
        h3 = h3 + P | 0, s3 = s3 + Ae + Pt(h3, P) | 0, h3 = h3 + a2 | 0, s3 = s3 + i + Pt(h3, a2) | 0, e2[we] = s3, e2[we + 1] = h3;
      }
      for (var u4 = 0;u4 < 160; u4 += 2) {
        s3 = e2[u4], h3 = e2[u4 + 1];
        var c2 = kp(r2, o2, f2), b3 = kp(S2, E4, B5), l3 = Lp(r2, S2), n32 = Lp(S2, r2), d2 = Np(m32, L2), w3 = Np(L2, m32), g2 = Ip[u4], _5 = Ip[u4 + 1], A6 = Tp(m32, y22, M3), R4 = Tp(L2, ge, _e), I2 = N4 + w3 | 0, Me = x5 + d2 + Pt(I2, N4) | 0;
        I2 = I2 + R4 | 0, Me = Me + A6 + Pt(I2, R4) | 0, I2 = I2 + _5 | 0, Me = Me + g2 + Pt(I2, _5) | 0, I2 = I2 + h3 | 0, Me = Me + s3 + Pt(I2, h3) | 0;
        var k32 = n32 + b3 | 0, D3 = l3 + c2 + Pt(k32, n32) | 0;
        x5 = M3, N4 = _e, M3 = y22, _e = ge, y22 = m32, ge = L2, L2 = q + I2 | 0, m32 = p2 + Me + Pt(L2, q) | 0, p2 = f2, q = B5, f2 = o2, B5 = E4, o2 = r2, E4 = S2, S2 = I2 + k32 | 0, r2 = Me + D3 + Pt(S2, I2) | 0;
      }
      this._al = this._al + S2 | 0, this._bl = this._bl + E4 | 0, this._cl = this._cl + B5 | 0, this._dl = this._dl + q | 0, this._el = this._el + L2 | 0, this._fl = this._fl + ge | 0, this._gl = this._gl + _e | 0, this._hl = this._hl + N4 | 0, this._ah = this._ah + r2 + Pt(this._al, S2) | 0, this._bh = this._bh + o2 + Pt(this._bl, E4) | 0, this._ch = this._ch + f2 + Pt(this._cl, B5) | 0, this._dh = this._dh + p2 + Pt(this._dl, q) | 0, this._eh = this._eh + m32 + Pt(this._el, L2) | 0, this._fh = this._fh + y22 + Pt(this._fl, ge) | 0, this._gh = this._gh + M3 + Pt(this._gl, _e) | 0, this._hh = this._hh + x5 + Pt(this._hl, N4) | 0;
    };
    ca.prototype._hash = function() {
      var t22 = W4.allocUnsafe(64);
      function e2(r2, o2, f2) {
        t22.writeInt32BE(r2, f2), t22.writeInt32BE(o2, f2 + 4);
      }
      return e2(this._ah, this._al, 0), e2(this._bh, this._bl, 8), e2(this._ch, this._cl, 16), e2(this._dh, this._dl, 24), e2(this._eh, this._el, 32), e2(this._fh, this._fl, 40), e2(this._gh, this._gl, 48), e2(this._hh, this._hl, 56), t22;
    };
    Pp.exports = ca;
  });
  Op = T2((AI, Cp) => {
    var G42 = Ie(), Y4 = yh(), X4 = pn(), J4 = Te().Buffer, Q4 = new Array(160);
    function To() {
      this.init(), this._w = Q4, X4.call(this, 128, 112);
    }
    G42(To, Y4);
    To.prototype.init = function() {
      return this._ah = 3418070365, this._bh = 1654270250, this._ch = 2438529370, this._dh = 355462360, this._eh = 1731405415, this._fh = 2394180231, this._gh = 3675008525, this._hh = 1203062813, this._al = 3238371032, this._bl = 914150663, this._cl = 812702999, this._dl = 4144912697, this._el = 4290775857, this._fl = 1750603025, this._gl = 1694076839, this._hl = 3204075428, this;
    };
    To.prototype._hash = function() {
      var t22 = J4.allocUnsafe(48);
      function e2(r2, o2, f2) {
        t22.writeInt32BE(r2, f2), t22.writeInt32BE(o2, f2 + 4);
      }
      return e2(this._ah, this._al, 0), e2(this._bh, this._bl, 8), e2(this._ch, this._cl, 16), e2(this._dh, this._dl, 24), e2(this._eh, this._el, 32), e2(this._fh, this._fl, 40), t22;
    };
    Cp.exports = To;
  });
  ko = T2((ci, Fp) => {
    var ci = Fp.exports = function(e2) {
      e2 = e2.toLowerCase();
      var r2 = ci[e2];
      if (!r2)
        throw new Error(e2 + " is not supported (we accept pull requests)");
      return new r2;
    };
    ci.sha = _p();
    ci.sha1 = Ep();
    ci.sha224 = qp();
    ci.sha256 = gh();
    ci.sha384 = Op();
    ci.sha512 = yh();
  });
  Tt = T2((RI, Up) => {
    Up.exports = { ArrayIsArray(t22) {
      return Array.isArray(t22);
    }, ArrayPrototypeIncludes(t22, e2) {
      return t22.includes(e2);
    }, ArrayPrototypeIndexOf(t22, e2) {
      return t22.indexOf(e2);
    }, ArrayPrototypeJoin(t22, e2) {
      return t22.join(e2);
    }, ArrayPrototypeMap(t22, e2) {
      return t22.map(e2);
    }, ArrayPrototypePop(t22, e2) {
      return t22.pop(e2);
    }, ArrayPrototypePush(t22, e2) {
      return t22.push(e2);
    }, ArrayPrototypeSlice(t22, e2, r2) {
      return t22.slice(e2, r2);
    }, Error, FunctionPrototypeCall(t22, e2, ...r2) {
      return t22.call(e2, ...r2);
    }, FunctionPrototypeSymbolHasInstance(t22, e2) {
      return Function.prototype[Symbol.hasInstance].call(t22, e2);
    }, MathFloor: Math.floor, Number, NumberIsInteger: Number.isInteger, NumberIsNaN: Number.isNaN, NumberMAX_SAFE_INTEGER: Number.MAX_SAFE_INTEGER, NumberMIN_SAFE_INTEGER: Number.MIN_SAFE_INTEGER, NumberParseInt: Number.parseInt, ObjectDefineProperties(t22, e2) {
      return Object.defineProperties(t22, e2);
    }, ObjectDefineProperty(t22, e2, r2) {
      return Object.defineProperty(t22, e2, r2);
    }, ObjectGetOwnPropertyDescriptor(t22, e2) {
      return Object.getOwnPropertyDescriptor(t22, e2);
    }, ObjectKeys(t22) {
      return Object.keys(t22);
    }, ObjectSetPrototypeOf(t22, e2) {
      return Object.setPrototypeOf(t22, e2);
    }, Promise, PromisePrototypeCatch(t22, e2) {
      return t22.catch(e2);
    }, PromisePrototypeThen(t22, e2, r2) {
      return t22.then(e2, r2);
    }, PromiseReject(t22) {
      return Promise.reject(t22);
    }, ReflectApply: Reflect.apply, RegExpPrototypeTest(t22, e2) {
      return t22.test(e2);
    }, SafeSet: Set, String, StringPrototypeSlice(t22, e2, r2) {
      return t22.slice(e2, r2);
    }, StringPrototypeToLowerCase(t22) {
      return t22.toLowerCase();
    }, StringPrototypeToUpperCase(t22) {
      return t22.toUpperCase();
    }, StringPrototypeTrim(t22) {
      return t22.trim();
    }, Symbol, SymbolAsyncIterator: Symbol.asyncIterator, SymbolHasInstance: Symbol.hasInstance, SymbolIterator: Symbol.iterator, TypedArrayPrototypeSet(t22, e2, r2) {
      return t22.set(e2, r2);
    }, Uint8Array };
  });
  Gr = T2((BI, Mh) => {
    var e_ = Ut(), t_ = Object.getPrototypeOf(async function() {
    }).constructor, zp = globalThis.Blob || e_.Blob, r_ = typeof zp < "u" ? function(e2) {
      return e2 instanceof zp;
    } : function(e2) {
      return false;
    }, wh = class extends Error {
      constructor(e2) {
        if (!Array.isArray(e2))
          throw new TypeError(`Expected input to be an Array, got ${typeof e2}`);
        let r2 = "";
        for (let o2 = 0;o2 < e2.length; o2++)
          r2 += `    ${e2[o2].stack}
`;
        super(r2), this.name = "AggregateError", this.errors = e2;
      }
    };
    Mh.exports = { AggregateError: wh, kEmptyObject: Object.freeze({}), once(t22) {
      let e2 = false;
      return function(...r2) {
        e2 || (e2 = true, t22.apply(this, r2));
      };
    }, createDeferredPromise: function() {
      let t22, e2;
      return { promise: new Promise((o2, f2) => {
        t22 = o2, e2 = f2;
      }), resolve: t22, reject: e2 };
    }, promisify(t22) {
      return new Promise((e2, r2) => {
        t22((o2, ...f2) => o2 ? r2(o2) : e2(...f2));
      });
    }, debuglog() {
      return function() {
      };
    }, format(t22, ...e2) {
      return t22.replace(/%([sdifj])/g, function(...[r2, o2]) {
        let f2 = e2.shift();
        return o2 === "f" ? f2.toFixed(6) : o2 === "j" ? JSON.stringify(f2) : o2 === "s" && typeof f2 == "object" ? `${f2.constructor !== Object ? f2.constructor.name : ""} {}`.trim() : f2.toString();
      });
    }, inspect(t22) {
      switch (typeof t22) {
        case "string":
          if (t22.includes("'"))
            if (t22.includes('"')) {
              if (!t22.includes("`") && !t22.includes("${"))
                return `\`${t22}\``;
            } else
              return `"${t22}"`;
          return `'${t22}'`;
        case "number":
          return isNaN(t22) ? "NaN" : Object.is(t22, -0) ? String(t22) : t22;
        case "bigint":
          return `${String(t22)}n`;
        case "boolean":
        case "undefined":
          return String(t22);
        case "object":
          return "{}";
      }
    }, types: { isAsyncFunction(t22) {
      return t22 instanceof t_;
    }, isArrayBufferView(t22) {
      return ArrayBuffer.isView(t22);
    } }, isBlob: r_ };
    Mh.exports.promisify.custom = Symbol.for("nodejs.util.promisify.custom");
  });
  No = T2((qI, Lo) => {
    var { AbortController: Hp, AbortSignal: i_ } = typeof self < "u" ? self : typeof window < "u" ? window : undefined;
    Lo.exports = Hp;
    Lo.exports.AbortSignal = i_;
    Lo.exports.default = Hp;
  });
  Jt = T2((II, jp) => {
    var { format: n_, inspect: Do, AggregateError: f_ } = Gr(), a_ = globalThis.AggregateError || f_, o_ = Symbol("kIsNodeError"), s_ = ["string", "function", "number", "object", "Function", "Object", "boolean", "bigint", "symbol"], h_ = /^([A-Z][a-z0-9]*)+$/, u_ = "__node_internal_", Po = {};
    function vn(t22, e2) {
      if (!t22)
        throw new Po.ERR_INTERNAL_ASSERTION(e2);
    }
    function Wp(t22) {
      let e2 = "", r2 = t22.length, o2 = t22[0] === "-" ? 1 : 0;
      for (;r2 >= o2 + 4; r2 -= 3)
        e2 = `_${t22.slice(r2 - 3, r2)}${e2}`;
      return `${t22.slice(0, r2)}${e2}`;
    }
    function l_(t22, e2, r2) {
      if (typeof e2 == "function")
        return vn(e2.length <= r2.length, `Code: ${t22}; The provided arguments length (${r2.length}) does not match the required ones (${e2.length}).`), e2(...r2);
      let o2 = (e2.match(/%[dfijoOs]/g) || []).length;
      return vn(o2 === r2.length, `Code: ${t22}; The provided arguments length (${r2.length}) does not match the required ones (${o2}).`), r2.length === 0 ? e2 : n_(e2, ...r2);
    }
    function zt(t22, e2, r2) {
      r2 || (r2 = Error);

      class o2 extends r2 {
        constructor(...p2) {
          super(l_(t22, e2, p2));
        }
        toString() {
          return `${this.name} [${t22}]: ${this.message}`;
        }
      }
      Object.defineProperties(o2.prototype, { name: { value: r2.name, writable: true, enumerable: false, configurable: true }, toString: { value() {
        return `${this.name} [${t22}]: ${this.message}`;
      }, writable: true, enumerable: false, configurable: true } }), o2.prototype.code = t22, o2.prototype[o_] = true, Po[t22] = o2;
    }
    function Kp(t22) {
      let e2 = u_ + t22.name;
      return Object.defineProperty(t22, "name", { value: e2 }), t22;
    }
    function d_(t22, e2) {
      if (t22 && e2 && t22 !== e2) {
        if (Array.isArray(e2.errors))
          return e2.errors.push(t22), e2;
        let r2 = new a_([e2, t22], e2.message);
        return r2.code = e2.code, r2;
      }
      return t22 || e2;
    }
    var _h = class extends Error {
      constructor(e2 = "The operation was aborted", r2 = undefined) {
        if (r2 !== undefined && typeof r2 != "object")
          throw new Po.ERR_INVALID_ARG_TYPE("options", "Object", r2);
        super(e2, r2), this.code = "ABORT_ERR", this.name = "AbortError";
      }
    };
    zt("ERR_ASSERTION", "%s", Error);
    zt("ERR_INVALID_ARG_TYPE", (t22, e2, r2) => {
      vn(typeof t22 == "string", "'name' must be a string"), Array.isArray(e2) || (e2 = [e2]);
      let o2 = "The ";
      t22.endsWith(" argument") ? o2 += `${t22} ` : o2 += `"${t22}" ${t22.includes(".") ? "property" : "argument"} `, o2 += "must be ";
      let f2 = [], p2 = [], m32 = [];
      for (let M3 of e2)
        vn(typeof M3 == "string", "All expected entries have to be of type string"), s_.includes(M3) ? f2.push(M3.toLowerCase()) : h_.test(M3) ? p2.push(M3) : (vn(M3 !== "object", 'The value "object" should be written as "Object"'), m32.push(M3));
      if (p2.length > 0) {
        let M3 = f2.indexOf("object");
        M3 !== -1 && (f2.splice(f2, M3, 1), p2.push("Object"));
      }
      if (f2.length > 0) {
        switch (f2.length) {
          case 1:
            o2 += `of type ${f2[0]}`;
            break;
          case 2:
            o2 += `one of type ${f2[0]} or ${f2[1]}`;
            break;
          default: {
            let M3 = f2.pop();
            o2 += `one of type ${f2.join(", ")}, or ${M3}`;
          }
        }
        (p2.length > 0 || m32.length > 0) && (o2 += " or ");
      }
      if (p2.length > 0) {
        switch (p2.length) {
          case 1:
            o2 += `an instance of ${p2[0]}`;
            break;
          case 2:
            o2 += `an instance of ${p2[0]} or ${p2[1]}`;
            break;
          default: {
            let M3 = p2.pop();
            o2 += `an instance of ${p2.join(", ")}, or ${M3}`;
          }
        }
        m32.length > 0 && (o2 += " or ");
      }
      switch (m32.length) {
        case 0:
          break;
        case 1:
          m32[0].toLowerCase() !== m32[0] && (o2 += "an "), o2 += `${m32[0]}`;
          break;
        case 2:
          o2 += `one of ${m32[0]} or ${m32[1]}`;
          break;
        default: {
          let M3 = m32.pop();
          o2 += `one of ${m32.join(", ")}, or ${M3}`;
        }
      }
      if (r2 == null)
        o2 += `. Received ${r2}`;
      else if (typeof r2 == "function" && r2.name)
        o2 += `. Received function ${r2.name}`;
      else if (typeof r2 == "object") {
        var y22;
        (y22 = r2.constructor) !== null && y22 !== undefined && y22.name ? o2 += `. Received an instance of ${r2.constructor.name}` : o2 += `. Received ${Do(r2, { depth: -1 })}`;
      } else {
        let M3 = Do(r2, { colors: false });
        M3.length > 25 && (M3 = `${M3.slice(0, 25)}...`), o2 += `. Received type ${typeof r2} (${M3})`;
      }
      return o2;
    }, TypeError);
    zt("ERR_INVALID_ARG_VALUE", (t22, e2, r2 = "is invalid") => {
      let o2 = Do(e2);
      return o2.length > 128 && (o2 = o2.slice(0, 128) + "..."), `The ${t22.includes(".") ? "property" : "argument"} '${t22}' ${r2}. Received ${o2}`;
    }, TypeError);
    zt("ERR_INVALID_RETURN_VALUE", (t22, e2, r2) => {
      var o2;
      let f2 = r2 != null && (o2 = r2.constructor) !== null && o2 !== undefined && o2.name ? `instance of ${r2.constructor.name}` : `type ${typeof r2}`;
      return `Expected ${t22} to be returned from the "${e2}" function but got ${f2}.`;
    }, TypeError);
    zt("ERR_MISSING_ARGS", (...t22) => {
      vn(t22.length > 0, "At least one arg needs to be specified");
      let e2, r2 = t22.length;
      switch (t22 = (Array.isArray(t22) ? t22 : [t22]).map((o2) => `"${o2}"`).join(" or "), r2) {
        case 1:
          e2 += `The ${t22[0]} argument`;
          break;
        case 2:
          e2 += `The ${t22[0]} and ${t22[1]} arguments`;
          break;
        default:
          {
            let o2 = t22.pop();
            e2 += `The ${t22.join(", ")}, and ${o2} arguments`;
          }
          break;
      }
      return `${e2} must be specified`;
    }, TypeError);
    zt("ERR_OUT_OF_RANGE", (t22, e2, r2) => {
      vn(e2, 'Missing "range" argument');
      let o2;
      return Number.isInteger(r2) && Math.abs(r2) > 2 ** 32 ? o2 = Wp(String(r2)) : typeof r2 == "bigint" ? (o2 = String(r2), (r2 > 2n ** 32n || r2 < -(2n ** 32n)) && (o2 = Wp(o2)), o2 += "n") : o2 = Do(r2), `The value of "${t22}" is out of range. It must be ${e2}. Received ${o2}`;
    }, RangeError);
    zt("ERR_MULTIPLE_CALLBACK", "Callback called multiple times", Error);
    zt("ERR_METHOD_NOT_IMPLEMENTED", "The %s method is not implemented", Error);
    zt("ERR_STREAM_ALREADY_FINISHED", "Cannot call %s after a stream was finished", Error);
    zt("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable", Error);
    zt("ERR_STREAM_DESTROYED", "Cannot call %s after a stream was destroyed", Error);
    zt("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
    zt("ERR_STREAM_PREMATURE_CLOSE", "Premature close", Error);
    zt("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF", Error);
    zt("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event", Error);
    zt("ERR_STREAM_WRITE_AFTER_END", "write after end", Error);
    zt("ERR_UNKNOWN_ENCODING", "Unknown encoding: %s", TypeError);
    jp.exports = { AbortError: _h, aggregateTwoErrors: Kp(d_), hideStackFrames: Kp, codes: Po };
  });
  pa = T2((TI, Qp) => {
    var { ArrayIsArray: $p, ArrayPrototypeIncludes: Gp, ArrayPrototypeJoin: Yp, ArrayPrototypeMap: c_, NumberIsInteger: Sh, NumberIsNaN: p_, NumberMAX_SAFE_INTEGER: v_, NumberMIN_SAFE_INTEGER: b_, NumberParseInt: m_, ObjectPrototypeHasOwnProperty: g_, RegExpPrototypeExec: y_, String: w_, StringPrototypeToUpperCase: M_, StringPrototypeTrim: __ } = Tt(), { hideStackFrames: Ir, codes: { ERR_SOCKET_BAD_PORT: x_, ERR_INVALID_ARG_TYPE: tr, ERR_INVALID_ARG_VALUE: Co, ERR_OUT_OF_RANGE: bn, ERR_UNKNOWN_SIGNAL: Zp } } = Jt(), { normalizeEncoding: S_ } = Gr(), { isAsyncFunction: E_, isArrayBufferView: A_ } = Gr().types, Vp = {};
    function R_(t22) {
      return t22 === (t22 | 0);
    }
    function B_(t22) {
      return t22 === t22 >>> 0;
    }
    var q_ = /^[0-7]+$/, I_ = "must be a 32-bit unsigned integer or an octal string";
    function T_(t22, e2, r2) {
      if (typeof t22 > "u" && (t22 = r2), typeof t22 == "string") {
        if (y_(q_, t22) === null)
          throw new Co(e2, t22, I_);
        t22 = m_(t22, 8);
      }
      return Xp(t22, e2), t22;
    }
    var k_ = Ir((t22, e2, r2 = b_, o2 = v_) => {
      if (typeof t22 != "number")
        throw new tr(e2, "number", t22);
      if (!Sh(t22))
        throw new bn(e2, "an integer", t22);
      if (t22 < r2 || t22 > o2)
        throw new bn(e2, `>= ${r2} && <= ${o2}`, t22);
    }), L_ = Ir((t22, e2, r2 = -2147483648, o2 = 2147483647) => {
      if (typeof t22 != "number")
        throw new tr(e2, "number", t22);
      if (!Sh(t22))
        throw new bn(e2, "an integer", t22);
      if (t22 < r2 || t22 > o2)
        throw new bn(e2, `>= ${r2} && <= ${o2}`, t22);
    }), Xp = Ir((t22, e2, r2 = false) => {
      if (typeof t22 != "number")
        throw new tr(e2, "number", t22);
      if (!Sh(t22))
        throw new bn(e2, "an integer", t22);
      let o2 = r2 ? 1 : 0, f2 = 4294967295;
      if (t22 < o2 || t22 > f2)
        throw new bn(e2, `>= ${o2} && <= ${f2}`, t22);
    });
    function Jp(t22, e2) {
      if (typeof t22 != "string")
        throw new tr(e2, "string", t22);
    }
    function N_(t22, e2, r2 = undefined, o2) {
      if (typeof t22 != "number")
        throw new tr(e2, "number", t22);
      if (r2 != null && t22 < r2 || o2 != null && t22 > o2 || (r2 != null || o2 != null) && p_(t22))
        throw new bn(e2, `${r2 != null ? `>= ${r2}` : ""}${r2 != null && o2 != null ? " && " : ""}${o2 != null ? `<= ${o2}` : ""}`, t22);
    }
    var D_ = Ir((t22, e2, r2) => {
      if (!Gp(r2, t22)) {
        let o2 = Yp(c_(r2, (p2) => typeof p2 == "string" ? `'${p2}'` : w_(p2)), ", "), f2 = "must be one of: " + o2;
        throw new Co(e2, t22, f2);
      }
    });
    function P_(t22, e2) {
      if (typeof t22 != "boolean")
        throw new tr(e2, "boolean", t22);
    }
    function xh(t22, e2, r2) {
      return t22 == null || !g_(t22, e2) ? r2 : t22[e2];
    }
    var C_ = Ir((t22, e2, r2 = null) => {
      let o2 = xh(r2, "allowArray", false), f2 = xh(r2, "allowFunction", false);
      if (!xh(r2, "nullable", false) && t22 === null || !o2 && $p(t22) || typeof t22 != "object" && (!f2 || typeof t22 != "function"))
        throw new tr(e2, "Object", t22);
    }), O_ = Ir((t22, e2, r2 = 0) => {
      if (!$p(t22))
        throw new tr(e2, "Array", t22);
      if (t22.length < r2) {
        let o2 = `must be longer than ${r2}`;
        throw new Co(e2, t22, o2);
      }
    });
    function F_(t22, e2 = "signal") {
      if (Jp(t22, e2), Vp[t22] === undefined)
        throw Vp[M_(t22)] !== undefined ? new Zp(t22 + " (signals must use all capital letters)") : new Zp(t22);
    }
    var U_ = Ir((t22, e2 = "buffer") => {
      if (!A_(t22))
        throw new tr(e2, ["Buffer", "TypedArray", "DataView"], t22);
    });
    function z_(t22, e2) {
      let r2 = S_(e2), o2 = t22.length;
      if (r2 === "hex" && o2 % 2 !== 0)
        throw new Co("encoding", e2, `is invalid for data of length ${o2}`);
    }
    function H_(t22, e2 = "Port", r2 = true) {
      if (typeof t22 != "number" && typeof t22 != "string" || typeof t22 == "string" && __(t22).length === 0 || +t22 !== +t22 >>> 0 || t22 > 65535 || t22 === 0 && !r2)
        throw new x_(e2, t22, r2);
      return t22 | 0;
    }
    var W_ = Ir((t22, e2) => {
      if (t22 !== undefined && (t22 === null || typeof t22 != "object" || !("aborted" in t22)))
        throw new tr(e2, "AbortSignal", t22);
    }), K_ = Ir((t22, e2) => {
      if (typeof t22 != "function")
        throw new tr(e2, "Function", t22);
    }), j_ = Ir((t22, e2) => {
      if (typeof t22 != "function" || E_(t22))
        throw new tr(e2, "Function", t22);
    }), Z_ = Ir((t22, e2) => {
      if (t22 !== undefined)
        throw new tr(e2, "undefined", t22);
    });
    function V_(t22, e2, r2) {
      if (!Gp(r2, t22))
        throw new tr(e2, `('${Yp(r2, "|")}')`, t22);
    }
    Qp.exports = { isInt32: R_, isUint32: B_, parseFileMode: T_, validateArray: O_, validateBoolean: P_, validateBuffer: U_, validateEncoding: z_, validateFunction: K_, validateInt32: L_, validateInteger: k_, validateNumber: N_, validateObject: C_, validateOneOf: D_, validatePlainFunction: j_, validatePort: H_, validateSignalName: F_, validateString: Jp, validateUint32: Xp, validateUndefined: Z_, validateUnion: V_, validateAbortSignal: W_ };
  });
  Rh = T2((kI, i1) => {
    var dt = i1.exports = {}, Yr, Xr;
    function Eh() {
      throw new Error("setTimeout has not been defined");
    }
    function Ah() {
      throw new Error("clearTimeout has not been defined");
    }
    (function() {
      try {
        typeof setTimeout == "function" ? Yr = setTimeout : Yr = Eh;
      } catch {
        Yr = Eh;
      }
      try {
        typeof clearTimeout == "function" ? Xr = clearTimeout : Xr = Ah;
      } catch {
        Xr = Ah;
      }
    })();
    function e1(t22) {
      if (Yr === setTimeout)
        return setTimeout(t22, 0);
      if ((Yr === Eh || !Yr) && setTimeout)
        return Yr = setTimeout, setTimeout(t22, 0);
      try {
        return Yr(t22, 0);
      } catch {
        try {
          return Yr.call(null, t22, 0);
        } catch {
          return Yr.call(this, t22, 0);
        }
      }
    }
    function $_(t22) {
      if (Xr === clearTimeout)
        return clearTimeout(t22);
      if ((Xr === Ah || !Xr) && clearTimeout)
        return Xr = clearTimeout, clearTimeout(t22);
      try {
        return Xr(t22);
      } catch {
        try {
          return Xr.call(null, t22);
        } catch {
          return Xr.call(this, t22);
        }
      }
    }
    var pi = [], nf = false, mn, Oo = -1;
    function G_() {
      !nf || !mn || (nf = false, mn.length ? pi = mn.concat(pi) : Oo = -1, pi.length && t1());
    }
    function t1() {
      if (!nf) {
        var t22 = e1(G_);
        nf = true;
        for (var e2 = pi.length;e2; ) {
          for (mn = pi, pi = [];++Oo < e2; )
            mn && mn[Oo].run();
          Oo = -1, e2 = pi.length;
        }
        mn = null, nf = false, $_(t22);
      }
    }
    dt.nextTick = function(t22) {
      var e2 = new Array(arguments.length - 1);
      if (arguments.length > 1)
        for (var r2 = 1;r2 < arguments.length; r2++)
          e2[r2 - 1] = arguments[r2];
      pi.push(new r1(t22, e2)), pi.length === 1 && !nf && e1(t1);
    };
    function r1(t22, e2) {
      this.fun = t22, this.array = e2;
    }
    r1.prototype.run = function() {
      this.fun.apply(null, this.array);
    };
    dt.title = "browser";
    dt.browser = true;
    dt.env = {};
    dt.argv = [];
    dt.version = "";
    dt.versions = {};
    function vi() {
    }
    dt.on = vi;
    dt.addListener = vi;
    dt.once = vi;
    dt.off = vi;
    dt.removeListener = vi;
    dt.removeAllListeners = vi;
    dt.emit = vi;
    dt.prependListener = vi;
    dt.prependOnceListener = vi;
    dt.listeners = function(t22) {
      return [];
    };
    dt.binding = function(t22) {
      throw new Error("process.binding is not supported");
    };
    dt.cwd = function() {
      return "/";
    };
    dt.chdir = function(t22) {
      throw new Error("process.chdir is not supported");
    };
    dt.umask = function() {
      return 0;
    };
  });
  pr = {};
  Ja(pr, { default: () => Y_ });
  Oi = R02(() => {
    ot(pr, rn(Rh()));
    Y_ = rn(Rh());
  });
  Fi = T2((NI, v1) => {
    var { Symbol: Fo, SymbolAsyncIterator: n1, SymbolIterator: f1 } = Tt(), a1 = Fo("kDestroyed"), o1 = Fo("kIsErrored"), Bh = Fo("kIsReadable"), s1 = Fo("kIsDisturbed");
    function Uo(t22, e2 = false) {
      var r2;
      return !!(t22 && typeof t22.pipe == "function" && typeof t22.on == "function" && (!e2 || typeof t22.pause == "function" && typeof t22.resume == "function") && (!t22._writableState || ((r2 = t22._readableState) === null || r2 === undefined ? undefined : r2.readable) !== false) && (!t22._writableState || t22._readableState));
    }
    function zo(t22) {
      var e2;
      return !!(t22 && typeof t22.write == "function" && typeof t22.on == "function" && (!t22._readableState || ((e2 = t22._writableState) === null || e2 === undefined ? undefined : e2.writable) !== false));
    }
    function X_(t22) {
      return !!(t22 && typeof t22.pipe == "function" && t22._readableState && typeof t22.on == "function" && typeof t22.write == "function");
    }
    function gn(t22) {
      return t22 && (t22._readableState || t22._writableState || typeof t22.write == "function" && typeof t22.on == "function" || typeof t22.pipe == "function" && typeof t22.on == "function");
    }
    function J_(t22, e2) {
      return t22 == null ? false : e2 === true ? typeof t22[n1] == "function" : e2 === false ? typeof t22[f1] == "function" : typeof t22[n1] == "function" || typeof t22[f1] == "function";
    }
    function Ho(t22) {
      if (!gn(t22))
        return null;
      let { _writableState: e2, _readableState: r2 } = t22, o2 = e2 || r2;
      return !!(t22.destroyed || t22[a1] || o2 != null && o2.destroyed);
    }
    function h1(t22) {
      if (!zo(t22))
        return null;
      if (t22.writableEnded === true)
        return true;
      let e2 = t22._writableState;
      return e2 != null && e2.errored ? false : typeof e2?.ended != "boolean" ? null : e2.ended;
    }
    function Q_(t22, e2) {
      if (!zo(t22))
        return null;
      if (t22.writableFinished === true)
        return true;
      let r2 = t22._writableState;
      return r2 != null && r2.errored ? false : typeof r2?.finished != "boolean" ? null : !!(r2.finished || e2 === false && r2.ended === true && r2.length === 0);
    }
    function e8(t22) {
      if (!Uo(t22))
        return null;
      if (t22.readableEnded === true)
        return true;
      let e2 = t22._readableState;
      return !e2 || e2.errored ? false : typeof e2?.ended != "boolean" ? null : e2.ended;
    }
    function u1(t22, e2) {
      if (!Uo(t22))
        return null;
      let r2 = t22._readableState;
      return r2 != null && r2.errored ? false : typeof r2?.endEmitted != "boolean" ? null : !!(r2.endEmitted || e2 === false && r2.ended === true && r2.length === 0);
    }
    function l1(t22) {
      return t22 && t22[Bh] != null ? t22[Bh] : typeof t22?.readable != "boolean" ? null : Ho(t22) ? false : Uo(t22) && t22.readable && !u1(t22);
    }
    function d1(t22) {
      return typeof t22?.writable != "boolean" ? null : Ho(t22) ? false : zo(t22) && t22.writable && !h1(t22);
    }
    function t8(t22, e2) {
      return gn(t22) ? Ho(t22) ? true : !(e2?.readable !== false && l1(t22) || e2?.writable !== false && d1(t22)) : null;
    }
    function r8(t22) {
      var e2, r2;
      return gn(t22) ? t22.writableErrored ? t22.writableErrored : (e2 = (r2 = t22._writableState) === null || r2 === undefined ? undefined : r2.errored) !== null && e2 !== undefined ? e2 : null : null;
    }
    function i8(t22) {
      var e2, r2;
      return gn(t22) ? t22.readableErrored ? t22.readableErrored : (e2 = (r2 = t22._readableState) === null || r2 === undefined ? undefined : r2.errored) !== null && e2 !== undefined ? e2 : null : null;
    }
    function n8(t22) {
      if (!gn(t22))
        return null;
      if (typeof t22.closed == "boolean")
        return t22.closed;
      let { _writableState: e2, _readableState: r2 } = t22;
      return typeof e2?.closed == "boolean" || typeof r2?.closed == "boolean" ? e2?.closed || r2?.closed : typeof t22._closed == "boolean" && c1(t22) ? t22._closed : null;
    }
    function c1(t22) {
      return typeof t22._closed == "boolean" && typeof t22._defaultKeepAlive == "boolean" && typeof t22._removedConnection == "boolean" && typeof t22._removedContLen == "boolean";
    }
    function p1(t22) {
      return typeof t22._sent100 == "boolean" && c1(t22);
    }
    function f8(t22) {
      var e2;
      return typeof t22._consuming == "boolean" && typeof t22._dumped == "boolean" && ((e2 = t22.req) === null || e2 === undefined ? undefined : e2.upgradeOrConnect) === undefined;
    }
    function a8(t22) {
      if (!gn(t22))
        return null;
      let { _writableState: e2, _readableState: r2 } = t22, o2 = e2 || r2;
      return !o2 && p1(t22) || !!(o2 && o2.autoDestroy && o2.emitClose && o2.closed === false);
    }
    function o8(t22) {
      var e2;
      return !!(t22 && ((e2 = t22[s1]) !== null && e2 !== undefined ? e2 : t22.readableDidRead || t22.readableAborted));
    }
    function s8(t22) {
      var e2, r2, o2, f2, p2, m32, y22, M3, x5, S2;
      return !!(t22 && ((e2 = (r2 = (o2 = (f2 = (p2 = (m32 = t22[o1]) !== null && m32 !== undefined ? m32 : t22.readableErrored) !== null && p2 !== undefined ? p2 : t22.writableErrored) !== null && f2 !== undefined ? f2 : (y22 = t22._readableState) === null || y22 === undefined ? undefined : y22.errorEmitted) !== null && o2 !== undefined ? o2 : (M3 = t22._writableState) === null || M3 === undefined ? undefined : M3.errorEmitted) !== null && r2 !== undefined ? r2 : (x5 = t22._readableState) === null || x5 === undefined ? undefined : x5.errored) !== null && e2 !== undefined ? e2 : (S2 = t22._writableState) === null || S2 === undefined ? undefined : S2.errored));
    }
    v1.exports = { kDestroyed: a1, isDisturbed: o8, kIsDisturbed: s1, isErrored: s8, kIsErrored: o1, isReadable: l1, kIsReadable: Bh, isClosed: n8, isDestroyed: Ho, isDuplexNodeStream: X_, isFinished: t8, isIterable: J_, isReadableNodeStream: Uo, isReadableEnded: e8, isReadableFinished: u1, isReadableErrored: i8, isNodeStream: gn, isWritable: d1, isWritableNodeStream: zo, isWritableEnded: h1, isWritableFinished: Q_, isWritableErrored: r8, isServerRequest: f8, isServerResponse: p1, willEmitClose: a8 };
  });
  Ui = T2((DI, Ih) => {
    var ff = (Oi(), ur(pr)), { AbortError: h8, codes: u8 } = Jt(), { ERR_INVALID_ARG_TYPE: l8, ERR_STREAM_PREMATURE_CLOSE: b1 } = u8, { kEmptyObject: m1, once: g1 } = Gr(), { validateAbortSignal: d8, validateFunction: c8, validateObject: p8 } = pa(), { Promise: v8 } = Tt(), { isClosed: b8, isReadable: y1, isReadableNodeStream: qh, isReadableFinished: w1, isReadableErrored: m8, isWritable: M1, isWritableNodeStream: _1, isWritableFinished: x1, isWritableErrored: g8, isNodeStream: y8, willEmitClose: w8 } = Fi();
    function M8(t22) {
      return t22.setHeader && typeof t22.abort == "function";
    }
    var _8 = () => {
    };
    function S1(t22, e2, r2) {
      var o2, f2;
      arguments.length === 2 ? (r2 = e2, e2 = m1) : e2 == null ? e2 = m1 : p8(e2, "options"), c8(r2, "callback"), d8(e2.signal, "options.signal"), r2 = g1(r2);
      let p2 = (o2 = e2.readable) !== null && o2 !== undefined ? o2 : qh(t22), m32 = (f2 = e2.writable) !== null && f2 !== undefined ? f2 : _1(t22);
      if (!y8(t22))
        throw new l8("stream", "Stream", t22);
      let { _writableState: y22, _readableState: M3 } = t22, x5 = () => {
        t22.writable || B5();
      }, S2 = w8(t22) && qh(t22) === p2 && _1(t22) === m32, E4 = x1(t22, false), B5 = () => {
        E4 = true, t22.destroyed && (S2 = false), !(S2 && (!t22.readable || p2)) && (!p2 || q) && r2.call(t22);
      }, q = w1(t22, false), L2 = () => {
        q = true, t22.destroyed && (S2 = false), !(S2 && (!t22.writable || m32)) && (!m32 || E4) && r2.call(t22);
      }, ge = (xe) => {
        r2.call(t22, xe);
      }, _e = b8(t22), N4 = () => {
        _e = true;
        let xe = g8(t22) || m8(t22);
        if (xe && typeof xe != "boolean")
          return r2.call(t22, xe);
        if (p2 && !q && qh(t22, true) && !w1(t22, false))
          return r2.call(t22, new b1);
        if (m32 && !E4 && !x1(t22, false))
          return r2.call(t22, new b1);
        r2.call(t22);
      }, we = () => {
        t22.req.on("finish", B5);
      };
      M8(t22) ? (t22.on("complete", B5), S2 || t22.on("abort", N4), t22.req ? we() : t22.on("request", we)) : m32 && !y22 && (t22.on("end", x5), t22.on("close", x5)), !S2 && typeof t22.aborted == "boolean" && t22.on("aborted", N4), t22.on("end", L2), t22.on("finish", B5), e2.error !== false && t22.on("error", ge), t22.on("close", N4), _e ? ff.nextTick(N4) : y22 != null && y22.errorEmitted || M3 != null && M3.errorEmitted ? S2 || ff.nextTick(N4) : (!p2 && (!S2 || y1(t22)) && (E4 || M1(t22) === false) || !m32 && (!S2 || M1(t22)) && (q || y1(t22) === false) || M3 && t22.req && t22.aborted) && ff.nextTick(N4);
      let ye = () => {
        r2 = _8, t22.removeListener("aborted", N4), t22.removeListener("complete", B5), t22.removeListener("abort", N4), t22.removeListener("request", we), t22.req && t22.req.removeListener("finish", B5), t22.removeListener("end", x5), t22.removeListener("close", x5), t22.removeListener("finish", B5), t22.removeListener("end", L2), t22.removeListener("error", ge), t22.removeListener("close", N4);
      };
      if (e2.signal && !_e) {
        let xe = () => {
          let Re = r2;
          ye(), Re.call(t22, new h8(undefined, { cause: e2.signal.reason }));
        };
        if (e2.signal.aborted)
          ff.nextTick(xe);
        else {
          let Re = r2;
          r2 = g1((...Ee) => {
            e2.signal.removeEventListener("abort", xe), Re.apply(t22, Ee);
          }), e2.signal.addEventListener("abort", xe);
        }
      }
      return ye;
    }
    function x8(t22, e2) {
      return new v8((r2, o2) => {
        S1(t22, e2, (f2) => {
          f2 ? o2(f2) : r2();
        });
      });
    }
    Ih.exports = S1;
    Ih.exports.finished = x8;
  });
  k1 = T2((PI, Lh) => {
    var B1 = globalThis.AbortController || No().AbortController, { codes: { ERR_INVALID_ARG_TYPE: va, ERR_MISSING_ARGS: S8, ERR_OUT_OF_RANGE: E8 }, AbortError: Jr } = Jt(), { validateAbortSignal: af, validateInteger: A8, validateObject: of } = pa(), R8 = Tt().Symbol("kWeak"), { finished: B8 } = Ui(), { ArrayPrototypePush: q8, MathFloor: I8, Number: T8, NumberIsNaN: k8, Promise: E1, PromiseReject: A1, PromisePrototypeThen: L8, Symbol: q1 } = Tt(), Wo = q1("kEmpty"), R1 = q1("kEof");
    function Ko(t22, e2) {
      if (typeof t22 != "function")
        throw new va("fn", ["Function", "AsyncFunction"], t22);
      e2 != null && of(e2, "options"), e2?.signal != null && af(e2.signal, "options.signal");
      let r2 = 1;
      return e2?.concurrency != null && (r2 = I8(e2.concurrency)), A8(r2, "concurrency", 1), async function* () {
        var f2, p2;
        let m32 = new B1, y22 = this, M3 = [], x5 = m32.signal, S2 = { signal: x5 }, E4 = () => m32.abort();
        e2 != null && (f2 = e2.signal) !== null && f2 !== undefined && f2.aborted && E4(), e2 == null || (p2 = e2.signal) === null || p2 === undefined || p2.addEventListener("abort", E4);
        let B5, q, L2 = false;
        function ge() {
          L2 = true;
        }
        async function _e() {
          try {
            for await (let ye of y22) {
              var N4;
              if (L2)
                return;
              if (x5.aborted)
                throw new Jr;
              try {
                ye = t22(ye, S2);
              } catch (xe) {
                ye = A1(xe);
              }
              ye !== Wo && (typeof ((N4 = ye) === null || N4 === undefined ? undefined : N4.catch) == "function" && ye.catch(ge), M3.push(ye), B5 && (B5(), B5 = null), !L2 && M3.length && M3.length >= r2 && await new E1((xe) => {
                q = xe;
              }));
            }
            M3.push(R1);
          } catch (ye) {
            let xe = A1(ye);
            L8(xe, undefined, ge), M3.push(xe);
          } finally {
            var we;
            L2 = true, B5 && (B5(), B5 = null), e2 == null || (we = e2.signal) === null || we === undefined || we.removeEventListener("abort", E4);
          }
        }
        _e();
        try {
          for (;; ) {
            for (;M3.length > 0; ) {
              let N4 = await M3[0];
              if (N4 === R1)
                return;
              if (x5.aborted)
                throw new Jr;
              N4 !== Wo && (yield N4), M3.shift(), q && (q(), q = null);
            }
            await new E1((N4) => {
              B5 = N4;
            });
          }
        } finally {
          m32.abort(), L2 = true, q && (q(), q = null);
        }
      }.call(this);
    }
    function N8(t22 = undefined) {
      return t22 != null && of(t22, "options"), t22?.signal != null && af(t22.signal, "options.signal"), async function* () {
        let r2 = 0;
        for await (let f2 of this) {
          var o2;
          if (t22 != null && (o2 = t22.signal) !== null && o2 !== undefined && o2.aborted)
            throw new Jr({ cause: t22.signal.reason });
          yield [r2++, f2];
        }
      }.call(this);
    }
    async function I1(t22, e2 = undefined) {
      for await (let r2 of kh.call(this, t22, e2))
        return true;
      return false;
    }
    async function D8(t22, e2 = undefined) {
      if (typeof t22 != "function")
        throw new va("fn", ["Function", "AsyncFunction"], t22);
      return !await I1.call(this, async (...r2) => !await t22(...r2), e2);
    }
    async function P8(t22, e2) {
      for await (let r2 of kh.call(this, t22, e2))
        return r2;
    }
    async function C8(t22, e2) {
      if (typeof t22 != "function")
        throw new va("fn", ["Function", "AsyncFunction"], t22);
      async function r2(o2, f2) {
        return await t22(o2, f2), Wo;
      }
      for await (let o2 of Ko.call(this, r2, e2))
        ;
    }
    function kh(t22, e2) {
      if (typeof t22 != "function")
        throw new va("fn", ["Function", "AsyncFunction"], t22);
      async function r2(o2, f2) {
        return await t22(o2, f2) ? o2 : Wo;
      }
      return Ko.call(this, r2, e2);
    }
    var Th = class extends S8 {
      constructor() {
        super("reduce"), this.message = "Reduce of an empty stream requires an initial value";
      }
    };
    async function O8(t22, e2, r2) {
      var o2;
      if (typeof t22 != "function")
        throw new va("reducer", ["Function", "AsyncFunction"], t22);
      r2 != null && of(r2, "options"), r2?.signal != null && af(r2.signal, "options.signal");
      let f2 = arguments.length > 1;
      if (r2 != null && (o2 = r2.signal) !== null && o2 !== undefined && o2.aborted) {
        let x5 = new Jr(undefined, { cause: r2.signal.reason });
        throw this.once("error", () => {
        }), await B8(this.destroy(x5)), x5;
      }
      let p2 = new B1, m32 = p2.signal;
      if (r2 != null && r2.signal) {
        let x5 = { once: true, [R8]: this };
        r2.signal.addEventListener("abort", () => p2.abort(), x5);
      }
      let y22 = false;
      try {
        for await (let x5 of this) {
          var M3;
          if (y22 = true, r2 != null && (M3 = r2.signal) !== null && M3 !== undefined && M3.aborted)
            throw new Jr;
          f2 ? e2 = await t22(e2, x5, { signal: m32 }) : (e2 = x5, f2 = true);
        }
        if (!y22 && !f2)
          throw new Th;
      } finally {
        p2.abort();
      }
      return e2;
    }
    async function F8(t22) {
      t22 != null && of(t22, "options"), t22?.signal != null && af(t22.signal, "options.signal");
      let e2 = [];
      for await (let o2 of this) {
        var r2;
        if (t22 != null && (r2 = t22.signal) !== null && r2 !== undefined && r2.aborted)
          throw new Jr(undefined, { cause: t22.signal.reason });
        q8(e2, o2);
      }
      return e2;
    }
    function U8(t22, e2) {
      let r2 = Ko.call(this, t22, e2);
      return async function* () {
        for await (let f2 of r2)
          yield* f2;
      }.call(this);
    }
    function T1(t22) {
      if (t22 = T8(t22), k8(t22))
        return 0;
      if (t22 < 0)
        throw new E8("number", ">= 0", t22);
      return t22;
    }
    function z8(t22, e2 = undefined) {
      return e2 != null && of(e2, "options"), e2?.signal != null && af(e2.signal, "options.signal"), t22 = T1(t22), async function* () {
        var o2;
        if (e2 != null && (o2 = e2.signal) !== null && o2 !== undefined && o2.aborted)
          throw new Jr;
        for await (let p2 of this) {
          var f2;
          if (e2 != null && (f2 = e2.signal) !== null && f2 !== undefined && f2.aborted)
            throw new Jr;
          t22-- <= 0 && (yield p2);
        }
      }.call(this);
    }
    function H8(t22, e2 = undefined) {
      return e2 != null && of(e2, "options"), e2?.signal != null && af(e2.signal, "options.signal"), t22 = T1(t22), async function* () {
        var o2;
        if (e2 != null && (o2 = e2.signal) !== null && o2 !== undefined && o2.aborted)
          throw new Jr;
        for await (let p2 of this) {
          var f2;
          if (e2 != null && (f2 = e2.signal) !== null && f2 !== undefined && f2.aborted)
            throw new Jr;
          if (t22-- > 0)
            yield p2;
          else
            return;
        }
      }.call(this);
    }
    Lh.exports.streamReturningOperators = { asIndexedPairs: N8, drop: z8, filter: kh, flatMap: U8, map: Ko, take: H8 };
    Lh.exports.promiseReturningOperators = { every: D8, forEach: C8, reduce: O8, toArray: F8, some: I1, find: P8 };
  });
  yn = T2((CI, U1) => {
    var zi = (Oi(), ur(pr)), { aggregateTwoErrors: W8, codes: { ERR_MULTIPLE_CALLBACK: K8 }, AbortError: j8 } = Jt(), { Symbol: D1 } = Tt(), { kDestroyed: Z8, isDestroyed: V8, isFinished: $8, isServerRequest: G8 } = Fi(), P1 = D1("kDestroy"), Nh = D1("kConstruct");
    function C1(t22, e2, r2) {
      t22 && (t22.stack, e2 && !e2.errored && (e2.errored = t22), r2 && !r2.errored && (r2.errored = t22));
    }
    function Y8(t22, e2) {
      let r2 = this._readableState, o2 = this._writableState, f2 = o2 || r2;
      return o2 && o2.destroyed || r2 && r2.destroyed ? (typeof e2 == "function" && e2(), this) : (C1(t22, o2, r2), o2 && (o2.destroyed = true), r2 && (r2.destroyed = true), f2.constructed ? L1(this, t22, e2) : this.once(P1, function(p2) {
        L1(this, W8(p2, t22), e2);
      }), this);
    }
    function L1(t22, e2, r2) {
      let o2 = false;
      function f2(p2) {
        if (o2)
          return;
        o2 = true;
        let { _readableState: m32, _writableState: y22 } = t22;
        C1(p2, y22, m32), y22 && (y22.closed = true), m32 && (m32.closed = true), typeof r2 == "function" && r2(p2), p2 ? zi.nextTick(X8, t22, p2) : zi.nextTick(O1, t22);
      }
      try {
        t22._destroy(e2 || null, f2);
      } catch (p2) {
        f2(p2);
      }
    }
    function X8(t22, e2) {
      Dh(t22, e2), O1(t22);
    }
    function O1(t22) {
      let { _readableState: e2, _writableState: r2 } = t22;
      r2 && (r2.closeEmitted = true), e2 && (e2.closeEmitted = true), (r2 && r2.emitClose || e2 && e2.emitClose) && t22.emit("close");
    }
    function Dh(t22, e2) {
      let { _readableState: r2, _writableState: o2 } = t22;
      o2 && o2.errorEmitted || r2 && r2.errorEmitted || (o2 && (o2.errorEmitted = true), r2 && (r2.errorEmitted = true), t22.emit("error", e2));
    }
    function J8() {
      let t22 = this._readableState, e2 = this._writableState;
      t22 && (t22.constructed = true, t22.closed = false, t22.closeEmitted = false, t22.destroyed = false, t22.errored = null, t22.errorEmitted = false, t22.reading = false, t22.ended = t22.readable === false, t22.endEmitted = t22.readable === false), e2 && (e2.constructed = true, e2.destroyed = false, e2.closed = false, e2.closeEmitted = false, e2.errored = null, e2.errorEmitted = false, e2.finalCalled = false, e2.prefinished = false, e2.ended = e2.writable === false, e2.ending = e2.writable === false, e2.finished = e2.writable === false);
    }
    function Ph(t22, e2, r2) {
      let { _readableState: o2, _writableState: f2 } = t22;
      if (f2 && f2.destroyed || o2 && o2.destroyed)
        return this;
      o2 && o2.autoDestroy || f2 && f2.autoDestroy ? t22.destroy(e2) : e2 && (e2.stack, f2 && !f2.errored && (f2.errored = e2), o2 && !o2.errored && (o2.errored = e2), r2 ? zi.nextTick(Dh, t22, e2) : Dh(t22, e2));
    }
    function Q8(t22, e2) {
      if (typeof t22._construct != "function")
        return;
      let { _readableState: r2, _writableState: o2 } = t22;
      r2 && (r2.constructed = false), o2 && (o2.constructed = false), t22.once(Nh, e2), !(t22.listenerCount(Nh) > 1) && zi.nextTick(e5, t22);
    }
    function e5(t22) {
      let e2 = false;
      function r2(o2) {
        if (e2) {
          Ph(t22, o2 ?? new K8);
          return;
        }
        e2 = true;
        let { _readableState: f2, _writableState: p2 } = t22, m32 = p2 || f2;
        f2 && (f2.constructed = true), p2 && (p2.constructed = true), m32.destroyed ? t22.emit(P1, o2) : o2 ? Ph(t22, o2, true) : zi.nextTick(t5, t22);
      }
      try {
        t22._construct(r2);
      } catch (o2) {
        r2(o2);
      }
    }
    function t5(t22) {
      t22.emit(Nh);
    }
    function N1(t22) {
      return t22 && t22.setHeader && typeof t22.abort == "function";
    }
    function F1(t22) {
      t22.emit("close");
    }
    function r5(t22, e2) {
      t22.emit("error", e2), zi.nextTick(F1, t22);
    }
    function i5(t22, e2) {
      !t22 || V8(t22) || (!e2 && !$8(t22) && (e2 = new j8), G8(t22) ? (t22.socket = null, t22.destroy(e2)) : N1(t22) ? t22.abort() : N1(t22.req) ? t22.req.abort() : typeof t22.destroy == "function" ? t22.destroy(e2) : typeof t22.close == "function" ? t22.close() : e2 ? zi.nextTick(r5, t22, e2) : zi.nextTick(F1, t22), t22.destroyed || (t22[Z8] = true));
    }
    U1.exports = { construct: Q8, destroyer: i5, destroy: Y8, undestroy: J8, errorOrDestroy: Ph };
  });
  Vo = T2((OI, H1) => {
    var { ArrayIsArray: n5, ObjectSetPrototypeOf: z1 } = Tt(), { EventEmitter: jo } = ki();
    function Zo(t22) {
      jo.call(this, t22);
    }
    z1(Zo.prototype, jo.prototype);
    z1(Zo, jo);
    Zo.prototype.pipe = function(t22, e2) {
      let r2 = this;
      function o2(S2) {
        t22.writable && t22.write(S2) === false && r2.pause && r2.pause();
      }
      r2.on("data", o2);
      function f2() {
        r2.readable && r2.resume && r2.resume();
      }
      t22.on("drain", f2), !t22._isStdio && (!e2 || e2.end !== false) && (r2.on("end", m32), r2.on("close", y22));
      let p2 = false;
      function m32() {
        p2 || (p2 = true, t22.end());
      }
      function y22() {
        p2 || (p2 = true, typeof t22.destroy == "function" && t22.destroy());
      }
      function M3(S2) {
        x5(), jo.listenerCount(this, "error") === 0 && this.emit("error", S2);
      }
      Ch(r2, "error", M3), Ch(t22, "error", M3);
      function x5() {
        r2.removeListener("data", o2), t22.removeListener("drain", f2), r2.removeListener("end", m32), r2.removeListener("close", y22), r2.removeListener("error", M3), t22.removeListener("error", M3), r2.removeListener("end", x5), r2.removeListener("close", x5), t22.removeListener("close", x5);
      }
      return r2.on("end", x5), r2.on("close", x5), t22.on("close", x5), t22.emit("pipe", r2), t22;
    };
    function Ch(t22, e2, r2) {
      if (typeof t22.prependListener == "function")
        return t22.prependListener(e2, r2);
      !t22._events || !t22._events[e2] ? t22.on(e2, r2) : n5(t22._events[e2]) ? t22._events[e2].unshift(r2) : t22._events[e2] = [r2, t22._events[e2]];
    }
    H1.exports = { Stream: Zo, prependListener: Ch };
  });
  Go = T2((FI, $o) => {
    var { AbortError: f5, codes: a5 } = Jt(), o5 = Ui(), { ERR_INVALID_ARG_TYPE: W1 } = a5, s5 = (t22, e2) => {
      if (typeof t22 != "object" || !("aborted" in t22))
        throw new W1(e2, "AbortSignal", t22);
    };
    function h5(t22) {
      return !!(t22 && typeof t22.pipe == "function");
    }
    $o.exports.addAbortSignal = function(e2, r2) {
      if (s5(e2, "signal"), !h5(r2))
        throw new W1("stream", "stream.Stream", r2);
      return $o.exports.addAbortSignalNoValidate(e2, r2);
    };
    $o.exports.addAbortSignalNoValidate = function(t22, e2) {
      if (typeof t22 != "object" || !("aborted" in t22))
        return e2;
      let r2 = () => {
        e2.destroy(new f5(undefined, { cause: t22.reason }));
      };
      return t22.aborted ? r2() : (t22.addEventListener("abort", r2), o5(e2, () => t22.removeEventListener("abort", r2))), e2;
    };
  });
  Z1 = T2((zI, j1) => {
    var { StringPrototypeSlice: K1, SymbolIterator: u5, TypedArrayPrototypeSet: Yo, Uint8Array: l5 } = Tt(), { Buffer: Oh } = Ut(), { inspect: d5 } = Gr();
    j1.exports = class {
      constructor() {
        this.head = null, this.tail = null, this.length = 0;
      }
      push(e2) {
        let r2 = { data: e2, next: null };
        this.length > 0 ? this.tail.next = r2 : this.head = r2, this.tail = r2, ++this.length;
      }
      unshift(e2) {
        let r2 = { data: e2, next: this.head };
        this.length === 0 && (this.tail = r2), this.head = r2, ++this.length;
      }
      shift() {
        if (this.length === 0)
          return;
        let e2 = this.head.data;
        return this.length === 1 ? this.head = this.tail = null : this.head = this.head.next, --this.length, e2;
      }
      clear() {
        this.head = this.tail = null, this.length = 0;
      }
      join(e2) {
        if (this.length === 0)
          return "";
        let r2 = this.head, o2 = "" + r2.data;
        for (;(r2 = r2.next) !== null; )
          o2 += e2 + r2.data;
        return o2;
      }
      concat(e2) {
        if (this.length === 0)
          return Oh.alloc(0);
        let r2 = Oh.allocUnsafe(e2 >>> 0), o2 = this.head, f2 = 0;
        for (;o2; )
          Yo(r2, o2.data, f2), f2 += o2.data.length, o2 = o2.next;
        return r2;
      }
      consume(e2, r2) {
        let o2 = this.head.data;
        if (e2 < o2.length) {
          let f2 = o2.slice(0, e2);
          return this.head.data = o2.slice(e2), f2;
        }
        return e2 === o2.length ? this.shift() : r2 ? this._getString(e2) : this._getBuffer(e2);
      }
      first() {
        return this.head.data;
      }
      *[u5]() {
        for (let e2 = this.head;e2; e2 = e2.next)
          yield e2.data;
      }
      _getString(e2) {
        let r2 = "", o2 = this.head, f2 = 0;
        do {
          let p2 = o2.data;
          if (e2 > p2.length)
            r2 += p2, e2 -= p2.length;
          else {
            e2 === p2.length ? (r2 += p2, ++f2, o2.next ? this.head = o2.next : this.head = this.tail = null) : (r2 += K1(p2, 0, e2), this.head = o2, o2.data = K1(p2, e2));
            break;
          }
          ++f2;
        } while ((o2 = o2.next) !== null);
        return this.length -= f2, r2;
      }
      _getBuffer(e2) {
        let r2 = Oh.allocUnsafe(e2), o2 = e2, f2 = this.head, p2 = 0;
        do {
          let m32 = f2.data;
          if (e2 > m32.length)
            Yo(r2, m32, o2 - e2), e2 -= m32.length;
          else {
            e2 === m32.length ? (Yo(r2, m32, o2 - e2), ++p2, f2.next ? this.head = f2.next : this.head = this.tail = null) : (Yo(r2, new l5(m32.buffer, m32.byteOffset, e2), o2 - e2), this.head = f2, f2.data = m32.slice(e2));
            break;
          }
          ++p2;
        } while ((f2 = f2.next) !== null);
        return this.length -= p2, r2;
      }
      [Symbol.for("nodejs.util.inspect.custom")](e2, r2) {
        return d5(this, { ...r2, depth: 0, customInspect: false });
      }
    };
  });
  Xo = T2((HI, $1) => {
    var { MathFloor: c5, NumberIsInteger: p5 } = Tt(), { ERR_INVALID_ARG_VALUE: v5 } = Jt().codes;
    function b5(t22, e2, r2) {
      return t22.highWaterMark != null ? t22.highWaterMark : e2 ? t22[r2] : null;
    }
    function V1(t22) {
      return t22 ? 16 : 16 * 1024;
    }
    function m5(t22, e2, r2, o2) {
      let f2 = b5(e2, o2, r2);
      if (f2 != null) {
        if (!p5(f2) || f2 < 0) {
          let p2 = o2 ? `options.${r2}` : "options.highWaterMark";
          throw new v5(p2, f2);
        }
        return c5(f2);
      }
      return V1(t22.objectMode);
    }
    $1.exports = { getHighWaterMark: m5, getDefaultHighWaterMark: V1 };
  });
  Fh = T2((WI, J1) => {
    var G1 = (Oi(), ur(pr)), { PromisePrototypeThen: g5, SymbolAsyncIterator: Y1, SymbolIterator: X1 } = Tt(), { Buffer: y5 } = Ut(), { ERR_INVALID_ARG_TYPE: w5, ERR_STREAM_NULL_VALUES: M5 } = Jt().codes;
    function _5(t22, e2, r2) {
      let o2;
      if (typeof e2 == "string" || e2 instanceof y5)
        return new t22({ objectMode: true, ...r2, read() {
          this.push(e2), this.push(null);
        } });
      let f2;
      if (e2 && e2[Y1])
        f2 = true, o2 = e2[Y1]();
      else if (e2 && e2[X1])
        f2 = false, o2 = e2[X1]();
      else
        throw new w5("iterable", ["Iterable"], e2);
      let p2 = new t22({ objectMode: true, highWaterMark: 1, ...r2 }), m32 = false;
      p2._read = function() {
        m32 || (m32 = true, M3());
      }, p2._destroy = function(x5, S2) {
        g5(y22(x5), () => G1.nextTick(S2, x5), (E4) => G1.nextTick(S2, E4 || x5));
      };
      async function y22(x5) {
        let S2 = x5 != null, E4 = typeof o2.throw == "function";
        if (S2 && E4) {
          let { value: B5, done: q } = await o2.throw(x5);
          if (await B5, q)
            return;
        }
        if (typeof o2.return == "function") {
          let { value: B5 } = await o2.return();
          await B5;
        }
      }
      async function M3() {
        for (;; ) {
          try {
            let { value: x5, done: S2 } = f2 ? await o2.next() : o2.next();
            if (S2)
              p2.push(null);
            else {
              let E4 = x5 && typeof x5.then == "function" ? await x5 : x5;
              if (E4 === null)
                throw m32 = false, new M5;
              if (p2.push(E4))
                continue;
              m32 = false;
            }
          } catch (x5) {
            p2.destroy(x5);
          }
          break;
        }
      }
      return p2;
    }
    J1.exports = _5;
  });
  ba = T2((KI, lv) => {
    var Tr = (Oi(), ur(pr)), { ArrayPrototypeIndexOf: x5, NumberIsInteger: S5, NumberIsNaN: E5, NumberParseInt: A52, ObjectDefineProperties: tv, ObjectKeys: R5, ObjectSetPrototypeOf: rv, Promise: B5, SafeSet: q5, SymbolAsyncIterator: I5, Symbol: T5 } = Tt();
    lv.exports = Le;
    Le.ReadableState = jh;
    var { EventEmitter: k5 } = ki(), { Stream: Hi, prependListener: L5 } = Vo(), { Buffer: Uh } = Ut(), { addAbortSignal: N5 } = Go(), D5 = Ui(), Pe = Gr().debuglog("stream", (t22) => {
      Pe = t22;
    }), P5 = Z1(), hf = yn(), { getHighWaterMark: C5, getDefaultHighWaterMark: O5 } = Xo(), { aggregateTwoErrors: Q1, codes: { ERR_INVALID_ARG_TYPE: F5, ERR_METHOD_NOT_IMPLEMENTED: U5, ERR_OUT_OF_RANGE: z5, ERR_STREAM_PUSH_AFTER_EOF: H5, ERR_STREAM_UNSHIFT_AFTER_END_EVENT: W5 } } = Jt(), { validateObject: K5 } = pa(), wn = T5("kPaused"), { StringDecoder: iv } = co(), j5 = Fh();
    rv(Le.prototype, Hi.prototype);
    rv(Le, Hi);
    var zh = () => {
    }, { errorOrDestroy: sf } = hf;
    function jh(t22, e2, r2) {
      typeof r2 != "boolean" && (r2 = e2 instanceof Qr()), this.objectMode = !!(t22 && t22.objectMode), r2 && (this.objectMode = this.objectMode || !!(t22 && t22.readableObjectMode)), this.highWaterMark = t22 ? C5(this, t22, "readableHighWaterMark", r2) : O5(false), this.buffer = new P5, this.length = 0, this.pipes = [], this.flowing = null, this.ended = false, this.endEmitted = false, this.reading = false, this.constructed = true, this.sync = true, this.needReadable = false, this.emittedReadable = false, this.readableListening = false, this.resumeScheduled = false, this[wn] = null, this.errorEmitted = false, this.emitClose = !t22 || t22.emitClose !== false, this.autoDestroy = !t22 || t22.autoDestroy !== false, this.destroyed = false, this.errored = null, this.closed = false, this.closeEmitted = false, this.defaultEncoding = t22 && t22.defaultEncoding || "utf8", this.awaitDrainWriters = null, this.multiAwaitDrain = false, this.readingMore = false, this.dataEmitted = false, this.decoder = null, this.encoding = null, t22 && t22.encoding && (this.decoder = new iv(t22.encoding), this.encoding = t22.encoding);
    }
    function Le(t22) {
      if (!(this instanceof Le))
        return new Le(t22);
      let e2 = this instanceof Qr();
      this._readableState = new jh(t22, this, e2), t22 && (typeof t22.read == "function" && (this._read = t22.read), typeof t22.destroy == "function" && (this._destroy = t22.destroy), typeof t22.construct == "function" && (this._construct = t22.construct), t22.signal && !e2 && N5(t22.signal, this)), Hi.call(this, t22), hf.construct(this, () => {
        this._readableState.needReadable && Jo(this, this._readableState);
      });
    }
    Le.prototype.destroy = hf.destroy;
    Le.prototype._undestroy = hf.undestroy;
    Le.prototype._destroy = function(t22, e2) {
      e2(t22);
    };
    Le.prototype[k5.captureRejectionSymbol] = function(t22) {
      this.destroy(t22);
    };
    Le.prototype.push = function(t22, e2) {
      return nv(this, t22, e2, false);
    };
    Le.prototype.unshift = function(t22, e2) {
      return nv(this, t22, e2, true);
    };
    function nv(t22, e2, r2, o2) {
      Pe("readableAddChunk", e2);
      let f2 = t22._readableState, p2;
      if (f2.objectMode || (typeof e2 == "string" ? (r2 = r2 || f2.defaultEncoding, f2.encoding !== r2 && (o2 && f2.encoding ? e2 = Uh.from(e2, r2).toString(f2.encoding) : (e2 = Uh.from(e2, r2), r2 = ""))) : e2 instanceof Uh ? r2 = "" : Hi._isUint8Array(e2) ? (e2 = Hi._uint8ArrayToBuffer(e2), r2 = "") : e2 != null && (p2 = new F5("chunk", ["string", "Buffer", "Uint8Array"], e2))), p2)
        sf(t22, p2);
      else if (e2 === null)
        f2.reading = false, $5(t22, f2);
      else if (f2.objectMode || e2 && e2.length > 0)
        if (o2)
          if (f2.endEmitted)
            sf(t22, new W5);
          else {
            if (f2.destroyed || f2.errored)
              return false;
            Hh(t22, f2, e2, true);
          }
        else if (f2.ended)
          sf(t22, new H5);
        else {
          if (f2.destroyed || f2.errored)
            return false;
          f2.reading = false, f2.decoder && !r2 ? (e2 = f2.decoder.write(e2), f2.objectMode || e2.length !== 0 ? Hh(t22, f2, e2, false) : Jo(t22, f2)) : Hh(t22, f2, e2, false);
        }
      else
        o2 || (f2.reading = false, Jo(t22, f2));
      return !f2.ended && (f2.length < f2.highWaterMark || f2.length === 0);
    }
    function Hh(t22, e2, r2, o2) {
      e2.flowing && e2.length === 0 && !e2.sync && t22.listenerCount("data") > 0 ? (e2.multiAwaitDrain ? e2.awaitDrainWriters.clear() : e2.awaitDrainWriters = null, e2.dataEmitted = true, t22.emit("data", r2)) : (e2.length += e2.objectMode ? 1 : r2.length, o2 ? e2.buffer.unshift(r2) : e2.buffer.push(r2), e2.needReadable && Qo(t22)), Jo(t22, e2);
    }
    Le.prototype.isPaused = function() {
      let t22 = this._readableState;
      return t22[wn] === true || t22.flowing === false;
    };
    Le.prototype.setEncoding = function(t22) {
      let e2 = new iv(t22);
      this._readableState.decoder = e2, this._readableState.encoding = this._readableState.decoder.encoding;
      let r2 = this._readableState.buffer, o2 = "";
      for (let f2 of r2)
        o2 += e2.write(f2);
      return r2.clear(), o2 !== "" && r2.push(o2), this._readableState.length = o2.length, this;
    };
    var Z5 = 1073741824;
    function V5(t22) {
      if (t22 > Z5)
        throw new z5("size", "<= 1GiB", t22);
      return t22--, t22 |= t22 >>> 1, t22 |= t22 >>> 2, t22 |= t22 >>> 4, t22 |= t22 >>> 8, t22 |= t22 >>> 16, t22++, t22;
    }
    function ev(t22, e2) {
      return t22 <= 0 || e2.length === 0 && e2.ended ? 0 : e2.objectMode ? 1 : E5(t22) ? e2.flowing && e2.length ? e2.buffer.first().length : e2.length : t22 <= e2.length ? t22 : e2.ended ? e2.length : 0;
    }
    Le.prototype.read = function(t22) {
      Pe("read", t22), t22 === undefined ? t22 = NaN : S5(t22) || (t22 = A52(t22, 10));
      let e2 = this._readableState, r2 = t22;
      if (t22 > e2.highWaterMark && (e2.highWaterMark = V5(t22)), t22 !== 0 && (e2.emittedReadable = false), t22 === 0 && e2.needReadable && ((e2.highWaterMark !== 0 ? e2.length >= e2.highWaterMark : e2.length > 0) || e2.ended))
        return Pe("read: emitReadable", e2.length, e2.ended), e2.length === 0 && e2.ended ? Wh(this) : Qo(this), null;
      if (t22 = ev(t22, e2), t22 === 0 && e2.ended)
        return e2.length === 0 && Wh(this), null;
      let o2 = e2.needReadable;
      if (Pe("need readable", o2), (e2.length === 0 || e2.length - t22 < e2.highWaterMark) && (o2 = true, Pe("length less than watermark", o2)), e2.ended || e2.reading || e2.destroyed || e2.errored || !e2.constructed)
        o2 = false, Pe("reading, ended or constructing", o2);
      else if (o2) {
        Pe("do read"), e2.reading = true, e2.sync = true, e2.length === 0 && (e2.needReadable = true);
        try {
          this._read(e2.highWaterMark);
        } catch (p2) {
          sf(this, p2);
        }
        e2.sync = false, e2.reading || (t22 = ev(r2, e2));
      }
      let f2;
      return t22 > 0 ? f2 = hv(t22, e2) : f2 = null, f2 === null ? (e2.needReadable = e2.length <= e2.highWaterMark, t22 = 0) : (e2.length -= t22, e2.multiAwaitDrain ? e2.awaitDrainWriters.clear() : e2.awaitDrainWriters = null), e2.length === 0 && (e2.ended || (e2.needReadable = true), r2 !== t22 && e2.ended && Wh(this)), f2 !== null && !e2.errorEmitted && !e2.closeEmitted && (e2.dataEmitted = true, this.emit("data", f2)), f2;
    };
    function $5(t22, e2) {
      if (Pe("onEofChunk"), !e2.ended) {
        if (e2.decoder) {
          let r2 = e2.decoder.end();
          r2 && r2.length && (e2.buffer.push(r2), e2.length += e2.objectMode ? 1 : r2.length);
        }
        e2.ended = true, e2.sync ? Qo(t22) : (e2.needReadable = false, e2.emittedReadable = true, fv(t22));
      }
    }
    function Qo(t22) {
      let e2 = t22._readableState;
      Pe("emitReadable", e2.needReadable, e2.emittedReadable), e2.needReadable = false, e2.emittedReadable || (Pe("emitReadable", e2.flowing), e2.emittedReadable = true, Tr.nextTick(fv, t22));
    }
    function fv(t22) {
      let e2 = t22._readableState;
      Pe("emitReadable_", e2.destroyed, e2.length, e2.ended), !e2.destroyed && !e2.errored && (e2.length || e2.ended) && (t22.emit("readable"), e2.emittedReadable = false), e2.needReadable = !e2.flowing && !e2.ended && e2.length <= e2.highWaterMark, ov(t22);
    }
    function Jo(t22, e2) {
      !e2.readingMore && e2.constructed && (e2.readingMore = true, Tr.nextTick(G5, t22, e2));
    }
    function G5(t22, e2) {
      for (;!e2.reading && !e2.ended && (e2.length < e2.highWaterMark || e2.flowing && e2.length === 0); ) {
        let r2 = e2.length;
        if (Pe("maybeReadMore read 0"), t22.read(0), r2 === e2.length)
          break;
      }
      e2.readingMore = false;
    }
    Le.prototype._read = function(t22) {
      throw new U5("_read()");
    };
    Le.prototype.pipe = function(t22, e2) {
      let r2 = this, o2 = this._readableState;
      o2.pipes.length === 1 && (o2.multiAwaitDrain || (o2.multiAwaitDrain = true, o2.awaitDrainWriters = new q5(o2.awaitDrainWriters ? [o2.awaitDrainWriters] : []))), o2.pipes.push(t22), Pe("pipe count=%d opts=%j", o2.pipes.length, e2);
      let p2 = (!e2 || e2.end !== false) && t22 !== Tr.stdout && t22 !== Tr.stderr ? y22 : _e;
      o2.endEmitted ? Tr.nextTick(p2) : r2.once("end", p2), t22.on("unpipe", m32);
      function m32(N4, we) {
        Pe("onunpipe"), N4 === r2 && we && we.hasUnpiped === false && (we.hasUnpiped = true, S2());
      }
      function y22() {
        Pe("onend"), t22.end();
      }
      let M3, x6 = false;
      function S2() {
        Pe("cleanup"), t22.removeListener("close", L2), t22.removeListener("finish", ge), M3 && t22.removeListener("drain", M3), t22.removeListener("error", q), t22.removeListener("unpipe", m32), r2.removeListener("end", y22), r2.removeListener("end", _e), r2.removeListener("data", B6), x6 = true, M3 && o2.awaitDrainWriters && (!t22._writableState || t22._writableState.needDrain) && M3();
      }
      function E4() {
        x6 || (o2.pipes.length === 1 && o2.pipes[0] === t22 ? (Pe("false write response, pause", 0), o2.awaitDrainWriters = t22, o2.multiAwaitDrain = false) : o2.pipes.length > 1 && o2.pipes.includes(t22) && (Pe("false write response, pause", o2.awaitDrainWriters.size), o2.awaitDrainWriters.add(t22)), r2.pause()), M3 || (M3 = Y5(r2, t22), t22.on("drain", M3));
      }
      r2.on("data", B6);
      function B6(N4) {
        Pe("ondata");
        let we = t22.write(N4);
        Pe("dest.write", we), we === false && E4();
      }
      function q(N4) {
        if (Pe("onerror", N4), _e(), t22.removeListener("error", q), t22.listenerCount("error") === 0) {
          let we = t22._writableState || t22._readableState;
          we && !we.errorEmitted ? sf(t22, N4) : t22.emit("error", N4);
        }
      }
      L5(t22, "error", q);
      function L2() {
        t22.removeListener("finish", ge), _e();
      }
      t22.once("close", L2);
      function ge() {
        Pe("onfinish"), t22.removeListener("close", L2), _e();
      }
      t22.once("finish", ge);
      function _e() {
        Pe("unpipe"), r2.unpipe(t22);
      }
      return t22.emit("pipe", r2), t22.writableNeedDrain === true ? o2.flowing && E4() : o2.flowing || (Pe("pipe resume"), r2.resume()), t22;
    };
    function Y5(t22, e2) {
      return function() {
        let o2 = t22._readableState;
        o2.awaitDrainWriters === e2 ? (Pe("pipeOnDrain", 1), o2.awaitDrainWriters = null) : o2.multiAwaitDrain && (Pe("pipeOnDrain", o2.awaitDrainWriters.size), o2.awaitDrainWriters.delete(e2)), (!o2.awaitDrainWriters || o2.awaitDrainWriters.size === 0) && t22.listenerCount("data") && t22.resume();
      };
    }
    Le.prototype.unpipe = function(t22) {
      let e2 = this._readableState, r2 = { hasUnpiped: false };
      if (e2.pipes.length === 0)
        return this;
      if (!t22) {
        let f2 = e2.pipes;
        e2.pipes = [], this.pause();
        for (let p2 = 0;p2 < f2.length; p2++)
          f2[p2].emit("unpipe", this, { hasUnpiped: false });
        return this;
      }
      let o2 = x5(e2.pipes, t22);
      return o2 === -1 ? this : (e2.pipes.splice(o2, 1), e2.pipes.length === 0 && this.pause(), t22.emit("unpipe", this, r2), this);
    };
    Le.prototype.on = function(t22, e2) {
      let r2 = Hi.prototype.on.call(this, t22, e2), o2 = this._readableState;
      return t22 === "data" ? (o2.readableListening = this.listenerCount("readable") > 0, o2.flowing !== false && this.resume()) : t22 === "readable" && !o2.endEmitted && !o2.readableListening && (o2.readableListening = o2.needReadable = true, o2.flowing = false, o2.emittedReadable = false, Pe("on readable", o2.length, o2.reading), o2.length ? Qo(this) : o2.reading || Tr.nextTick(X5, this)), r2;
    };
    Le.prototype.addListener = Le.prototype.on;
    Le.prototype.removeListener = function(t22, e2) {
      let r2 = Hi.prototype.removeListener.call(this, t22, e2);
      return t22 === "readable" && Tr.nextTick(av, this), r2;
    };
    Le.prototype.off = Le.prototype.removeListener;
    Le.prototype.removeAllListeners = function(t22) {
      let e2 = Hi.prototype.removeAllListeners.apply(this, arguments);
      return (t22 === "readable" || t22 === undefined) && Tr.nextTick(av, this), e2;
    };
    function av(t22) {
      let e2 = t22._readableState;
      e2.readableListening = t22.listenerCount("readable") > 0, e2.resumeScheduled && e2[wn] === false ? e2.flowing = true : t22.listenerCount("data") > 0 ? t22.resume() : e2.readableListening || (e2.flowing = null);
    }
    function X5(t22) {
      Pe("readable nexttick read 0"), t22.read(0);
    }
    Le.prototype.resume = function() {
      let t22 = this._readableState;
      return t22.flowing || (Pe("resume"), t22.flowing = !t22.readableListening, J5(this, t22)), t22[wn] = false, this;
    };
    function J5(t22, e2) {
      e2.resumeScheduled || (e2.resumeScheduled = true, Tr.nextTick(Q5, t22, e2));
    }
    function Q5(t22, e2) {
      Pe("resume", e2.reading), e2.reading || t22.read(0), e2.resumeScheduled = false, t22.emit("resume"), ov(t22), e2.flowing && !e2.reading && t22.read(0);
    }
    Le.prototype.pause = function() {
      return Pe("call pause flowing=%j", this._readableState.flowing), this._readableState.flowing !== false && (Pe("pause"), this._readableState.flowing = false, this.emit("pause")), this._readableState[wn] = true, this;
    };
    function ov(t22) {
      let e2 = t22._readableState;
      for (Pe("flow", e2.flowing);e2.flowing && t22.read() !== null; )
        ;
    }
    Le.prototype.wrap = function(t22) {
      let e2 = false;
      t22.on("data", (o2) => {
        !this.push(o2) && t22.pause && (e2 = true, t22.pause());
      }), t22.on("end", () => {
        this.push(null);
      }), t22.on("error", (o2) => {
        sf(this, o2);
      }), t22.on("close", () => {
        this.destroy();
      }), t22.on("destroy", () => {
        this.destroy();
      }), this._read = () => {
        e2 && t22.resume && (e2 = false, t22.resume());
      };
      let r2 = R5(t22);
      for (let o2 = 1;o2 < r2.length; o2++) {
        let f2 = r2[o2];
        this[f2] === undefined && typeof t22[f2] == "function" && (this[f2] = t22[f2].bind(t22));
      }
      return this;
    };
    Le.prototype[I5] = function() {
      return sv(this);
    };
    Le.prototype.iterator = function(t22) {
      return t22 !== undefined && K5(t22, "options"), sv(this, t22);
    };
    function sv(t22, e2) {
      typeof t22.read != "function" && (t22 = Le.wrap(t22, { objectMode: true }));
      let r2 = ex(t22, e2);
      return r2.stream = t22, r2;
    }
    async function* ex(t22, e2) {
      let r2 = zh;
      function o2(m32) {
        this === t22 ? (r2(), r2 = zh) : r2 = m32;
      }
      t22.on("readable", o2);
      let f2, p2 = D5(t22, { writable: false }, (m32) => {
        f2 = m32 ? Q1(f2, m32) : null, r2(), r2 = zh;
      });
      try {
        for (;; ) {
          let m32 = t22.destroyed ? null : t22.read();
          if (m32 !== null)
            yield m32;
          else {
            if (f2)
              throw f2;
            if (f2 === null)
              return;
            await new B5(o2);
          }
        }
      } catch (m32) {
        throw f2 = Q1(f2, m32), f2;
      } finally {
        (f2 || e2?.destroyOnReturn !== false) && (f2 === undefined || t22._readableState.autoDestroy) ? hf.destroyer(t22, null) : (t22.off("readable", o2), p2());
      }
    }
    tv(Le.prototype, { readable: { __proto__: null, get() {
      let t22 = this._readableState;
      return !!t22 && t22.readable !== false && !t22.destroyed && !t22.errorEmitted && !t22.endEmitted;
    }, set(t22) {
      this._readableState && (this._readableState.readable = !!t22);
    } }, readableDidRead: { __proto__: null, enumerable: false, get: function() {
      return this._readableState.dataEmitted;
    } }, readableAborted: { __proto__: null, enumerable: false, get: function() {
      return !!(this._readableState.readable !== false && (this._readableState.destroyed || this._readableState.errored) && !this._readableState.endEmitted);
    } }, readableHighWaterMark: { __proto__: null, enumerable: false, get: function() {
      return this._readableState.highWaterMark;
    } }, readableBuffer: { __proto__: null, enumerable: false, get: function() {
      return this._readableState && this._readableState.buffer;
    } }, readableFlowing: { __proto__: null, enumerable: false, get: function() {
      return this._readableState.flowing;
    }, set: function(t22) {
      this._readableState && (this._readableState.flowing = t22);
    } }, readableLength: { __proto__: null, enumerable: false, get() {
      return this._readableState.length;
    } }, readableObjectMode: { __proto__: null, enumerable: false, get() {
      return this._readableState ? this._readableState.objectMode : false;
    } }, readableEncoding: { __proto__: null, enumerable: false, get() {
      return this._readableState ? this._readableState.encoding : null;
    } }, errored: { __proto__: null, enumerable: false, get() {
      return this._readableState ? this._readableState.errored : null;
    } }, closed: { __proto__: null, get() {
      return this._readableState ? this._readableState.closed : false;
    } }, destroyed: { __proto__: null, enumerable: false, get() {
      return this._readableState ? this._readableState.destroyed : false;
    }, set(t22) {
      !this._readableState || (this._readableState.destroyed = t22);
    } }, readableEnded: { __proto__: null, enumerable: false, get() {
      return this._readableState ? this._readableState.endEmitted : false;
    } } });
    tv(jh.prototype, { pipesCount: { __proto__: null, get() {
      return this.pipes.length;
    } }, paused: { __proto__: null, get() {
      return this[wn] !== false;
    }, set(t22) {
      this[wn] = !!t22;
    } } });
    Le._fromList = hv;
    function hv(t22, e2) {
      if (e2.length === 0)
        return null;
      let r2;
      return e2.objectMode ? r2 = e2.buffer.shift() : !t22 || t22 >= e2.length ? (e2.decoder ? r2 = e2.buffer.join("") : e2.buffer.length === 1 ? r2 = e2.buffer.first() : r2 = e2.buffer.concat(e2.length), e2.buffer.clear()) : r2 = e2.buffer.consume(t22, e2.decoder), r2;
    }
    function Wh(t22) {
      let e2 = t22._readableState;
      Pe("endReadable", e2.endEmitted), e2.endEmitted || (e2.ended = true, Tr.nextTick(tx, e2, t22));
    }
    function tx(t22, e2) {
      if (Pe("endReadableNT", t22.endEmitted, t22.length), !t22.errored && !t22.closeEmitted && !t22.endEmitted && t22.length === 0) {
        if (t22.endEmitted = true, e2.emit("end"), e2.writable && e2.allowHalfOpen === false)
          Tr.nextTick(rx, e2);
        else if (t22.autoDestroy) {
          let r2 = e2._writableState;
          (!r2 || r2.autoDestroy && (r2.finished || r2.writable === false)) && e2.destroy();
        }
      }
    }
    function rx(t22) {
      t22.writable && !t22.writableEnded && !t22.destroyed && t22.end();
    }
    Le.from = function(t22, e2) {
      return j5(Le, t22, e2);
    };
    var Kh;
    function uv() {
      return Kh === undefined && (Kh = {}), Kh;
    }
    Le.fromWeb = function(t22, e2) {
      return uv().newStreamReadableFromReadableStream(t22, e2);
    };
    Le.toWeb = function(t22, e2) {
      return uv().newReadableStreamFromStreamReadable(t22, e2);
    };
    Le.wrap = function(t22, e2) {
      var r2, o2;
      return new Le({ objectMode: (r2 = (o2 = t22.readableObjectMode) !== null && o2 !== undefined ? o2 : t22.objectMode) !== null && r2 !== undefined ? r2 : true, ...e2, destroy(f2, p2) {
        hf.destroyer(t22, f2), p2(f2);
      } }).wrap(t22);
    };
  });
  Jh = T2((jI, xv) => {
    var Mn = (Oi(), ur(pr)), { ArrayPrototypeSlice: pv, Error: ix, FunctionPrototypeSymbolHasInstance: vv, ObjectDefineProperty: bv, ObjectDefineProperties: nx, ObjectSetPrototypeOf: mv, StringPrototypeToLowerCase: fx, Symbol: ax, SymbolHasInstance: ox } = Tt();
    xv.exports = st;
    st.WritableState = ya;
    var { EventEmitter: sx } = ki(), ma = Vo().Stream, { Buffer: es } = Ut(), is = yn(), { addAbortSignal: hx } = Go(), { getHighWaterMark: ux, getDefaultHighWaterMark: lx } = Xo(), { ERR_INVALID_ARG_TYPE: dx, ERR_METHOD_NOT_IMPLEMENTED: cx, ERR_MULTIPLE_CALLBACK: gv, ERR_STREAM_CANNOT_PIPE: px, ERR_STREAM_DESTROYED: ga, ERR_STREAM_ALREADY_FINISHED: vx, ERR_STREAM_NULL_VALUES: bx, ERR_STREAM_WRITE_AFTER_END: mx, ERR_UNKNOWN_ENCODING: yv } = Jt().codes, { errorOrDestroy: uf } = is;
    mv(st.prototype, ma.prototype);
    mv(st, ma);
    function $h() {
    }
    var lf = ax("kOnFinished");
    function ya(t22, e2, r2) {
      typeof r2 != "boolean" && (r2 = e2 instanceof Qr()), this.objectMode = !!(t22 && t22.objectMode), r2 && (this.objectMode = this.objectMode || !!(t22 && t22.writableObjectMode)), this.highWaterMark = t22 ? ux(this, t22, "writableHighWaterMark", r2) : lx(false), this.finalCalled = false, this.needDrain = false, this.ending = false, this.ended = false, this.finished = false, this.destroyed = false;
      let o2 = !!(t22 && t22.decodeStrings === false);
      this.decodeStrings = !o2, this.defaultEncoding = t22 && t22.defaultEncoding || "utf8", this.length = 0, this.writing = false, this.corked = 0, this.sync = true, this.bufferProcessing = false, this.onwrite = yx.bind(undefined, e2), this.writecb = null, this.writelen = 0, this.afterWriteTickInfo = null, rs(this), this.pendingcb = 0, this.constructed = true, this.prefinished = false, this.errorEmitted = false, this.emitClose = !t22 || t22.emitClose !== false, this.autoDestroy = !t22 || t22.autoDestroy !== false, this.errored = null, this.closed = false, this.closeEmitted = false, this[lf] = [];
    }
    function rs(t22) {
      t22.buffered = [], t22.bufferedIndex = 0, t22.allBuffers = true, t22.allNoop = true;
    }
    ya.prototype.getBuffer = function() {
      return pv(this.buffered, this.bufferedIndex);
    };
    bv(ya.prototype, "bufferedRequestCount", { __proto__: null, get() {
      return this.buffered.length - this.bufferedIndex;
    } });
    function st(t22) {
      let e2 = this instanceof Qr();
      if (!e2 && !vv(st, this))
        return new st(t22);
      this._writableState = new ya(t22, this, e2), t22 && (typeof t22.write == "function" && (this._write = t22.write), typeof t22.writev == "function" && (this._writev = t22.writev), typeof t22.destroy == "function" && (this._destroy = t22.destroy), typeof t22.final == "function" && (this._final = t22.final), typeof t22.construct == "function" && (this._construct = t22.construct), t22.signal && hx(t22.signal, this)), ma.call(this, t22), is.construct(this, () => {
        let r2 = this._writableState;
        r2.writing || Yh(this, r2), Xh(this, r2);
      });
    }
    bv(st, ox, { __proto__: null, value: function(t22) {
      return vv(this, t22) ? true : this !== st ? false : t22 && t22._writableState instanceof ya;
    } });
    st.prototype.pipe = function() {
      uf(this, new px);
    };
    function wv(t22, e2, r2, o2) {
      let f2 = t22._writableState;
      if (typeof r2 == "function")
        o2 = r2, r2 = f2.defaultEncoding;
      else {
        if (!r2)
          r2 = f2.defaultEncoding;
        else if (r2 !== "buffer" && !es.isEncoding(r2))
          throw new yv(r2);
        typeof o2 != "function" && (o2 = $h);
      }
      if (e2 === null)
        throw new bx;
      if (!f2.objectMode)
        if (typeof e2 == "string")
          f2.decodeStrings !== false && (e2 = es.from(e2, r2), r2 = "buffer");
        else if (e2 instanceof es)
          r2 = "buffer";
        else if (ma._isUint8Array(e2))
          e2 = ma._uint8ArrayToBuffer(e2), r2 = "buffer";
        else
          throw new dx("chunk", ["string", "Buffer", "Uint8Array"], e2);
      let p2;
      return f2.ending ? p2 = new mx : f2.destroyed && (p2 = new ga("write")), p2 ? (Mn.nextTick(o2, p2), uf(t22, p2, true), p2) : (f2.pendingcb++, gx(t22, f2, e2, r2, o2));
    }
    st.prototype.write = function(t22, e2, r2) {
      return wv(this, t22, e2, r2) === true;
    };
    st.prototype.cork = function() {
      this._writableState.corked++;
    };
    st.prototype.uncork = function() {
      let t22 = this._writableState;
      t22.corked && (t22.corked--, t22.writing || Yh(this, t22));
    };
    st.prototype.setDefaultEncoding = function(e2) {
      if (typeof e2 == "string" && (e2 = fx(e2)), !es.isEncoding(e2))
        throw new yv(e2);
      return this._writableState.defaultEncoding = e2, this;
    };
    function gx(t22, e2, r2, o2, f2) {
      let p2 = e2.objectMode ? 1 : r2.length;
      e2.length += p2;
      let m32 = e2.length < e2.highWaterMark;
      return m32 || (e2.needDrain = true), e2.writing || e2.corked || e2.errored || !e2.constructed ? (e2.buffered.push({ chunk: r2, encoding: o2, callback: f2 }), e2.allBuffers && o2 !== "buffer" && (e2.allBuffers = false), e2.allNoop && f2 !== $h && (e2.allNoop = false)) : (e2.writelen = p2, e2.writecb = f2, e2.writing = true, e2.sync = true, t22._write(r2, o2, e2.onwrite), e2.sync = false), m32 && !e2.errored && !e2.destroyed;
    }
    function dv(t22, e2, r2, o2, f2, p2, m32) {
      e2.writelen = o2, e2.writecb = m32, e2.writing = true, e2.sync = true, e2.destroyed ? e2.onwrite(new ga("write")) : r2 ? t22._writev(f2, e2.onwrite) : t22._write(f2, p2, e2.onwrite), e2.sync = false;
    }
    function cv(t22, e2, r2, o2) {
      --e2.pendingcb, o2(r2), Gh(e2), uf(t22, r2);
    }
    function yx(t22, e2) {
      let r2 = t22._writableState, o2 = r2.sync, f2 = r2.writecb;
      if (typeof f2 != "function") {
        uf(t22, new gv);
        return;
      }
      r2.writing = false, r2.writecb = null, r2.length -= r2.writelen, r2.writelen = 0, e2 ? (e2.stack, r2.errored || (r2.errored = e2), t22._readableState && !t22._readableState.errored && (t22._readableState.errored = e2), o2 ? Mn.nextTick(cv, t22, r2, e2, f2) : cv(t22, r2, e2, f2)) : (r2.buffered.length > r2.bufferedIndex && Yh(t22, r2), o2 ? r2.afterWriteTickInfo !== null && r2.afterWriteTickInfo.cb === f2 ? r2.afterWriteTickInfo.count++ : (r2.afterWriteTickInfo = { count: 1, cb: f2, stream: t22, state: r2 }, Mn.nextTick(wx, r2.afterWriteTickInfo)) : Mv(t22, r2, 1, f2));
    }
    function wx({ stream: t22, state: e2, count: r2, cb: o2 }) {
      return e2.afterWriteTickInfo = null, Mv(t22, e2, r2, o2);
    }
    function Mv(t22, e2, r2, o2) {
      for (!e2.ending && !t22.destroyed && e2.length === 0 && e2.needDrain && (e2.needDrain = false, t22.emit("drain"));r2-- > 0; )
        e2.pendingcb--, o2();
      e2.destroyed && Gh(e2), Xh(t22, e2);
    }
    function Gh(t22) {
      if (t22.writing)
        return;
      for (let f2 = t22.bufferedIndex;f2 < t22.buffered.length; ++f2) {
        var e2;
        let { chunk: p2, callback: m32 } = t22.buffered[f2], y22 = t22.objectMode ? 1 : p2.length;
        t22.length -= y22, m32((e2 = t22.errored) !== null && e2 !== undefined ? e2 : new ga("write"));
      }
      let r2 = t22[lf].splice(0);
      for (let f2 = 0;f2 < r2.length; f2++) {
        var o2;
        r2[f2]((o2 = t22.errored) !== null && o2 !== undefined ? o2 : new ga("end"));
      }
      rs(t22);
    }
    function Yh(t22, e2) {
      if (e2.corked || e2.bufferProcessing || e2.destroyed || !e2.constructed)
        return;
      let { buffered: r2, bufferedIndex: o2, objectMode: f2 } = e2, p2 = r2.length - o2;
      if (!p2)
        return;
      let m32 = o2;
      if (e2.bufferProcessing = true, p2 > 1 && t22._writev) {
        e2.pendingcb -= p2 - 1;
        let y22 = e2.allNoop ? $h : (x5) => {
          for (let S2 = m32;S2 < r2.length; ++S2)
            r2[S2].callback(x5);
        }, M3 = e2.allNoop && m32 === 0 ? r2 : pv(r2, m32);
        M3.allBuffers = e2.allBuffers, dv(t22, e2, true, e2.length, M3, "", y22), rs(e2);
      } else {
        do {
          let { chunk: y22, encoding: M3, callback: x5 } = r2[m32];
          r2[m32++] = null;
          let S2 = f2 ? 1 : y22.length;
          dv(t22, e2, false, S2, y22, M3, x5);
        } while (m32 < r2.length && !e2.writing);
        m32 === r2.length ? rs(e2) : m32 > 256 ? (r2.splice(0, m32), e2.bufferedIndex = 0) : e2.bufferedIndex = m32;
      }
      e2.bufferProcessing = false;
    }
    st.prototype._write = function(t22, e2, r2) {
      if (this._writev)
        this._writev([{ chunk: t22, encoding: e2 }], r2);
      else
        throw new cx("_write()");
    };
    st.prototype._writev = null;
    st.prototype.end = function(t22, e2, r2) {
      let o2 = this._writableState;
      typeof t22 == "function" ? (r2 = t22, t22 = null, e2 = null) : typeof e2 == "function" && (r2 = e2, e2 = null);
      let f2;
      if (t22 != null) {
        let p2 = wv(this, t22, e2);
        p2 instanceof ix && (f2 = p2);
      }
      return o2.corked && (o2.corked = 1, this.uncork()), f2 || (!o2.errored && !o2.ending ? (o2.ending = true, Xh(this, o2, true), o2.ended = true) : o2.finished ? f2 = new vx("end") : o2.destroyed && (f2 = new ga("end"))), typeof r2 == "function" && (f2 || o2.finished ? Mn.nextTick(r2, f2) : o2[lf].push(r2)), this;
    };
    function ts(t22) {
      return t22.ending && !t22.destroyed && t22.constructed && t22.length === 0 && !t22.errored && t22.buffered.length === 0 && !t22.finished && !t22.writing && !t22.errorEmitted && !t22.closeEmitted;
    }
    function Mx(t22, e2) {
      let r2 = false;
      function o2(f2) {
        if (r2) {
          uf(t22, f2 ?? gv());
          return;
        }
        if (r2 = true, e2.pendingcb--, f2) {
          let p2 = e2[lf].splice(0);
          for (let m32 = 0;m32 < p2.length; m32++)
            p2[m32](f2);
          uf(t22, f2, e2.sync);
        } else
          ts(e2) && (e2.prefinished = true, t22.emit("prefinish"), e2.pendingcb++, Mn.nextTick(Vh, t22, e2));
      }
      e2.sync = true, e2.pendingcb++;
      try {
        t22._final(o2);
      } catch (f2) {
        o2(f2);
      }
      e2.sync = false;
    }
    function _x(t22, e2) {
      !e2.prefinished && !e2.finalCalled && (typeof t22._final == "function" && !e2.destroyed ? (e2.finalCalled = true, Mx(t22, e2)) : (e2.prefinished = true, t22.emit("prefinish")));
    }
    function Xh(t22, e2, r2) {
      ts(e2) && (_x(t22, e2), e2.pendingcb === 0 && (r2 ? (e2.pendingcb++, Mn.nextTick((o2, f2) => {
        ts(f2) ? Vh(o2, f2) : f2.pendingcb--;
      }, t22, e2)) : ts(e2) && (e2.pendingcb++, Vh(t22, e2))));
    }
    function Vh(t22, e2) {
      e2.pendingcb--, e2.finished = true;
      let r2 = e2[lf].splice(0);
      for (let o2 = 0;o2 < r2.length; o2++)
        r2[o2]();
      if (t22.emit("finish"), e2.autoDestroy) {
        let o2 = t22._readableState;
        (!o2 || o2.autoDestroy && (o2.endEmitted || o2.readable === false)) && t22.destroy();
      }
    }
    nx(st.prototype, { closed: { __proto__: null, get() {
      return this._writableState ? this._writableState.closed : false;
    } }, destroyed: { __proto__: null, get() {
      return this._writableState ? this._writableState.destroyed : false;
    }, set(t22) {
      this._writableState && (this._writableState.destroyed = t22);
    } }, writable: { __proto__: null, get() {
      let t22 = this._writableState;
      return !!t22 && t22.writable !== false && !t22.destroyed && !t22.errored && !t22.ending && !t22.ended;
    }, set(t22) {
      this._writableState && (this._writableState.writable = !!t22);
    } }, writableFinished: { __proto__: null, get() {
      return this._writableState ? this._writableState.finished : false;
    } }, writableObjectMode: { __proto__: null, get() {
      return this._writableState ? this._writableState.objectMode : false;
    } }, writableBuffer: { __proto__: null, get() {
      return this._writableState && this._writableState.getBuffer();
    } }, writableEnded: { __proto__: null, get() {
      return this._writableState ? this._writableState.ending : false;
    } }, writableNeedDrain: { __proto__: null, get() {
      let t22 = this._writableState;
      return t22 ? !t22.destroyed && !t22.ending && t22.needDrain : false;
    } }, writableHighWaterMark: { __proto__: null, get() {
      return this._writableState && this._writableState.highWaterMark;
    } }, writableCorked: { __proto__: null, get() {
      return this._writableState ? this._writableState.corked : 0;
    } }, writableLength: { __proto__: null, get() {
      return this._writableState && this._writableState.length;
    } }, errored: { __proto__: null, enumerable: false, get() {
      return this._writableState ? this._writableState.errored : null;
    } }, writableAborted: { __proto__: null, enumerable: false, get: function() {
      return !!(this._writableState.writable !== false && (this._writableState.destroyed || this._writableState.errored) && !this._writableState.finished);
    } } });
    var xx = is.destroy;
    st.prototype.destroy = function(t22, e2) {
      let r2 = this._writableState;
      return !r2.destroyed && (r2.bufferedIndex < r2.buffered.length || r2[lf].length) && Mn.nextTick(Gh, r2), xx.call(this, t22, e2), this;
    };
    st.prototype._undestroy = is.undestroy;
    st.prototype._destroy = function(t22, e2) {
      e2(t22);
    };
    st.prototype[sx.captureRejectionSymbol] = function(t22) {
      this.destroy(t22);
    };
    var Zh;
    function _v() {
      return Zh === undefined && (Zh = {}), Zh;
    }
    st.fromWeb = function(t22, e2) {
      return _v().newStreamWritableFromWritableStream(t22, e2);
    };
    st.toWeb = function(t22) {
      return _v().newWritableStreamFromStreamWritable(t22);
    };
  });
  Dv = T2((ZI, Nv) => {
    var Qh = (Oi(), ur(pr)), Sx = Ut(), { isReadable: Ex, isWritable: Ax, isIterable: Sv, isNodeStream: Rx, isReadableNodeStream: Ev, isWritableNodeStream: Av, isDuplexNodeStream: Bx } = Fi(), Rv = Ui(), { AbortError: Lv, codes: { ERR_INVALID_ARG_TYPE: qx, ERR_INVALID_RETURN_VALUE: Bv } } = Jt(), { destroyer: df } = yn(), Ix = Qr(), Tx = ba(), { createDeferredPromise: qv } = Gr(), Iv = Fh(), Tv = globalThis.Blob || Sx.Blob, kx = typeof Tv < "u" ? function(e2) {
      return e2 instanceof Tv;
    } : function(e2) {
      return false;
    }, Lx = globalThis.AbortController || No().AbortController, { FunctionPrototypeCall: kv } = Tt(), _n = class extends Ix {
      constructor(e2) {
        super(e2), e2?.readable === false && (this._readableState.readable = false, this._readableState.ended = true, this._readableState.endEmitted = true), e2?.writable === false && (this._writableState.writable = false, this._writableState.ending = true, this._writableState.ended = true, this._writableState.finished = true);
      }
    };
    Nv.exports = function t(e2, r2) {
      if (Bx(e2))
        return e2;
      if (Ev(e2))
        return ns({ readable: e2 });
      if (Av(e2))
        return ns({ writable: e2 });
      if (Rx(e2))
        return ns({ writable: false, readable: false });
      if (typeof e2 == "function") {
        let { value: f2, write: p2, final: m32, destroy: y22 } = Nx(e2);
        if (Sv(f2))
          return Iv(_n, f2, { objectMode: true, write: p2, final: m32, destroy: y22 });
        let M3 = f2?.then;
        if (typeof M3 == "function") {
          let x5, S2 = kv(M3, f2, (E4) => {
            if (E4 != null)
              throw new Bv("nully", "body", E4);
          }, (E4) => {
            df(x5, E4);
          });
          return x5 = new _n({ objectMode: true, readable: false, write: p2, final(E4) {
            m32(async () => {
              try {
                await S2, Qh.nextTick(E4, null);
              } catch (B5) {
                Qh.nextTick(E4, B5);
              }
            });
          }, destroy: y22 });
        }
        throw new Bv("Iterable, AsyncIterable or AsyncFunction", r2, f2);
      }
      if (kx(e2))
        return t(e2.arrayBuffer());
      if (Sv(e2))
        return Iv(_n, e2, { objectMode: true, writable: false });
      if (typeof e2?.writable == "object" || typeof e2?.readable == "object") {
        let f2 = e2 != null && e2.readable ? Ev(e2?.readable) ? e2?.readable : t(e2.readable) : undefined, p2 = e2 != null && e2.writable ? Av(e2?.writable) ? e2?.writable : t(e2.writable) : undefined;
        return ns({ readable: f2, writable: p2 });
      }
      let o2 = e2?.then;
      if (typeof o2 == "function") {
        let f2;
        return kv(o2, e2, (p2) => {
          p2 != null && f2.push(p2), f2.push(null);
        }, (p2) => {
          df(f2, p2);
        }), f2 = new _n({ objectMode: true, writable: false, read() {
        } });
      }
      throw new qx(r2, ["Blob", "ReadableStream", "WritableStream", "Stream", "Iterable", "AsyncIterable", "Function", "{ readable, writable } pair", "Promise"], e2);
    };
    function Nx(t22) {
      let { promise: e2, resolve: r2 } = qv(), o2 = new Lx, f2 = o2.signal;
      return { value: t22(async function* () {
        for (;; ) {
          let m32 = e2;
          e2 = null;
          let { chunk: y22, done: M3, cb: x5 } = await m32;
          if (Qh.nextTick(x5), M3)
            return;
          if (f2.aborted)
            throw new Lv(undefined, { cause: f2.reason });
          ({ promise: e2, resolve: r2 } = qv()), yield y22;
        }
      }(), { signal: f2 }), write(m32, y22, M3) {
        let x5 = r2;
        r2 = null, x5({ chunk: m32, done: false, cb: M3 });
      }, final(m32) {
        let y22 = r2;
        r2 = null, y22({ done: true, cb: m32 });
      }, destroy(m32, y22) {
        o2.abort(), y22(m32);
      } };
    }
    function ns(t22) {
      let e2 = t22.readable && typeof t22.readable.read != "function" ? Tx.wrap(t22.readable) : t22.readable, r2 = t22.writable, o2 = !!Ex(e2), f2 = !!Ax(r2), p2, m32, y22, M3, x5;
      function S2(E4) {
        let B5 = M3;
        M3 = null, B5 ? B5(E4) : E4 ? x5.destroy(E4) : !o2 && !f2 && x5.destroy();
      }
      return x5 = new _n({ readableObjectMode: !!(e2 != null && e2.readableObjectMode), writableObjectMode: !!(r2 != null && r2.writableObjectMode), readable: o2, writable: f2 }), f2 && (Rv(r2, (E4) => {
        f2 = false, E4 && df(e2, E4), S2(E4);
      }), x5._write = function(E4, B5, q) {
        r2.write(E4, B5) ? q() : p2 = q;
      }, x5._final = function(E4) {
        r2.end(), m32 = E4;
      }, r2.on("drain", function() {
        if (p2) {
          let E4 = p2;
          p2 = null, E4();
        }
      }), r2.on("finish", function() {
        if (m32) {
          let E4 = m32;
          m32 = null, E4();
        }
      })), o2 && (Rv(e2, (E4) => {
        o2 = false, E4 && df(e2, E4), S2(E4);
      }), e2.on("readable", function() {
        if (y22) {
          let E4 = y22;
          y22 = null, E4();
        }
      }), e2.on("end", function() {
        x5.push(null);
      }), x5._read = function() {
        for (;; ) {
          let E4 = e2.read();
          if (E4 === null) {
            y22 = x5._read;
            return;
          }
          if (!x5.push(E4))
            return;
        }
      }), x5._destroy = function(E4, B5) {
        !E4 && M3 !== null && (E4 = new Lv), y22 = null, p2 = null, m32 = null, M3 === null ? B5(E4) : (M3 = B5, df(r2, E4), df(e2, E4));
      }, x5;
    }
  });
  Qr = T2((VI, Ov) => {
    var { ObjectDefineProperties: Dx, ObjectGetOwnPropertyDescriptor: bi, ObjectKeys: Px, ObjectSetPrototypeOf: Pv } = Tt();
    Ov.exports = kr;
    var ru = ba(), vr = Jh();
    Pv(kr.prototype, ru.prototype);
    Pv(kr, ru);
    {
      let t22 = Px(vr.prototype);
      for (let e2 = 0;e2 < t22.length; e2++) {
        let r2 = t22[e2];
        kr.prototype[r2] || (kr.prototype[r2] = vr.prototype[r2]);
      }
    }
    function kr(t22) {
      if (!(this instanceof kr))
        return new kr(t22);
      ru.call(this, t22), vr.call(this, t22), t22 ? (this.allowHalfOpen = t22.allowHalfOpen !== false, t22.readable === false && (this._readableState.readable = false, this._readableState.ended = true, this._readableState.endEmitted = true), t22.writable === false && (this._writableState.writable = false, this._writableState.ending = true, this._writableState.ended = true, this._writableState.finished = true)) : this.allowHalfOpen = true;
    }
    Dx(kr.prototype, { writable: { __proto__: null, ...bi(vr.prototype, "writable") }, writableHighWaterMark: { __proto__: null, ...bi(vr.prototype, "writableHighWaterMark") }, writableObjectMode: { __proto__: null, ...bi(vr.prototype, "writableObjectMode") }, writableBuffer: { __proto__: null, ...bi(vr.prototype, "writableBuffer") }, writableLength: { __proto__: null, ...bi(vr.prototype, "writableLength") }, writableFinished: { __proto__: null, ...bi(vr.prototype, "writableFinished") }, writableCorked: { __proto__: null, ...bi(vr.prototype, "writableCorked") }, writableEnded: { __proto__: null, ...bi(vr.prototype, "writableEnded") }, writableNeedDrain: { __proto__: null, ...bi(vr.prototype, "writableNeedDrain") }, destroyed: { __proto__: null, get() {
      return this._readableState === undefined || this._writableState === undefined ? false : this._readableState.destroyed && this._writableState.destroyed;
    }, set(t22) {
      this._readableState && this._writableState && (this._readableState.destroyed = t22, this._writableState.destroyed = t22);
    } } });
    var eu;
    function Cv() {
      return eu === undefined && (eu = {}), eu;
    }
    kr.fromWeb = function(t22, e2) {
      return Cv().newStreamDuplexFromReadableWritablePair(t22, e2);
    };
    kr.toWeb = function(t22) {
      return Cv().newReadableWritablePairFromDuplex(t22);
    };
    var tu;
    kr.from = function(t22) {
      return tu || (tu = Dv()), tu(t22, "body");
    };
  });
  fu = T2(($I, Uv) => {
    var { ObjectSetPrototypeOf: Fv, Symbol: Cx } = Tt();
    Uv.exports = mi;
    var { ERR_METHOD_NOT_IMPLEMENTED: Ox } = Jt().codes, nu = Qr(), { getHighWaterMark: Fx } = Xo();
    Fv(mi.prototype, nu.prototype);
    Fv(mi, nu);
    var wa = Cx("kCallback");
    function mi(t22) {
      if (!(this instanceof mi))
        return new mi(t22);
      let e2 = t22 ? Fx(this, t22, "readableHighWaterMark", true) : null;
      e2 === 0 && (t22 = { ...t22, highWaterMark: null, readableHighWaterMark: e2, writableHighWaterMark: t22.writableHighWaterMark || 0 }), nu.call(this, t22), this._readableState.sync = false, this[wa] = null, t22 && (typeof t22.transform == "function" && (this._transform = t22.transform), typeof t22.flush == "function" && (this._flush = t22.flush)), this.on("prefinish", Ux);
    }
    function iu(t22) {
      typeof this._flush == "function" && !this.destroyed ? this._flush((e2, r2) => {
        if (e2) {
          t22 ? t22(e2) : this.destroy(e2);
          return;
        }
        r2 != null && this.push(r2), this.push(null), t22 && t22();
      }) : (this.push(null), t22 && t22());
    }
    function Ux() {
      this._final !== iu && iu.call(this);
    }
    mi.prototype._final = iu;
    mi.prototype._transform = function(t22, e2, r2) {
      throw new Ox("_transform()");
    };
    mi.prototype._write = function(t22, e2, r2) {
      let o2 = this._readableState, f2 = this._writableState, p2 = o2.length;
      this._transform(t22, e2, (m32, y22) => {
        if (m32) {
          r2(m32);
          return;
        }
        y22 != null && this.push(y22), f2.ended || p2 === o2.length || o2.length < o2.highWaterMark ? r2() : this[wa] = r2;
      });
    };
    mi.prototype._read = function() {
      if (this[wa]) {
        let t22 = this[wa];
        this[wa] = null, t22();
      }
    };
  });
  ou = T2((GI, Hv) => {
    var { ObjectSetPrototypeOf: zv } = Tt();
    Hv.exports = cf;
    var au = fu();
    zv(cf.prototype, au.prototype);
    zv(cf, au);
    function cf(t22) {
      if (!(this instanceof cf))
        return new cf(t22);
      au.call(this, t22);
    }
    cf.prototype._transform = function(t22, e2, r2) {
      r2(null, t22);
    };
  });
  os = T2((YI, Gv) => {
    var fs = (Oi(), ur(pr)), { ArrayIsArray: zx, Promise: Hx, SymbolAsyncIterator: Wx } = Tt(), as = Ui(), { once: Kx } = Gr(), jx = yn(), Wv = Qr(), { aggregateTwoErrors: Zx, codes: { ERR_INVALID_ARG_TYPE: Vv, ERR_INVALID_RETURN_VALUE: su, ERR_MISSING_ARGS: Vx, ERR_STREAM_DESTROYED: $x, ERR_STREAM_PREMATURE_CLOSE: Gx }, AbortError: Yx } = Jt(), { validateFunction: Xx, validateAbortSignal: Jx } = pa(), { isIterable: pf, isReadable: hu, isReadableNodeStream: du, isNodeStream: Kv } = Fi(), Qx = globalThis.AbortController || No().AbortController, uu, lu;
    function jv(t22, e2, r2) {
      let o2 = false;
      t22.on("close", () => {
        o2 = true;
      });
      let f2 = as(t22, { readable: e2, writable: r2 }, (p2) => {
        o2 = !p2;
      });
      return { destroy: (p2) => {
        o2 || (o2 = true, jx.destroyer(t22, p2 || new $x("pipe")));
      }, cleanup: f2 };
    }
    function e7(t22) {
      return Xx(t22[t22.length - 1], "streams[stream.length - 1]"), t22.pop();
    }
    function t7(t22) {
      if (pf(t22))
        return t22;
      if (du(t22))
        return r7(t22);
      throw new Vv("val", ["Readable", "Iterable", "AsyncIterable"], t22);
    }
    async function* r7(t22) {
      lu || (lu = ba()), yield* lu.prototype[Wx].call(t22);
    }
    async function Zv(t22, e2, r2, { end: o2 }) {
      let f2, p2 = null, m32 = (x5) => {
        if (x5 && (f2 = x5), p2) {
          let S2 = p2;
          p2 = null, S2();
        }
      }, y22 = () => new Hx((x5, S2) => {
        f2 ? S2(f2) : p2 = () => {
          f2 ? S2(f2) : x5();
        };
      });
      e2.on("drain", m32);
      let M3 = as(e2, { readable: false }, m32);
      try {
        e2.writableNeedDrain && await y22();
        for await (let x5 of t22)
          e2.write(x5) || await y22();
        o2 && e2.end(), await y22(), r2();
      } catch (x5) {
        r2(f2 !== x5 ? Zx(f2, x5) : x5);
      } finally {
        M3(), e2.off("drain", m32);
      }
    }
    function i7(...t22) {
      return $v(t22, Kx(e7(t22)));
    }
    function $v(t22, e2, r2) {
      if (t22.length === 1 && zx(t22[0]) && (t22 = t22[0]), t22.length < 2)
        throw new Vx("streams");
      let o2 = new Qx, f2 = o2.signal, p2 = r2?.signal, m32 = [];
      Jx(p2, "options.signal");
      function y22() {
        q(new Yx);
      }
      p2?.addEventListener("abort", y22);
      let M3, x5, S2 = [], E4 = 0;
      function B5(N4) {
        q(N4, --E4 === 0);
      }
      function q(N4, we) {
        if (N4 && (!M3 || M3.code === "ERR_STREAM_PREMATURE_CLOSE") && (M3 = N4), !(!M3 && !we)) {
          for (;S2.length; )
            S2.shift()(M3);
          p2?.removeEventListener("abort", y22), o2.abort(), we && (M3 || m32.forEach((ye) => ye()), fs.nextTick(e2, M3, x5));
        }
      }
      let L2;
      for (let N4 = 0;N4 < t22.length; N4++) {
        let we = t22[N4], ye = N4 < t22.length - 1, xe = N4 > 0, Re = ye || r2?.end !== false, Ee = N4 === t22.length - 1;
        if (Kv(we)) {
          let Ae = function(P) {
            P && P.name !== "AbortError" && P.code !== "ERR_STREAM_PREMATURE_CLOSE" && B5(P);
          };
          var _e = Ae;
          if (Re) {
            let { destroy: P, cleanup: Se } = jv(we, ye, xe);
            S2.push(P), hu(we) && Ee && m32.push(Se);
          }
          we.on("error", Ae), hu(we) && Ee && m32.push(() => {
            we.removeListener("error", Ae);
          });
        }
        if (N4 === 0)
          if (typeof we == "function") {
            if (L2 = we({ signal: f2 }), !pf(L2))
              throw new su("Iterable, AsyncIterable or Stream", "source", L2);
          } else
            pf(we) || du(we) ? L2 = we : L2 = Wv.from(we);
        else if (typeof we == "function")
          if (L2 = t7(L2), L2 = we(L2, { signal: f2 }), ye) {
            if (!pf(L2, true))
              throw new su("AsyncIterable", `transform[${N4 - 1}]`, L2);
          } else {
            var ge;
            uu || (uu = ou());
            let Ae = new uu({ objectMode: true }), P = (ge = L2) === null || ge === undefined ? undefined : ge.then;
            if (typeof P == "function")
              E4++, P.call(L2, (i) => {
                x5 = i, i != null && Ae.write(i), Re && Ae.end(), fs.nextTick(B5);
              }, (i) => {
                Ae.destroy(i), fs.nextTick(B5, i);
              });
            else if (pf(L2, true))
              E4++, Zv(L2, Ae, B5, { end: Re });
            else
              throw new su("AsyncIterable or Promise", "destination", L2);
            L2 = Ae;
            let { destroy: Se, cleanup: v32 } = jv(L2, false, true);
            S2.push(Se), Ee && m32.push(v32);
          }
        else if (Kv(we)) {
          if (du(L2)) {
            E4 += 2;
            let Ae = n7(L2, we, B5, { end: Re });
            hu(we) && Ee && m32.push(Ae);
          } else if (pf(L2))
            E4++, Zv(L2, we, B5, { end: Re });
          else
            throw new Vv("val", ["Readable", "Iterable", "AsyncIterable"], L2);
          L2 = we;
        } else
          L2 = Wv.from(we);
      }
      return (f2 != null && f2.aborted || p2 != null && p2.aborted) && fs.nextTick(y22), L2;
    }
    function n7(t22, e2, r2, { end: o2 }) {
      let f2 = false;
      return e2.on("close", () => {
        f2 || r2(new Gx);
      }), t22.pipe(e2, { end: o2 }), o2 ? t22.once("end", () => {
        f2 = true, e2.end();
      }) : r2(), as(t22, { readable: true, writable: false }, (p2) => {
        let m32 = t22._readableState;
        p2 && p2.code === "ERR_STREAM_PREMATURE_CLOSE" && m32 && m32.ended && !m32.errored && !m32.errorEmitted ? t22.once("end", r2).once("error", r2) : r2(p2);
      }), as(e2, { readable: false, writable: true }, r2);
    }
    Gv.exports = { pipelineImpl: $v, pipeline: i7 };
  });
  eb = T2((XI, Qv) => {
    var { pipeline: f7 } = os(), ss = Qr(), { destroyer: a7 } = yn(), { isNodeStream: o7, isReadable: Yv, isWritable: Xv } = Fi(), { AbortError: s7, codes: { ERR_INVALID_ARG_VALUE: Jv, ERR_MISSING_ARGS: h7 } } = Jt();
    Qv.exports = function(...e2) {
      if (e2.length === 0)
        throw new h7("streams");
      if (e2.length === 1)
        return ss.from(e2[0]);
      let r2 = [...e2];
      if (typeof e2[0] == "function" && (e2[0] = ss.from(e2[0])), typeof e2[e2.length - 1] == "function") {
        let q = e2.length - 1;
        e2[q] = ss.from(e2[q]);
      }
      for (let q = 0;q < e2.length; ++q)
        if (!!o7(e2[q])) {
          if (q < e2.length - 1 && !Yv(e2[q]))
            throw new Jv(`streams[${q}]`, r2[q], "must be readable");
          if (q > 0 && !Xv(e2[q]))
            throw new Jv(`streams[${q}]`, r2[q], "must be writable");
        }
      let o2, f2, p2, m32, y22;
      function M3(q) {
        let L2 = m32;
        m32 = null, L2 ? L2(q) : q ? y22.destroy(q) : !B5 && !E4 && y22.destroy();
      }
      let x5 = e2[0], S2 = f7(e2, M3), E4 = !!Xv(x5), B5 = !!Yv(S2);
      return y22 = new ss({ writableObjectMode: !!(x5 != null && x5.writableObjectMode), readableObjectMode: !!(S2 != null && S2.writableObjectMode), writable: E4, readable: B5 }), E4 && (y22._write = function(q, L2, ge) {
        x5.write(q, L2) ? ge() : o2 = ge;
      }, y22._final = function(q) {
        x5.end(), f2 = q;
      }, x5.on("drain", function() {
        if (o2) {
          let q = o2;
          o2 = null, q();
        }
      }), S2.on("finish", function() {
        if (f2) {
          let q = f2;
          f2 = null, q();
        }
      })), B5 && (S2.on("readable", function() {
        if (p2) {
          let q = p2;
          p2 = null, q();
        }
      }), S2.on("end", function() {
        y22.push(null);
      }), y22._read = function() {
        for (;; ) {
          let q = S2.read();
          if (q === null) {
            p2 = y22._read;
            return;
          }
          if (!y22.push(q))
            return;
        }
      }), y22._destroy = function(q, L2) {
        !q && m32 !== null && (q = new s7), p2 = null, o2 = null, f2 = null, m32 === null ? L2(q) : (m32 = L2, a7(S2, q));
      }, y22;
    };
  });
  cu = T2((JI, tb) => {
    var { ArrayPrototypePop: u7, Promise: l7 } = Tt(), { isIterable: d7, isNodeStream: c7 } = Fi(), { pipelineImpl: p7 } = os(), { finished: v7 } = Ui();
    function b7(...t22) {
      return new l7((e2, r2) => {
        let o2, f2, p2 = t22[t22.length - 1];
        if (p2 && typeof p2 == "object" && !c7(p2) && !d7(p2)) {
          let m32 = u7(t22);
          o2 = m32.signal, f2 = m32.end;
        }
        p7(t22, (m32, y22) => {
          m32 ? r2(m32) : e2(y22);
        }, { signal: o2, end: f2 });
      });
    }
    tb.exports = { finished: v7, pipeline: b7 };
  });
  lb = T2((QI, ub) => {
    var { Buffer: m7 } = Ut(), { ObjectDefineProperty: gi, ObjectKeys: nb, ReflectApply: fb } = Tt(), { promisify: { custom: ab } } = Gr(), { streamReturningOperators: rb, promiseReturningOperators: ib } = k1(), { codes: { ERR_ILLEGAL_CONSTRUCTOR: ob } } = Jt(), g7 = eb(), { pipeline: sb } = os(), { destroyer: y7 } = yn(), hb = Ui(), pu = cu(), vu = Fi(), ct = ub.exports = Vo().Stream;
    ct.isDisturbed = vu.isDisturbed;
    ct.isErrored = vu.isErrored;
    ct.isReadable = vu.isReadable;
    ct.Readable = ba();
    for (let t22 of nb(rb)) {
      let r2 = function(...o2) {
        if (new.target)
          throw ob();
        return ct.Readable.from(fb(e2, this, o2));
      };
      M7 = r2;
      let e2 = rb[t22];
      gi(r2, "name", { __proto__: null, value: e2.name }), gi(r2, "length", { __proto__: null, value: e2.length }), gi(ct.Readable.prototype, t22, { __proto__: null, value: r2, enumerable: false, configurable: true, writable: true });
    }
    var M7;
    for (let t22 of nb(ib)) {
      let r2 = function(...f2) {
        if (new.target)
          throw ob();
        return fb(e2, this, f2);
      };
      M7 = r2;
      let e2 = ib[t22];
      gi(r2, "name", { __proto__: null, value: e2.name }), gi(r2, "length", { __proto__: null, value: e2.length }), gi(ct.Readable.prototype, t22, { __proto__: null, value: r2, enumerable: false, configurable: true, writable: true });
    }
    var M7;
    ct.Writable = Jh();
    ct.Duplex = Qr();
    ct.Transform = fu();
    ct.PassThrough = ou();
    ct.pipeline = sb;
    var { addAbortSignal: w7 } = Go();
    ct.addAbortSignal = w7;
    ct.finished = hb;
    ct.destroy = y7;
    ct.compose = g7;
    gi(ct, "promises", { __proto__: null, configurable: true, enumerable: true, get() {
      return pu;
    } });
    gi(sb, ab, { __proto__: null, enumerable: true, get() {
      return pu.pipeline;
    } });
    gi(hb, ab, { __proto__: null, enumerable: true, get() {
      return pu.finished;
    } });
    ct.Stream = ct;
    ct._isUint8Array = function(e2) {
      return e2 instanceof Uint8Array;
    };
    ct._uint8ArrayToBuffer = function(e2) {
      return m7.from(e2.buffer, e2.byteOffset, e2.byteLength);
    };
  });
  bu = T2((eT, pt) => {
    var Lt = lb(), _7 = cu(), x7 = Lt.Readable.destroy;
    pt.exports = Lt.Readable;
    pt.exports._uint8ArrayToBuffer = Lt._uint8ArrayToBuffer;
    pt.exports._isUint8Array = Lt._isUint8Array;
    pt.exports.isDisturbed = Lt.isDisturbed;
    pt.exports.isErrored = Lt.isErrored;
    pt.exports.isReadable = Lt.isReadable;
    pt.exports.Readable = Lt.Readable;
    pt.exports.Writable = Lt.Writable;
    pt.exports.Duplex = Lt.Duplex;
    pt.exports.Transform = Lt.Transform;
    pt.exports.PassThrough = Lt.PassThrough;
    pt.exports.addAbortSignal = Lt.addAbortSignal;
    pt.exports.finished = Lt.finished;
    pt.exports.destroy = Lt.destroy;
    pt.exports.destroy = x7;
    pt.exports.pipeline = Lt.pipeline;
    pt.exports.compose = Lt.compose;
    Object.defineProperty(Lt, "promises", { configurable: true, enumerable: true, get() {
      return _7;
    } });
    pt.exports.Stream = Lt.Stream;
    pt.exports.default = pt.exports;
  });
  vf = {};
  Ja(vf, { default: () => S7 });
  db = R02(() => {
    ot(vf, rn(bu()));
    S7 = rn(bu());
  });
  yi = T2((rT, vb) => {
    var cb = Te().Buffer, pb = (db(), ur(vf)).Transform, E7 = co().StringDecoder, A7 = Ie();
    function Lr(t22) {
      pb.call(this), this.hashMode = typeof t22 == "string", this.hashMode ? this[t22] = this._finalOrDigest : this.final = this._finalOrDigest, this._final && (this.__final = this._final, this._final = null), this._decoder = null, this._encoding = null;
    }
    A7(Lr, pb);
    Lr.prototype.update = function(t22, e2, r2) {
      typeof t22 == "string" && (t22 = cb.from(t22, e2));
      var o2 = this._update(t22);
      return this.hashMode ? this : (r2 && (o2 = this._toString(o2, r2)), o2);
    };
    Lr.prototype.setAutoPadding = function() {
    };
    Lr.prototype.getAuthTag = function() {
      throw new Error("trying to get auth tag in unsupported state");
    };
    Lr.prototype.setAuthTag = function() {
      throw new Error("trying to set auth tag in unsupported state");
    };
    Lr.prototype.setAAD = function() {
      throw new Error("trying to set aad in unsupported state");
    };
    Lr.prototype._transform = function(t22, e2, r2) {
      var o2;
      try {
        this.hashMode ? this._update(t22) : this.push(this._update(t22));
      } catch (f2) {
        o2 = f2;
      } finally {
        r2(o2);
      }
    };
    Lr.prototype._flush = function(t22) {
      var e2;
      try {
        this.push(this.__final());
      } catch (r2) {
        e2 = r2;
      }
      t22(e2);
    };
    Lr.prototype._finalOrDigest = function(t22) {
      var e2 = this.__final() || cb.alloc(0);
      return t22 && (e2 = this._toString(e2, t22, true)), e2;
    };
    Lr.prototype._toString = function(t22, e2, r2) {
      if (this._decoder || (this._decoder = new E7(e2), this._encoding = e2), this._encoding !== e2)
        throw new Error("can't switch encodings");
      var o2 = this._decoder.write(t22);
      return r2 && (o2 += this._decoder.end()), o2;
    };
    vb.exports = Lr;
  });
  bf = T2((iT, mb) => {
    var R7 = Ie(), B7 = Ao(), q7 = Bo(), I7 = ko(), bb = yi();
    function hs(t22) {
      bb.call(this, "digest"), this._hash = t22;
    }
    R7(hs, bb);
    hs.prototype._update = function(t22) {
      this._hash.update(t22);
    };
    hs.prototype._final = function() {
      return this._hash.digest();
    };
    mb.exports = function(e2) {
      return e2 = e2.toLowerCase(), e2 === "md5" ? new B7 : e2 === "rmd160" || e2 === "ripemd160" ? new q7 : new hs(I7(e2));
    };
  });
  wb = T2((nT, yb) => {
    var T7 = Ie(), xn = Te().Buffer, gb = yi(), k7 = xn.alloc(128), mf = 64;
    function us(t22, e2) {
      gb.call(this, "digest"), typeof e2 == "string" && (e2 = xn.from(e2)), this._alg = t22, this._key = e2, e2.length > mf ? e2 = t22(e2) : e2.length < mf && (e2 = xn.concat([e2, k7], mf));
      for (var r2 = this._ipad = xn.allocUnsafe(mf), o2 = this._opad = xn.allocUnsafe(mf), f2 = 0;f2 < mf; f2++)
        r2[f2] = e2[f2] ^ 54, o2[f2] = e2[f2] ^ 92;
      this._hash = [r2];
    }
    T7(us, gb);
    us.prototype._update = function(t22) {
      this._hash.push(t22);
    };
    us.prototype._final = function() {
      var t22 = this._alg(xn.concat(this._hash));
      return this._alg(xn.concat([this._opad, t22]));
    };
    yb.exports = us;
  });
  mu = T2((fT, Mb) => {
    var L7 = Ao();
    Mb.exports = function(t22) {
      return new L7().update(t22).digest();
    };
  });
  wu = T2((aT, xb) => {
    var N7 = Ie(), D7 = wb(), _b = yi(), Ma = Te().Buffer, P7 = mu(), gu = Bo(), yu = ko(), C7 = Ma.alloc(128);
    function _a(t22, e2) {
      _b.call(this, "digest"), typeof e2 == "string" && (e2 = Ma.from(e2));
      var r2 = t22 === "sha512" || t22 === "sha384" ? 128 : 64;
      if (this._alg = t22, this._key = e2, e2.length > r2) {
        var o2 = t22 === "rmd160" ? new gu : yu(t22);
        e2 = o2.update(e2).digest();
      } else
        e2.length < r2 && (e2 = Ma.concat([e2, C7], r2));
      for (var f2 = this._ipad = Ma.allocUnsafe(r2), p2 = this._opad = Ma.allocUnsafe(r2), m32 = 0;m32 < r2; m32++)
        f2[m32] = e2[m32] ^ 54, p2[m32] = e2[m32] ^ 92;
      this._hash = t22 === "rmd160" ? new gu : yu(t22), this._hash.update(f2);
    }
    N7(_a, _b);
    _a.prototype._update = function(t22) {
      this._hash.update(t22);
    };
    _a.prototype._final = function() {
      var t22 = this._hash.digest(), e2 = this._alg === "rmd160" ? new gu : yu(this._alg);
      return e2.update(this._opad).update(t22).digest();
    };
    xb.exports = function(e2, r2) {
      return e2 = e2.toLowerCase(), e2 === "rmd160" || e2 === "ripemd160" ? new _a("rmd160", r2) : e2 === "md5" ? new D7(P7, r2) : new _a(e2, r2);
    };
  });
  Mu = T2((oT, O7) => {
    O7.exports = { sha224WithRSAEncryption: { sign: "rsa", hash: "sha224", id: "302d300d06096086480165030402040500041c" }, "RSA-SHA224": { sign: "ecdsa/rsa", hash: "sha224", id: "302d300d06096086480165030402040500041c" }, sha256WithRSAEncryption: { sign: "rsa", hash: "sha256", id: "3031300d060960864801650304020105000420" }, "RSA-SHA256": { sign: "ecdsa/rsa", hash: "sha256", id: "3031300d060960864801650304020105000420" }, sha384WithRSAEncryption: { sign: "rsa", hash: "sha384", id: "3041300d060960864801650304020205000430" }, "RSA-SHA384": { sign: "ecdsa/rsa", hash: "sha384", id: "3041300d060960864801650304020205000430" }, sha512WithRSAEncryption: { sign: "rsa", hash: "sha512", id: "3051300d060960864801650304020305000440" }, "RSA-SHA512": { sign: "ecdsa/rsa", hash: "sha512", id: "3051300d060960864801650304020305000440" }, "RSA-SHA1": { sign: "rsa", hash: "sha1", id: "3021300906052b0e03021a05000414" }, "ecdsa-with-SHA1": { sign: "ecdsa", hash: "sha1", id: "" }, sha256: { sign: "ecdsa", hash: "sha256", id: "" }, sha224: { sign: "ecdsa", hash: "sha224", id: "" }, sha384: { sign: "ecdsa", hash: "sha384", id: "" }, sha512: { sign: "ecdsa", hash: "sha512", id: "" }, "DSA-SHA": { sign: "dsa", hash: "sha1", id: "" }, "DSA-SHA1": { sign: "dsa", hash: "sha1", id: "" }, DSA: { sign: "dsa", hash: "sha1", id: "" }, "DSA-WITH-SHA224": { sign: "dsa", hash: "sha224", id: "" }, "DSA-SHA224": { sign: "dsa", hash: "sha224", id: "" }, "DSA-WITH-SHA256": { sign: "dsa", hash: "sha256", id: "" }, "DSA-SHA256": { sign: "dsa", hash: "sha256", id: "" }, "DSA-WITH-SHA384": { sign: "dsa", hash: "sha384", id: "" }, "DSA-SHA384": { sign: "dsa", hash: "sha384", id: "" }, "DSA-WITH-SHA512": { sign: "dsa", hash: "sha512", id: "" }, "DSA-SHA512": { sign: "dsa", hash: "sha512", id: "" }, "DSA-RIPEMD160": { sign: "dsa", hash: "rmd160", id: "" }, ripemd160WithRSA: { sign: "rsa", hash: "rmd160", id: "3021300906052b2403020105000414" }, "RSA-RIPEMD160": { sign: "rsa", hash: "rmd160", id: "3021300906052b2403020105000414" }, md5WithRSAEncryption: { sign: "rsa", hash: "md5", id: "3020300c06082a864886f70d020505000410" }, "RSA-MD5": { sign: "rsa", hash: "md5", id: "3020300c06082a864886f70d020505000410" } };
  });
  Eb = T2((sT, Sb) => {
    Sb.exports = Mu();
  });
  _u = T2((hT, Ab) => {
    var F7 = Math.pow(2, 30) - 1;
    Ab.exports = function(t22, e2) {
      if (typeof t22 != "number")
        throw new TypeError("Iterations not a number");
      if (t22 < 0)
        throw new TypeError("Bad iterations");
      if (typeof e2 != "number")
        throw new TypeError("Key length not a number");
      if (e2 < 0 || e2 > F7 || e2 !== e2)
        throw new TypeError("Bad key length");
    };
  });
  xu = T2((uT, Bb) => {
    var ls;
    global.process && global.process.browser ? ls = "utf-8" : global.process && global.process.version ? (Rb = parseInt(process.version.split(".")[0].slice(1), 10), ls = Rb >= 6 ? "utf-8" : "binary") : ls = "utf-8";
    var Rb;
    Bb.exports = ls;
  });
  Eu = T2((lT, qb) => {
    var Su = Te().Buffer;
    qb.exports = function(t22, e2, r2) {
      if (Su.isBuffer(t22))
        return t22;
      if (typeof t22 == "string")
        return Su.from(t22, e2);
      if (ArrayBuffer.isView(t22))
        return Su.from(t22.buffer);
      throw new TypeError(r2 + " must be a string, a Buffer, a typed array or a DataView");
    };
  });
  Au = T2((dT, Lb) => {
    var U7 = mu(), z7 = Bo(), H7 = ko(), Sn = Te().Buffer, W7 = _u(), Ib = xu(), Tb = Eu(), K7 = Sn.alloc(128), ds = { md5: 16, sha1: 20, sha224: 28, sha256: 32, sha384: 48, sha512: 64, rmd160: 20, ripemd160: 20 };
    function kb(t22, e2, r2) {
      var o2 = j7(t22), f2 = t22 === "sha512" || t22 === "sha384" ? 128 : 64;
      e2.length > f2 ? e2 = o2(e2) : e2.length < f2 && (e2 = Sn.concat([e2, K7], f2));
      for (var p2 = Sn.allocUnsafe(f2 + ds[t22]), m32 = Sn.allocUnsafe(f2 + ds[t22]), y22 = 0;y22 < f2; y22++)
        p2[y22] = e2[y22] ^ 54, m32[y22] = e2[y22] ^ 92;
      var M3 = Sn.allocUnsafe(f2 + r2 + 4);
      p2.copy(M3, 0, 0, f2), this.ipad1 = M3, this.ipad2 = p2, this.opad = m32, this.alg = t22, this.blocksize = f2, this.hash = o2, this.size = ds[t22];
    }
    kb.prototype.run = function(t22, e2) {
      t22.copy(e2, this.blocksize);
      var r2 = this.hash(e2);
      return r2.copy(this.opad, this.blocksize), this.hash(this.opad);
    };
    function j7(t22) {
      function e2(o2) {
        return H7(t22).update(o2).digest();
      }
      function r2(o2) {
        return new z7().update(o2).digest();
      }
      return t22 === "rmd160" || t22 === "ripemd160" ? r2 : t22 === "md5" ? U7 : e2;
    }
    function Z7(t22, e2, r2, o2, f2) {
      W7(r2, o2), t22 = Tb(t22, Ib, "Password"), e2 = Tb(e2, Ib, "Salt"), f2 = f2 || "sha1";
      var p2 = new kb(f2, t22, e2.length), m32 = Sn.allocUnsafe(o2), y22 = Sn.allocUnsafe(e2.length + 4);
      e2.copy(y22, 0, 0, e2.length);
      for (var M3 = 0, x5 = ds[f2], S2 = Math.ceil(o2 / x5), E4 = 1;E4 <= S2; E4++) {
        y22.writeUInt32BE(E4, e2.length);
        for (var B5 = p2.run(y22, p2.ipad1), q = B5, L2 = 1;L2 < r2; L2++) {
          q = p2.run(q, p2.ipad2);
          for (var ge = 0;ge < x5; ge++)
            B5[ge] ^= q[ge];
        }
        B5.copy(m32, M3), M3 += x5;
      }
      return m32;
    }
    Lb.exports = Z7;
  });
  Ub = T2((cT, Fb) => {
    var Cb = Te().Buffer, V7 = _u(), Nb = xu(), Db = Au(), Pb = Eu(), cs, xa = global.crypto && global.crypto.subtle, $7 = { sha: "SHA-1", "sha-1": "SHA-1", sha1: "SHA-1", sha256: "SHA-256", "sha-256": "SHA-256", sha384: "SHA-384", "sha-384": "SHA-384", "sha-512": "SHA-512", sha512: "SHA-512" }, Ru = [];
    function G7(t22) {
      if (global.process && !global.process.browser || !xa || !xa.importKey || !xa.deriveBits)
        return Promise.resolve(false);
      if (Ru[t22] !== undefined)
        return Ru[t22];
      cs = cs || Cb.alloc(8);
      var e2 = Ob(cs, cs, 10, 128, t22).then(function() {
        return true;
      }).catch(function() {
        return false;
      });
      return Ru[t22] = e2, e2;
    }
    var En;
    function Bu() {
      return En || (global.process && global.process.nextTick ? En = global.process.nextTick : global.queueMicrotask ? En = global.queueMicrotask : global.setImmediate ? En = global.setImmediate : En = global.setTimeout, En);
    }
    function Ob(t22, e2, r2, o2, f2) {
      return xa.importKey("raw", t22, { name: "PBKDF2" }, false, ["deriveBits"]).then(function(p2) {
        return xa.deriveBits({ name: "PBKDF2", salt: e2, iterations: r2, hash: { name: f2 } }, p2, o2 << 3);
      }).then(function(p2) {
        return Cb.from(p2);
      });
    }
    function Y7(t22, e2) {
      t22.then(function(r2) {
        Bu()(function() {
          e2(null, r2);
        });
      }, function(r2) {
        Bu()(function() {
          e2(r2);
        });
      });
    }
    Fb.exports = function(t22, e2, r2, o2, f2, p2) {
      typeof f2 == "function" && (p2 = f2, f2 = undefined), f2 = f2 || "sha1";
      var m32 = $7[f2.toLowerCase()];
      if (!m32 || typeof global.Promise != "function") {
        Bu()(function() {
          var y22;
          try {
            y22 = Db(t22, e2, r2, o2, f2);
          } catch (M3) {
            return p2(M3);
          }
          p2(null, y22);
        });
        return;
      }
      if (V7(r2, o2), t22 = Pb(t22, Nb, "Password"), e2 = Pb(e2, Nb, "Salt"), typeof p2 != "function")
        throw new Error("No callback provided to pbkdf2");
      Y7(G7(m32).then(function(y22) {
        return y22 ? Ob(t22, e2, r2, o2, m32) : Db(t22, e2, r2, o2, f2);
      }), p2);
    };
  });
  Iu = T2((qu) => {
    qu.pbkdf2 = Ub();
    qu.pbkdf2Sync = Au();
  });
  Tu = T2((br) => {
    br.readUInt32BE = function(e2, r2) {
      var o2 = e2[0 + r2] << 24 | e2[1 + r2] << 16 | e2[2 + r2] << 8 | e2[3 + r2];
      return o2 >>> 0;
    };
    br.writeUInt32BE = function(e2, r2, o2) {
      e2[0 + o2] = r2 >>> 24, e2[1 + o2] = r2 >>> 16 & 255, e2[2 + o2] = r2 >>> 8 & 255, e2[3 + o2] = r2 & 255;
    };
    br.ip = function(e2, r2, o2, f2) {
      for (var p2 = 0, m32 = 0, y22 = 6;y22 >= 0; y22 -= 2) {
        for (var M3 = 0;M3 <= 24; M3 += 8)
          p2 <<= 1, p2 |= r2 >>> M3 + y22 & 1;
        for (var M3 = 0;M3 <= 24; M3 += 8)
          p2 <<= 1, p2 |= e2 >>> M3 + y22 & 1;
      }
      for (var y22 = 6;y22 >= 0; y22 -= 2) {
        for (var M3 = 1;M3 <= 25; M3 += 8)
          m32 <<= 1, m32 |= r2 >>> M3 + y22 & 1;
        for (var M3 = 1;M3 <= 25; M3 += 8)
          m32 <<= 1, m32 |= e2 >>> M3 + y22 & 1;
      }
      o2[f2 + 0] = p2 >>> 0, o2[f2 + 1] = m32 >>> 0;
    };
    br.rip = function(e2, r2, o2, f2) {
      for (var p2 = 0, m32 = 0, y22 = 0;y22 < 4; y22++)
        for (var M3 = 24;M3 >= 0; M3 -= 8)
          p2 <<= 1, p2 |= r2 >>> M3 + y22 & 1, p2 <<= 1, p2 |= e2 >>> M3 + y22 & 1;
      for (var y22 = 4;y22 < 8; y22++)
        for (var M3 = 24;M3 >= 0; M3 -= 8)
          m32 <<= 1, m32 |= r2 >>> M3 + y22 & 1, m32 <<= 1, m32 |= e2 >>> M3 + y22 & 1;
      o2[f2 + 0] = p2 >>> 0, o2[f2 + 1] = m32 >>> 0;
    };
    br.pc1 = function(e2, r2, o2, f2) {
      for (var p2 = 0, m32 = 0, y22 = 7;y22 >= 5; y22--) {
        for (var M3 = 0;M3 <= 24; M3 += 8)
          p2 <<= 1, p2 |= r2 >> M3 + y22 & 1;
        for (var M3 = 0;M3 <= 24; M3 += 8)
          p2 <<= 1, p2 |= e2 >> M3 + y22 & 1;
      }
      for (var M3 = 0;M3 <= 24; M3 += 8)
        p2 <<= 1, p2 |= r2 >> M3 + y22 & 1;
      for (var y22 = 1;y22 <= 3; y22++) {
        for (var M3 = 0;M3 <= 24; M3 += 8)
          m32 <<= 1, m32 |= r2 >> M3 + y22 & 1;
        for (var M3 = 0;M3 <= 24; M3 += 8)
          m32 <<= 1, m32 |= e2 >> M3 + y22 & 1;
      }
      for (var M3 = 0;M3 <= 24; M3 += 8)
        m32 <<= 1, m32 |= e2 >> M3 + y22 & 1;
      o2[f2 + 0] = p2 >>> 0, o2[f2 + 1] = m32 >>> 0;
    };
    br.r28shl = function(e2, r2) {
      return e2 << r2 & 268435455 | e2 >>> 28 - r2;
    };
    var ps = [14, 11, 17, 4, 27, 23, 25, 0, 13, 22, 7, 18, 5, 9, 16, 24, 2, 20, 12, 21, 1, 8, 15, 26, 15, 4, 25, 19, 9, 1, 26, 16, 5, 11, 23, 8, 12, 7, 17, 0, 22, 3, 10, 14, 6, 20, 27, 24];
    br.pc2 = function(e2, r2, o2, f2) {
      for (var p2 = 0, m32 = 0, y22 = ps.length >>> 1, M3 = 0;M3 < y22; M3++)
        p2 <<= 1, p2 |= e2 >>> ps[M3] & 1;
      for (var M3 = y22;M3 < ps.length; M3++)
        m32 <<= 1, m32 |= r2 >>> ps[M3] & 1;
      o2[f2 + 0] = p2 >>> 0, o2[f2 + 1] = m32 >>> 0;
    };
    br.expand = function(e2, r2, o2) {
      var f2 = 0, p2 = 0;
      f2 = (e2 & 1) << 5 | e2 >>> 27;
      for (var m32 = 23;m32 >= 15; m32 -= 4)
        f2 <<= 6, f2 |= e2 >>> m32 & 63;
      for (var m32 = 11;m32 >= 3; m32 -= 4)
        p2 |= e2 >>> m32 & 63, p2 <<= 6;
      p2 |= (e2 & 31) << 1 | e2 >>> 31, r2[o2 + 0] = f2 >>> 0, r2[o2 + 1] = p2 >>> 0;
    };
    var zb = [14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1, 3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8, 4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7, 15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13, 15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14, 9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5, 0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2, 5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9, 10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10, 1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1, 13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7, 11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12, 7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3, 1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9, 10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8, 15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14, 2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1, 8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6, 4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13, 15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3, 12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5, 0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8, 9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10, 7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13, 4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10, 3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6, 1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7, 10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12, 13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4, 10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2, 7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13, 0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11];
    br.substitute = function(e2, r2) {
      for (var o2 = 0, f2 = 0;f2 < 4; f2++) {
        var p2 = e2 >>> 18 - f2 * 6 & 63, m32 = zb[f2 * 64 + p2];
        o2 <<= 4, o2 |= m32;
      }
      for (var f2 = 0;f2 < 4; f2++) {
        var p2 = r2 >>> 18 - f2 * 6 & 63, m32 = zb[4 * 64 + f2 * 64 + p2];
        o2 <<= 4, o2 |= m32;
      }
      return o2 >>> 0;
    };
    var Hb = [16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22, 30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7];
    br.permute = function(e2) {
      for (var r2 = 0, o2 = 0;o2 < Hb.length; o2++)
        r2 <<= 1, r2 |= e2 >>> Hb[o2] & 1;
      return r2 >>> 0;
    };
    br.padSplit = function(e2, r2, o2) {
      for (var f2 = e2.toString(2);f2.length < r2; )
        f2 = "0" + f2;
      for (var p2 = [], m32 = 0;m32 < r2; m32 += o2)
        p2.push(f2.slice(m32, m32 + o2));
      return p2.join(" ");
    };
  });
  ar = T2((bT, Kb) => {
    Kb.exports = Wb;
    function Wb(t22, e2) {
      if (!t22)
        throw new Error(e2 || "Assertion failed");
    }
    Wb.equal = function(e2, r2, o2) {
      if (e2 != r2)
        throw new Error(o2 || "Assertion failed: " + e2 + " != " + r2);
    };
  });
  vs = T2((mT, jb) => {
    var X7 = ar();
    function mr(t22) {
      this.options = t22, this.type = this.options.type, this.blockSize = 8, this._init(), this.buffer = new Array(this.blockSize), this.bufferOff = 0;
    }
    jb.exports = mr;
    mr.prototype._init = function() {
    };
    mr.prototype.update = function(e2) {
      return e2.length === 0 ? [] : this.type === "decrypt" ? this._updateDecrypt(e2) : this._updateEncrypt(e2);
    };
    mr.prototype._buffer = function(e2, r2) {
      for (var o2 = Math.min(this.buffer.length - this.bufferOff, e2.length - r2), f2 = 0;f2 < o2; f2++)
        this.buffer[this.bufferOff + f2] = e2[r2 + f2];
      return this.bufferOff += o2, o2;
    };
    mr.prototype._flushBuffer = function(e2, r2) {
      return this._update(this.buffer, 0, e2, r2), this.bufferOff = 0, this.blockSize;
    };
    mr.prototype._updateEncrypt = function(e2) {
      var r2 = 0, o2 = 0, f2 = (this.bufferOff + e2.length) / this.blockSize | 0, p2 = new Array(f2 * this.blockSize);
      this.bufferOff !== 0 && (r2 += this._buffer(e2, r2), this.bufferOff === this.buffer.length && (o2 += this._flushBuffer(p2, o2)));
      for (var m32 = e2.length - (e2.length - r2) % this.blockSize;r2 < m32; r2 += this.blockSize)
        this._update(e2, r2, p2, o2), o2 += this.blockSize;
      for (;r2 < e2.length; r2++, this.bufferOff++)
        this.buffer[this.bufferOff] = e2[r2];
      return p2;
    };
    mr.prototype._updateDecrypt = function(e2) {
      for (var r2 = 0, o2 = 0, f2 = Math.ceil((this.bufferOff + e2.length) / this.blockSize) - 1, p2 = new Array(f2 * this.blockSize);f2 > 0; f2--)
        r2 += this._buffer(e2, r2), o2 += this._flushBuffer(p2, o2);
      return r2 += this._buffer(e2, r2), p2;
    };
    mr.prototype.final = function(e2) {
      var r2;
      e2 && (r2 = this.update(e2));
      var o2;
      return this.type === "encrypt" ? o2 = this._finalEncrypt() : o2 = this._finalDecrypt(), r2 ? r2.concat(o2) : o2;
    };
    mr.prototype._pad = function(e2, r2) {
      if (r2 === 0)
        return false;
      for (;r2 < e2.length; )
        e2[r2++] = 0;
      return true;
    };
    mr.prototype._finalEncrypt = function() {
      if (!this._pad(this.buffer, this.bufferOff))
        return [];
      var e2 = new Array(this.blockSize);
      return this._update(this.buffer, 0, e2, 0), e2;
    };
    mr.prototype._unpad = function(e2) {
      return e2;
    };
    mr.prototype._finalDecrypt = function() {
      X7.equal(this.bufferOff, this.blockSize, "Not enough data to decrypt");
      var e2 = new Array(this.blockSize);
      return this._flushBuffer(e2, 0), this._unpad(e2);
    };
  });
  ku = T2((gT, $b) => {
    var Zb = ar(), J7 = Ie(), Nt = Tu(), Vb = vs();
    function Q7() {
      this.tmp = new Array(2), this.keys = null;
    }
    function ei(t22) {
      Vb.call(this, t22);
      var e2 = new Q7;
      this._desState = e2, this.deriveKeys(e2, t22.key);
    }
    J7(ei, Vb);
    $b.exports = ei;
    ei.create = function(e2) {
      return new ei(e2);
    };
    var e9 = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1];
    ei.prototype.deriveKeys = function(e2, r2) {
      e2.keys = new Array(16 * 2), Zb.equal(r2.length, this.blockSize, "Invalid key length");
      var o2 = Nt.readUInt32BE(r2, 0), f2 = Nt.readUInt32BE(r2, 4);
      Nt.pc1(o2, f2, e2.tmp, 0), o2 = e2.tmp[0], f2 = e2.tmp[1];
      for (var p2 = 0;p2 < e2.keys.length; p2 += 2) {
        var m32 = e9[p2 >>> 1];
        o2 = Nt.r28shl(o2, m32), f2 = Nt.r28shl(f2, m32), Nt.pc2(o2, f2, e2.keys, p2);
      }
    };
    ei.prototype._update = function(e2, r2, o2, f2) {
      var p2 = this._desState, m32 = Nt.readUInt32BE(e2, r2), y22 = Nt.readUInt32BE(e2, r2 + 4);
      Nt.ip(m32, y22, p2.tmp, 0), m32 = p2.tmp[0], y22 = p2.tmp[1], this.type === "encrypt" ? this._encrypt(p2, m32, y22, p2.tmp, 0) : this._decrypt(p2, m32, y22, p2.tmp, 0), m32 = p2.tmp[0], y22 = p2.tmp[1], Nt.writeUInt32BE(o2, m32, f2), Nt.writeUInt32BE(o2, y22, f2 + 4);
    };
    ei.prototype._pad = function(e2, r2) {
      for (var o2 = e2.length - r2, f2 = r2;f2 < e2.length; f2++)
        e2[f2] = o2;
      return true;
    };
    ei.prototype._unpad = function(e2) {
      for (var r2 = e2[e2.length - 1], o2 = e2.length - r2;o2 < e2.length; o2++)
        Zb.equal(e2[o2], r2);
      return e2.slice(0, e2.length - r2);
    };
    ei.prototype._encrypt = function(e2, r2, o2, f2, p2) {
      for (var m32 = r2, y22 = o2, M3 = 0;M3 < e2.keys.length; M3 += 2) {
        var x5 = e2.keys[M3], S2 = e2.keys[M3 + 1];
        Nt.expand(y22, e2.tmp, 0), x5 ^= e2.tmp[0], S2 ^= e2.tmp[1];
        var E4 = Nt.substitute(x5, S2), B5 = Nt.permute(E4), q = y22;
        y22 = (m32 ^ B5) >>> 0, m32 = q;
      }
      Nt.rip(y22, m32, f2, p2);
    };
    ei.prototype._decrypt = function(e2, r2, o2, f2, p2) {
      for (var m32 = o2, y22 = r2, M3 = e2.keys.length - 2;M3 >= 0; M3 -= 2) {
        var x5 = e2.keys[M3], S2 = e2.keys[M3 + 1];
        Nt.expand(m32, e2.tmp, 0), x5 ^= e2.tmp[0], S2 ^= e2.tmp[1];
        var E4 = Nt.substitute(x5, S2), B5 = Nt.permute(E4), q = m32;
        m32 = (y22 ^ B5) >>> 0, y22 = q;
      }
      Nt.rip(m32, y22, f2, p2);
    };
  });
  Yb = T2((Gb) => {
    var t9 = ar(), r9 = Ie(), bs = {};
    function i9(t22) {
      t9.equal(t22.length, 8, "Invalid IV length"), this.iv = new Array(8);
      for (var e2 = 0;e2 < this.iv.length; e2++)
        this.iv[e2] = t22[e2];
    }
    function n9(t22) {
      function e2(p2) {
        t22.call(this, p2), this._cbcInit();
      }
      r9(e2, t22);
      for (var r2 = Object.keys(bs), o2 = 0;o2 < r2.length; o2++) {
        var f2 = r2[o2];
        e2.prototype[f2] = bs[f2];
      }
      return e2.create = function(m32) {
        return new e2(m32);
      }, e2;
    }
    Gb.instantiate = n9;
    bs._cbcInit = function() {
      var e2 = new i9(this.options.iv);
      this._cbcState = e2;
    };
    bs._update = function(e2, r2, o2, f2) {
      var p2 = this._cbcState, m32 = this.constructor.super_.prototype, y22 = p2.iv;
      if (this.type === "encrypt") {
        for (var M3 = 0;M3 < this.blockSize; M3++)
          y22[M3] ^= e2[r2 + M3];
        m32._update.call(this, y22, 0, o2, f2);
        for (var M3 = 0;M3 < this.blockSize; M3++)
          y22[M3] = o2[f2 + M3];
      } else {
        m32._update.call(this, e2, r2, o2, f2);
        for (var M3 = 0;M3 < this.blockSize; M3++)
          o2[f2 + M3] ^= y22[M3];
        for (var M3 = 0;M3 < this.blockSize; M3++)
          y22[M3] = e2[r2 + M3];
      }
    };
  });
  Qb = T2((wT, Jb) => {
    var f9 = ar(), a9 = Ie(), Xb = vs(), Wi = ku();
    function o9(t22, e2) {
      f9.equal(e2.length, 24, "Invalid key length");
      var r2 = e2.slice(0, 8), o2 = e2.slice(8, 16), f2 = e2.slice(16, 24);
      t22 === "encrypt" ? this.ciphers = [Wi.create({ type: "encrypt", key: r2 }), Wi.create({ type: "decrypt", key: o2 }), Wi.create({ type: "encrypt", key: f2 })] : this.ciphers = [Wi.create({ type: "decrypt", key: f2 }), Wi.create({ type: "encrypt", key: o2 }), Wi.create({ type: "decrypt", key: r2 })];
    }
    function An(t22) {
      Xb.call(this, t22);
      var e2 = new o9(this.type, this.options.key);
      this._edeState = e2;
    }
    a9(An, Xb);
    Jb.exports = An;
    An.create = function(e2) {
      return new An(e2);
    };
    An.prototype._update = function(e2, r2, o2, f2) {
      var p2 = this._edeState;
      p2.ciphers[0]._update(e2, r2, o2, f2), p2.ciphers[1]._update(o2, f2, o2, f2), p2.ciphers[2]._update(o2, f2, o2, f2);
    };
    An.prototype._pad = Wi.prototype._pad;
    An.prototype._unpad = Wi.prototype._unpad;
  });
  em = T2((gf) => {
    gf.utils = Tu();
    gf.Cipher = vs();
    gf.DES = ku();
    gf.CBC = Yb();
    gf.EDE = Qb();
  });
  im = T2((_T, rm) => {
    var tm = yi(), wi = em(), s9 = Ie(), Rn = Te().Buffer, Sa = { "des-ede3-cbc": wi.CBC.instantiate(wi.EDE), "des-ede3": wi.EDE, "des-ede-cbc": wi.CBC.instantiate(wi.EDE), "des-ede": wi.EDE, "des-cbc": wi.CBC.instantiate(wi.DES), "des-ecb": wi.DES };
    Sa.des = Sa["des-cbc"];
    Sa.des3 = Sa["des-ede3-cbc"];
    rm.exports = ms;
    s9(ms, tm);
    function ms(t22) {
      tm.call(this);
      var e2 = t22.mode.toLowerCase(), r2 = Sa[e2], o2;
      t22.decrypt ? o2 = "decrypt" : o2 = "encrypt";
      var f2 = t22.key;
      Rn.isBuffer(f2) || (f2 = Rn.from(f2)), (e2 === "des-ede" || e2 === "des-ede-cbc") && (f2 = Rn.concat([f2, f2.slice(0, 8)]));
      var p2 = t22.iv;
      Rn.isBuffer(p2) || (p2 = Rn.from(p2)), this._des = r2.create({ key: f2, iv: p2, type: o2 });
    }
    ms.prototype._update = function(t22) {
      return Rn.from(this._des.update(t22));
    };
    ms.prototype._final = function() {
      return Rn.from(this._des.final());
    };
  });
  nm = T2((Lu) => {
    Lu.encrypt = function(t22, e2) {
      return t22._cipher.encryptBlock(e2);
    };
    Lu.decrypt = function(t22, e2) {
      return t22._cipher.decryptBlock(e2);
    };
  });
  yf = T2((ST, fm) => {
    fm.exports = function(e2, r2) {
      for (var o2 = Math.min(e2.length, r2.length), f2 = new Buffer(o2), p2 = 0;p2 < o2; ++p2)
        f2[p2] = e2[p2] ^ r2[p2];
      return f2;
    };
  });
  om = T2((Nu) => {
    var am = yf();
    Nu.encrypt = function(t22, e2) {
      var r2 = am(e2, t22._prev);
      return t22._prev = t22._cipher.encryptBlock(r2), t22._prev;
    };
    Nu.decrypt = function(t22, e2) {
      var r2 = t22._prev;
      t22._prev = e2;
      var o2 = t22._cipher.decryptBlock(e2);
      return am(o2, r2);
    };
  });
  um = T2((hm) => {
    var Ea = Te().Buffer, h9 = yf();
    function sm(t22, e2, r2) {
      var o2 = e2.length, f2 = h9(e2, t22._cache);
      return t22._cache = t22._cache.slice(o2), t22._prev = Ea.concat([t22._prev, r2 ? e2 : f2]), f2;
    }
    hm.encrypt = function(t22, e2, r2) {
      for (var o2 = Ea.allocUnsafe(0), f2;e2.length; )
        if (t22._cache.length === 0 && (t22._cache = t22._cipher.encryptBlock(t22._prev), t22._prev = Ea.allocUnsafe(0)), t22._cache.length <= e2.length)
          f2 = t22._cache.length, o2 = Ea.concat([o2, sm(t22, e2.slice(0, f2), r2)]), e2 = e2.slice(f2);
        else {
          o2 = Ea.concat([o2, sm(t22, e2, r2)]);
          break;
        }
      return o2;
    };
  });
  dm = T2((lm) => {
    var Du = Te().Buffer;
    function u9(t22, e2, r2) {
      var o2 = t22._cipher.encryptBlock(t22._prev), f2 = o2[0] ^ e2;
      return t22._prev = Du.concat([t22._prev.slice(1), Du.from([r2 ? e2 : f2])]), f2;
    }
    lm.encrypt = function(t22, e2, r2) {
      for (var o2 = e2.length, f2 = Du.allocUnsafe(o2), p2 = -1;++p2 < o2; )
        f2[p2] = u9(t22, e2[p2], r2);
      return f2;
    };
  });
  pm = T2((cm) => {
    var gs = Te().Buffer;
    function l9(t22, e2, r2) {
      for (var o2, f2 = -1, p2 = 8, m32 = 0, y22, M3;++f2 < p2; )
        o2 = t22._cipher.encryptBlock(t22._prev), y22 = e2 & 1 << 7 - f2 ? 128 : 0, M3 = o2[0] ^ y22, m32 += (M3 & 128) >> f2 % 8, t22._prev = d9(t22._prev, r2 ? y22 : M3);
      return m32;
    }
    function d9(t22, e2) {
      var r2 = t22.length, o2 = -1, f2 = gs.allocUnsafe(t22.length);
      for (t22 = gs.concat([t22, gs.from([e2])]);++o2 < r2; )
        f2[o2] = t22[o2] << 1 | t22[o2 + 1] >> 7;
      return f2;
    }
    cm.encrypt = function(t22, e2, r2) {
      for (var o2 = e2.length, f2 = gs.allocUnsafe(o2), p2 = -1;++p2 < o2; )
        f2[p2] = l9(t22, e2[p2], r2);
      return f2;
    };
  });
  bm = T2((vm) => {
    var c9 = yf();
    function p9(t22) {
      return t22._prev = t22._cipher.encryptBlock(t22._prev), t22._prev;
    }
    vm.encrypt = function(t22, e2) {
      for (;t22._cache.length < e2.length; )
        t22._cache = Buffer.concat([t22._cache, p9(t22)]);
      var r2 = t22._cache.slice(0, e2.length);
      return t22._cache = t22._cache.slice(e2.length), c9(e2, r2);
    };
  });
  Pu = T2((IT, mm) => {
    function v9(t22) {
      for (var e2 = t22.length, r2;e2--; )
        if (r2 = t22.readUInt8(e2), r2 === 255)
          t22.writeUInt8(0, e2);
        else {
          r2++, t22.writeUInt8(r2, e2);
          break;
        }
    }
    mm.exports = v9;
  });
  Ou = T2((ym) => {
    var b9 = yf(), gm = Te().Buffer, m9 = Pu();
    function g9(t22) {
      var e2 = t22._cipher.encryptBlockRaw(t22._prev);
      return m9(t22._prev), e2;
    }
    var Cu = 16;
    ym.encrypt = function(t22, e2) {
      var r2 = Math.ceil(e2.length / Cu), o2 = t22._cache.length;
      t22._cache = gm.concat([t22._cache, gm.allocUnsafe(r2 * Cu)]);
      for (var f2 = 0;f2 < r2; f2++) {
        var p2 = g9(t22), m32 = o2 + f2 * Cu;
        t22._cache.writeUInt32BE(p2[0], m32 + 0), t22._cache.writeUInt32BE(p2[1], m32 + 4), t22._cache.writeUInt32BE(p2[2], m32 + 8), t22._cache.writeUInt32BE(p2[3], m32 + 12);
      }
      var y22 = t22._cache.slice(0, e2.length);
      return t22._cache = t22._cache.slice(e2.length), b9(e2, y22);
    };
  });
  Fu = T2((kT, y9) => {
    y9.exports = { "aes-128-ecb": { cipher: "AES", key: 128, iv: 0, mode: "ECB", type: "block" }, "aes-192-ecb": { cipher: "AES", key: 192, iv: 0, mode: "ECB", type: "block" }, "aes-256-ecb": { cipher: "AES", key: 256, iv: 0, mode: "ECB", type: "block" }, "aes-128-cbc": { cipher: "AES", key: 128, iv: 16, mode: "CBC", type: "block" }, "aes-192-cbc": { cipher: "AES", key: 192, iv: 16, mode: "CBC", type: "block" }, "aes-256-cbc": { cipher: "AES", key: 256, iv: 16, mode: "CBC", type: "block" }, aes128: { cipher: "AES", key: 128, iv: 16, mode: "CBC", type: "block" }, aes192: { cipher: "AES", key: 192, iv: 16, mode: "CBC", type: "block" }, aes256: { cipher: "AES", key: 256, iv: 16, mode: "CBC", type: "block" }, "aes-128-cfb": { cipher: "AES", key: 128, iv: 16, mode: "CFB", type: "stream" }, "aes-192-cfb": { cipher: "AES", key: 192, iv: 16, mode: "CFB", type: "stream" }, "aes-256-cfb": { cipher: "AES", key: 256, iv: 16, mode: "CFB", type: "stream" }, "aes-128-cfb8": { cipher: "AES", key: 128, iv: 16, mode: "CFB8", type: "stream" }, "aes-192-cfb8": { cipher: "AES", key: 192, iv: 16, mode: "CFB8", type: "stream" }, "aes-256-cfb8": { cipher: "AES", key: 256, iv: 16, mode: "CFB8", type: "stream" }, "aes-128-cfb1": { cipher: "AES", key: 128, iv: 16, mode: "CFB1", type: "stream" }, "aes-192-cfb1": { cipher: "AES", key: 192, iv: 16, mode: "CFB1", type: "stream" }, "aes-256-cfb1": { cipher: "AES", key: 256, iv: 16, mode: "CFB1", type: "stream" }, "aes-128-ofb": { cipher: "AES", key: 128, iv: 16, mode: "OFB", type: "stream" }, "aes-192-ofb": { cipher: "AES", key: 192, iv: 16, mode: "OFB", type: "stream" }, "aes-256-ofb": { cipher: "AES", key: 256, iv: 16, mode: "OFB", type: "stream" }, "aes-128-ctr": { cipher: "AES", key: 128, iv: 16, mode: "CTR", type: "stream" }, "aes-192-ctr": { cipher: "AES", key: 192, iv: 16, mode: "CTR", type: "stream" }, "aes-256-ctr": { cipher: "AES", key: 256, iv: 16, mode: "CTR", type: "stream" }, "aes-128-gcm": { cipher: "AES", key: 128, iv: 12, mode: "GCM", type: "auth" }, "aes-192-gcm": { cipher: "AES", key: 192, iv: 12, mode: "GCM", type: "auth" }, "aes-256-gcm": { cipher: "AES", key: 256, iv: 12, mode: "GCM", type: "auth" } };
  });
  ws = T2((LT, wm) => {
    var w9 = { ECB: nm(), CBC: om(), CFB: um(), CFB8: dm(), CFB1: pm(), OFB: bm(), CTR: Ou(), GCM: Ou() }, ys = Fu();
    for (Uu in ys)
      ys[Uu].module = w9[ys[Uu].mode];
    var Uu;
    wm.exports = ys;
  });
  Aa = T2((NT, _m) => {
    var Ms = Te().Buffer;
    function Hu(t22) {
      Ms.isBuffer(t22) || (t22 = Ms.from(t22));
      for (var e2 = t22.length / 4 | 0, r2 = new Array(e2), o2 = 0;o2 < e2; o2++)
        r2[o2] = t22.readUInt32BE(o2 * 4);
      return r2;
    }
    function zu(t22) {
      for (var e2 = 0;e2 < t22.length; t22++)
        t22[e2] = 0;
    }
    function Mm(t22, e2, r2, o2, f2) {
      for (var p2 = r2[0], m32 = r2[1], y22 = r2[2], M3 = r2[3], x5 = t22[0] ^ e2[0], S2 = t22[1] ^ e2[1], E4 = t22[2] ^ e2[2], B5 = t22[3] ^ e2[3], q, L2, ge, _e, N4 = 4, we = 1;we < f2; we++)
        q = p2[x5 >>> 24] ^ m32[S2 >>> 16 & 255] ^ y22[E4 >>> 8 & 255] ^ M3[B5 & 255] ^ e2[N4++], L2 = p2[S2 >>> 24] ^ m32[E4 >>> 16 & 255] ^ y22[B5 >>> 8 & 255] ^ M3[x5 & 255] ^ e2[N4++], ge = p2[E4 >>> 24] ^ m32[B5 >>> 16 & 255] ^ y22[x5 >>> 8 & 255] ^ M3[S2 & 255] ^ e2[N4++], _e = p2[B5 >>> 24] ^ m32[x5 >>> 16 & 255] ^ y22[S2 >>> 8 & 255] ^ M3[E4 & 255] ^ e2[N4++], x5 = q, S2 = L2, E4 = ge, B5 = _e;
      return q = (o2[x5 >>> 24] << 24 | o2[S2 >>> 16 & 255] << 16 | o2[E4 >>> 8 & 255] << 8 | o2[B5 & 255]) ^ e2[N4++], L2 = (o2[S2 >>> 24] << 24 | o2[E4 >>> 16 & 255] << 16 | o2[B5 >>> 8 & 255] << 8 | o2[x5 & 255]) ^ e2[N4++], ge = (o2[E4 >>> 24] << 24 | o2[B5 >>> 16 & 255] << 16 | o2[x5 >>> 8 & 255] << 8 | o2[S2 & 255]) ^ e2[N4++], _e = (o2[B5 >>> 24] << 24 | o2[x5 >>> 16 & 255] << 16 | o2[S2 >>> 8 & 255] << 8 | o2[E4 & 255]) ^ e2[N4++], q = q >>> 0, L2 = L2 >>> 0, ge = ge >>> 0, _e = _e >>> 0, [q, L2, ge, _e];
    }
    var M9 = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54], kt = function() {
      for (var t22 = new Array(256), e2 = 0;e2 < 256; e2++)
        e2 < 128 ? t22[e2] = e2 << 1 : t22[e2] = e2 << 1 ^ 283;
      for (var r2 = [], o2 = [], f2 = [[], [], [], []], p2 = [[], [], [], []], m32 = 0, y22 = 0, M3 = 0;M3 < 256; ++M3) {
        var x5 = y22 ^ y22 << 1 ^ y22 << 2 ^ y22 << 3 ^ y22 << 4;
        x5 = x5 >>> 8 ^ x5 & 255 ^ 99, r2[m32] = x5, o2[x5] = m32;
        var S2 = t22[m32], E4 = t22[S2], B5 = t22[E4], q = t22[x5] * 257 ^ x5 * 16843008;
        f2[0][m32] = q << 24 | q >>> 8, f2[1][m32] = q << 16 | q >>> 16, f2[2][m32] = q << 8 | q >>> 24, f2[3][m32] = q, q = B5 * 16843009 ^ E4 * 65537 ^ S2 * 257 ^ m32 * 16843008, p2[0][x5] = q << 24 | q >>> 8, p2[1][x5] = q << 16 | q >>> 16, p2[2][x5] = q << 8 | q >>> 24, p2[3][x5] = q, m32 === 0 ? m32 = y22 = 1 : (m32 = S2 ^ t22[t22[t22[B5 ^ S2]]], y22 ^= t22[t22[y22]]);
      }
      return { SBOX: r2, INV_SBOX: o2, SUB_MIX: f2, INV_SUB_MIX: p2 };
    }();
    function gr(t22) {
      this._key = Hu(t22), this._reset();
    }
    gr.blockSize = 4 * 4;
    gr.keySize = 256 / 8;
    gr.prototype.blockSize = gr.blockSize;
    gr.prototype.keySize = gr.keySize;
    gr.prototype._reset = function() {
      for (var t22 = this._key, e2 = t22.length, r2 = e2 + 6, o2 = (r2 + 1) * 4, f2 = [], p2 = 0;p2 < e2; p2++)
        f2[p2] = t22[p2];
      for (p2 = e2;p2 < o2; p2++) {
        var m32 = f2[p2 - 1];
        p2 % e2 === 0 ? (m32 = m32 << 8 | m32 >>> 24, m32 = kt.SBOX[m32 >>> 24] << 24 | kt.SBOX[m32 >>> 16 & 255] << 16 | kt.SBOX[m32 >>> 8 & 255] << 8 | kt.SBOX[m32 & 255], m32 ^= M9[p2 / e2 | 0] << 24) : e2 > 6 && p2 % e2 === 4 && (m32 = kt.SBOX[m32 >>> 24] << 24 | kt.SBOX[m32 >>> 16 & 255] << 16 | kt.SBOX[m32 >>> 8 & 255] << 8 | kt.SBOX[m32 & 255]), f2[p2] = f2[p2 - e2] ^ m32;
      }
      for (var y22 = [], M3 = 0;M3 < o2; M3++) {
        var x5 = o2 - M3, S2 = f2[x5 - (M3 % 4 ? 0 : 4)];
        M3 < 4 || x5 <= 4 ? y22[M3] = S2 : y22[M3] = kt.INV_SUB_MIX[0][kt.SBOX[S2 >>> 24]] ^ kt.INV_SUB_MIX[1][kt.SBOX[S2 >>> 16 & 255]] ^ kt.INV_SUB_MIX[2][kt.SBOX[S2 >>> 8 & 255]] ^ kt.INV_SUB_MIX[3][kt.SBOX[S2 & 255]];
      }
      this._nRounds = r2, this._keySchedule = f2, this._invKeySchedule = y22;
    };
    gr.prototype.encryptBlockRaw = function(t22) {
      return t22 = Hu(t22), Mm(t22, this._keySchedule, kt.SUB_MIX, kt.SBOX, this._nRounds);
    };
    gr.prototype.encryptBlock = function(t22) {
      var e2 = this.encryptBlockRaw(t22), r2 = Ms.allocUnsafe(16);
      return r2.writeUInt32BE(e2[0], 0), r2.writeUInt32BE(e2[1], 4), r2.writeUInt32BE(e2[2], 8), r2.writeUInt32BE(e2[3], 12), r2;
    };
    gr.prototype.decryptBlock = function(t22) {
      t22 = Hu(t22);
      var e2 = t22[1];
      t22[1] = t22[3], t22[3] = e2;
      var r2 = Mm(t22, this._invKeySchedule, kt.INV_SUB_MIX, kt.INV_SBOX, this._nRounds), o2 = Ms.allocUnsafe(16);
      return o2.writeUInt32BE(r2[0], 0), o2.writeUInt32BE(r2[3], 4), o2.writeUInt32BE(r2[2], 8), o2.writeUInt32BE(r2[1], 12), o2;
    };
    gr.prototype.scrub = function() {
      zu(this._keySchedule), zu(this._invKeySchedule), zu(this._key);
    };
    _m.exports.AES = gr;
  });
  Em = T2((DT, Sm) => {
    var wf = Te().Buffer, _9 = wf.alloc(16, 0);
    function x9(t22) {
      return [t22.readUInt32BE(0), t22.readUInt32BE(4), t22.readUInt32BE(8), t22.readUInt32BE(12)];
    }
    function xm(t22) {
      var e2 = wf.allocUnsafe(16);
      return e2.writeUInt32BE(t22[0] >>> 0, 0), e2.writeUInt32BE(t22[1] >>> 0, 4), e2.writeUInt32BE(t22[2] >>> 0, 8), e2.writeUInt32BE(t22[3] >>> 0, 12), e2;
    }
    function Ra(t22) {
      this.h = t22, this.state = wf.alloc(16, 0), this.cache = wf.allocUnsafe(0);
    }
    Ra.prototype.ghash = function(t22) {
      for (var e2 = -1;++e2 < t22.length; )
        this.state[e2] ^= t22[e2];
      this._multiply();
    };
    Ra.prototype._multiply = function() {
      for (var t22 = x9(this.h), e2 = [0, 0, 0, 0], r2, o2, f2, p2 = -1;++p2 < 128; ) {
        for (o2 = (this.state[~~(p2 / 8)] & 1 << 7 - p2 % 8) !== 0, o2 && (e2[0] ^= t22[0], e2[1] ^= t22[1], e2[2] ^= t22[2], e2[3] ^= t22[3]), f2 = (t22[3] & 1) !== 0, r2 = 3;r2 > 0; r2--)
          t22[r2] = t22[r2] >>> 1 | (t22[r2 - 1] & 1) << 31;
        t22[0] = t22[0] >>> 1, f2 && (t22[0] = t22[0] ^ 225 << 24);
      }
      this.state = xm(e2);
    };
    Ra.prototype.update = function(t22) {
      this.cache = wf.concat([this.cache, t22]);
      for (var e2;this.cache.length >= 16; )
        e2 = this.cache.slice(0, 16), this.cache = this.cache.slice(16), this.ghash(e2);
    };
    Ra.prototype.final = function(t22, e2) {
      return this.cache.length && this.ghash(wf.concat([this.cache, _9], 16)), this.ghash(xm([0, t22, 0, e2])), this.state;
    };
    Sm.exports = Ra;
  });
  Wu = T2((PT, Bm) => {
    var S9 = Aa(), rr = Te().Buffer, Am = yi(), E9 = Ie(), Rm = Em(), A9 = yf(), R9 = Pu();
    function B9(t22, e2) {
      var r2 = 0;
      t22.length !== e2.length && r2++;
      for (var o2 = Math.min(t22.length, e2.length), f2 = 0;f2 < o2; ++f2)
        r2 += t22[f2] ^ e2[f2];
      return r2;
    }
    function q9(t22, e2, r2) {
      if (e2.length === 12)
        return t22._finID = rr.concat([e2, rr.from([0, 0, 0, 1])]), rr.concat([e2, rr.from([0, 0, 0, 2])]);
      var o2 = new Rm(r2), f2 = e2.length, p2 = f2 % 16;
      o2.update(e2), p2 && (p2 = 16 - p2, o2.update(rr.alloc(p2, 0))), o2.update(rr.alloc(8, 0));
      var m32 = f2 * 8, y22 = rr.alloc(8);
      y22.writeUIntBE(m32, 0, 8), o2.update(y22), t22._finID = o2.state;
      var M3 = rr.from(t22._finID);
      return R9(M3), M3;
    }
    function Bn(t22, e2, r2, o2) {
      Am.call(this);
      var f2 = rr.alloc(4, 0);
      this._cipher = new S9.AES(e2);
      var p2 = this._cipher.encryptBlock(f2);
      this._ghash = new Rm(p2), r2 = q9(this, r2, p2), this._prev = rr.from(r2), this._cache = rr.allocUnsafe(0), this._secCache = rr.allocUnsafe(0), this._decrypt = o2, this._alen = 0, this._len = 0, this._mode = t22, this._authTag = null, this._called = false;
    }
    E9(Bn, Am);
    Bn.prototype._update = function(t22) {
      if (!this._called && this._alen) {
        var e2 = 16 - this._alen % 16;
        e2 < 16 && (e2 = rr.alloc(e2, 0), this._ghash.update(e2));
      }
      this._called = true;
      var r2 = this._mode.encrypt(this, t22);
      return this._decrypt ? this._ghash.update(t22) : this._ghash.update(r2), this._len += t22.length, r2;
    };
    Bn.prototype._final = function() {
      if (this._decrypt && !this._authTag)
        throw new Error("Unsupported state or unable to authenticate data");
      var t22 = A9(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
      if (this._decrypt && B9(t22, this._authTag))
        throw new Error("Unsupported state or unable to authenticate data");
      this._authTag = t22, this._cipher.scrub();
    };
    Bn.prototype.getAuthTag = function() {
      if (this._decrypt || !rr.isBuffer(this._authTag))
        throw new Error("Attempting to get auth tag in unsupported state");
      return this._authTag;
    };
    Bn.prototype.setAuthTag = function(e2) {
      if (!this._decrypt)
        throw new Error("Attempting to set auth tag in unsupported state");
      this._authTag = e2;
    };
    Bn.prototype.setAAD = function(e2) {
      if (this._called)
        throw new Error("Attempting to set AAD in unsupported state");
      this._ghash.update(e2), this._alen += e2.length;
    };
    Bm.exports = Bn;
  });
  ju = T2((CT, Im) => {
    var I9 = Aa(), Ku = Te().Buffer, qm = yi(), T9 = Ie();
    function _s(t22, e2, r2, o2) {
      qm.call(this), this._cipher = new I9.AES(e2), this._prev = Ku.from(r2), this._cache = Ku.allocUnsafe(0), this._secCache = Ku.allocUnsafe(0), this._decrypt = o2, this._mode = t22;
    }
    T9(_s, qm);
    _s.prototype._update = function(t22) {
      return this._mode.encrypt(this, t22, this._decrypt);
    };
    _s.prototype._final = function() {
      this._cipher.scrub();
    };
    Im.exports = _s;
  });
  Ba = T2((OT, Tm) => {
    var qn = Te().Buffer, k9 = Ao();
    function L9(t22, e2, r2, o2) {
      if (qn.isBuffer(t22) || (t22 = qn.from(t22, "binary")), e2 && (qn.isBuffer(e2) || (e2 = qn.from(e2, "binary")), e2.length !== 8))
        throw new RangeError("salt should be Buffer with 8 byte length");
      for (var f2 = r2 / 8, p2 = qn.alloc(f2), m32 = qn.alloc(o2 || 0), y22 = qn.alloc(0);f2 > 0 || o2 > 0; ) {
        var M3 = new k9;
        M3.update(y22), M3.update(t22), e2 && M3.update(e2), y22 = M3.digest();
        var x5 = 0;
        if (f2 > 0) {
          var S2 = p2.length - f2;
          x5 = Math.min(f2, y22.length), y22.copy(p2, S2, 0, x5), f2 -= x5;
        }
        if (x5 < y22.length && o2 > 0) {
          var E4 = m32.length - o2, B5 = Math.min(o2, y22.length - x5);
          y22.copy(m32, E4, x5, x5 + B5), o2 -= B5;
        }
      }
      return y22.fill(0), { key: p2, iv: m32 };
    }
    Tm.exports = L9;
  });
  Dm = T2((Zu) => {
    var km = ws(), N9 = Wu(), Mi = Te().Buffer, D9 = ju(), Lm = yi(), P9 = Aa(), C9 = Ba(), O9 = Ie();
    function qa(t22, e2, r2) {
      Lm.call(this), this._cache = new xs, this._cipher = new P9.AES(e2), this._prev = Mi.from(r2), this._mode = t22, this._autopadding = true;
    }
    O9(qa, Lm);
    qa.prototype._update = function(t22) {
      this._cache.add(t22);
      for (var e2, r2, o2 = [];e2 = this._cache.get(); )
        r2 = this._mode.encrypt(this, e2), o2.push(r2);
      return Mi.concat(o2);
    };
    var F9 = Mi.alloc(16, 16);
    qa.prototype._final = function() {
      var t22 = this._cache.flush();
      if (this._autopadding)
        return t22 = this._mode.encrypt(this, t22), this._cipher.scrub(), t22;
      if (!t22.equals(F9))
        throw this._cipher.scrub(), new Error("data not multiple of block length");
    };
    qa.prototype.setAutoPadding = function(t22) {
      return this._autopadding = !!t22, this;
    };
    function xs() {
      this.cache = Mi.allocUnsafe(0);
    }
    xs.prototype.add = function(t22) {
      this.cache = Mi.concat([this.cache, t22]);
    };
    xs.prototype.get = function() {
      if (this.cache.length > 15) {
        var t22 = this.cache.slice(0, 16);
        return this.cache = this.cache.slice(16), t22;
      }
      return null;
    };
    xs.prototype.flush = function() {
      for (var t22 = 16 - this.cache.length, e2 = Mi.allocUnsafe(t22), r2 = -1;++r2 < t22; )
        e2.writeUInt8(t22, r2);
      return Mi.concat([this.cache, e2]);
    };
    function Nm(t22, e2, r2) {
      var o2 = km[t22.toLowerCase()];
      if (!o2)
        throw new TypeError("invalid suite type");
      if (typeof e2 == "string" && (e2 = Mi.from(e2)), e2.length !== o2.key / 8)
        throw new TypeError("invalid key length " + e2.length);
      if (typeof r2 == "string" && (r2 = Mi.from(r2)), o2.mode !== "GCM" && r2.length !== o2.iv)
        throw new TypeError("invalid iv length " + r2.length);
      return o2.type === "stream" ? new D9(o2.module, e2, r2) : o2.type === "auth" ? new N9(o2.module, e2, r2) : new qa(o2.module, e2, r2);
    }
    function U9(t22, e2) {
      var r2 = km[t22.toLowerCase()];
      if (!r2)
        throw new TypeError("invalid suite type");
      var o2 = C9(e2, false, r2.key, r2.iv);
      return Nm(t22, o2.key, o2.iv);
    }
    Zu.createCipheriv = Nm;
    Zu.createCipher = U9;
  });
  Fm = T2((Vu) => {
    var z9 = Wu(), Mf = Te().Buffer, Pm = ws(), H9 = ju(), Cm = yi(), W9 = Aa(), K9 = Ba(), j9 = Ie();
    function Ia(t22, e2, r2) {
      Cm.call(this), this._cache = new Ss, this._last = undefined, this._cipher = new W9.AES(e2), this._prev = Mf.from(r2), this._mode = t22, this._autopadding = true;
    }
    j9(Ia, Cm);
    Ia.prototype._update = function(t22) {
      this._cache.add(t22);
      for (var e2, r2, o2 = [];e2 = this._cache.get(this._autopadding); )
        r2 = this._mode.decrypt(this, e2), o2.push(r2);
      return Mf.concat(o2);
    };
    Ia.prototype._final = function() {
      var t22 = this._cache.flush();
      if (this._autopadding)
        return Z9(this._mode.decrypt(this, t22));
      if (t22)
        throw new Error("data not multiple of block length");
    };
    Ia.prototype.setAutoPadding = function(t22) {
      return this._autopadding = !!t22, this;
    };
    function Ss() {
      this.cache = Mf.allocUnsafe(0);
    }
    Ss.prototype.add = function(t22) {
      this.cache = Mf.concat([this.cache, t22]);
    };
    Ss.prototype.get = function(t22) {
      var e2;
      if (t22) {
        if (this.cache.length > 16)
          return e2 = this.cache.slice(0, 16), this.cache = this.cache.slice(16), e2;
      } else if (this.cache.length >= 16)
        return e2 = this.cache.slice(0, 16), this.cache = this.cache.slice(16), e2;
      return null;
    };
    Ss.prototype.flush = function() {
      if (this.cache.length)
        return this.cache;
    };
    function Z9(t22) {
      var e2 = t22[15];
      if (e2 < 1 || e2 > 16)
        throw new Error("unable to decrypt data");
      for (var r2 = -1;++r2 < e2; )
        if (t22[r2 + (16 - e2)] !== e2)
          throw new Error("unable to decrypt data");
      if (e2 !== 16)
        return t22.slice(0, 16 - e2);
    }
    function Om(t22, e2, r2) {
      var o2 = Pm[t22.toLowerCase()];
      if (!o2)
        throw new TypeError("invalid suite type");
      if (typeof r2 == "string" && (r2 = Mf.from(r2)), o2.mode !== "GCM" && r2.length !== o2.iv)
        throw new TypeError("invalid iv length " + r2.length);
      if (typeof e2 == "string" && (e2 = Mf.from(e2)), e2.length !== o2.key / 8)
        throw new TypeError("invalid key length " + e2.length);
      return o2.type === "stream" ? new H9(o2.module, e2, r2, true) : o2.type === "auth" ? new z9(o2.module, e2, r2, true) : new Ia(o2.module, e2, r2);
    }
    function V9(t22, e2) {
      var r2 = Pm[t22.toLowerCase()];
      if (!r2)
        throw new TypeError("invalid suite type");
      var o2 = K9(e2, false, r2.key, r2.iv);
      return Om(t22, o2.key, o2.iv);
    }
    Vu.createDecipher = V9;
    Vu.createDecipheriv = Om;
  });
  Es = T2((Nr) => {
    var Um = Dm(), zm = Fm(), $9 = Fu();
    function G9() {
      return Object.keys($9);
    }
    Nr.createCipher = Nr.Cipher = Um.createCipher;
    Nr.createCipheriv = Nr.Cipheriv = Um.createCipheriv;
    Nr.createDecipher = Nr.Decipher = zm.createDecipher;
    Nr.createDecipheriv = Nr.Decipheriv = zm.createDecipheriv;
    Nr.listCiphers = Nr.getCiphers = G9;
  });
  Hm = T2((_i) => {
    _i["des-ecb"] = { key: 8, iv: 0 };
    _i["des-cbc"] = _i.des = { key: 8, iv: 8 };
    _i["des-ede3-cbc"] = _i.des3 = { key: 24, iv: 8 };
    _i["des-ede3"] = { key: 24, iv: 0 };
    _i["des-ede-cbc"] = { key: 16, iv: 8 };
    _i["des-ede"] = { key: 16, iv: 0 };
  });
  Vm = T2((Dr) => {
    var Wm = im(), $u = Es(), Ki = ws(), xi = Hm(), Km = Ba();
    function Y9(t22, e2) {
      t22 = t22.toLowerCase();
      var r2, o2;
      if (Ki[t22])
        r2 = Ki[t22].key, o2 = Ki[t22].iv;
      else if (xi[t22])
        r2 = xi[t22].key * 8, o2 = xi[t22].iv;
      else
        throw new TypeError("invalid suite type");
      var f2 = Km(e2, false, r2, o2);
      return jm(t22, f2.key, f2.iv);
    }
    function X9(t22, e2) {
      t22 = t22.toLowerCase();
      var r2, o2;
      if (Ki[t22])
        r2 = Ki[t22].key, o2 = Ki[t22].iv;
      else if (xi[t22])
        r2 = xi[t22].key * 8, o2 = xi[t22].iv;
      else
        throw new TypeError("invalid suite type");
      var f2 = Km(e2, false, r2, o2);
      return Zm(t22, f2.key, f2.iv);
    }
    function jm(t22, e2, r2) {
      if (t22 = t22.toLowerCase(), Ki[t22])
        return $u.createCipheriv(t22, e2, r2);
      if (xi[t22])
        return new Wm({ key: e2, iv: r2, mode: t22 });
      throw new TypeError("invalid suite type");
    }
    function Zm(t22, e2, r2) {
      if (t22 = t22.toLowerCase(), Ki[t22])
        return $u.createDecipheriv(t22, e2, r2);
      if (xi[t22])
        return new Wm({ key: e2, iv: r2, mode: t22, decrypt: true });
      throw new TypeError("invalid suite type");
    }
    function J9() {
      return Object.keys(xi).concat($u.getCiphers());
    }
    Dr.createCipher = Dr.Cipher = Y9;
    Dr.createCipheriv = Dr.Cipheriv = jm;
    Dr.createDecipher = Dr.Decipher = X9;
    Dr.createDecipheriv = Dr.Decipheriv = Zm;
    Dr.listCiphers = Dr.getCiphers = J9;
  });
  ji = T2(() => {
  });
  Yu = T2(($m, Gu) => {
    (function(t22, e2) {
      function r2(v32, i) {
        if (!v32)
          throw new Error(i || "Assertion failed");
      }
      function o2(v32, i) {
        v32.super_ = i;
        var a2 = function() {
        };
        a2.prototype = i.prototype, v32.prototype = new a2, v32.prototype.constructor = v32;
      }
      function f2(v32, i, a2) {
        if (f2.isBN(v32))
          return v32;
        this.negative = 0, this.words = null, this.length = 0, this.red = null, v32 !== null && ((i === "le" || i === "be") && (a2 = i, i = 10), this._init(v32 || 0, i || 10, a2 || "be"));
      }
      typeof t22 == "object" ? t22.exports = f2 : e2.BN = f2, f2.BN = f2, f2.wordSize = 26;
      var p2;
      try {
        typeof window < "u" && typeof window.Buffer < "u" ? p2 = window.Buffer : p2 = ji().Buffer;
      } catch {
      }
      f2.isBN = function(i) {
        return i instanceof f2 ? true : i !== null && typeof i == "object" && i.constructor.wordSize === f2.wordSize && Array.isArray(i.words);
      }, f2.max = function(i, a2) {
        return i.cmp(a2) > 0 ? i : a2;
      }, f2.min = function(i, a2) {
        return i.cmp(a2) < 0 ? i : a2;
      }, f2.prototype._init = function(i, a2, h3) {
        if (typeof i == "number")
          return this._initNumber(i, a2, h3);
        if (typeof i == "object")
          return this._initArray(i, a2, h3);
        a2 === "hex" && (a2 = 16), r2(a2 === (a2 | 0) && a2 >= 2 && a2 <= 36), i = i.toString().replace(/\s+/g, "");
        var s3 = 0;
        i[0] === "-" && (s3++, this.negative = 1), s3 < i.length && (a2 === 16 ? this._parseHex(i, s3, h3) : (this._parseBase(i, a2, s3), h3 === "le" && this._initArray(this.toArray(), a2, h3)));
      }, f2.prototype._initNumber = function(i, a2, h3) {
        i < 0 && (this.negative = 1, i = -i), i < 67108864 ? (this.words = [i & 67108863], this.length = 1) : i < 4503599627370496 ? (this.words = [i & 67108863, i / 67108864 & 67108863], this.length = 2) : (r2(i < 9007199254740992), this.words = [i & 67108863, i / 67108864 & 67108863, 1], this.length = 3), h3 === "le" && this._initArray(this.toArray(), a2, h3);
      }, f2.prototype._initArray = function(i, a2, h3) {
        if (r2(typeof i.length == "number"), i.length <= 0)
          return this.words = [0], this.length = 1, this;
        this.length = Math.ceil(i.length / 3), this.words = new Array(this.length);
        for (var s3 = 0;s3 < this.length; s3++)
          this.words[s3] = 0;
        var u4, c2, b3 = 0;
        if (h3 === "be")
          for (s3 = i.length - 1, u4 = 0;s3 >= 0; s3 -= 3)
            c2 = i[s3] | i[s3 - 1] << 8 | i[s3 - 2] << 16, this.words[u4] |= c2 << b3 & 67108863, this.words[u4 + 1] = c2 >>> 26 - b3 & 67108863, b3 += 24, b3 >= 26 && (b3 -= 26, u4++);
        else if (h3 === "le")
          for (s3 = 0, u4 = 0;s3 < i.length; s3 += 3)
            c2 = i[s3] | i[s3 + 1] << 8 | i[s3 + 2] << 16, this.words[u4] |= c2 << b3 & 67108863, this.words[u4 + 1] = c2 >>> 26 - b3 & 67108863, b3 += 24, b3 >= 26 && (b3 -= 26, u4++);
        return this.strip();
      };
      function m32(v32, i) {
        var a2 = v32.charCodeAt(i);
        return a2 >= 65 && a2 <= 70 ? a2 - 55 : a2 >= 97 && a2 <= 102 ? a2 - 87 : a2 - 48 & 15;
      }
      function y22(v32, i, a2) {
        var h3 = m32(v32, a2);
        return a2 - 1 >= i && (h3 |= m32(v32, a2 - 1) << 4), h3;
      }
      f2.prototype._parseHex = function(i, a2, h3) {
        this.length = Math.ceil((i.length - a2) / 6), this.words = new Array(this.length);
        for (var s3 = 0;s3 < this.length; s3++)
          this.words[s3] = 0;
        var u4 = 0, c2 = 0, b3;
        if (h3 === "be")
          for (s3 = i.length - 1;s3 >= a2; s3 -= 2)
            b3 = y22(i, a2, s3) << u4, this.words[c2] |= b3 & 67108863, u4 >= 18 ? (u4 -= 18, c2 += 1, this.words[c2] |= b3 >>> 26) : u4 += 8;
        else {
          var l3 = i.length - a2;
          for (s3 = l3 % 2 === 0 ? a2 + 1 : a2;s3 < i.length; s3 += 2)
            b3 = y22(i, a2, s3) << u4, this.words[c2] |= b3 & 67108863, u4 >= 18 ? (u4 -= 18, c2 += 1, this.words[c2] |= b3 >>> 26) : u4 += 8;
        }
        this.strip();
      };
      function M3(v32, i, a2, h3) {
        for (var s3 = 0, u4 = Math.min(v32.length, a2), c2 = i;c2 < u4; c2++) {
          var b3 = v32.charCodeAt(c2) - 48;
          s3 *= h3, b3 >= 49 ? s3 += b3 - 49 + 10 : b3 >= 17 ? s3 += b3 - 17 + 10 : s3 += b3;
        }
        return s3;
      }
      f2.prototype._parseBase = function(i, a2, h3) {
        this.words = [0], this.length = 1;
        for (var s3 = 0, u4 = 1;u4 <= 67108863; u4 *= a2)
          s3++;
        s3--, u4 = u4 / a2 | 0;
        for (var c2 = i.length - h3, b3 = c2 % s3, l3 = Math.min(c2, c2 - b3) + h3, n32 = 0, d2 = h3;d2 < l3; d2 += s3)
          n32 = M3(i, d2, d2 + s3, a2), this.imuln(u4), this.words[0] + n32 < 67108864 ? this.words[0] += n32 : this._iaddn(n32);
        if (b3 !== 0) {
          var w3 = 1;
          for (n32 = M3(i, d2, i.length, a2), d2 = 0;d2 < b3; d2++)
            w3 *= a2;
          this.imuln(w3), this.words[0] + n32 < 67108864 ? this.words[0] += n32 : this._iaddn(n32);
        }
        this.strip();
      }, f2.prototype.copy = function(i) {
        i.words = new Array(this.length);
        for (var a2 = 0;a2 < this.length; a2++)
          i.words[a2] = this.words[a2];
        i.length = this.length, i.negative = this.negative, i.red = this.red;
      }, f2.prototype.clone = function() {
        var i = new f2(null);
        return this.copy(i), i;
      }, f2.prototype._expand = function(i) {
        for (;this.length < i; )
          this.words[this.length++] = 0;
        return this;
      }, f2.prototype.strip = function() {
        for (;this.length > 1 && this.words[this.length - 1] === 0; )
          this.length--;
        return this._normSign();
      }, f2.prototype._normSign = function() {
        return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
      }, f2.prototype.inspect = function() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var x5 = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"], S2 = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], E4 = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
      f2.prototype.toString = function(i, a2) {
        i = i || 10, a2 = a2 | 0 || 1;
        var h3;
        if (i === 16 || i === "hex") {
          h3 = "";
          for (var s3 = 0, u4 = 0, c2 = 0;c2 < this.length; c2++) {
            var b3 = this.words[c2], l3 = ((b3 << s3 | u4) & 16777215).toString(16);
            u4 = b3 >>> 24 - s3 & 16777215, u4 !== 0 || c2 !== this.length - 1 ? h3 = x5[6 - l3.length] + l3 + h3 : h3 = l3 + h3, s3 += 2, s3 >= 26 && (s3 -= 26, c2--);
          }
          for (u4 !== 0 && (h3 = u4.toString(16) + h3);h3.length % a2 !== 0; )
            h3 = "0" + h3;
          return this.negative !== 0 && (h3 = "-" + h3), h3;
        }
        if (i === (i | 0) && i >= 2 && i <= 36) {
          var n32 = S2[i], d2 = E4[i];
          h3 = "";
          var w3 = this.clone();
          for (w3.negative = 0;!w3.isZero(); ) {
            var g2 = w3.modn(d2).toString(i);
            w3 = w3.idivn(d2), w3.isZero() ? h3 = g2 + h3 : h3 = x5[n32 - g2.length] + g2 + h3;
          }
          for (this.isZero() && (h3 = "0" + h3);h3.length % a2 !== 0; )
            h3 = "0" + h3;
          return this.negative !== 0 && (h3 = "-" + h3), h3;
        }
        r2(false, "Base should be between 2 and 36");
      }, f2.prototype.toNumber = function() {
        var i = this.words[0];
        return this.length === 2 ? i += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? i += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && r2(false, "Number can only safely store up to 53 bits"), this.negative !== 0 ? -i : i;
      }, f2.prototype.toJSON = function() {
        return this.toString(16);
      }, f2.prototype.toBuffer = function(i, a2) {
        return r2(typeof p2 < "u"), this.toArrayLike(p2, i, a2);
      }, f2.prototype.toArray = function(i, a2) {
        return this.toArrayLike(Array, i, a2);
      }, f2.prototype.toArrayLike = function(i, a2, h3) {
        var s3 = this.byteLength(), u4 = h3 || Math.max(1, s3);
        r2(s3 <= u4, "byte array longer than desired length"), r2(u4 > 0, "Requested array length <= 0"), this.strip();
        var c2 = a2 === "le", b3 = new i(u4), l3, n32, d2 = this.clone();
        if (c2) {
          for (n32 = 0;!d2.isZero(); n32++)
            l3 = d2.andln(255), d2.iushrn(8), b3[n32] = l3;
          for (;n32 < u4; n32++)
            b3[n32] = 0;
        } else {
          for (n32 = 0;n32 < u4 - s3; n32++)
            b3[n32] = 0;
          for (n32 = 0;!d2.isZero(); n32++)
            l3 = d2.andln(255), d2.iushrn(8), b3[u4 - n32 - 1] = l3;
        }
        return b3;
      }, Math.clz32 ? f2.prototype._countBits = function(i) {
        return 32 - Math.clz32(i);
      } : f2.prototype._countBits = function(i) {
        var a2 = i, h3 = 0;
        return a2 >= 4096 && (h3 += 13, a2 >>>= 13), a2 >= 64 && (h3 += 7, a2 >>>= 7), a2 >= 8 && (h3 += 4, a2 >>>= 4), a2 >= 2 && (h3 += 2, a2 >>>= 2), h3 + a2;
      }, f2.prototype._zeroBits = function(i) {
        if (i === 0)
          return 26;
        var a2 = i, h3 = 0;
        return (a2 & 8191) === 0 && (h3 += 13, a2 >>>= 13), (a2 & 127) === 0 && (h3 += 7, a2 >>>= 7), (a2 & 15) === 0 && (h3 += 4, a2 >>>= 4), (a2 & 3) === 0 && (h3 += 2, a2 >>>= 2), (a2 & 1) === 0 && h3++, h3;
      }, f2.prototype.bitLength = function() {
        var i = this.words[this.length - 1], a2 = this._countBits(i);
        return (this.length - 1) * 26 + a2;
      };
      function B5(v32) {
        for (var i = new Array(v32.bitLength()), a2 = 0;a2 < i.length; a2++) {
          var h3 = a2 / 26 | 0, s3 = a2 % 26;
          i[a2] = (v32.words[h3] & 1 << s3) >>> s3;
        }
        return i;
      }
      f2.prototype.zeroBits = function() {
        if (this.isZero())
          return 0;
        for (var i = 0, a2 = 0;a2 < this.length; a2++) {
          var h3 = this._zeroBits(this.words[a2]);
          if (i += h3, h3 !== 26)
            break;
        }
        return i;
      }, f2.prototype.byteLength = function() {
        return Math.ceil(this.bitLength() / 8);
      }, f2.prototype.toTwos = function(i) {
        return this.negative !== 0 ? this.abs().inotn(i).iaddn(1) : this.clone();
      }, f2.prototype.fromTwos = function(i) {
        return this.testn(i - 1) ? this.notn(i).iaddn(1).ineg() : this.clone();
      }, f2.prototype.isNeg = function() {
        return this.negative !== 0;
      }, f2.prototype.neg = function() {
        return this.clone().ineg();
      }, f2.prototype.ineg = function() {
        return this.isZero() || (this.negative ^= 1), this;
      }, f2.prototype.iuor = function(i) {
        for (;this.length < i.length; )
          this.words[this.length++] = 0;
        for (var a2 = 0;a2 < i.length; a2++)
          this.words[a2] = this.words[a2] | i.words[a2];
        return this.strip();
      }, f2.prototype.ior = function(i) {
        return r2((this.negative | i.negative) === 0), this.iuor(i);
      }, f2.prototype.or = function(i) {
        return this.length > i.length ? this.clone().ior(i) : i.clone().ior(this);
      }, f2.prototype.uor = function(i) {
        return this.length > i.length ? this.clone().iuor(i) : i.clone().iuor(this);
      }, f2.prototype.iuand = function(i) {
        var a2;
        this.length > i.length ? a2 = i : a2 = this;
        for (var h3 = 0;h3 < a2.length; h3++)
          this.words[h3] = this.words[h3] & i.words[h3];
        return this.length = a2.length, this.strip();
      }, f2.prototype.iand = function(i) {
        return r2((this.negative | i.negative) === 0), this.iuand(i);
      }, f2.prototype.and = function(i) {
        return this.length > i.length ? this.clone().iand(i) : i.clone().iand(this);
      }, f2.prototype.uand = function(i) {
        return this.length > i.length ? this.clone().iuand(i) : i.clone().iuand(this);
      }, f2.prototype.iuxor = function(i) {
        var a2, h3;
        this.length > i.length ? (a2 = this, h3 = i) : (a2 = i, h3 = this);
        for (var s3 = 0;s3 < h3.length; s3++)
          this.words[s3] = a2.words[s3] ^ h3.words[s3];
        if (this !== a2)
          for (;s3 < a2.length; s3++)
            this.words[s3] = a2.words[s3];
        return this.length = a2.length, this.strip();
      }, f2.prototype.ixor = function(i) {
        return r2((this.negative | i.negative) === 0), this.iuxor(i);
      }, f2.prototype.xor = function(i) {
        return this.length > i.length ? this.clone().ixor(i) : i.clone().ixor(this);
      }, f2.prototype.uxor = function(i) {
        return this.length > i.length ? this.clone().iuxor(i) : i.clone().iuxor(this);
      }, f2.prototype.inotn = function(i) {
        r2(typeof i == "number" && i >= 0);
        var a2 = Math.ceil(i / 26) | 0, h3 = i % 26;
        this._expand(a2), h3 > 0 && a2--;
        for (var s3 = 0;s3 < a2; s3++)
          this.words[s3] = ~this.words[s3] & 67108863;
        return h3 > 0 && (this.words[s3] = ~this.words[s3] & 67108863 >> 26 - h3), this.strip();
      }, f2.prototype.notn = function(i) {
        return this.clone().inotn(i);
      }, f2.prototype.setn = function(i, a2) {
        r2(typeof i == "number" && i >= 0);
        var h3 = i / 26 | 0, s3 = i % 26;
        return this._expand(h3 + 1), a2 ? this.words[h3] = this.words[h3] | 1 << s3 : this.words[h3] = this.words[h3] & ~(1 << s3), this.strip();
      }, f2.prototype.iadd = function(i) {
        var a2;
        if (this.negative !== 0 && i.negative === 0)
          return this.negative = 0, a2 = this.isub(i), this.negative ^= 1, this._normSign();
        if (this.negative === 0 && i.negative !== 0)
          return i.negative = 0, a2 = this.isub(i), i.negative = 1, a2._normSign();
        var h3, s3;
        this.length > i.length ? (h3 = this, s3 = i) : (h3 = i, s3 = this);
        for (var u4 = 0, c2 = 0;c2 < s3.length; c2++)
          a2 = (h3.words[c2] | 0) + (s3.words[c2] | 0) + u4, this.words[c2] = a2 & 67108863, u4 = a2 >>> 26;
        for (;u4 !== 0 && c2 < h3.length; c2++)
          a2 = (h3.words[c2] | 0) + u4, this.words[c2] = a2 & 67108863, u4 = a2 >>> 26;
        if (this.length = h3.length, u4 !== 0)
          this.words[this.length] = u4, this.length++;
        else if (h3 !== this)
          for (;c2 < h3.length; c2++)
            this.words[c2] = h3.words[c2];
        return this;
      }, f2.prototype.add = function(i) {
        var a2;
        return i.negative !== 0 && this.negative === 0 ? (i.negative = 0, a2 = this.sub(i), i.negative ^= 1, a2) : i.negative === 0 && this.negative !== 0 ? (this.negative = 0, a2 = i.sub(this), this.negative = 1, a2) : this.length > i.length ? this.clone().iadd(i) : i.clone().iadd(this);
      }, f2.prototype.isub = function(i) {
        if (i.negative !== 0) {
          i.negative = 0;
          var a2 = this.iadd(i);
          return i.negative = 1, a2._normSign();
        } else if (this.negative !== 0)
          return this.negative = 0, this.iadd(i), this.negative = 1, this._normSign();
        var h3 = this.cmp(i);
        if (h3 === 0)
          return this.negative = 0, this.length = 1, this.words[0] = 0, this;
        var s3, u4;
        h3 > 0 ? (s3 = this, u4 = i) : (s3 = i, u4 = this);
        for (var c2 = 0, b3 = 0;b3 < u4.length; b3++)
          a2 = (s3.words[b3] | 0) - (u4.words[b3] | 0) + c2, c2 = a2 >> 26, this.words[b3] = a2 & 67108863;
        for (;c2 !== 0 && b3 < s3.length; b3++)
          a2 = (s3.words[b3] | 0) + c2, c2 = a2 >> 26, this.words[b3] = a2 & 67108863;
        if (c2 === 0 && b3 < s3.length && s3 !== this)
          for (;b3 < s3.length; b3++)
            this.words[b3] = s3.words[b3];
        return this.length = Math.max(this.length, b3), s3 !== this && (this.negative = 1), this.strip();
      }, f2.prototype.sub = function(i) {
        return this.clone().isub(i);
      };
      function q(v32, i, a2) {
        a2.negative = i.negative ^ v32.negative;
        var h3 = v32.length + i.length | 0;
        a2.length = h3, h3 = h3 - 1 | 0;
        var s3 = v32.words[0] | 0, u4 = i.words[0] | 0, c2 = s3 * u4, b3 = c2 & 67108863, l3 = c2 / 67108864 | 0;
        a2.words[0] = b3;
        for (var n32 = 1;n32 < h3; n32++) {
          for (var d2 = l3 >>> 26, w3 = l3 & 67108863, g2 = Math.min(n32, i.length - 1), _5 = Math.max(0, n32 - v32.length + 1);_5 <= g2; _5++) {
            var A6 = n32 - _5 | 0;
            s3 = v32.words[A6] | 0, u4 = i.words[_5] | 0, c2 = s3 * u4 + w3, d2 += c2 / 67108864 | 0, w3 = c2 & 67108863;
          }
          a2.words[n32] = w3 | 0, l3 = d2 | 0;
        }
        return l3 !== 0 ? a2.words[n32] = l3 | 0 : a2.length--, a2.strip();
      }
      var L2 = function(i, a2, h3) {
        var s3 = i.words, u4 = a2.words, c2 = h3.words, b3 = 0, l3, n32, d2, w3 = s3[0] | 0, g2 = w3 & 8191, _5 = w3 >>> 13, A6 = s3[1] | 0, R4 = A6 & 8191, I2 = A6 >>> 13, Me = s3[2] | 0, k32 = Me & 8191, D3 = Me >>> 13, nt = s3[3] | 0, C3 = nt & 8191, O4 = nt >>> 13, vt = s3[4] | 0, F = vt & 8191, U2 = vt >>> 13, bt = s3[5] | 0, z4 = bt & 8191, H4 = bt >>> 13, mt = s3[6] | 0, W3 = mt & 8191, K2 = mt >>> 13, gt = s3[7] | 0, j32 = gt & 8191, Z4 = gt >>> 13, yt = s3[8] | 0, V22 = yt & 8191, $3 = yt >>> 13, wt = s3[9] | 0, G5 = wt & 8191, Y2 = wt >>> 13, Mt = u4[0] | 0, X4 = Mt & 8191, J = Mt >>> 13, _t = u4[1] | 0, Q4 = _t & 8191, ee = _t >>> 13, xt = u4[2] | 0, te = xt & 8191, re = xt >>> 13, St = u4[3] | 0, ie = St & 8191, ne = St >>> 13, Et = u4[4] | 0, fe = Et & 8191, ae = Et >>> 13, At = u4[5] | 0, oe = At & 8191, se = At >>> 13, Rt = u4[6] | 0, he = Rt & 8191, ue = Rt >>> 13, Bt = u4[7] | 0, le = Bt & 8191, de = Bt >>> 13, qt = u4[8] | 0, ce = qt & 8191, pe = qt >>> 13, It = u4[9] | 0, ve = It & 8191, be = It >>> 13;
        h3.negative = i.negative ^ a2.negative, h3.length = 19, l3 = Math.imul(g2, X4), n32 = Math.imul(g2, J), n32 = n32 + Math.imul(_5, X4) | 0, d2 = Math.imul(_5, J);
        var ft = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (ft >>> 26) | 0, ft &= 67108863, l3 = Math.imul(R4, X4), n32 = Math.imul(R4, J), n32 = n32 + Math.imul(I2, X4) | 0, d2 = Math.imul(I2, J), l3 = l3 + Math.imul(g2, Q4) | 0, n32 = n32 + Math.imul(g2, ee) | 0, n32 = n32 + Math.imul(_5, Q4) | 0, d2 = d2 + Math.imul(_5, ee) | 0;
        var Be = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Be >>> 26) | 0, Be &= 67108863, l3 = Math.imul(k32, X4), n32 = Math.imul(k32, J), n32 = n32 + Math.imul(D3, X4) | 0, d2 = Math.imul(D3, J), l3 = l3 + Math.imul(R4, Q4) | 0, n32 = n32 + Math.imul(R4, ee) | 0, n32 = n32 + Math.imul(I2, Q4) | 0, d2 = d2 + Math.imul(I2, ee) | 0, l3 = l3 + Math.imul(g2, te) | 0, n32 = n32 + Math.imul(g2, re) | 0, n32 = n32 + Math.imul(_5, te) | 0, d2 = d2 + Math.imul(_5, re) | 0;
        var qe = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (qe >>> 26) | 0, qe &= 67108863, l3 = Math.imul(C3, X4), n32 = Math.imul(C3, J), n32 = n32 + Math.imul(O4, X4) | 0, d2 = Math.imul(O4, J), l3 = l3 + Math.imul(k32, Q4) | 0, n32 = n32 + Math.imul(k32, ee) | 0, n32 = n32 + Math.imul(D3, Q4) | 0, d2 = d2 + Math.imul(D3, ee) | 0, l3 = l3 + Math.imul(R4, te) | 0, n32 = n32 + Math.imul(R4, re) | 0, n32 = n32 + Math.imul(I2, te) | 0, d2 = d2 + Math.imul(I2, re) | 0, l3 = l3 + Math.imul(g2, ie) | 0, n32 = n32 + Math.imul(g2, ne) | 0, n32 = n32 + Math.imul(_5, ie) | 0, d2 = d2 + Math.imul(_5, ne) | 0;
        var ze = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (ze >>> 26) | 0, ze &= 67108863, l3 = Math.imul(F, X4), n32 = Math.imul(F, J), n32 = n32 + Math.imul(U2, X4) | 0, d2 = Math.imul(U2, J), l3 = l3 + Math.imul(C3, Q4) | 0, n32 = n32 + Math.imul(C3, ee) | 0, n32 = n32 + Math.imul(O4, Q4) | 0, d2 = d2 + Math.imul(O4, ee) | 0, l3 = l3 + Math.imul(k32, te) | 0, n32 = n32 + Math.imul(k32, re) | 0, n32 = n32 + Math.imul(D3, te) | 0, d2 = d2 + Math.imul(D3, re) | 0, l3 = l3 + Math.imul(R4, ie) | 0, n32 = n32 + Math.imul(R4, ne) | 0, n32 = n32 + Math.imul(I2, ie) | 0, d2 = d2 + Math.imul(I2, ne) | 0, l3 = l3 + Math.imul(g2, fe) | 0, n32 = n32 + Math.imul(g2, ae) | 0, n32 = n32 + Math.imul(_5, fe) | 0, d2 = d2 + Math.imul(_5, ae) | 0;
        var He = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (He >>> 26) | 0, He &= 67108863, l3 = Math.imul(z4, X4), n32 = Math.imul(z4, J), n32 = n32 + Math.imul(H4, X4) | 0, d2 = Math.imul(H4, J), l3 = l3 + Math.imul(F, Q4) | 0, n32 = n32 + Math.imul(F, ee) | 0, n32 = n32 + Math.imul(U2, Q4) | 0, d2 = d2 + Math.imul(U2, ee) | 0, l3 = l3 + Math.imul(C3, te) | 0, n32 = n32 + Math.imul(C3, re) | 0, n32 = n32 + Math.imul(O4, te) | 0, d2 = d2 + Math.imul(O4, re) | 0, l3 = l3 + Math.imul(k32, ie) | 0, n32 = n32 + Math.imul(k32, ne) | 0, n32 = n32 + Math.imul(D3, ie) | 0, d2 = d2 + Math.imul(D3, ne) | 0, l3 = l3 + Math.imul(R4, fe) | 0, n32 = n32 + Math.imul(R4, ae) | 0, n32 = n32 + Math.imul(I2, fe) | 0, d2 = d2 + Math.imul(I2, ae) | 0, l3 = l3 + Math.imul(g2, oe) | 0, n32 = n32 + Math.imul(g2, se) | 0, n32 = n32 + Math.imul(_5, oe) | 0, d2 = d2 + Math.imul(_5, se) | 0;
        var We = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (We >>> 26) | 0, We &= 67108863, l3 = Math.imul(W3, X4), n32 = Math.imul(W3, J), n32 = n32 + Math.imul(K2, X4) | 0, d2 = Math.imul(K2, J), l3 = l3 + Math.imul(z4, Q4) | 0, n32 = n32 + Math.imul(z4, ee) | 0, n32 = n32 + Math.imul(H4, Q4) | 0, d2 = d2 + Math.imul(H4, ee) | 0, l3 = l3 + Math.imul(F, te) | 0, n32 = n32 + Math.imul(F, re) | 0, n32 = n32 + Math.imul(U2, te) | 0, d2 = d2 + Math.imul(U2, re) | 0, l3 = l3 + Math.imul(C3, ie) | 0, n32 = n32 + Math.imul(C3, ne) | 0, n32 = n32 + Math.imul(O4, ie) | 0, d2 = d2 + Math.imul(O4, ne) | 0, l3 = l3 + Math.imul(k32, fe) | 0, n32 = n32 + Math.imul(k32, ae) | 0, n32 = n32 + Math.imul(D3, fe) | 0, d2 = d2 + Math.imul(D3, ae) | 0, l3 = l3 + Math.imul(R4, oe) | 0, n32 = n32 + Math.imul(R4, se) | 0, n32 = n32 + Math.imul(I2, oe) | 0, d2 = d2 + Math.imul(I2, se) | 0, l3 = l3 + Math.imul(g2, he) | 0, n32 = n32 + Math.imul(g2, ue) | 0, n32 = n32 + Math.imul(_5, he) | 0, d2 = d2 + Math.imul(_5, ue) | 0;
        var Ke = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Ke >>> 26) | 0, Ke &= 67108863, l3 = Math.imul(j32, X4), n32 = Math.imul(j32, J), n32 = n32 + Math.imul(Z4, X4) | 0, d2 = Math.imul(Z4, J), l3 = l3 + Math.imul(W3, Q4) | 0, n32 = n32 + Math.imul(W3, ee) | 0, n32 = n32 + Math.imul(K2, Q4) | 0, d2 = d2 + Math.imul(K2, ee) | 0, l3 = l3 + Math.imul(z4, te) | 0, n32 = n32 + Math.imul(z4, re) | 0, n32 = n32 + Math.imul(H4, te) | 0, d2 = d2 + Math.imul(H4, re) | 0, l3 = l3 + Math.imul(F, ie) | 0, n32 = n32 + Math.imul(F, ne) | 0, n32 = n32 + Math.imul(U2, ie) | 0, d2 = d2 + Math.imul(U2, ne) | 0, l3 = l3 + Math.imul(C3, fe) | 0, n32 = n32 + Math.imul(C3, ae) | 0, n32 = n32 + Math.imul(O4, fe) | 0, d2 = d2 + Math.imul(O4, ae) | 0, l3 = l3 + Math.imul(k32, oe) | 0, n32 = n32 + Math.imul(k32, se) | 0, n32 = n32 + Math.imul(D3, oe) | 0, d2 = d2 + Math.imul(D3, se) | 0, l3 = l3 + Math.imul(R4, he) | 0, n32 = n32 + Math.imul(R4, ue) | 0, n32 = n32 + Math.imul(I2, he) | 0, d2 = d2 + Math.imul(I2, ue) | 0, l3 = l3 + Math.imul(g2, le) | 0, n32 = n32 + Math.imul(g2, de) | 0, n32 = n32 + Math.imul(_5, le) | 0, d2 = d2 + Math.imul(_5, de) | 0;
        var je = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (je >>> 26) | 0, je &= 67108863, l3 = Math.imul(V22, X4), n32 = Math.imul(V22, J), n32 = n32 + Math.imul($3, X4) | 0, d2 = Math.imul($3, J), l3 = l3 + Math.imul(j32, Q4) | 0, n32 = n32 + Math.imul(j32, ee) | 0, n32 = n32 + Math.imul(Z4, Q4) | 0, d2 = d2 + Math.imul(Z4, ee) | 0, l3 = l3 + Math.imul(W3, te) | 0, n32 = n32 + Math.imul(W3, re) | 0, n32 = n32 + Math.imul(K2, te) | 0, d2 = d2 + Math.imul(K2, re) | 0, l3 = l3 + Math.imul(z4, ie) | 0, n32 = n32 + Math.imul(z4, ne) | 0, n32 = n32 + Math.imul(H4, ie) | 0, d2 = d2 + Math.imul(H4, ne) | 0, l3 = l3 + Math.imul(F, fe) | 0, n32 = n32 + Math.imul(F, ae) | 0, n32 = n32 + Math.imul(U2, fe) | 0, d2 = d2 + Math.imul(U2, ae) | 0, l3 = l3 + Math.imul(C3, oe) | 0, n32 = n32 + Math.imul(C3, se) | 0, n32 = n32 + Math.imul(O4, oe) | 0, d2 = d2 + Math.imul(O4, se) | 0, l3 = l3 + Math.imul(k32, he) | 0, n32 = n32 + Math.imul(k32, ue) | 0, n32 = n32 + Math.imul(D3, he) | 0, d2 = d2 + Math.imul(D3, ue) | 0, l3 = l3 + Math.imul(R4, le) | 0, n32 = n32 + Math.imul(R4, de) | 0, n32 = n32 + Math.imul(I2, le) | 0, d2 = d2 + Math.imul(I2, de) | 0, l3 = l3 + Math.imul(g2, ce) | 0, n32 = n32 + Math.imul(g2, pe) | 0, n32 = n32 + Math.imul(_5, ce) | 0, d2 = d2 + Math.imul(_5, pe) | 0;
        var Ze = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Ze >>> 26) | 0, Ze &= 67108863, l3 = Math.imul(G5, X4), n32 = Math.imul(G5, J), n32 = n32 + Math.imul(Y2, X4) | 0, d2 = Math.imul(Y2, J), l3 = l3 + Math.imul(V22, Q4) | 0, n32 = n32 + Math.imul(V22, ee) | 0, n32 = n32 + Math.imul($3, Q4) | 0, d2 = d2 + Math.imul($3, ee) | 0, l3 = l3 + Math.imul(j32, te) | 0, n32 = n32 + Math.imul(j32, re) | 0, n32 = n32 + Math.imul(Z4, te) | 0, d2 = d2 + Math.imul(Z4, re) | 0, l3 = l3 + Math.imul(W3, ie) | 0, n32 = n32 + Math.imul(W3, ne) | 0, n32 = n32 + Math.imul(K2, ie) | 0, d2 = d2 + Math.imul(K2, ne) | 0, l3 = l3 + Math.imul(z4, fe) | 0, n32 = n32 + Math.imul(z4, ae) | 0, n32 = n32 + Math.imul(H4, fe) | 0, d2 = d2 + Math.imul(H4, ae) | 0, l3 = l3 + Math.imul(F, oe) | 0, n32 = n32 + Math.imul(F, se) | 0, n32 = n32 + Math.imul(U2, oe) | 0, d2 = d2 + Math.imul(U2, se) | 0, l3 = l3 + Math.imul(C3, he) | 0, n32 = n32 + Math.imul(C3, ue) | 0, n32 = n32 + Math.imul(O4, he) | 0, d2 = d2 + Math.imul(O4, ue) | 0, l3 = l3 + Math.imul(k32, le) | 0, n32 = n32 + Math.imul(k32, de) | 0, n32 = n32 + Math.imul(D3, le) | 0, d2 = d2 + Math.imul(D3, de) | 0, l3 = l3 + Math.imul(R4, ce) | 0, n32 = n32 + Math.imul(R4, pe) | 0, n32 = n32 + Math.imul(I2, ce) | 0, d2 = d2 + Math.imul(I2, pe) | 0, l3 = l3 + Math.imul(g2, ve) | 0, n32 = n32 + Math.imul(g2, be) | 0, n32 = n32 + Math.imul(_5, ve) | 0, d2 = d2 + Math.imul(_5, be) | 0;
        var Ve = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Ve >>> 26) | 0, Ve &= 67108863, l3 = Math.imul(G5, Q4), n32 = Math.imul(G5, ee), n32 = n32 + Math.imul(Y2, Q4) | 0, d2 = Math.imul(Y2, ee), l3 = l3 + Math.imul(V22, te) | 0, n32 = n32 + Math.imul(V22, re) | 0, n32 = n32 + Math.imul($3, te) | 0, d2 = d2 + Math.imul($3, re) | 0, l3 = l3 + Math.imul(j32, ie) | 0, n32 = n32 + Math.imul(j32, ne) | 0, n32 = n32 + Math.imul(Z4, ie) | 0, d2 = d2 + Math.imul(Z4, ne) | 0, l3 = l3 + Math.imul(W3, fe) | 0, n32 = n32 + Math.imul(W3, ae) | 0, n32 = n32 + Math.imul(K2, fe) | 0, d2 = d2 + Math.imul(K2, ae) | 0, l3 = l3 + Math.imul(z4, oe) | 0, n32 = n32 + Math.imul(z4, se) | 0, n32 = n32 + Math.imul(H4, oe) | 0, d2 = d2 + Math.imul(H4, se) | 0, l3 = l3 + Math.imul(F, he) | 0, n32 = n32 + Math.imul(F, ue) | 0, n32 = n32 + Math.imul(U2, he) | 0, d2 = d2 + Math.imul(U2, ue) | 0, l3 = l3 + Math.imul(C3, le) | 0, n32 = n32 + Math.imul(C3, de) | 0, n32 = n32 + Math.imul(O4, le) | 0, d2 = d2 + Math.imul(O4, de) | 0, l3 = l3 + Math.imul(k32, ce) | 0, n32 = n32 + Math.imul(k32, pe) | 0, n32 = n32 + Math.imul(D3, ce) | 0, d2 = d2 + Math.imul(D3, pe) | 0, l3 = l3 + Math.imul(R4, ve) | 0, n32 = n32 + Math.imul(R4, be) | 0, n32 = n32 + Math.imul(I2, ve) | 0, d2 = d2 + Math.imul(I2, be) | 0;
        var $e = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + ($e >>> 26) | 0, $e &= 67108863, l3 = Math.imul(G5, te), n32 = Math.imul(G5, re), n32 = n32 + Math.imul(Y2, te) | 0, d2 = Math.imul(Y2, re), l3 = l3 + Math.imul(V22, ie) | 0, n32 = n32 + Math.imul(V22, ne) | 0, n32 = n32 + Math.imul($3, ie) | 0, d2 = d2 + Math.imul($3, ne) | 0, l3 = l3 + Math.imul(j32, fe) | 0, n32 = n32 + Math.imul(j32, ae) | 0, n32 = n32 + Math.imul(Z4, fe) | 0, d2 = d2 + Math.imul(Z4, ae) | 0, l3 = l3 + Math.imul(W3, oe) | 0, n32 = n32 + Math.imul(W3, se) | 0, n32 = n32 + Math.imul(K2, oe) | 0, d2 = d2 + Math.imul(K2, se) | 0, l3 = l3 + Math.imul(z4, he) | 0, n32 = n32 + Math.imul(z4, ue) | 0, n32 = n32 + Math.imul(H4, he) | 0, d2 = d2 + Math.imul(H4, ue) | 0, l3 = l3 + Math.imul(F, le) | 0, n32 = n32 + Math.imul(F, de) | 0, n32 = n32 + Math.imul(U2, le) | 0, d2 = d2 + Math.imul(U2, de) | 0, l3 = l3 + Math.imul(C3, ce) | 0, n32 = n32 + Math.imul(C3, pe) | 0, n32 = n32 + Math.imul(O4, ce) | 0, d2 = d2 + Math.imul(O4, pe) | 0, l3 = l3 + Math.imul(k32, ve) | 0, n32 = n32 + Math.imul(k32, be) | 0, n32 = n32 + Math.imul(D3, ve) | 0, d2 = d2 + Math.imul(D3, be) | 0;
        var Ge = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Ge >>> 26) | 0, Ge &= 67108863, l3 = Math.imul(G5, ie), n32 = Math.imul(G5, ne), n32 = n32 + Math.imul(Y2, ie) | 0, d2 = Math.imul(Y2, ne), l3 = l3 + Math.imul(V22, fe) | 0, n32 = n32 + Math.imul(V22, ae) | 0, n32 = n32 + Math.imul($3, fe) | 0, d2 = d2 + Math.imul($3, ae) | 0, l3 = l3 + Math.imul(j32, oe) | 0, n32 = n32 + Math.imul(j32, se) | 0, n32 = n32 + Math.imul(Z4, oe) | 0, d2 = d2 + Math.imul(Z4, se) | 0, l3 = l3 + Math.imul(W3, he) | 0, n32 = n32 + Math.imul(W3, ue) | 0, n32 = n32 + Math.imul(K2, he) | 0, d2 = d2 + Math.imul(K2, ue) | 0, l3 = l3 + Math.imul(z4, le) | 0, n32 = n32 + Math.imul(z4, de) | 0, n32 = n32 + Math.imul(H4, le) | 0, d2 = d2 + Math.imul(H4, de) | 0, l3 = l3 + Math.imul(F, ce) | 0, n32 = n32 + Math.imul(F, pe) | 0, n32 = n32 + Math.imul(U2, ce) | 0, d2 = d2 + Math.imul(U2, pe) | 0, l3 = l3 + Math.imul(C3, ve) | 0, n32 = n32 + Math.imul(C3, be) | 0, n32 = n32 + Math.imul(O4, ve) | 0, d2 = d2 + Math.imul(O4, be) | 0;
        var Ye = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Ye >>> 26) | 0, Ye &= 67108863, l3 = Math.imul(G5, fe), n32 = Math.imul(G5, ae), n32 = n32 + Math.imul(Y2, fe) | 0, d2 = Math.imul(Y2, ae), l3 = l3 + Math.imul(V22, oe) | 0, n32 = n32 + Math.imul(V22, se) | 0, n32 = n32 + Math.imul($3, oe) | 0, d2 = d2 + Math.imul($3, se) | 0, l3 = l3 + Math.imul(j32, he) | 0, n32 = n32 + Math.imul(j32, ue) | 0, n32 = n32 + Math.imul(Z4, he) | 0, d2 = d2 + Math.imul(Z4, ue) | 0, l3 = l3 + Math.imul(W3, le) | 0, n32 = n32 + Math.imul(W3, de) | 0, n32 = n32 + Math.imul(K2, le) | 0, d2 = d2 + Math.imul(K2, de) | 0, l3 = l3 + Math.imul(z4, ce) | 0, n32 = n32 + Math.imul(z4, pe) | 0, n32 = n32 + Math.imul(H4, ce) | 0, d2 = d2 + Math.imul(H4, pe) | 0, l3 = l3 + Math.imul(F, ve) | 0, n32 = n32 + Math.imul(F, be) | 0, n32 = n32 + Math.imul(U2, ve) | 0, d2 = d2 + Math.imul(U2, be) | 0;
        var Xe = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Xe >>> 26) | 0, Xe &= 67108863, l3 = Math.imul(G5, oe), n32 = Math.imul(G5, se), n32 = n32 + Math.imul(Y2, oe) | 0, d2 = Math.imul(Y2, se), l3 = l3 + Math.imul(V22, he) | 0, n32 = n32 + Math.imul(V22, ue) | 0, n32 = n32 + Math.imul($3, he) | 0, d2 = d2 + Math.imul($3, ue) | 0, l3 = l3 + Math.imul(j32, le) | 0, n32 = n32 + Math.imul(j32, de) | 0, n32 = n32 + Math.imul(Z4, le) | 0, d2 = d2 + Math.imul(Z4, de) | 0, l3 = l3 + Math.imul(W3, ce) | 0, n32 = n32 + Math.imul(W3, pe) | 0, n32 = n32 + Math.imul(K2, ce) | 0, d2 = d2 + Math.imul(K2, pe) | 0, l3 = l3 + Math.imul(z4, ve) | 0, n32 = n32 + Math.imul(z4, be) | 0, n32 = n32 + Math.imul(H4, ve) | 0, d2 = d2 + Math.imul(H4, be) | 0;
        var Je = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Je >>> 26) | 0, Je &= 67108863, l3 = Math.imul(G5, he), n32 = Math.imul(G5, ue), n32 = n32 + Math.imul(Y2, he) | 0, d2 = Math.imul(Y2, ue), l3 = l3 + Math.imul(V22, le) | 0, n32 = n32 + Math.imul(V22, de) | 0, n32 = n32 + Math.imul($3, le) | 0, d2 = d2 + Math.imul($3, de) | 0, l3 = l3 + Math.imul(j32, ce) | 0, n32 = n32 + Math.imul(j32, pe) | 0, n32 = n32 + Math.imul(Z4, ce) | 0, d2 = d2 + Math.imul(Z4, pe) | 0, l3 = l3 + Math.imul(W3, ve) | 0, n32 = n32 + Math.imul(W3, be) | 0, n32 = n32 + Math.imul(K2, ve) | 0, d2 = d2 + Math.imul(K2, be) | 0;
        var Qe = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Qe >>> 26) | 0, Qe &= 67108863, l3 = Math.imul(G5, le), n32 = Math.imul(G5, de), n32 = n32 + Math.imul(Y2, le) | 0, d2 = Math.imul(Y2, de), l3 = l3 + Math.imul(V22, ce) | 0, n32 = n32 + Math.imul(V22, pe) | 0, n32 = n32 + Math.imul($3, ce) | 0, d2 = d2 + Math.imul($3, pe) | 0, l3 = l3 + Math.imul(j32, ve) | 0, n32 = n32 + Math.imul(j32, be) | 0, n32 = n32 + Math.imul(Z4, ve) | 0, d2 = d2 + Math.imul(Z4, be) | 0;
        var et = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (et >>> 26) | 0, et &= 67108863, l3 = Math.imul(G5, ce), n32 = Math.imul(G5, pe), n32 = n32 + Math.imul(Y2, ce) | 0, d2 = Math.imul(Y2, pe), l3 = l3 + Math.imul(V22, ve) | 0, n32 = n32 + Math.imul(V22, be) | 0, n32 = n32 + Math.imul($3, ve) | 0, d2 = d2 + Math.imul($3, be) | 0;
        var tt = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (tt >>> 26) | 0, tt &= 67108863, l3 = Math.imul(G5, ve), n32 = Math.imul(G5, be), n32 = n32 + Math.imul(Y2, ve) | 0, d2 = Math.imul(Y2, be);
        var rt = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        return b3 = (d2 + (n32 >>> 13) | 0) + (rt >>> 26) | 0, rt &= 67108863, c2[0] = ft, c2[1] = Be, c2[2] = qe, c2[3] = ze, c2[4] = He, c2[5] = We, c2[6] = Ke, c2[7] = je, c2[8] = Ze, c2[9] = Ve, c2[10] = $e, c2[11] = Ge, c2[12] = Ye, c2[13] = Xe, c2[14] = Je, c2[15] = Qe, c2[16] = et, c2[17] = tt, c2[18] = rt, b3 !== 0 && (c2[19] = b3, h3.length++), h3;
      };
      Math.imul || (L2 = q);
      function ge(v32, i, a2) {
        a2.negative = i.negative ^ v32.negative, a2.length = v32.length + i.length;
        for (var h3 = 0, s3 = 0, u4 = 0;u4 < a2.length - 1; u4++) {
          var c2 = s3;
          s3 = 0;
          for (var b3 = h3 & 67108863, l3 = Math.min(u4, i.length - 1), n32 = Math.max(0, u4 - v32.length + 1);n32 <= l3; n32++) {
            var d2 = u4 - n32, w3 = v32.words[d2] | 0, g2 = i.words[n32] | 0, _5 = w3 * g2, A6 = _5 & 67108863;
            c2 = c2 + (_5 / 67108864 | 0) | 0, A6 = A6 + b3 | 0, b3 = A6 & 67108863, c2 = c2 + (A6 >>> 26) | 0, s3 += c2 >>> 26, c2 &= 67108863;
          }
          a2.words[u4] = b3, h3 = c2, c2 = s3;
        }
        return h3 !== 0 ? a2.words[u4] = h3 : a2.length--, a2.strip();
      }
      function _e(v32, i, a2) {
        var h3 = new N4;
        return h3.mulp(v32, i, a2);
      }
      f2.prototype.mulTo = function(i, a2) {
        var h3, s3 = this.length + i.length;
        return this.length === 10 && i.length === 10 ? h3 = L2(this, i, a2) : s3 < 63 ? h3 = q(this, i, a2) : s3 < 1024 ? h3 = ge(this, i, a2) : h3 = _e(this, i, a2), h3;
      };
      function N4(v32, i) {
        this.x = v32, this.y = i;
      }
      N4.prototype.makeRBT = function(i) {
        for (var a2 = new Array(i), h3 = f2.prototype._countBits(i) - 1, s3 = 0;s3 < i; s3++)
          a2[s3] = this.revBin(s3, h3, i);
        return a2;
      }, N4.prototype.revBin = function(i, a2, h3) {
        if (i === 0 || i === h3 - 1)
          return i;
        for (var s3 = 0, u4 = 0;u4 < a2; u4++)
          s3 |= (i & 1) << a2 - u4 - 1, i >>= 1;
        return s3;
      }, N4.prototype.permute = function(i, a2, h3, s3, u4, c2) {
        for (var b3 = 0;b3 < c2; b3++)
          s3[b3] = a2[i[b3]], u4[b3] = h3[i[b3]];
      }, N4.prototype.transform = function(i, a2, h3, s3, u4, c2) {
        this.permute(c2, i, a2, h3, s3, u4);
        for (var b3 = 1;b3 < u4; b3 <<= 1)
          for (var l3 = b3 << 1, n32 = Math.cos(2 * Math.PI / l3), d2 = Math.sin(2 * Math.PI / l3), w3 = 0;w3 < u4; w3 += l3)
            for (var g2 = n32, _5 = d2, A6 = 0;A6 < b3; A6++) {
              var R4 = h3[w3 + A6], I2 = s3[w3 + A6], Me = h3[w3 + A6 + b3], k32 = s3[w3 + A6 + b3], D3 = g2 * Me - _5 * k32;
              k32 = g2 * k32 + _5 * Me, Me = D3, h3[w3 + A6] = R4 + Me, s3[w3 + A6] = I2 + k32, h3[w3 + A6 + b3] = R4 - Me, s3[w3 + A6 + b3] = I2 - k32, A6 !== l3 && (D3 = n32 * g2 - d2 * _5, _5 = n32 * _5 + d2 * g2, g2 = D3);
            }
      }, N4.prototype.guessLen13b = function(i, a2) {
        var h3 = Math.max(a2, i) | 1, s3 = h3 & 1, u4 = 0;
        for (h3 = h3 / 2 | 0;h3; h3 = h3 >>> 1)
          u4++;
        return 1 << u4 + 1 + s3;
      }, N4.prototype.conjugate = function(i, a2, h3) {
        if (!(h3 <= 1))
          for (var s3 = 0;s3 < h3 / 2; s3++) {
            var u4 = i[s3];
            i[s3] = i[h3 - s3 - 1], i[h3 - s3 - 1] = u4, u4 = a2[s3], a2[s3] = -a2[h3 - s3 - 1], a2[h3 - s3 - 1] = -u4;
          }
      }, N4.prototype.normalize13b = function(i, a2) {
        for (var h3 = 0, s3 = 0;s3 < a2 / 2; s3++) {
          var u4 = Math.round(i[2 * s3 + 1] / a2) * 8192 + Math.round(i[2 * s3] / a2) + h3;
          i[s3] = u4 & 67108863, u4 < 67108864 ? h3 = 0 : h3 = u4 / 67108864 | 0;
        }
        return i;
      }, N4.prototype.convert13b = function(i, a2, h3, s3) {
        for (var u4 = 0, c2 = 0;c2 < a2; c2++)
          u4 = u4 + (i[c2] | 0), h3[2 * c2] = u4 & 8191, u4 = u4 >>> 13, h3[2 * c2 + 1] = u4 & 8191, u4 = u4 >>> 13;
        for (c2 = 2 * a2;c2 < s3; ++c2)
          h3[c2] = 0;
        r2(u4 === 0), r2((u4 & -8192) === 0);
      }, N4.prototype.stub = function(i) {
        for (var a2 = new Array(i), h3 = 0;h3 < i; h3++)
          a2[h3] = 0;
        return a2;
      }, N4.prototype.mulp = function(i, a2, h3) {
        var s3 = 2 * this.guessLen13b(i.length, a2.length), u4 = this.makeRBT(s3), c2 = this.stub(s3), b3 = new Array(s3), l3 = new Array(s3), n32 = new Array(s3), d2 = new Array(s3), w3 = new Array(s3), g2 = new Array(s3), _5 = h3.words;
        _5.length = s3, this.convert13b(i.words, i.length, b3, s3), this.convert13b(a2.words, a2.length, d2, s3), this.transform(b3, c2, l3, n32, s3, u4), this.transform(d2, c2, w3, g2, s3, u4);
        for (var A6 = 0;A6 < s3; A6++) {
          var R4 = l3[A6] * w3[A6] - n32[A6] * g2[A6];
          n32[A6] = l3[A6] * g2[A6] + n32[A6] * w3[A6], l3[A6] = R4;
        }
        return this.conjugate(l3, n32, s3), this.transform(l3, n32, _5, c2, s3, u4), this.conjugate(_5, c2, s3), this.normalize13b(_5, s3), h3.negative = i.negative ^ a2.negative, h3.length = i.length + a2.length, h3.strip();
      }, f2.prototype.mul = function(i) {
        var a2 = new f2(null);
        return a2.words = new Array(this.length + i.length), this.mulTo(i, a2);
      }, f2.prototype.mulf = function(i) {
        var a2 = new f2(null);
        return a2.words = new Array(this.length + i.length), _e(this, i, a2);
      }, f2.prototype.imul = function(i) {
        return this.clone().mulTo(i, this);
      }, f2.prototype.imuln = function(i) {
        r2(typeof i == "number"), r2(i < 67108864);
        for (var a2 = 0, h3 = 0;h3 < this.length; h3++) {
          var s3 = (this.words[h3] | 0) * i, u4 = (s3 & 67108863) + (a2 & 67108863);
          a2 >>= 26, a2 += s3 / 67108864 | 0, a2 += u4 >>> 26, this.words[h3] = u4 & 67108863;
        }
        return a2 !== 0 && (this.words[h3] = a2, this.length++), this;
      }, f2.prototype.muln = function(i) {
        return this.clone().imuln(i);
      }, f2.prototype.sqr = function() {
        return this.mul(this);
      }, f2.prototype.isqr = function() {
        return this.imul(this.clone());
      }, f2.prototype.pow = function(i) {
        var a2 = B5(i);
        if (a2.length === 0)
          return new f2(1);
        for (var h3 = this, s3 = 0;s3 < a2.length && a2[s3] === 0; s3++, h3 = h3.sqr())
          ;
        if (++s3 < a2.length)
          for (var u4 = h3.sqr();s3 < a2.length; s3++, u4 = u4.sqr())
            a2[s3] !== 0 && (h3 = h3.mul(u4));
        return h3;
      }, f2.prototype.iushln = function(i) {
        r2(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26, s3 = 67108863 >>> 26 - a2 << 26 - a2, u4;
        if (a2 !== 0) {
          var c2 = 0;
          for (u4 = 0;u4 < this.length; u4++) {
            var b3 = this.words[u4] & s3, l3 = (this.words[u4] | 0) - b3 << a2;
            this.words[u4] = l3 | c2, c2 = b3 >>> 26 - a2;
          }
          c2 && (this.words[u4] = c2, this.length++);
        }
        if (h3 !== 0) {
          for (u4 = this.length - 1;u4 >= 0; u4--)
            this.words[u4 + h3] = this.words[u4];
          for (u4 = 0;u4 < h3; u4++)
            this.words[u4] = 0;
          this.length += h3;
        }
        return this.strip();
      }, f2.prototype.ishln = function(i) {
        return r2(this.negative === 0), this.iushln(i);
      }, f2.prototype.iushrn = function(i, a2, h3) {
        r2(typeof i == "number" && i >= 0);
        var s3;
        a2 ? s3 = (a2 - a2 % 26) / 26 : s3 = 0;
        var u4 = i % 26, c2 = Math.min((i - u4) / 26, this.length), b3 = 67108863 ^ 67108863 >>> u4 << u4, l3 = h3;
        if (s3 -= c2, s3 = Math.max(0, s3), l3) {
          for (var n32 = 0;n32 < c2; n32++)
            l3.words[n32] = this.words[n32];
          l3.length = c2;
        }
        if (c2 !== 0)
          if (this.length > c2)
            for (this.length -= c2, n32 = 0;n32 < this.length; n32++)
              this.words[n32] = this.words[n32 + c2];
          else
            this.words[0] = 0, this.length = 1;
        var d2 = 0;
        for (n32 = this.length - 1;n32 >= 0 && (d2 !== 0 || n32 >= s3); n32--) {
          var w3 = this.words[n32] | 0;
          this.words[n32] = d2 << 26 - u4 | w3 >>> u4, d2 = w3 & b3;
        }
        return l3 && d2 !== 0 && (l3.words[l3.length++] = d2), this.length === 0 && (this.words[0] = 0, this.length = 1), this.strip();
      }, f2.prototype.ishrn = function(i, a2, h3) {
        return r2(this.negative === 0), this.iushrn(i, a2, h3);
      }, f2.prototype.shln = function(i) {
        return this.clone().ishln(i);
      }, f2.prototype.ushln = function(i) {
        return this.clone().iushln(i);
      }, f2.prototype.shrn = function(i) {
        return this.clone().ishrn(i);
      }, f2.prototype.ushrn = function(i) {
        return this.clone().iushrn(i);
      }, f2.prototype.testn = function(i) {
        r2(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26, s3 = 1 << a2;
        if (this.length <= h3)
          return false;
        var u4 = this.words[h3];
        return !!(u4 & s3);
      }, f2.prototype.imaskn = function(i) {
        r2(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26;
        if (r2(this.negative === 0, "imaskn works only with positive numbers"), this.length <= h3)
          return this;
        if (a2 !== 0 && h3++, this.length = Math.min(h3, this.length), a2 !== 0) {
          var s3 = 67108863 ^ 67108863 >>> a2 << a2;
          this.words[this.length - 1] &= s3;
        }
        return this.strip();
      }, f2.prototype.maskn = function(i) {
        return this.clone().imaskn(i);
      }, f2.prototype.iaddn = function(i) {
        return r2(typeof i == "number"), r2(i < 67108864), i < 0 ? this.isubn(-i) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) < i ? (this.words[0] = i - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(i), this.negative = 1, this) : this._iaddn(i);
      }, f2.prototype._iaddn = function(i) {
        this.words[0] += i;
        for (var a2 = 0;a2 < this.length && this.words[a2] >= 67108864; a2++)
          this.words[a2] -= 67108864, a2 === this.length - 1 ? this.words[a2 + 1] = 1 : this.words[a2 + 1]++;
        return this.length = Math.max(this.length, a2 + 1), this;
      }, f2.prototype.isubn = function(i) {
        if (r2(typeof i == "number"), r2(i < 67108864), i < 0)
          return this.iaddn(-i);
        if (this.negative !== 0)
          return this.negative = 0, this.iaddn(i), this.negative = 1, this;
        if (this.words[0] -= i, this.length === 1 && this.words[0] < 0)
          this.words[0] = -this.words[0], this.negative = 1;
        else
          for (var a2 = 0;a2 < this.length && this.words[a2] < 0; a2++)
            this.words[a2] += 67108864, this.words[a2 + 1] -= 1;
        return this.strip();
      }, f2.prototype.addn = function(i) {
        return this.clone().iaddn(i);
      }, f2.prototype.subn = function(i) {
        return this.clone().isubn(i);
      }, f2.prototype.iabs = function() {
        return this.negative = 0, this;
      }, f2.prototype.abs = function() {
        return this.clone().iabs();
      }, f2.prototype._ishlnsubmul = function(i, a2, h3) {
        var s3 = i.length + h3, u4;
        this._expand(s3);
        var c2, b3 = 0;
        for (u4 = 0;u4 < i.length; u4++) {
          c2 = (this.words[u4 + h3] | 0) + b3;
          var l3 = (i.words[u4] | 0) * a2;
          c2 -= l3 & 67108863, b3 = (c2 >> 26) - (l3 / 67108864 | 0), this.words[u4 + h3] = c2 & 67108863;
        }
        for (;u4 < this.length - h3; u4++)
          c2 = (this.words[u4 + h3] | 0) + b3, b3 = c2 >> 26, this.words[u4 + h3] = c2 & 67108863;
        if (b3 === 0)
          return this.strip();
        for (r2(b3 === -1), b3 = 0, u4 = 0;u4 < this.length; u4++)
          c2 = -(this.words[u4] | 0) + b3, b3 = c2 >> 26, this.words[u4] = c2 & 67108863;
        return this.negative = 1, this.strip();
      }, f2.prototype._wordDiv = function(i, a2) {
        var h3 = this.length - i.length, s3 = this.clone(), u4 = i, c2 = u4.words[u4.length - 1] | 0, b3 = this._countBits(c2);
        h3 = 26 - b3, h3 !== 0 && (u4 = u4.ushln(h3), s3.iushln(h3), c2 = u4.words[u4.length - 1] | 0);
        var l3 = s3.length - u4.length, n32;
        if (a2 !== "mod") {
          n32 = new f2(null), n32.length = l3 + 1, n32.words = new Array(n32.length);
          for (var d2 = 0;d2 < n32.length; d2++)
            n32.words[d2] = 0;
        }
        var w3 = s3.clone()._ishlnsubmul(u4, 1, l3);
        w3.negative === 0 && (s3 = w3, n32 && (n32.words[l3] = 1));
        for (var g2 = l3 - 1;g2 >= 0; g2--) {
          var _5 = (s3.words[u4.length + g2] | 0) * 67108864 + (s3.words[u4.length + g2 - 1] | 0);
          for (_5 = Math.min(_5 / c2 | 0, 67108863), s3._ishlnsubmul(u4, _5, g2);s3.negative !== 0; )
            _5--, s3.negative = 0, s3._ishlnsubmul(u4, 1, g2), s3.isZero() || (s3.negative ^= 1);
          n32 && (n32.words[g2] = _5);
        }
        return n32 && n32.strip(), s3.strip(), a2 !== "div" && h3 !== 0 && s3.iushrn(h3), { div: n32 || null, mod: s3 };
      }, f2.prototype.divmod = function(i, a2, h3) {
        if (r2(!i.isZero()), this.isZero())
          return { div: new f2(0), mod: new f2(0) };
        var s3, u4, c2;
        return this.negative !== 0 && i.negative === 0 ? (c2 = this.neg().divmod(i, a2), a2 !== "mod" && (s3 = c2.div.neg()), a2 !== "div" && (u4 = c2.mod.neg(), h3 && u4.negative !== 0 && u4.iadd(i)), { div: s3, mod: u4 }) : this.negative === 0 && i.negative !== 0 ? (c2 = this.divmod(i.neg(), a2), a2 !== "mod" && (s3 = c2.div.neg()), { div: s3, mod: c2.mod }) : (this.negative & i.negative) !== 0 ? (c2 = this.neg().divmod(i.neg(), a2), a2 !== "div" && (u4 = c2.mod.neg(), h3 && u4.negative !== 0 && u4.isub(i)), { div: c2.div, mod: u4 }) : i.length > this.length || this.cmp(i) < 0 ? { div: new f2(0), mod: this } : i.length === 1 ? a2 === "div" ? { div: this.divn(i.words[0]), mod: null } : a2 === "mod" ? { div: null, mod: new f2(this.modn(i.words[0])) } : { div: this.divn(i.words[0]), mod: new f2(this.modn(i.words[0])) } : this._wordDiv(i, a2);
      }, f2.prototype.div = function(i) {
        return this.divmod(i, "div", false).div;
      }, f2.prototype.mod = function(i) {
        return this.divmod(i, "mod", false).mod;
      }, f2.prototype.umod = function(i) {
        return this.divmod(i, "mod", true).mod;
      }, f2.prototype.divRound = function(i) {
        var a2 = this.divmod(i);
        if (a2.mod.isZero())
          return a2.div;
        var h3 = a2.div.negative !== 0 ? a2.mod.isub(i) : a2.mod, s3 = i.ushrn(1), u4 = i.andln(1), c2 = h3.cmp(s3);
        return c2 < 0 || u4 === 1 && c2 === 0 ? a2.div : a2.div.negative !== 0 ? a2.div.isubn(1) : a2.div.iaddn(1);
      }, f2.prototype.modn = function(i) {
        r2(i <= 67108863);
        for (var a2 = (1 << 26) % i, h3 = 0, s3 = this.length - 1;s3 >= 0; s3--)
          h3 = (a2 * h3 + (this.words[s3] | 0)) % i;
        return h3;
      }, f2.prototype.idivn = function(i) {
        r2(i <= 67108863);
        for (var a2 = 0, h3 = this.length - 1;h3 >= 0; h3--) {
          var s3 = (this.words[h3] | 0) + a2 * 67108864;
          this.words[h3] = s3 / i | 0, a2 = s3 % i;
        }
        return this.strip();
      }, f2.prototype.divn = function(i) {
        return this.clone().idivn(i);
      }, f2.prototype.egcd = function(i) {
        r2(i.negative === 0), r2(!i.isZero());
        var a2 = this, h3 = i.clone();
        a2.negative !== 0 ? a2 = a2.umod(i) : a2 = a2.clone();
        for (var s3 = new f2(1), u4 = new f2(0), c2 = new f2(0), b3 = new f2(1), l3 = 0;a2.isEven() && h3.isEven(); )
          a2.iushrn(1), h3.iushrn(1), ++l3;
        for (var n32 = h3.clone(), d2 = a2.clone();!a2.isZero(); ) {
          for (var w3 = 0, g2 = 1;(a2.words[0] & g2) === 0 && w3 < 26; ++w3, g2 <<= 1)
            ;
          if (w3 > 0)
            for (a2.iushrn(w3);w3-- > 0; )
              (s3.isOdd() || u4.isOdd()) && (s3.iadd(n32), u4.isub(d2)), s3.iushrn(1), u4.iushrn(1);
          for (var _5 = 0, A6 = 1;(h3.words[0] & A6) === 0 && _5 < 26; ++_5, A6 <<= 1)
            ;
          if (_5 > 0)
            for (h3.iushrn(_5);_5-- > 0; )
              (c2.isOdd() || b3.isOdd()) && (c2.iadd(n32), b3.isub(d2)), c2.iushrn(1), b3.iushrn(1);
          a2.cmp(h3) >= 0 ? (a2.isub(h3), s3.isub(c2), u4.isub(b3)) : (h3.isub(a2), c2.isub(s3), b3.isub(u4));
        }
        return { a: c2, b: b3, gcd: h3.iushln(l3) };
      }, f2.prototype._invmp = function(i) {
        r2(i.negative === 0), r2(!i.isZero());
        var a2 = this, h3 = i.clone();
        a2.negative !== 0 ? a2 = a2.umod(i) : a2 = a2.clone();
        for (var s3 = new f2(1), u4 = new f2(0), c2 = h3.clone();a2.cmpn(1) > 0 && h3.cmpn(1) > 0; ) {
          for (var b3 = 0, l3 = 1;(a2.words[0] & l3) === 0 && b3 < 26; ++b3, l3 <<= 1)
            ;
          if (b3 > 0)
            for (a2.iushrn(b3);b3-- > 0; )
              s3.isOdd() && s3.iadd(c2), s3.iushrn(1);
          for (var n32 = 0, d2 = 1;(h3.words[0] & d2) === 0 && n32 < 26; ++n32, d2 <<= 1)
            ;
          if (n32 > 0)
            for (h3.iushrn(n32);n32-- > 0; )
              u4.isOdd() && u4.iadd(c2), u4.iushrn(1);
          a2.cmp(h3) >= 0 ? (a2.isub(h3), s3.isub(u4)) : (h3.isub(a2), u4.isub(s3));
        }
        var w3;
        return a2.cmpn(1) === 0 ? w3 = s3 : w3 = u4, w3.cmpn(0) < 0 && w3.iadd(i), w3;
      }, f2.prototype.gcd = function(i) {
        if (this.isZero())
          return i.abs();
        if (i.isZero())
          return this.abs();
        var a2 = this.clone(), h3 = i.clone();
        a2.negative = 0, h3.negative = 0;
        for (var s3 = 0;a2.isEven() && h3.isEven(); s3++)
          a2.iushrn(1), h3.iushrn(1);
        do {
          for (;a2.isEven(); )
            a2.iushrn(1);
          for (;h3.isEven(); )
            h3.iushrn(1);
          var u4 = a2.cmp(h3);
          if (u4 < 0) {
            var c2 = a2;
            a2 = h3, h3 = c2;
          } else if (u4 === 0 || h3.cmpn(1) === 0)
            break;
          a2.isub(h3);
        } while (true);
        return h3.iushln(s3);
      }, f2.prototype.invm = function(i) {
        return this.egcd(i).a.umod(i);
      }, f2.prototype.isEven = function() {
        return (this.words[0] & 1) === 0;
      }, f2.prototype.isOdd = function() {
        return (this.words[0] & 1) === 1;
      }, f2.prototype.andln = function(i) {
        return this.words[0] & i;
      }, f2.prototype.bincn = function(i) {
        r2(typeof i == "number");
        var a2 = i % 26, h3 = (i - a2) / 26, s3 = 1 << a2;
        if (this.length <= h3)
          return this._expand(h3 + 1), this.words[h3] |= s3, this;
        for (var u4 = s3, c2 = h3;u4 !== 0 && c2 < this.length; c2++) {
          var b3 = this.words[c2] | 0;
          b3 += u4, u4 = b3 >>> 26, b3 &= 67108863, this.words[c2] = b3;
        }
        return u4 !== 0 && (this.words[c2] = u4, this.length++), this;
      }, f2.prototype.isZero = function() {
        return this.length === 1 && this.words[0] === 0;
      }, f2.prototype.cmpn = function(i) {
        var a2 = i < 0;
        if (this.negative !== 0 && !a2)
          return -1;
        if (this.negative === 0 && a2)
          return 1;
        this.strip();
        var h3;
        if (this.length > 1)
          h3 = 1;
        else {
          a2 && (i = -i), r2(i <= 67108863, "Number is too big");
          var s3 = this.words[0] | 0;
          h3 = s3 === i ? 0 : s3 < i ? -1 : 1;
        }
        return this.negative !== 0 ? -h3 | 0 : h3;
      }, f2.prototype.cmp = function(i) {
        if (this.negative !== 0 && i.negative === 0)
          return -1;
        if (this.negative === 0 && i.negative !== 0)
          return 1;
        var a2 = this.ucmp(i);
        return this.negative !== 0 ? -a2 | 0 : a2;
      }, f2.prototype.ucmp = function(i) {
        if (this.length > i.length)
          return 1;
        if (this.length < i.length)
          return -1;
        for (var a2 = 0, h3 = this.length - 1;h3 >= 0; h3--) {
          var s3 = this.words[h3] | 0, u4 = i.words[h3] | 0;
          if (s3 !== u4) {
            s3 < u4 ? a2 = -1 : s3 > u4 && (a2 = 1);
            break;
          }
        }
        return a2;
      }, f2.prototype.gtn = function(i) {
        return this.cmpn(i) === 1;
      }, f2.prototype.gt = function(i) {
        return this.cmp(i) === 1;
      }, f2.prototype.gten = function(i) {
        return this.cmpn(i) >= 0;
      }, f2.prototype.gte = function(i) {
        return this.cmp(i) >= 0;
      }, f2.prototype.ltn = function(i) {
        return this.cmpn(i) === -1;
      }, f2.prototype.lt = function(i) {
        return this.cmp(i) === -1;
      }, f2.prototype.lten = function(i) {
        return this.cmpn(i) <= 0;
      }, f2.prototype.lte = function(i) {
        return this.cmp(i) <= 0;
      }, f2.prototype.eqn = function(i) {
        return this.cmpn(i) === 0;
      }, f2.prototype.eq = function(i) {
        return this.cmp(i) === 0;
      }, f2.red = function(i) {
        return new P(i);
      }, f2.prototype.toRed = function(i) {
        return r2(!this.red, "Already a number in reduction context"), r2(this.negative === 0, "red works only with positives"), i.convertTo(this)._forceRed(i);
      }, f2.prototype.fromRed = function() {
        return r2(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
      }, f2.prototype._forceRed = function(i) {
        return this.red = i, this;
      }, f2.prototype.forceRed = function(i) {
        return r2(!this.red, "Already a number in reduction context"), this._forceRed(i);
      }, f2.prototype.redAdd = function(i) {
        return r2(this.red, "redAdd works only with red numbers"), this.red.add(this, i);
      }, f2.prototype.redIAdd = function(i) {
        return r2(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, i);
      }, f2.prototype.redSub = function(i) {
        return r2(this.red, "redSub works only with red numbers"), this.red.sub(this, i);
      }, f2.prototype.redISub = function(i) {
        return r2(this.red, "redISub works only with red numbers"), this.red.isub(this, i);
      }, f2.prototype.redShl = function(i) {
        return r2(this.red, "redShl works only with red numbers"), this.red.shl(this, i);
      }, f2.prototype.redMul = function(i) {
        return r2(this.red, "redMul works only with red numbers"), this.red._verify2(this, i), this.red.mul(this, i);
      }, f2.prototype.redIMul = function(i) {
        return r2(this.red, "redMul works only with red numbers"), this.red._verify2(this, i), this.red.imul(this, i);
      }, f2.prototype.redSqr = function() {
        return r2(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
      }, f2.prototype.redISqr = function() {
        return r2(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
      }, f2.prototype.redSqrt = function() {
        return r2(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
      }, f2.prototype.redInvm = function() {
        return r2(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
      }, f2.prototype.redNeg = function() {
        return r2(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
      }, f2.prototype.redPow = function(i) {
        return r2(this.red && !i.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, i);
      };
      var we = { k256: null, p224: null, p192: null, p25519: null };
      function ye(v32, i) {
        this.name = v32, this.p = new f2(i, 16), this.n = this.p.bitLength(), this.k = new f2(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
      }
      ye.prototype._tmp = function() {
        var i = new f2(null);
        return i.words = new Array(Math.ceil(this.n / 13)), i;
      }, ye.prototype.ireduce = function(i) {
        var a2 = i, h3;
        do
          this.split(a2, this.tmp), a2 = this.imulK(a2), a2 = a2.iadd(this.tmp), h3 = a2.bitLength();
        while (h3 > this.n);
        var s3 = h3 < this.n ? -1 : a2.ucmp(this.p);
        return s3 === 0 ? (a2.words[0] = 0, a2.length = 1) : s3 > 0 ? a2.isub(this.p) : a2.strip !== undefined ? a2.strip() : a2._strip(), a2;
      }, ye.prototype.split = function(i, a2) {
        i.iushrn(this.n, 0, a2);
      }, ye.prototype.imulK = function(i) {
        return i.imul(this.k);
      };
      function xe() {
        ye.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      o2(xe, ye), xe.prototype.split = function(i, a2) {
        for (var h3 = 4194303, s3 = Math.min(i.length, 9), u4 = 0;u4 < s3; u4++)
          a2.words[u4] = i.words[u4];
        if (a2.length = s3, i.length <= 9) {
          i.words[0] = 0, i.length = 1;
          return;
        }
        var c2 = i.words[9];
        for (a2.words[a2.length++] = c2 & h3, u4 = 10;u4 < i.length; u4++) {
          var b3 = i.words[u4] | 0;
          i.words[u4 - 10] = (b3 & h3) << 4 | c2 >>> 22, c2 = b3;
        }
        c2 >>>= 22, i.words[u4 - 10] = c2, c2 === 0 && i.length > 10 ? i.length -= 10 : i.length -= 9;
      }, xe.prototype.imulK = function(i) {
        i.words[i.length] = 0, i.words[i.length + 1] = 0, i.length += 2;
        for (var a2 = 0, h3 = 0;h3 < i.length; h3++) {
          var s3 = i.words[h3] | 0;
          a2 += s3 * 977, i.words[h3] = a2 & 67108863, a2 = s3 * 64 + (a2 / 67108864 | 0);
        }
        return i.words[i.length - 1] === 0 && (i.length--, i.words[i.length - 1] === 0 && i.length--), i;
      };
      function Re() {
        ye.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      o2(Re, ye);
      function Ee() {
        ye.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      o2(Ee, ye);
      function Ae() {
        ye.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      o2(Ae, ye), Ae.prototype.imulK = function(i) {
        for (var a2 = 0, h3 = 0;h3 < i.length; h3++) {
          var s3 = (i.words[h3] | 0) * 19 + a2, u4 = s3 & 67108863;
          s3 >>>= 26, i.words[h3] = u4, a2 = s3;
        }
        return a2 !== 0 && (i.words[i.length++] = a2), i;
      }, f2._prime = function(i) {
        if (we[i])
          return we[i];
        var a2;
        if (i === "k256")
          a2 = new xe;
        else if (i === "p224")
          a2 = new Re;
        else if (i === "p192")
          a2 = new Ee;
        else if (i === "p25519")
          a2 = new Ae;
        else
          throw new Error("Unknown prime " + i);
        return we[i] = a2, a2;
      };
      function P(v32) {
        if (typeof v32 == "string") {
          var i = f2._prime(v32);
          this.m = i.p, this.prime = i;
        } else
          r2(v32.gtn(1), "modulus must be greater than 1"), this.m = v32, this.prime = null;
      }
      P.prototype._verify1 = function(i) {
        r2(i.negative === 0, "red works only with positives"), r2(i.red, "red works only with red numbers");
      }, P.prototype._verify2 = function(i, a2) {
        r2((i.negative | a2.negative) === 0, "red works only with positives"), r2(i.red && i.red === a2.red, "red works only with red numbers");
      }, P.prototype.imod = function(i) {
        return this.prime ? this.prime.ireduce(i)._forceRed(this) : i.umod(this.m)._forceRed(this);
      }, P.prototype.neg = function(i) {
        return i.isZero() ? i.clone() : this.m.sub(i)._forceRed(this);
      }, P.prototype.add = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.add(a2);
        return h3.cmp(this.m) >= 0 && h3.isub(this.m), h3._forceRed(this);
      }, P.prototype.iadd = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.iadd(a2);
        return h3.cmp(this.m) >= 0 && h3.isub(this.m), h3;
      }, P.prototype.sub = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.sub(a2);
        return h3.cmpn(0) < 0 && h3.iadd(this.m), h3._forceRed(this);
      }, P.prototype.isub = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.isub(a2);
        return h3.cmpn(0) < 0 && h3.iadd(this.m), h3;
      }, P.prototype.shl = function(i, a2) {
        return this._verify1(i), this.imod(i.ushln(a2));
      }, P.prototype.imul = function(i, a2) {
        return this._verify2(i, a2), this.imod(i.imul(a2));
      }, P.prototype.mul = function(i, a2) {
        return this._verify2(i, a2), this.imod(i.mul(a2));
      }, P.prototype.isqr = function(i) {
        return this.imul(i, i.clone());
      }, P.prototype.sqr = function(i) {
        return this.mul(i, i);
      }, P.prototype.sqrt = function(i) {
        if (i.isZero())
          return i.clone();
        var a2 = this.m.andln(3);
        if (r2(a2 % 2 === 1), a2 === 3) {
          var h3 = this.m.add(new f2(1)).iushrn(2);
          return this.pow(i, h3);
        }
        for (var s3 = this.m.subn(1), u4 = 0;!s3.isZero() && s3.andln(1) === 0; )
          u4++, s3.iushrn(1);
        r2(!s3.isZero());
        var c2 = new f2(1).toRed(this), b3 = c2.redNeg(), l3 = this.m.subn(1).iushrn(1), n32 = this.m.bitLength();
        for (n32 = new f2(2 * n32 * n32).toRed(this);this.pow(n32, l3).cmp(b3) !== 0; )
          n32.redIAdd(b3);
        for (var d2 = this.pow(n32, s3), w3 = this.pow(i, s3.addn(1).iushrn(1)), g2 = this.pow(i, s3), _5 = u4;g2.cmp(c2) !== 0; ) {
          for (var A6 = g2, R4 = 0;A6.cmp(c2) !== 0; R4++)
            A6 = A6.redSqr();
          r2(R4 < _5);
          var I2 = this.pow(d2, new f2(1).iushln(_5 - R4 - 1));
          w3 = w3.redMul(I2), d2 = I2.redSqr(), g2 = g2.redMul(d2), _5 = R4;
        }
        return w3;
      }, P.prototype.invm = function(i) {
        var a2 = i._invmp(this.m);
        return a2.negative !== 0 ? (a2.negative = 0, this.imod(a2).redNeg()) : this.imod(a2);
      }, P.prototype.pow = function(i, a2) {
        if (a2.isZero())
          return new f2(1).toRed(this);
        if (a2.cmpn(1) === 0)
          return i.clone();
        var h3 = 4, s3 = new Array(1 << h3);
        s3[0] = new f2(1).toRed(this), s3[1] = i;
        for (var u4 = 2;u4 < s3.length; u4++)
          s3[u4] = this.mul(s3[u4 - 1], i);
        var c2 = s3[0], b3 = 0, l3 = 0, n32 = a2.bitLength() % 26;
        for (n32 === 0 && (n32 = 26), u4 = a2.length - 1;u4 >= 0; u4--) {
          for (var d2 = a2.words[u4], w3 = n32 - 1;w3 >= 0; w3--) {
            var g2 = d2 >> w3 & 1;
            if (c2 !== s3[0] && (c2 = this.sqr(c2)), g2 === 0 && b3 === 0) {
              l3 = 0;
              continue;
            }
            b3 <<= 1, b3 |= g2, l3++, !(l3 !== h3 && (u4 !== 0 || w3 !== 0)) && (c2 = this.mul(c2, s3[b3]), l3 = 0, b3 = 0);
          }
          n32 = 26;
        }
        return c2;
      }, P.prototype.convertTo = function(i) {
        var a2 = i.umod(this.m);
        return a2 === i ? a2.clone() : a2;
      }, P.prototype.convertFrom = function(i) {
        var a2 = i.clone();
        return a2.red = null, a2;
      }, f2.mont = function(i) {
        return new Se(i);
      };
      function Se(v32) {
        P.call(this, v32), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new f2(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
      }
      o2(Se, P), Se.prototype.convertTo = function(i) {
        return this.imod(i.ushln(this.shift));
      }, Se.prototype.convertFrom = function(i) {
        var a2 = this.imod(i.mul(this.rinv));
        return a2.red = null, a2;
      }, Se.prototype.imul = function(i, a2) {
        if (i.isZero() || a2.isZero())
          return i.words[0] = 0, i.length = 1, i;
        var h3 = i.imul(a2), s3 = h3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u4 = h3.isub(s3).iushrn(this.shift), c2 = u4;
        return u4.cmp(this.m) >= 0 ? c2 = u4.isub(this.m) : u4.cmpn(0) < 0 && (c2 = u4.iadd(this.m)), c2._forceRed(this);
      }, Se.prototype.mul = function(i, a2) {
        if (i.isZero() || a2.isZero())
          return new f2(0)._forceRed(this);
        var h3 = i.mul(a2), s3 = h3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u4 = h3.isub(s3).iushrn(this.shift), c2 = u4;
        return u4.cmp(this.m) >= 0 ? c2 = u4.isub(this.m) : u4.cmpn(0) < 0 && (c2 = u4.iadd(this.m)), c2._forceRed(this);
      }, Se.prototype.invm = function(i) {
        var a2 = this.imod(i._invmp(this.m).mul(this.r2));
        return a2._forceRed(this);
      };
    })(typeof Gu > "u" || Gu, $m);
  });
  Ym = T2((Gm, Xu) => {
    (function(t22, e2) {
      function r2(v32, i) {
        if (!v32)
          throw new Error(i || "Assertion failed");
      }
      function o2(v32, i) {
        v32.super_ = i;
        var a2 = function() {
        };
        a2.prototype = i.prototype, v32.prototype = new a2, v32.prototype.constructor = v32;
      }
      function f2(v32, i, a2) {
        if (f2.isBN(v32))
          return v32;
        this.negative = 0, this.words = null, this.length = 0, this.red = null, v32 !== null && ((i === "le" || i === "be") && (a2 = i, i = 10), this._init(v32 || 0, i || 10, a2 || "be"));
      }
      typeof t22 == "object" ? t22.exports = f2 : e2.BN = f2, f2.BN = f2, f2.wordSize = 26;
      var p2;
      try {
        typeof window < "u" && typeof window.Buffer < "u" ? p2 = window.Buffer : p2 = ji().Buffer;
      } catch {
      }
      f2.isBN = function(i) {
        return i instanceof f2 ? true : i !== null && typeof i == "object" && i.constructor.wordSize === f2.wordSize && Array.isArray(i.words);
      }, f2.max = function(i, a2) {
        return i.cmp(a2) > 0 ? i : a2;
      }, f2.min = function(i, a2) {
        return i.cmp(a2) < 0 ? i : a2;
      }, f2.prototype._init = function(i, a2, h3) {
        if (typeof i == "number")
          return this._initNumber(i, a2, h3);
        if (typeof i == "object")
          return this._initArray(i, a2, h3);
        a2 === "hex" && (a2 = 16), r2(a2 === (a2 | 0) && a2 >= 2 && a2 <= 36), i = i.toString().replace(/\s+/g, "");
        var s3 = 0;
        i[0] === "-" && (s3++, this.negative = 1), s3 < i.length && (a2 === 16 ? this._parseHex(i, s3, h3) : (this._parseBase(i, a2, s3), h3 === "le" && this._initArray(this.toArray(), a2, h3)));
      }, f2.prototype._initNumber = function(i, a2, h3) {
        i < 0 && (this.negative = 1, i = -i), i < 67108864 ? (this.words = [i & 67108863], this.length = 1) : i < 4503599627370496 ? (this.words = [i & 67108863, i / 67108864 & 67108863], this.length = 2) : (r2(i < 9007199254740992), this.words = [i & 67108863, i / 67108864 & 67108863, 1], this.length = 3), h3 === "le" && this._initArray(this.toArray(), a2, h3);
      }, f2.prototype._initArray = function(i, a2, h3) {
        if (r2(typeof i.length == "number"), i.length <= 0)
          return this.words = [0], this.length = 1, this;
        this.length = Math.ceil(i.length / 3), this.words = new Array(this.length);
        for (var s3 = 0;s3 < this.length; s3++)
          this.words[s3] = 0;
        var u4, c2, b3 = 0;
        if (h3 === "be")
          for (s3 = i.length - 1, u4 = 0;s3 >= 0; s3 -= 3)
            c2 = i[s3] | i[s3 - 1] << 8 | i[s3 - 2] << 16, this.words[u4] |= c2 << b3 & 67108863, this.words[u4 + 1] = c2 >>> 26 - b3 & 67108863, b3 += 24, b3 >= 26 && (b3 -= 26, u4++);
        else if (h3 === "le")
          for (s3 = 0, u4 = 0;s3 < i.length; s3 += 3)
            c2 = i[s3] | i[s3 + 1] << 8 | i[s3 + 2] << 16, this.words[u4] |= c2 << b3 & 67108863, this.words[u4 + 1] = c2 >>> 26 - b3 & 67108863, b3 += 24, b3 >= 26 && (b3 -= 26, u4++);
        return this.strip();
      };
      function m32(v32, i) {
        var a2 = v32.charCodeAt(i);
        return a2 >= 65 && a2 <= 70 ? a2 - 55 : a2 >= 97 && a2 <= 102 ? a2 - 87 : a2 - 48 & 15;
      }
      function y22(v32, i, a2) {
        var h3 = m32(v32, a2);
        return a2 - 1 >= i && (h3 |= m32(v32, a2 - 1) << 4), h3;
      }
      f2.prototype._parseHex = function(i, a2, h3) {
        this.length = Math.ceil((i.length - a2) / 6), this.words = new Array(this.length);
        for (var s3 = 0;s3 < this.length; s3++)
          this.words[s3] = 0;
        var u4 = 0, c2 = 0, b3;
        if (h3 === "be")
          for (s3 = i.length - 1;s3 >= a2; s3 -= 2)
            b3 = y22(i, a2, s3) << u4, this.words[c2] |= b3 & 67108863, u4 >= 18 ? (u4 -= 18, c2 += 1, this.words[c2] |= b3 >>> 26) : u4 += 8;
        else {
          var l3 = i.length - a2;
          for (s3 = l3 % 2 === 0 ? a2 + 1 : a2;s3 < i.length; s3 += 2)
            b3 = y22(i, a2, s3) << u4, this.words[c2] |= b3 & 67108863, u4 >= 18 ? (u4 -= 18, c2 += 1, this.words[c2] |= b3 >>> 26) : u4 += 8;
        }
        this.strip();
      };
      function M3(v32, i, a2, h3) {
        for (var s3 = 0, u4 = Math.min(v32.length, a2), c2 = i;c2 < u4; c2++) {
          var b3 = v32.charCodeAt(c2) - 48;
          s3 *= h3, b3 >= 49 ? s3 += b3 - 49 + 10 : b3 >= 17 ? s3 += b3 - 17 + 10 : s3 += b3;
        }
        return s3;
      }
      f2.prototype._parseBase = function(i, a2, h3) {
        this.words = [0], this.length = 1;
        for (var s3 = 0, u4 = 1;u4 <= 67108863; u4 *= a2)
          s3++;
        s3--, u4 = u4 / a2 | 0;
        for (var c2 = i.length - h3, b3 = c2 % s3, l3 = Math.min(c2, c2 - b3) + h3, n32 = 0, d2 = h3;d2 < l3; d2 += s3)
          n32 = M3(i, d2, d2 + s3, a2), this.imuln(u4), this.words[0] + n32 < 67108864 ? this.words[0] += n32 : this._iaddn(n32);
        if (b3 !== 0) {
          var w3 = 1;
          for (n32 = M3(i, d2, i.length, a2), d2 = 0;d2 < b3; d2++)
            w3 *= a2;
          this.imuln(w3), this.words[0] + n32 < 67108864 ? this.words[0] += n32 : this._iaddn(n32);
        }
        this.strip();
      }, f2.prototype.copy = function(i) {
        i.words = new Array(this.length);
        for (var a2 = 0;a2 < this.length; a2++)
          i.words[a2] = this.words[a2];
        i.length = this.length, i.negative = this.negative, i.red = this.red;
      }, f2.prototype.clone = function() {
        var i = new f2(null);
        return this.copy(i), i;
      }, f2.prototype._expand = function(i) {
        for (;this.length < i; )
          this.words[this.length++] = 0;
        return this;
      }, f2.prototype.strip = function() {
        for (;this.length > 1 && this.words[this.length - 1] === 0; )
          this.length--;
        return this._normSign();
      }, f2.prototype._normSign = function() {
        return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
      }, f2.prototype.inspect = function() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var x5 = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"], S2 = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], E4 = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
      f2.prototype.toString = function(i, a2) {
        i = i || 10, a2 = a2 | 0 || 1;
        var h3;
        if (i === 16 || i === "hex") {
          h3 = "";
          for (var s3 = 0, u4 = 0, c2 = 0;c2 < this.length; c2++) {
            var b3 = this.words[c2], l3 = ((b3 << s3 | u4) & 16777215).toString(16);
            u4 = b3 >>> 24 - s3 & 16777215, u4 !== 0 || c2 !== this.length - 1 ? h3 = x5[6 - l3.length] + l3 + h3 : h3 = l3 + h3, s3 += 2, s3 >= 26 && (s3 -= 26, c2--);
          }
          for (u4 !== 0 && (h3 = u4.toString(16) + h3);h3.length % a2 !== 0; )
            h3 = "0" + h3;
          return this.negative !== 0 && (h3 = "-" + h3), h3;
        }
        if (i === (i | 0) && i >= 2 && i <= 36) {
          var n32 = S2[i], d2 = E4[i];
          h3 = "";
          var w3 = this.clone();
          for (w3.negative = 0;!w3.isZero(); ) {
            var g2 = w3.modn(d2).toString(i);
            w3 = w3.idivn(d2), w3.isZero() ? h3 = g2 + h3 : h3 = x5[n32 - g2.length] + g2 + h3;
          }
          for (this.isZero() && (h3 = "0" + h3);h3.length % a2 !== 0; )
            h3 = "0" + h3;
          return this.negative !== 0 && (h3 = "-" + h3), h3;
        }
        r2(false, "Base should be between 2 and 36");
      }, f2.prototype.toNumber = function() {
        var i = this.words[0];
        return this.length === 2 ? i += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? i += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && r2(false, "Number can only safely store up to 53 bits"), this.negative !== 0 ? -i : i;
      }, f2.prototype.toJSON = function() {
        return this.toString(16);
      }, f2.prototype.toBuffer = function(i, a2) {
        return r2(typeof p2 < "u"), this.toArrayLike(p2, i, a2);
      }, f2.prototype.toArray = function(i, a2) {
        return this.toArrayLike(Array, i, a2);
      }, f2.prototype.toArrayLike = function(i, a2, h3) {
        var s3 = this.byteLength(), u4 = h3 || Math.max(1, s3);
        r2(s3 <= u4, "byte array longer than desired length"), r2(u4 > 0, "Requested array length <= 0"), this.strip();
        var c2 = a2 === "le", b3 = new i(u4), l3, n32, d2 = this.clone();
        if (c2) {
          for (n32 = 0;!d2.isZero(); n32++)
            l3 = d2.andln(255), d2.iushrn(8), b3[n32] = l3;
          for (;n32 < u4; n32++)
            b3[n32] = 0;
        } else {
          for (n32 = 0;n32 < u4 - s3; n32++)
            b3[n32] = 0;
          for (n32 = 0;!d2.isZero(); n32++)
            l3 = d2.andln(255), d2.iushrn(8), b3[u4 - n32 - 1] = l3;
        }
        return b3;
      }, Math.clz32 ? f2.prototype._countBits = function(i) {
        return 32 - Math.clz32(i);
      } : f2.prototype._countBits = function(i) {
        var a2 = i, h3 = 0;
        return a2 >= 4096 && (h3 += 13, a2 >>>= 13), a2 >= 64 && (h3 += 7, a2 >>>= 7), a2 >= 8 && (h3 += 4, a2 >>>= 4), a2 >= 2 && (h3 += 2, a2 >>>= 2), h3 + a2;
      }, f2.prototype._zeroBits = function(i) {
        if (i === 0)
          return 26;
        var a2 = i, h3 = 0;
        return (a2 & 8191) === 0 && (h3 += 13, a2 >>>= 13), (a2 & 127) === 0 && (h3 += 7, a2 >>>= 7), (a2 & 15) === 0 && (h3 += 4, a2 >>>= 4), (a2 & 3) === 0 && (h3 += 2, a2 >>>= 2), (a2 & 1) === 0 && h3++, h3;
      }, f2.prototype.bitLength = function() {
        var i = this.words[this.length - 1], a2 = this._countBits(i);
        return (this.length - 1) * 26 + a2;
      };
      function B5(v32) {
        for (var i = new Array(v32.bitLength()), a2 = 0;a2 < i.length; a2++) {
          var h3 = a2 / 26 | 0, s3 = a2 % 26;
          i[a2] = (v32.words[h3] & 1 << s3) >>> s3;
        }
        return i;
      }
      f2.prototype.zeroBits = function() {
        if (this.isZero())
          return 0;
        for (var i = 0, a2 = 0;a2 < this.length; a2++) {
          var h3 = this._zeroBits(this.words[a2]);
          if (i += h3, h3 !== 26)
            break;
        }
        return i;
      }, f2.prototype.byteLength = function() {
        return Math.ceil(this.bitLength() / 8);
      }, f2.prototype.toTwos = function(i) {
        return this.negative !== 0 ? this.abs().inotn(i).iaddn(1) : this.clone();
      }, f2.prototype.fromTwos = function(i) {
        return this.testn(i - 1) ? this.notn(i).iaddn(1).ineg() : this.clone();
      }, f2.prototype.isNeg = function() {
        return this.negative !== 0;
      }, f2.prototype.neg = function() {
        return this.clone().ineg();
      }, f2.prototype.ineg = function() {
        return this.isZero() || (this.negative ^= 1), this;
      }, f2.prototype.iuor = function(i) {
        for (;this.length < i.length; )
          this.words[this.length++] = 0;
        for (var a2 = 0;a2 < i.length; a2++)
          this.words[a2] = this.words[a2] | i.words[a2];
        return this.strip();
      }, f2.prototype.ior = function(i) {
        return r2((this.negative | i.negative) === 0), this.iuor(i);
      }, f2.prototype.or = function(i) {
        return this.length > i.length ? this.clone().ior(i) : i.clone().ior(this);
      }, f2.prototype.uor = function(i) {
        return this.length > i.length ? this.clone().iuor(i) : i.clone().iuor(this);
      }, f2.prototype.iuand = function(i) {
        var a2;
        this.length > i.length ? a2 = i : a2 = this;
        for (var h3 = 0;h3 < a2.length; h3++)
          this.words[h3] = this.words[h3] & i.words[h3];
        return this.length = a2.length, this.strip();
      }, f2.prototype.iand = function(i) {
        return r2((this.negative | i.negative) === 0), this.iuand(i);
      }, f2.prototype.and = function(i) {
        return this.length > i.length ? this.clone().iand(i) : i.clone().iand(this);
      }, f2.prototype.uand = function(i) {
        return this.length > i.length ? this.clone().iuand(i) : i.clone().iuand(this);
      }, f2.prototype.iuxor = function(i) {
        var a2, h3;
        this.length > i.length ? (a2 = this, h3 = i) : (a2 = i, h3 = this);
        for (var s3 = 0;s3 < h3.length; s3++)
          this.words[s3] = a2.words[s3] ^ h3.words[s3];
        if (this !== a2)
          for (;s3 < a2.length; s3++)
            this.words[s3] = a2.words[s3];
        return this.length = a2.length, this.strip();
      }, f2.prototype.ixor = function(i) {
        return r2((this.negative | i.negative) === 0), this.iuxor(i);
      }, f2.prototype.xor = function(i) {
        return this.length > i.length ? this.clone().ixor(i) : i.clone().ixor(this);
      }, f2.prototype.uxor = function(i) {
        return this.length > i.length ? this.clone().iuxor(i) : i.clone().iuxor(this);
      }, f2.prototype.inotn = function(i) {
        r2(typeof i == "number" && i >= 0);
        var a2 = Math.ceil(i / 26) | 0, h3 = i % 26;
        this._expand(a2), h3 > 0 && a2--;
        for (var s3 = 0;s3 < a2; s3++)
          this.words[s3] = ~this.words[s3] & 67108863;
        return h3 > 0 && (this.words[s3] = ~this.words[s3] & 67108863 >> 26 - h3), this.strip();
      }, f2.prototype.notn = function(i) {
        return this.clone().inotn(i);
      }, f2.prototype.setn = function(i, a2) {
        r2(typeof i == "number" && i >= 0);
        var h3 = i / 26 | 0, s3 = i % 26;
        return this._expand(h3 + 1), a2 ? this.words[h3] = this.words[h3] | 1 << s3 : this.words[h3] = this.words[h3] & ~(1 << s3), this.strip();
      }, f2.prototype.iadd = function(i) {
        var a2;
        if (this.negative !== 0 && i.negative === 0)
          return this.negative = 0, a2 = this.isub(i), this.negative ^= 1, this._normSign();
        if (this.negative === 0 && i.negative !== 0)
          return i.negative = 0, a2 = this.isub(i), i.negative = 1, a2._normSign();
        var h3, s3;
        this.length > i.length ? (h3 = this, s3 = i) : (h3 = i, s3 = this);
        for (var u4 = 0, c2 = 0;c2 < s3.length; c2++)
          a2 = (h3.words[c2] | 0) + (s3.words[c2] | 0) + u4, this.words[c2] = a2 & 67108863, u4 = a2 >>> 26;
        for (;u4 !== 0 && c2 < h3.length; c2++)
          a2 = (h3.words[c2] | 0) + u4, this.words[c2] = a2 & 67108863, u4 = a2 >>> 26;
        if (this.length = h3.length, u4 !== 0)
          this.words[this.length] = u4, this.length++;
        else if (h3 !== this)
          for (;c2 < h3.length; c2++)
            this.words[c2] = h3.words[c2];
        return this;
      }, f2.prototype.add = function(i) {
        var a2;
        return i.negative !== 0 && this.negative === 0 ? (i.negative = 0, a2 = this.sub(i), i.negative ^= 1, a2) : i.negative === 0 && this.negative !== 0 ? (this.negative = 0, a2 = i.sub(this), this.negative = 1, a2) : this.length > i.length ? this.clone().iadd(i) : i.clone().iadd(this);
      }, f2.prototype.isub = function(i) {
        if (i.negative !== 0) {
          i.negative = 0;
          var a2 = this.iadd(i);
          return i.negative = 1, a2._normSign();
        } else if (this.negative !== 0)
          return this.negative = 0, this.iadd(i), this.negative = 1, this._normSign();
        var h3 = this.cmp(i);
        if (h3 === 0)
          return this.negative = 0, this.length = 1, this.words[0] = 0, this;
        var s3, u4;
        h3 > 0 ? (s3 = this, u4 = i) : (s3 = i, u4 = this);
        for (var c2 = 0, b3 = 0;b3 < u4.length; b3++)
          a2 = (s3.words[b3] | 0) - (u4.words[b3] | 0) + c2, c2 = a2 >> 26, this.words[b3] = a2 & 67108863;
        for (;c2 !== 0 && b3 < s3.length; b3++)
          a2 = (s3.words[b3] | 0) + c2, c2 = a2 >> 26, this.words[b3] = a2 & 67108863;
        if (c2 === 0 && b3 < s3.length && s3 !== this)
          for (;b3 < s3.length; b3++)
            this.words[b3] = s3.words[b3];
        return this.length = Math.max(this.length, b3), s3 !== this && (this.negative = 1), this.strip();
      }, f2.prototype.sub = function(i) {
        return this.clone().isub(i);
      };
      function q(v32, i, a2) {
        a2.negative = i.negative ^ v32.negative;
        var h3 = v32.length + i.length | 0;
        a2.length = h3, h3 = h3 - 1 | 0;
        var s3 = v32.words[0] | 0, u4 = i.words[0] | 0, c2 = s3 * u4, b3 = c2 & 67108863, l3 = c2 / 67108864 | 0;
        a2.words[0] = b3;
        for (var n32 = 1;n32 < h3; n32++) {
          for (var d2 = l3 >>> 26, w3 = l3 & 67108863, g2 = Math.min(n32, i.length - 1), _5 = Math.max(0, n32 - v32.length + 1);_5 <= g2; _5++) {
            var A6 = n32 - _5 | 0;
            s3 = v32.words[A6] | 0, u4 = i.words[_5] | 0, c2 = s3 * u4 + w3, d2 += c2 / 67108864 | 0, w3 = c2 & 67108863;
          }
          a2.words[n32] = w3 | 0, l3 = d2 | 0;
        }
        return l3 !== 0 ? a2.words[n32] = l3 | 0 : a2.length--, a2.strip();
      }
      var L2 = function(i, a2, h3) {
        var s3 = i.words, u4 = a2.words, c2 = h3.words, b3 = 0, l3, n32, d2, w3 = s3[0] | 0, g2 = w3 & 8191, _5 = w3 >>> 13, A6 = s3[1] | 0, R4 = A6 & 8191, I2 = A6 >>> 13, Me = s3[2] | 0, k32 = Me & 8191, D3 = Me >>> 13, nt = s3[3] | 0, C3 = nt & 8191, O4 = nt >>> 13, vt = s3[4] | 0, F = vt & 8191, U2 = vt >>> 13, bt = s3[5] | 0, z4 = bt & 8191, H4 = bt >>> 13, mt = s3[6] | 0, W3 = mt & 8191, K2 = mt >>> 13, gt = s3[7] | 0, j32 = gt & 8191, Z4 = gt >>> 13, yt = s3[8] | 0, V22 = yt & 8191, $3 = yt >>> 13, wt = s3[9] | 0, G5 = wt & 8191, Y2 = wt >>> 13, Mt = u4[0] | 0, X4 = Mt & 8191, J = Mt >>> 13, _t = u4[1] | 0, Q4 = _t & 8191, ee = _t >>> 13, xt = u4[2] | 0, te = xt & 8191, re = xt >>> 13, St = u4[3] | 0, ie = St & 8191, ne = St >>> 13, Et = u4[4] | 0, fe = Et & 8191, ae = Et >>> 13, At = u4[5] | 0, oe = At & 8191, se = At >>> 13, Rt = u4[6] | 0, he = Rt & 8191, ue = Rt >>> 13, Bt = u4[7] | 0, le = Bt & 8191, de = Bt >>> 13, qt = u4[8] | 0, ce = qt & 8191, pe = qt >>> 13, It = u4[9] | 0, ve = It & 8191, be = It >>> 13;
        h3.negative = i.negative ^ a2.negative, h3.length = 19, l3 = Math.imul(g2, X4), n32 = Math.imul(g2, J), n32 = n32 + Math.imul(_5, X4) | 0, d2 = Math.imul(_5, J);
        var ft = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (ft >>> 26) | 0, ft &= 67108863, l3 = Math.imul(R4, X4), n32 = Math.imul(R4, J), n32 = n32 + Math.imul(I2, X4) | 0, d2 = Math.imul(I2, J), l3 = l3 + Math.imul(g2, Q4) | 0, n32 = n32 + Math.imul(g2, ee) | 0, n32 = n32 + Math.imul(_5, Q4) | 0, d2 = d2 + Math.imul(_5, ee) | 0;
        var Be = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Be >>> 26) | 0, Be &= 67108863, l3 = Math.imul(k32, X4), n32 = Math.imul(k32, J), n32 = n32 + Math.imul(D3, X4) | 0, d2 = Math.imul(D3, J), l3 = l3 + Math.imul(R4, Q4) | 0, n32 = n32 + Math.imul(R4, ee) | 0, n32 = n32 + Math.imul(I2, Q4) | 0, d2 = d2 + Math.imul(I2, ee) | 0, l3 = l3 + Math.imul(g2, te) | 0, n32 = n32 + Math.imul(g2, re) | 0, n32 = n32 + Math.imul(_5, te) | 0, d2 = d2 + Math.imul(_5, re) | 0;
        var qe = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (qe >>> 26) | 0, qe &= 67108863, l3 = Math.imul(C3, X4), n32 = Math.imul(C3, J), n32 = n32 + Math.imul(O4, X4) | 0, d2 = Math.imul(O4, J), l3 = l3 + Math.imul(k32, Q4) | 0, n32 = n32 + Math.imul(k32, ee) | 0, n32 = n32 + Math.imul(D3, Q4) | 0, d2 = d2 + Math.imul(D3, ee) | 0, l3 = l3 + Math.imul(R4, te) | 0, n32 = n32 + Math.imul(R4, re) | 0, n32 = n32 + Math.imul(I2, te) | 0, d2 = d2 + Math.imul(I2, re) | 0, l3 = l3 + Math.imul(g2, ie) | 0, n32 = n32 + Math.imul(g2, ne) | 0, n32 = n32 + Math.imul(_5, ie) | 0, d2 = d2 + Math.imul(_5, ne) | 0;
        var ze = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (ze >>> 26) | 0, ze &= 67108863, l3 = Math.imul(F, X4), n32 = Math.imul(F, J), n32 = n32 + Math.imul(U2, X4) | 0, d2 = Math.imul(U2, J), l3 = l3 + Math.imul(C3, Q4) | 0, n32 = n32 + Math.imul(C3, ee) | 0, n32 = n32 + Math.imul(O4, Q4) | 0, d2 = d2 + Math.imul(O4, ee) | 0, l3 = l3 + Math.imul(k32, te) | 0, n32 = n32 + Math.imul(k32, re) | 0, n32 = n32 + Math.imul(D3, te) | 0, d2 = d2 + Math.imul(D3, re) | 0, l3 = l3 + Math.imul(R4, ie) | 0, n32 = n32 + Math.imul(R4, ne) | 0, n32 = n32 + Math.imul(I2, ie) | 0, d2 = d2 + Math.imul(I2, ne) | 0, l3 = l3 + Math.imul(g2, fe) | 0, n32 = n32 + Math.imul(g2, ae) | 0, n32 = n32 + Math.imul(_5, fe) | 0, d2 = d2 + Math.imul(_5, ae) | 0;
        var He = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (He >>> 26) | 0, He &= 67108863, l3 = Math.imul(z4, X4), n32 = Math.imul(z4, J), n32 = n32 + Math.imul(H4, X4) | 0, d2 = Math.imul(H4, J), l3 = l3 + Math.imul(F, Q4) | 0, n32 = n32 + Math.imul(F, ee) | 0, n32 = n32 + Math.imul(U2, Q4) | 0, d2 = d2 + Math.imul(U2, ee) | 0, l3 = l3 + Math.imul(C3, te) | 0, n32 = n32 + Math.imul(C3, re) | 0, n32 = n32 + Math.imul(O4, te) | 0, d2 = d2 + Math.imul(O4, re) | 0, l3 = l3 + Math.imul(k32, ie) | 0, n32 = n32 + Math.imul(k32, ne) | 0, n32 = n32 + Math.imul(D3, ie) | 0, d2 = d2 + Math.imul(D3, ne) | 0, l3 = l3 + Math.imul(R4, fe) | 0, n32 = n32 + Math.imul(R4, ae) | 0, n32 = n32 + Math.imul(I2, fe) | 0, d2 = d2 + Math.imul(I2, ae) | 0, l3 = l3 + Math.imul(g2, oe) | 0, n32 = n32 + Math.imul(g2, se) | 0, n32 = n32 + Math.imul(_5, oe) | 0, d2 = d2 + Math.imul(_5, se) | 0;
        var We = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (We >>> 26) | 0, We &= 67108863, l3 = Math.imul(W3, X4), n32 = Math.imul(W3, J), n32 = n32 + Math.imul(K2, X4) | 0, d2 = Math.imul(K2, J), l3 = l3 + Math.imul(z4, Q4) | 0, n32 = n32 + Math.imul(z4, ee) | 0, n32 = n32 + Math.imul(H4, Q4) | 0, d2 = d2 + Math.imul(H4, ee) | 0, l3 = l3 + Math.imul(F, te) | 0, n32 = n32 + Math.imul(F, re) | 0, n32 = n32 + Math.imul(U2, te) | 0, d2 = d2 + Math.imul(U2, re) | 0, l3 = l3 + Math.imul(C3, ie) | 0, n32 = n32 + Math.imul(C3, ne) | 0, n32 = n32 + Math.imul(O4, ie) | 0, d2 = d2 + Math.imul(O4, ne) | 0, l3 = l3 + Math.imul(k32, fe) | 0, n32 = n32 + Math.imul(k32, ae) | 0, n32 = n32 + Math.imul(D3, fe) | 0, d2 = d2 + Math.imul(D3, ae) | 0, l3 = l3 + Math.imul(R4, oe) | 0, n32 = n32 + Math.imul(R4, se) | 0, n32 = n32 + Math.imul(I2, oe) | 0, d2 = d2 + Math.imul(I2, se) | 0, l3 = l3 + Math.imul(g2, he) | 0, n32 = n32 + Math.imul(g2, ue) | 0, n32 = n32 + Math.imul(_5, he) | 0, d2 = d2 + Math.imul(_5, ue) | 0;
        var Ke = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Ke >>> 26) | 0, Ke &= 67108863, l3 = Math.imul(j32, X4), n32 = Math.imul(j32, J), n32 = n32 + Math.imul(Z4, X4) | 0, d2 = Math.imul(Z4, J), l3 = l3 + Math.imul(W3, Q4) | 0, n32 = n32 + Math.imul(W3, ee) | 0, n32 = n32 + Math.imul(K2, Q4) | 0, d2 = d2 + Math.imul(K2, ee) | 0, l3 = l3 + Math.imul(z4, te) | 0, n32 = n32 + Math.imul(z4, re) | 0, n32 = n32 + Math.imul(H4, te) | 0, d2 = d2 + Math.imul(H4, re) | 0, l3 = l3 + Math.imul(F, ie) | 0, n32 = n32 + Math.imul(F, ne) | 0, n32 = n32 + Math.imul(U2, ie) | 0, d2 = d2 + Math.imul(U2, ne) | 0, l3 = l3 + Math.imul(C3, fe) | 0, n32 = n32 + Math.imul(C3, ae) | 0, n32 = n32 + Math.imul(O4, fe) | 0, d2 = d2 + Math.imul(O4, ae) | 0, l3 = l3 + Math.imul(k32, oe) | 0, n32 = n32 + Math.imul(k32, se) | 0, n32 = n32 + Math.imul(D3, oe) | 0, d2 = d2 + Math.imul(D3, se) | 0, l3 = l3 + Math.imul(R4, he) | 0, n32 = n32 + Math.imul(R4, ue) | 0, n32 = n32 + Math.imul(I2, he) | 0, d2 = d2 + Math.imul(I2, ue) | 0, l3 = l3 + Math.imul(g2, le) | 0, n32 = n32 + Math.imul(g2, de) | 0, n32 = n32 + Math.imul(_5, le) | 0, d2 = d2 + Math.imul(_5, de) | 0;
        var je = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (je >>> 26) | 0, je &= 67108863, l3 = Math.imul(V22, X4), n32 = Math.imul(V22, J), n32 = n32 + Math.imul($3, X4) | 0, d2 = Math.imul($3, J), l3 = l3 + Math.imul(j32, Q4) | 0, n32 = n32 + Math.imul(j32, ee) | 0, n32 = n32 + Math.imul(Z4, Q4) | 0, d2 = d2 + Math.imul(Z4, ee) | 0, l3 = l3 + Math.imul(W3, te) | 0, n32 = n32 + Math.imul(W3, re) | 0, n32 = n32 + Math.imul(K2, te) | 0, d2 = d2 + Math.imul(K2, re) | 0, l3 = l3 + Math.imul(z4, ie) | 0, n32 = n32 + Math.imul(z4, ne) | 0, n32 = n32 + Math.imul(H4, ie) | 0, d2 = d2 + Math.imul(H4, ne) | 0, l3 = l3 + Math.imul(F, fe) | 0, n32 = n32 + Math.imul(F, ae) | 0, n32 = n32 + Math.imul(U2, fe) | 0, d2 = d2 + Math.imul(U2, ae) | 0, l3 = l3 + Math.imul(C3, oe) | 0, n32 = n32 + Math.imul(C3, se) | 0, n32 = n32 + Math.imul(O4, oe) | 0, d2 = d2 + Math.imul(O4, se) | 0, l3 = l3 + Math.imul(k32, he) | 0, n32 = n32 + Math.imul(k32, ue) | 0, n32 = n32 + Math.imul(D3, he) | 0, d2 = d2 + Math.imul(D3, ue) | 0, l3 = l3 + Math.imul(R4, le) | 0, n32 = n32 + Math.imul(R4, de) | 0, n32 = n32 + Math.imul(I2, le) | 0, d2 = d2 + Math.imul(I2, de) | 0, l3 = l3 + Math.imul(g2, ce) | 0, n32 = n32 + Math.imul(g2, pe) | 0, n32 = n32 + Math.imul(_5, ce) | 0, d2 = d2 + Math.imul(_5, pe) | 0;
        var Ze = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Ze >>> 26) | 0, Ze &= 67108863, l3 = Math.imul(G5, X4), n32 = Math.imul(G5, J), n32 = n32 + Math.imul(Y2, X4) | 0, d2 = Math.imul(Y2, J), l3 = l3 + Math.imul(V22, Q4) | 0, n32 = n32 + Math.imul(V22, ee) | 0, n32 = n32 + Math.imul($3, Q4) | 0, d2 = d2 + Math.imul($3, ee) | 0, l3 = l3 + Math.imul(j32, te) | 0, n32 = n32 + Math.imul(j32, re) | 0, n32 = n32 + Math.imul(Z4, te) | 0, d2 = d2 + Math.imul(Z4, re) | 0, l3 = l3 + Math.imul(W3, ie) | 0, n32 = n32 + Math.imul(W3, ne) | 0, n32 = n32 + Math.imul(K2, ie) | 0, d2 = d2 + Math.imul(K2, ne) | 0, l3 = l3 + Math.imul(z4, fe) | 0, n32 = n32 + Math.imul(z4, ae) | 0, n32 = n32 + Math.imul(H4, fe) | 0, d2 = d2 + Math.imul(H4, ae) | 0, l3 = l3 + Math.imul(F, oe) | 0, n32 = n32 + Math.imul(F, se) | 0, n32 = n32 + Math.imul(U2, oe) | 0, d2 = d2 + Math.imul(U2, se) | 0, l3 = l3 + Math.imul(C3, he) | 0, n32 = n32 + Math.imul(C3, ue) | 0, n32 = n32 + Math.imul(O4, he) | 0, d2 = d2 + Math.imul(O4, ue) | 0, l3 = l3 + Math.imul(k32, le) | 0, n32 = n32 + Math.imul(k32, de) | 0, n32 = n32 + Math.imul(D3, le) | 0, d2 = d2 + Math.imul(D3, de) | 0, l3 = l3 + Math.imul(R4, ce) | 0, n32 = n32 + Math.imul(R4, pe) | 0, n32 = n32 + Math.imul(I2, ce) | 0, d2 = d2 + Math.imul(I2, pe) | 0, l3 = l3 + Math.imul(g2, ve) | 0, n32 = n32 + Math.imul(g2, be) | 0, n32 = n32 + Math.imul(_5, ve) | 0, d2 = d2 + Math.imul(_5, be) | 0;
        var Ve = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Ve >>> 26) | 0, Ve &= 67108863, l3 = Math.imul(G5, Q4), n32 = Math.imul(G5, ee), n32 = n32 + Math.imul(Y2, Q4) | 0, d2 = Math.imul(Y2, ee), l3 = l3 + Math.imul(V22, te) | 0, n32 = n32 + Math.imul(V22, re) | 0, n32 = n32 + Math.imul($3, te) | 0, d2 = d2 + Math.imul($3, re) | 0, l3 = l3 + Math.imul(j32, ie) | 0, n32 = n32 + Math.imul(j32, ne) | 0, n32 = n32 + Math.imul(Z4, ie) | 0, d2 = d2 + Math.imul(Z4, ne) | 0, l3 = l3 + Math.imul(W3, fe) | 0, n32 = n32 + Math.imul(W3, ae) | 0, n32 = n32 + Math.imul(K2, fe) | 0, d2 = d2 + Math.imul(K2, ae) | 0, l3 = l3 + Math.imul(z4, oe) | 0, n32 = n32 + Math.imul(z4, se) | 0, n32 = n32 + Math.imul(H4, oe) | 0, d2 = d2 + Math.imul(H4, se) | 0, l3 = l3 + Math.imul(F, he) | 0, n32 = n32 + Math.imul(F, ue) | 0, n32 = n32 + Math.imul(U2, he) | 0, d2 = d2 + Math.imul(U2, ue) | 0, l3 = l3 + Math.imul(C3, le) | 0, n32 = n32 + Math.imul(C3, de) | 0, n32 = n32 + Math.imul(O4, le) | 0, d2 = d2 + Math.imul(O4, de) | 0, l3 = l3 + Math.imul(k32, ce) | 0, n32 = n32 + Math.imul(k32, pe) | 0, n32 = n32 + Math.imul(D3, ce) | 0, d2 = d2 + Math.imul(D3, pe) | 0, l3 = l3 + Math.imul(R4, ve) | 0, n32 = n32 + Math.imul(R4, be) | 0, n32 = n32 + Math.imul(I2, ve) | 0, d2 = d2 + Math.imul(I2, be) | 0;
        var $e = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + ($e >>> 26) | 0, $e &= 67108863, l3 = Math.imul(G5, te), n32 = Math.imul(G5, re), n32 = n32 + Math.imul(Y2, te) | 0, d2 = Math.imul(Y2, re), l3 = l3 + Math.imul(V22, ie) | 0, n32 = n32 + Math.imul(V22, ne) | 0, n32 = n32 + Math.imul($3, ie) | 0, d2 = d2 + Math.imul($3, ne) | 0, l3 = l3 + Math.imul(j32, fe) | 0, n32 = n32 + Math.imul(j32, ae) | 0, n32 = n32 + Math.imul(Z4, fe) | 0, d2 = d2 + Math.imul(Z4, ae) | 0, l3 = l3 + Math.imul(W3, oe) | 0, n32 = n32 + Math.imul(W3, se) | 0, n32 = n32 + Math.imul(K2, oe) | 0, d2 = d2 + Math.imul(K2, se) | 0, l3 = l3 + Math.imul(z4, he) | 0, n32 = n32 + Math.imul(z4, ue) | 0, n32 = n32 + Math.imul(H4, he) | 0, d2 = d2 + Math.imul(H4, ue) | 0, l3 = l3 + Math.imul(F, le) | 0, n32 = n32 + Math.imul(F, de) | 0, n32 = n32 + Math.imul(U2, le) | 0, d2 = d2 + Math.imul(U2, de) | 0, l3 = l3 + Math.imul(C3, ce) | 0, n32 = n32 + Math.imul(C3, pe) | 0, n32 = n32 + Math.imul(O4, ce) | 0, d2 = d2 + Math.imul(O4, pe) | 0, l3 = l3 + Math.imul(k32, ve) | 0, n32 = n32 + Math.imul(k32, be) | 0, n32 = n32 + Math.imul(D3, ve) | 0, d2 = d2 + Math.imul(D3, be) | 0;
        var Ge = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Ge >>> 26) | 0, Ge &= 67108863, l3 = Math.imul(G5, ie), n32 = Math.imul(G5, ne), n32 = n32 + Math.imul(Y2, ie) | 0, d2 = Math.imul(Y2, ne), l3 = l3 + Math.imul(V22, fe) | 0, n32 = n32 + Math.imul(V22, ae) | 0, n32 = n32 + Math.imul($3, fe) | 0, d2 = d2 + Math.imul($3, ae) | 0, l3 = l3 + Math.imul(j32, oe) | 0, n32 = n32 + Math.imul(j32, se) | 0, n32 = n32 + Math.imul(Z4, oe) | 0, d2 = d2 + Math.imul(Z4, se) | 0, l3 = l3 + Math.imul(W3, he) | 0, n32 = n32 + Math.imul(W3, ue) | 0, n32 = n32 + Math.imul(K2, he) | 0, d2 = d2 + Math.imul(K2, ue) | 0, l3 = l3 + Math.imul(z4, le) | 0, n32 = n32 + Math.imul(z4, de) | 0, n32 = n32 + Math.imul(H4, le) | 0, d2 = d2 + Math.imul(H4, de) | 0, l3 = l3 + Math.imul(F, ce) | 0, n32 = n32 + Math.imul(F, pe) | 0, n32 = n32 + Math.imul(U2, ce) | 0, d2 = d2 + Math.imul(U2, pe) | 0, l3 = l3 + Math.imul(C3, ve) | 0, n32 = n32 + Math.imul(C3, be) | 0, n32 = n32 + Math.imul(O4, ve) | 0, d2 = d2 + Math.imul(O4, be) | 0;
        var Ye = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Ye >>> 26) | 0, Ye &= 67108863, l3 = Math.imul(G5, fe), n32 = Math.imul(G5, ae), n32 = n32 + Math.imul(Y2, fe) | 0, d2 = Math.imul(Y2, ae), l3 = l3 + Math.imul(V22, oe) | 0, n32 = n32 + Math.imul(V22, se) | 0, n32 = n32 + Math.imul($3, oe) | 0, d2 = d2 + Math.imul($3, se) | 0, l3 = l3 + Math.imul(j32, he) | 0, n32 = n32 + Math.imul(j32, ue) | 0, n32 = n32 + Math.imul(Z4, he) | 0, d2 = d2 + Math.imul(Z4, ue) | 0, l3 = l3 + Math.imul(W3, le) | 0, n32 = n32 + Math.imul(W3, de) | 0, n32 = n32 + Math.imul(K2, le) | 0, d2 = d2 + Math.imul(K2, de) | 0, l3 = l3 + Math.imul(z4, ce) | 0, n32 = n32 + Math.imul(z4, pe) | 0, n32 = n32 + Math.imul(H4, ce) | 0, d2 = d2 + Math.imul(H4, pe) | 0, l3 = l3 + Math.imul(F, ve) | 0, n32 = n32 + Math.imul(F, be) | 0, n32 = n32 + Math.imul(U2, ve) | 0, d2 = d2 + Math.imul(U2, be) | 0;
        var Xe = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Xe >>> 26) | 0, Xe &= 67108863, l3 = Math.imul(G5, oe), n32 = Math.imul(G5, se), n32 = n32 + Math.imul(Y2, oe) | 0, d2 = Math.imul(Y2, se), l3 = l3 + Math.imul(V22, he) | 0, n32 = n32 + Math.imul(V22, ue) | 0, n32 = n32 + Math.imul($3, he) | 0, d2 = d2 + Math.imul($3, ue) | 0, l3 = l3 + Math.imul(j32, le) | 0, n32 = n32 + Math.imul(j32, de) | 0, n32 = n32 + Math.imul(Z4, le) | 0, d2 = d2 + Math.imul(Z4, de) | 0, l3 = l3 + Math.imul(W3, ce) | 0, n32 = n32 + Math.imul(W3, pe) | 0, n32 = n32 + Math.imul(K2, ce) | 0, d2 = d2 + Math.imul(K2, pe) | 0, l3 = l3 + Math.imul(z4, ve) | 0, n32 = n32 + Math.imul(z4, be) | 0, n32 = n32 + Math.imul(H4, ve) | 0, d2 = d2 + Math.imul(H4, be) | 0;
        var Je = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Je >>> 26) | 0, Je &= 67108863, l3 = Math.imul(G5, he), n32 = Math.imul(G5, ue), n32 = n32 + Math.imul(Y2, he) | 0, d2 = Math.imul(Y2, ue), l3 = l3 + Math.imul(V22, le) | 0, n32 = n32 + Math.imul(V22, de) | 0, n32 = n32 + Math.imul($3, le) | 0, d2 = d2 + Math.imul($3, de) | 0, l3 = l3 + Math.imul(j32, ce) | 0, n32 = n32 + Math.imul(j32, pe) | 0, n32 = n32 + Math.imul(Z4, ce) | 0, d2 = d2 + Math.imul(Z4, pe) | 0, l3 = l3 + Math.imul(W3, ve) | 0, n32 = n32 + Math.imul(W3, be) | 0, n32 = n32 + Math.imul(K2, ve) | 0, d2 = d2 + Math.imul(K2, be) | 0;
        var Qe = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Qe >>> 26) | 0, Qe &= 67108863, l3 = Math.imul(G5, le), n32 = Math.imul(G5, de), n32 = n32 + Math.imul(Y2, le) | 0, d2 = Math.imul(Y2, de), l3 = l3 + Math.imul(V22, ce) | 0, n32 = n32 + Math.imul(V22, pe) | 0, n32 = n32 + Math.imul($3, ce) | 0, d2 = d2 + Math.imul($3, pe) | 0, l3 = l3 + Math.imul(j32, ve) | 0, n32 = n32 + Math.imul(j32, be) | 0, n32 = n32 + Math.imul(Z4, ve) | 0, d2 = d2 + Math.imul(Z4, be) | 0;
        var et = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (et >>> 26) | 0, et &= 67108863, l3 = Math.imul(G5, ce), n32 = Math.imul(G5, pe), n32 = n32 + Math.imul(Y2, ce) | 0, d2 = Math.imul(Y2, pe), l3 = l3 + Math.imul(V22, ve) | 0, n32 = n32 + Math.imul(V22, be) | 0, n32 = n32 + Math.imul($3, ve) | 0, d2 = d2 + Math.imul($3, be) | 0;
        var tt = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (tt >>> 26) | 0, tt &= 67108863, l3 = Math.imul(G5, ve), n32 = Math.imul(G5, be), n32 = n32 + Math.imul(Y2, ve) | 0, d2 = Math.imul(Y2, be);
        var rt = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        return b3 = (d2 + (n32 >>> 13) | 0) + (rt >>> 26) | 0, rt &= 67108863, c2[0] = ft, c2[1] = Be, c2[2] = qe, c2[3] = ze, c2[4] = He, c2[5] = We, c2[6] = Ke, c2[7] = je, c2[8] = Ze, c2[9] = Ve, c2[10] = $e, c2[11] = Ge, c2[12] = Ye, c2[13] = Xe, c2[14] = Je, c2[15] = Qe, c2[16] = et, c2[17] = tt, c2[18] = rt, b3 !== 0 && (c2[19] = b3, h3.length++), h3;
      };
      Math.imul || (L2 = q);
      function ge(v32, i, a2) {
        a2.negative = i.negative ^ v32.negative, a2.length = v32.length + i.length;
        for (var h3 = 0, s3 = 0, u4 = 0;u4 < a2.length - 1; u4++) {
          var c2 = s3;
          s3 = 0;
          for (var b3 = h3 & 67108863, l3 = Math.min(u4, i.length - 1), n32 = Math.max(0, u4 - v32.length + 1);n32 <= l3; n32++) {
            var d2 = u4 - n32, w3 = v32.words[d2] | 0, g2 = i.words[n32] | 0, _5 = w3 * g2, A6 = _5 & 67108863;
            c2 = c2 + (_5 / 67108864 | 0) | 0, A6 = A6 + b3 | 0, b3 = A6 & 67108863, c2 = c2 + (A6 >>> 26) | 0, s3 += c2 >>> 26, c2 &= 67108863;
          }
          a2.words[u4] = b3, h3 = c2, c2 = s3;
        }
        return h3 !== 0 ? a2.words[u4] = h3 : a2.length--, a2.strip();
      }
      function _e(v32, i, a2) {
        var h3 = new N4;
        return h3.mulp(v32, i, a2);
      }
      f2.prototype.mulTo = function(i, a2) {
        var h3, s3 = this.length + i.length;
        return this.length === 10 && i.length === 10 ? h3 = L2(this, i, a2) : s3 < 63 ? h3 = q(this, i, a2) : s3 < 1024 ? h3 = ge(this, i, a2) : h3 = _e(this, i, a2), h3;
      };
      function N4(v32, i) {
        this.x = v32, this.y = i;
      }
      N4.prototype.makeRBT = function(i) {
        for (var a2 = new Array(i), h3 = f2.prototype._countBits(i) - 1, s3 = 0;s3 < i; s3++)
          a2[s3] = this.revBin(s3, h3, i);
        return a2;
      }, N4.prototype.revBin = function(i, a2, h3) {
        if (i === 0 || i === h3 - 1)
          return i;
        for (var s3 = 0, u4 = 0;u4 < a2; u4++)
          s3 |= (i & 1) << a2 - u4 - 1, i >>= 1;
        return s3;
      }, N4.prototype.permute = function(i, a2, h3, s3, u4, c2) {
        for (var b3 = 0;b3 < c2; b3++)
          s3[b3] = a2[i[b3]], u4[b3] = h3[i[b3]];
      }, N4.prototype.transform = function(i, a2, h3, s3, u4, c2) {
        this.permute(c2, i, a2, h3, s3, u4);
        for (var b3 = 1;b3 < u4; b3 <<= 1)
          for (var l3 = b3 << 1, n32 = Math.cos(2 * Math.PI / l3), d2 = Math.sin(2 * Math.PI / l3), w3 = 0;w3 < u4; w3 += l3)
            for (var g2 = n32, _5 = d2, A6 = 0;A6 < b3; A6++) {
              var R4 = h3[w3 + A6], I2 = s3[w3 + A6], Me = h3[w3 + A6 + b3], k32 = s3[w3 + A6 + b3], D3 = g2 * Me - _5 * k32;
              k32 = g2 * k32 + _5 * Me, Me = D3, h3[w3 + A6] = R4 + Me, s3[w3 + A6] = I2 + k32, h3[w3 + A6 + b3] = R4 - Me, s3[w3 + A6 + b3] = I2 - k32, A6 !== l3 && (D3 = n32 * g2 - d2 * _5, _5 = n32 * _5 + d2 * g2, g2 = D3);
            }
      }, N4.prototype.guessLen13b = function(i, a2) {
        var h3 = Math.max(a2, i) | 1, s3 = h3 & 1, u4 = 0;
        for (h3 = h3 / 2 | 0;h3; h3 = h3 >>> 1)
          u4++;
        return 1 << u4 + 1 + s3;
      }, N4.prototype.conjugate = function(i, a2, h3) {
        if (!(h3 <= 1))
          for (var s3 = 0;s3 < h3 / 2; s3++) {
            var u4 = i[s3];
            i[s3] = i[h3 - s3 - 1], i[h3 - s3 - 1] = u4, u4 = a2[s3], a2[s3] = -a2[h3 - s3 - 1], a2[h3 - s3 - 1] = -u4;
          }
      }, N4.prototype.normalize13b = function(i, a2) {
        for (var h3 = 0, s3 = 0;s3 < a2 / 2; s3++) {
          var u4 = Math.round(i[2 * s3 + 1] / a2) * 8192 + Math.round(i[2 * s3] / a2) + h3;
          i[s3] = u4 & 67108863, u4 < 67108864 ? h3 = 0 : h3 = u4 / 67108864 | 0;
        }
        return i;
      }, N4.prototype.convert13b = function(i, a2, h3, s3) {
        for (var u4 = 0, c2 = 0;c2 < a2; c2++)
          u4 = u4 + (i[c2] | 0), h3[2 * c2] = u4 & 8191, u4 = u4 >>> 13, h3[2 * c2 + 1] = u4 & 8191, u4 = u4 >>> 13;
        for (c2 = 2 * a2;c2 < s3; ++c2)
          h3[c2] = 0;
        r2(u4 === 0), r2((u4 & -8192) === 0);
      }, N4.prototype.stub = function(i) {
        for (var a2 = new Array(i), h3 = 0;h3 < i; h3++)
          a2[h3] = 0;
        return a2;
      }, N4.prototype.mulp = function(i, a2, h3) {
        var s3 = 2 * this.guessLen13b(i.length, a2.length), u4 = this.makeRBT(s3), c2 = this.stub(s3), b3 = new Array(s3), l3 = new Array(s3), n32 = new Array(s3), d2 = new Array(s3), w3 = new Array(s3), g2 = new Array(s3), _5 = h3.words;
        _5.length = s3, this.convert13b(i.words, i.length, b3, s3), this.convert13b(a2.words, a2.length, d2, s3), this.transform(b3, c2, l3, n32, s3, u4), this.transform(d2, c2, w3, g2, s3, u4);
        for (var A6 = 0;A6 < s3; A6++) {
          var R4 = l3[A6] * w3[A6] - n32[A6] * g2[A6];
          n32[A6] = l3[A6] * g2[A6] + n32[A6] * w3[A6], l3[A6] = R4;
        }
        return this.conjugate(l3, n32, s3), this.transform(l3, n32, _5, c2, s3, u4), this.conjugate(_5, c2, s3), this.normalize13b(_5, s3), h3.negative = i.negative ^ a2.negative, h3.length = i.length + a2.length, h3.strip();
      }, f2.prototype.mul = function(i) {
        var a2 = new f2(null);
        return a2.words = new Array(this.length + i.length), this.mulTo(i, a2);
      }, f2.prototype.mulf = function(i) {
        var a2 = new f2(null);
        return a2.words = new Array(this.length + i.length), _e(this, i, a2);
      }, f2.prototype.imul = function(i) {
        return this.clone().mulTo(i, this);
      }, f2.prototype.imuln = function(i) {
        r2(typeof i == "number"), r2(i < 67108864);
        for (var a2 = 0, h3 = 0;h3 < this.length; h3++) {
          var s3 = (this.words[h3] | 0) * i, u4 = (s3 & 67108863) + (a2 & 67108863);
          a2 >>= 26, a2 += s3 / 67108864 | 0, a2 += u4 >>> 26, this.words[h3] = u4 & 67108863;
        }
        return a2 !== 0 && (this.words[h3] = a2, this.length++), this;
      }, f2.prototype.muln = function(i) {
        return this.clone().imuln(i);
      }, f2.prototype.sqr = function() {
        return this.mul(this);
      }, f2.prototype.isqr = function() {
        return this.imul(this.clone());
      }, f2.prototype.pow = function(i) {
        var a2 = B5(i);
        if (a2.length === 0)
          return new f2(1);
        for (var h3 = this, s3 = 0;s3 < a2.length && a2[s3] === 0; s3++, h3 = h3.sqr())
          ;
        if (++s3 < a2.length)
          for (var u4 = h3.sqr();s3 < a2.length; s3++, u4 = u4.sqr())
            a2[s3] !== 0 && (h3 = h3.mul(u4));
        return h3;
      }, f2.prototype.iushln = function(i) {
        r2(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26, s3 = 67108863 >>> 26 - a2 << 26 - a2, u4;
        if (a2 !== 0) {
          var c2 = 0;
          for (u4 = 0;u4 < this.length; u4++) {
            var b3 = this.words[u4] & s3, l3 = (this.words[u4] | 0) - b3 << a2;
            this.words[u4] = l3 | c2, c2 = b3 >>> 26 - a2;
          }
          c2 && (this.words[u4] = c2, this.length++);
        }
        if (h3 !== 0) {
          for (u4 = this.length - 1;u4 >= 0; u4--)
            this.words[u4 + h3] = this.words[u4];
          for (u4 = 0;u4 < h3; u4++)
            this.words[u4] = 0;
          this.length += h3;
        }
        return this.strip();
      }, f2.prototype.ishln = function(i) {
        return r2(this.negative === 0), this.iushln(i);
      }, f2.prototype.iushrn = function(i, a2, h3) {
        r2(typeof i == "number" && i >= 0);
        var s3;
        a2 ? s3 = (a2 - a2 % 26) / 26 : s3 = 0;
        var u4 = i % 26, c2 = Math.min((i - u4) / 26, this.length), b3 = 67108863 ^ 67108863 >>> u4 << u4, l3 = h3;
        if (s3 -= c2, s3 = Math.max(0, s3), l3) {
          for (var n32 = 0;n32 < c2; n32++)
            l3.words[n32] = this.words[n32];
          l3.length = c2;
        }
        if (c2 !== 0)
          if (this.length > c2)
            for (this.length -= c2, n32 = 0;n32 < this.length; n32++)
              this.words[n32] = this.words[n32 + c2];
          else
            this.words[0] = 0, this.length = 1;
        var d2 = 0;
        for (n32 = this.length - 1;n32 >= 0 && (d2 !== 0 || n32 >= s3); n32--) {
          var w3 = this.words[n32] | 0;
          this.words[n32] = d2 << 26 - u4 | w3 >>> u4, d2 = w3 & b3;
        }
        return l3 && d2 !== 0 && (l3.words[l3.length++] = d2), this.length === 0 && (this.words[0] = 0, this.length = 1), this.strip();
      }, f2.prototype.ishrn = function(i, a2, h3) {
        return r2(this.negative === 0), this.iushrn(i, a2, h3);
      }, f2.prototype.shln = function(i) {
        return this.clone().ishln(i);
      }, f2.prototype.ushln = function(i) {
        return this.clone().iushln(i);
      }, f2.prototype.shrn = function(i) {
        return this.clone().ishrn(i);
      }, f2.prototype.ushrn = function(i) {
        return this.clone().iushrn(i);
      }, f2.prototype.testn = function(i) {
        r2(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26, s3 = 1 << a2;
        if (this.length <= h3)
          return false;
        var u4 = this.words[h3];
        return !!(u4 & s3);
      }, f2.prototype.imaskn = function(i) {
        r2(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26;
        if (r2(this.negative === 0, "imaskn works only with positive numbers"), this.length <= h3)
          return this;
        if (a2 !== 0 && h3++, this.length = Math.min(h3, this.length), a2 !== 0) {
          var s3 = 67108863 ^ 67108863 >>> a2 << a2;
          this.words[this.length - 1] &= s3;
        }
        return this.strip();
      }, f2.prototype.maskn = function(i) {
        return this.clone().imaskn(i);
      }, f2.prototype.iaddn = function(i) {
        return r2(typeof i == "number"), r2(i < 67108864), i < 0 ? this.isubn(-i) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) < i ? (this.words[0] = i - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(i), this.negative = 1, this) : this._iaddn(i);
      }, f2.prototype._iaddn = function(i) {
        this.words[0] += i;
        for (var a2 = 0;a2 < this.length && this.words[a2] >= 67108864; a2++)
          this.words[a2] -= 67108864, a2 === this.length - 1 ? this.words[a2 + 1] = 1 : this.words[a2 + 1]++;
        return this.length = Math.max(this.length, a2 + 1), this;
      }, f2.prototype.isubn = function(i) {
        if (r2(typeof i == "number"), r2(i < 67108864), i < 0)
          return this.iaddn(-i);
        if (this.negative !== 0)
          return this.negative = 0, this.iaddn(i), this.negative = 1, this;
        if (this.words[0] -= i, this.length === 1 && this.words[0] < 0)
          this.words[0] = -this.words[0], this.negative = 1;
        else
          for (var a2 = 0;a2 < this.length && this.words[a2] < 0; a2++)
            this.words[a2] += 67108864, this.words[a2 + 1] -= 1;
        return this.strip();
      }, f2.prototype.addn = function(i) {
        return this.clone().iaddn(i);
      }, f2.prototype.subn = function(i) {
        return this.clone().isubn(i);
      }, f2.prototype.iabs = function() {
        return this.negative = 0, this;
      }, f2.prototype.abs = function() {
        return this.clone().iabs();
      }, f2.prototype._ishlnsubmul = function(i, a2, h3) {
        var s3 = i.length + h3, u4;
        this._expand(s3);
        var c2, b3 = 0;
        for (u4 = 0;u4 < i.length; u4++) {
          c2 = (this.words[u4 + h3] | 0) + b3;
          var l3 = (i.words[u4] | 0) * a2;
          c2 -= l3 & 67108863, b3 = (c2 >> 26) - (l3 / 67108864 | 0), this.words[u4 + h3] = c2 & 67108863;
        }
        for (;u4 < this.length - h3; u4++)
          c2 = (this.words[u4 + h3] | 0) + b3, b3 = c2 >> 26, this.words[u4 + h3] = c2 & 67108863;
        if (b3 === 0)
          return this.strip();
        for (r2(b3 === -1), b3 = 0, u4 = 0;u4 < this.length; u4++)
          c2 = -(this.words[u4] | 0) + b3, b3 = c2 >> 26, this.words[u4] = c2 & 67108863;
        return this.negative = 1, this.strip();
      }, f2.prototype._wordDiv = function(i, a2) {
        var h3 = this.length - i.length, s3 = this.clone(), u4 = i, c2 = u4.words[u4.length - 1] | 0, b3 = this._countBits(c2);
        h3 = 26 - b3, h3 !== 0 && (u4 = u4.ushln(h3), s3.iushln(h3), c2 = u4.words[u4.length - 1] | 0);
        var l3 = s3.length - u4.length, n32;
        if (a2 !== "mod") {
          n32 = new f2(null), n32.length = l3 + 1, n32.words = new Array(n32.length);
          for (var d2 = 0;d2 < n32.length; d2++)
            n32.words[d2] = 0;
        }
        var w3 = s3.clone()._ishlnsubmul(u4, 1, l3);
        w3.negative === 0 && (s3 = w3, n32 && (n32.words[l3] = 1));
        for (var g2 = l3 - 1;g2 >= 0; g2--) {
          var _5 = (s3.words[u4.length + g2] | 0) * 67108864 + (s3.words[u4.length + g2 - 1] | 0);
          for (_5 = Math.min(_5 / c2 | 0, 67108863), s3._ishlnsubmul(u4, _5, g2);s3.negative !== 0; )
            _5--, s3.negative = 0, s3._ishlnsubmul(u4, 1, g2), s3.isZero() || (s3.negative ^= 1);
          n32 && (n32.words[g2] = _5);
        }
        return n32 && n32.strip(), s3.strip(), a2 !== "div" && h3 !== 0 && s3.iushrn(h3), { div: n32 || null, mod: s3 };
      }, f2.prototype.divmod = function(i, a2, h3) {
        if (r2(!i.isZero()), this.isZero())
          return { div: new f2(0), mod: new f2(0) };
        var s3, u4, c2;
        return this.negative !== 0 && i.negative === 0 ? (c2 = this.neg().divmod(i, a2), a2 !== "mod" && (s3 = c2.div.neg()), a2 !== "div" && (u4 = c2.mod.neg(), h3 && u4.negative !== 0 && u4.iadd(i)), { div: s3, mod: u4 }) : this.negative === 0 && i.negative !== 0 ? (c2 = this.divmod(i.neg(), a2), a2 !== "mod" && (s3 = c2.div.neg()), { div: s3, mod: c2.mod }) : (this.negative & i.negative) !== 0 ? (c2 = this.neg().divmod(i.neg(), a2), a2 !== "div" && (u4 = c2.mod.neg(), h3 && u4.negative !== 0 && u4.isub(i)), { div: c2.div, mod: u4 }) : i.length > this.length || this.cmp(i) < 0 ? { div: new f2(0), mod: this } : i.length === 1 ? a2 === "div" ? { div: this.divn(i.words[0]), mod: null } : a2 === "mod" ? { div: null, mod: new f2(this.modn(i.words[0])) } : { div: this.divn(i.words[0]), mod: new f2(this.modn(i.words[0])) } : this._wordDiv(i, a2);
      }, f2.prototype.div = function(i) {
        return this.divmod(i, "div", false).div;
      }, f2.prototype.mod = function(i) {
        return this.divmod(i, "mod", false).mod;
      }, f2.prototype.umod = function(i) {
        return this.divmod(i, "mod", true).mod;
      }, f2.prototype.divRound = function(i) {
        var a2 = this.divmod(i);
        if (a2.mod.isZero())
          return a2.div;
        var h3 = a2.div.negative !== 0 ? a2.mod.isub(i) : a2.mod, s3 = i.ushrn(1), u4 = i.andln(1), c2 = h3.cmp(s3);
        return c2 < 0 || u4 === 1 && c2 === 0 ? a2.div : a2.div.negative !== 0 ? a2.div.isubn(1) : a2.div.iaddn(1);
      }, f2.prototype.modn = function(i) {
        r2(i <= 67108863);
        for (var a2 = (1 << 26) % i, h3 = 0, s3 = this.length - 1;s3 >= 0; s3--)
          h3 = (a2 * h3 + (this.words[s3] | 0)) % i;
        return h3;
      }, f2.prototype.idivn = function(i) {
        r2(i <= 67108863);
        for (var a2 = 0, h3 = this.length - 1;h3 >= 0; h3--) {
          var s3 = (this.words[h3] | 0) + a2 * 67108864;
          this.words[h3] = s3 / i | 0, a2 = s3 % i;
        }
        return this.strip();
      }, f2.prototype.divn = function(i) {
        return this.clone().idivn(i);
      }, f2.prototype.egcd = function(i) {
        r2(i.negative === 0), r2(!i.isZero());
        var a2 = this, h3 = i.clone();
        a2.negative !== 0 ? a2 = a2.umod(i) : a2 = a2.clone();
        for (var s3 = new f2(1), u4 = new f2(0), c2 = new f2(0), b3 = new f2(1), l3 = 0;a2.isEven() && h3.isEven(); )
          a2.iushrn(1), h3.iushrn(1), ++l3;
        for (var n32 = h3.clone(), d2 = a2.clone();!a2.isZero(); ) {
          for (var w3 = 0, g2 = 1;(a2.words[0] & g2) === 0 && w3 < 26; ++w3, g2 <<= 1)
            ;
          if (w3 > 0)
            for (a2.iushrn(w3);w3-- > 0; )
              (s3.isOdd() || u4.isOdd()) && (s3.iadd(n32), u4.isub(d2)), s3.iushrn(1), u4.iushrn(1);
          for (var _5 = 0, A6 = 1;(h3.words[0] & A6) === 0 && _5 < 26; ++_5, A6 <<= 1)
            ;
          if (_5 > 0)
            for (h3.iushrn(_5);_5-- > 0; )
              (c2.isOdd() || b3.isOdd()) && (c2.iadd(n32), b3.isub(d2)), c2.iushrn(1), b3.iushrn(1);
          a2.cmp(h3) >= 0 ? (a2.isub(h3), s3.isub(c2), u4.isub(b3)) : (h3.isub(a2), c2.isub(s3), b3.isub(u4));
        }
        return { a: c2, b: b3, gcd: h3.iushln(l3) };
      }, f2.prototype._invmp = function(i) {
        r2(i.negative === 0), r2(!i.isZero());
        var a2 = this, h3 = i.clone();
        a2.negative !== 0 ? a2 = a2.umod(i) : a2 = a2.clone();
        for (var s3 = new f2(1), u4 = new f2(0), c2 = h3.clone();a2.cmpn(1) > 0 && h3.cmpn(1) > 0; ) {
          for (var b3 = 0, l3 = 1;(a2.words[0] & l3) === 0 && b3 < 26; ++b3, l3 <<= 1)
            ;
          if (b3 > 0)
            for (a2.iushrn(b3);b3-- > 0; )
              s3.isOdd() && s3.iadd(c2), s3.iushrn(1);
          for (var n32 = 0, d2 = 1;(h3.words[0] & d2) === 0 && n32 < 26; ++n32, d2 <<= 1)
            ;
          if (n32 > 0)
            for (h3.iushrn(n32);n32-- > 0; )
              u4.isOdd() && u4.iadd(c2), u4.iushrn(1);
          a2.cmp(h3) >= 0 ? (a2.isub(h3), s3.isub(u4)) : (h3.isub(a2), u4.isub(s3));
        }
        var w3;
        return a2.cmpn(1) === 0 ? w3 = s3 : w3 = u4, w3.cmpn(0) < 0 && w3.iadd(i), w3;
      }, f2.prototype.gcd = function(i) {
        if (this.isZero())
          return i.abs();
        if (i.isZero())
          return this.abs();
        var a2 = this.clone(), h3 = i.clone();
        a2.negative = 0, h3.negative = 0;
        for (var s3 = 0;a2.isEven() && h3.isEven(); s3++)
          a2.iushrn(1), h3.iushrn(1);
        do {
          for (;a2.isEven(); )
            a2.iushrn(1);
          for (;h3.isEven(); )
            h3.iushrn(1);
          var u4 = a2.cmp(h3);
          if (u4 < 0) {
            var c2 = a2;
            a2 = h3, h3 = c2;
          } else if (u4 === 0 || h3.cmpn(1) === 0)
            break;
          a2.isub(h3);
        } while (true);
        return h3.iushln(s3);
      }, f2.prototype.invm = function(i) {
        return this.egcd(i).a.umod(i);
      }, f2.prototype.isEven = function() {
        return (this.words[0] & 1) === 0;
      }, f2.prototype.isOdd = function() {
        return (this.words[0] & 1) === 1;
      }, f2.prototype.andln = function(i) {
        return this.words[0] & i;
      }, f2.prototype.bincn = function(i) {
        r2(typeof i == "number");
        var a2 = i % 26, h3 = (i - a2) / 26, s3 = 1 << a2;
        if (this.length <= h3)
          return this._expand(h3 + 1), this.words[h3] |= s3, this;
        for (var u4 = s3, c2 = h3;u4 !== 0 && c2 < this.length; c2++) {
          var b3 = this.words[c2] | 0;
          b3 += u4, u4 = b3 >>> 26, b3 &= 67108863, this.words[c2] = b3;
        }
        return u4 !== 0 && (this.words[c2] = u4, this.length++), this;
      }, f2.prototype.isZero = function() {
        return this.length === 1 && this.words[0] === 0;
      }, f2.prototype.cmpn = function(i) {
        var a2 = i < 0;
        if (this.negative !== 0 && !a2)
          return -1;
        if (this.negative === 0 && a2)
          return 1;
        this.strip();
        var h3;
        if (this.length > 1)
          h3 = 1;
        else {
          a2 && (i = -i), r2(i <= 67108863, "Number is too big");
          var s3 = this.words[0] | 0;
          h3 = s3 === i ? 0 : s3 < i ? -1 : 1;
        }
        return this.negative !== 0 ? -h3 | 0 : h3;
      }, f2.prototype.cmp = function(i) {
        if (this.negative !== 0 && i.negative === 0)
          return -1;
        if (this.negative === 0 && i.negative !== 0)
          return 1;
        var a2 = this.ucmp(i);
        return this.negative !== 0 ? -a2 | 0 : a2;
      }, f2.prototype.ucmp = function(i) {
        if (this.length > i.length)
          return 1;
        if (this.length < i.length)
          return -1;
        for (var a2 = 0, h3 = this.length - 1;h3 >= 0; h3--) {
          var s3 = this.words[h3] | 0, u4 = i.words[h3] | 0;
          if (s3 !== u4) {
            s3 < u4 ? a2 = -1 : s3 > u4 && (a2 = 1);
            break;
          }
        }
        return a2;
      }, f2.prototype.gtn = function(i) {
        return this.cmpn(i) === 1;
      }, f2.prototype.gt = function(i) {
        return this.cmp(i) === 1;
      }, f2.prototype.gten = function(i) {
        return this.cmpn(i) >= 0;
      }, f2.prototype.gte = function(i) {
        return this.cmp(i) >= 0;
      }, f2.prototype.ltn = function(i) {
        return this.cmpn(i) === -1;
      }, f2.prototype.lt = function(i) {
        return this.cmp(i) === -1;
      }, f2.prototype.lten = function(i) {
        return this.cmpn(i) <= 0;
      }, f2.prototype.lte = function(i) {
        return this.cmp(i) <= 0;
      }, f2.prototype.eqn = function(i) {
        return this.cmpn(i) === 0;
      }, f2.prototype.eq = function(i) {
        return this.cmp(i) === 0;
      }, f2.red = function(i) {
        return new P(i);
      }, f2.prototype.toRed = function(i) {
        return r2(!this.red, "Already a number in reduction context"), r2(this.negative === 0, "red works only with positives"), i.convertTo(this)._forceRed(i);
      }, f2.prototype.fromRed = function() {
        return r2(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
      }, f2.prototype._forceRed = function(i) {
        return this.red = i, this;
      }, f2.prototype.forceRed = function(i) {
        return r2(!this.red, "Already a number in reduction context"), this._forceRed(i);
      }, f2.prototype.redAdd = function(i) {
        return r2(this.red, "redAdd works only with red numbers"), this.red.add(this, i);
      }, f2.prototype.redIAdd = function(i) {
        return r2(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, i);
      }, f2.prototype.redSub = function(i) {
        return r2(this.red, "redSub works only with red numbers"), this.red.sub(this, i);
      }, f2.prototype.redISub = function(i) {
        return r2(this.red, "redISub works only with red numbers"), this.red.isub(this, i);
      }, f2.prototype.redShl = function(i) {
        return r2(this.red, "redShl works only with red numbers"), this.red.shl(this, i);
      }, f2.prototype.redMul = function(i) {
        return r2(this.red, "redMul works only with red numbers"), this.red._verify2(this, i), this.red.mul(this, i);
      }, f2.prototype.redIMul = function(i) {
        return r2(this.red, "redMul works only with red numbers"), this.red._verify2(this, i), this.red.imul(this, i);
      }, f2.prototype.redSqr = function() {
        return r2(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
      }, f2.prototype.redISqr = function() {
        return r2(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
      }, f2.prototype.redSqrt = function() {
        return r2(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
      }, f2.prototype.redInvm = function() {
        return r2(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
      }, f2.prototype.redNeg = function() {
        return r2(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
      }, f2.prototype.redPow = function(i) {
        return r2(this.red && !i.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, i);
      };
      var we = { k256: null, p224: null, p192: null, p25519: null };
      function ye(v32, i) {
        this.name = v32, this.p = new f2(i, 16), this.n = this.p.bitLength(), this.k = new f2(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
      }
      ye.prototype._tmp = function() {
        var i = new f2(null);
        return i.words = new Array(Math.ceil(this.n / 13)), i;
      }, ye.prototype.ireduce = function(i) {
        var a2 = i, h3;
        do
          this.split(a2, this.tmp), a2 = this.imulK(a2), a2 = a2.iadd(this.tmp), h3 = a2.bitLength();
        while (h3 > this.n);
        var s3 = h3 < this.n ? -1 : a2.ucmp(this.p);
        return s3 === 0 ? (a2.words[0] = 0, a2.length = 1) : s3 > 0 ? a2.isub(this.p) : a2.strip !== undefined ? a2.strip() : a2._strip(), a2;
      }, ye.prototype.split = function(i, a2) {
        i.iushrn(this.n, 0, a2);
      }, ye.prototype.imulK = function(i) {
        return i.imul(this.k);
      };
      function xe() {
        ye.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      o2(xe, ye), xe.prototype.split = function(i, a2) {
        for (var h3 = 4194303, s3 = Math.min(i.length, 9), u4 = 0;u4 < s3; u4++)
          a2.words[u4] = i.words[u4];
        if (a2.length = s3, i.length <= 9) {
          i.words[0] = 0, i.length = 1;
          return;
        }
        var c2 = i.words[9];
        for (a2.words[a2.length++] = c2 & h3, u4 = 10;u4 < i.length; u4++) {
          var b3 = i.words[u4] | 0;
          i.words[u4 - 10] = (b3 & h3) << 4 | c2 >>> 22, c2 = b3;
        }
        c2 >>>= 22, i.words[u4 - 10] = c2, c2 === 0 && i.length > 10 ? i.length -= 10 : i.length -= 9;
      }, xe.prototype.imulK = function(i) {
        i.words[i.length] = 0, i.words[i.length + 1] = 0, i.length += 2;
        for (var a2 = 0, h3 = 0;h3 < i.length; h3++) {
          var s3 = i.words[h3] | 0;
          a2 += s3 * 977, i.words[h3] = a2 & 67108863, a2 = s3 * 64 + (a2 / 67108864 | 0);
        }
        return i.words[i.length - 1] === 0 && (i.length--, i.words[i.length - 1] === 0 && i.length--), i;
      };
      function Re() {
        ye.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      o2(Re, ye);
      function Ee() {
        ye.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      o2(Ee, ye);
      function Ae() {
        ye.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      o2(Ae, ye), Ae.prototype.imulK = function(i) {
        for (var a2 = 0, h3 = 0;h3 < i.length; h3++) {
          var s3 = (i.words[h3] | 0) * 19 + a2, u4 = s3 & 67108863;
          s3 >>>= 26, i.words[h3] = u4, a2 = s3;
        }
        return a2 !== 0 && (i.words[i.length++] = a2), i;
      }, f2._prime = function(i) {
        if (we[i])
          return we[i];
        var a2;
        if (i === "k256")
          a2 = new xe;
        else if (i === "p224")
          a2 = new Re;
        else if (i === "p192")
          a2 = new Ee;
        else if (i === "p25519")
          a2 = new Ae;
        else
          throw new Error("Unknown prime " + i);
        return we[i] = a2, a2;
      };
      function P(v32) {
        if (typeof v32 == "string") {
          var i = f2._prime(v32);
          this.m = i.p, this.prime = i;
        } else
          r2(v32.gtn(1), "modulus must be greater than 1"), this.m = v32, this.prime = null;
      }
      P.prototype._verify1 = function(i) {
        r2(i.negative === 0, "red works only with positives"), r2(i.red, "red works only with red numbers");
      }, P.prototype._verify2 = function(i, a2) {
        r2((i.negative | a2.negative) === 0, "red works only with positives"), r2(i.red && i.red === a2.red, "red works only with red numbers");
      }, P.prototype.imod = function(i) {
        return this.prime ? this.prime.ireduce(i)._forceRed(this) : i.umod(this.m)._forceRed(this);
      }, P.prototype.neg = function(i) {
        return i.isZero() ? i.clone() : this.m.sub(i)._forceRed(this);
      }, P.prototype.add = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.add(a2);
        return h3.cmp(this.m) >= 0 && h3.isub(this.m), h3._forceRed(this);
      }, P.prototype.iadd = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.iadd(a2);
        return h3.cmp(this.m) >= 0 && h3.isub(this.m), h3;
      }, P.prototype.sub = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.sub(a2);
        return h3.cmpn(0) < 0 && h3.iadd(this.m), h3._forceRed(this);
      }, P.prototype.isub = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.isub(a2);
        return h3.cmpn(0) < 0 && h3.iadd(this.m), h3;
      }, P.prototype.shl = function(i, a2) {
        return this._verify1(i), this.imod(i.ushln(a2));
      }, P.prototype.imul = function(i, a2) {
        return this._verify2(i, a2), this.imod(i.imul(a2));
      }, P.prototype.mul = function(i, a2) {
        return this._verify2(i, a2), this.imod(i.mul(a2));
      }, P.prototype.isqr = function(i) {
        return this.imul(i, i.clone());
      }, P.prototype.sqr = function(i) {
        return this.mul(i, i);
      }, P.prototype.sqrt = function(i) {
        if (i.isZero())
          return i.clone();
        var a2 = this.m.andln(3);
        if (r2(a2 % 2 === 1), a2 === 3) {
          var h3 = this.m.add(new f2(1)).iushrn(2);
          return this.pow(i, h3);
        }
        for (var s3 = this.m.subn(1), u4 = 0;!s3.isZero() && s3.andln(1) === 0; )
          u4++, s3.iushrn(1);
        r2(!s3.isZero());
        var c2 = new f2(1).toRed(this), b3 = c2.redNeg(), l3 = this.m.subn(1).iushrn(1), n32 = this.m.bitLength();
        for (n32 = new f2(2 * n32 * n32).toRed(this);this.pow(n32, l3).cmp(b3) !== 0; )
          n32.redIAdd(b3);
        for (var d2 = this.pow(n32, s3), w3 = this.pow(i, s3.addn(1).iushrn(1)), g2 = this.pow(i, s3), _5 = u4;g2.cmp(c2) !== 0; ) {
          for (var A6 = g2, R4 = 0;A6.cmp(c2) !== 0; R4++)
            A6 = A6.redSqr();
          r2(R4 < _5);
          var I2 = this.pow(d2, new f2(1).iushln(_5 - R4 - 1));
          w3 = w3.redMul(I2), d2 = I2.redSqr(), g2 = g2.redMul(d2), _5 = R4;
        }
        return w3;
      }, P.prototype.invm = function(i) {
        var a2 = i._invmp(this.m);
        return a2.negative !== 0 ? (a2.negative = 0, this.imod(a2).redNeg()) : this.imod(a2);
      }, P.prototype.pow = function(i, a2) {
        if (a2.isZero())
          return new f2(1).toRed(this);
        if (a2.cmpn(1) === 0)
          return i.clone();
        var h3 = 4, s3 = new Array(1 << h3);
        s3[0] = new f2(1).toRed(this), s3[1] = i;
        for (var u4 = 2;u4 < s3.length; u4++)
          s3[u4] = this.mul(s3[u4 - 1], i);
        var c2 = s3[0], b3 = 0, l3 = 0, n32 = a2.bitLength() % 26;
        for (n32 === 0 && (n32 = 26), u4 = a2.length - 1;u4 >= 0; u4--) {
          for (var d2 = a2.words[u4], w3 = n32 - 1;w3 >= 0; w3--) {
            var g2 = d2 >> w3 & 1;
            if (c2 !== s3[0] && (c2 = this.sqr(c2)), g2 === 0 && b3 === 0) {
              l3 = 0;
              continue;
            }
            b3 <<= 1, b3 |= g2, l3++, !(l3 !== h3 && (u4 !== 0 || w3 !== 0)) && (c2 = this.mul(c2, s3[b3]), l3 = 0, b3 = 0);
          }
          n32 = 26;
        }
        return c2;
      }, P.prototype.convertTo = function(i) {
        var a2 = i.umod(this.m);
        return a2 === i ? a2.clone() : a2;
      }, P.prototype.convertFrom = function(i) {
        var a2 = i.clone();
        return a2.red = null, a2;
      }, f2.mont = function(i) {
        return new Se(i);
      };
      function Se(v32) {
        P.call(this, v32), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new f2(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
      }
      o2(Se, P), Se.prototype.convertTo = function(i) {
        return this.imod(i.ushln(this.shift));
      }, Se.prototype.convertFrom = function(i) {
        var a2 = this.imod(i.mul(this.rinv));
        return a2.red = null, a2;
      }, Se.prototype.imul = function(i, a2) {
        if (i.isZero() || a2.isZero())
          return i.words[0] = 0, i.length = 1, i;
        var h3 = i.imul(a2), s3 = h3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u4 = h3.isub(s3).iushrn(this.shift), c2 = u4;
        return u4.cmp(this.m) >= 0 ? c2 = u4.isub(this.m) : u4.cmpn(0) < 0 && (c2 = u4.iadd(this.m)), c2._forceRed(this);
      }, Se.prototype.mul = function(i, a2) {
        if (i.isZero() || a2.isZero())
          return new f2(0)._forceRed(this);
        var h3 = i.mul(a2), s3 = h3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u4 = h3.isub(s3).iushrn(this.shift), c2 = u4;
        return u4.cmp(this.m) >= 0 ? c2 = u4.isub(this.m) : u4.cmpn(0) < 0 && (c2 = u4.iadd(this.m)), c2._forceRed(this);
      }, Se.prototype.invm = function(i) {
        var a2 = this.imod(i._invmp(this.m).mul(this.r2));
        return a2._forceRed(this);
      };
    })(typeof Xu > "u" || Xu, Gm);
  });
  Xm = T2(() => {
  });
  As = T2(($T, el) => {
    var Ju;
    el.exports = function(e2) {
      return Ju || (Ju = new Zi(null)), Ju.generate(e2);
    };
    function Zi(t22) {
      this.rand = t22;
    }
    el.exports.Rand = Zi;
    Zi.prototype.generate = function(e2) {
      return this._rand(e2);
    };
    Zi.prototype._rand = function(e2) {
      if (this.rand.getBytes)
        return this.rand.getBytes(e2);
      for (var r2 = new Uint8Array(e2), o2 = 0;o2 < r2.length; o2++)
        r2[o2] = this.rand.getByte();
      return r2;
    };
    if (typeof self == "object")
      self.crypto && self.crypto.getRandomValues ? Zi.prototype._rand = function(e2) {
        var r2 = new Uint8Array(e2);
        return self.crypto.getRandomValues(r2), r2;
      } : self.msCrypto && self.msCrypto.getRandomValues ? Zi.prototype._rand = function(e2) {
        var r2 = new Uint8Array(e2);
        return self.msCrypto.getRandomValues(r2), r2;
      } : typeof window == "object" && (Zi.prototype._rand = function() {
        throw new Error("Not implemented yet");
      });
    else
      try {
        if (Qu = Xm(), typeof Qu.randomBytes != "function")
          throw new Error("Not supported");
        Zi.prototype._rand = function(e2) {
          return Qu.randomBytes(e2);
        };
      } catch {
      }
    var Qu;
  });
  tl = T2((GT, Jm) => {
    var In = Ym(), Q9 = As();
    function Tn(t22) {
      this.rand = t22 || new Q9.Rand;
    }
    Jm.exports = Tn;
    Tn.create = function(e2) {
      return new Tn(e2);
    };
    Tn.prototype._randbelow = function(e2) {
      var r2 = e2.bitLength(), o2 = Math.ceil(r2 / 8);
      do
        var f2 = new In(this.rand.generate(o2));
      while (f2.cmp(e2) >= 0);
      return f2;
    };
    Tn.prototype._randrange = function(e2, r2) {
      var o2 = r2.sub(e2);
      return e2.add(this._randbelow(o2));
    };
    Tn.prototype.test = function(e2, r2, o2) {
      var f2 = e2.bitLength(), p2 = In.mont(e2), m32 = new In(1).toRed(p2);
      r2 || (r2 = Math.max(1, f2 / 48 | 0));
      for (var y22 = e2.subn(1), M3 = 0;!y22.testn(M3); M3++)
        ;
      for (var x5 = e2.shrn(M3), S2 = y22.toRed(p2), E4 = true;r2 > 0; r2--) {
        var B5 = this._randrange(new In(2), y22);
        o2 && o2(B5);
        var q = B5.toRed(p2).redPow(x5);
        if (!(q.cmp(m32) === 0 || q.cmp(S2) === 0)) {
          for (var L2 = 1;L2 < M3; L2++) {
            if (q = q.redSqr(), q.cmp(m32) === 0)
              return false;
            if (q.cmp(S2) === 0)
              break;
          }
          if (L2 === M3)
            return false;
        }
      }
      return E4;
    };
    Tn.prototype.getDivisor = function(e2, r2) {
      var o2 = e2.bitLength(), f2 = In.mont(e2), p2 = new In(1).toRed(f2);
      r2 || (r2 = Math.max(1, o2 / 48 | 0));
      for (var m32 = e2.subn(1), y22 = 0;!m32.testn(y22); y22++)
        ;
      for (var M3 = e2.shrn(y22), x5 = m32.toRed(f2);r2 > 0; r2--) {
        var S2 = this._randrange(new In(2), m32), E4 = e2.gcd(S2);
        if (E4.cmpn(1) !== 0)
          return E4;
        var B5 = S2.toRed(f2).redPow(M3);
        if (!(B5.cmp(p2) === 0 || B5.cmp(x5) === 0)) {
          for (var q = 1;q < y22; q++) {
            if (B5 = B5.redSqr(), B5.cmp(p2) === 0)
              return B5.fromRed().subn(1).gcd(e2);
            if (B5.cmp(x5) === 0)
              break;
          }
          if (q === y22)
            return B5 = B5.redSqr(), B5.fromRed().subn(1).gcd(e2);
        }
      }
      return false;
    };
  });
  ol = T2((ek, tg) => {
    var eS = on();
    tg.exports = al;
    al.simpleSieve = nl;
    al.fermatTest = fl;
    var Ht = Yu(), tS = new Ht(24), rS = tl(), Qm = new rS, iS = new Ht(1), il = new Ht(2), nS = new Ht(5), YT = new Ht(16), XT = new Ht(8), fS = new Ht(10), aS = new Ht(3), JT = new Ht(7), oS = new Ht(11), eg = new Ht(4), QT = new Ht(12), rl = null;
    function sS() {
      if (rl !== null)
        return rl;
      var t22 = 1048576, e2 = [];
      e2[0] = 2;
      for (var r2 = 1, o2 = 3;o2 < t22; o2 += 2) {
        for (var f2 = Math.ceil(Math.sqrt(o2)), p2 = 0;p2 < r2 && e2[p2] <= f2 && o2 % e2[p2] !== 0; p2++)
          ;
        r2 !== p2 && e2[p2] <= f2 || (e2[r2++] = o2);
      }
      return rl = e2, e2;
    }
    function nl(t22) {
      for (var e2 = sS(), r2 = 0;r2 < e2.length; r2++)
        if (t22.modn(e2[r2]) === 0)
          return t22.cmpn(e2[r2]) === 0;
      return true;
    }
    function fl(t22) {
      var e2 = Ht.mont(t22);
      return il.toRed(e2).redPow(t22.subn(1)).fromRed().cmpn(1) === 0;
    }
    function al(t22, e2) {
      if (t22 < 16)
        return e2 === 2 || e2 === 5 ? new Ht([140, 123]) : new Ht([140, 39]);
      e2 = new Ht(e2);
      for (var r2, o2;; ) {
        for (r2 = new Ht(eS(Math.ceil(t22 / 8)));r2.bitLength() > t22; )
          r2.ishrn(1);
        if (r2.isEven() && r2.iadd(iS), r2.testn(1) || r2.iadd(il), e2.cmp(il)) {
          if (!e2.cmp(nS))
            for (;r2.mod(fS).cmp(aS); )
              r2.iadd(eg);
        } else
          for (;r2.mod(tS).cmp(oS); )
            r2.iadd(eg);
        if (o2 = r2.shrn(1), nl(o2) && nl(r2) && fl(o2) && fl(r2) && Qm.test(o2) && Qm.test(r2))
          return r2;
      }
    }
  });
  rg = T2((tk, hS) => {
    hS.exports = { modp1: { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff" }, modp2: { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff" }, modp5: { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff" }, modp14: { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff" }, modp15: { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff" }, modp16: { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff" }, modp17: { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff" }, modp18: { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff" } };
  });
  ag = T2((rk, fg) => {
    var yr = Yu(), uS = tl(), ig = new uS, lS = new yr(24), dS = new yr(11), cS = new yr(10), pS = new yr(3), vS = new yr(7), ng = ol(), bS = on();
    fg.exports = Si;
    function mS(t22, e2) {
      return e2 = e2 || "utf8", Buffer.isBuffer(t22) || (t22 = new Buffer(t22, e2)), this._pub = new yr(t22), this;
    }
    function gS(t22, e2) {
      return e2 = e2 || "utf8", Buffer.isBuffer(t22) || (t22 = new Buffer(t22, e2)), this._priv = new yr(t22), this;
    }
    var Rs = {};
    function yS(t22, e2) {
      var r2 = e2.toString("hex"), o2 = [r2, t22.toString(16)].join("_");
      if (o2 in Rs)
        return Rs[o2];
      var f2 = 0;
      if (t22.isEven() || !ng.simpleSieve || !ng.fermatTest(t22) || !ig.test(t22))
        return f2 += 1, r2 === "02" || r2 === "05" ? f2 += 8 : f2 += 4, Rs[o2] = f2, f2;
      ig.test(t22.shrn(1)) || (f2 += 2);
      var p2;
      switch (r2) {
        case "02":
          t22.mod(lS).cmp(dS) && (f2 += 8);
          break;
        case "05":
          p2 = t22.mod(cS), p2.cmp(pS) && p2.cmp(vS) && (f2 += 8);
          break;
        default:
          f2 += 4;
      }
      return Rs[o2] = f2, f2;
    }
    function Si(t22, e2, r2) {
      this.setGenerator(e2), this.__prime = new yr(t22), this._prime = yr.mont(this.__prime), this._primeLen = t22.length, this._pub = undefined, this._priv = undefined, this._primeCode = undefined, r2 ? (this.setPublicKey = mS, this.setPrivateKey = gS) : this._primeCode = 8;
    }
    Object.defineProperty(Si.prototype, "verifyError", { enumerable: true, get: function() {
      return typeof this._primeCode != "number" && (this._primeCode = yS(this.__prime, this.__gen)), this._primeCode;
    } });
    Si.prototype.generateKeys = function() {
      return this._priv || (this._priv = new yr(bS(this._primeLen))), this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed(), this.getPublicKey();
    };
    Si.prototype.computeSecret = function(t22) {
      t22 = new yr(t22), t22 = t22.toRed(this._prime);
      var e2 = t22.redPow(this._priv).fromRed(), r2 = new Buffer(e2.toArray()), o2 = this.getPrime();
      if (r2.length < o2.length) {
        var f2 = new Buffer(o2.length - r2.length);
        f2.fill(0), r2 = Buffer.concat([f2, r2]);
      }
      return r2;
    };
    Si.prototype.getPublicKey = function(e2) {
      return Bs(this._pub, e2);
    };
    Si.prototype.getPrivateKey = function(e2) {
      return Bs(this._priv, e2);
    };
    Si.prototype.getPrime = function(t22) {
      return Bs(this.__prime, t22);
    };
    Si.prototype.getGenerator = function(t22) {
      return Bs(this._gen, t22);
    };
    Si.prototype.setGenerator = function(t22, e2) {
      return e2 = e2 || "utf8", Buffer.isBuffer(t22) || (t22 = new Buffer(t22, e2)), this.__gen = t22, this._gen = new yr(t22), this;
    };
    function Bs(t22, e2) {
      var r2 = new Buffer(t22.toArray());
      return e2 ? r2.toString(e2) : r2;
    }
  });
  hg = T2((_f) => {
    var wS = ol(), og = rg(), sl = ag();
    function MS(t22) {
      var e2 = new Buffer(og[t22].prime, "hex"), r2 = new Buffer(og[t22].gen, "hex");
      return new sl(e2, r2);
    }
    var _S = { binary: true, hex: true, base64: true };
    function sg(t22, e2, r2, o2) {
      return Buffer.isBuffer(e2) || _S[e2] === undefined ? sg(t22, "binary", e2, r2) : (e2 = e2 || "binary", o2 = o2 || "binary", r2 = r2 || new Buffer([2]), Buffer.isBuffer(r2) || (r2 = new Buffer(r2, o2)), typeof t22 == "number" ? new sl(wS(t22, r2), r2, true) : (Buffer.isBuffer(t22) || (t22 = new Buffer(t22, e2)), new sl(t22, r2, true)));
    }
    _f.DiffieHellmanGroup = _f.createDiffieHellmanGroup = _f.getDiffieHellman = MS;
    _f.createDiffieHellman = _f.DiffieHellman = sg;
  });
  hl = T2((nk, ug) => {
    ug.exports = ki().EventEmitter;
  });
  pg = T2((fk, cg) => {
    function lg(t22, e2) {
      var r2 = Object.keys(t22);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(t22);
        e2 && (o2 = o2.filter(function(f2) {
          return Object.getOwnPropertyDescriptor(t22, f2).enumerable;
        })), r2.push.apply(r2, o2);
      }
      return r2;
    }
    function xS(t22) {
      for (var e2 = 1;e2 < arguments.length; e2++) {
        var r2 = arguments[e2] != null ? arguments[e2] : {};
        e2 % 2 ? lg(Object(r2), true).forEach(function(o2) {
          SS(t22, o2, r2[o2]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t22, Object.getOwnPropertyDescriptors(r2)) : lg(Object(r2)).forEach(function(o2) {
          Object.defineProperty(t22, o2, Object.getOwnPropertyDescriptor(r2, o2));
        });
      }
      return t22;
    }
    function SS(t22, e2, r2) {
      return e2 in t22 ? Object.defineProperty(t22, e2, { value: r2, enumerable: true, configurable: true, writable: true }) : t22[e2] = r2, t22;
    }
    function ES(t22, e2) {
      if (!(t22 instanceof e2))
        throw new TypeError("Cannot call a class as a function");
    }
    function dg(t22, e2) {
      for (var r2 = 0;r2 < e2.length; r2++) {
        var o2 = e2[r2];
        o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(t22, o2.key, o2);
      }
    }
    function AS(t22, e2, r2) {
      return e2 && dg(t22.prototype, e2), r2 && dg(t22, r2), t22;
    }
    var RS = Ut(), qs = RS.Buffer, BS = $f(), ul = BS.inspect, qS = ul && ul.custom || "inspect";
    function IS(t22, e2, r2) {
      qs.prototype.copy.call(t22, e2, r2);
    }
    cg.exports = function() {
      function t22() {
        ES(this, t22), this.head = null, this.tail = null, this.length = 0;
      }
      return AS(t22, [{ key: "push", value: function(r2) {
        var o2 = { data: r2, next: null };
        this.length > 0 ? this.tail.next = o2 : this.head = o2, this.tail = o2, ++this.length;
      } }, { key: "unshift", value: function(r2) {
        var o2 = { data: r2, next: this.head };
        this.length === 0 && (this.tail = o2), this.head = o2, ++this.length;
      } }, { key: "shift", value: function() {
        if (this.length !== 0) {
          var r2 = this.head.data;
          return this.length === 1 ? this.head = this.tail = null : this.head = this.head.next, --this.length, r2;
        }
      } }, { key: "clear", value: function() {
        this.head = this.tail = null, this.length = 0;
      } }, { key: "join", value: function(r2) {
        if (this.length === 0)
          return "";
        for (var o2 = this.head, f2 = "" + o2.data;o2 = o2.next; )
          f2 += r2 + o2.data;
        return f2;
      } }, { key: "concat", value: function(r2) {
        if (this.length === 0)
          return qs.alloc(0);
        for (var o2 = qs.allocUnsafe(r2 >>> 0), f2 = this.head, p2 = 0;f2; )
          IS(f2.data, o2, p2), p2 += f2.data.length, f2 = f2.next;
        return o2;
      } }, { key: "consume", value: function(r2, o2) {
        var f2;
        return r2 < this.head.data.length ? (f2 = this.head.data.slice(0, r2), this.head.data = this.head.data.slice(r2)) : r2 === this.head.data.length ? f2 = this.shift() : f2 = o2 ? this._getString(r2) : this._getBuffer(r2), f2;
      } }, { key: "first", value: function() {
        return this.head.data;
      } }, { key: "_getString", value: function(r2) {
        var o2 = this.head, f2 = 1, p2 = o2.data;
        for (r2 -= p2.length;o2 = o2.next; ) {
          var m32 = o2.data, y22 = r2 > m32.length ? m32.length : r2;
          if (y22 === m32.length ? p2 += m32 : p2 += m32.slice(0, r2), r2 -= y22, r2 === 0) {
            y22 === m32.length ? (++f2, o2.next ? this.head = o2.next : this.head = this.tail = null) : (this.head = o2, o2.data = m32.slice(y22));
            break;
          }
          ++f2;
        }
        return this.length -= f2, p2;
      } }, { key: "_getBuffer", value: function(r2) {
        var o2 = qs.allocUnsafe(r2), f2 = this.head, p2 = 1;
        for (f2.data.copy(o2), r2 -= f2.data.length;f2 = f2.next; ) {
          var m32 = f2.data, y22 = r2 > m32.length ? m32.length : r2;
          if (m32.copy(o2, o2.length - r2, 0, y22), r2 -= y22, r2 === 0) {
            y22 === m32.length ? (++p2, f2.next ? this.head = f2.next : this.head = this.tail = null) : (this.head = f2, f2.data = m32.slice(y22));
            break;
          }
          ++p2;
        }
        return this.length -= p2, o2;
      } }, { key: qS, value: function(r2, o2) {
        return ul(this, xS({}, o2, { depth: 0, customInspect: false }));
      } }]), t22;
    }();
  });
  dl = T2((ak, bg) => {
    function TS(t22, e2) {
      var r2 = this, o2 = this._readableState && this._readableState.destroyed, f2 = this._writableState && this._writableState.destroyed;
      return o2 || f2 ? (e2 ? e2(t22) : t22 && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = true, process.nextTick(ll, this, t22)) : process.nextTick(ll, this, t22)), this) : (this._readableState && (this._readableState.destroyed = true), this._writableState && (this._writableState.destroyed = true), this._destroy(t22 || null, function(p2) {
        !e2 && p2 ? r2._writableState ? r2._writableState.errorEmitted ? process.nextTick(Is, r2) : (r2._writableState.errorEmitted = true, process.nextTick(vg, r2, p2)) : process.nextTick(vg, r2, p2) : e2 ? (process.nextTick(Is, r2), e2(p2)) : process.nextTick(Is, r2);
      }), this);
    }
    function vg(t22, e2) {
      ll(t22, e2), Is(t22);
    }
    function Is(t22) {
      t22._writableState && !t22._writableState.emitClose || t22._readableState && !t22._readableState.emitClose || t22.emit("close");
    }
    function kS() {
      this._readableState && (this._readableState.destroyed = false, this._readableState.reading = false, this._readableState.ended = false, this._readableState.endEmitted = false), this._writableState && (this._writableState.destroyed = false, this._writableState.ended = false, this._writableState.ending = false, this._writableState.finalCalled = false, this._writableState.prefinished = false, this._writableState.finished = false, this._writableState.errorEmitted = false);
    }
    function ll(t22, e2) {
      t22.emit("error", e2);
    }
    function LS(t22, e2) {
      var { _readableState: r2, _writableState: o2 } = t22;
      r2 && r2.autoDestroy || o2 && o2.autoDestroy ? t22.destroy(e2) : t22.emit("error", e2);
    }
    bg.exports = { destroy: TS, undestroy: kS, errorOrDestroy: LS };
  });
  kn = T2((ok, yg) => {
    function NS(t22, e2) {
      t22.prototype = Object.create(e2.prototype), t22.prototype.constructor = t22, t22.__proto__ = e2;
    }
    var gg = {};
    function wr(t22, e2, r2) {
      r2 || (r2 = Error);
      function o2(p2, m32, y22) {
        return typeof e2 == "string" ? e2 : e2(p2, m32, y22);
      }
      var f2 = function(p2) {
        NS(m32, p2);
        function m32(y22, M3, x5) {
          return p2.call(this, o2(y22, M3, x5)) || this;
        }
        return m32;
      }(r2);
      f2.prototype.name = r2.name, f2.prototype.code = t22, gg[t22] = f2;
    }
    function mg(t22, e2) {
      if (Array.isArray(t22)) {
        var r2 = t22.length;
        return t22 = t22.map(function(o2) {
          return String(o2);
        }), r2 > 2 ? "one of ".concat(e2, " ").concat(t22.slice(0, r2 - 1).join(", "), ", or ") + t22[r2 - 1] : r2 === 2 ? "one of ".concat(e2, " ").concat(t22[0], " or ").concat(t22[1]) : "of ".concat(e2, " ").concat(t22[0]);
      } else
        return "of ".concat(e2, " ").concat(String(t22));
    }
    function DS(t22, e2, r2) {
      return t22.substr(!r2 || r2 < 0 ? 0 : +r2, e2.length) === e2;
    }
    function PS(t22, e2, r2) {
      return (r2 === undefined || r2 > t22.length) && (r2 = t22.length), t22.substring(r2 - e2.length, r2) === e2;
    }
    function CS(t22, e2, r2) {
      return typeof r2 != "number" && (r2 = 0), r2 + e2.length > t22.length ? false : t22.indexOf(e2, r2) !== -1;
    }
    wr("ERR_INVALID_OPT_VALUE", function(t22, e2) {
      return 'The value "' + e2 + '" is invalid for option "' + t22 + '"';
    }, TypeError);
    wr("ERR_INVALID_ARG_TYPE", function(t22, e2, r2) {
      var o2;
      typeof e2 == "string" && DS(e2, "not ") ? (o2 = "must not be", e2 = e2.replace(/^not /, "")) : o2 = "must be";
      var f2;
      if (PS(t22, " argument"))
        f2 = "The ".concat(t22, " ").concat(o2, " ").concat(mg(e2, "type"));
      else {
        var p2 = CS(t22, ".") ? "property" : "argument";
        f2 = 'The "'.concat(t22, '" ').concat(p2, " ").concat(o2, " ").concat(mg(e2, "type"));
      }
      return f2 += ". Received type ".concat(typeof r2), f2;
    }, TypeError);
    wr("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
    wr("ERR_METHOD_NOT_IMPLEMENTED", function(t22) {
      return "The " + t22 + " method is not implemented";
    });
    wr("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
    wr("ERR_STREAM_DESTROYED", function(t22) {
      return "Cannot call " + t22 + " after a stream was destroyed";
    });
    wr("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
    wr("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
    wr("ERR_STREAM_WRITE_AFTER_END", "write after end");
    wr("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
    wr("ERR_UNKNOWN_ENCODING", function(t22) {
      return "Unknown encoding: " + t22;
    }, TypeError);
    wr("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
    yg.exports.codes = gg;
  });
  cl = T2((sk, wg) => {
    var OS = kn().codes.ERR_INVALID_OPT_VALUE;
    function FS(t22, e2, r2) {
      return t22.highWaterMark != null ? t22.highWaterMark : e2 ? t22[r2] : null;
    }
    function US(t22, e2, r2, o2) {
      var f2 = FS(e2, o2, r2);
      if (f2 != null) {
        if (!(isFinite(f2) && Math.floor(f2) === f2) || f2 < 0) {
          var p2 = o2 ? r2 : "highWaterMark";
          throw new OS(p2, f2);
        }
        return Math.floor(f2);
      }
      return t22.objectMode ? 16 : 16 * 1024;
    }
    wg.exports = { getHighWaterMark: US };
  });
  bl = T2((hk, Ag) => {
    Ag.exports = ut;
    function _g(t22) {
      var e2 = this;
      this.next = null, this.entry = null, this.finish = function() {
        cE(e2, t22);
      };
    }
    var xf;
    ut.WritableState = ka;
    var zS = { deprecate: G02() }, xg = hl(), ks = Ut().Buffer, HS = global.Uint8Array || function() {
    };
    function WS(t22) {
      return ks.from(t22);
    }
    function KS(t22) {
      return ks.isBuffer(t22) || t22 instanceof HS;
    }
    var vl = dl(), jS = cl(), ZS = jS.getHighWaterMark, Vi = kn().codes, VS = Vi.ERR_INVALID_ARG_TYPE, $S = Vi.ERR_METHOD_NOT_IMPLEMENTED, GS = Vi.ERR_MULTIPLE_CALLBACK, YS = Vi.ERR_STREAM_CANNOT_PIPE, XS = Vi.ERR_STREAM_DESTROYED, JS = Vi.ERR_STREAM_NULL_VALUES, QS = Vi.ERR_STREAM_WRITE_AFTER_END, eE = Vi.ERR_UNKNOWN_ENCODING, Sf = vl.errorOrDestroy;
    Ie()(ut, xg);
    function tE() {
    }
    function ka(t22, e2, r2) {
      xf = xf || Ln(), t22 = t22 || {}, typeof r2 != "boolean" && (r2 = e2 instanceof xf), this.objectMode = !!t22.objectMode, r2 && (this.objectMode = this.objectMode || !!t22.writableObjectMode), this.highWaterMark = ZS(this, t22, "writableHighWaterMark", r2), this.finalCalled = false, this.needDrain = false, this.ending = false, this.ended = false, this.finished = false, this.destroyed = false;
      var o2 = t22.decodeStrings === false;
      this.decodeStrings = !o2, this.defaultEncoding = t22.defaultEncoding || "utf8", this.length = 0, this.writing = false, this.corked = 0, this.sync = true, this.bufferProcessing = false, this.onwrite = function(f2) {
        sE(e2, f2);
      }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = false, this.errorEmitted = false, this.emitClose = t22.emitClose !== false, this.autoDestroy = !!t22.autoDestroy, this.bufferedRequestCount = 0, this.corkedRequestsFree = new _g(this);
    }
    ka.prototype.getBuffer = function() {
      for (var e2 = this.bufferedRequest, r2 = [];e2; )
        r2.push(e2), e2 = e2.next;
      return r2;
    };
    (function() {
      try {
        Object.defineProperty(ka.prototype, "buffer", { get: zS.deprecate(function() {
          return this.getBuffer();
        }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003") });
      } catch {
      }
    })();
    var Ts;
    typeof Symbol == "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] == "function" ? (Ts = Function.prototype[Symbol.hasInstance], Object.defineProperty(ut, Symbol.hasInstance, { value: function(e2) {
      return Ts.call(this, e2) ? true : this !== ut ? false : e2 && e2._writableState instanceof ka;
    } })) : Ts = function(e2) {
      return e2 instanceof this;
    };
    function ut(t22) {
      xf = xf || Ln();
      var e2 = this instanceof xf;
      if (!e2 && !Ts.call(ut, this))
        return new ut(t22);
      this._writableState = new ka(t22, this, e2), this.writable = true, t22 && (typeof t22.write == "function" && (this._write = t22.write), typeof t22.writev == "function" && (this._writev = t22.writev), typeof t22.destroy == "function" && (this._destroy = t22.destroy), typeof t22.final == "function" && (this._final = t22.final)), xg.call(this);
    }
    ut.prototype.pipe = function() {
      Sf(this, new YS);
    };
    function rE(t22, e2) {
      var r2 = new QS;
      Sf(t22, r2), process.nextTick(e2, r2);
    }
    function iE(t22, e2, r2, o2) {
      var f2;
      return r2 === null ? f2 = new JS : typeof r2 != "string" && !e2.objectMode && (f2 = new VS("chunk", ["string", "Buffer"], r2)), f2 ? (Sf(t22, f2), process.nextTick(o2, f2), false) : true;
    }
    ut.prototype.write = function(t22, e2, r2) {
      var o2 = this._writableState, f2 = false, p2 = !o2.objectMode && KS(t22);
      return p2 && !ks.isBuffer(t22) && (t22 = WS(t22)), typeof e2 == "function" && (r2 = e2, e2 = null), p2 ? e2 = "buffer" : e2 || (e2 = o2.defaultEncoding), typeof r2 != "function" && (r2 = tE), o2.ending ? rE(this, r2) : (p2 || iE(this, o2, t22, r2)) && (o2.pendingcb++, f2 = fE(this, o2, p2, t22, e2, r2)), f2;
    };
    ut.prototype.cork = function() {
      this._writableState.corked++;
    };
    ut.prototype.uncork = function() {
      var t22 = this._writableState;
      t22.corked && (t22.corked--, !t22.writing && !t22.corked && !t22.bufferProcessing && t22.bufferedRequest && Sg(this, t22));
    };
    ut.prototype.setDefaultEncoding = function(e2) {
      if (typeof e2 == "string" && (e2 = e2.toLowerCase()), !(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((e2 + "").toLowerCase()) > -1))
        throw new eE(e2);
      return this._writableState.defaultEncoding = e2, this;
    };
    Object.defineProperty(ut.prototype, "writableBuffer", { enumerable: false, get: function() {
      return this._writableState && this._writableState.getBuffer();
    } });
    function nE(t22, e2, r2) {
      return !t22.objectMode && t22.decodeStrings !== false && typeof e2 == "string" && (e2 = ks.from(e2, r2)), e2;
    }
    Object.defineProperty(ut.prototype, "writableHighWaterMark", { enumerable: false, get: function() {
      return this._writableState.highWaterMark;
    } });
    function fE(t22, e2, r2, o2, f2, p2) {
      if (!r2) {
        var m32 = nE(e2, o2, f2);
        o2 !== m32 && (r2 = true, f2 = "buffer", o2 = m32);
      }
      var y22 = e2.objectMode ? 1 : o2.length;
      e2.length += y22;
      var M3 = e2.length < e2.highWaterMark;
      if (M3 || (e2.needDrain = true), e2.writing || e2.corked) {
        var x5 = e2.lastBufferedRequest;
        e2.lastBufferedRequest = { chunk: o2, encoding: f2, isBuf: r2, callback: p2, next: null }, x5 ? x5.next = e2.lastBufferedRequest : e2.bufferedRequest = e2.lastBufferedRequest, e2.bufferedRequestCount += 1;
      } else
        pl(t22, e2, false, y22, o2, f2, p2);
      return M3;
    }
    function pl(t22, e2, r2, o2, f2, p2, m32) {
      e2.writelen = o2, e2.writecb = m32, e2.writing = true, e2.sync = true, e2.destroyed ? e2.onwrite(new XS("write")) : r2 ? t22._writev(f2, e2.onwrite) : t22._write(f2, p2, e2.onwrite), e2.sync = false;
    }
    function aE(t22, e2, r2, o2, f2) {
      --e2.pendingcb, r2 ? (process.nextTick(f2, o2), process.nextTick(Ta, t22, e2), t22._writableState.errorEmitted = true, Sf(t22, o2)) : (f2(o2), t22._writableState.errorEmitted = true, Sf(t22, o2), Ta(t22, e2));
    }
    function oE(t22) {
      t22.writing = false, t22.writecb = null, t22.length -= t22.writelen, t22.writelen = 0;
    }
    function sE(t22, e2) {
      var r2 = t22._writableState, o2 = r2.sync, f2 = r2.writecb;
      if (typeof f2 != "function")
        throw new GS;
      if (oE(r2), e2)
        aE(t22, r2, o2, e2, f2);
      else {
        var p2 = Eg(r2) || t22.destroyed;
        !p2 && !r2.corked && !r2.bufferProcessing && r2.bufferedRequest && Sg(t22, r2), o2 ? process.nextTick(Mg, t22, r2, p2, f2) : Mg(t22, r2, p2, f2);
      }
    }
    function Mg(t22, e2, r2, o2) {
      r2 || hE(t22, e2), e2.pendingcb--, o2(), Ta(t22, e2);
    }
    function hE(t22, e2) {
      e2.length === 0 && e2.needDrain && (e2.needDrain = false, t22.emit("drain"));
    }
    function Sg(t22, e2) {
      e2.bufferProcessing = true;
      var r2 = e2.bufferedRequest;
      if (t22._writev && r2 && r2.next) {
        var o2 = e2.bufferedRequestCount, f2 = new Array(o2), p2 = e2.corkedRequestsFree;
        p2.entry = r2;
        for (var m32 = 0, y22 = true;r2; )
          f2[m32] = r2, r2.isBuf || (y22 = false), r2 = r2.next, m32 += 1;
        f2.allBuffers = y22, pl(t22, e2, true, e2.length, f2, "", p2.finish), e2.pendingcb++, e2.lastBufferedRequest = null, p2.next ? (e2.corkedRequestsFree = p2.next, p2.next = null) : e2.corkedRequestsFree = new _g(e2), e2.bufferedRequestCount = 0;
      } else {
        for (;r2; ) {
          var { chunk: M3, encoding: x5, callback: S2 } = r2, E4 = e2.objectMode ? 1 : M3.length;
          if (pl(t22, e2, false, E4, M3, x5, S2), r2 = r2.next, e2.bufferedRequestCount--, e2.writing)
            break;
        }
        r2 === null && (e2.lastBufferedRequest = null);
      }
      e2.bufferedRequest = r2, e2.bufferProcessing = false;
    }
    ut.prototype._write = function(t22, e2, r2) {
      r2(new $S("_write()"));
    };
    ut.prototype._writev = null;
    ut.prototype.end = function(t22, e2, r2) {
      var o2 = this._writableState;
      return typeof t22 == "function" ? (r2 = t22, t22 = null, e2 = null) : typeof e2 == "function" && (r2 = e2, e2 = null), t22 != null && this.write(t22, e2), o2.corked && (o2.corked = 1, this.uncork()), o2.ending || dE(this, o2, r2), this;
    };
    Object.defineProperty(ut.prototype, "writableLength", { enumerable: false, get: function() {
      return this._writableState.length;
    } });
    function Eg(t22) {
      return t22.ending && t22.length === 0 && t22.bufferedRequest === null && !t22.finished && !t22.writing;
    }
    function uE(t22, e2) {
      t22._final(function(r2) {
        e2.pendingcb--, r2 && Sf(t22, r2), e2.prefinished = true, t22.emit("prefinish"), Ta(t22, e2);
      });
    }
    function lE(t22, e2) {
      !e2.prefinished && !e2.finalCalled && (typeof t22._final == "function" && !e2.destroyed ? (e2.pendingcb++, e2.finalCalled = true, process.nextTick(uE, t22, e2)) : (e2.prefinished = true, t22.emit("prefinish")));
    }
    function Ta(t22, e2) {
      var r2 = Eg(e2);
      if (r2 && (lE(t22, e2), e2.pendingcb === 0 && (e2.finished = true, t22.emit("finish"), e2.autoDestroy))) {
        var o2 = t22._readableState;
        (!o2 || o2.autoDestroy && o2.endEmitted) && t22.destroy();
      }
      return r2;
    }
    function dE(t22, e2, r2) {
      e2.ending = true, Ta(t22, e2), r2 && (e2.finished ? process.nextTick(r2) : t22.once("finish", r2)), e2.ended = true, t22.writable = false;
    }
    function cE(t22, e2, r2) {
      var o2 = t22.entry;
      for (t22.entry = null;o2; ) {
        var f2 = o2.callback;
        e2.pendingcb--, f2(r2), o2 = o2.next;
      }
      e2.corkedRequestsFree.next = t22;
    }
    Object.defineProperty(ut.prototype, "destroyed", { enumerable: false, get: function() {
      return this._writableState === undefined ? false : this._writableState.destroyed;
    }, set: function(e2) {
      !this._writableState || (this._writableState.destroyed = e2);
    } });
    ut.prototype.destroy = vl.destroy;
    ut.prototype._undestroy = vl.undestroy;
    ut.prototype._destroy = function(t22, e2) {
      e2(t22);
    };
  });
  Ln = T2((uk, Bg) => {
    var pE = Object.keys || function(t22) {
      var e2 = [];
      for (var r2 in t22)
        e2.push(r2);
      return e2;
    };
    Bg.exports = ti;
    var Rg = yl(), gl = bl();
    Ie()(ti, Rg);
    for (ml = pE(gl.prototype), Ls = 0;Ls < ml.length; Ls++)
      Ns = ml[Ls], ti.prototype[Ns] || (ti.prototype[Ns] = gl.prototype[Ns]);
    var ml, Ns, Ls;
    function ti(t22) {
      if (!(this instanceof ti))
        return new ti(t22);
      Rg.call(this, t22), gl.call(this, t22), this.allowHalfOpen = true, t22 && (t22.readable === false && (this.readable = false), t22.writable === false && (this.writable = false), t22.allowHalfOpen === false && (this.allowHalfOpen = false, this.once("end", vE)));
    }
    Object.defineProperty(ti.prototype, "writableHighWaterMark", { enumerable: false, get: function() {
      return this._writableState.highWaterMark;
    } });
    Object.defineProperty(ti.prototype, "writableBuffer", { enumerable: false, get: function() {
      return this._writableState && this._writableState.getBuffer();
    } });
    Object.defineProperty(ti.prototype, "writableLength", { enumerable: false, get: function() {
      return this._writableState.length;
    } });
    function vE() {
      this._writableState.ended || process.nextTick(bE, this);
    }
    function bE(t22) {
      t22.end();
    }
    Object.defineProperty(ti.prototype, "destroyed", { enumerable: false, get: function() {
      return this._readableState === undefined || this._writableState === undefined ? false : this._readableState.destroyed && this._writableState.destroyed;
    }, set: function(e2) {
      this._readableState === undefined || this._writableState === undefined || (this._readableState.destroyed = e2, this._writableState.destroyed = e2);
    } });
  });
  Ds = T2((lk, Tg) => {
    var qg = kn().codes.ERR_STREAM_PREMATURE_CLOSE;
    function mE(t22) {
      var e2 = false;
      return function() {
        if (!e2) {
          e2 = true;
          for (var r2 = arguments.length, o2 = new Array(r2), f2 = 0;f2 < r2; f2++)
            o2[f2] = arguments[f2];
          t22.apply(this, o2);
        }
      };
    }
    function gE() {
    }
    function yE(t22) {
      return t22.setHeader && typeof t22.abort == "function";
    }
    function Ig(t22, e2, r2) {
      if (typeof e2 == "function")
        return Ig(t22, null, e2);
      e2 || (e2 = {}), r2 = mE(r2 || gE);
      var o2 = e2.readable || e2.readable !== false && t22.readable, f2 = e2.writable || e2.writable !== false && t22.writable, p2 = function() {
        t22.writable || y22();
      }, m32 = t22._writableState && t22._writableState.finished, y22 = function() {
        f2 = false, m32 = true, o2 || r2.call(t22);
      }, M3 = t22._readableState && t22._readableState.endEmitted, x5 = function() {
        o2 = false, M3 = true, f2 || r2.call(t22);
      }, S2 = function(L2) {
        r2.call(t22, L2);
      }, E4 = function() {
        var L2;
        if (o2 && !M3)
          return (!t22._readableState || !t22._readableState.ended) && (L2 = new qg), r2.call(t22, L2);
        if (f2 && !m32)
          return (!t22._writableState || !t22._writableState.ended) && (L2 = new qg), r2.call(t22, L2);
      }, B5 = function() {
        t22.req.on("finish", y22);
      };
      return yE(t22) ? (t22.on("complete", y22), t22.on("abort", E4), t22.req ? B5() : t22.on("request", B5)) : f2 && !t22._writableState && (t22.on("end", p2), t22.on("close", p2)), t22.on("end", x5), t22.on("finish", y22), e2.error !== false && t22.on("error", S2), t22.on("close", E4), function() {
        t22.removeListener("complete", y22), t22.removeListener("abort", E4), t22.removeListener("request", B5), t22.req && t22.req.removeListener("finish", y22), t22.removeListener("end", p2), t22.removeListener("close", p2), t22.removeListener("finish", y22), t22.removeListener("end", x5), t22.removeListener("error", S2), t22.removeListener("close", E4);
      };
    }
    Tg.exports = Ig;
  });
  Lg = T2((dk, kg) => {
    var Ps;
    function $i(t22, e2, r2) {
      return e2 in t22 ? Object.defineProperty(t22, e2, { value: r2, enumerable: true, configurable: true, writable: true }) : t22[e2] = r2, t22;
    }
    var wE = Ds(), Gi = Symbol("lastResolve"), Nn = Symbol("lastReject"), La = Symbol("error"), Cs = Symbol("ended"), Dn = Symbol("lastPromise"), wl = Symbol("handlePromise"), Pn = Symbol("stream");
    function Yi(t22, e2) {
      return { value: t22, done: e2 };
    }
    function ME(t22) {
      var e2 = t22[Gi];
      if (e2 !== null) {
        var r2 = t22[Pn].read();
        r2 !== null && (t22[Dn] = null, t22[Gi] = null, t22[Nn] = null, e2(Yi(r2, false)));
      }
    }
    function _E(t22) {
      process.nextTick(ME, t22);
    }
    function xE(t22, e2) {
      return function(r2, o2) {
        t22.then(function() {
          if (e2[Cs]) {
            r2(Yi(undefined, true));
            return;
          }
          e2[wl](r2, o2);
        }, o2);
      };
    }
    var SE = Object.getPrototypeOf(function() {
    }), EE = Object.setPrototypeOf((Ps = { get stream() {
      return this[Pn];
    }, next: function() {
      var e2 = this, r2 = this[La];
      if (r2 !== null)
        return Promise.reject(r2);
      if (this[Cs])
        return Promise.resolve(Yi(undefined, true));
      if (this[Pn].destroyed)
        return new Promise(function(m32, y22) {
          process.nextTick(function() {
            e2[La] ? y22(e2[La]) : m32(Yi(undefined, true));
          });
        });
      var o2 = this[Dn], f2;
      if (o2)
        f2 = new Promise(xE(o2, this));
      else {
        var p2 = this[Pn].read();
        if (p2 !== null)
          return Promise.resolve(Yi(p2, false));
        f2 = new Promise(this[wl]);
      }
      return this[Dn] = f2, f2;
    } }, $i(Ps, Symbol.asyncIterator, function() {
      return this;
    }), $i(Ps, "return", function() {
      var e2 = this;
      return new Promise(function(r2, o2) {
        e2[Pn].destroy(null, function(f2) {
          if (f2) {
            o2(f2);
            return;
          }
          r2(Yi(undefined, true));
        });
      });
    }), Ps), SE), AE = function(e2) {
      var r2, o2 = Object.create(EE, (r2 = {}, $i(r2, Pn, { value: e2, writable: true }), $i(r2, Gi, { value: null, writable: true }), $i(r2, Nn, { value: null, writable: true }), $i(r2, La, { value: null, writable: true }), $i(r2, Cs, { value: e2._readableState.endEmitted, writable: true }), $i(r2, wl, { value: function(p2, m32) {
        var y22 = o2[Pn].read();
        y22 ? (o2[Dn] = null, o2[Gi] = null, o2[Nn] = null, p2(Yi(y22, false))) : (o2[Gi] = p2, o2[Nn] = m32);
      }, writable: true }), r2));
      return o2[Dn] = null, wE(e2, function(f2) {
        if (f2 && f2.code !== "ERR_STREAM_PREMATURE_CLOSE") {
          var p2 = o2[Nn];
          p2 !== null && (o2[Dn] = null, o2[Gi] = null, o2[Nn] = null, p2(f2)), o2[La] = f2;
          return;
        }
        var m32 = o2[Gi];
        m32 !== null && (o2[Dn] = null, o2[Gi] = null, o2[Nn] = null, m32(Yi(undefined, true))), o2[Cs] = true;
      }), e2.on("readable", _E.bind(null, o2)), o2;
    };
    kg.exports = AE;
  });
  Dg = T2((ck, Ng) => {
    Ng.exports = function() {
      throw new Error("Readable.from is not available in the browser");
    };
  });
  yl = T2((vk, jg) => {
    jg.exports = Oe;
    var Ef;
    Oe.ReadableState = Fg;
    var pk = ki().EventEmitter, Og = function(e2, r2) {
      return e2.listeners(r2).length;
    }, Da = hl(), Os = Ut().Buffer, RE = global.Uint8Array || function() {
    };
    function BE(t22) {
      return Os.from(t22);
    }
    function qE(t22) {
      return Os.isBuffer(t22) || t22 instanceof RE;
    }
    var Ml = $f(), De;
    Ml && Ml.debuglog ? De = Ml.debuglog("stream") : De = function() {
    };
    var IE = pg(), Bl = dl(), TE = cl(), kE = TE.getHighWaterMark, Fs = kn().codes, LE = Fs.ERR_INVALID_ARG_TYPE, NE = Fs.ERR_STREAM_PUSH_AFTER_EOF, DE = Fs.ERR_METHOD_NOT_IMPLEMENTED, PE = Fs.ERR_STREAM_UNSHIFT_AFTER_END_EVENT, Af, _l, xl;
    Ie()(Oe, Da);
    var Na = Bl.errorOrDestroy, Sl = ["error", "close", "destroy", "pause", "resume"];
    function CE(t22, e2, r2) {
      if (typeof t22.prependListener == "function")
        return t22.prependListener(e2, r2);
      !t22._events || !t22._events[e2] ? t22.on(e2, r2) : Array.isArray(t22._events[e2]) ? t22._events[e2].unshift(r2) : t22._events[e2] = [r2, t22._events[e2]];
    }
    function Fg(t22, e2, r2) {
      Ef = Ef || Ln(), t22 = t22 || {}, typeof r2 != "boolean" && (r2 = e2 instanceof Ef), this.objectMode = !!t22.objectMode, r2 && (this.objectMode = this.objectMode || !!t22.readableObjectMode), this.highWaterMark = kE(this, t22, "readableHighWaterMark", r2), this.buffer = new IE, this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = false, this.endEmitted = false, this.reading = false, this.sync = true, this.needReadable = false, this.emittedReadable = false, this.readableListening = false, this.resumeScheduled = false, this.paused = true, this.emitClose = t22.emitClose !== false, this.autoDestroy = !!t22.autoDestroy, this.destroyed = false, this.defaultEncoding = t22.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = false, this.decoder = null, this.encoding = null, t22.encoding && (Af || (Af = (Qf(), ur(Jf)).StringDecoder), this.decoder = new Af(t22.encoding), this.encoding = t22.encoding);
    }
    function Oe(t22) {
      if (Ef = Ef || Ln(), !(this instanceof Oe))
        return new Oe(t22);
      var e2 = this instanceof Ef;
      this._readableState = new Fg(t22, this, e2), this.readable = true, t22 && (typeof t22.read == "function" && (this._read = t22.read), typeof t22.destroy == "function" && (this._destroy = t22.destroy)), Da.call(this);
    }
    Object.defineProperty(Oe.prototype, "destroyed", { enumerable: false, get: function() {
      return this._readableState === undefined ? false : this._readableState.destroyed;
    }, set: function(e2) {
      !this._readableState || (this._readableState.destroyed = e2);
    } });
    Oe.prototype.destroy = Bl.destroy;
    Oe.prototype._undestroy = Bl.undestroy;
    Oe.prototype._destroy = function(t22, e2) {
      e2(t22);
    };
    Oe.prototype.push = function(t22, e2) {
      var r2 = this._readableState, o2;
      return r2.objectMode ? o2 = true : typeof t22 == "string" && (e2 = e2 || r2.defaultEncoding, e2 !== r2.encoding && (t22 = Os.from(t22, e2), e2 = ""), o2 = true), Ug(this, t22, e2, false, o2);
    };
    Oe.prototype.unshift = function(t22) {
      return Ug(this, t22, null, true, false);
    };
    function Ug(t22, e2, r2, o2, f2) {
      De("readableAddChunk", e2);
      var p2 = t22._readableState;
      if (e2 === null)
        p2.reading = false, UE(t22, p2);
      else {
        var m32;
        if (f2 || (m32 = OE(p2, e2)), m32)
          Na(t22, m32);
        else if (p2.objectMode || e2 && e2.length > 0)
          if (typeof e2 != "string" && !p2.objectMode && Object.getPrototypeOf(e2) !== Os.prototype && (e2 = BE(e2)), o2)
            p2.endEmitted ? Na(t22, new PE) : El(t22, p2, e2, true);
          else if (p2.ended)
            Na(t22, new NE);
          else {
            if (p2.destroyed)
              return false;
            p2.reading = false, p2.decoder && !r2 ? (e2 = p2.decoder.write(e2), p2.objectMode || e2.length !== 0 ? El(t22, p2, e2, false) : Rl(t22, p2)) : El(t22, p2, e2, false);
          }
        else
          o2 || (p2.reading = false, Rl(t22, p2));
      }
      return !p2.ended && (p2.length < p2.highWaterMark || p2.length === 0);
    }
    function El(t22, e2, r2, o2) {
      e2.flowing && e2.length === 0 && !e2.sync ? (e2.awaitDrain = 0, t22.emit("data", r2)) : (e2.length += e2.objectMode ? 1 : r2.length, o2 ? e2.buffer.unshift(r2) : e2.buffer.push(r2), e2.needReadable && Us(t22)), Rl(t22, e2);
    }
    function OE(t22, e2) {
      var r2;
      return !qE(e2) && typeof e2 != "string" && e2 !== undefined && !t22.objectMode && (r2 = new LE("chunk", ["string", "Buffer", "Uint8Array"], e2)), r2;
    }
    Oe.prototype.isPaused = function() {
      return this._readableState.flowing === false;
    };
    Oe.prototype.setEncoding = function(t22) {
      Af || (Af = (Qf(), ur(Jf)).StringDecoder);
      var e2 = new Af(t22);
      this._readableState.decoder = e2, this._readableState.encoding = this._readableState.decoder.encoding;
      for (var r2 = this._readableState.buffer.head, o2 = "";r2 !== null; )
        o2 += e2.write(r2.data), r2 = r2.next;
      return this._readableState.buffer.clear(), o2 !== "" && this._readableState.buffer.push(o2), this._readableState.length = o2.length, this;
    };
    var Pg = 1073741824;
    function FE(t22) {
      return t22 >= Pg ? t22 = Pg : (t22--, t22 |= t22 >>> 1, t22 |= t22 >>> 2, t22 |= t22 >>> 4, t22 |= t22 >>> 8, t22 |= t22 >>> 16, t22++), t22;
    }
    function Cg(t22, e2) {
      return t22 <= 0 || e2.length === 0 && e2.ended ? 0 : e2.objectMode ? 1 : t22 !== t22 ? e2.flowing && e2.length ? e2.buffer.head.data.length : e2.length : (t22 > e2.highWaterMark && (e2.highWaterMark = FE(t22)), t22 <= e2.length ? t22 : e2.ended ? e2.length : (e2.needReadable = true, 0));
    }
    Oe.prototype.read = function(t22) {
      De("read", t22), t22 = parseInt(t22, 10);
      var e2 = this._readableState, r2 = t22;
      if (t22 !== 0 && (e2.emittedReadable = false), t22 === 0 && e2.needReadable && ((e2.highWaterMark !== 0 ? e2.length >= e2.highWaterMark : e2.length > 0) || e2.ended))
        return De("read: emitReadable", e2.length, e2.ended), e2.length === 0 && e2.ended ? Al(this) : Us(this), null;
      if (t22 = Cg(t22, e2), t22 === 0 && e2.ended)
        return e2.length === 0 && Al(this), null;
      var o2 = e2.needReadable;
      De("need readable", o2), (e2.length === 0 || e2.length - t22 < e2.highWaterMark) && (o2 = true, De("length less than watermark", o2)), e2.ended || e2.reading ? (o2 = false, De("reading or ended", o2)) : o2 && (De("do read"), e2.reading = true, e2.sync = true, e2.length === 0 && (e2.needReadable = true), this._read(e2.highWaterMark), e2.sync = false, e2.reading || (t22 = Cg(r2, e2)));
      var f2;
      return t22 > 0 ? f2 = Wg(t22, e2) : f2 = null, f2 === null ? (e2.needReadable = e2.length <= e2.highWaterMark, t22 = 0) : (e2.length -= t22, e2.awaitDrain = 0), e2.length === 0 && (e2.ended || (e2.needReadable = true), r2 !== t22 && e2.ended && Al(this)), f2 !== null && this.emit("data", f2), f2;
    };
    function UE(t22, e2) {
      if (De("onEofChunk"), !e2.ended) {
        if (e2.decoder) {
          var r2 = e2.decoder.end();
          r2 && r2.length && (e2.buffer.push(r2), e2.length += e2.objectMode ? 1 : r2.length);
        }
        e2.ended = true, e2.sync ? Us(t22) : (e2.needReadable = false, e2.emittedReadable || (e2.emittedReadable = true, zg(t22)));
      }
    }
    function Us(t22) {
      var e2 = t22._readableState;
      De("emitReadable", e2.needReadable, e2.emittedReadable), e2.needReadable = false, e2.emittedReadable || (De("emitReadable", e2.flowing), e2.emittedReadable = true, process.nextTick(zg, t22));
    }
    function zg(t22) {
      var e2 = t22._readableState;
      De("emitReadable_", e2.destroyed, e2.length, e2.ended), !e2.destroyed && (e2.length || e2.ended) && (t22.emit("readable"), e2.emittedReadable = false), e2.needReadable = !e2.flowing && !e2.ended && e2.length <= e2.highWaterMark, ql(t22);
    }
    function Rl(t22, e2) {
      e2.readingMore || (e2.readingMore = true, process.nextTick(zE, t22, e2));
    }
    function zE(t22, e2) {
      for (;!e2.reading && !e2.ended && (e2.length < e2.highWaterMark || e2.flowing && e2.length === 0); ) {
        var r2 = e2.length;
        if (De("maybeReadMore read 0"), t22.read(0), r2 === e2.length)
          break;
      }
      e2.readingMore = false;
    }
    Oe.prototype._read = function(t22) {
      Na(this, new DE("_read()"));
    };
    Oe.prototype.pipe = function(t22, e2) {
      var r2 = this, o2 = this._readableState;
      switch (o2.pipesCount) {
        case 0:
          o2.pipes = t22;
          break;
        case 1:
          o2.pipes = [o2.pipes, t22];
          break;
        default:
          o2.pipes.push(t22);
          break;
      }
      o2.pipesCount += 1, De("pipe count=%d opts=%j", o2.pipesCount, e2);
      var f2 = (!e2 || e2.end !== false) && t22 !== process.stdout && t22 !== process.stderr, p2 = f2 ? y22 : ge;
      o2.endEmitted ? process.nextTick(p2) : r2.once("end", p2), t22.on("unpipe", m32);
      function m32(_e, N4) {
        De("onunpipe"), _e === r2 && N4 && N4.hasUnpiped === false && (N4.hasUnpiped = true, S2());
      }
      function y22() {
        De("onend"), t22.end();
      }
      var M3 = HE(r2);
      t22.on("drain", M3);
      var x5 = false;
      function S2() {
        De("cleanup"), t22.removeListener("close", q), t22.removeListener("finish", L2), t22.removeListener("drain", M3), t22.removeListener("error", B5), t22.removeListener("unpipe", m32), r2.removeListener("end", y22), r2.removeListener("end", ge), r2.removeListener("data", E4), x5 = true, o2.awaitDrain && (!t22._writableState || t22._writableState.needDrain) && M3();
      }
      r2.on("data", E4);
      function E4(_e) {
        De("ondata");
        var N4 = t22.write(_e);
        De("dest.write", N4), N4 === false && ((o2.pipesCount === 1 && o2.pipes === t22 || o2.pipesCount > 1 && Kg(o2.pipes, t22) !== -1) && !x5 && (De("false write response, pause", o2.awaitDrain), o2.awaitDrain++), r2.pause());
      }
      function B5(_e) {
        De("onerror", _e), ge(), t22.removeListener("error", B5), Og(t22, "error") === 0 && Na(t22, _e);
      }
      CE(t22, "error", B5);
      function q() {
        t22.removeListener("finish", L2), ge();
      }
      t22.once("close", q);
      function L2() {
        De("onfinish"), t22.removeListener("close", q), ge();
      }
      t22.once("finish", L2);
      function ge() {
        De("unpipe"), r2.unpipe(t22);
      }
      return t22.emit("pipe", r2), o2.flowing || (De("pipe resume"), r2.resume()), t22;
    };
    function HE(t22) {
      return function() {
        var r2 = t22._readableState;
        De("pipeOnDrain", r2.awaitDrain), r2.awaitDrain && r2.awaitDrain--, r2.awaitDrain === 0 && Og(t22, "data") && (r2.flowing = true, ql(t22));
      };
    }
    Oe.prototype.unpipe = function(t22) {
      var e2 = this._readableState, r2 = { hasUnpiped: false };
      if (e2.pipesCount === 0)
        return this;
      if (e2.pipesCount === 1)
        return t22 && t22 !== e2.pipes ? this : (t22 || (t22 = e2.pipes), e2.pipes = null, e2.pipesCount = 0, e2.flowing = false, t22 && t22.emit("unpipe", this, r2), this);
      if (!t22) {
        var { pipes: o2, pipesCount: f2 } = e2;
        e2.pipes = null, e2.pipesCount = 0, e2.flowing = false;
        for (var p2 = 0;p2 < f2; p2++)
          o2[p2].emit("unpipe", this, { hasUnpiped: false });
        return this;
      }
      var m32 = Kg(e2.pipes, t22);
      return m32 === -1 ? this : (e2.pipes.splice(m32, 1), e2.pipesCount -= 1, e2.pipesCount === 1 && (e2.pipes = e2.pipes[0]), t22.emit("unpipe", this, r2), this);
    };
    Oe.prototype.on = function(t22, e2) {
      var r2 = Da.prototype.on.call(this, t22, e2), o2 = this._readableState;
      return t22 === "data" ? (o2.readableListening = this.listenerCount("readable") > 0, o2.flowing !== false && this.resume()) : t22 === "readable" && !o2.endEmitted && !o2.readableListening && (o2.readableListening = o2.needReadable = true, o2.flowing = false, o2.emittedReadable = false, De("on readable", o2.length, o2.reading), o2.length ? Us(this) : o2.reading || process.nextTick(WE, this)), r2;
    };
    Oe.prototype.addListener = Oe.prototype.on;
    Oe.prototype.removeListener = function(t22, e2) {
      var r2 = Da.prototype.removeListener.call(this, t22, e2);
      return t22 === "readable" && process.nextTick(Hg, this), r2;
    };
    Oe.prototype.removeAllListeners = function(t22) {
      var e2 = Da.prototype.removeAllListeners.apply(this, arguments);
      return (t22 === "readable" || t22 === undefined) && process.nextTick(Hg, this), e2;
    };
    function Hg(t22) {
      var e2 = t22._readableState;
      e2.readableListening = t22.listenerCount("readable") > 0, e2.resumeScheduled && !e2.paused ? e2.flowing = true : t22.listenerCount("data") > 0 && t22.resume();
    }
    function WE(t22) {
      De("readable nexttick read 0"), t22.read(0);
    }
    Oe.prototype.resume = function() {
      var t22 = this._readableState;
      return t22.flowing || (De("resume"), t22.flowing = !t22.readableListening, KE(this, t22)), t22.paused = false, this;
    };
    function KE(t22, e2) {
      e2.resumeScheduled || (e2.resumeScheduled = true, process.nextTick(jE, t22, e2));
    }
    function jE(t22, e2) {
      De("resume", e2.reading), e2.reading || t22.read(0), e2.resumeScheduled = false, t22.emit("resume"), ql(t22), e2.flowing && !e2.reading && t22.read(0);
    }
    Oe.prototype.pause = function() {
      return De("call pause flowing=%j", this._readableState.flowing), this._readableState.flowing !== false && (De("pause"), this._readableState.flowing = false, this.emit("pause")), this._readableState.paused = true, this;
    };
    function ql(t22) {
      var e2 = t22._readableState;
      for (De("flow", e2.flowing);e2.flowing && t22.read() !== null; )
        ;
    }
    Oe.prototype.wrap = function(t22) {
      var e2 = this, r2 = this._readableState, o2 = false;
      t22.on("end", function() {
        if (De("wrapped end"), r2.decoder && !r2.ended) {
          var m32 = r2.decoder.end();
          m32 && m32.length && e2.push(m32);
        }
        e2.push(null);
      }), t22.on("data", function(m32) {
        if (De("wrapped data"), r2.decoder && (m32 = r2.decoder.write(m32)), !(r2.objectMode && m32 == null) && !(!r2.objectMode && (!m32 || !m32.length))) {
          var y22 = e2.push(m32);
          y22 || (o2 = true, t22.pause());
        }
      });
      for (var f2 in t22)
        this[f2] === undefined && typeof t22[f2] == "function" && (this[f2] = function(y22) {
          return function() {
            return t22[y22].apply(t22, arguments);
          };
        }(f2));
      for (var p2 = 0;p2 < Sl.length; p2++)
        t22.on(Sl[p2], this.emit.bind(this, Sl[p2]));
      return this._read = function(m32) {
        De("wrapped _read", m32), o2 && (o2 = false, t22.resume());
      }, this;
    };
    typeof Symbol == "function" && (Oe.prototype[Symbol.asyncIterator] = function() {
      return _l === undefined && (_l = Lg()), _l(this);
    });
    Object.defineProperty(Oe.prototype, "readableHighWaterMark", { enumerable: false, get: function() {
      return this._readableState.highWaterMark;
    } });
    Object.defineProperty(Oe.prototype, "readableBuffer", { enumerable: false, get: function() {
      return this._readableState && this._readableState.buffer;
    } });
    Object.defineProperty(Oe.prototype, "readableFlowing", { enumerable: false, get: function() {
      return this._readableState.flowing;
    }, set: function(e2) {
      this._readableState && (this._readableState.flowing = e2);
    } });
    Oe._fromList = Wg;
    Object.defineProperty(Oe.prototype, "readableLength", { enumerable: false, get: function() {
      return this._readableState.length;
    } });
    function Wg(t22, e2) {
      if (e2.length === 0)
        return null;
      var r2;
      return e2.objectMode ? r2 = e2.buffer.shift() : !t22 || t22 >= e2.length ? (e2.decoder ? r2 = e2.buffer.join("") : e2.buffer.length === 1 ? r2 = e2.buffer.first() : r2 = e2.buffer.concat(e2.length), e2.buffer.clear()) : r2 = e2.buffer.consume(t22, e2.decoder), r2;
    }
    function Al(t22) {
      var e2 = t22._readableState;
      De("endReadable", e2.endEmitted), e2.endEmitted || (e2.ended = true, process.nextTick(ZE, e2, t22));
    }
    function ZE(t22, e2) {
      if (De("endReadableNT", t22.endEmitted, t22.length), !t22.endEmitted && t22.length === 0 && (t22.endEmitted = true, e2.readable = false, e2.emit("end"), t22.autoDestroy)) {
        var r2 = e2._writableState;
        (!r2 || r2.autoDestroy && r2.finished) && e2.destroy();
      }
    }
    typeof Symbol == "function" && (Oe.from = function(t22, e2) {
      return xl === undefined && (xl = Dg()), xl(Oe, t22, e2);
    });
    function Kg(t22, e2) {
      for (var r2 = 0, o2 = t22.length;r2 < o2; r2++)
        if (t22[r2] === e2)
          return r2;
      return -1;
    }
  });
  Il = T2((bk, Vg) => {
    Vg.exports = Ei;
    var zs = kn().codes, VE = zs.ERR_METHOD_NOT_IMPLEMENTED, $E = zs.ERR_MULTIPLE_CALLBACK, GE = zs.ERR_TRANSFORM_ALREADY_TRANSFORMING, YE = zs.ERR_TRANSFORM_WITH_LENGTH_0, Hs = Ln();
    Ie()(Ei, Hs);
    function XE(t22, e2) {
      var r2 = this._transformState;
      r2.transforming = false;
      var o2 = r2.writecb;
      if (o2 === null)
        return this.emit("error", new $E);
      r2.writechunk = null, r2.writecb = null, e2 != null && this.push(e2), o2(t22);
      var f2 = this._readableState;
      f2.reading = false, (f2.needReadable || f2.length < f2.highWaterMark) && this._read(f2.highWaterMark);
    }
    function Ei(t22) {
      if (!(this instanceof Ei))
        return new Ei(t22);
      Hs.call(this, t22), this._transformState = { afterTransform: XE.bind(this), needTransform: false, transforming: false, writecb: null, writechunk: null, writeencoding: null }, this._readableState.needReadable = true, this._readableState.sync = false, t22 && (typeof t22.transform == "function" && (this._transform = t22.transform), typeof t22.flush == "function" && (this._flush = t22.flush)), this.on("prefinish", JE);
    }
    function JE() {
      var t22 = this;
      typeof this._flush == "function" && !this._readableState.destroyed ? this._flush(function(e2, r2) {
        Zg(t22, e2, r2);
      }) : Zg(this, null, null);
    }
    Ei.prototype.push = function(t22, e2) {
      return this._transformState.needTransform = false, Hs.prototype.push.call(this, t22, e2);
    };
    Ei.prototype._transform = function(t22, e2, r2) {
      r2(new VE("_transform()"));
    };
    Ei.prototype._write = function(t22, e2, r2) {
      var o2 = this._transformState;
      if (o2.writecb = r2, o2.writechunk = t22, o2.writeencoding = e2, !o2.transforming) {
        var f2 = this._readableState;
        (o2.needTransform || f2.needReadable || f2.length < f2.highWaterMark) && this._read(f2.highWaterMark);
      }
    };
    Ei.prototype._read = function(t22) {
      var e2 = this._transformState;
      e2.writechunk !== null && !e2.transforming ? (e2.transforming = true, this._transform(e2.writechunk, e2.writeencoding, e2.afterTransform)) : e2.needTransform = true;
    };
    Ei.prototype._destroy = function(t22, e2) {
      Hs.prototype._destroy.call(this, t22, function(r2) {
        e2(r2);
      });
    };
    function Zg(t22, e2, r2) {
      if (e2)
        return t22.emit("error", e2);
      if (r2 != null && t22.push(r2), t22._writableState.length)
        throw new YE;
      if (t22._transformState.transforming)
        throw new GE;
      return t22.push(null);
    }
  });
  Yg = T2((mk, Gg) => {
    Gg.exports = Pa;
    var $g = Il();
    Ie()(Pa, $g);
    function Pa(t22) {
      if (!(this instanceof Pa))
        return new Pa(t22);
      $g.call(this, t22);
    }
    Pa.prototype._transform = function(t22, e2, r2) {
      r2(null, t22);
    };
  });
  t2 = T2((gk, e2) => {
    var Tl;
    function QE(t3) {
      var e3 = false;
      return function() {
        e3 || (e3 = true, t3.apply(undefined, arguments));
      };
    }
    var Qg = kn().codes, eA = Qg.ERR_MISSING_ARGS, tA = Qg.ERR_STREAM_DESTROYED;
    function Xg(t3) {
      if (t3)
        throw t3;
    }
    function rA(t3) {
      return t3.setHeader && typeof t3.abort == "function";
    }
    function iA(t3, e3, r2, o2) {
      o2 = QE(o2);
      var f2 = false;
      t3.on("close", function() {
        f2 = true;
      }), Tl === undefined && (Tl = Ds()), Tl(t3, { readable: e3, writable: r2 }, function(m32) {
        if (m32)
          return o2(m32);
        f2 = true, o2();
      });
      var p2 = false;
      return function(m32) {
        if (!f2 && !p2) {
          if (p2 = true, rA(t3))
            return t3.abort();
          if (typeof t3.destroy == "function")
            return t3.destroy();
          o2(m32 || new tA("pipe"));
        }
      };
    }
    function Jg(t3) {
      t3();
    }
    function nA(t3, e3) {
      return t3.pipe(e3);
    }
    function fA(t3) {
      return !t3.length || typeof t3[t3.length - 1] != "function" ? Xg : t3.pop();
    }
    function aA() {
      for (var t3 = arguments.length, e3 = new Array(t3), r2 = 0;r2 < t3; r2++)
        e3[r2] = arguments[r2];
      var o2 = fA(e3);
      if (Array.isArray(e3[0]) && (e3 = e3[0]), e3.length < 2)
        throw new eA("streams");
      var f2, p2 = e3.map(function(m32, y22) {
        var M3 = y22 < e3.length - 1, x5 = y22 > 0;
        return iA(m32, M3, x5, function(S2) {
          f2 || (f2 = S2), S2 && p2.forEach(Jg), !M3 && (p2.forEach(Jg), o2(f2));
        });
      });
      return e3.reduce(nA);
    }
    e2.exports = aA;
  });
  i2 = T2((Mr, r2) => {
    Mr = r2.exports = yl();
    Mr.Stream = Mr;
    Mr.Readable = Mr;
    Mr.Writable = bl();
    Mr.Duplex = Ln();
    Mr.Transform = Il();
    Mr.PassThrough = Yg();
    Mr.finished = Ds();
    Mr.pipeline = t2();
  });
  Ws = T2((n22, kl) => {
    (function(t3, e2) {
      function r2(h3, s3) {
        if (!h3)
          throw new Error(s3 || "Assertion failed");
      }
      function o2(h3, s3) {
        h3.super_ = s3;
        var u4 = function() {
        };
        u4.prototype = s3.prototype, h3.prototype = new u4, h3.prototype.constructor = h3;
      }
      function f2(h3, s3, u4) {
        if (f2.isBN(h3))
          return h3;
        this.negative = 0, this.words = null, this.length = 0, this.red = null, h3 !== null && ((s3 === "le" || s3 === "be") && (u4 = s3, s3 = 10), this._init(h3 || 0, s3 || 10, u4 || "be"));
      }
      typeof t3 == "object" ? t3.exports = f2 : e2.BN = f2, f2.BN = f2, f2.wordSize = 26;
      var p2;
      try {
        typeof window < "u" && typeof window.Buffer < "u" ? p2 = window.Buffer : p2 = ji().Buffer;
      } catch {
      }
      f2.isBN = function(s3) {
        return s3 instanceof f2 ? true : s3 !== null && typeof s3 == "object" && s3.constructor.wordSize === f2.wordSize && Array.isArray(s3.words);
      }, f2.max = function(s3, u4) {
        return s3.cmp(u4) > 0 ? s3 : u4;
      }, f2.min = function(s3, u4) {
        return s3.cmp(u4) < 0 ? s3 : u4;
      }, f2.prototype._init = function(s3, u4, c2) {
        if (typeof s3 == "number")
          return this._initNumber(s3, u4, c2);
        if (typeof s3 == "object")
          return this._initArray(s3, u4, c2);
        u4 === "hex" && (u4 = 16), r2(u4 === (u4 | 0) && u4 >= 2 && u4 <= 36), s3 = s3.toString().replace(/\s+/g, "");
        var b3 = 0;
        s3[0] === "-" && (b3++, this.negative = 1), b3 < s3.length && (u4 === 16 ? this._parseHex(s3, b3, c2) : (this._parseBase(s3, u4, b3), c2 === "le" && this._initArray(this.toArray(), u4, c2)));
      }, f2.prototype._initNumber = function(s3, u4, c2) {
        s3 < 0 && (this.negative = 1, s3 = -s3), s3 < 67108864 ? (this.words = [s3 & 67108863], this.length = 1) : s3 < 4503599627370496 ? (this.words = [s3 & 67108863, s3 / 67108864 & 67108863], this.length = 2) : (r2(s3 < 9007199254740992), this.words = [s3 & 67108863, s3 / 67108864 & 67108863, 1], this.length = 3), c2 === "le" && this._initArray(this.toArray(), u4, c2);
      }, f2.prototype._initArray = function(s3, u4, c2) {
        if (r2(typeof s3.length == "number"), s3.length <= 0)
          return this.words = [0], this.length = 1, this;
        this.length = Math.ceil(s3.length / 3), this.words = new Array(this.length);
        for (var b3 = 0;b3 < this.length; b3++)
          this.words[b3] = 0;
        var l3, n32, d2 = 0;
        if (c2 === "be")
          for (b3 = s3.length - 1, l3 = 0;b3 >= 0; b3 -= 3)
            n32 = s3[b3] | s3[b3 - 1] << 8 | s3[b3 - 2] << 16, this.words[l3] |= n32 << d2 & 67108863, this.words[l3 + 1] = n32 >>> 26 - d2 & 67108863, d2 += 24, d2 >= 26 && (d2 -= 26, l3++);
        else if (c2 === "le")
          for (b3 = 0, l3 = 0;b3 < s3.length; b3 += 3)
            n32 = s3[b3] | s3[b3 + 1] << 8 | s3[b3 + 2] << 16, this.words[l3] |= n32 << d2 & 67108863, this.words[l3 + 1] = n32 >>> 26 - d2 & 67108863, d2 += 24, d2 >= 26 && (d2 -= 26, l3++);
        return this._strip();
      };
      function m32(h3, s3) {
        var u4 = h3.charCodeAt(s3);
        if (u4 >= 48 && u4 <= 57)
          return u4 - 48;
        if (u4 >= 65 && u4 <= 70)
          return u4 - 55;
        if (u4 >= 97 && u4 <= 102)
          return u4 - 87;
        r2(false, "Invalid character in " + h3);
      }
      function y22(h3, s3, u4) {
        var c2 = m32(h3, u4);
        return u4 - 1 >= s3 && (c2 |= m32(h3, u4 - 1) << 4), c2;
      }
      f2.prototype._parseHex = function(s3, u4, c2) {
        this.length = Math.ceil((s3.length - u4) / 6), this.words = new Array(this.length);
        for (var b3 = 0;b3 < this.length; b3++)
          this.words[b3] = 0;
        var l3 = 0, n32 = 0, d2;
        if (c2 === "be")
          for (b3 = s3.length - 1;b3 >= u4; b3 -= 2)
            d2 = y22(s3, u4, b3) << l3, this.words[n32] |= d2 & 67108863, l3 >= 18 ? (l3 -= 18, n32 += 1, this.words[n32] |= d2 >>> 26) : l3 += 8;
        else {
          var w3 = s3.length - u4;
          for (b3 = w3 % 2 === 0 ? u4 + 1 : u4;b3 < s3.length; b3 += 2)
            d2 = y22(s3, u4, b3) << l3, this.words[n32] |= d2 & 67108863, l3 >= 18 ? (l3 -= 18, n32 += 1, this.words[n32] |= d2 >>> 26) : l3 += 8;
        }
        this._strip();
      };
      function M3(h3, s3, u4, c2) {
        for (var b3 = 0, l3 = 0, n32 = Math.min(h3.length, u4), d2 = s3;d2 < n32; d2++) {
          var w3 = h3.charCodeAt(d2) - 48;
          b3 *= c2, w3 >= 49 ? l3 = w3 - 49 + 10 : w3 >= 17 ? l3 = w3 - 17 + 10 : l3 = w3, r2(w3 >= 0 && l3 < c2, "Invalid character"), b3 += l3;
        }
        return b3;
      }
      f2.prototype._parseBase = function(s3, u4, c2) {
        this.words = [0], this.length = 1;
        for (var b3 = 0, l3 = 1;l3 <= 67108863; l3 *= u4)
          b3++;
        b3--, l3 = l3 / u4 | 0;
        for (var n32 = s3.length - c2, d2 = n32 % b3, w3 = Math.min(n32, n32 - d2) + c2, g2 = 0, _5 = c2;_5 < w3; _5 += b3)
          g2 = M3(s3, _5, _5 + b3, u4), this.imuln(l3), this.words[0] + g2 < 67108864 ? this.words[0] += g2 : this._iaddn(g2);
        if (d2 !== 0) {
          var A6 = 1;
          for (g2 = M3(s3, _5, s3.length, u4), _5 = 0;_5 < d2; _5++)
            A6 *= u4;
          this.imuln(A6), this.words[0] + g2 < 67108864 ? this.words[0] += g2 : this._iaddn(g2);
        }
        this._strip();
      }, f2.prototype.copy = function(s3) {
        s3.words = new Array(this.length);
        for (var u4 = 0;u4 < this.length; u4++)
          s3.words[u4] = this.words[u4];
        s3.length = this.length, s3.negative = this.negative, s3.red = this.red;
      };
      function x5(h3, s3) {
        h3.words = s3.words, h3.length = s3.length, h3.negative = s3.negative, h3.red = s3.red;
      }
      if (f2.prototype._move = function(s3) {
        x5(s3, this);
      }, f2.prototype.clone = function() {
        var s3 = new f2(null);
        return this.copy(s3), s3;
      }, f2.prototype._expand = function(s3) {
        for (;this.length < s3; )
          this.words[this.length++] = 0;
        return this;
      }, f2.prototype._strip = function() {
        for (;this.length > 1 && this.words[this.length - 1] === 0; )
          this.length--;
        return this._normSign();
      }, f2.prototype._normSign = function() {
        return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
      }, typeof Symbol < "u" && typeof Symbol.for == "function")
        try {
          f2.prototype[Symbol.for("nodejs.util.inspect.custom")] = S2;
        } catch {
          f2.prototype.inspect = S2;
        }
      else
        f2.prototype.inspect = S2;
      function S2() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var E4 = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"], B5 = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], q = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
      f2.prototype.toString = function(s3, u4) {
        s3 = s3 || 10, u4 = u4 | 0 || 1;
        var c2;
        if (s3 === 16 || s3 === "hex") {
          c2 = "";
          for (var b3 = 0, l3 = 0, n32 = 0;n32 < this.length; n32++) {
            var d2 = this.words[n32], w3 = ((d2 << b3 | l3) & 16777215).toString(16);
            l3 = d2 >>> 24 - b3 & 16777215, b3 += 2, b3 >= 26 && (b3 -= 26, n32--), l3 !== 0 || n32 !== this.length - 1 ? c2 = E4[6 - w3.length] + w3 + c2 : c2 = w3 + c2;
          }
          for (l3 !== 0 && (c2 = l3.toString(16) + c2);c2.length % u4 !== 0; )
            c2 = "0" + c2;
          return this.negative !== 0 && (c2 = "-" + c2), c2;
        }
        if (s3 === (s3 | 0) && s3 >= 2 && s3 <= 36) {
          var g2 = B5[s3], _5 = q[s3];
          c2 = "";
          var A6 = this.clone();
          for (A6.negative = 0;!A6.isZero(); ) {
            var R4 = A6.modrn(_5).toString(s3);
            A6 = A6.idivn(_5), A6.isZero() ? c2 = R4 + c2 : c2 = E4[g2 - R4.length] + R4 + c2;
          }
          for (this.isZero() && (c2 = "0" + c2);c2.length % u4 !== 0; )
            c2 = "0" + c2;
          return this.negative !== 0 && (c2 = "-" + c2), c2;
        }
        r2(false, "Base should be between 2 and 36");
      }, f2.prototype.toNumber = function() {
        var s3 = this.words[0];
        return this.length === 2 ? s3 += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? s3 += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && r2(false, "Number can only safely store up to 53 bits"), this.negative !== 0 ? -s3 : s3;
      }, f2.prototype.toJSON = function() {
        return this.toString(16, 2);
      }, p2 && (f2.prototype.toBuffer = function(s3, u4) {
        return this.toArrayLike(p2, s3, u4);
      }), f2.prototype.toArray = function(s3, u4) {
        return this.toArrayLike(Array, s3, u4);
      };
      var L2 = function(s3, u4) {
        return s3.allocUnsafe ? s3.allocUnsafe(u4) : new s3(u4);
      };
      f2.prototype.toArrayLike = function(s3, u4, c2) {
        this._strip();
        var b3 = this.byteLength(), l3 = c2 || Math.max(1, b3);
        r2(b3 <= l3, "byte array longer than desired length"), r2(l3 > 0, "Requested array length <= 0");
        var n32 = L2(s3, l3), d2 = u4 === "le" ? "LE" : "BE";
        return this["_toArrayLike" + d2](n32, b3), n32;
      }, f2.prototype._toArrayLikeLE = function(s3, u4) {
        for (var c2 = 0, b3 = 0, l3 = 0, n32 = 0;l3 < this.length; l3++) {
          var d2 = this.words[l3] << n32 | b3;
          s3[c2++] = d2 & 255, c2 < s3.length && (s3[c2++] = d2 >> 8 & 255), c2 < s3.length && (s3[c2++] = d2 >> 16 & 255), n32 === 6 ? (c2 < s3.length && (s3[c2++] = d2 >> 24 & 255), b3 = 0, n32 = 0) : (b3 = d2 >>> 24, n32 += 2);
        }
        if (c2 < s3.length)
          for (s3[c2++] = b3;c2 < s3.length; )
            s3[c2++] = 0;
      }, f2.prototype._toArrayLikeBE = function(s3, u4) {
        for (var c2 = s3.length - 1, b3 = 0, l3 = 0, n32 = 0;l3 < this.length; l3++) {
          var d2 = this.words[l3] << n32 | b3;
          s3[c2--] = d2 & 255, c2 >= 0 && (s3[c2--] = d2 >> 8 & 255), c2 >= 0 && (s3[c2--] = d2 >> 16 & 255), n32 === 6 ? (c2 >= 0 && (s3[c2--] = d2 >> 24 & 255), b3 = 0, n32 = 0) : (b3 = d2 >>> 24, n32 += 2);
        }
        if (c2 >= 0)
          for (s3[c2--] = b3;c2 >= 0; )
            s3[c2--] = 0;
      }, Math.clz32 ? f2.prototype._countBits = function(s3) {
        return 32 - Math.clz32(s3);
      } : f2.prototype._countBits = function(s3) {
        var u4 = s3, c2 = 0;
        return u4 >= 4096 && (c2 += 13, u4 >>>= 13), u4 >= 64 && (c2 += 7, u4 >>>= 7), u4 >= 8 && (c2 += 4, u4 >>>= 4), u4 >= 2 && (c2 += 2, u4 >>>= 2), c2 + u4;
      }, f2.prototype._zeroBits = function(s3) {
        if (s3 === 0)
          return 26;
        var u4 = s3, c2 = 0;
        return (u4 & 8191) === 0 && (c2 += 13, u4 >>>= 13), (u4 & 127) === 0 && (c2 += 7, u4 >>>= 7), (u4 & 15) === 0 && (c2 += 4, u4 >>>= 4), (u4 & 3) === 0 && (c2 += 2, u4 >>>= 2), (u4 & 1) === 0 && c2++, c2;
      }, f2.prototype.bitLength = function() {
        var s3 = this.words[this.length - 1], u4 = this._countBits(s3);
        return (this.length - 1) * 26 + u4;
      };
      function ge(h3) {
        for (var s3 = new Array(h3.bitLength()), u4 = 0;u4 < s3.length; u4++) {
          var c2 = u4 / 26 | 0, b3 = u4 % 26;
          s3[u4] = h3.words[c2] >>> b3 & 1;
        }
        return s3;
      }
      f2.prototype.zeroBits = function() {
        if (this.isZero())
          return 0;
        for (var s3 = 0, u4 = 0;u4 < this.length; u4++) {
          var c2 = this._zeroBits(this.words[u4]);
          if (s3 += c2, c2 !== 26)
            break;
        }
        return s3;
      }, f2.prototype.byteLength = function() {
        return Math.ceil(this.bitLength() / 8);
      }, f2.prototype.toTwos = function(s3) {
        return this.negative !== 0 ? this.abs().inotn(s3).iaddn(1) : this.clone();
      }, f2.prototype.fromTwos = function(s3) {
        return this.testn(s3 - 1) ? this.notn(s3).iaddn(1).ineg() : this.clone();
      }, f2.prototype.isNeg = function() {
        return this.negative !== 0;
      }, f2.prototype.neg = function() {
        return this.clone().ineg();
      }, f2.prototype.ineg = function() {
        return this.isZero() || (this.negative ^= 1), this;
      }, f2.prototype.iuor = function(s3) {
        for (;this.length < s3.length; )
          this.words[this.length++] = 0;
        for (var u4 = 0;u4 < s3.length; u4++)
          this.words[u4] = this.words[u4] | s3.words[u4];
        return this._strip();
      }, f2.prototype.ior = function(s3) {
        return r2((this.negative | s3.negative) === 0), this.iuor(s3);
      }, f2.prototype.or = function(s3) {
        return this.length > s3.length ? this.clone().ior(s3) : s3.clone().ior(this);
      }, f2.prototype.uor = function(s3) {
        return this.length > s3.length ? this.clone().iuor(s3) : s3.clone().iuor(this);
      }, f2.prototype.iuand = function(s3) {
        var u4;
        this.length > s3.length ? u4 = s3 : u4 = this;
        for (var c2 = 0;c2 < u4.length; c2++)
          this.words[c2] = this.words[c2] & s3.words[c2];
        return this.length = u4.length, this._strip();
      }, f2.prototype.iand = function(s3) {
        return r2((this.negative | s3.negative) === 0), this.iuand(s3);
      }, f2.prototype.and = function(s3) {
        return this.length > s3.length ? this.clone().iand(s3) : s3.clone().iand(this);
      }, f2.prototype.uand = function(s3) {
        return this.length > s3.length ? this.clone().iuand(s3) : s3.clone().iuand(this);
      }, f2.prototype.iuxor = function(s3) {
        var u4, c2;
        this.length > s3.length ? (u4 = this, c2 = s3) : (u4 = s3, c2 = this);
        for (var b3 = 0;b3 < c2.length; b3++)
          this.words[b3] = u4.words[b3] ^ c2.words[b3];
        if (this !== u4)
          for (;b3 < u4.length; b3++)
            this.words[b3] = u4.words[b3];
        return this.length = u4.length, this._strip();
      }, f2.prototype.ixor = function(s3) {
        return r2((this.negative | s3.negative) === 0), this.iuxor(s3);
      }, f2.prototype.xor = function(s3) {
        return this.length > s3.length ? this.clone().ixor(s3) : s3.clone().ixor(this);
      }, f2.prototype.uxor = function(s3) {
        return this.length > s3.length ? this.clone().iuxor(s3) : s3.clone().iuxor(this);
      }, f2.prototype.inotn = function(s3) {
        r2(typeof s3 == "number" && s3 >= 0);
        var u4 = Math.ceil(s3 / 26) | 0, c2 = s3 % 26;
        this._expand(u4), c2 > 0 && u4--;
        for (var b3 = 0;b3 < u4; b3++)
          this.words[b3] = ~this.words[b3] & 67108863;
        return c2 > 0 && (this.words[b3] = ~this.words[b3] & 67108863 >> 26 - c2), this._strip();
      }, f2.prototype.notn = function(s3) {
        return this.clone().inotn(s3);
      }, f2.prototype.setn = function(s3, u4) {
        r2(typeof s3 == "number" && s3 >= 0);
        var c2 = s3 / 26 | 0, b3 = s3 % 26;
        return this._expand(c2 + 1), u4 ? this.words[c2] = this.words[c2] | 1 << b3 : this.words[c2] = this.words[c2] & ~(1 << b3), this._strip();
      }, f2.prototype.iadd = function(s3) {
        var u4;
        if (this.negative !== 0 && s3.negative === 0)
          return this.negative = 0, u4 = this.isub(s3), this.negative ^= 1, this._normSign();
        if (this.negative === 0 && s3.negative !== 0)
          return s3.negative = 0, u4 = this.isub(s3), s3.negative = 1, u4._normSign();
        var c2, b3;
        this.length > s3.length ? (c2 = this, b3 = s3) : (c2 = s3, b3 = this);
        for (var l3 = 0, n32 = 0;n32 < b3.length; n32++)
          u4 = (c2.words[n32] | 0) + (b3.words[n32] | 0) + l3, this.words[n32] = u4 & 67108863, l3 = u4 >>> 26;
        for (;l3 !== 0 && n32 < c2.length; n32++)
          u4 = (c2.words[n32] | 0) + l3, this.words[n32] = u4 & 67108863, l3 = u4 >>> 26;
        if (this.length = c2.length, l3 !== 0)
          this.words[this.length] = l3, this.length++;
        else if (c2 !== this)
          for (;n32 < c2.length; n32++)
            this.words[n32] = c2.words[n32];
        return this;
      }, f2.prototype.add = function(s3) {
        var u4;
        return s3.negative !== 0 && this.negative === 0 ? (s3.negative = 0, u4 = this.sub(s3), s3.negative ^= 1, u4) : s3.negative === 0 && this.negative !== 0 ? (this.negative = 0, u4 = s3.sub(this), this.negative = 1, u4) : this.length > s3.length ? this.clone().iadd(s3) : s3.clone().iadd(this);
      }, f2.prototype.isub = function(s3) {
        if (s3.negative !== 0) {
          s3.negative = 0;
          var u4 = this.iadd(s3);
          return s3.negative = 1, u4._normSign();
        } else if (this.negative !== 0)
          return this.negative = 0, this.iadd(s3), this.negative = 1, this._normSign();
        var c2 = this.cmp(s3);
        if (c2 === 0)
          return this.negative = 0, this.length = 1, this.words[0] = 0, this;
        var b3, l3;
        c2 > 0 ? (b3 = this, l3 = s3) : (b3 = s3, l3 = this);
        for (var n32 = 0, d2 = 0;d2 < l3.length; d2++)
          u4 = (b3.words[d2] | 0) - (l3.words[d2] | 0) + n32, n32 = u4 >> 26, this.words[d2] = u4 & 67108863;
        for (;n32 !== 0 && d2 < b3.length; d2++)
          u4 = (b3.words[d2] | 0) + n32, n32 = u4 >> 26, this.words[d2] = u4 & 67108863;
        if (n32 === 0 && d2 < b3.length && b3 !== this)
          for (;d2 < b3.length; d2++)
            this.words[d2] = b3.words[d2];
        return this.length = Math.max(this.length, d2), b3 !== this && (this.negative = 1), this._strip();
      }, f2.prototype.sub = function(s3) {
        return this.clone().isub(s3);
      };
      function _e(h3, s3, u4) {
        u4.negative = s3.negative ^ h3.negative;
        var c2 = h3.length + s3.length | 0;
        u4.length = c2, c2 = c2 - 1 | 0;
        var b3 = h3.words[0] | 0, l3 = s3.words[0] | 0, n32 = b3 * l3, d2 = n32 & 67108863, w3 = n32 / 67108864 | 0;
        u4.words[0] = d2;
        for (var g2 = 1;g2 < c2; g2++) {
          for (var _5 = w3 >>> 26, A6 = w3 & 67108863, R4 = Math.min(g2, s3.length - 1), I2 = Math.max(0, g2 - h3.length + 1);I2 <= R4; I2++) {
            var Me = g2 - I2 | 0;
            b3 = h3.words[Me] | 0, l3 = s3.words[I2] | 0, n32 = b3 * l3 + A6, _5 += n32 / 67108864 | 0, A6 = n32 & 67108863;
          }
          u4.words[g2] = A6 | 0, w3 = _5 | 0;
        }
        return w3 !== 0 ? u4.words[g2] = w3 | 0 : u4.length--, u4._strip();
      }
      var N4 = function(s3, u4, c2) {
        var b3 = s3.words, l3 = u4.words, n32 = c2.words, d2 = 0, w3, g2, _5, A6 = b3[0] | 0, R4 = A6 & 8191, I2 = A6 >>> 13, Me = b3[1] | 0, k32 = Me & 8191, D3 = Me >>> 13, nt = b3[2] | 0, C3 = nt & 8191, O4 = nt >>> 13, vt = b3[3] | 0, F = vt & 8191, U2 = vt >>> 13, bt = b3[4] | 0, z4 = bt & 8191, H4 = bt >>> 13, mt = b3[5] | 0, W3 = mt & 8191, K2 = mt >>> 13, gt = b3[6] | 0, j32 = gt & 8191, Z4 = gt >>> 13, yt = b3[7] | 0, V22 = yt & 8191, $3 = yt >>> 13, wt = b3[8] | 0, G5 = wt & 8191, Y2 = wt >>> 13, Mt = b3[9] | 0, X4 = Mt & 8191, J = Mt >>> 13, _t = l3[0] | 0, Q4 = _t & 8191, ee = _t >>> 13, xt = l3[1] | 0, te = xt & 8191, re = xt >>> 13, St = l3[2] | 0, ie = St & 8191, ne = St >>> 13, Et = l3[3] | 0, fe = Et & 8191, ae = Et >>> 13, At = l3[4] | 0, oe = At & 8191, se = At >>> 13, Rt = l3[5] | 0, he = Rt & 8191, ue = Rt >>> 13, Bt = l3[6] | 0, le = Bt & 8191, de = Bt >>> 13, qt = l3[7] | 0, ce = qt & 8191, pe = qt >>> 13, It = l3[8] | 0, ve = It & 8191, be = It >>> 13, ft = l3[9] | 0, Be = ft & 8191, qe = ft >>> 13;
        c2.negative = s3.negative ^ u4.negative, c2.length = 19, w3 = Math.imul(R4, Q4), g2 = Math.imul(R4, ee), g2 = g2 + Math.imul(I2, Q4) | 0, _5 = Math.imul(I2, ee);
        var ze = (d2 + w3 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_5 + (g2 >>> 13) | 0) + (ze >>> 26) | 0, ze &= 67108863, w3 = Math.imul(k32, Q4), g2 = Math.imul(k32, ee), g2 = g2 + Math.imul(D3, Q4) | 0, _5 = Math.imul(D3, ee), w3 = w3 + Math.imul(R4, te) | 0, g2 = g2 + Math.imul(R4, re) | 0, g2 = g2 + Math.imul(I2, te) | 0, _5 = _5 + Math.imul(I2, re) | 0;
        var He = (d2 + w3 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_5 + (g2 >>> 13) | 0) + (He >>> 26) | 0, He &= 67108863, w3 = Math.imul(C3, Q4), g2 = Math.imul(C3, ee), g2 = g2 + Math.imul(O4, Q4) | 0, _5 = Math.imul(O4, ee), w3 = w3 + Math.imul(k32, te) | 0, g2 = g2 + Math.imul(k32, re) | 0, g2 = g2 + Math.imul(D3, te) | 0, _5 = _5 + Math.imul(D3, re) | 0, w3 = w3 + Math.imul(R4, ie) | 0, g2 = g2 + Math.imul(R4, ne) | 0, g2 = g2 + Math.imul(I2, ie) | 0, _5 = _5 + Math.imul(I2, ne) | 0;
        var We = (d2 + w3 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_5 + (g2 >>> 13) | 0) + (We >>> 26) | 0, We &= 67108863, w3 = Math.imul(F, Q4), g2 = Math.imul(F, ee), g2 = g2 + Math.imul(U2, Q4) | 0, _5 = Math.imul(U2, ee), w3 = w3 + Math.imul(C3, te) | 0, g2 = g2 + Math.imul(C3, re) | 0, g2 = g2 + Math.imul(O4, te) | 0, _5 = _5 + Math.imul(O4, re) | 0, w3 = w3 + Math.imul(k32, ie) | 0, g2 = g2 + Math.imul(k32, ne) | 0, g2 = g2 + Math.imul(D3, ie) | 0, _5 = _5 + Math.imul(D3, ne) | 0, w3 = w3 + Math.imul(R4, fe) | 0, g2 = g2 + Math.imul(R4, ae) | 0, g2 = g2 + Math.imul(I2, fe) | 0, _5 = _5 + Math.imul(I2, ae) | 0;
        var Ke = (d2 + w3 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_5 + (g2 >>> 13) | 0) + (Ke >>> 26) | 0, Ke &= 67108863, w3 = Math.imul(z4, Q4), g2 = Math.imul(z4, ee), g2 = g2 + Math.imul(H4, Q4) | 0, _5 = Math.imul(H4, ee), w3 = w3 + Math.imul(F, te) | 0, g2 = g2 + Math.imul(F, re) | 0, g2 = g2 + Math.imul(U2, te) | 0, _5 = _5 + Math.imul(U2, re) | 0, w3 = w3 + Math.imul(C3, ie) | 0, g2 = g2 + Math.imul(C3, ne) | 0, g2 = g2 + Math.imul(O4, ie) | 0, _5 = _5 + Math.imul(O4, ne) | 0, w3 = w3 + Math.imul(k32, fe) | 0, g2 = g2 + Math.imul(k32, ae) | 0, g2 = g2 + Math.imul(D3, fe) | 0, _5 = _5 + Math.imul(D3, ae) | 0, w3 = w3 + Math.imul(R4, oe) | 0, g2 = g2 + Math.imul(R4, se) | 0, g2 = g2 + Math.imul(I2, oe) | 0, _5 = _5 + Math.imul(I2, se) | 0;
        var je = (d2 + w3 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_5 + (g2 >>> 13) | 0) + (je >>> 26) | 0, je &= 67108863, w3 = Math.imul(W3, Q4), g2 = Math.imul(W3, ee), g2 = g2 + Math.imul(K2, Q4) | 0, _5 = Math.imul(K2, ee), w3 = w3 + Math.imul(z4, te) | 0, g2 = g2 + Math.imul(z4, re) | 0, g2 = g2 + Math.imul(H4, te) | 0, _5 = _5 + Math.imul(H4, re) | 0, w3 = w3 + Math.imul(F, ie) | 0, g2 = g2 + Math.imul(F, ne) | 0, g2 = g2 + Math.imul(U2, ie) | 0, _5 = _5 + Math.imul(U2, ne) | 0, w3 = w3 + Math.imul(C3, fe) | 0, g2 = g2 + Math.imul(C3, ae) | 0, g2 = g2 + Math.imul(O4, fe) | 0, _5 = _5 + Math.imul(O4, ae) | 0, w3 = w3 + Math.imul(k32, oe) | 0, g2 = g2 + Math.imul(k32, se) | 0, g2 = g2 + Math.imul(D3, oe) | 0, _5 = _5 + Math.imul(D3, se) | 0, w3 = w3 + Math.imul(R4, he) | 0, g2 = g2 + Math.imul(R4, ue) | 0, g2 = g2 + Math.imul(I2, he) | 0, _5 = _5 + Math.imul(I2, ue) | 0;
        var Ze = (d2 + w3 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_5 + (g2 >>> 13) | 0) + (Ze >>> 26) | 0, Ze &= 67108863, w3 = Math.imul(j32, Q4), g2 = Math.imul(j32, ee), g2 = g2 + Math.imul(Z4, Q4) | 0, _5 = Math.imul(Z4, ee), w3 = w3 + Math.imul(W3, te) | 0, g2 = g2 + Math.imul(W3, re) | 0, g2 = g2 + Math.imul(K2, te) | 0, _5 = _5 + Math.imul(K2, re) | 0, w3 = w3 + Math.imul(z4, ie) | 0, g2 = g2 + Math.imul(z4, ne) | 0, g2 = g2 + Math.imul(H4, ie) | 0, _5 = _5 + Math.imul(H4, ne) | 0, w3 = w3 + Math.imul(F, fe) | 0, g2 = g2 + Math.imul(F, ae) | 0, g2 = g2 + Math.imul(U2, fe) | 0, _5 = _5 + Math.imul(U2, ae) | 0, w3 = w3 + Math.imul(C3, oe) | 0, g2 = g2 + Math.imul(C3, se) | 0, g2 = g2 + Math.imul(O4, oe) | 0, _5 = _5 + Math.imul(O4, se) | 0, w3 = w3 + Math.imul(k32, he) | 0, g2 = g2 + Math.imul(k32, ue) | 0, g2 = g2 + Math.imul(D3, he) | 0, _5 = _5 + Math.imul(D3, ue) | 0, w3 = w3 + Math.imul(R4, le) | 0, g2 = g2 + Math.imul(R4, de) | 0, g2 = g2 + Math.imul(I2, le) | 0, _5 = _5 + Math.imul(I2, de) | 0;
        var Ve = (d2 + w3 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_5 + (g2 >>> 13) | 0) + (Ve >>> 26) | 0, Ve &= 67108863, w3 = Math.imul(V22, Q4), g2 = Math.imul(V22, ee), g2 = g2 + Math.imul($3, Q4) | 0, _5 = Math.imul($3, ee), w3 = w3 + Math.imul(j32, te) | 0, g2 = g2 + Math.imul(j32, re) | 0, g2 = g2 + Math.imul(Z4, te) | 0, _5 = _5 + Math.imul(Z4, re) | 0, w3 = w3 + Math.imul(W3, ie) | 0, g2 = g2 + Math.imul(W3, ne) | 0, g2 = g2 + Math.imul(K2, ie) | 0, _5 = _5 + Math.imul(K2, ne) | 0, w3 = w3 + Math.imul(z4, fe) | 0, g2 = g2 + Math.imul(z4, ae) | 0, g2 = g2 + Math.imul(H4, fe) | 0, _5 = _5 + Math.imul(H4, ae) | 0, w3 = w3 + Math.imul(F, oe) | 0, g2 = g2 + Math.imul(F, se) | 0, g2 = g2 + Math.imul(U2, oe) | 0, _5 = _5 + Math.imul(U2, se) | 0, w3 = w3 + Math.imul(C3, he) | 0, g2 = g2 + Math.imul(C3, ue) | 0, g2 = g2 + Math.imul(O4, he) | 0, _5 = _5 + Math.imul(O4, ue) | 0, w3 = w3 + Math.imul(k32, le) | 0, g2 = g2 + Math.imul(k32, de) | 0, g2 = g2 + Math.imul(D3, le) | 0, _5 = _5 + Math.imul(D3, de) | 0, w3 = w3 + Math.imul(R4, ce) | 0, g2 = g2 + Math.imul(R4, pe) | 0, g2 = g2 + Math.imul(I2, ce) | 0, _5 = _5 + Math.imul(I2, pe) | 0;
        var $e = (d2 + w3 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_5 + (g2 >>> 13) | 0) + ($e >>> 26) | 0, $e &= 67108863, w3 = Math.imul(G5, Q4), g2 = Math.imul(G5, ee), g2 = g2 + Math.imul(Y2, Q4) | 0, _5 = Math.imul(Y2, ee), w3 = w3 + Math.imul(V22, te) | 0, g2 = g2 + Math.imul(V22, re) | 0, g2 = g2 + Math.imul($3, te) | 0, _5 = _5 + Math.imul($3, re) | 0, w3 = w3 + Math.imul(j32, ie) | 0, g2 = g2 + Math.imul(j32, ne) | 0, g2 = g2 + Math.imul(Z4, ie) | 0, _5 = _5 + Math.imul(Z4, ne) | 0, w3 = w3 + Math.imul(W3, fe) | 0, g2 = g2 + Math.imul(W3, ae) | 0, g2 = g2 + Math.imul(K2, fe) | 0, _5 = _5 + Math.imul(K2, ae) | 0, w3 = w3 + Math.imul(z4, oe) | 0, g2 = g2 + Math.imul(z4, se) | 0, g2 = g2 + Math.imul(H4, oe) | 0, _5 = _5 + Math.imul(H4, se) | 0, w3 = w3 + Math.imul(F, he) | 0, g2 = g2 + Math.imul(F, ue) | 0, g2 = g2 + Math.imul(U2, he) | 0, _5 = _5 + Math.imul(U2, ue) | 0, w3 = w3 + Math.imul(C3, le) | 0, g2 = g2 + Math.imul(C3, de) | 0, g2 = g2 + Math.imul(O4, le) | 0, _5 = _5 + Math.imul(O4, de) | 0, w3 = w3 + Math.imul(k32, ce) | 0, g2 = g2 + Math.imul(k32, pe) | 0, g2 = g2 + Math.imul(D3, ce) | 0, _5 = _5 + Math.imul(D3, pe) | 0, w3 = w3 + Math.imul(R4, ve) | 0, g2 = g2 + Math.imul(R4, be) | 0, g2 = g2 + Math.imul(I2, ve) | 0, _5 = _5 + Math.imul(I2, be) | 0;
        var Ge = (d2 + w3 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_5 + (g2 >>> 13) | 0) + (Ge >>> 26) | 0, Ge &= 67108863, w3 = Math.imul(X4, Q4), g2 = Math.imul(X4, ee), g2 = g2 + Math.imul(J, Q4) | 0, _5 = Math.imul(J, ee), w3 = w3 + Math.imul(G5, te) | 0, g2 = g2 + Math.imul(G5, re) | 0, g2 = g2 + Math.imul(Y2, te) | 0, _5 = _5 + Math.imul(Y2, re) | 0, w3 = w3 + Math.imul(V22, ie) | 0, g2 = g2 + Math.imul(V22, ne) | 0, g2 = g2 + Math.imul($3, ie) | 0, _5 = _5 + Math.imul($3, ne) | 0, w3 = w3 + Math.imul(j32, fe) | 0, g2 = g2 + Math.imul(j32, ae) | 0, g2 = g2 + Math.imul(Z4, fe) | 0, _5 = _5 + Math.imul(Z4, ae) | 0, w3 = w3 + Math.imul(W3, oe) | 0, g2 = g2 + Math.imul(W3, se) | 0, g2 = g2 + Math.imul(K2, oe) | 0, _5 = _5 + Math.imul(K2, se) | 0, w3 = w3 + Math.imul(z4, he) | 0, g2 = g2 + Math.imul(z4, ue) | 0, g2 = g2 + Math.imul(H4, he) | 0, _5 = _5 + Math.imul(H4, ue) | 0, w3 = w3 + Math.imul(F, le) | 0, g2 = g2 + Math.imul(F, de) | 0, g2 = g2 + Math.imul(U2, le) | 0, _5 = _5 + Math.imul(U2, de) | 0, w3 = w3 + Math.imul(C3, ce) | 0, g2 = g2 + Math.imul(C3, pe) | 0, g2 = g2 + Math.imul(O4, ce) | 0, _5 = _5 + Math.imul(O4, pe) | 0, w3 = w3 + Math.imul(k32, ve) | 0, g2 = g2 + Math.imul(k32, be) | 0, g2 = g2 + Math.imul(D3, ve) | 0, _5 = _5 + Math.imul(D3, be) | 0, w3 = w3 + Math.imul(R4, Be) | 0, g2 = g2 + Math.imul(R4, qe) | 0, g2 = g2 + Math.imul(I2, Be) | 0, _5 = _5 + Math.imul(I2, qe) | 0;
        var Ye = (d2 + w3 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_5 + (g2 >>> 13) | 0) + (Ye >>> 26) | 0, Ye &= 67108863, w3 = Math.imul(X4, te), g2 = Math.imul(X4, re), g2 = g2 + Math.imul(J, te) | 0, _5 = Math.imul(J, re), w3 = w3 + Math.imul(G5, ie) | 0, g2 = g2 + Math.imul(G5, ne) | 0, g2 = g2 + Math.imul(Y2, ie) | 0, _5 = _5 + Math.imul(Y2, ne) | 0, w3 = w3 + Math.imul(V22, fe) | 0, g2 = g2 + Math.imul(V22, ae) | 0, g2 = g2 + Math.imul($3, fe) | 0, _5 = _5 + Math.imul($3, ae) | 0, w3 = w3 + Math.imul(j32, oe) | 0, g2 = g2 + Math.imul(j32, se) | 0, g2 = g2 + Math.imul(Z4, oe) | 0, _5 = _5 + Math.imul(Z4, se) | 0, w3 = w3 + Math.imul(W3, he) | 0, g2 = g2 + Math.imul(W3, ue) | 0, g2 = g2 + Math.imul(K2, he) | 0, _5 = _5 + Math.imul(K2, ue) | 0, w3 = w3 + Math.imul(z4, le) | 0, g2 = g2 + Math.imul(z4, de) | 0, g2 = g2 + Math.imul(H4, le) | 0, _5 = _5 + Math.imul(H4, de) | 0, w3 = w3 + Math.imul(F, ce) | 0, g2 = g2 + Math.imul(F, pe) | 0, g2 = g2 + Math.imul(U2, ce) | 0, _5 = _5 + Math.imul(U2, pe) | 0, w3 = w3 + Math.imul(C3, ve) | 0, g2 = g2 + Math.imul(C3, be) | 0, g2 = g2 + Math.imul(O4, ve) | 0, _5 = _5 + Math.imul(O4, be) | 0, w3 = w3 + Math.imul(k32, Be) | 0, g2 = g2 + Math.imul(k32, qe) | 0, g2 = g2 + Math.imul(D3, Be) | 0, _5 = _5 + Math.imul(D3, qe) | 0;
        var Xe = (d2 + w3 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_5 + (g2 >>> 13) | 0) + (Xe >>> 26) | 0, Xe &= 67108863, w3 = Math.imul(X4, ie), g2 = Math.imul(X4, ne), g2 = g2 + Math.imul(J, ie) | 0, _5 = Math.imul(J, ne), w3 = w3 + Math.imul(G5, fe) | 0, g2 = g2 + Math.imul(G5, ae) | 0, g2 = g2 + Math.imul(Y2, fe) | 0, _5 = _5 + Math.imul(Y2, ae) | 0, w3 = w3 + Math.imul(V22, oe) | 0, g2 = g2 + Math.imul(V22, se) | 0, g2 = g2 + Math.imul($3, oe) | 0, _5 = _5 + Math.imul($3, se) | 0, w3 = w3 + Math.imul(j32, he) | 0, g2 = g2 + Math.imul(j32, ue) | 0, g2 = g2 + Math.imul(Z4, he) | 0, _5 = _5 + Math.imul(Z4, ue) | 0, w3 = w3 + Math.imul(W3, le) | 0, g2 = g2 + Math.imul(W3, de) | 0, g2 = g2 + Math.imul(K2, le) | 0, _5 = _5 + Math.imul(K2, de) | 0, w3 = w3 + Math.imul(z4, ce) | 0, g2 = g2 + Math.imul(z4, pe) | 0, g2 = g2 + Math.imul(H4, ce) | 0, _5 = _5 + Math.imul(H4, pe) | 0, w3 = w3 + Math.imul(F, ve) | 0, g2 = g2 + Math.imul(F, be) | 0, g2 = g2 + Math.imul(U2, ve) | 0, _5 = _5 + Math.imul(U2, be) | 0, w3 = w3 + Math.imul(C3, Be) | 0, g2 = g2 + Math.imul(C3, qe) | 0, g2 = g2 + Math.imul(O4, Be) | 0, _5 = _5 + Math.imul(O4, qe) | 0;
        var Je = (d2 + w3 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_5 + (g2 >>> 13) | 0) + (Je >>> 26) | 0, Je &= 67108863, w3 = Math.imul(X4, fe), g2 = Math.imul(X4, ae), g2 = g2 + Math.imul(J, fe) | 0, _5 = Math.imul(J, ae), w3 = w3 + Math.imul(G5, oe) | 0, g2 = g2 + Math.imul(G5, se) | 0, g2 = g2 + Math.imul(Y2, oe) | 0, _5 = _5 + Math.imul(Y2, se) | 0, w3 = w3 + Math.imul(V22, he) | 0, g2 = g2 + Math.imul(V22, ue) | 0, g2 = g2 + Math.imul($3, he) | 0, _5 = _5 + Math.imul($3, ue) | 0, w3 = w3 + Math.imul(j32, le) | 0, g2 = g2 + Math.imul(j32, de) | 0, g2 = g2 + Math.imul(Z4, le) | 0, _5 = _5 + Math.imul(Z4, de) | 0, w3 = w3 + Math.imul(W3, ce) | 0, g2 = g2 + Math.imul(W3, pe) | 0, g2 = g2 + Math.imul(K2, ce) | 0, _5 = _5 + Math.imul(K2, pe) | 0, w3 = w3 + Math.imul(z4, ve) | 0, g2 = g2 + Math.imul(z4, be) | 0, g2 = g2 + Math.imul(H4, ve) | 0, _5 = _5 + Math.imul(H4, be) | 0, w3 = w3 + Math.imul(F, Be) | 0, g2 = g2 + Math.imul(F, qe) | 0, g2 = g2 + Math.imul(U2, Be) | 0, _5 = _5 + Math.imul(U2, qe) | 0;
        var Qe = (d2 + w3 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_5 + (g2 >>> 13) | 0) + (Qe >>> 26) | 0, Qe &= 67108863, w3 = Math.imul(X4, oe), g2 = Math.imul(X4, se), g2 = g2 + Math.imul(J, oe) | 0, _5 = Math.imul(J, se), w3 = w3 + Math.imul(G5, he) | 0, g2 = g2 + Math.imul(G5, ue) | 0, g2 = g2 + Math.imul(Y2, he) | 0, _5 = _5 + Math.imul(Y2, ue) | 0, w3 = w3 + Math.imul(V22, le) | 0, g2 = g2 + Math.imul(V22, de) | 0, g2 = g2 + Math.imul($3, le) | 0, _5 = _5 + Math.imul($3, de) | 0, w3 = w3 + Math.imul(j32, ce) | 0, g2 = g2 + Math.imul(j32, pe) | 0, g2 = g2 + Math.imul(Z4, ce) | 0, _5 = _5 + Math.imul(Z4, pe) | 0, w3 = w3 + Math.imul(W3, ve) | 0, g2 = g2 + Math.imul(W3, be) | 0, g2 = g2 + Math.imul(K2, ve) | 0, _5 = _5 + Math.imul(K2, be) | 0, w3 = w3 + Math.imul(z4, Be) | 0, g2 = g2 + Math.imul(z4, qe) | 0, g2 = g2 + Math.imul(H4, Be) | 0, _5 = _5 + Math.imul(H4, qe) | 0;
        var et = (d2 + w3 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_5 + (g2 >>> 13) | 0) + (et >>> 26) | 0, et &= 67108863, w3 = Math.imul(X4, he), g2 = Math.imul(X4, ue), g2 = g2 + Math.imul(J, he) | 0, _5 = Math.imul(J, ue), w3 = w3 + Math.imul(G5, le) | 0, g2 = g2 + Math.imul(G5, de) | 0, g2 = g2 + Math.imul(Y2, le) | 0, _5 = _5 + Math.imul(Y2, de) | 0, w3 = w3 + Math.imul(V22, ce) | 0, g2 = g2 + Math.imul(V22, pe) | 0, g2 = g2 + Math.imul($3, ce) | 0, _5 = _5 + Math.imul($3, pe) | 0, w3 = w3 + Math.imul(j32, ve) | 0, g2 = g2 + Math.imul(j32, be) | 0, g2 = g2 + Math.imul(Z4, ve) | 0, _5 = _5 + Math.imul(Z4, be) | 0, w3 = w3 + Math.imul(W3, Be) | 0, g2 = g2 + Math.imul(W3, qe) | 0, g2 = g2 + Math.imul(K2, Be) | 0, _5 = _5 + Math.imul(K2, qe) | 0;
        var tt = (d2 + w3 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_5 + (g2 >>> 13) | 0) + (tt >>> 26) | 0, tt &= 67108863, w3 = Math.imul(X4, le), g2 = Math.imul(X4, de), g2 = g2 + Math.imul(J, le) | 0, _5 = Math.imul(J, de), w3 = w3 + Math.imul(G5, ce) | 0, g2 = g2 + Math.imul(G5, pe) | 0, g2 = g2 + Math.imul(Y2, ce) | 0, _5 = _5 + Math.imul(Y2, pe) | 0, w3 = w3 + Math.imul(V22, ve) | 0, g2 = g2 + Math.imul(V22, be) | 0, g2 = g2 + Math.imul($3, ve) | 0, _5 = _5 + Math.imul($3, be) | 0, w3 = w3 + Math.imul(j32, Be) | 0, g2 = g2 + Math.imul(j32, qe) | 0, g2 = g2 + Math.imul(Z4, Be) | 0, _5 = _5 + Math.imul(Z4, qe) | 0;
        var rt = (d2 + w3 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_5 + (g2 >>> 13) | 0) + (rt >>> 26) | 0, rt &= 67108863, w3 = Math.imul(X4, ce), g2 = Math.imul(X4, pe), g2 = g2 + Math.imul(J, ce) | 0, _5 = Math.imul(J, pe), w3 = w3 + Math.imul(G5, ve) | 0, g2 = g2 + Math.imul(G5, be) | 0, g2 = g2 + Math.imul(Y2, ve) | 0, _5 = _5 + Math.imul(Y2, be) | 0, w3 = w3 + Math.imul(V22, Be) | 0, g2 = g2 + Math.imul(V22, qe) | 0, g2 = g2 + Math.imul($3, Be) | 0, _5 = _5 + Math.imul($3, qe) | 0;
        var S02 = (d2 + w3 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_5 + (g2 >>> 13) | 0) + (S02 >>> 26) | 0, S02 &= 67108863, w3 = Math.imul(X4, ve), g2 = Math.imul(X4, be), g2 = g2 + Math.imul(J, ve) | 0, _5 = Math.imul(J, be), w3 = w3 + Math.imul(G5, Be) | 0, g2 = g2 + Math.imul(G5, qe) | 0, g2 = g2 + Math.imul(Y2, Be) | 0, _5 = _5 + Math.imul(Y2, qe) | 0;
        var E02 = (d2 + w3 | 0) + ((g2 & 8191) << 13) | 0;
        d2 = (_5 + (g2 >>> 13) | 0) + (E02 >>> 26) | 0, E02 &= 67108863, w3 = Math.imul(X4, Be), g2 = Math.imul(X4, qe), g2 = g2 + Math.imul(J, Be) | 0, _5 = Math.imul(J, qe);
        var A02 = (d2 + w3 | 0) + ((g2 & 8191) << 13) | 0;
        return d2 = (_5 + (g2 >>> 13) | 0) + (A02 >>> 26) | 0, A02 &= 67108863, n32[0] = ze, n32[1] = He, n32[2] = We, n32[3] = Ke, n32[4] = je, n32[5] = Ze, n32[6] = Ve, n32[7] = $e, n32[8] = Ge, n32[9] = Ye, n32[10] = Xe, n32[11] = Je, n32[12] = Qe, n32[13] = et, n32[14] = tt, n32[15] = rt, n32[16] = S02, n32[17] = E02, n32[18] = A02, d2 !== 0 && (n32[19] = d2, c2.length++), c2;
      };
      Math.imul || (N4 = _e);
      function we(h3, s3, u4) {
        u4.negative = s3.negative ^ h3.negative, u4.length = h3.length + s3.length;
        for (var c2 = 0, b3 = 0, l3 = 0;l3 < u4.length - 1; l3++) {
          var n32 = b3;
          b3 = 0;
          for (var d2 = c2 & 67108863, w3 = Math.min(l3, s3.length - 1), g2 = Math.max(0, l3 - h3.length + 1);g2 <= w3; g2++) {
            var _5 = l3 - g2, A6 = h3.words[_5] | 0, R4 = s3.words[g2] | 0, I2 = A6 * R4, Me = I2 & 67108863;
            n32 = n32 + (I2 / 67108864 | 0) | 0, Me = Me + d2 | 0, d2 = Me & 67108863, n32 = n32 + (Me >>> 26) | 0, b3 += n32 >>> 26, n32 &= 67108863;
          }
          u4.words[l3] = d2, c2 = n32, n32 = b3;
        }
        return c2 !== 0 ? u4.words[l3] = c2 : u4.length--, u4._strip();
      }
      function ye(h3, s3, u4) {
        return we(h3, s3, u4);
      }
      f2.prototype.mulTo = function(s3, u4) {
        var c2, b3 = this.length + s3.length;
        return this.length === 10 && s3.length === 10 ? c2 = N4(this, s3, u4) : b3 < 63 ? c2 = _e(this, s3, u4) : b3 < 1024 ? c2 = we(this, s3, u4) : c2 = ye(this, s3, u4), c2;
      };
      function xe(h3, s3) {
        this.x = h3, this.y = s3;
      }
      xe.prototype.makeRBT = function(s3) {
        for (var u4 = new Array(s3), c2 = f2.prototype._countBits(s3) - 1, b3 = 0;b3 < s3; b3++)
          u4[b3] = this.revBin(b3, c2, s3);
        return u4;
      }, xe.prototype.revBin = function(s3, u4, c2) {
        if (s3 === 0 || s3 === c2 - 1)
          return s3;
        for (var b3 = 0, l3 = 0;l3 < u4; l3++)
          b3 |= (s3 & 1) << u4 - l3 - 1, s3 >>= 1;
        return b3;
      }, xe.prototype.permute = function(s3, u4, c2, b3, l3, n32) {
        for (var d2 = 0;d2 < n32; d2++)
          b3[d2] = u4[s3[d2]], l3[d2] = c2[s3[d2]];
      }, xe.prototype.transform = function(s3, u4, c2, b3, l3, n32) {
        this.permute(n32, s3, u4, c2, b3, l3);
        for (var d2 = 1;d2 < l3; d2 <<= 1)
          for (var w3 = d2 << 1, g2 = Math.cos(2 * Math.PI / w3), _5 = Math.sin(2 * Math.PI / w3), A6 = 0;A6 < l3; A6 += w3)
            for (var R4 = g2, I2 = _5, Me = 0;Me < d2; Me++) {
              var k32 = c2[A6 + Me], D3 = b3[A6 + Me], nt = c2[A6 + Me + d2], C3 = b3[A6 + Me + d2], O4 = R4 * nt - I2 * C3;
              C3 = R4 * C3 + I2 * nt, nt = O4, c2[A6 + Me] = k32 + nt, b3[A6 + Me] = D3 + C3, c2[A6 + Me + d2] = k32 - nt, b3[A6 + Me + d2] = D3 - C3, Me !== w3 && (O4 = g2 * R4 - _5 * I2, I2 = g2 * I2 + _5 * R4, R4 = O4);
            }
      }, xe.prototype.guessLen13b = function(s3, u4) {
        var c2 = Math.max(u4, s3) | 1, b3 = c2 & 1, l3 = 0;
        for (c2 = c2 / 2 | 0;c2; c2 = c2 >>> 1)
          l3++;
        return 1 << l3 + 1 + b3;
      }, xe.prototype.conjugate = function(s3, u4, c2) {
        if (!(c2 <= 1))
          for (var b3 = 0;b3 < c2 / 2; b3++) {
            var l3 = s3[b3];
            s3[b3] = s3[c2 - b3 - 1], s3[c2 - b3 - 1] = l3, l3 = u4[b3], u4[b3] = -u4[c2 - b3 - 1], u4[c2 - b3 - 1] = -l3;
          }
      }, xe.prototype.normalize13b = function(s3, u4) {
        for (var c2 = 0, b3 = 0;b3 < u4 / 2; b3++) {
          var l3 = Math.round(s3[2 * b3 + 1] / u4) * 8192 + Math.round(s3[2 * b3] / u4) + c2;
          s3[b3] = l3 & 67108863, l3 < 67108864 ? c2 = 0 : c2 = l3 / 67108864 | 0;
        }
        return s3;
      }, xe.prototype.convert13b = function(s3, u4, c2, b3) {
        for (var l3 = 0, n32 = 0;n32 < u4; n32++)
          l3 = l3 + (s3[n32] | 0), c2[2 * n32] = l3 & 8191, l3 = l3 >>> 13, c2[2 * n32 + 1] = l3 & 8191, l3 = l3 >>> 13;
        for (n32 = 2 * u4;n32 < b3; ++n32)
          c2[n32] = 0;
        r2(l3 === 0), r2((l3 & -8192) === 0);
      }, xe.prototype.stub = function(s3) {
        for (var u4 = new Array(s3), c2 = 0;c2 < s3; c2++)
          u4[c2] = 0;
        return u4;
      }, xe.prototype.mulp = function(s3, u4, c2) {
        var b3 = 2 * this.guessLen13b(s3.length, u4.length), l3 = this.makeRBT(b3), n32 = this.stub(b3), d2 = new Array(b3), w3 = new Array(b3), g2 = new Array(b3), _5 = new Array(b3), A6 = new Array(b3), R4 = new Array(b3), I2 = c2.words;
        I2.length = b3, this.convert13b(s3.words, s3.length, d2, b3), this.convert13b(u4.words, u4.length, _5, b3), this.transform(d2, n32, w3, g2, b3, l3), this.transform(_5, n32, A6, R4, b3, l3);
        for (var Me = 0;Me < b3; Me++) {
          var k32 = w3[Me] * A6[Me] - g2[Me] * R4[Me];
          g2[Me] = w3[Me] * R4[Me] + g2[Me] * A6[Me], w3[Me] = k32;
        }
        return this.conjugate(w3, g2, b3), this.transform(w3, g2, I2, n32, b3, l3), this.conjugate(I2, n32, b3), this.normalize13b(I2, b3), c2.negative = s3.negative ^ u4.negative, c2.length = s3.length + u4.length, c2._strip();
      }, f2.prototype.mul = function(s3) {
        var u4 = new f2(null);
        return u4.words = new Array(this.length + s3.length), this.mulTo(s3, u4);
      }, f2.prototype.mulf = function(s3) {
        var u4 = new f2(null);
        return u4.words = new Array(this.length + s3.length), ye(this, s3, u4);
      }, f2.prototype.imul = function(s3) {
        return this.clone().mulTo(s3, this);
      }, f2.prototype.imuln = function(s3) {
        var u4 = s3 < 0;
        u4 && (s3 = -s3), r2(typeof s3 == "number"), r2(s3 < 67108864);
        for (var c2 = 0, b3 = 0;b3 < this.length; b3++) {
          var l3 = (this.words[b3] | 0) * s3, n32 = (l3 & 67108863) + (c2 & 67108863);
          c2 >>= 26, c2 += l3 / 67108864 | 0, c2 += n32 >>> 26, this.words[b3] = n32 & 67108863;
        }
        return c2 !== 0 && (this.words[b3] = c2, this.length++), u4 ? this.ineg() : this;
      }, f2.prototype.muln = function(s3) {
        return this.clone().imuln(s3);
      }, f2.prototype.sqr = function() {
        return this.mul(this);
      }, f2.prototype.isqr = function() {
        return this.imul(this.clone());
      }, f2.prototype.pow = function(s3) {
        var u4 = ge(s3);
        if (u4.length === 0)
          return new f2(1);
        for (var c2 = this, b3 = 0;b3 < u4.length && u4[b3] === 0; b3++, c2 = c2.sqr())
          ;
        if (++b3 < u4.length)
          for (var l3 = c2.sqr();b3 < u4.length; b3++, l3 = l3.sqr())
            u4[b3] !== 0 && (c2 = c2.mul(l3));
        return c2;
      }, f2.prototype.iushln = function(s3) {
        r2(typeof s3 == "number" && s3 >= 0);
        var u4 = s3 % 26, c2 = (s3 - u4) / 26, b3 = 67108863 >>> 26 - u4 << 26 - u4, l3;
        if (u4 !== 0) {
          var n32 = 0;
          for (l3 = 0;l3 < this.length; l3++) {
            var d2 = this.words[l3] & b3, w3 = (this.words[l3] | 0) - d2 << u4;
            this.words[l3] = w3 | n32, n32 = d2 >>> 26 - u4;
          }
          n32 && (this.words[l3] = n32, this.length++);
        }
        if (c2 !== 0) {
          for (l3 = this.length - 1;l3 >= 0; l3--)
            this.words[l3 + c2] = this.words[l3];
          for (l3 = 0;l3 < c2; l3++)
            this.words[l3] = 0;
          this.length += c2;
        }
        return this._strip();
      }, f2.prototype.ishln = function(s3) {
        return r2(this.negative === 0), this.iushln(s3);
      }, f2.prototype.iushrn = function(s3, u4, c2) {
        r2(typeof s3 == "number" && s3 >= 0);
        var b3;
        u4 ? b3 = (u4 - u4 % 26) / 26 : b3 = 0;
        var l3 = s3 % 26, n32 = Math.min((s3 - l3) / 26, this.length), d2 = 67108863 ^ 67108863 >>> l3 << l3, w3 = c2;
        if (b3 -= n32, b3 = Math.max(0, b3), w3) {
          for (var g2 = 0;g2 < n32; g2++)
            w3.words[g2] = this.words[g2];
          w3.length = n32;
        }
        if (n32 !== 0)
          if (this.length > n32)
            for (this.length -= n32, g2 = 0;g2 < this.length; g2++)
              this.words[g2] = this.words[g2 + n32];
          else
            this.words[0] = 0, this.length = 1;
        var _5 = 0;
        for (g2 = this.length - 1;g2 >= 0 && (_5 !== 0 || g2 >= b3); g2--) {
          var A6 = this.words[g2] | 0;
          this.words[g2] = _5 << 26 - l3 | A6 >>> l3, _5 = A6 & d2;
        }
        return w3 && _5 !== 0 && (w3.words[w3.length++] = _5), this.length === 0 && (this.words[0] = 0, this.length = 1), this._strip();
      }, f2.prototype.ishrn = function(s3, u4, c2) {
        return r2(this.negative === 0), this.iushrn(s3, u4, c2);
      }, f2.prototype.shln = function(s3) {
        return this.clone().ishln(s3);
      }, f2.prototype.ushln = function(s3) {
        return this.clone().iushln(s3);
      }, f2.prototype.shrn = function(s3) {
        return this.clone().ishrn(s3);
      }, f2.prototype.ushrn = function(s3) {
        return this.clone().iushrn(s3);
      }, f2.prototype.testn = function(s3) {
        r2(typeof s3 == "number" && s3 >= 0);
        var u4 = s3 % 26, c2 = (s3 - u4) / 26, b3 = 1 << u4;
        if (this.length <= c2)
          return false;
        var l3 = this.words[c2];
        return !!(l3 & b3);
      }, f2.prototype.imaskn = function(s3) {
        r2(typeof s3 == "number" && s3 >= 0);
        var u4 = s3 % 26, c2 = (s3 - u4) / 26;
        if (r2(this.negative === 0, "imaskn works only with positive numbers"), this.length <= c2)
          return this;
        if (u4 !== 0 && c2++, this.length = Math.min(c2, this.length), u4 !== 0) {
          var b3 = 67108863 ^ 67108863 >>> u4 << u4;
          this.words[this.length - 1] &= b3;
        }
        return this._strip();
      }, f2.prototype.maskn = function(s3) {
        return this.clone().imaskn(s3);
      }, f2.prototype.iaddn = function(s3) {
        return r2(typeof s3 == "number"), r2(s3 < 67108864), s3 < 0 ? this.isubn(-s3) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) <= s3 ? (this.words[0] = s3 - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(s3), this.negative = 1, this) : this._iaddn(s3);
      }, f2.prototype._iaddn = function(s3) {
        this.words[0] += s3;
        for (var u4 = 0;u4 < this.length && this.words[u4] >= 67108864; u4++)
          this.words[u4] -= 67108864, u4 === this.length - 1 ? this.words[u4 + 1] = 1 : this.words[u4 + 1]++;
        return this.length = Math.max(this.length, u4 + 1), this;
      }, f2.prototype.isubn = function(s3) {
        if (r2(typeof s3 == "number"), r2(s3 < 67108864), s3 < 0)
          return this.iaddn(-s3);
        if (this.negative !== 0)
          return this.negative = 0, this.iaddn(s3), this.negative = 1, this;
        if (this.words[0] -= s3, this.length === 1 && this.words[0] < 0)
          this.words[0] = -this.words[0], this.negative = 1;
        else
          for (var u4 = 0;u4 < this.length && this.words[u4] < 0; u4++)
            this.words[u4] += 67108864, this.words[u4 + 1] -= 1;
        return this._strip();
      }, f2.prototype.addn = function(s3) {
        return this.clone().iaddn(s3);
      }, f2.prototype.subn = function(s3) {
        return this.clone().isubn(s3);
      }, f2.prototype.iabs = function() {
        return this.negative = 0, this;
      }, f2.prototype.abs = function() {
        return this.clone().iabs();
      }, f2.prototype._ishlnsubmul = function(s3, u4, c2) {
        var b3 = s3.length + c2, l3;
        this._expand(b3);
        var n32, d2 = 0;
        for (l3 = 0;l3 < s3.length; l3++) {
          n32 = (this.words[l3 + c2] | 0) + d2;
          var w3 = (s3.words[l3] | 0) * u4;
          n32 -= w3 & 67108863, d2 = (n32 >> 26) - (w3 / 67108864 | 0), this.words[l3 + c2] = n32 & 67108863;
        }
        for (;l3 < this.length - c2; l3++)
          n32 = (this.words[l3 + c2] | 0) + d2, d2 = n32 >> 26, this.words[l3 + c2] = n32 & 67108863;
        if (d2 === 0)
          return this._strip();
        for (r2(d2 === -1), d2 = 0, l3 = 0;l3 < this.length; l3++)
          n32 = -(this.words[l3] | 0) + d2, d2 = n32 >> 26, this.words[l3] = n32 & 67108863;
        return this.negative = 1, this._strip();
      }, f2.prototype._wordDiv = function(s3, u4) {
        var c2 = this.length - s3.length, b3 = this.clone(), l3 = s3, n32 = l3.words[l3.length - 1] | 0, d2 = this._countBits(n32);
        c2 = 26 - d2, c2 !== 0 && (l3 = l3.ushln(c2), b3.iushln(c2), n32 = l3.words[l3.length - 1] | 0);
        var w3 = b3.length - l3.length, g2;
        if (u4 !== "mod") {
          g2 = new f2(null), g2.length = w3 + 1, g2.words = new Array(g2.length);
          for (var _5 = 0;_5 < g2.length; _5++)
            g2.words[_5] = 0;
        }
        var A6 = b3.clone()._ishlnsubmul(l3, 1, w3);
        A6.negative === 0 && (b3 = A6, g2 && (g2.words[w3] = 1));
        for (var R4 = w3 - 1;R4 >= 0; R4--) {
          var I2 = (b3.words[l3.length + R4] | 0) * 67108864 + (b3.words[l3.length + R4 - 1] | 0);
          for (I2 = Math.min(I2 / n32 | 0, 67108863), b3._ishlnsubmul(l3, I2, R4);b3.negative !== 0; )
            I2--, b3.negative = 0, b3._ishlnsubmul(l3, 1, R4), b3.isZero() || (b3.negative ^= 1);
          g2 && (g2.words[R4] = I2);
        }
        return g2 && g2._strip(), b3._strip(), u4 !== "div" && c2 !== 0 && b3.iushrn(c2), { div: g2 || null, mod: b3 };
      }, f2.prototype.divmod = function(s3, u4, c2) {
        if (r2(!s3.isZero()), this.isZero())
          return { div: new f2(0), mod: new f2(0) };
        var b3, l3, n32;
        return this.negative !== 0 && s3.negative === 0 ? (n32 = this.neg().divmod(s3, u4), u4 !== "mod" && (b3 = n32.div.neg()), u4 !== "div" && (l3 = n32.mod.neg(), c2 && l3.negative !== 0 && l3.iadd(s3)), { div: b3, mod: l3 }) : this.negative === 0 && s3.negative !== 0 ? (n32 = this.divmod(s3.neg(), u4), u4 !== "mod" && (b3 = n32.div.neg()), { div: b3, mod: n32.mod }) : (this.negative & s3.negative) !== 0 ? (n32 = this.neg().divmod(s3.neg(), u4), u4 !== "div" && (l3 = n32.mod.neg(), c2 && l3.negative !== 0 && l3.isub(s3)), { div: n32.div, mod: l3 }) : s3.length > this.length || this.cmp(s3) < 0 ? { div: new f2(0), mod: this } : s3.length === 1 ? u4 === "div" ? { div: this.divn(s3.words[0]), mod: null } : u4 === "mod" ? { div: null, mod: new f2(this.modrn(s3.words[0])) } : { div: this.divn(s3.words[0]), mod: new f2(this.modrn(s3.words[0])) } : this._wordDiv(s3, u4);
      }, f2.prototype.div = function(s3) {
        return this.divmod(s3, "div", false).div;
      }, f2.prototype.mod = function(s3) {
        return this.divmod(s3, "mod", false).mod;
      }, f2.prototype.umod = function(s3) {
        return this.divmod(s3, "mod", true).mod;
      }, f2.prototype.divRound = function(s3) {
        var u4 = this.divmod(s3);
        if (u4.mod.isZero())
          return u4.div;
        var c2 = u4.div.negative !== 0 ? u4.mod.isub(s3) : u4.mod, b3 = s3.ushrn(1), l3 = s3.andln(1), n32 = c2.cmp(b3);
        return n32 < 0 || l3 === 1 && n32 === 0 ? u4.div : u4.div.negative !== 0 ? u4.div.isubn(1) : u4.div.iaddn(1);
      }, f2.prototype.modrn = function(s3) {
        var u4 = s3 < 0;
        u4 && (s3 = -s3), r2(s3 <= 67108863);
        for (var c2 = (1 << 26) % s3, b3 = 0, l3 = this.length - 1;l3 >= 0; l3--)
          b3 = (c2 * b3 + (this.words[l3] | 0)) % s3;
        return u4 ? -b3 : b3;
      }, f2.prototype.modn = function(s3) {
        return this.modrn(s3);
      }, f2.prototype.idivn = function(s3) {
        var u4 = s3 < 0;
        u4 && (s3 = -s3), r2(s3 <= 67108863);
        for (var c2 = 0, b3 = this.length - 1;b3 >= 0; b3--) {
          var l3 = (this.words[b3] | 0) + c2 * 67108864;
          this.words[b3] = l3 / s3 | 0, c2 = l3 % s3;
        }
        return this._strip(), u4 ? this.ineg() : this;
      }, f2.prototype.divn = function(s3) {
        return this.clone().idivn(s3);
      }, f2.prototype.egcd = function(s3) {
        r2(s3.negative === 0), r2(!s3.isZero());
        var u4 = this, c2 = s3.clone();
        u4.negative !== 0 ? u4 = u4.umod(s3) : u4 = u4.clone();
        for (var b3 = new f2(1), l3 = new f2(0), n32 = new f2(0), d2 = new f2(1), w3 = 0;u4.isEven() && c2.isEven(); )
          u4.iushrn(1), c2.iushrn(1), ++w3;
        for (var g2 = c2.clone(), _5 = u4.clone();!u4.isZero(); ) {
          for (var A6 = 0, R4 = 1;(u4.words[0] & R4) === 0 && A6 < 26; ++A6, R4 <<= 1)
            ;
          if (A6 > 0)
            for (u4.iushrn(A6);A6-- > 0; )
              (b3.isOdd() || l3.isOdd()) && (b3.iadd(g2), l3.isub(_5)), b3.iushrn(1), l3.iushrn(1);
          for (var I2 = 0, Me = 1;(c2.words[0] & Me) === 0 && I2 < 26; ++I2, Me <<= 1)
            ;
          if (I2 > 0)
            for (c2.iushrn(I2);I2-- > 0; )
              (n32.isOdd() || d2.isOdd()) && (n32.iadd(g2), d2.isub(_5)), n32.iushrn(1), d2.iushrn(1);
          u4.cmp(c2) >= 0 ? (u4.isub(c2), b3.isub(n32), l3.isub(d2)) : (c2.isub(u4), n32.isub(b3), d2.isub(l3));
        }
        return { a: n32, b: d2, gcd: c2.iushln(w3) };
      }, f2.prototype._invmp = function(s3) {
        r2(s3.negative === 0), r2(!s3.isZero());
        var u4 = this, c2 = s3.clone();
        u4.negative !== 0 ? u4 = u4.umod(s3) : u4 = u4.clone();
        for (var b3 = new f2(1), l3 = new f2(0), n32 = c2.clone();u4.cmpn(1) > 0 && c2.cmpn(1) > 0; ) {
          for (var d2 = 0, w3 = 1;(u4.words[0] & w3) === 0 && d2 < 26; ++d2, w3 <<= 1)
            ;
          if (d2 > 0)
            for (u4.iushrn(d2);d2-- > 0; )
              b3.isOdd() && b3.iadd(n32), b3.iushrn(1);
          for (var g2 = 0, _5 = 1;(c2.words[0] & _5) === 0 && g2 < 26; ++g2, _5 <<= 1)
            ;
          if (g2 > 0)
            for (c2.iushrn(g2);g2-- > 0; )
              l3.isOdd() && l3.iadd(n32), l3.iushrn(1);
          u4.cmp(c2) >= 0 ? (u4.isub(c2), b3.isub(l3)) : (c2.isub(u4), l3.isub(b3));
        }
        var A6;
        return u4.cmpn(1) === 0 ? A6 = b3 : A6 = l3, A6.cmpn(0) < 0 && A6.iadd(s3), A6;
      }, f2.prototype.gcd = function(s3) {
        if (this.isZero())
          return s3.abs();
        if (s3.isZero())
          return this.abs();
        var u4 = this.clone(), c2 = s3.clone();
        u4.negative = 0, c2.negative = 0;
        for (var b3 = 0;u4.isEven() && c2.isEven(); b3++)
          u4.iushrn(1), c2.iushrn(1);
        do {
          for (;u4.isEven(); )
            u4.iushrn(1);
          for (;c2.isEven(); )
            c2.iushrn(1);
          var l3 = u4.cmp(c2);
          if (l3 < 0) {
            var n32 = u4;
            u4 = c2, c2 = n32;
          } else if (l3 === 0 || c2.cmpn(1) === 0)
            break;
          u4.isub(c2);
        } while (true);
        return c2.iushln(b3);
      }, f2.prototype.invm = function(s3) {
        return this.egcd(s3).a.umod(s3);
      }, f2.prototype.isEven = function() {
        return (this.words[0] & 1) === 0;
      }, f2.prototype.isOdd = function() {
        return (this.words[0] & 1) === 1;
      }, f2.prototype.andln = function(s3) {
        return this.words[0] & s3;
      }, f2.prototype.bincn = function(s3) {
        r2(typeof s3 == "number");
        var u4 = s3 % 26, c2 = (s3 - u4) / 26, b3 = 1 << u4;
        if (this.length <= c2)
          return this._expand(c2 + 1), this.words[c2] |= b3, this;
        for (var l3 = b3, n32 = c2;l3 !== 0 && n32 < this.length; n32++) {
          var d2 = this.words[n32] | 0;
          d2 += l3, l3 = d2 >>> 26, d2 &= 67108863, this.words[n32] = d2;
        }
        return l3 !== 0 && (this.words[n32] = l3, this.length++), this;
      }, f2.prototype.isZero = function() {
        return this.length === 1 && this.words[0] === 0;
      }, f2.prototype.cmpn = function(s3) {
        var u4 = s3 < 0;
        if (this.negative !== 0 && !u4)
          return -1;
        if (this.negative === 0 && u4)
          return 1;
        this._strip();
        var c2;
        if (this.length > 1)
          c2 = 1;
        else {
          u4 && (s3 = -s3), r2(s3 <= 67108863, "Number is too big");
          var b3 = this.words[0] | 0;
          c2 = b3 === s3 ? 0 : b3 < s3 ? -1 : 1;
        }
        return this.negative !== 0 ? -c2 | 0 : c2;
      }, f2.prototype.cmp = function(s3) {
        if (this.negative !== 0 && s3.negative === 0)
          return -1;
        if (this.negative === 0 && s3.negative !== 0)
          return 1;
        var u4 = this.ucmp(s3);
        return this.negative !== 0 ? -u4 | 0 : u4;
      }, f2.prototype.ucmp = function(s3) {
        if (this.length > s3.length)
          return 1;
        if (this.length < s3.length)
          return -1;
        for (var u4 = 0, c2 = this.length - 1;c2 >= 0; c2--) {
          var b3 = this.words[c2] | 0, l3 = s3.words[c2] | 0;
          if (b3 !== l3) {
            b3 < l3 ? u4 = -1 : b3 > l3 && (u4 = 1);
            break;
          }
        }
        return u4;
      }, f2.prototype.gtn = function(s3) {
        return this.cmpn(s3) === 1;
      }, f2.prototype.gt = function(s3) {
        return this.cmp(s3) === 1;
      }, f2.prototype.gten = function(s3) {
        return this.cmpn(s3) >= 0;
      }, f2.prototype.gte = function(s3) {
        return this.cmp(s3) >= 0;
      }, f2.prototype.ltn = function(s3) {
        return this.cmpn(s3) === -1;
      }, f2.prototype.lt = function(s3) {
        return this.cmp(s3) === -1;
      }, f2.prototype.lten = function(s3) {
        return this.cmpn(s3) <= 0;
      }, f2.prototype.lte = function(s3) {
        return this.cmp(s3) <= 0;
      }, f2.prototype.eqn = function(s3) {
        return this.cmpn(s3) === 0;
      }, f2.prototype.eq = function(s3) {
        return this.cmp(s3) === 0;
      }, f2.red = function(s3) {
        return new i(s3);
      }, f2.prototype.toRed = function(s3) {
        return r2(!this.red, "Already a number in reduction context"), r2(this.negative === 0, "red works only with positives"), s3.convertTo(this)._forceRed(s3);
      }, f2.prototype.fromRed = function() {
        return r2(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
      }, f2.prototype._forceRed = function(s3) {
        return this.red = s3, this;
      }, f2.prototype.forceRed = function(s3) {
        return r2(!this.red, "Already a number in reduction context"), this._forceRed(s3);
      }, f2.prototype.redAdd = function(s3) {
        return r2(this.red, "redAdd works only with red numbers"), this.red.add(this, s3);
      }, f2.prototype.redIAdd = function(s3) {
        return r2(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, s3);
      }, f2.prototype.redSub = function(s3) {
        return r2(this.red, "redSub works only with red numbers"), this.red.sub(this, s3);
      }, f2.prototype.redISub = function(s3) {
        return r2(this.red, "redISub works only with red numbers"), this.red.isub(this, s3);
      }, f2.prototype.redShl = function(s3) {
        return r2(this.red, "redShl works only with red numbers"), this.red.shl(this, s3);
      }, f2.prototype.redMul = function(s3) {
        return r2(this.red, "redMul works only with red numbers"), this.red._verify2(this, s3), this.red.mul(this, s3);
      }, f2.prototype.redIMul = function(s3) {
        return r2(this.red, "redMul works only with red numbers"), this.red._verify2(this, s3), this.red.imul(this, s3);
      }, f2.prototype.redSqr = function() {
        return r2(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
      }, f2.prototype.redISqr = function() {
        return r2(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
      }, f2.prototype.redSqrt = function() {
        return r2(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
      }, f2.prototype.redInvm = function() {
        return r2(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
      }, f2.prototype.redNeg = function() {
        return r2(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
      }, f2.prototype.redPow = function(s3) {
        return r2(this.red && !s3.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, s3);
      };
      var Re = { k256: null, p224: null, p192: null, p25519: null };
      function Ee(h3, s3) {
        this.name = h3, this.p = new f2(s3, 16), this.n = this.p.bitLength(), this.k = new f2(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
      }
      Ee.prototype._tmp = function() {
        var s3 = new f2(null);
        return s3.words = new Array(Math.ceil(this.n / 13)), s3;
      }, Ee.prototype.ireduce = function(s3) {
        var u4 = s3, c2;
        do
          this.split(u4, this.tmp), u4 = this.imulK(u4), u4 = u4.iadd(this.tmp), c2 = u4.bitLength();
        while (c2 > this.n);
        var b3 = c2 < this.n ? -1 : u4.ucmp(this.p);
        return b3 === 0 ? (u4.words[0] = 0, u4.length = 1) : b3 > 0 ? u4.isub(this.p) : u4.strip !== undefined ? u4.strip() : u4._strip(), u4;
      }, Ee.prototype.split = function(s3, u4) {
        s3.iushrn(this.n, 0, u4);
      }, Ee.prototype.imulK = function(s3) {
        return s3.imul(this.k);
      };
      function Ae() {
        Ee.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      o2(Ae, Ee), Ae.prototype.split = function(s3, u4) {
        for (var c2 = 4194303, b3 = Math.min(s3.length, 9), l3 = 0;l3 < b3; l3++)
          u4.words[l3] = s3.words[l3];
        if (u4.length = b3, s3.length <= 9) {
          s3.words[0] = 0, s3.length = 1;
          return;
        }
        var n32 = s3.words[9];
        for (u4.words[u4.length++] = n32 & c2, l3 = 10;l3 < s3.length; l3++) {
          var d2 = s3.words[l3] | 0;
          s3.words[l3 - 10] = (d2 & c2) << 4 | n32 >>> 22, n32 = d2;
        }
        n32 >>>= 22, s3.words[l3 - 10] = n32, n32 === 0 && s3.length > 10 ? s3.length -= 10 : s3.length -= 9;
      }, Ae.prototype.imulK = function(s3) {
        s3.words[s3.length] = 0, s3.words[s3.length + 1] = 0, s3.length += 2;
        for (var u4 = 0, c2 = 0;c2 < s3.length; c2++) {
          var b3 = s3.words[c2] | 0;
          u4 += b3 * 977, s3.words[c2] = u4 & 67108863, u4 = b3 * 64 + (u4 / 67108864 | 0);
        }
        return s3.words[s3.length - 1] === 0 && (s3.length--, s3.words[s3.length - 1] === 0 && s3.length--), s3;
      };
      function P() {
        Ee.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      o2(P, Ee);
      function Se() {
        Ee.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      o2(Se, Ee);
      function v32() {
        Ee.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      o2(v32, Ee), v32.prototype.imulK = function(s3) {
        for (var u4 = 0, c2 = 0;c2 < s3.length; c2++) {
          var b3 = (s3.words[c2] | 0) * 19 + u4, l3 = b3 & 67108863;
          b3 >>>= 26, s3.words[c2] = l3, u4 = b3;
        }
        return u4 !== 0 && (s3.words[s3.length++] = u4), s3;
      }, f2._prime = function(s3) {
        if (Re[s3])
          return Re[s3];
        var u4;
        if (s3 === "k256")
          u4 = new Ae;
        else if (s3 === "p224")
          u4 = new P;
        else if (s3 === "p192")
          u4 = new Se;
        else if (s3 === "p25519")
          u4 = new v32;
        else
          throw new Error("Unknown prime " + s3);
        return Re[s3] = u4, u4;
      };
      function i(h3) {
        if (typeof h3 == "string") {
          var s3 = f2._prime(h3);
          this.m = s3.p, this.prime = s3;
        } else
          r2(h3.gtn(1), "modulus must be greater than 1"), this.m = h3, this.prime = null;
      }
      i.prototype._verify1 = function(s3) {
        r2(s3.negative === 0, "red works only with positives"), r2(s3.red, "red works only with red numbers");
      }, i.prototype._verify2 = function(s3, u4) {
        r2((s3.negative | u4.negative) === 0, "red works only with positives"), r2(s3.red && s3.red === u4.red, "red works only with red numbers");
      }, i.prototype.imod = function(s3) {
        return this.prime ? this.prime.ireduce(s3)._forceRed(this) : (x5(s3, s3.umod(this.m)._forceRed(this)), s3);
      }, i.prototype.neg = function(s3) {
        return s3.isZero() ? s3.clone() : this.m.sub(s3)._forceRed(this);
      }, i.prototype.add = function(s3, u4) {
        this._verify2(s3, u4);
        var c2 = s3.add(u4);
        return c2.cmp(this.m) >= 0 && c2.isub(this.m), c2._forceRed(this);
      }, i.prototype.iadd = function(s3, u4) {
        this._verify2(s3, u4);
        var c2 = s3.iadd(u4);
        return c2.cmp(this.m) >= 0 && c2.isub(this.m), c2;
      }, i.prototype.sub = function(s3, u4) {
        this._verify2(s3, u4);
        var c2 = s3.sub(u4);
        return c2.cmpn(0) < 0 && c2.iadd(this.m), c2._forceRed(this);
      }, i.prototype.isub = function(s3, u4) {
        this._verify2(s3, u4);
        var c2 = s3.isub(u4);
        return c2.cmpn(0) < 0 && c2.iadd(this.m), c2;
      }, i.prototype.shl = function(s3, u4) {
        return this._verify1(s3), this.imod(s3.ushln(u4));
      }, i.prototype.imul = function(s3, u4) {
        return this._verify2(s3, u4), this.imod(s3.imul(u4));
      }, i.prototype.mul = function(s3, u4) {
        return this._verify2(s3, u4), this.imod(s3.mul(u4));
      }, i.prototype.isqr = function(s3) {
        return this.imul(s3, s3.clone());
      }, i.prototype.sqr = function(s3) {
        return this.mul(s3, s3);
      }, i.prototype.sqrt = function(s3) {
        if (s3.isZero())
          return s3.clone();
        var u4 = this.m.andln(3);
        if (r2(u4 % 2 === 1), u4 === 3) {
          var c2 = this.m.add(new f2(1)).iushrn(2);
          return this.pow(s3, c2);
        }
        for (var b3 = this.m.subn(1), l3 = 0;!b3.isZero() && b3.andln(1) === 0; )
          l3++, b3.iushrn(1);
        r2(!b3.isZero());
        var n32 = new f2(1).toRed(this), d2 = n32.redNeg(), w3 = this.m.subn(1).iushrn(1), g2 = this.m.bitLength();
        for (g2 = new f2(2 * g2 * g2).toRed(this);this.pow(g2, w3).cmp(d2) !== 0; )
          g2.redIAdd(d2);
        for (var _5 = this.pow(g2, b3), A6 = this.pow(s3, b3.addn(1).iushrn(1)), R4 = this.pow(s3, b3), I2 = l3;R4.cmp(n32) !== 0; ) {
          for (var Me = R4, k32 = 0;Me.cmp(n32) !== 0; k32++)
            Me = Me.redSqr();
          r2(k32 < I2);
          var D3 = this.pow(_5, new f2(1).iushln(I2 - k32 - 1));
          A6 = A6.redMul(D3), _5 = D3.redSqr(), R4 = R4.redMul(_5), I2 = k32;
        }
        return A6;
      }, i.prototype.invm = function(s3) {
        var u4 = s3._invmp(this.m);
        return u4.negative !== 0 ? (u4.negative = 0, this.imod(u4).redNeg()) : this.imod(u4);
      }, i.prototype.pow = function(s3, u4) {
        if (u4.isZero())
          return new f2(1).toRed(this);
        if (u4.cmpn(1) === 0)
          return s3.clone();
        var c2 = 4, b3 = new Array(1 << c2);
        b3[0] = new f2(1).toRed(this), b3[1] = s3;
        for (var l3 = 2;l3 < b3.length; l3++)
          b3[l3] = this.mul(b3[l3 - 1], s3);
        var n32 = b3[0], d2 = 0, w3 = 0, g2 = u4.bitLength() % 26;
        for (g2 === 0 && (g2 = 26), l3 = u4.length - 1;l3 >= 0; l3--) {
          for (var _5 = u4.words[l3], A6 = g2 - 1;A6 >= 0; A6--) {
            var R4 = _5 >> A6 & 1;
            if (n32 !== b3[0] && (n32 = this.sqr(n32)), R4 === 0 && d2 === 0) {
              w3 = 0;
              continue;
            }
            d2 <<= 1, d2 |= R4, w3++, !(w3 !== c2 && (l3 !== 0 || A6 !== 0)) && (n32 = this.mul(n32, b3[d2]), w3 = 0, d2 = 0);
          }
          g2 = 26;
        }
        return n32;
      }, i.prototype.convertTo = function(s3) {
        var u4 = s3.umod(this.m);
        return u4 === s3 ? u4.clone() : u4;
      }, i.prototype.convertFrom = function(s3) {
        var u4 = s3.clone();
        return u4.red = null, u4;
      }, f2.mont = function(s3) {
        return new a2(s3);
      };
      function a2(h3) {
        i.call(this, h3), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new f2(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
      }
      o2(a2, i), a2.prototype.convertTo = function(s3) {
        return this.imod(s3.ushln(this.shift));
      }, a2.prototype.convertFrom = function(s3) {
        var u4 = this.imod(s3.mul(this.rinv));
        return u4.red = null, u4;
      }, a2.prototype.imul = function(s3, u4) {
        if (s3.isZero() || u4.isZero())
          return s3.words[0] = 0, s3.length = 1, s3;
        var c2 = s3.imul(u4), b3 = c2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), l3 = c2.isub(b3).iushrn(this.shift), n32 = l3;
        return l3.cmp(this.m) >= 0 ? n32 = l3.isub(this.m) : l3.cmpn(0) < 0 && (n32 = l3.iadd(this.m)), n32._forceRed(this);
      }, a2.prototype.mul = function(s3, u4) {
        if (s3.isZero() || u4.isZero())
          return new f2(0)._forceRed(this);
        var c2 = s3.mul(u4), b3 = c2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), l3 = c2.isub(b3).iushrn(this.shift), n32 = l3;
        return l3.cmp(this.m) >= 0 ? n32 = l3.isub(this.m) : l3.cmpn(0) < 0 && (n32 = l3.iadd(this.m)), n32._forceRed(this);
      }, a2.prototype.invm = function(s3) {
        var u4 = this.imod(s3._invmp(this.m).mul(this.r2));
        return u4._forceRed(this);
      };
    })(typeof kl > "u" || kl, n22);
  });
  Ks = T2((yk, o2) => {
    var Rf = Ws(), oA = on();
    function sA(t3) {
      var e2 = f2(t3), r2 = e2.toRed(Rf.mont(t3.modulus)).redPow(new Rf(t3.publicExponent)).fromRed();
      return { blinder: r2, unblinder: e2.invm(t3.modulus) };
    }
    function f2(t3) {
      var e2 = t3.modulus.byteLength(), r2;
      do
        r2 = new Rf(oA(e2));
      while (r2.cmp(t3.modulus) >= 0 || !r2.umod(t3.prime1) || !r2.umod(t3.prime2));
      return r2;
    }
    function a2(t3, e2) {
      var r2 = sA(e2), o32 = e2.modulus.byteLength(), f3 = new Rf(t3).mul(r2.blinder).umod(e2.modulus), p2 = f3.toRed(Rf.mont(e2.prime1)), m32 = f3.toRed(Rf.mont(e2.prime2)), y22 = e2.coefficient, M3 = e2.prime1, x5 = e2.prime2, S2 = p2.redPow(e2.exponent1).fromRed(), E4 = m32.redPow(e2.exponent2).fromRed(), B5 = S2.isub(E4).imul(y22).umod(M3).imul(x5);
      return E4.iadd(B5).imul(r2.unblinder).umod(e2.modulus).toArrayLike(Buffer, "be", o32);
    }
    a2.getr = f2;
    o2.exports = a2;
  });
  s22 = T2((wk, hA) => {
    hA.exports = { name: "elliptic", version: "6.5.4", description: "EC cryptography", main: "lib/elliptic.js", files: ["lib"], scripts: { lint: "eslint lib test", "lint:fix": "npm run lint -- --fix", unit: "istanbul test _mocha --reporter=spec test/index.js", test: "npm run lint && npm run unit", version: "grunt dist && git add dist/" }, repository: { type: "git", url: "git@github.com:indutny/elliptic" }, keywords: ["EC", "Elliptic", "curve", "Cryptography"], author: "Fedor Indutny <fedor@indutny.com>", license: "MIT", bugs: { url: "https://github.com/indutny/elliptic/issues" }, homepage: "https://github.com/indutny/elliptic", devDependencies: { brfs: "^2.0.2", coveralls: "^3.1.0", eslint: "^7.6.0", grunt: "^1.2.1", "grunt-browserify": "^5.3.0", "grunt-cli": "^1.3.2", "grunt-contrib-connect": "^3.0.0", "grunt-contrib-copy": "^1.0.0", "grunt-contrib-uglify": "^5.0.0", "grunt-mocha-istanbul": "^5.0.2", "grunt-saucelabs": "^9.0.1", istanbul: "^0.4.5", mocha: "^8.0.1" }, dependencies: { "bn.js": "^4.11.9", brorand: "^1.1.0", "hash.js": "^1.0.0", "hmac-drbg": "^1.0.1", inherits: "^2.0.4", "minimalistic-assert": "^1.0.1", "minimalistic-crypto-utils": "^1.0.1" } };
  });
  ri = T2((h22, Ll) => {
    (function(t3, e2) {
      function r2(v32, i) {
        if (!v32)
          throw new Error(i || "Assertion failed");
      }
      function o2(v32, i) {
        v32.super_ = i;
        var a2 = function() {
        };
        a2.prototype = i.prototype, v32.prototype = new a2, v32.prototype.constructor = v32;
      }
      function f2(v32, i, a2) {
        if (f2.isBN(v32))
          return v32;
        this.negative = 0, this.words = null, this.length = 0, this.red = null, v32 !== null && ((i === "le" || i === "be") && (a2 = i, i = 10), this._init(v32 || 0, i || 10, a2 || "be"));
      }
      typeof t3 == "object" ? t3.exports = f2 : e2.BN = f2, f2.BN = f2, f2.wordSize = 26;
      var p2;
      try {
        typeof window < "u" && typeof window.Buffer < "u" ? p2 = window.Buffer : p2 = ji().Buffer;
      } catch {
      }
      f2.isBN = function(i) {
        return i instanceof f2 ? true : i !== null && typeof i == "object" && i.constructor.wordSize === f2.wordSize && Array.isArray(i.words);
      }, f2.max = function(i, a2) {
        return i.cmp(a2) > 0 ? i : a2;
      }, f2.min = function(i, a2) {
        return i.cmp(a2) < 0 ? i : a2;
      }, f2.prototype._init = function(i, a2, h3) {
        if (typeof i == "number")
          return this._initNumber(i, a2, h3);
        if (typeof i == "object")
          return this._initArray(i, a2, h3);
        a2 === "hex" && (a2 = 16), r2(a2 === (a2 | 0) && a2 >= 2 && a2 <= 36), i = i.toString().replace(/\s+/g, "");
        var s3 = 0;
        i[0] === "-" && (s3++, this.negative = 1), s3 < i.length && (a2 === 16 ? this._parseHex(i, s3, h3) : (this._parseBase(i, a2, s3), h3 === "le" && this._initArray(this.toArray(), a2, h3)));
      }, f2.prototype._initNumber = function(i, a2, h3) {
        i < 0 && (this.negative = 1, i = -i), i < 67108864 ? (this.words = [i & 67108863], this.length = 1) : i < 4503599627370496 ? (this.words = [i & 67108863, i / 67108864 & 67108863], this.length = 2) : (r2(i < 9007199254740992), this.words = [i & 67108863, i / 67108864 & 67108863, 1], this.length = 3), h3 === "le" && this._initArray(this.toArray(), a2, h3);
      }, f2.prototype._initArray = function(i, a2, h3) {
        if (r2(typeof i.length == "number"), i.length <= 0)
          return this.words = [0], this.length = 1, this;
        this.length = Math.ceil(i.length / 3), this.words = new Array(this.length);
        for (var s3 = 0;s3 < this.length; s3++)
          this.words[s3] = 0;
        var u4, c2, b3 = 0;
        if (h3 === "be")
          for (s3 = i.length - 1, u4 = 0;s3 >= 0; s3 -= 3)
            c2 = i[s3] | i[s3 - 1] << 8 | i[s3 - 2] << 16, this.words[u4] |= c2 << b3 & 67108863, this.words[u4 + 1] = c2 >>> 26 - b3 & 67108863, b3 += 24, b3 >= 26 && (b3 -= 26, u4++);
        else if (h3 === "le")
          for (s3 = 0, u4 = 0;s3 < i.length; s3 += 3)
            c2 = i[s3] | i[s3 + 1] << 8 | i[s3 + 2] << 16, this.words[u4] |= c2 << b3 & 67108863, this.words[u4 + 1] = c2 >>> 26 - b3 & 67108863, b3 += 24, b3 >= 26 && (b3 -= 26, u4++);
        return this.strip();
      };
      function m32(v32, i) {
        var a2 = v32.charCodeAt(i);
        return a2 >= 65 && a2 <= 70 ? a2 - 55 : a2 >= 97 && a2 <= 102 ? a2 - 87 : a2 - 48 & 15;
      }
      function y22(v32, i, a2) {
        var h3 = m32(v32, a2);
        return a2 - 1 >= i && (h3 |= m32(v32, a2 - 1) << 4), h3;
      }
      f2.prototype._parseHex = function(i, a2, h3) {
        this.length = Math.ceil((i.length - a2) / 6), this.words = new Array(this.length);
        for (var s3 = 0;s3 < this.length; s3++)
          this.words[s3] = 0;
        var u4 = 0, c2 = 0, b3;
        if (h3 === "be")
          for (s3 = i.length - 1;s3 >= a2; s3 -= 2)
            b3 = y22(i, a2, s3) << u4, this.words[c2] |= b3 & 67108863, u4 >= 18 ? (u4 -= 18, c2 += 1, this.words[c2] |= b3 >>> 26) : u4 += 8;
        else {
          var l3 = i.length - a2;
          for (s3 = l3 % 2 === 0 ? a2 + 1 : a2;s3 < i.length; s3 += 2)
            b3 = y22(i, a2, s3) << u4, this.words[c2] |= b3 & 67108863, u4 >= 18 ? (u4 -= 18, c2 += 1, this.words[c2] |= b3 >>> 26) : u4 += 8;
        }
        this.strip();
      };
      function M3(v32, i, a2, h3) {
        for (var s3 = 0, u4 = Math.min(v32.length, a2), c2 = i;c2 < u4; c2++) {
          var b3 = v32.charCodeAt(c2) - 48;
          s3 *= h3, b3 >= 49 ? s3 += b3 - 49 + 10 : b3 >= 17 ? s3 += b3 - 17 + 10 : s3 += b3;
        }
        return s3;
      }
      f2.prototype._parseBase = function(i, a2, h3) {
        this.words = [0], this.length = 1;
        for (var s3 = 0, u4 = 1;u4 <= 67108863; u4 *= a2)
          s3++;
        s3--, u4 = u4 / a2 | 0;
        for (var c2 = i.length - h3, b3 = c2 % s3, l3 = Math.min(c2, c2 - b3) + h3, n32 = 0, d2 = h3;d2 < l3; d2 += s3)
          n32 = M3(i, d2, d2 + s3, a2), this.imuln(u4), this.words[0] + n32 < 67108864 ? this.words[0] += n32 : this._iaddn(n32);
        if (b3 !== 0) {
          var w3 = 1;
          for (n32 = M3(i, d2, i.length, a2), d2 = 0;d2 < b3; d2++)
            w3 *= a2;
          this.imuln(w3), this.words[0] + n32 < 67108864 ? this.words[0] += n32 : this._iaddn(n32);
        }
        this.strip();
      }, f2.prototype.copy = function(i) {
        i.words = new Array(this.length);
        for (var a2 = 0;a2 < this.length; a2++)
          i.words[a2] = this.words[a2];
        i.length = this.length, i.negative = this.negative, i.red = this.red;
      }, f2.prototype.clone = function() {
        var i = new f2(null);
        return this.copy(i), i;
      }, f2.prototype._expand = function(i) {
        for (;this.length < i; )
          this.words[this.length++] = 0;
        return this;
      }, f2.prototype.strip = function() {
        for (;this.length > 1 && this.words[this.length - 1] === 0; )
          this.length--;
        return this._normSign();
      }, f2.prototype._normSign = function() {
        return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
      }, f2.prototype.inspect = function() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var x5 = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"], S2 = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], E4 = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
      f2.prototype.toString = function(i, a2) {
        i = i || 10, a2 = a2 | 0 || 1;
        var h3;
        if (i === 16 || i === "hex") {
          h3 = "";
          for (var s3 = 0, u4 = 0, c2 = 0;c2 < this.length; c2++) {
            var b3 = this.words[c2], l3 = ((b3 << s3 | u4) & 16777215).toString(16);
            u4 = b3 >>> 24 - s3 & 16777215, u4 !== 0 || c2 !== this.length - 1 ? h3 = x5[6 - l3.length] + l3 + h3 : h3 = l3 + h3, s3 += 2, s3 >= 26 && (s3 -= 26, c2--);
          }
          for (u4 !== 0 && (h3 = u4.toString(16) + h3);h3.length % a2 !== 0; )
            h3 = "0" + h3;
          return this.negative !== 0 && (h3 = "-" + h3), h3;
        }
        if (i === (i | 0) && i >= 2 && i <= 36) {
          var n32 = S2[i], d2 = E4[i];
          h3 = "";
          var w3 = this.clone();
          for (w3.negative = 0;!w3.isZero(); ) {
            var g2 = w3.modn(d2).toString(i);
            w3 = w3.idivn(d2), w3.isZero() ? h3 = g2 + h3 : h3 = x5[n32 - g2.length] + g2 + h3;
          }
          for (this.isZero() && (h3 = "0" + h3);h3.length % a2 !== 0; )
            h3 = "0" + h3;
          return this.negative !== 0 && (h3 = "-" + h3), h3;
        }
        r2(false, "Base should be between 2 and 36");
      }, f2.prototype.toNumber = function() {
        var i = this.words[0];
        return this.length === 2 ? i += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? i += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && r2(false, "Number can only safely store up to 53 bits"), this.negative !== 0 ? -i : i;
      }, f2.prototype.toJSON = function() {
        return this.toString(16);
      }, f2.prototype.toBuffer = function(i, a2) {
        return r2(typeof p2 < "u"), this.toArrayLike(p2, i, a2);
      }, f2.prototype.toArray = function(i, a2) {
        return this.toArrayLike(Array, i, a2);
      }, f2.prototype.toArrayLike = function(i, a2, h3) {
        var s3 = this.byteLength(), u4 = h3 || Math.max(1, s3);
        r2(s3 <= u4, "byte array longer than desired length"), r2(u4 > 0, "Requested array length <= 0"), this.strip();
        var c2 = a2 === "le", b3 = new i(u4), l3, n32, d2 = this.clone();
        if (c2) {
          for (n32 = 0;!d2.isZero(); n32++)
            l3 = d2.andln(255), d2.iushrn(8), b3[n32] = l3;
          for (;n32 < u4; n32++)
            b3[n32] = 0;
        } else {
          for (n32 = 0;n32 < u4 - s3; n32++)
            b3[n32] = 0;
          for (n32 = 0;!d2.isZero(); n32++)
            l3 = d2.andln(255), d2.iushrn(8), b3[u4 - n32 - 1] = l3;
        }
        return b3;
      }, Math.clz32 ? f2.prototype._countBits = function(i) {
        return 32 - Math.clz32(i);
      } : f2.prototype._countBits = function(i) {
        var a2 = i, h3 = 0;
        return a2 >= 4096 && (h3 += 13, a2 >>>= 13), a2 >= 64 && (h3 += 7, a2 >>>= 7), a2 >= 8 && (h3 += 4, a2 >>>= 4), a2 >= 2 && (h3 += 2, a2 >>>= 2), h3 + a2;
      }, f2.prototype._zeroBits = function(i) {
        if (i === 0)
          return 26;
        var a2 = i, h3 = 0;
        return (a2 & 8191) === 0 && (h3 += 13, a2 >>>= 13), (a2 & 127) === 0 && (h3 += 7, a2 >>>= 7), (a2 & 15) === 0 && (h3 += 4, a2 >>>= 4), (a2 & 3) === 0 && (h3 += 2, a2 >>>= 2), (a2 & 1) === 0 && h3++, h3;
      }, f2.prototype.bitLength = function() {
        var i = this.words[this.length - 1], a2 = this._countBits(i);
        return (this.length - 1) * 26 + a2;
      };
      function B5(v32) {
        for (var i = new Array(v32.bitLength()), a2 = 0;a2 < i.length; a2++) {
          var h3 = a2 / 26 | 0, s3 = a2 % 26;
          i[a2] = (v32.words[h3] & 1 << s3) >>> s3;
        }
        return i;
      }
      f2.prototype.zeroBits = function() {
        if (this.isZero())
          return 0;
        for (var i = 0, a2 = 0;a2 < this.length; a2++) {
          var h3 = this._zeroBits(this.words[a2]);
          if (i += h3, h3 !== 26)
            break;
        }
        return i;
      }, f2.prototype.byteLength = function() {
        return Math.ceil(this.bitLength() / 8);
      }, f2.prototype.toTwos = function(i) {
        return this.negative !== 0 ? this.abs().inotn(i).iaddn(1) : this.clone();
      }, f2.prototype.fromTwos = function(i) {
        return this.testn(i - 1) ? this.notn(i).iaddn(1).ineg() : this.clone();
      }, f2.prototype.isNeg = function() {
        return this.negative !== 0;
      }, f2.prototype.neg = function() {
        return this.clone().ineg();
      }, f2.prototype.ineg = function() {
        return this.isZero() || (this.negative ^= 1), this;
      }, f2.prototype.iuor = function(i) {
        for (;this.length < i.length; )
          this.words[this.length++] = 0;
        for (var a2 = 0;a2 < i.length; a2++)
          this.words[a2] = this.words[a2] | i.words[a2];
        return this.strip();
      }, f2.prototype.ior = function(i) {
        return r2((this.negative | i.negative) === 0), this.iuor(i);
      }, f2.prototype.or = function(i) {
        return this.length > i.length ? this.clone().ior(i) : i.clone().ior(this);
      }, f2.prototype.uor = function(i) {
        return this.length > i.length ? this.clone().iuor(i) : i.clone().iuor(this);
      }, f2.prototype.iuand = function(i) {
        var a2;
        this.length > i.length ? a2 = i : a2 = this;
        for (var h3 = 0;h3 < a2.length; h3++)
          this.words[h3] = this.words[h3] & i.words[h3];
        return this.length = a2.length, this.strip();
      }, f2.prototype.iand = function(i) {
        return r2((this.negative | i.negative) === 0), this.iuand(i);
      }, f2.prototype.and = function(i) {
        return this.length > i.length ? this.clone().iand(i) : i.clone().iand(this);
      }, f2.prototype.uand = function(i) {
        return this.length > i.length ? this.clone().iuand(i) : i.clone().iuand(this);
      }, f2.prototype.iuxor = function(i) {
        var a2, h3;
        this.length > i.length ? (a2 = this, h3 = i) : (a2 = i, h3 = this);
        for (var s3 = 0;s3 < h3.length; s3++)
          this.words[s3] = a2.words[s3] ^ h3.words[s3];
        if (this !== a2)
          for (;s3 < a2.length; s3++)
            this.words[s3] = a2.words[s3];
        return this.length = a2.length, this.strip();
      }, f2.prototype.ixor = function(i) {
        return r2((this.negative | i.negative) === 0), this.iuxor(i);
      }, f2.prototype.xor = function(i) {
        return this.length > i.length ? this.clone().ixor(i) : i.clone().ixor(this);
      }, f2.prototype.uxor = function(i) {
        return this.length > i.length ? this.clone().iuxor(i) : i.clone().iuxor(this);
      }, f2.prototype.inotn = function(i) {
        r2(typeof i == "number" && i >= 0);
        var a2 = Math.ceil(i / 26) | 0, h3 = i % 26;
        this._expand(a2), h3 > 0 && a2--;
        for (var s3 = 0;s3 < a2; s3++)
          this.words[s3] = ~this.words[s3] & 67108863;
        return h3 > 0 && (this.words[s3] = ~this.words[s3] & 67108863 >> 26 - h3), this.strip();
      }, f2.prototype.notn = function(i) {
        return this.clone().inotn(i);
      }, f2.prototype.setn = function(i, a2) {
        r2(typeof i == "number" && i >= 0);
        var h3 = i / 26 | 0, s3 = i % 26;
        return this._expand(h3 + 1), a2 ? this.words[h3] = this.words[h3] | 1 << s3 : this.words[h3] = this.words[h3] & ~(1 << s3), this.strip();
      }, f2.prototype.iadd = function(i) {
        var a2;
        if (this.negative !== 0 && i.negative === 0)
          return this.negative = 0, a2 = this.isub(i), this.negative ^= 1, this._normSign();
        if (this.negative === 0 && i.negative !== 0)
          return i.negative = 0, a2 = this.isub(i), i.negative = 1, a2._normSign();
        var h3, s3;
        this.length > i.length ? (h3 = this, s3 = i) : (h3 = i, s3 = this);
        for (var u4 = 0, c2 = 0;c2 < s3.length; c2++)
          a2 = (h3.words[c2] | 0) + (s3.words[c2] | 0) + u4, this.words[c2] = a2 & 67108863, u4 = a2 >>> 26;
        for (;u4 !== 0 && c2 < h3.length; c2++)
          a2 = (h3.words[c2] | 0) + u4, this.words[c2] = a2 & 67108863, u4 = a2 >>> 26;
        if (this.length = h3.length, u4 !== 0)
          this.words[this.length] = u4, this.length++;
        else if (h3 !== this)
          for (;c2 < h3.length; c2++)
            this.words[c2] = h3.words[c2];
        return this;
      }, f2.prototype.add = function(i) {
        var a2;
        return i.negative !== 0 && this.negative === 0 ? (i.negative = 0, a2 = this.sub(i), i.negative ^= 1, a2) : i.negative === 0 && this.negative !== 0 ? (this.negative = 0, a2 = i.sub(this), this.negative = 1, a2) : this.length > i.length ? this.clone().iadd(i) : i.clone().iadd(this);
      }, f2.prototype.isub = function(i) {
        if (i.negative !== 0) {
          i.negative = 0;
          var a2 = this.iadd(i);
          return i.negative = 1, a2._normSign();
        } else if (this.negative !== 0)
          return this.negative = 0, this.iadd(i), this.negative = 1, this._normSign();
        var h3 = this.cmp(i);
        if (h3 === 0)
          return this.negative = 0, this.length = 1, this.words[0] = 0, this;
        var s3, u4;
        h3 > 0 ? (s3 = this, u4 = i) : (s3 = i, u4 = this);
        for (var c2 = 0, b3 = 0;b3 < u4.length; b3++)
          a2 = (s3.words[b3] | 0) - (u4.words[b3] | 0) + c2, c2 = a2 >> 26, this.words[b3] = a2 & 67108863;
        for (;c2 !== 0 && b3 < s3.length; b3++)
          a2 = (s3.words[b3] | 0) + c2, c2 = a2 >> 26, this.words[b3] = a2 & 67108863;
        if (c2 === 0 && b3 < s3.length && s3 !== this)
          for (;b3 < s3.length; b3++)
            this.words[b3] = s3.words[b3];
        return this.length = Math.max(this.length, b3), s3 !== this && (this.negative = 1), this.strip();
      }, f2.prototype.sub = function(i) {
        return this.clone().isub(i);
      };
      function q(v32, i, a2) {
        a2.negative = i.negative ^ v32.negative;
        var h3 = v32.length + i.length | 0;
        a2.length = h3, h3 = h3 - 1 | 0;
        var s3 = v32.words[0] | 0, u4 = i.words[0] | 0, c2 = s3 * u4, b3 = c2 & 67108863, l3 = c2 / 67108864 | 0;
        a2.words[0] = b3;
        for (var n32 = 1;n32 < h3; n32++) {
          for (var d2 = l3 >>> 26, w3 = l3 & 67108863, g2 = Math.min(n32, i.length - 1), _5 = Math.max(0, n32 - v32.length + 1);_5 <= g2; _5++) {
            var A6 = n32 - _5 | 0;
            s3 = v32.words[A6] | 0, u4 = i.words[_5] | 0, c2 = s3 * u4 + w3, d2 += c2 / 67108864 | 0, w3 = c2 & 67108863;
          }
          a2.words[n32] = w3 | 0, l3 = d2 | 0;
        }
        return l3 !== 0 ? a2.words[n32] = l3 | 0 : a2.length--, a2.strip();
      }
      var L2 = function(i, a2, h3) {
        var s3 = i.words, u4 = a2.words, c2 = h3.words, b3 = 0, l3, n32, d2, w3 = s3[0] | 0, g2 = w3 & 8191, _5 = w3 >>> 13, A6 = s3[1] | 0, R4 = A6 & 8191, I2 = A6 >>> 13, Me = s3[2] | 0, k32 = Me & 8191, D3 = Me >>> 13, nt = s3[3] | 0, C3 = nt & 8191, O4 = nt >>> 13, vt = s3[4] | 0, F = vt & 8191, U2 = vt >>> 13, bt = s3[5] | 0, z4 = bt & 8191, H4 = bt >>> 13, mt = s3[6] | 0, W3 = mt & 8191, K2 = mt >>> 13, gt = s3[7] | 0, j32 = gt & 8191, Z4 = gt >>> 13, yt = s3[8] | 0, V22 = yt & 8191, $3 = yt >>> 13, wt = s3[9] | 0, G5 = wt & 8191, Y2 = wt >>> 13, Mt = u4[0] | 0, X4 = Mt & 8191, J = Mt >>> 13, _t = u4[1] | 0, Q4 = _t & 8191, ee = _t >>> 13, xt = u4[2] | 0, te = xt & 8191, re = xt >>> 13, St = u4[3] | 0, ie = St & 8191, ne = St >>> 13, Et = u4[4] | 0, fe = Et & 8191, ae = Et >>> 13, At = u4[5] | 0, oe = At & 8191, se = At >>> 13, Rt = u4[6] | 0, he = Rt & 8191, ue = Rt >>> 13, Bt = u4[7] | 0, le = Bt & 8191, de = Bt >>> 13, qt = u4[8] | 0, ce = qt & 8191, pe = qt >>> 13, It = u4[9] | 0, ve = It & 8191, be = It >>> 13;
        h3.negative = i.negative ^ a2.negative, h3.length = 19, l3 = Math.imul(g2, X4), n32 = Math.imul(g2, J), n32 = n32 + Math.imul(_5, X4) | 0, d2 = Math.imul(_5, J);
        var ft = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (ft >>> 26) | 0, ft &= 67108863, l3 = Math.imul(R4, X4), n32 = Math.imul(R4, J), n32 = n32 + Math.imul(I2, X4) | 0, d2 = Math.imul(I2, J), l3 = l3 + Math.imul(g2, Q4) | 0, n32 = n32 + Math.imul(g2, ee) | 0, n32 = n32 + Math.imul(_5, Q4) | 0, d2 = d2 + Math.imul(_5, ee) | 0;
        var Be = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Be >>> 26) | 0, Be &= 67108863, l3 = Math.imul(k32, X4), n32 = Math.imul(k32, J), n32 = n32 + Math.imul(D3, X4) | 0, d2 = Math.imul(D3, J), l3 = l3 + Math.imul(R4, Q4) | 0, n32 = n32 + Math.imul(R4, ee) | 0, n32 = n32 + Math.imul(I2, Q4) | 0, d2 = d2 + Math.imul(I2, ee) | 0, l3 = l3 + Math.imul(g2, te) | 0, n32 = n32 + Math.imul(g2, re) | 0, n32 = n32 + Math.imul(_5, te) | 0, d2 = d2 + Math.imul(_5, re) | 0;
        var qe = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (qe >>> 26) | 0, qe &= 67108863, l3 = Math.imul(C3, X4), n32 = Math.imul(C3, J), n32 = n32 + Math.imul(O4, X4) | 0, d2 = Math.imul(O4, J), l3 = l3 + Math.imul(k32, Q4) | 0, n32 = n32 + Math.imul(k32, ee) | 0, n32 = n32 + Math.imul(D3, Q4) | 0, d2 = d2 + Math.imul(D3, ee) | 0, l3 = l3 + Math.imul(R4, te) | 0, n32 = n32 + Math.imul(R4, re) | 0, n32 = n32 + Math.imul(I2, te) | 0, d2 = d2 + Math.imul(I2, re) | 0, l3 = l3 + Math.imul(g2, ie) | 0, n32 = n32 + Math.imul(g2, ne) | 0, n32 = n32 + Math.imul(_5, ie) | 0, d2 = d2 + Math.imul(_5, ne) | 0;
        var ze = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (ze >>> 26) | 0, ze &= 67108863, l3 = Math.imul(F, X4), n32 = Math.imul(F, J), n32 = n32 + Math.imul(U2, X4) | 0, d2 = Math.imul(U2, J), l3 = l3 + Math.imul(C3, Q4) | 0, n32 = n32 + Math.imul(C3, ee) | 0, n32 = n32 + Math.imul(O4, Q4) | 0, d2 = d2 + Math.imul(O4, ee) | 0, l3 = l3 + Math.imul(k32, te) | 0, n32 = n32 + Math.imul(k32, re) | 0, n32 = n32 + Math.imul(D3, te) | 0, d2 = d2 + Math.imul(D3, re) | 0, l3 = l3 + Math.imul(R4, ie) | 0, n32 = n32 + Math.imul(R4, ne) | 0, n32 = n32 + Math.imul(I2, ie) | 0, d2 = d2 + Math.imul(I2, ne) | 0, l3 = l3 + Math.imul(g2, fe) | 0, n32 = n32 + Math.imul(g2, ae) | 0, n32 = n32 + Math.imul(_5, fe) | 0, d2 = d2 + Math.imul(_5, ae) | 0;
        var He = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (He >>> 26) | 0, He &= 67108863, l3 = Math.imul(z4, X4), n32 = Math.imul(z4, J), n32 = n32 + Math.imul(H4, X4) | 0, d2 = Math.imul(H4, J), l3 = l3 + Math.imul(F, Q4) | 0, n32 = n32 + Math.imul(F, ee) | 0, n32 = n32 + Math.imul(U2, Q4) | 0, d2 = d2 + Math.imul(U2, ee) | 0, l3 = l3 + Math.imul(C3, te) | 0, n32 = n32 + Math.imul(C3, re) | 0, n32 = n32 + Math.imul(O4, te) | 0, d2 = d2 + Math.imul(O4, re) | 0, l3 = l3 + Math.imul(k32, ie) | 0, n32 = n32 + Math.imul(k32, ne) | 0, n32 = n32 + Math.imul(D3, ie) | 0, d2 = d2 + Math.imul(D3, ne) | 0, l3 = l3 + Math.imul(R4, fe) | 0, n32 = n32 + Math.imul(R4, ae) | 0, n32 = n32 + Math.imul(I2, fe) | 0, d2 = d2 + Math.imul(I2, ae) | 0, l3 = l3 + Math.imul(g2, oe) | 0, n32 = n32 + Math.imul(g2, se) | 0, n32 = n32 + Math.imul(_5, oe) | 0, d2 = d2 + Math.imul(_5, se) | 0;
        var We = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (We >>> 26) | 0, We &= 67108863, l3 = Math.imul(W3, X4), n32 = Math.imul(W3, J), n32 = n32 + Math.imul(K2, X4) | 0, d2 = Math.imul(K2, J), l3 = l3 + Math.imul(z4, Q4) | 0, n32 = n32 + Math.imul(z4, ee) | 0, n32 = n32 + Math.imul(H4, Q4) | 0, d2 = d2 + Math.imul(H4, ee) | 0, l3 = l3 + Math.imul(F, te) | 0, n32 = n32 + Math.imul(F, re) | 0, n32 = n32 + Math.imul(U2, te) | 0, d2 = d2 + Math.imul(U2, re) | 0, l3 = l3 + Math.imul(C3, ie) | 0, n32 = n32 + Math.imul(C3, ne) | 0, n32 = n32 + Math.imul(O4, ie) | 0, d2 = d2 + Math.imul(O4, ne) | 0, l3 = l3 + Math.imul(k32, fe) | 0, n32 = n32 + Math.imul(k32, ae) | 0, n32 = n32 + Math.imul(D3, fe) | 0, d2 = d2 + Math.imul(D3, ae) | 0, l3 = l3 + Math.imul(R4, oe) | 0, n32 = n32 + Math.imul(R4, se) | 0, n32 = n32 + Math.imul(I2, oe) | 0, d2 = d2 + Math.imul(I2, se) | 0, l3 = l3 + Math.imul(g2, he) | 0, n32 = n32 + Math.imul(g2, ue) | 0, n32 = n32 + Math.imul(_5, he) | 0, d2 = d2 + Math.imul(_5, ue) | 0;
        var Ke = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Ke >>> 26) | 0, Ke &= 67108863, l3 = Math.imul(j32, X4), n32 = Math.imul(j32, J), n32 = n32 + Math.imul(Z4, X4) | 0, d2 = Math.imul(Z4, J), l3 = l3 + Math.imul(W3, Q4) | 0, n32 = n32 + Math.imul(W3, ee) | 0, n32 = n32 + Math.imul(K2, Q4) | 0, d2 = d2 + Math.imul(K2, ee) | 0, l3 = l3 + Math.imul(z4, te) | 0, n32 = n32 + Math.imul(z4, re) | 0, n32 = n32 + Math.imul(H4, te) | 0, d2 = d2 + Math.imul(H4, re) | 0, l3 = l3 + Math.imul(F, ie) | 0, n32 = n32 + Math.imul(F, ne) | 0, n32 = n32 + Math.imul(U2, ie) | 0, d2 = d2 + Math.imul(U2, ne) | 0, l3 = l3 + Math.imul(C3, fe) | 0, n32 = n32 + Math.imul(C3, ae) | 0, n32 = n32 + Math.imul(O4, fe) | 0, d2 = d2 + Math.imul(O4, ae) | 0, l3 = l3 + Math.imul(k32, oe) | 0, n32 = n32 + Math.imul(k32, se) | 0, n32 = n32 + Math.imul(D3, oe) | 0, d2 = d2 + Math.imul(D3, se) | 0, l3 = l3 + Math.imul(R4, he) | 0, n32 = n32 + Math.imul(R4, ue) | 0, n32 = n32 + Math.imul(I2, he) | 0, d2 = d2 + Math.imul(I2, ue) | 0, l3 = l3 + Math.imul(g2, le) | 0, n32 = n32 + Math.imul(g2, de) | 0, n32 = n32 + Math.imul(_5, le) | 0, d2 = d2 + Math.imul(_5, de) | 0;
        var je = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (je >>> 26) | 0, je &= 67108863, l3 = Math.imul(V22, X4), n32 = Math.imul(V22, J), n32 = n32 + Math.imul($3, X4) | 0, d2 = Math.imul($3, J), l3 = l3 + Math.imul(j32, Q4) | 0, n32 = n32 + Math.imul(j32, ee) | 0, n32 = n32 + Math.imul(Z4, Q4) | 0, d2 = d2 + Math.imul(Z4, ee) | 0, l3 = l3 + Math.imul(W3, te) | 0, n32 = n32 + Math.imul(W3, re) | 0, n32 = n32 + Math.imul(K2, te) | 0, d2 = d2 + Math.imul(K2, re) | 0, l3 = l3 + Math.imul(z4, ie) | 0, n32 = n32 + Math.imul(z4, ne) | 0, n32 = n32 + Math.imul(H4, ie) | 0, d2 = d2 + Math.imul(H4, ne) | 0, l3 = l3 + Math.imul(F, fe) | 0, n32 = n32 + Math.imul(F, ae) | 0, n32 = n32 + Math.imul(U2, fe) | 0, d2 = d2 + Math.imul(U2, ae) | 0, l3 = l3 + Math.imul(C3, oe) | 0, n32 = n32 + Math.imul(C3, se) | 0, n32 = n32 + Math.imul(O4, oe) | 0, d2 = d2 + Math.imul(O4, se) | 0, l3 = l3 + Math.imul(k32, he) | 0, n32 = n32 + Math.imul(k32, ue) | 0, n32 = n32 + Math.imul(D3, he) | 0, d2 = d2 + Math.imul(D3, ue) | 0, l3 = l3 + Math.imul(R4, le) | 0, n32 = n32 + Math.imul(R4, de) | 0, n32 = n32 + Math.imul(I2, le) | 0, d2 = d2 + Math.imul(I2, de) | 0, l3 = l3 + Math.imul(g2, ce) | 0, n32 = n32 + Math.imul(g2, pe) | 0, n32 = n32 + Math.imul(_5, ce) | 0, d2 = d2 + Math.imul(_5, pe) | 0;
        var Ze = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Ze >>> 26) | 0, Ze &= 67108863, l3 = Math.imul(G5, X4), n32 = Math.imul(G5, J), n32 = n32 + Math.imul(Y2, X4) | 0, d2 = Math.imul(Y2, J), l3 = l3 + Math.imul(V22, Q4) | 0, n32 = n32 + Math.imul(V22, ee) | 0, n32 = n32 + Math.imul($3, Q4) | 0, d2 = d2 + Math.imul($3, ee) | 0, l3 = l3 + Math.imul(j32, te) | 0, n32 = n32 + Math.imul(j32, re) | 0, n32 = n32 + Math.imul(Z4, te) | 0, d2 = d2 + Math.imul(Z4, re) | 0, l3 = l3 + Math.imul(W3, ie) | 0, n32 = n32 + Math.imul(W3, ne) | 0, n32 = n32 + Math.imul(K2, ie) | 0, d2 = d2 + Math.imul(K2, ne) | 0, l3 = l3 + Math.imul(z4, fe) | 0, n32 = n32 + Math.imul(z4, ae) | 0, n32 = n32 + Math.imul(H4, fe) | 0, d2 = d2 + Math.imul(H4, ae) | 0, l3 = l3 + Math.imul(F, oe) | 0, n32 = n32 + Math.imul(F, se) | 0, n32 = n32 + Math.imul(U2, oe) | 0, d2 = d2 + Math.imul(U2, se) | 0, l3 = l3 + Math.imul(C3, he) | 0, n32 = n32 + Math.imul(C3, ue) | 0, n32 = n32 + Math.imul(O4, he) | 0, d2 = d2 + Math.imul(O4, ue) | 0, l3 = l3 + Math.imul(k32, le) | 0, n32 = n32 + Math.imul(k32, de) | 0, n32 = n32 + Math.imul(D3, le) | 0, d2 = d2 + Math.imul(D3, de) | 0, l3 = l3 + Math.imul(R4, ce) | 0, n32 = n32 + Math.imul(R4, pe) | 0, n32 = n32 + Math.imul(I2, ce) | 0, d2 = d2 + Math.imul(I2, pe) | 0, l3 = l3 + Math.imul(g2, ve) | 0, n32 = n32 + Math.imul(g2, be) | 0, n32 = n32 + Math.imul(_5, ve) | 0, d2 = d2 + Math.imul(_5, be) | 0;
        var Ve = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Ve >>> 26) | 0, Ve &= 67108863, l3 = Math.imul(G5, Q4), n32 = Math.imul(G5, ee), n32 = n32 + Math.imul(Y2, Q4) | 0, d2 = Math.imul(Y2, ee), l3 = l3 + Math.imul(V22, te) | 0, n32 = n32 + Math.imul(V22, re) | 0, n32 = n32 + Math.imul($3, te) | 0, d2 = d2 + Math.imul($3, re) | 0, l3 = l3 + Math.imul(j32, ie) | 0, n32 = n32 + Math.imul(j32, ne) | 0, n32 = n32 + Math.imul(Z4, ie) | 0, d2 = d2 + Math.imul(Z4, ne) | 0, l3 = l3 + Math.imul(W3, fe) | 0, n32 = n32 + Math.imul(W3, ae) | 0, n32 = n32 + Math.imul(K2, fe) | 0, d2 = d2 + Math.imul(K2, ae) | 0, l3 = l3 + Math.imul(z4, oe) | 0, n32 = n32 + Math.imul(z4, se) | 0, n32 = n32 + Math.imul(H4, oe) | 0, d2 = d2 + Math.imul(H4, se) | 0, l3 = l3 + Math.imul(F, he) | 0, n32 = n32 + Math.imul(F, ue) | 0, n32 = n32 + Math.imul(U2, he) | 0, d2 = d2 + Math.imul(U2, ue) | 0, l3 = l3 + Math.imul(C3, le) | 0, n32 = n32 + Math.imul(C3, de) | 0, n32 = n32 + Math.imul(O4, le) | 0, d2 = d2 + Math.imul(O4, de) | 0, l3 = l3 + Math.imul(k32, ce) | 0, n32 = n32 + Math.imul(k32, pe) | 0, n32 = n32 + Math.imul(D3, ce) | 0, d2 = d2 + Math.imul(D3, pe) | 0, l3 = l3 + Math.imul(R4, ve) | 0, n32 = n32 + Math.imul(R4, be) | 0, n32 = n32 + Math.imul(I2, ve) | 0, d2 = d2 + Math.imul(I2, be) | 0;
        var $e = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + ($e >>> 26) | 0, $e &= 67108863, l3 = Math.imul(G5, te), n32 = Math.imul(G5, re), n32 = n32 + Math.imul(Y2, te) | 0, d2 = Math.imul(Y2, re), l3 = l3 + Math.imul(V22, ie) | 0, n32 = n32 + Math.imul(V22, ne) | 0, n32 = n32 + Math.imul($3, ie) | 0, d2 = d2 + Math.imul($3, ne) | 0, l3 = l3 + Math.imul(j32, fe) | 0, n32 = n32 + Math.imul(j32, ae) | 0, n32 = n32 + Math.imul(Z4, fe) | 0, d2 = d2 + Math.imul(Z4, ae) | 0, l3 = l3 + Math.imul(W3, oe) | 0, n32 = n32 + Math.imul(W3, se) | 0, n32 = n32 + Math.imul(K2, oe) | 0, d2 = d2 + Math.imul(K2, se) | 0, l3 = l3 + Math.imul(z4, he) | 0, n32 = n32 + Math.imul(z4, ue) | 0, n32 = n32 + Math.imul(H4, he) | 0, d2 = d2 + Math.imul(H4, ue) | 0, l3 = l3 + Math.imul(F, le) | 0, n32 = n32 + Math.imul(F, de) | 0, n32 = n32 + Math.imul(U2, le) | 0, d2 = d2 + Math.imul(U2, de) | 0, l3 = l3 + Math.imul(C3, ce) | 0, n32 = n32 + Math.imul(C3, pe) | 0, n32 = n32 + Math.imul(O4, ce) | 0, d2 = d2 + Math.imul(O4, pe) | 0, l3 = l3 + Math.imul(k32, ve) | 0, n32 = n32 + Math.imul(k32, be) | 0, n32 = n32 + Math.imul(D3, ve) | 0, d2 = d2 + Math.imul(D3, be) | 0;
        var Ge = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Ge >>> 26) | 0, Ge &= 67108863, l3 = Math.imul(G5, ie), n32 = Math.imul(G5, ne), n32 = n32 + Math.imul(Y2, ie) | 0, d2 = Math.imul(Y2, ne), l3 = l3 + Math.imul(V22, fe) | 0, n32 = n32 + Math.imul(V22, ae) | 0, n32 = n32 + Math.imul($3, fe) | 0, d2 = d2 + Math.imul($3, ae) | 0, l3 = l3 + Math.imul(j32, oe) | 0, n32 = n32 + Math.imul(j32, se) | 0, n32 = n32 + Math.imul(Z4, oe) | 0, d2 = d2 + Math.imul(Z4, se) | 0, l3 = l3 + Math.imul(W3, he) | 0, n32 = n32 + Math.imul(W3, ue) | 0, n32 = n32 + Math.imul(K2, he) | 0, d2 = d2 + Math.imul(K2, ue) | 0, l3 = l3 + Math.imul(z4, le) | 0, n32 = n32 + Math.imul(z4, de) | 0, n32 = n32 + Math.imul(H4, le) | 0, d2 = d2 + Math.imul(H4, de) | 0, l3 = l3 + Math.imul(F, ce) | 0, n32 = n32 + Math.imul(F, pe) | 0, n32 = n32 + Math.imul(U2, ce) | 0, d2 = d2 + Math.imul(U2, pe) | 0, l3 = l3 + Math.imul(C3, ve) | 0, n32 = n32 + Math.imul(C3, be) | 0, n32 = n32 + Math.imul(O4, ve) | 0, d2 = d2 + Math.imul(O4, be) | 0;
        var Ye = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Ye >>> 26) | 0, Ye &= 67108863, l3 = Math.imul(G5, fe), n32 = Math.imul(G5, ae), n32 = n32 + Math.imul(Y2, fe) | 0, d2 = Math.imul(Y2, ae), l3 = l3 + Math.imul(V22, oe) | 0, n32 = n32 + Math.imul(V22, se) | 0, n32 = n32 + Math.imul($3, oe) | 0, d2 = d2 + Math.imul($3, se) | 0, l3 = l3 + Math.imul(j32, he) | 0, n32 = n32 + Math.imul(j32, ue) | 0, n32 = n32 + Math.imul(Z4, he) | 0, d2 = d2 + Math.imul(Z4, ue) | 0, l3 = l3 + Math.imul(W3, le) | 0, n32 = n32 + Math.imul(W3, de) | 0, n32 = n32 + Math.imul(K2, le) | 0, d2 = d2 + Math.imul(K2, de) | 0, l3 = l3 + Math.imul(z4, ce) | 0, n32 = n32 + Math.imul(z4, pe) | 0, n32 = n32 + Math.imul(H4, ce) | 0, d2 = d2 + Math.imul(H4, pe) | 0, l3 = l3 + Math.imul(F, ve) | 0, n32 = n32 + Math.imul(F, be) | 0, n32 = n32 + Math.imul(U2, ve) | 0, d2 = d2 + Math.imul(U2, be) | 0;
        var Xe = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Xe >>> 26) | 0, Xe &= 67108863, l3 = Math.imul(G5, oe), n32 = Math.imul(G5, se), n32 = n32 + Math.imul(Y2, oe) | 0, d2 = Math.imul(Y2, se), l3 = l3 + Math.imul(V22, he) | 0, n32 = n32 + Math.imul(V22, ue) | 0, n32 = n32 + Math.imul($3, he) | 0, d2 = d2 + Math.imul($3, ue) | 0, l3 = l3 + Math.imul(j32, le) | 0, n32 = n32 + Math.imul(j32, de) | 0, n32 = n32 + Math.imul(Z4, le) | 0, d2 = d2 + Math.imul(Z4, de) | 0, l3 = l3 + Math.imul(W3, ce) | 0, n32 = n32 + Math.imul(W3, pe) | 0, n32 = n32 + Math.imul(K2, ce) | 0, d2 = d2 + Math.imul(K2, pe) | 0, l3 = l3 + Math.imul(z4, ve) | 0, n32 = n32 + Math.imul(z4, be) | 0, n32 = n32 + Math.imul(H4, ve) | 0, d2 = d2 + Math.imul(H4, be) | 0;
        var Je = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Je >>> 26) | 0, Je &= 67108863, l3 = Math.imul(G5, he), n32 = Math.imul(G5, ue), n32 = n32 + Math.imul(Y2, he) | 0, d2 = Math.imul(Y2, ue), l3 = l3 + Math.imul(V22, le) | 0, n32 = n32 + Math.imul(V22, de) | 0, n32 = n32 + Math.imul($3, le) | 0, d2 = d2 + Math.imul($3, de) | 0, l3 = l3 + Math.imul(j32, ce) | 0, n32 = n32 + Math.imul(j32, pe) | 0, n32 = n32 + Math.imul(Z4, ce) | 0, d2 = d2 + Math.imul(Z4, pe) | 0, l3 = l3 + Math.imul(W3, ve) | 0, n32 = n32 + Math.imul(W3, be) | 0, n32 = n32 + Math.imul(K2, ve) | 0, d2 = d2 + Math.imul(K2, be) | 0;
        var Qe = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Qe >>> 26) | 0, Qe &= 67108863, l3 = Math.imul(G5, le), n32 = Math.imul(G5, de), n32 = n32 + Math.imul(Y2, le) | 0, d2 = Math.imul(Y2, de), l3 = l3 + Math.imul(V22, ce) | 0, n32 = n32 + Math.imul(V22, pe) | 0, n32 = n32 + Math.imul($3, ce) | 0, d2 = d2 + Math.imul($3, pe) | 0, l3 = l3 + Math.imul(j32, ve) | 0, n32 = n32 + Math.imul(j32, be) | 0, n32 = n32 + Math.imul(Z4, ve) | 0, d2 = d2 + Math.imul(Z4, be) | 0;
        var et = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (et >>> 26) | 0, et &= 67108863, l3 = Math.imul(G5, ce), n32 = Math.imul(G5, pe), n32 = n32 + Math.imul(Y2, ce) | 0, d2 = Math.imul(Y2, pe), l3 = l3 + Math.imul(V22, ve) | 0, n32 = n32 + Math.imul(V22, be) | 0, n32 = n32 + Math.imul($3, ve) | 0, d2 = d2 + Math.imul($3, be) | 0;
        var tt = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (tt >>> 26) | 0, tt &= 67108863, l3 = Math.imul(G5, ve), n32 = Math.imul(G5, be), n32 = n32 + Math.imul(Y2, ve) | 0, d2 = Math.imul(Y2, be);
        var rt = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        return b3 = (d2 + (n32 >>> 13) | 0) + (rt >>> 26) | 0, rt &= 67108863, c2[0] = ft, c2[1] = Be, c2[2] = qe, c2[3] = ze, c2[4] = He, c2[5] = We, c2[6] = Ke, c2[7] = je, c2[8] = Ze, c2[9] = Ve, c2[10] = $e, c2[11] = Ge, c2[12] = Ye, c2[13] = Xe, c2[14] = Je, c2[15] = Qe, c2[16] = et, c2[17] = tt, c2[18] = rt, b3 !== 0 && (c2[19] = b3, h3.length++), h3;
      };
      Math.imul || (L2 = q);
      function ge(v32, i, a2) {
        a2.negative = i.negative ^ v32.negative, a2.length = v32.length + i.length;
        for (var h3 = 0, s3 = 0, u4 = 0;u4 < a2.length - 1; u4++) {
          var c2 = s3;
          s3 = 0;
          for (var b3 = h3 & 67108863, l3 = Math.min(u4, i.length - 1), n32 = Math.max(0, u4 - v32.length + 1);n32 <= l3; n32++) {
            var d2 = u4 - n32, w3 = v32.words[d2] | 0, g2 = i.words[n32] | 0, _5 = w3 * g2, A6 = _5 & 67108863;
            c2 = c2 + (_5 / 67108864 | 0) | 0, A6 = A6 + b3 | 0, b3 = A6 & 67108863, c2 = c2 + (A6 >>> 26) | 0, s3 += c2 >>> 26, c2 &= 67108863;
          }
          a2.words[u4] = b3, h3 = c2, c2 = s3;
        }
        return h3 !== 0 ? a2.words[u4] = h3 : a2.length--, a2.strip();
      }
      function _e(v32, i, a2) {
        var h3 = new N4;
        return h3.mulp(v32, i, a2);
      }
      f2.prototype.mulTo = function(i, a2) {
        var h3, s3 = this.length + i.length;
        return this.length === 10 && i.length === 10 ? h3 = L2(this, i, a2) : s3 < 63 ? h3 = q(this, i, a2) : s3 < 1024 ? h3 = ge(this, i, a2) : h3 = _e(this, i, a2), h3;
      };
      function N4(v32, i) {
        this.x = v32, this.y = i;
      }
      N4.prototype.makeRBT = function(i) {
        for (var a2 = new Array(i), h3 = f2.prototype._countBits(i) - 1, s3 = 0;s3 < i; s3++)
          a2[s3] = this.revBin(s3, h3, i);
        return a2;
      }, N4.prototype.revBin = function(i, a2, h3) {
        if (i === 0 || i === h3 - 1)
          return i;
        for (var s3 = 0, u4 = 0;u4 < a2; u4++)
          s3 |= (i & 1) << a2 - u4 - 1, i >>= 1;
        return s3;
      }, N4.prototype.permute = function(i, a2, h3, s3, u4, c2) {
        for (var b3 = 0;b3 < c2; b3++)
          s3[b3] = a2[i[b3]], u4[b3] = h3[i[b3]];
      }, N4.prototype.transform = function(i, a2, h3, s3, u4, c2) {
        this.permute(c2, i, a2, h3, s3, u4);
        for (var b3 = 1;b3 < u4; b3 <<= 1)
          for (var l3 = b3 << 1, n32 = Math.cos(2 * Math.PI / l3), d2 = Math.sin(2 * Math.PI / l3), w3 = 0;w3 < u4; w3 += l3)
            for (var g2 = n32, _5 = d2, A6 = 0;A6 < b3; A6++) {
              var R4 = h3[w3 + A6], I2 = s3[w3 + A6], Me = h3[w3 + A6 + b3], k32 = s3[w3 + A6 + b3], D3 = g2 * Me - _5 * k32;
              k32 = g2 * k32 + _5 * Me, Me = D3, h3[w3 + A6] = R4 + Me, s3[w3 + A6] = I2 + k32, h3[w3 + A6 + b3] = R4 - Me, s3[w3 + A6 + b3] = I2 - k32, A6 !== l3 && (D3 = n32 * g2 - d2 * _5, _5 = n32 * _5 + d2 * g2, g2 = D3);
            }
      }, N4.prototype.guessLen13b = function(i, a2) {
        var h3 = Math.max(a2, i) | 1, s3 = h3 & 1, u4 = 0;
        for (h3 = h3 / 2 | 0;h3; h3 = h3 >>> 1)
          u4++;
        return 1 << u4 + 1 + s3;
      }, N4.prototype.conjugate = function(i, a2, h3) {
        if (!(h3 <= 1))
          for (var s3 = 0;s3 < h3 / 2; s3++) {
            var u4 = i[s3];
            i[s3] = i[h3 - s3 - 1], i[h3 - s3 - 1] = u4, u4 = a2[s3], a2[s3] = -a2[h3 - s3 - 1], a2[h3 - s3 - 1] = -u4;
          }
      }, N4.prototype.normalize13b = function(i, a2) {
        for (var h3 = 0, s3 = 0;s3 < a2 / 2; s3++) {
          var u4 = Math.round(i[2 * s3 + 1] / a2) * 8192 + Math.round(i[2 * s3] / a2) + h3;
          i[s3] = u4 & 67108863, u4 < 67108864 ? h3 = 0 : h3 = u4 / 67108864 | 0;
        }
        return i;
      }, N4.prototype.convert13b = function(i, a2, h3, s3) {
        for (var u4 = 0, c2 = 0;c2 < a2; c2++)
          u4 = u4 + (i[c2] | 0), h3[2 * c2] = u4 & 8191, u4 = u4 >>> 13, h3[2 * c2 + 1] = u4 & 8191, u4 = u4 >>> 13;
        for (c2 = 2 * a2;c2 < s3; ++c2)
          h3[c2] = 0;
        r2(u4 === 0), r2((u4 & -8192) === 0);
      }, N4.prototype.stub = function(i) {
        for (var a2 = new Array(i), h3 = 0;h3 < i; h3++)
          a2[h3] = 0;
        return a2;
      }, N4.prototype.mulp = function(i, a2, h3) {
        var s3 = 2 * this.guessLen13b(i.length, a2.length), u4 = this.makeRBT(s3), c2 = this.stub(s3), b3 = new Array(s3), l3 = new Array(s3), n32 = new Array(s3), d2 = new Array(s3), w3 = new Array(s3), g2 = new Array(s3), _5 = h3.words;
        _5.length = s3, this.convert13b(i.words, i.length, b3, s3), this.convert13b(a2.words, a2.length, d2, s3), this.transform(b3, c2, l3, n32, s3, u4), this.transform(d2, c2, w3, g2, s3, u4);
        for (var A6 = 0;A6 < s3; A6++) {
          var R4 = l3[A6] * w3[A6] - n32[A6] * g2[A6];
          n32[A6] = l3[A6] * g2[A6] + n32[A6] * w3[A6], l3[A6] = R4;
        }
        return this.conjugate(l3, n32, s3), this.transform(l3, n32, _5, c2, s3, u4), this.conjugate(_5, c2, s3), this.normalize13b(_5, s3), h3.negative = i.negative ^ a2.negative, h3.length = i.length + a2.length, h3.strip();
      }, f2.prototype.mul = function(i) {
        var a2 = new f2(null);
        return a2.words = new Array(this.length + i.length), this.mulTo(i, a2);
      }, f2.prototype.mulf = function(i) {
        var a2 = new f2(null);
        return a2.words = new Array(this.length + i.length), _e(this, i, a2);
      }, f2.prototype.imul = function(i) {
        return this.clone().mulTo(i, this);
      }, f2.prototype.imuln = function(i) {
        r2(typeof i == "number"), r2(i < 67108864);
        for (var a2 = 0, h3 = 0;h3 < this.length; h3++) {
          var s3 = (this.words[h3] | 0) * i, u4 = (s3 & 67108863) + (a2 & 67108863);
          a2 >>= 26, a2 += s3 / 67108864 | 0, a2 += u4 >>> 26, this.words[h3] = u4 & 67108863;
        }
        return a2 !== 0 && (this.words[h3] = a2, this.length++), this;
      }, f2.prototype.muln = function(i) {
        return this.clone().imuln(i);
      }, f2.prototype.sqr = function() {
        return this.mul(this);
      }, f2.prototype.isqr = function() {
        return this.imul(this.clone());
      }, f2.prototype.pow = function(i) {
        var a2 = B5(i);
        if (a2.length === 0)
          return new f2(1);
        for (var h3 = this, s3 = 0;s3 < a2.length && a2[s3] === 0; s3++, h3 = h3.sqr())
          ;
        if (++s3 < a2.length)
          for (var u4 = h3.sqr();s3 < a2.length; s3++, u4 = u4.sqr())
            a2[s3] !== 0 && (h3 = h3.mul(u4));
        return h3;
      }, f2.prototype.iushln = function(i) {
        r2(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26, s3 = 67108863 >>> 26 - a2 << 26 - a2, u4;
        if (a2 !== 0) {
          var c2 = 0;
          for (u4 = 0;u4 < this.length; u4++) {
            var b3 = this.words[u4] & s3, l3 = (this.words[u4] | 0) - b3 << a2;
            this.words[u4] = l3 | c2, c2 = b3 >>> 26 - a2;
          }
          c2 && (this.words[u4] = c2, this.length++);
        }
        if (h3 !== 0) {
          for (u4 = this.length - 1;u4 >= 0; u4--)
            this.words[u4 + h3] = this.words[u4];
          for (u4 = 0;u4 < h3; u4++)
            this.words[u4] = 0;
          this.length += h3;
        }
        return this.strip();
      }, f2.prototype.ishln = function(i) {
        return r2(this.negative === 0), this.iushln(i);
      }, f2.prototype.iushrn = function(i, a2, h3) {
        r2(typeof i == "number" && i >= 0);
        var s3;
        a2 ? s3 = (a2 - a2 % 26) / 26 : s3 = 0;
        var u4 = i % 26, c2 = Math.min((i - u4) / 26, this.length), b3 = 67108863 ^ 67108863 >>> u4 << u4, l3 = h3;
        if (s3 -= c2, s3 = Math.max(0, s3), l3) {
          for (var n32 = 0;n32 < c2; n32++)
            l3.words[n32] = this.words[n32];
          l3.length = c2;
        }
        if (c2 !== 0)
          if (this.length > c2)
            for (this.length -= c2, n32 = 0;n32 < this.length; n32++)
              this.words[n32] = this.words[n32 + c2];
          else
            this.words[0] = 0, this.length = 1;
        var d2 = 0;
        for (n32 = this.length - 1;n32 >= 0 && (d2 !== 0 || n32 >= s3); n32--) {
          var w3 = this.words[n32] | 0;
          this.words[n32] = d2 << 26 - u4 | w3 >>> u4, d2 = w3 & b3;
        }
        return l3 && d2 !== 0 && (l3.words[l3.length++] = d2), this.length === 0 && (this.words[0] = 0, this.length = 1), this.strip();
      }, f2.prototype.ishrn = function(i, a2, h3) {
        return r2(this.negative === 0), this.iushrn(i, a2, h3);
      }, f2.prototype.shln = function(i) {
        return this.clone().ishln(i);
      }, f2.prototype.ushln = function(i) {
        return this.clone().iushln(i);
      }, f2.prototype.shrn = function(i) {
        return this.clone().ishrn(i);
      }, f2.prototype.ushrn = function(i) {
        return this.clone().iushrn(i);
      }, f2.prototype.testn = function(i) {
        r2(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26, s3 = 1 << a2;
        if (this.length <= h3)
          return false;
        var u4 = this.words[h3];
        return !!(u4 & s3);
      }, f2.prototype.imaskn = function(i) {
        r2(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26;
        if (r2(this.negative === 0, "imaskn works only with positive numbers"), this.length <= h3)
          return this;
        if (a2 !== 0 && h3++, this.length = Math.min(h3, this.length), a2 !== 0) {
          var s3 = 67108863 ^ 67108863 >>> a2 << a2;
          this.words[this.length - 1] &= s3;
        }
        return this.strip();
      }, f2.prototype.maskn = function(i) {
        return this.clone().imaskn(i);
      }, f2.prototype.iaddn = function(i) {
        return r2(typeof i == "number"), r2(i < 67108864), i < 0 ? this.isubn(-i) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) < i ? (this.words[0] = i - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(i), this.negative = 1, this) : this._iaddn(i);
      }, f2.prototype._iaddn = function(i) {
        this.words[0] += i;
        for (var a2 = 0;a2 < this.length && this.words[a2] >= 67108864; a2++)
          this.words[a2] -= 67108864, a2 === this.length - 1 ? this.words[a2 + 1] = 1 : this.words[a2 + 1]++;
        return this.length = Math.max(this.length, a2 + 1), this;
      }, f2.prototype.isubn = function(i) {
        if (r2(typeof i == "number"), r2(i < 67108864), i < 0)
          return this.iaddn(-i);
        if (this.negative !== 0)
          return this.negative = 0, this.iaddn(i), this.negative = 1, this;
        if (this.words[0] -= i, this.length === 1 && this.words[0] < 0)
          this.words[0] = -this.words[0], this.negative = 1;
        else
          for (var a2 = 0;a2 < this.length && this.words[a2] < 0; a2++)
            this.words[a2] += 67108864, this.words[a2 + 1] -= 1;
        return this.strip();
      }, f2.prototype.addn = function(i) {
        return this.clone().iaddn(i);
      }, f2.prototype.subn = function(i) {
        return this.clone().isubn(i);
      }, f2.prototype.iabs = function() {
        return this.negative = 0, this;
      }, f2.prototype.abs = function() {
        return this.clone().iabs();
      }, f2.prototype._ishlnsubmul = function(i, a2, h3) {
        var s3 = i.length + h3, u4;
        this._expand(s3);
        var c2, b3 = 0;
        for (u4 = 0;u4 < i.length; u4++) {
          c2 = (this.words[u4 + h3] | 0) + b3;
          var l3 = (i.words[u4] | 0) * a2;
          c2 -= l3 & 67108863, b3 = (c2 >> 26) - (l3 / 67108864 | 0), this.words[u4 + h3] = c2 & 67108863;
        }
        for (;u4 < this.length - h3; u4++)
          c2 = (this.words[u4 + h3] | 0) + b3, b3 = c2 >> 26, this.words[u4 + h3] = c2 & 67108863;
        if (b3 === 0)
          return this.strip();
        for (r2(b3 === -1), b3 = 0, u4 = 0;u4 < this.length; u4++)
          c2 = -(this.words[u4] | 0) + b3, b3 = c2 >> 26, this.words[u4] = c2 & 67108863;
        return this.negative = 1, this.strip();
      }, f2.prototype._wordDiv = function(i, a2) {
        var h3 = this.length - i.length, s3 = this.clone(), u4 = i, c2 = u4.words[u4.length - 1] | 0, b3 = this._countBits(c2);
        h3 = 26 - b3, h3 !== 0 && (u4 = u4.ushln(h3), s3.iushln(h3), c2 = u4.words[u4.length - 1] | 0);
        var l3 = s3.length - u4.length, n32;
        if (a2 !== "mod") {
          n32 = new f2(null), n32.length = l3 + 1, n32.words = new Array(n32.length);
          for (var d2 = 0;d2 < n32.length; d2++)
            n32.words[d2] = 0;
        }
        var w3 = s3.clone()._ishlnsubmul(u4, 1, l3);
        w3.negative === 0 && (s3 = w3, n32 && (n32.words[l3] = 1));
        for (var g2 = l3 - 1;g2 >= 0; g2--) {
          var _5 = (s3.words[u4.length + g2] | 0) * 67108864 + (s3.words[u4.length + g2 - 1] | 0);
          for (_5 = Math.min(_5 / c2 | 0, 67108863), s3._ishlnsubmul(u4, _5, g2);s3.negative !== 0; )
            _5--, s3.negative = 0, s3._ishlnsubmul(u4, 1, g2), s3.isZero() || (s3.negative ^= 1);
          n32 && (n32.words[g2] = _5);
        }
        return n32 && n32.strip(), s3.strip(), a2 !== "div" && h3 !== 0 && s3.iushrn(h3), { div: n32 || null, mod: s3 };
      }, f2.prototype.divmod = function(i, a2, h3) {
        if (r2(!i.isZero()), this.isZero())
          return { div: new f2(0), mod: new f2(0) };
        var s3, u4, c2;
        return this.negative !== 0 && i.negative === 0 ? (c2 = this.neg().divmod(i, a2), a2 !== "mod" && (s3 = c2.div.neg()), a2 !== "div" && (u4 = c2.mod.neg(), h3 && u4.negative !== 0 && u4.iadd(i)), { div: s3, mod: u4 }) : this.negative === 0 && i.negative !== 0 ? (c2 = this.divmod(i.neg(), a2), a2 !== "mod" && (s3 = c2.div.neg()), { div: s3, mod: c2.mod }) : (this.negative & i.negative) !== 0 ? (c2 = this.neg().divmod(i.neg(), a2), a2 !== "div" && (u4 = c2.mod.neg(), h3 && u4.negative !== 0 && u4.isub(i)), { div: c2.div, mod: u4 }) : i.length > this.length || this.cmp(i) < 0 ? { div: new f2(0), mod: this } : i.length === 1 ? a2 === "div" ? { div: this.divn(i.words[0]), mod: null } : a2 === "mod" ? { div: null, mod: new f2(this.modn(i.words[0])) } : { div: this.divn(i.words[0]), mod: new f2(this.modn(i.words[0])) } : this._wordDiv(i, a2);
      }, f2.prototype.div = function(i) {
        return this.divmod(i, "div", false).div;
      }, f2.prototype.mod = function(i) {
        return this.divmod(i, "mod", false).mod;
      }, f2.prototype.umod = function(i) {
        return this.divmod(i, "mod", true).mod;
      }, f2.prototype.divRound = function(i) {
        var a2 = this.divmod(i);
        if (a2.mod.isZero())
          return a2.div;
        var h3 = a2.div.negative !== 0 ? a2.mod.isub(i) : a2.mod, s3 = i.ushrn(1), u4 = i.andln(1), c2 = h3.cmp(s3);
        return c2 < 0 || u4 === 1 && c2 === 0 ? a2.div : a2.div.negative !== 0 ? a2.div.isubn(1) : a2.div.iaddn(1);
      }, f2.prototype.modn = function(i) {
        r2(i <= 67108863);
        for (var a2 = (1 << 26) % i, h3 = 0, s3 = this.length - 1;s3 >= 0; s3--)
          h3 = (a2 * h3 + (this.words[s3] | 0)) % i;
        return h3;
      }, f2.prototype.idivn = function(i) {
        r2(i <= 67108863);
        for (var a2 = 0, h3 = this.length - 1;h3 >= 0; h3--) {
          var s3 = (this.words[h3] | 0) + a2 * 67108864;
          this.words[h3] = s3 / i | 0, a2 = s3 % i;
        }
        return this.strip();
      }, f2.prototype.divn = function(i) {
        return this.clone().idivn(i);
      }, f2.prototype.egcd = function(i) {
        r2(i.negative === 0), r2(!i.isZero());
        var a2 = this, h3 = i.clone();
        a2.negative !== 0 ? a2 = a2.umod(i) : a2 = a2.clone();
        for (var s3 = new f2(1), u4 = new f2(0), c2 = new f2(0), b3 = new f2(1), l3 = 0;a2.isEven() && h3.isEven(); )
          a2.iushrn(1), h3.iushrn(1), ++l3;
        for (var n32 = h3.clone(), d2 = a2.clone();!a2.isZero(); ) {
          for (var w3 = 0, g2 = 1;(a2.words[0] & g2) === 0 && w3 < 26; ++w3, g2 <<= 1)
            ;
          if (w3 > 0)
            for (a2.iushrn(w3);w3-- > 0; )
              (s3.isOdd() || u4.isOdd()) && (s3.iadd(n32), u4.isub(d2)), s3.iushrn(1), u4.iushrn(1);
          for (var _5 = 0, A6 = 1;(h3.words[0] & A6) === 0 && _5 < 26; ++_5, A6 <<= 1)
            ;
          if (_5 > 0)
            for (h3.iushrn(_5);_5-- > 0; )
              (c2.isOdd() || b3.isOdd()) && (c2.iadd(n32), b3.isub(d2)), c2.iushrn(1), b3.iushrn(1);
          a2.cmp(h3) >= 0 ? (a2.isub(h3), s3.isub(c2), u4.isub(b3)) : (h3.isub(a2), c2.isub(s3), b3.isub(u4));
        }
        return { a: c2, b: b3, gcd: h3.iushln(l3) };
      }, f2.prototype._invmp = function(i) {
        r2(i.negative === 0), r2(!i.isZero());
        var a2 = this, h3 = i.clone();
        a2.negative !== 0 ? a2 = a2.umod(i) : a2 = a2.clone();
        for (var s3 = new f2(1), u4 = new f2(0), c2 = h3.clone();a2.cmpn(1) > 0 && h3.cmpn(1) > 0; ) {
          for (var b3 = 0, l3 = 1;(a2.words[0] & l3) === 0 && b3 < 26; ++b3, l3 <<= 1)
            ;
          if (b3 > 0)
            for (a2.iushrn(b3);b3-- > 0; )
              s3.isOdd() && s3.iadd(c2), s3.iushrn(1);
          for (var n32 = 0, d2 = 1;(h3.words[0] & d2) === 0 && n32 < 26; ++n32, d2 <<= 1)
            ;
          if (n32 > 0)
            for (h3.iushrn(n32);n32-- > 0; )
              u4.isOdd() && u4.iadd(c2), u4.iushrn(1);
          a2.cmp(h3) >= 0 ? (a2.isub(h3), s3.isub(u4)) : (h3.isub(a2), u4.isub(s3));
        }
        var w3;
        return a2.cmpn(1) === 0 ? w3 = s3 : w3 = u4, w3.cmpn(0) < 0 && w3.iadd(i), w3;
      }, f2.prototype.gcd = function(i) {
        if (this.isZero())
          return i.abs();
        if (i.isZero())
          return this.abs();
        var a2 = this.clone(), h3 = i.clone();
        a2.negative = 0, h3.negative = 0;
        for (var s3 = 0;a2.isEven() && h3.isEven(); s3++)
          a2.iushrn(1), h3.iushrn(1);
        do {
          for (;a2.isEven(); )
            a2.iushrn(1);
          for (;h3.isEven(); )
            h3.iushrn(1);
          var u4 = a2.cmp(h3);
          if (u4 < 0) {
            var c2 = a2;
            a2 = h3, h3 = c2;
          } else if (u4 === 0 || h3.cmpn(1) === 0)
            break;
          a2.isub(h3);
        } while (true);
        return h3.iushln(s3);
      }, f2.prototype.invm = function(i) {
        return this.egcd(i).a.umod(i);
      }, f2.prototype.isEven = function() {
        return (this.words[0] & 1) === 0;
      }, f2.prototype.isOdd = function() {
        return (this.words[0] & 1) === 1;
      }, f2.prototype.andln = function(i) {
        return this.words[0] & i;
      }, f2.prototype.bincn = function(i) {
        r2(typeof i == "number");
        var a2 = i % 26, h3 = (i - a2) / 26, s3 = 1 << a2;
        if (this.length <= h3)
          return this._expand(h3 + 1), this.words[h3] |= s3, this;
        for (var u4 = s3, c2 = h3;u4 !== 0 && c2 < this.length; c2++) {
          var b3 = this.words[c2] | 0;
          b3 += u4, u4 = b3 >>> 26, b3 &= 67108863, this.words[c2] = b3;
        }
        return u4 !== 0 && (this.words[c2] = u4, this.length++), this;
      }, f2.prototype.isZero = function() {
        return this.length === 1 && this.words[0] === 0;
      }, f2.prototype.cmpn = function(i) {
        var a2 = i < 0;
        if (this.negative !== 0 && !a2)
          return -1;
        if (this.negative === 0 && a2)
          return 1;
        this.strip();
        var h3;
        if (this.length > 1)
          h3 = 1;
        else {
          a2 && (i = -i), r2(i <= 67108863, "Number is too big");
          var s3 = this.words[0] | 0;
          h3 = s3 === i ? 0 : s3 < i ? -1 : 1;
        }
        return this.negative !== 0 ? -h3 | 0 : h3;
      }, f2.prototype.cmp = function(i) {
        if (this.negative !== 0 && i.negative === 0)
          return -1;
        if (this.negative === 0 && i.negative !== 0)
          return 1;
        var a2 = this.ucmp(i);
        return this.negative !== 0 ? -a2 | 0 : a2;
      }, f2.prototype.ucmp = function(i) {
        if (this.length > i.length)
          return 1;
        if (this.length < i.length)
          return -1;
        for (var a2 = 0, h3 = this.length - 1;h3 >= 0; h3--) {
          var s3 = this.words[h3] | 0, u4 = i.words[h3] | 0;
          if (s3 !== u4) {
            s3 < u4 ? a2 = -1 : s3 > u4 && (a2 = 1);
            break;
          }
        }
        return a2;
      }, f2.prototype.gtn = function(i) {
        return this.cmpn(i) === 1;
      }, f2.prototype.gt = function(i) {
        return this.cmp(i) === 1;
      }, f2.prototype.gten = function(i) {
        return this.cmpn(i) >= 0;
      }, f2.prototype.gte = function(i) {
        return this.cmp(i) >= 0;
      }, f2.prototype.ltn = function(i) {
        return this.cmpn(i) === -1;
      }, f2.prototype.lt = function(i) {
        return this.cmp(i) === -1;
      }, f2.prototype.lten = function(i) {
        return this.cmpn(i) <= 0;
      }, f2.prototype.lte = function(i) {
        return this.cmp(i) <= 0;
      }, f2.prototype.eqn = function(i) {
        return this.cmpn(i) === 0;
      }, f2.prototype.eq = function(i) {
        return this.cmp(i) === 0;
      }, f2.red = function(i) {
        return new P(i);
      }, f2.prototype.toRed = function(i) {
        return r2(!this.red, "Already a number in reduction context"), r2(this.negative === 0, "red works only with positives"), i.convertTo(this)._forceRed(i);
      }, f2.prototype.fromRed = function() {
        return r2(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
      }, f2.prototype._forceRed = function(i) {
        return this.red = i, this;
      }, f2.prototype.forceRed = function(i) {
        return r2(!this.red, "Already a number in reduction context"), this._forceRed(i);
      }, f2.prototype.redAdd = function(i) {
        return r2(this.red, "redAdd works only with red numbers"), this.red.add(this, i);
      }, f2.prototype.redIAdd = function(i) {
        return r2(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, i);
      }, f2.prototype.redSub = function(i) {
        return r2(this.red, "redSub works only with red numbers"), this.red.sub(this, i);
      }, f2.prototype.redISub = function(i) {
        return r2(this.red, "redISub works only with red numbers"), this.red.isub(this, i);
      }, f2.prototype.redShl = function(i) {
        return r2(this.red, "redShl works only with red numbers"), this.red.shl(this, i);
      }, f2.prototype.redMul = function(i) {
        return r2(this.red, "redMul works only with red numbers"), this.red._verify2(this, i), this.red.mul(this, i);
      }, f2.prototype.redIMul = function(i) {
        return r2(this.red, "redMul works only with red numbers"), this.red._verify2(this, i), this.red.imul(this, i);
      }, f2.prototype.redSqr = function() {
        return r2(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
      }, f2.prototype.redISqr = function() {
        return r2(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
      }, f2.prototype.redSqrt = function() {
        return r2(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
      }, f2.prototype.redInvm = function() {
        return r2(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
      }, f2.prototype.redNeg = function() {
        return r2(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
      }, f2.prototype.redPow = function(i) {
        return r2(this.red && !i.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, i);
      };
      var we = { k256: null, p224: null, p192: null, p25519: null };
      function ye(v32, i) {
        this.name = v32, this.p = new f2(i, 16), this.n = this.p.bitLength(), this.k = new f2(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
      }
      ye.prototype._tmp = function() {
        var i = new f2(null);
        return i.words = new Array(Math.ceil(this.n / 13)), i;
      }, ye.prototype.ireduce = function(i) {
        var a2 = i, h3;
        do
          this.split(a2, this.tmp), a2 = this.imulK(a2), a2 = a2.iadd(this.tmp), h3 = a2.bitLength();
        while (h3 > this.n);
        var s3 = h3 < this.n ? -1 : a2.ucmp(this.p);
        return s3 === 0 ? (a2.words[0] = 0, a2.length = 1) : s3 > 0 ? a2.isub(this.p) : a2.strip !== undefined ? a2.strip() : a2._strip(), a2;
      }, ye.prototype.split = function(i, a2) {
        i.iushrn(this.n, 0, a2);
      }, ye.prototype.imulK = function(i) {
        return i.imul(this.k);
      };
      function xe() {
        ye.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      o2(xe, ye), xe.prototype.split = function(i, a2) {
        for (var h3 = 4194303, s3 = Math.min(i.length, 9), u4 = 0;u4 < s3; u4++)
          a2.words[u4] = i.words[u4];
        if (a2.length = s3, i.length <= 9) {
          i.words[0] = 0, i.length = 1;
          return;
        }
        var c2 = i.words[9];
        for (a2.words[a2.length++] = c2 & h3, u4 = 10;u4 < i.length; u4++) {
          var b3 = i.words[u4] | 0;
          i.words[u4 - 10] = (b3 & h3) << 4 | c2 >>> 22, c2 = b3;
        }
        c2 >>>= 22, i.words[u4 - 10] = c2, c2 === 0 && i.length > 10 ? i.length -= 10 : i.length -= 9;
      }, xe.prototype.imulK = function(i) {
        i.words[i.length] = 0, i.words[i.length + 1] = 0, i.length += 2;
        for (var a2 = 0, h3 = 0;h3 < i.length; h3++) {
          var s3 = i.words[h3] | 0;
          a2 += s3 * 977, i.words[h3] = a2 & 67108863, a2 = s3 * 64 + (a2 / 67108864 | 0);
        }
        return i.words[i.length - 1] === 0 && (i.length--, i.words[i.length - 1] === 0 && i.length--), i;
      };
      function Re() {
        ye.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      o2(Re, ye);
      function Ee() {
        ye.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      o2(Ee, ye);
      function Ae() {
        ye.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      o2(Ae, ye), Ae.prototype.imulK = function(i) {
        for (var a2 = 0, h3 = 0;h3 < i.length; h3++) {
          var s3 = (i.words[h3] | 0) * 19 + a2, u4 = s3 & 67108863;
          s3 >>>= 26, i.words[h3] = u4, a2 = s3;
        }
        return a2 !== 0 && (i.words[i.length++] = a2), i;
      }, f2._prime = function(i) {
        if (we[i])
          return we[i];
        var a2;
        if (i === "k256")
          a2 = new xe;
        else if (i === "p224")
          a2 = new Re;
        else if (i === "p192")
          a2 = new Ee;
        else if (i === "p25519")
          a2 = new Ae;
        else
          throw new Error("Unknown prime " + i);
        return we[i] = a2, a2;
      };
      function P(v32) {
        if (typeof v32 == "string") {
          var i = f2._prime(v32);
          this.m = i.p, this.prime = i;
        } else
          r2(v32.gtn(1), "modulus must be greater than 1"), this.m = v32, this.prime = null;
      }
      P.prototype._verify1 = function(i) {
        r2(i.negative === 0, "red works only with positives"), r2(i.red, "red works only with red numbers");
      }, P.prototype._verify2 = function(i, a2) {
        r2((i.negative | a2.negative) === 0, "red works only with positives"), r2(i.red && i.red === a2.red, "red works only with red numbers");
      }, P.prototype.imod = function(i) {
        return this.prime ? this.prime.ireduce(i)._forceRed(this) : i.umod(this.m)._forceRed(this);
      }, P.prototype.neg = function(i) {
        return i.isZero() ? i.clone() : this.m.sub(i)._forceRed(this);
      }, P.prototype.add = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.add(a2);
        return h3.cmp(this.m) >= 0 && h3.isub(this.m), h3._forceRed(this);
      }, P.prototype.iadd = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.iadd(a2);
        return h3.cmp(this.m) >= 0 && h3.isub(this.m), h3;
      }, P.prototype.sub = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.sub(a2);
        return h3.cmpn(0) < 0 && h3.iadd(this.m), h3._forceRed(this);
      }, P.prototype.isub = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.isub(a2);
        return h3.cmpn(0) < 0 && h3.iadd(this.m), h3;
      }, P.prototype.shl = function(i, a2) {
        return this._verify1(i), this.imod(i.ushln(a2));
      }, P.prototype.imul = function(i, a2) {
        return this._verify2(i, a2), this.imod(i.imul(a2));
      }, P.prototype.mul = function(i, a2) {
        return this._verify2(i, a2), this.imod(i.mul(a2));
      }, P.prototype.isqr = function(i) {
        return this.imul(i, i.clone());
      }, P.prototype.sqr = function(i) {
        return this.mul(i, i);
      }, P.prototype.sqrt = function(i) {
        if (i.isZero())
          return i.clone();
        var a2 = this.m.andln(3);
        if (r2(a2 % 2 === 1), a2 === 3) {
          var h3 = this.m.add(new f2(1)).iushrn(2);
          return this.pow(i, h3);
        }
        for (var s3 = this.m.subn(1), u4 = 0;!s3.isZero() && s3.andln(1) === 0; )
          u4++, s3.iushrn(1);
        r2(!s3.isZero());
        var c2 = new f2(1).toRed(this), b3 = c2.redNeg(), l3 = this.m.subn(1).iushrn(1), n32 = this.m.bitLength();
        for (n32 = new f2(2 * n32 * n32).toRed(this);this.pow(n32, l3).cmp(b3) !== 0; )
          n32.redIAdd(b3);
        for (var d2 = this.pow(n32, s3), w3 = this.pow(i, s3.addn(1).iushrn(1)), g2 = this.pow(i, s3), _5 = u4;g2.cmp(c2) !== 0; ) {
          for (var A6 = g2, R4 = 0;A6.cmp(c2) !== 0; R4++)
            A6 = A6.redSqr();
          r2(R4 < _5);
          var I2 = this.pow(d2, new f2(1).iushln(_5 - R4 - 1));
          w3 = w3.redMul(I2), d2 = I2.redSqr(), g2 = g2.redMul(d2), _5 = R4;
        }
        return w3;
      }, P.prototype.invm = function(i) {
        var a2 = i._invmp(this.m);
        return a2.negative !== 0 ? (a2.negative = 0, this.imod(a2).redNeg()) : this.imod(a2);
      }, P.prototype.pow = function(i, a2) {
        if (a2.isZero())
          return new f2(1).toRed(this);
        if (a2.cmpn(1) === 0)
          return i.clone();
        var h3 = 4, s3 = new Array(1 << h3);
        s3[0] = new f2(1).toRed(this), s3[1] = i;
        for (var u4 = 2;u4 < s3.length; u4++)
          s3[u4] = this.mul(s3[u4 - 1], i);
        var c2 = s3[0], b3 = 0, l3 = 0, n32 = a2.bitLength() % 26;
        for (n32 === 0 && (n32 = 26), u4 = a2.length - 1;u4 >= 0; u4--) {
          for (var d2 = a2.words[u4], w3 = n32 - 1;w3 >= 0; w3--) {
            var g2 = d2 >> w3 & 1;
            if (c2 !== s3[0] && (c2 = this.sqr(c2)), g2 === 0 && b3 === 0) {
              l3 = 0;
              continue;
            }
            b3 <<= 1, b3 |= g2, l3++, !(l3 !== h3 && (u4 !== 0 || w3 !== 0)) && (c2 = this.mul(c2, s3[b3]), l3 = 0, b3 = 0);
          }
          n32 = 26;
        }
        return c2;
      }, P.prototype.convertTo = function(i) {
        var a2 = i.umod(this.m);
        return a2 === i ? a2.clone() : a2;
      }, P.prototype.convertFrom = function(i) {
        var a2 = i.clone();
        return a2.red = null, a2;
      }, f2.mont = function(i) {
        return new Se(i);
      };
      function Se(v32) {
        P.call(this, v32), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new f2(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
      }
      o2(Se, P), Se.prototype.convertTo = function(i) {
        return this.imod(i.ushln(this.shift));
      }, Se.prototype.convertFrom = function(i) {
        var a2 = this.imod(i.mul(this.rinv));
        return a2.red = null, a2;
      }, Se.prototype.imul = function(i, a2) {
        if (i.isZero() || a2.isZero())
          return i.words[0] = 0, i.length = 1, i;
        var h3 = i.imul(a2), s3 = h3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u4 = h3.isub(s3).iushrn(this.shift), c2 = u4;
        return u4.cmp(this.m) >= 0 ? c2 = u4.isub(this.m) : u4.cmpn(0) < 0 && (c2 = u4.iadd(this.m)), c2._forceRed(this);
      }, Se.prototype.mul = function(i, a2) {
        if (i.isZero() || a2.isZero())
          return new f2(0)._forceRed(this);
        var h3 = i.mul(a2), s3 = h3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u4 = h3.isub(s3).iushrn(this.shift), c2 = u4;
        return u4.cmp(this.m) >= 0 ? c2 = u4.isub(this.m) : u4.cmpn(0) < 0 && (c2 = u4.iadd(this.m)), c2._forceRed(this);
      }, Se.prototype.invm = function(i) {
        var a2 = this.imod(i._invmp(this.m).mul(this.r2));
        return a2._forceRed(this);
      };
    })(typeof Ll > "u" || Ll, h22);
  });
  Nl = T2((d2) => {
    var js = d2;
    function uA(t3, e2) {
      if (Array.isArray(t3))
        return t3.slice();
      if (!t3)
        return [];
      var r2 = [];
      if (typeof t3 != "string") {
        for (var o2 = 0;o2 < t3.length; o2++)
          r2[o2] = t3[o2] | 0;
        return r2;
      }
      if (e2 === "hex") {
        t3 = t3.replace(/[^a-z0-9]+/ig, ""), t3.length % 2 !== 0 && (t3 = "0" + t3);
        for (var o2 = 0;o2 < t3.length; o2 += 2)
          r2.push(parseInt(t3[o2] + t3[o2 + 1], 16));
      } else
        for (var o2 = 0;o2 < t3.length; o2++) {
          var f2 = t3.charCodeAt(o2), p2 = f2 >> 8, m32 = f2 & 255;
          p2 ? r2.push(p2, m32) : r2.push(m32);
        }
      return r2;
    }
    js.toArray = uA;
    function u22(t3) {
      return t3.length === 1 ? "0" + t3 : t3;
    }
    js.zero2 = u22;
    function l22(t3) {
      for (var e2 = "", r2 = 0;r2 < t3.length; r2++)
        e2 += u22(t3[r2].toString(16));
      return e2;
    }
    js.toHex = l22;
    js.encode = function(e2, r2) {
      return r2 === "hex" ? l22(e2) : e2;
    };
  });
  or = T2((c2) => {
    var Pr = c2, lA = ri(), dA = ar(), Zs = Nl();
    Pr.assert = dA;
    Pr.toArray = Zs.toArray;
    Pr.zero2 = Zs.zero2;
    Pr.toHex = Zs.toHex;
    Pr.encode = Zs.encode;
    function cA(t3, e2, r2) {
      var o2 = new Array(Math.max(t3.bitLength(), r2) + 1);
      o2.fill(0);
      for (var f2 = 1 << e2 + 1, p2 = t3.clone(), m32 = 0;m32 < o2.length; m32++) {
        var y22, M3 = p2.andln(f2 - 1);
        p2.isOdd() ? (M3 > (f2 >> 1) - 1 ? y22 = (f2 >> 1) - M3 : y22 = M3, p2.isubn(y22)) : y22 = 0, o2[m32] = y22, p2.iushrn(1);
      }
      return o2;
    }
    Pr.getNAF = cA;
    function pA(t3, e2) {
      var r2 = [[], []];
      t3 = t3.clone(), e2 = e2.clone();
      for (var o2 = 0, f2 = 0, p2;t3.cmpn(-o2) > 0 || e2.cmpn(-f2) > 0; ) {
        var m32 = t3.andln(3) + o2 & 3, y22 = e2.andln(3) + f2 & 3;
        m32 === 3 && (m32 = -1), y22 === 3 && (y22 = -1);
        var M3;
        (m32 & 1) === 0 ? M3 = 0 : (p2 = t3.andln(7) + o2 & 7, (p2 === 3 || p2 === 5) && y22 === 2 ? M3 = -m32 : M3 = m32), r2[0].push(M3);
        var x5;
        (y22 & 1) === 0 ? x5 = 0 : (p2 = e2.andln(7) + f2 & 7, (p2 === 3 || p2 === 5) && m32 === 2 ? x5 = -y22 : x5 = y22), r2[1].push(x5), 2 * o2 === M3 + 1 && (o2 = 1 - o2), 2 * f2 === x5 + 1 && (f2 = 1 - f2), t3.iushrn(1), e2.iushrn(1);
      }
      return r2;
    }
    Pr.getJSF = pA;
    function vA(t3, e2, r2) {
      var o2 = "_" + e2;
      t3.prototype[e2] = function() {
        return this[o2] !== undefined ? this[o2] : this[o2] = r2.call(this);
      };
    }
    Pr.cachedProperty = vA;
    function bA(t3) {
      return typeof t3 == "string" ? Pr.toArray(t3, "hex") : t3;
    }
    Pr.parseBytes = bA;
    function mA(t3) {
      return new lA(t3, "hex", "le");
    }
    Pr.intFromLE = mA;
  });
  Oa = T2((xk, p2) => {
    var Cn = ri(), Ca = or(), Vs = Ca.getNAF, gA = Ca.getJSF, $s = Ca.assert;
    function Xi(t3, e2) {
      this.type = t3, this.p = new Cn(e2.p, 16), this.red = e2.prime ? Cn.red(e2.prime) : Cn.mont(this.p), this.zero = new Cn(0).toRed(this.red), this.one = new Cn(1).toRed(this.red), this.two = new Cn(2).toRed(this.red), this.n = e2.n && new Cn(e2.n, 16), this.g = e2.g && this.pointFromJSON(e2.g, e2.gRed), this._wnafT1 = new Array(4), this._wnafT2 = new Array(4), this._wnafT3 = new Array(4), this._wnafT4 = new Array(4), this._bitLength = this.n ? this.n.bitLength() : 0;
      var r2 = this.n && this.p.div(this.n);
      !r2 || r2.cmpn(100) > 0 ? this.redN = null : (this._maxwellTrick = true, this.redN = this.n.toRed(this.red));
    }
    p2.exports = Xi;
    Xi.prototype.point = function() {
      throw new Error("Not implemented");
    };
    Xi.prototype.validate = function() {
      throw new Error("Not implemented");
    };
    Xi.prototype._fixedNafMul = function(e2, r2) {
      $s(e2.precomputed);
      var o2 = e2._getDoubles(), f2 = Vs(r2, 1, this._bitLength), p32 = (1 << o2.step + 1) - (o2.step % 2 === 0 ? 2 : 1);
      p32 /= 3;
      var m32 = [], y22, M3;
      for (y22 = 0;y22 < f2.length; y22 += o2.step) {
        M3 = 0;
        for (var x5 = y22 + o2.step - 1;x5 >= y22; x5--)
          M3 = (M3 << 1) + f2[x5];
        m32.push(M3);
      }
      for (var S2 = this.jpoint(null, null, null), E4 = this.jpoint(null, null, null), B5 = p32;B5 > 0; B5--) {
        for (y22 = 0;y22 < m32.length; y22++)
          M3 = m32[y22], M3 === B5 ? E4 = E4.mixedAdd(o2.points[y22]) : M3 === -B5 && (E4 = E4.mixedAdd(o2.points[y22].neg()));
        S2 = S2.add(E4);
      }
      return S2.toP();
    };
    Xi.prototype._wnafMul = function(e2, r2) {
      var o2 = 4, f2 = e2._getNAFPoints(o2);
      o2 = f2.wnd;
      for (var p32 = f2.points, m32 = Vs(r2, o2, this._bitLength), y22 = this.jpoint(null, null, null), M3 = m32.length - 1;M3 >= 0; M3--) {
        for (var x5 = 0;M3 >= 0 && m32[M3] === 0; M3--)
          x5++;
        if (M3 >= 0 && x5++, y22 = y22.dblp(x5), M3 < 0)
          break;
        var S2 = m32[M3];
        $s(S2 !== 0), e2.type === "affine" ? S2 > 0 ? y22 = y22.mixedAdd(p32[S2 - 1 >> 1]) : y22 = y22.mixedAdd(p32[-S2 - 1 >> 1].neg()) : S2 > 0 ? y22 = y22.add(p32[S2 - 1 >> 1]) : y22 = y22.add(p32[-S2 - 1 >> 1].neg());
      }
      return e2.type === "affine" ? y22.toP() : y22;
    };
    Xi.prototype._wnafMulAdd = function(e2, r2, o2, f2, p32) {
      var m32 = this._wnafT1, y22 = this._wnafT2, M3 = this._wnafT3, x5 = 0, S2, E4, B5;
      for (S2 = 0;S2 < f2; S2++) {
        B5 = r2[S2];
        var q = B5._getNAFPoints(e2);
        m32[S2] = q.wnd, y22[S2] = q.points;
      }
      for (S2 = f2 - 1;S2 >= 1; S2 -= 2) {
        var L2 = S2 - 1, ge = S2;
        if (m32[L2] !== 1 || m32[ge] !== 1) {
          M3[L2] = Vs(o2[L2], m32[L2], this._bitLength), M3[ge] = Vs(o2[ge], m32[ge], this._bitLength), x5 = Math.max(M3[L2].length, x5), x5 = Math.max(M3[ge].length, x5);
          continue;
        }
        var _e = [r2[L2], null, null, r2[ge]];
        r2[L2].y.cmp(r2[ge].y) === 0 ? (_e[1] = r2[L2].add(r2[ge]), _e[2] = r2[L2].toJ().mixedAdd(r2[ge].neg())) : r2[L2].y.cmp(r2[ge].y.redNeg()) === 0 ? (_e[1] = r2[L2].toJ().mixedAdd(r2[ge]), _e[2] = r2[L2].add(r2[ge].neg())) : (_e[1] = r2[L2].toJ().mixedAdd(r2[ge]), _e[2] = r2[L2].toJ().mixedAdd(r2[ge].neg()));
        var N4 = [-3, -1, -5, -7, 0, 7, 5, 1, 3], we = gA(o2[L2], o2[ge]);
        for (x5 = Math.max(we[0].length, x5), M3[L2] = new Array(x5), M3[ge] = new Array(x5), E4 = 0;E4 < x5; E4++) {
          var ye = we[0][E4] | 0, xe = we[1][E4] | 0;
          M3[L2][E4] = N4[(ye + 1) * 3 + (xe + 1)], M3[ge][E4] = 0, y22[L2] = _e;
        }
      }
      var Re = this.jpoint(null, null, null), Ee = this._wnafT4;
      for (S2 = x5;S2 >= 0; S2--) {
        for (var Ae = 0;S2 >= 0; ) {
          var P = true;
          for (E4 = 0;E4 < f2; E4++)
            Ee[E4] = M3[E4][S2] | 0, Ee[E4] !== 0 && (P = false);
          if (!P)
            break;
          Ae++, S2--;
        }
        if (S2 >= 0 && Ae++, Re = Re.dblp(Ae), S2 < 0)
          break;
        for (E4 = 0;E4 < f2; E4++) {
          var Se = Ee[E4];
          Se !== 0 && (Se > 0 ? B5 = y22[E4][Se - 1 >> 1] : Se < 0 && (B5 = y22[E4][-Se - 1 >> 1].neg()), B5.type === "affine" ? Re = Re.mixedAdd(B5) : Re = Re.add(B5));
        }
      }
      for (S2 = 0;S2 < f2; S2++)
        y22[S2] = null;
      return p32 ? Re : Re.toP();
    };
    function _r(t3, e2) {
      this.curve = t3, this.type = e2, this.precomputed = null;
    }
    Xi.BasePoint = _r;
    _r.prototype.eq = function() {
      throw new Error("Not implemented");
    };
    _r.prototype.validate = function() {
      return this.curve.validate(this);
    };
    Xi.prototype.decodePoint = function(e2, r2) {
      e2 = Ca.toArray(e2, r2);
      var o2 = this.p.byteLength();
      if ((e2[0] === 4 || e2[0] === 6 || e2[0] === 7) && e2.length - 1 === 2 * o2) {
        e2[0] === 6 ? $s(e2[e2.length - 1] % 2 === 0) : e2[0] === 7 && $s(e2[e2.length - 1] % 2 === 1);
        var f2 = this.point(e2.slice(1, 1 + o2), e2.slice(1 + o2, 1 + 2 * o2));
        return f2;
      } else if ((e2[0] === 2 || e2[0] === 3) && e2.length - 1 === o2)
        return this.pointFromX(e2.slice(1, 1 + o2), e2[0] === 3);
      throw new Error("Unknown point format");
    };
    _r.prototype.encodeCompressed = function(e2) {
      return this.encode(e2, true);
    };
    _r.prototype._encode = function(e2) {
      var r2 = this.curve.p.byteLength(), o2 = this.getX().toArray("be", r2);
      return e2 ? [this.getY().isEven() ? 2 : 3].concat(o2) : [4].concat(o2, this.getY().toArray("be", r2));
    };
    _r.prototype.encode = function(e2, r2) {
      return Ca.encode(this._encode(r2), e2);
    };
    _r.prototype.precompute = function(e2) {
      if (this.precomputed)
        return this;
      var r2 = { doubles: null, naf: null, beta: null };
      return r2.naf = this._getNAFPoints(8), r2.doubles = this._getDoubles(4, e2), r2.beta = this._getBeta(), this.precomputed = r2, this;
    };
    _r.prototype._hasDoubles = function(e2) {
      if (!this.precomputed)
        return false;
      var r2 = this.precomputed.doubles;
      return r2 ? r2.points.length >= Math.ceil((e2.bitLength() + 1) / r2.step) : false;
    };
    _r.prototype._getDoubles = function(e2, r2) {
      if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;
      for (var o2 = [this], f2 = this, p32 = 0;p32 < r2; p32 += e2) {
        for (var m32 = 0;m32 < e2; m32++)
          f2 = f2.dbl();
        o2.push(f2);
      }
      return { step: e2, points: o2 };
    };
    _r.prototype._getNAFPoints = function(e2) {
      if (this.precomputed && this.precomputed.naf)
        return this.precomputed.naf;
      for (var r2 = [this], o2 = (1 << e2) - 1, f2 = o2 === 1 ? null : this.dbl(), p32 = 1;p32 < o2; p32++)
        r2[p32] = r2[p32 - 1].add(f2);
      return { wnd: e2, points: r2 };
    };
    _r.prototype._getBeta = function() {
      return null;
    };
    _r.prototype.dblp = function(e2) {
      for (var r2 = this, o2 = 0;o2 < e2; o2++)
        r2 = r2.dbl();
      return r2;
    };
  });
  b22 = T2((Sk, v22) => {
    var yA = or(), lt = ri(), Dl = Ie(), Bf = Oa(), wA = yA.assert;
    function xr(t3) {
      Bf.call(this, "short", t3), this.a = new lt(t3.a, 16).toRed(this.red), this.b = new lt(t3.b, 16).toRed(this.red), this.tinv = this.two.redInvm(), this.zeroA = this.a.fromRed().cmpn(0) === 0, this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0, this.endo = this._getEndomorphism(t3), this._endoWnafT1 = new Array(4), this._endoWnafT2 = new Array(4);
    }
    Dl(xr, Bf);
    v22.exports = xr;
    xr.prototype._getEndomorphism = function(e2) {
      if (!(!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)) {
        var r2, o2;
        if (e2.beta)
          r2 = new lt(e2.beta, 16).toRed(this.red);
        else {
          var f2 = this._getEndoRoots(this.p);
          r2 = f2[0].cmp(f2[1]) < 0 ? f2[0] : f2[1], r2 = r2.toRed(this.red);
        }
        if (e2.lambda)
          o2 = new lt(e2.lambda, 16);
        else {
          var p2 = this._getEndoRoots(this.n);
          this.g.mul(p2[0]).x.cmp(this.g.x.redMul(r2)) === 0 ? o2 = p2[0] : (o2 = p2[1], wA(this.g.mul(o2).x.cmp(this.g.x.redMul(r2)) === 0));
        }
        var m32;
        return e2.basis ? m32 = e2.basis.map(function(y22) {
          return { a: new lt(y22.a, 16), b: new lt(y22.b, 16) };
        }) : m32 = this._getEndoBasis(o2), { beta: r2, lambda: o2, basis: m32 };
      }
    };
    xr.prototype._getEndoRoots = function(e2) {
      var r2 = e2 === this.p ? this.red : lt.mont(e2), o2 = new lt(2).toRed(r2).redInvm(), f2 = o2.redNeg(), p2 = new lt(3).toRed(r2).redNeg().redSqrt().redMul(o2), m32 = f2.redAdd(p2).fromRed(), y22 = f2.redSub(p2).fromRed();
      return [m32, y22];
    };
    xr.prototype._getEndoBasis = function(e2) {
      for (var r2 = this.n.ushrn(Math.floor(this.n.bitLength() / 2)), o2 = e2, f2 = this.n.clone(), p2 = new lt(1), m32 = new lt(0), y22 = new lt(0), M3 = new lt(1), x5, S2, E4, B5, q, L2, ge, _e = 0, N4, we;o2.cmpn(0) !== 0; ) {
        var ye = f2.div(o2);
        N4 = f2.sub(ye.mul(o2)), we = y22.sub(ye.mul(p2));
        var xe = M3.sub(ye.mul(m32));
        if (!E4 && N4.cmp(r2) < 0)
          x5 = ge.neg(), S2 = p2, E4 = N4.neg(), B5 = we;
        else if (E4 && ++_e === 2)
          break;
        ge = N4, f2 = o2, o2 = N4, y22 = p2, p2 = we, M3 = m32, m32 = xe;
      }
      q = N4.neg(), L2 = we;
      var Re = E4.sqr().add(B5.sqr()), Ee = q.sqr().add(L2.sqr());
      return Ee.cmp(Re) >= 0 && (q = x5, L2 = S2), E4.negative && (E4 = E4.neg(), B5 = B5.neg()), q.negative && (q = q.neg(), L2 = L2.neg()), [{ a: E4, b: B5 }, { a: q, b: L2 }];
    };
    xr.prototype._endoSplit = function(e2) {
      var r2 = this.endo.basis, o2 = r2[0], f2 = r2[1], p2 = f2.b.mul(e2).divRound(this.n), m32 = o2.b.neg().mul(e2).divRound(this.n), y22 = p2.mul(o2.a), M3 = m32.mul(f2.a), x5 = p2.mul(o2.b), S2 = m32.mul(f2.b), E4 = e2.sub(y22).sub(M3), B5 = x5.add(S2).neg();
      return { k1: E4, k2: B5 };
    };
    xr.prototype.pointFromX = function(e2, r2) {
      e2 = new lt(e2, 16), e2.red || (e2 = e2.toRed(this.red));
      var o2 = e2.redSqr().redMul(e2).redIAdd(e2.redMul(this.a)).redIAdd(this.b), f2 = o2.redSqrt();
      if (f2.redSqr().redSub(o2).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      var p2 = f2.fromRed().isOdd();
      return (r2 && !p2 || !r2 && p2) && (f2 = f2.redNeg()), this.point(e2, f2);
    };
    xr.prototype.validate = function(e2) {
      if (e2.inf)
        return true;
      var { x: r2, y: o2 } = e2, f2 = this.a.redMul(r2), p2 = r2.redSqr().redMul(r2).redIAdd(f2).redIAdd(this.b);
      return o2.redSqr().redISub(p2).cmpn(0) === 0;
    };
    xr.prototype._endoWnafMulAdd = function(e2, r2, o2) {
      for (var f2 = this._endoWnafT1, p2 = this._endoWnafT2, m32 = 0;m32 < e2.length; m32++) {
        var y22 = this._endoSplit(r2[m32]), M3 = e2[m32], x5 = M3._getBeta();
        y22.k1.negative && (y22.k1.ineg(), M3 = M3.neg(true)), y22.k2.negative && (y22.k2.ineg(), x5 = x5.neg(true)), f2[m32 * 2] = M3, f2[m32 * 2 + 1] = x5, p2[m32 * 2] = y22.k1, p2[m32 * 2 + 1] = y22.k2;
      }
      for (var S2 = this._wnafMulAdd(1, f2, p2, m32 * 2, o2), E4 = 0;E4 < m32 * 2; E4++)
        f2[E4] = null, p2[E4] = null;
      return S2;
    };
    function Ct(t3, e2, r2, o2) {
      Bf.BasePoint.call(this, t3, "affine"), e2 === null && r2 === null ? (this.x = null, this.y = null, this.inf = true) : (this.x = new lt(e2, 16), this.y = new lt(r2, 16), o2 && (this.x.forceRed(this.curve.red), this.y.forceRed(this.curve.red)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.inf = false);
    }
    Dl(Ct, Bf.BasePoint);
    xr.prototype.point = function(e2, r2, o2) {
      return new Ct(this, e2, r2, o2);
    };
    xr.prototype.pointFromJSON = function(e2, r2) {
      return Ct.fromJSON(this, e2, r2);
    };
    Ct.prototype._getBeta = function() {
      if (!!this.curve.endo) {
        var e2 = this.precomputed;
        if (e2 && e2.beta)
          return e2.beta;
        var r2 = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
        if (e2) {
          var o2 = this.curve, f2 = function(p2) {
            return o2.point(p2.x.redMul(o2.endo.beta), p2.y);
          };
          e2.beta = r2, r2.precomputed = { beta: null, naf: e2.naf && { wnd: e2.naf.wnd, points: e2.naf.points.map(f2) }, doubles: e2.doubles && { step: e2.doubles.step, points: e2.doubles.points.map(f2) } };
        }
        return r2;
      }
    };
    Ct.prototype.toJSON = function() {
      return this.precomputed ? [this.x, this.y, this.precomputed && { doubles: this.precomputed.doubles && { step: this.precomputed.doubles.step, points: this.precomputed.doubles.points.slice(1) }, naf: this.precomputed.naf && { wnd: this.precomputed.naf.wnd, points: this.precomputed.naf.points.slice(1) } }] : [this.x, this.y];
    };
    Ct.fromJSON = function(e2, r2, o2) {
      typeof r2 == "string" && (r2 = JSON.parse(r2));
      var f2 = e2.point(r2[0], r2[1], o2);
      if (!r2[2])
        return f2;
      function p2(y22) {
        return e2.point(y22[0], y22[1], o2);
      }
      var m32 = r2[2];
      return f2.precomputed = { beta: null, doubles: m32.doubles && { step: m32.doubles.step, points: [f2].concat(m32.doubles.points.map(p2)) }, naf: m32.naf && { wnd: m32.naf.wnd, points: [f2].concat(m32.naf.points.map(p2)) } }, f2;
    };
    Ct.prototype.inspect = function() {
      return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
    };
    Ct.prototype.isInfinity = function() {
      return this.inf;
    };
    Ct.prototype.add = function(e2) {
      if (this.inf)
        return e2;
      if (e2.inf)
        return this;
      if (this.eq(e2))
        return this.dbl();
      if (this.neg().eq(e2))
        return this.curve.point(null, null);
      if (this.x.cmp(e2.x) === 0)
        return this.curve.point(null, null);
      var r2 = this.y.redSub(e2.y);
      r2.cmpn(0) !== 0 && (r2 = r2.redMul(this.x.redSub(e2.x).redInvm()));
      var o2 = r2.redSqr().redISub(this.x).redISub(e2.x), f2 = r2.redMul(this.x.redSub(o2)).redISub(this.y);
      return this.curve.point(o2, f2);
    };
    Ct.prototype.dbl = function() {
      if (this.inf)
        return this;
      var e2 = this.y.redAdd(this.y);
      if (e2.cmpn(0) === 0)
        return this.curve.point(null, null);
      var r2 = this.curve.a, o2 = this.x.redSqr(), f2 = e2.redInvm(), p2 = o2.redAdd(o2).redIAdd(o2).redIAdd(r2).redMul(f2), m32 = p2.redSqr().redISub(this.x.redAdd(this.x)), y22 = p2.redMul(this.x.redSub(m32)).redISub(this.y);
      return this.curve.point(m32, y22);
    };
    Ct.prototype.getX = function() {
      return this.x.fromRed();
    };
    Ct.prototype.getY = function() {
      return this.y.fromRed();
    };
    Ct.prototype.mul = function(e2) {
      return e2 = new lt(e2, 16), this.isInfinity() ? this : this._hasDoubles(e2) ? this.curve._fixedNafMul(this, e2) : this.curve.endo ? this.curve._endoWnafMulAdd([this], [e2]) : this.curve._wnafMul(this, e2);
    };
    Ct.prototype.mulAdd = function(e2, r2, o2) {
      var f2 = [this, r2], p2 = [e2, o2];
      return this.curve.endo ? this.curve._endoWnafMulAdd(f2, p2) : this.curve._wnafMulAdd(1, f2, p2, 2);
    };
    Ct.prototype.jmulAdd = function(e2, r2, o2) {
      var f2 = [this, r2], p2 = [e2, o2];
      return this.curve.endo ? this.curve._endoWnafMulAdd(f2, p2, true) : this.curve._wnafMulAdd(1, f2, p2, 2, true);
    };
    Ct.prototype.eq = function(e2) {
      return this === e2 || this.inf === e2.inf && (this.inf || this.x.cmp(e2.x) === 0 && this.y.cmp(e2.y) === 0);
    };
    Ct.prototype.neg = function(e2) {
      if (this.inf)
        return this;
      var r2 = this.curve.point(this.x, this.y.redNeg());
      if (e2 && this.precomputed) {
        var o2 = this.precomputed, f2 = function(p2) {
          return p2.neg();
        };
        r2.precomputed = { naf: o2.naf && { wnd: o2.naf.wnd, points: o2.naf.points.map(f2) }, doubles: o2.doubles && { step: o2.doubles.step, points: o2.doubles.points.map(f2) } };
      }
      return r2;
    };
    Ct.prototype.toJ = function() {
      if (this.inf)
        return this.curve.jpoint(null, null, null);
      var e2 = this.curve.jpoint(this.x, this.y, this.curve.one);
      return e2;
    };
    function Wt(t3, e2, r2, o2) {
      Bf.BasePoint.call(this, t3, "jacobian"), e2 === null && r2 === null && o2 === null ? (this.x = this.curve.one, this.y = this.curve.one, this.z = new lt(0)) : (this.x = new lt(e2, 16), this.y = new lt(r2, 16), this.z = new lt(o2, 16)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.zOne = this.z === this.curve.one;
    }
    Dl(Wt, Bf.BasePoint);
    xr.prototype.jpoint = function(e2, r2, o2) {
      return new Wt(this, e2, r2, o2);
    };
    Wt.prototype.toP = function() {
      if (this.isInfinity())
        return this.curve.point(null, null);
      var e2 = this.z.redInvm(), r2 = e2.redSqr(), o2 = this.x.redMul(r2), f2 = this.y.redMul(r2).redMul(e2);
      return this.curve.point(o2, f2);
    };
    Wt.prototype.neg = function() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };
    Wt.prototype.add = function(e2) {
      if (this.isInfinity())
        return e2;
      if (e2.isInfinity())
        return this;
      var r2 = e2.z.redSqr(), o2 = this.z.redSqr(), f2 = this.x.redMul(r2), p2 = e2.x.redMul(o2), m32 = this.y.redMul(r2.redMul(e2.z)), y22 = e2.y.redMul(o2.redMul(this.z)), M3 = f2.redSub(p2), x5 = m32.redSub(y22);
      if (M3.cmpn(0) === 0)
        return x5.cmpn(0) !== 0 ? this.curve.jpoint(null, null, null) : this.dbl();
      var S2 = M3.redSqr(), E4 = S2.redMul(M3), B5 = f2.redMul(S2), q = x5.redSqr().redIAdd(E4).redISub(B5).redISub(B5), L2 = x5.redMul(B5.redISub(q)).redISub(m32.redMul(E4)), ge = this.z.redMul(e2.z).redMul(M3);
      return this.curve.jpoint(q, L2, ge);
    };
    Wt.prototype.mixedAdd = function(e2) {
      if (this.isInfinity())
        return e2.toJ();
      if (e2.isInfinity())
        return this;
      var r2 = this.z.redSqr(), o2 = this.x, f2 = e2.x.redMul(r2), p2 = this.y, m32 = e2.y.redMul(r2).redMul(this.z), y22 = o2.redSub(f2), M3 = p2.redSub(m32);
      if (y22.cmpn(0) === 0)
        return M3.cmpn(0) !== 0 ? this.curve.jpoint(null, null, null) : this.dbl();
      var x5 = y22.redSqr(), S2 = x5.redMul(y22), E4 = o2.redMul(x5), B5 = M3.redSqr().redIAdd(S2).redISub(E4).redISub(E4), q = M3.redMul(E4.redISub(B5)).redISub(p2.redMul(S2)), L2 = this.z.redMul(y22);
      return this.curve.jpoint(B5, q, L2);
    };
    Wt.prototype.dblp = function(e2) {
      if (e2 === 0)
        return this;
      if (this.isInfinity())
        return this;
      if (!e2)
        return this.dbl();
      var r2;
      if (this.curve.zeroA || this.curve.threeA) {
        var o2 = this;
        for (r2 = 0;r2 < e2; r2++)
          o2 = o2.dbl();
        return o2;
      }
      var f2 = this.curve.a, p2 = this.curve.tinv, m32 = this.x, y22 = this.y, M3 = this.z, x5 = M3.redSqr().redSqr(), S2 = y22.redAdd(y22);
      for (r2 = 0;r2 < e2; r2++) {
        var E4 = m32.redSqr(), B5 = S2.redSqr(), q = B5.redSqr(), L2 = E4.redAdd(E4).redIAdd(E4).redIAdd(f2.redMul(x5)), ge = m32.redMul(B5), _e = L2.redSqr().redISub(ge.redAdd(ge)), N4 = ge.redISub(_e), we = L2.redMul(N4);
        we = we.redIAdd(we).redISub(q);
        var ye = S2.redMul(M3);
        r2 + 1 < e2 && (x5 = x5.redMul(q)), m32 = _e, M3 = ye, S2 = we;
      }
      return this.curve.jpoint(m32, S2.redMul(p2), M3);
    };
    Wt.prototype.dbl = function() {
      return this.isInfinity() ? this : this.curve.zeroA ? this._zeroDbl() : this.curve.threeA ? this._threeDbl() : this._dbl();
    };
    Wt.prototype._zeroDbl = function() {
      var e2, r2, o2;
      if (this.zOne) {
        var f2 = this.x.redSqr(), p2 = this.y.redSqr(), m32 = p2.redSqr(), y22 = this.x.redAdd(p2).redSqr().redISub(f2).redISub(m32);
        y22 = y22.redIAdd(y22);
        var M3 = f2.redAdd(f2).redIAdd(f2), x5 = M3.redSqr().redISub(y22).redISub(y22), S2 = m32.redIAdd(m32);
        S2 = S2.redIAdd(S2), S2 = S2.redIAdd(S2), e2 = x5, r2 = M3.redMul(y22.redISub(x5)).redISub(S2), o2 = this.y.redAdd(this.y);
      } else {
        var E4 = this.x.redSqr(), B5 = this.y.redSqr(), q = B5.redSqr(), L2 = this.x.redAdd(B5).redSqr().redISub(E4).redISub(q);
        L2 = L2.redIAdd(L2);
        var ge = E4.redAdd(E4).redIAdd(E4), _e = ge.redSqr(), N4 = q.redIAdd(q);
        N4 = N4.redIAdd(N4), N4 = N4.redIAdd(N4), e2 = _e.redISub(L2).redISub(L2), r2 = ge.redMul(L2.redISub(e2)).redISub(N4), o2 = this.y.redMul(this.z), o2 = o2.redIAdd(o2);
      }
      return this.curve.jpoint(e2, r2, o2);
    };
    Wt.prototype._threeDbl = function() {
      var e2, r2, o2;
      if (this.zOne) {
        var f2 = this.x.redSqr(), p2 = this.y.redSqr(), m32 = p2.redSqr(), y22 = this.x.redAdd(p2).redSqr().redISub(f2).redISub(m32);
        y22 = y22.redIAdd(y22);
        var M3 = f2.redAdd(f2).redIAdd(f2).redIAdd(this.curve.a), x5 = M3.redSqr().redISub(y22).redISub(y22);
        e2 = x5;
        var S2 = m32.redIAdd(m32);
        S2 = S2.redIAdd(S2), S2 = S2.redIAdd(S2), r2 = M3.redMul(y22.redISub(x5)).redISub(S2), o2 = this.y.redAdd(this.y);
      } else {
        var E4 = this.z.redSqr(), B5 = this.y.redSqr(), q = this.x.redMul(B5), L2 = this.x.redSub(E4).redMul(this.x.redAdd(E4));
        L2 = L2.redAdd(L2).redIAdd(L2);
        var ge = q.redIAdd(q);
        ge = ge.redIAdd(ge);
        var _e = ge.redAdd(ge);
        e2 = L2.redSqr().redISub(_e), o2 = this.y.redAdd(this.z).redSqr().redISub(B5).redISub(E4);
        var N4 = B5.redSqr();
        N4 = N4.redIAdd(N4), N4 = N4.redIAdd(N4), N4 = N4.redIAdd(N4), r2 = L2.redMul(ge.redISub(e2)).redISub(N4);
      }
      return this.curve.jpoint(e2, r2, o2);
    };
    Wt.prototype._dbl = function() {
      var e2 = this.curve.a, r2 = this.x, o2 = this.y, f2 = this.z, p2 = f2.redSqr().redSqr(), m32 = r2.redSqr(), y22 = o2.redSqr(), M3 = m32.redAdd(m32).redIAdd(m32).redIAdd(e2.redMul(p2)), x5 = r2.redAdd(r2);
      x5 = x5.redIAdd(x5);
      var S2 = x5.redMul(y22), E4 = M3.redSqr().redISub(S2.redAdd(S2)), B5 = S2.redISub(E4), q = y22.redSqr();
      q = q.redIAdd(q), q = q.redIAdd(q), q = q.redIAdd(q);
      var L2 = M3.redMul(B5).redISub(q), ge = o2.redAdd(o2).redMul(f2);
      return this.curve.jpoint(E4, L2, ge);
    };
    Wt.prototype.trpl = function() {
      if (!this.curve.zeroA)
        return this.dbl().add(this);
      var e2 = this.x.redSqr(), r2 = this.y.redSqr(), o2 = this.z.redSqr(), f2 = r2.redSqr(), p2 = e2.redAdd(e2).redIAdd(e2), m32 = p2.redSqr(), y22 = this.x.redAdd(r2).redSqr().redISub(e2).redISub(f2);
      y22 = y22.redIAdd(y22), y22 = y22.redAdd(y22).redIAdd(y22), y22 = y22.redISub(m32);
      var M3 = y22.redSqr(), x5 = f2.redIAdd(f2);
      x5 = x5.redIAdd(x5), x5 = x5.redIAdd(x5), x5 = x5.redIAdd(x5);
      var S2 = p2.redIAdd(y22).redSqr().redISub(m32).redISub(M3).redISub(x5), E4 = r2.redMul(S2);
      E4 = E4.redIAdd(E4), E4 = E4.redIAdd(E4);
      var B5 = this.x.redMul(M3).redISub(E4);
      B5 = B5.redIAdd(B5), B5 = B5.redIAdd(B5);
      var q = this.y.redMul(S2.redMul(x5.redISub(S2)).redISub(y22.redMul(M3)));
      q = q.redIAdd(q), q = q.redIAdd(q), q = q.redIAdd(q);
      var L2 = this.z.redAdd(y22).redSqr().redISub(o2).redISub(M3);
      return this.curve.jpoint(B5, q, L2);
    };
    Wt.prototype.mul = function(e2, r2) {
      return e2 = new lt(e2, r2), this.curve._wnafMul(this, e2);
    };
    Wt.prototype.eq = function(e2) {
      if (e2.type === "affine")
        return this.eq(e2.toJ());
      if (this === e2)
        return true;
      var r2 = this.z.redSqr(), o2 = e2.z.redSqr();
      if (this.x.redMul(o2).redISub(e2.x.redMul(r2)).cmpn(0) !== 0)
        return false;
      var f2 = r2.redMul(this.z), p2 = o2.redMul(e2.z);
      return this.y.redMul(p2).redISub(e2.y.redMul(f2)).cmpn(0) === 0;
    };
    Wt.prototype.eqXToP = function(e2) {
      var r2 = this.z.redSqr(), o2 = e2.toRed(this.curve.red).redMul(r2);
      if (this.x.cmp(o2) === 0)
        return true;
      for (var f2 = e2.clone(), p2 = this.curve.redN.redMul(r2);; ) {
        if (f2.iadd(this.curve.n), f2.cmp(this.curve.p) >= 0)
          return false;
        if (o2.redIAdd(p2), this.x.cmp(o2) === 0)
          return true;
      }
    };
    Wt.prototype.inspect = function() {
      return this.isInfinity() ? "<EC JPoint Infinity>" : "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
    };
    Wt.prototype.isInfinity = function() {
      return this.z.cmpn(0) === 0;
    };
  });
  y2 = T2((Ek, g2) => {
    var qf = ri(), m22 = Ie(), Gs = Oa(), MA = or();
    function If(t3) {
      Gs.call(this, "mont", t3), this.a = new qf(t3.a, 16).toRed(this.red), this.b = new qf(t3.b, 16).toRed(this.red), this.i4 = new qf(4).toRed(this.red).redInvm(), this.two = new qf(2).toRed(this.red), this.a24 = this.i4.redMul(this.a.redAdd(this.two));
    }
    m22(If, Gs);
    g2.exports = If;
    If.prototype.validate = function(e2) {
      var r2 = e2.normalize().x, o2 = r2.redSqr(), f2 = o2.redMul(r2).redAdd(o2.redMul(this.a)).redAdd(r2), p2 = f2.redSqrt();
      return p2.redSqr().cmp(f2) === 0;
    };
    function Ot(t3, e2, r2) {
      Gs.BasePoint.call(this, t3, "projective"), e2 === null && r2 === null ? (this.x = this.curve.one, this.z = this.curve.zero) : (this.x = new qf(e2, 16), this.z = new qf(r2, 16), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)));
    }
    m22(Ot, Gs.BasePoint);
    If.prototype.decodePoint = function(e2, r2) {
      return this.point(MA.toArray(e2, r2), 1);
    };
    If.prototype.point = function(e2, r2) {
      return new Ot(this, e2, r2);
    };
    If.prototype.pointFromJSON = function(e2) {
      return Ot.fromJSON(this, e2);
    };
    Ot.prototype.precompute = function() {
    };
    Ot.prototype._encode = function() {
      return this.getX().toArray("be", this.curve.p.byteLength());
    };
    Ot.fromJSON = function(e2, r2) {
      return new Ot(e2, r2[0], r2[1] || e2.one);
    };
    Ot.prototype.inspect = function() {
      return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    };
    Ot.prototype.isInfinity = function() {
      return this.z.cmpn(0) === 0;
    };
    Ot.prototype.dbl = function() {
      var e2 = this.x.redAdd(this.z), r2 = e2.redSqr(), o2 = this.x.redSub(this.z), f2 = o2.redSqr(), p2 = r2.redSub(f2), m32 = r2.redMul(f2), y3 = p2.redMul(f2.redAdd(this.curve.a24.redMul(p2)));
      return this.curve.point(m32, y3);
    };
    Ot.prototype.add = function() {
      throw new Error("Not supported on Montgomery curve");
    };
    Ot.prototype.diffAdd = function(e2, r2) {
      var o2 = this.x.redAdd(this.z), f2 = this.x.redSub(this.z), p2 = e2.x.redAdd(e2.z), m32 = e2.x.redSub(e2.z), y3 = m32.redMul(o2), M3 = p2.redMul(f2), x5 = r2.z.redMul(y3.redAdd(M3).redSqr()), S2 = r2.x.redMul(y3.redISub(M3).redSqr());
      return this.curve.point(x5, S2);
    };
    Ot.prototype.mul = function(e2) {
      for (var r2 = e2.clone(), o2 = this, f2 = this.curve.point(null, null), p2 = this, m32 = [];r2.cmpn(0) !== 0; r2.iushrn(1))
        m32.push(r2.andln(1));
      for (var y3 = m32.length - 1;y3 >= 0; y3--)
        m32[y3] === 0 ? (o2 = o2.diffAdd(f2, p2), f2 = f2.dbl()) : (f2 = o2.diffAdd(f2, p2), o2 = o2.dbl());
      return f2;
    };
    Ot.prototype.mulAdd = function() {
      throw new Error("Not supported on Montgomery curve");
    };
    Ot.prototype.jumlAdd = function() {
      throw new Error("Not supported on Montgomery curve");
    };
    Ot.prototype.eq = function(e2) {
      return this.getX().cmp(e2.getX()) === 0;
    };
    Ot.prototype.normalize = function() {
      return this.x = this.x.redMul(this.z.redInvm()), this.z = this.curve.one, this;
    };
    Ot.prototype.getX = function() {
      return this.normalize(), this.x.fromRed();
    };
  });
  _22 = T2((Ak, M22) => {
    var _A = or(), Ai = ri(), w22 = Ie(), Ys = Oa(), xA = _A.assert;
    function ii(t3) {
      this.twisted = (t3.a | 0) !== 1, this.mOneA = this.twisted && (t3.a | 0) === -1, this.extended = this.mOneA, Ys.call(this, "edwards", t3), this.a = new Ai(t3.a, 16).umod(this.red.m), this.a = this.a.toRed(this.red), this.c = new Ai(t3.c, 16).toRed(this.red), this.c2 = this.c.redSqr(), this.d = new Ai(t3.d, 16).toRed(this.red), this.dd = this.d.redAdd(this.d), xA(!this.twisted || this.c.fromRed().cmpn(1) === 0), this.oneC = (t3.c | 0) === 1;
    }
    w22(ii, Ys);
    M22.exports = ii;
    ii.prototype._mulA = function(e2) {
      return this.mOneA ? e2.redNeg() : this.a.redMul(e2);
    };
    ii.prototype._mulC = function(e2) {
      return this.oneC ? e2 : this.c.redMul(e2);
    };
    ii.prototype.jpoint = function(e2, r2, o2, f2) {
      return this.point(e2, r2, o2, f2);
    };
    ii.prototype.pointFromX = function(e2, r2) {
      e2 = new Ai(e2, 16), e2.red || (e2 = e2.toRed(this.red));
      var o2 = e2.redSqr(), f2 = this.c2.redSub(this.a.redMul(o2)), p2 = this.one.redSub(this.c2.redMul(this.d).redMul(o2)), m32 = f2.redMul(p2.redInvm()), y3 = m32.redSqrt();
      if (y3.redSqr().redSub(m32).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      var M3 = y3.fromRed().isOdd();
      return (r2 && !M3 || !r2 && M3) && (y3 = y3.redNeg()), this.point(e2, y3);
    };
    ii.prototype.pointFromY = function(e2, r2) {
      e2 = new Ai(e2, 16), e2.red || (e2 = e2.toRed(this.red));
      var o2 = e2.redSqr(), f2 = o2.redSub(this.c2), p2 = o2.redMul(this.d).redMul(this.c2).redSub(this.a), m32 = f2.redMul(p2.redInvm());
      if (m32.cmp(this.zero) === 0) {
        if (r2)
          throw new Error("invalid point");
        return this.point(this.zero, e2);
      }
      var y3 = m32.redSqrt();
      if (y3.redSqr().redSub(m32).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      return y3.fromRed().isOdd() !== r2 && (y3 = y3.redNeg()), this.point(y3, e2);
    };
    ii.prototype.validate = function(e2) {
      if (e2.isInfinity())
        return true;
      e2.normalize();
      var r2 = e2.x.redSqr(), o2 = e2.y.redSqr(), f2 = r2.redMul(this.a).redAdd(o2), p2 = this.c2.redMul(this.one.redAdd(this.d.redMul(r2).redMul(o2)));
      return f2.cmp(p2) === 0;
    };
    function at(t3, e2, r2, o2, f2) {
      Ys.BasePoint.call(this, t3, "projective"), e2 === null && r2 === null && o2 === null ? (this.x = this.curve.zero, this.y = this.curve.one, this.z = this.curve.one, this.t = this.curve.zero, this.zOne = true) : (this.x = new Ai(e2, 16), this.y = new Ai(r2, 16), this.z = o2 ? new Ai(o2, 16) : this.curve.one, this.t = f2 && new Ai(f2, 16), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.t && !this.t.red && (this.t = this.t.toRed(this.curve.red)), this.zOne = this.z === this.curve.one, this.curve.extended && !this.t && (this.t = this.x.redMul(this.y), this.zOne || (this.t = this.t.redMul(this.z.redInvm()))));
    }
    w22(at, Ys.BasePoint);
    ii.prototype.pointFromJSON = function(e2) {
      return at.fromJSON(this, e2);
    };
    ii.prototype.point = function(e2, r2, o2, f2) {
      return new at(this, e2, r2, o2, f2);
    };
    at.fromJSON = function(e2, r2) {
      return new at(e2, r2[0], r2[1], r2[2]);
    };
    at.prototype.inspect = function() {
      return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    };
    at.prototype.isInfinity = function() {
      return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
    };
    at.prototype._extDbl = function() {
      var e2 = this.x.redSqr(), r2 = this.y.redSqr(), o2 = this.z.redSqr();
      o2 = o2.redIAdd(o2);
      var f2 = this.curve._mulA(e2), p2 = this.x.redAdd(this.y).redSqr().redISub(e2).redISub(r2), m32 = f2.redAdd(r2), y3 = m32.redSub(o2), M3 = f2.redSub(r2), x5 = p2.redMul(y3), S2 = m32.redMul(M3), E4 = p2.redMul(M3), B5 = y3.redMul(m32);
      return this.curve.point(x5, S2, B5, E4);
    };
    at.prototype._projDbl = function() {
      var e2 = this.x.redAdd(this.y).redSqr(), r2 = this.x.redSqr(), o2 = this.y.redSqr(), f2, p2, m32, y3, M3, x5;
      if (this.curve.twisted) {
        y3 = this.curve._mulA(r2);
        var S2 = y3.redAdd(o2);
        this.zOne ? (f2 = e2.redSub(r2).redSub(o2).redMul(S2.redSub(this.curve.two)), p2 = S2.redMul(y3.redSub(o2)), m32 = S2.redSqr().redSub(S2).redSub(S2)) : (M3 = this.z.redSqr(), x5 = S2.redSub(M3).redISub(M3), f2 = e2.redSub(r2).redISub(o2).redMul(x5), p2 = S2.redMul(y3.redSub(o2)), m32 = S2.redMul(x5));
      } else
        y3 = r2.redAdd(o2), M3 = this.curve._mulC(this.z).redSqr(), x5 = y3.redSub(M3).redSub(M3), f2 = this.curve._mulC(e2.redISub(y3)).redMul(x5), p2 = this.curve._mulC(y3).redMul(r2.redISub(o2)), m32 = y3.redMul(x5);
      return this.curve.point(f2, p2, m32);
    };
    at.prototype.dbl = function() {
      return this.isInfinity() ? this : this.curve.extended ? this._extDbl() : this._projDbl();
    };
    at.prototype._extAdd = function(e2) {
      var r2 = this.y.redSub(this.x).redMul(e2.y.redSub(e2.x)), o2 = this.y.redAdd(this.x).redMul(e2.y.redAdd(e2.x)), f2 = this.t.redMul(this.curve.dd).redMul(e2.t), p2 = this.z.redMul(e2.z.redAdd(e2.z)), m32 = o2.redSub(r2), y3 = p2.redSub(f2), M3 = p2.redAdd(f2), x5 = o2.redAdd(r2), S2 = m32.redMul(y3), E4 = M3.redMul(x5), B5 = m32.redMul(x5), q = y3.redMul(M3);
      return this.curve.point(S2, E4, q, B5);
    };
    at.prototype._projAdd = function(e2) {
      var r2 = this.z.redMul(e2.z), o2 = r2.redSqr(), f2 = this.x.redMul(e2.x), p2 = this.y.redMul(e2.y), m32 = this.curve.d.redMul(f2).redMul(p2), y3 = o2.redSub(m32), M3 = o2.redAdd(m32), x5 = this.x.redAdd(this.y).redMul(e2.x.redAdd(e2.y)).redISub(f2).redISub(p2), S2 = r2.redMul(y3).redMul(x5), E4, B5;
      return this.curve.twisted ? (E4 = r2.redMul(M3).redMul(p2.redSub(this.curve._mulA(f2))), B5 = y3.redMul(M3)) : (E4 = r2.redMul(M3).redMul(p2.redSub(f2)), B5 = this.curve._mulC(y3).redMul(M3)), this.curve.point(S2, E4, B5);
    };
    at.prototype.add = function(e2) {
      return this.isInfinity() ? e2 : e2.isInfinity() ? this : this.curve.extended ? this._extAdd(e2) : this._projAdd(e2);
    };
    at.prototype.mul = function(e2) {
      return this._hasDoubles(e2) ? this.curve._fixedNafMul(this, e2) : this.curve._wnafMul(this, e2);
    };
    at.prototype.mulAdd = function(e2, r2, o2) {
      return this.curve._wnafMulAdd(1, [this, r2], [e2, o2], 2, false);
    };
    at.prototype.jmulAdd = function(e2, r2, o2) {
      return this.curve._wnafMulAdd(1, [this, r2], [e2, o2], 2, true);
    };
    at.prototype.normalize = function() {
      if (this.zOne)
        return this;
      var e2 = this.z.redInvm();
      return this.x = this.x.redMul(e2), this.y = this.y.redMul(e2), this.t && (this.t = this.t.redMul(e2)), this.z = this.curve.one, this.zOne = true, this;
    };
    at.prototype.neg = function() {
      return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
    };
    at.prototype.getX = function() {
      return this.normalize(), this.x.fromRed();
    };
    at.prototype.getY = function() {
      return this.normalize(), this.y.fromRed();
    };
    at.prototype.eq = function(e2) {
      return this === e2 || this.getX().cmp(e2.getX()) === 0 && this.getY().cmp(e2.getY()) === 0;
    };
    at.prototype.eqXToP = function(e2) {
      var r2 = e2.toRed(this.curve.red).redMul(this.z);
      if (this.x.cmp(r2) === 0)
        return true;
      for (var o2 = e2.clone(), f2 = this.curve.redN.redMul(this.z);; ) {
        if (o2.iadd(this.curve.n), o2.cmp(this.curve.p) >= 0)
          return false;
        if (r2.redIAdd(f2), this.x.cmp(r2) === 0)
          return true;
      }
    };
    at.prototype.toP = at.prototype.normalize;
    at.prototype.mixedAdd = at.prototype.add;
  });
  Pl = T2((x22) => {
    var Xs = x22;
    Xs.base = Oa();
    Xs.short = b22();
    Xs.mont = y2();
    Xs.edwards = _22();
  });
  Cr = T2((it) => {
    var SA = ar(), EA = Ie();
    it.inherits = EA;
    function AA(t3, e2) {
      return (t3.charCodeAt(e2) & 64512) !== 55296 || e2 < 0 || e2 + 1 >= t3.length ? false : (t3.charCodeAt(e2 + 1) & 64512) === 56320;
    }
    function RA(t3, e2) {
      if (Array.isArray(t3))
        return t3.slice();
      if (!t3)
        return [];
      var r2 = [];
      if (typeof t3 == "string")
        if (e2) {
          if (e2 === "hex")
            for (t3 = t3.replace(/[^a-z0-9]+/ig, ""), t3.length % 2 !== 0 && (t3 = "0" + t3), f2 = 0;f2 < t3.length; f2 += 2)
              r2.push(parseInt(t3[f2] + t3[f2 + 1], 16));
        } else
          for (var o2 = 0, f2 = 0;f2 < t3.length; f2++) {
            var p2 = t3.charCodeAt(f2);
            p2 < 128 ? r2[o2++] = p2 : p2 < 2048 ? (r2[o2++] = p2 >> 6 | 192, r2[o2++] = p2 & 63 | 128) : AA(t3, f2) ? (p2 = 65536 + ((p2 & 1023) << 10) + (t3.charCodeAt(++f2) & 1023), r2[o2++] = p2 >> 18 | 240, r2[o2++] = p2 >> 12 & 63 | 128, r2[o2++] = p2 >> 6 & 63 | 128, r2[o2++] = p2 & 63 | 128) : (r2[o2++] = p2 >> 12 | 224, r2[o2++] = p2 >> 6 & 63 | 128, r2[o2++] = p2 & 63 | 128);
          }
      else
        for (f2 = 0;f2 < t3.length; f2++)
          r2[f2] = t3[f2] | 0;
      return r2;
    }
    it.toArray = RA;
    function BA(t3) {
      for (var e2 = "", r2 = 0;r2 < t3.length; r2++)
        e2 += E22(t3[r2].toString(16));
      return e2;
    }
    it.toHex = BA;
    function S2(t3) {
      var e2 = t3 >>> 24 | t3 >>> 8 & 65280 | t3 << 8 & 16711680 | (t3 & 255) << 24;
      return e2 >>> 0;
    }
    it.htonl = S2;
    function qA(t3, e2) {
      for (var r2 = "", o2 = 0;o2 < t3.length; o2++) {
        var f2 = t3[o2];
        e2 === "little" && (f2 = S2(f2)), r2 += A22(f2.toString(16));
      }
      return r2;
    }
    it.toHex32 = qA;
    function E22(t3) {
      return t3.length === 1 ? "0" + t3 : t3;
    }
    it.zero2 = E22;
    function A22(t3) {
      return t3.length === 7 ? "0" + t3 : t3.length === 6 ? "00" + t3 : t3.length === 5 ? "000" + t3 : t3.length === 4 ? "0000" + t3 : t3.length === 3 ? "00000" + t3 : t3.length === 2 ? "000000" + t3 : t3.length === 1 ? "0000000" + t3 : t3;
    }
    it.zero8 = A22;
    function IA(t3, e2, r2, o2) {
      var f2 = r2 - e2;
      SA(f2 % 4 === 0);
      for (var p2 = new Array(f2 / 4), m32 = 0, y3 = e2;m32 < p2.length; m32++, y3 += 4) {
        var M3;
        o2 === "big" ? M3 = t3[y3] << 24 | t3[y3 + 1] << 16 | t3[y3 + 2] << 8 | t3[y3 + 3] : M3 = t3[y3 + 3] << 24 | t3[y3 + 2] << 16 | t3[y3 + 1] << 8 | t3[y3], p2[m32] = M3 >>> 0;
      }
      return p2;
    }
    it.join32 = IA;
    function TA(t3, e2) {
      for (var r2 = new Array(t3.length * 4), o2 = 0, f2 = 0;o2 < t3.length; o2++, f2 += 4) {
        var p2 = t3[o2];
        e2 === "big" ? (r2[f2] = p2 >>> 24, r2[f2 + 1] = p2 >>> 16 & 255, r2[f2 + 2] = p2 >>> 8 & 255, r2[f2 + 3] = p2 & 255) : (r2[f2 + 3] = p2 >>> 24, r2[f2 + 2] = p2 >>> 16 & 255, r2[f2 + 1] = p2 >>> 8 & 255, r2[f2] = p2 & 255);
      }
      return r2;
    }
    it.split32 = TA;
    function kA(t3, e2) {
      return t3 >>> e2 | t3 << 32 - e2;
    }
    it.rotr32 = kA;
    function LA(t3, e2) {
      return t3 << e2 | t3 >>> 32 - e2;
    }
    it.rotl32 = LA;
    function NA(t3, e2) {
      return t3 + e2 >>> 0;
    }
    it.sum32 = NA;
    function DA(t3, e2, r2) {
      return t3 + e2 + r2 >>> 0;
    }
    it.sum32_3 = DA;
    function PA(t3, e2, r2, o2) {
      return t3 + e2 + r2 + o2 >>> 0;
    }
    it.sum32_4 = PA;
    function CA(t3, e2, r2, o2, f2) {
      return t3 + e2 + r2 + o2 + f2 >>> 0;
    }
    it.sum32_5 = CA;
    function OA(t3, e2, r2, o2) {
      var f2 = t3[e2], p2 = t3[e2 + 1], m32 = o2 + p2 >>> 0, y3 = (m32 < o2 ? 1 : 0) + r2 + f2;
      t3[e2] = y3 >>> 0, t3[e2 + 1] = m32;
    }
    it.sum64 = OA;
    function FA(t3, e2, r2, o2) {
      var f2 = e2 + o2 >>> 0, p2 = (f2 < e2 ? 1 : 0) + t3 + r2;
      return p2 >>> 0;
    }
    it.sum64_hi = FA;
    function UA(t3, e2, r2, o2) {
      var f2 = e2 + o2;
      return f2 >>> 0;
    }
    it.sum64_lo = UA;
    function zA(t3, e2, r2, o2, f2, p2, m32, y3) {
      var M3 = 0, x5 = e2;
      x5 = x5 + o2 >>> 0, M3 += x5 < e2 ? 1 : 0, x5 = x5 + p2 >>> 0, M3 += x5 < p2 ? 1 : 0, x5 = x5 + y3 >>> 0, M3 += x5 < y3 ? 1 : 0;
      var S3 = t3 + r2 + f2 + m32 + M3;
      return S3 >>> 0;
    }
    it.sum64_4_hi = zA;
    function HA(t3, e2, r2, o2, f2, p2, m32, y3) {
      var M3 = e2 + o2 + p2 + y3;
      return M3 >>> 0;
    }
    it.sum64_4_lo = HA;
    function WA(t3, e2, r2, o2, f2, p2, m32, y3, M3, x5) {
      var S3 = 0, E4 = e2;
      E4 = E4 + o2 >>> 0, S3 += E4 < e2 ? 1 : 0, E4 = E4 + p2 >>> 0, S3 += E4 < p2 ? 1 : 0, E4 = E4 + y3 >>> 0, S3 += E4 < y3 ? 1 : 0, E4 = E4 + x5 >>> 0, S3 += E4 < x5 ? 1 : 0;
      var B5 = t3 + r2 + f2 + m32 + M3 + S3;
      return B5 >>> 0;
    }
    it.sum64_5_hi = WA;
    function KA(t3, e2, r2, o2, f2, p2, m32, y3, M3, x5) {
      var S3 = e2 + o2 + p2 + y3 + x5;
      return S3 >>> 0;
    }
    it.sum64_5_lo = KA;
    function jA(t3, e2, r2) {
      var o2 = e2 << 32 - r2 | t3 >>> r2;
      return o2 >>> 0;
    }
    it.rotr64_hi = jA;
    function ZA(t3, e2, r2) {
      var o2 = t3 << 32 - r2 | e2 >>> r2;
      return o2 >>> 0;
    }
    it.rotr64_lo = ZA;
    function VA(t3, e2, r2) {
      return t3 >>> r2;
    }
    it.shr64_hi = VA;
    function $A(t3, e2, r2) {
      var o2 = t3 << 32 - r2 | e2 >>> r2;
      return o2 >>> 0;
    }
    it.shr64_lo = $A;
  });
  Tf = T2((B22) => {
    var R22 = Cr(), GA = ar();
    function Js() {
      this.pending = null, this.pendingTotal = 0, this.blockSize = this.constructor.blockSize, this.outSize = this.constructor.outSize, this.hmacStrength = this.constructor.hmacStrength, this.padLength = this.constructor.padLength / 8, this.endian = "big", this._delta8 = this.blockSize / 8, this._delta32 = this.blockSize / 32;
    }
    B22.BlockHash = Js;
    Js.prototype.update = function(e2, r2) {
      if (e2 = R22.toArray(e2, r2), this.pending ? this.pending = this.pending.concat(e2) : this.pending = e2, this.pendingTotal += e2.length, this.pending.length >= this._delta8) {
        e2 = this.pending;
        var o2 = e2.length % this._delta8;
        this.pending = e2.slice(e2.length - o2, e2.length), this.pending.length === 0 && (this.pending = null), e2 = R22.join32(e2, 0, e2.length - o2, this.endian);
        for (var f2 = 0;f2 < e2.length; f2 += this._delta32)
          this._update(e2, f2, f2 + this._delta32);
      }
      return this;
    };
    Js.prototype.digest = function(e2) {
      return this.update(this._pad()), GA(this.pending === null), this._digest(e2);
    };
    Js.prototype._pad = function() {
      var e2 = this.pendingTotal, r2 = this._delta8, o2 = r2 - (e2 + this.padLength) % r2, f2 = new Array(o2 + this.padLength);
      f2[0] = 128;
      for (var p2 = 1;p2 < o2; p2++)
        f2[p2] = 0;
      if (e2 <<= 3, this.endian === "big") {
        for (var m32 = 8;m32 < this.padLength; m32++)
          f2[p2++] = 0;
        f2[p2++] = 0, f2[p2++] = 0, f2[p2++] = 0, f2[p2++] = 0, f2[p2++] = e2 >>> 24 & 255, f2[p2++] = e2 >>> 16 & 255, f2[p2++] = e2 >>> 8 & 255, f2[p2++] = e2 & 255;
      } else
        for (f2[p2++] = e2 & 255, f2[p2++] = e2 >>> 8 & 255, f2[p2++] = e2 >>> 16 & 255, f2[p2++] = e2 >>> 24 & 255, f2[p2++] = 0, f2[p2++] = 0, f2[p2++] = 0, f2[p2++] = 0, m32 = 8;m32 < this.padLength; m32++)
          f2[p2++] = 0;
      return f2;
    };
  });
  Cl = T2((Ri) => {
    var YA = Cr(), ni = YA.rotr32;
    function XA(t3, e2, r2, o2) {
      if (t3 === 0)
        return q2(e2, r2, o2);
      if (t3 === 1 || t3 === 3)
        return T22(e2, r2, o2);
      if (t3 === 2)
        return I2(e2, r2, o2);
    }
    Ri.ft_1 = XA;
    function q2(t3, e2, r2) {
      return t3 & e2 ^ ~t3 & r2;
    }
    Ri.ch32 = q2;
    function I2(t3, e2, r2) {
      return t3 & e2 ^ t3 & r2 ^ e2 & r2;
    }
    Ri.maj32 = I2;
    function T22(t3, e2, r2) {
      return t3 ^ e2 ^ r2;
    }
    Ri.p32 = T22;
    function JA(t3) {
      return ni(t3, 2) ^ ni(t3, 13) ^ ni(t3, 22);
    }
    Ri.s0_256 = JA;
    function QA(t3) {
      return ni(t3, 6) ^ ni(t3, 11) ^ ni(t3, 25);
    }
    Ri.s1_256 = QA;
    function eR(t3) {
      return ni(t3, 7) ^ ni(t3, 18) ^ t3 >>> 3;
    }
    Ri.g0_256 = eR;
    function tR(t3) {
      return ni(t3, 17) ^ ni(t3, 19) ^ t3 >>> 10;
    }
    Ri.g1_256 = tR;
  });
  N22 = T2((Tk, L2) => {
    var kf = Cr(), rR = Tf(), iR = Cl(), Ol = kf.rotl32, Fa = kf.sum32, nR = kf.sum32_5, fR = iR.ft_1, k22 = rR.BlockHash, aR = [1518500249, 1859775393, 2400959708, 3395469782];
    function fi() {
      if (!(this instanceof fi))
        return new fi;
      k22.call(this), this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520], this.W = new Array(80);
    }
    kf.inherits(fi, k22);
    L2.exports = fi;
    fi.blockSize = 512;
    fi.outSize = 160;
    fi.hmacStrength = 80;
    fi.padLength = 64;
    fi.prototype._update = function(e2, r2) {
      for (var o2 = this.W, f2 = 0;f2 < 16; f2++)
        o2[f2] = e2[r2 + f2];
      for (;f2 < o2.length; f2++)
        o2[f2] = Ol(o2[f2 - 3] ^ o2[f2 - 8] ^ o2[f2 - 14] ^ o2[f2 - 16], 1);
      var p2 = this.h[0], m32 = this.h[1], y3 = this.h[2], M3 = this.h[3], x5 = this.h[4];
      for (f2 = 0;f2 < o2.length; f2++) {
        var S2 = ~~(f2 / 20), E4 = nR(Ol(p2, 5), fR(S2, m32, y3, M3), x5, o2[f2], aR[S2]);
        x5 = M3, M3 = y3, y3 = Ol(m32, 30), m32 = p2, p2 = E4;
      }
      this.h[0] = Fa(this.h[0], p2), this.h[1] = Fa(this.h[1], m32), this.h[2] = Fa(this.h[2], y3), this.h[3] = Fa(this.h[3], M3), this.h[4] = Fa(this.h[4], x5);
    };
    fi.prototype._digest = function(e2) {
      return e2 === "hex" ? kf.toHex32(this.h, "big") : kf.split32(this.h, "big");
    };
  });
  Fl = T2((kk, P2) => {
    var Lf = Cr(), oR = Tf(), Nf = Cl(), sR = ar(), Or = Lf.sum32, hR = Lf.sum32_4, uR = Lf.sum32_5, lR = Nf.ch32, dR = Nf.maj32, cR = Nf.s0_256, pR = Nf.s1_256, vR = Nf.g0_256, bR = Nf.g1_256, D22 = oR.BlockHash, mR = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];
    function ai() {
      if (!(this instanceof ai))
        return new ai;
      D22.call(this), this.h = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225], this.k = mR, this.W = new Array(64);
    }
    Lf.inherits(ai, D22);
    P2.exports = ai;
    ai.blockSize = 512;
    ai.outSize = 256;
    ai.hmacStrength = 192;
    ai.padLength = 64;
    ai.prototype._update = function(e2, r2) {
      for (var o2 = this.W, f2 = 0;f2 < 16; f2++)
        o2[f2] = e2[r2 + f2];
      for (;f2 < o2.length; f2++)
        o2[f2] = hR(bR(o2[f2 - 2]), o2[f2 - 7], vR(o2[f2 - 15]), o2[f2 - 16]);
      var p2 = this.h[0], m32 = this.h[1], y3 = this.h[2], M3 = this.h[3], x5 = this.h[4], S2 = this.h[5], E4 = this.h[6], B5 = this.h[7];
      for (sR(this.k.length === o2.length), f2 = 0;f2 < o2.length; f2++) {
        var q = uR(B5, pR(x5), lR(x5, S2, E4), this.k[f2], o2[f2]), L2 = Or(cR(p2), dR(p2, m32, y3));
        B5 = E4, E4 = S2, S2 = x5, x5 = Or(M3, q), M3 = y3, y3 = m32, m32 = p2, p2 = Or(q, L2);
      }
      this.h[0] = Or(this.h[0], p2), this.h[1] = Or(this.h[1], m32), this.h[2] = Or(this.h[2], y3), this.h[3] = Or(this.h[3], M3), this.h[4] = Or(this.h[4], x5), this.h[5] = Or(this.h[5], S2), this.h[6] = Or(this.h[6], E4), this.h[7] = Or(this.h[7], B5);
    };
    ai.prototype._digest = function(e2) {
      return e2 === "hex" ? Lf.toHex32(this.h, "big") : Lf.split32(this.h, "big");
    };
  });
  F2 = T2((Lk, O22) => {
    var Ul = Cr(), C22 = Fl();
    function Bi() {
      if (!(this instanceof Bi))
        return new Bi;
      C22.call(this), this.h = [3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428];
    }
    Ul.inherits(Bi, C22);
    O22.exports = Bi;
    Bi.blockSize = 512;
    Bi.outSize = 224;
    Bi.hmacStrength = 192;
    Bi.padLength = 64;
    Bi.prototype._digest = function(e2) {
      return e2 === "hex" ? Ul.toHex32(this.h.slice(0, 7), "big") : Ul.split32(this.h.slice(0, 7), "big");
    };
  });
  Wl = T2((Nk, W22) => {
    var ir = Cr(), gR = Tf(), yR = ar(), oi = ir.rotr64_hi, si = ir.rotr64_lo, U2 = ir.shr64_hi, z22 = ir.shr64_lo, Ji = ir.sum64, zl = ir.sum64_hi, Hl = ir.sum64_lo, wR = ir.sum64_4_hi, MR = ir.sum64_4_lo, _R = ir.sum64_5_hi, xR = ir.sum64_5_lo, H22 = gR.BlockHash, SR = [1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591];
    function Fr() {
      if (!(this instanceof Fr))
        return new Fr;
      H22.call(this), this.h = [1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723, 2773480762, 1595750129, 1359893119, 2917565137, 2600822924, 725511199, 528734635, 4215389547, 1541459225, 327033209], this.k = SR, this.W = new Array(160);
    }
    ir.inherits(Fr, H22);
    W22.exports = Fr;
    Fr.blockSize = 1024;
    Fr.outSize = 512;
    Fr.hmacStrength = 192;
    Fr.padLength = 128;
    Fr.prototype._prepareBlock = function(e2, r2) {
      for (var o2 = this.W, f2 = 0;f2 < 32; f2++)
        o2[f2] = e2[r2 + f2];
      for (;f2 < o2.length; f2 += 2) {
        var p2 = DR(o2[f2 - 4], o2[f2 - 3]), m32 = PR(o2[f2 - 4], o2[f2 - 3]), y3 = o2[f2 - 14], M3 = o2[f2 - 13], x5 = LR(o2[f2 - 30], o2[f2 - 29]), S2 = NR(o2[f2 - 30], o2[f2 - 29]), E4 = o2[f2 - 32], B5 = o2[f2 - 31];
        o2[f2] = wR(p2, m32, y3, M3, x5, S2, E4, B5), o2[f2 + 1] = MR(p2, m32, y3, M3, x5, S2, E4, B5);
      }
    };
    Fr.prototype._update = function(e2, r2) {
      this._prepareBlock(e2, r2);
      var o2 = this.W, f2 = this.h[0], p2 = this.h[1], m32 = this.h[2], y3 = this.h[3], M3 = this.h[4], x5 = this.h[5], S2 = this.h[6], E4 = this.h[7], B5 = this.h[8], q = this.h[9], L2 = this.h[10], ge = this.h[11], _e = this.h[12], N4 = this.h[13], we = this.h[14], ye = this.h[15];
      yR(this.k.length === o2.length);
      for (var xe = 0;xe < o2.length; xe += 2) {
        var Re = we, Ee = ye, Ae = TR(B5, q), P = kR(B5, q), Se = ER(B5, q, L2, ge, _e, N4), v32 = AR(B5, q, L2, ge, _e, N4), i = this.k[xe], a2 = this.k[xe + 1], h3 = o2[xe], s3 = o2[xe + 1], u4 = _R(Re, Ee, Ae, P, Se, v32, i, a2, h3, s3), c2 = xR(Re, Ee, Ae, P, Se, v32, i, a2, h3, s3);
        Re = qR(f2, p2), Ee = IR(f2, p2), Ae = RR(f2, p2, m32, y3, M3, x5), P = BR(f2, p2, m32, y3, M3, x5);
        var b3 = zl(Re, Ee, Ae, P), l3 = Hl(Re, Ee, Ae, P);
        we = _e, ye = N4, _e = L2, N4 = ge, L2 = B5, ge = q, B5 = zl(S2, E4, u4, c2), q = Hl(E4, E4, u4, c2), S2 = M3, E4 = x5, M3 = m32, x5 = y3, m32 = f2, y3 = p2, f2 = zl(u4, c2, b3, l3), p2 = Hl(u4, c2, b3, l3);
      }
      Ji(this.h, 0, f2, p2), Ji(this.h, 2, m32, y3), Ji(this.h, 4, M3, x5), Ji(this.h, 6, S2, E4), Ji(this.h, 8, B5, q), Ji(this.h, 10, L2, ge), Ji(this.h, 12, _e, N4), Ji(this.h, 14, we, ye);
    };
    Fr.prototype._digest = function(e2) {
      return e2 === "hex" ? ir.toHex32(this.h, "big") : ir.split32(this.h, "big");
    };
    function ER(t3, e2, r2, o2, f2) {
      var p2 = t3 & r2 ^ ~t3 & f2;
      return p2 < 0 && (p2 += 4294967296), p2;
    }
    function AR(t3, e2, r2, o2, f2, p2) {
      var m32 = e2 & o2 ^ ~e2 & p2;
      return m32 < 0 && (m32 += 4294967296), m32;
    }
    function RR(t3, e2, r2, o2, f2) {
      var p2 = t3 & r2 ^ t3 & f2 ^ r2 & f2;
      return p2 < 0 && (p2 += 4294967296), p2;
    }
    function BR(t3, e2, r2, o2, f2, p2) {
      var m32 = e2 & o2 ^ e2 & p2 ^ o2 & p2;
      return m32 < 0 && (m32 += 4294967296), m32;
    }
    function qR(t3, e2) {
      var r2 = oi(t3, e2, 28), o2 = oi(e2, t3, 2), f2 = oi(e2, t3, 7), p2 = r2 ^ o2 ^ f2;
      return p2 < 0 && (p2 += 4294967296), p2;
    }
    function IR(t3, e2) {
      var r2 = si(t3, e2, 28), o2 = si(e2, t3, 2), f2 = si(e2, t3, 7), p2 = r2 ^ o2 ^ f2;
      return p2 < 0 && (p2 += 4294967296), p2;
    }
    function TR(t3, e2) {
      var r2 = oi(t3, e2, 14), o2 = oi(t3, e2, 18), f2 = oi(e2, t3, 9), p2 = r2 ^ o2 ^ f2;
      return p2 < 0 && (p2 += 4294967296), p2;
    }
    function kR(t3, e2) {
      var r2 = si(t3, e2, 14), o2 = si(t3, e2, 18), f2 = si(e2, t3, 9), p2 = r2 ^ o2 ^ f2;
      return p2 < 0 && (p2 += 4294967296), p2;
    }
    function LR(t3, e2) {
      var r2 = oi(t3, e2, 1), o2 = oi(t3, e2, 8), f2 = U2(t3, e2, 7), p2 = r2 ^ o2 ^ f2;
      return p2 < 0 && (p2 += 4294967296), p2;
    }
    function NR(t3, e2) {
      var r2 = si(t3, e2, 1), o2 = si(t3, e2, 8), f2 = z22(t3, e2, 7), p2 = r2 ^ o2 ^ f2;
      return p2 < 0 && (p2 += 4294967296), p2;
    }
    function DR(t3, e2) {
      var r2 = oi(t3, e2, 19), o2 = oi(e2, t3, 29), f2 = U2(t3, e2, 6), p2 = r2 ^ o2 ^ f2;
      return p2 < 0 && (p2 += 4294967296), p2;
    }
    function PR(t3, e2) {
      var r2 = si(t3, e2, 19), o2 = si(e2, t3, 29), f2 = z22(t3, e2, 6), p2 = r2 ^ o2 ^ f2;
      return p2 < 0 && (p2 += 4294967296), p2;
    }
  });
  Z22 = T2((Dk, j22) => {
    var Kl = Cr(), K2 = Wl();
    function qi() {
      if (!(this instanceof qi))
        return new qi;
      K2.call(this), this.h = [3418070365, 3238371032, 1654270250, 914150663, 2438529370, 812702999, 355462360, 4144912697, 1731405415, 4290775857, 2394180231, 1750603025, 3675008525, 1694076839, 1203062813, 3204075428];
    }
    Kl.inherits(qi, K2);
    j22.exports = qi;
    qi.blockSize = 1024;
    qi.outSize = 384;
    qi.hmacStrength = 192;
    qi.padLength = 128;
    qi.prototype._digest = function(e2) {
      return e2 === "hex" ? Kl.toHex32(this.h.slice(0, 12), "big") : Kl.split32(this.h.slice(0, 12), "big");
    };
  });
  V2 = T2((Df) => {
    Df.sha1 = N22();
    Df.sha224 = F2();
    Df.sha256 = Fl();
    Df.sha384 = Z22();
    Df.sha512 = Wl();
  });
  Q22 = T2((J2) => {
    var On = Cr(), CR = Tf(), Qs = On.rotl32, $22 = On.sum32, Ua = On.sum32_3, G22 = On.sum32_4, X22 = CR.BlockHash;
    function hi() {
      if (!(this instanceof hi))
        return new hi;
      X22.call(this), this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520], this.endian = "little";
    }
    On.inherits(hi, X22);
    J2.ripemd160 = hi;
    hi.blockSize = 512;
    hi.outSize = 160;
    hi.hmacStrength = 192;
    hi.padLength = 64;
    hi.prototype._update = function(e2, r2) {
      for (var o2 = this.h[0], f2 = this.h[1], p2 = this.h[2], m32 = this.h[3], y3 = this.h[4], M3 = o2, x5 = f2, S2 = p2, E4 = m32, B5 = y3, q = 0;q < 80; q++) {
        var L2 = $22(Qs(G22(o2, Y2(q, f2, p2, m32), e2[UR[q] + r2], OR(q)), HR[q]), y3);
        o2 = y3, y3 = m32, m32 = Qs(p2, 10), p2 = f2, f2 = L2, L2 = $22(Qs(G22(M3, Y2(79 - q, x5, S2, E4), e2[zR[q] + r2], FR(q)), WR[q]), B5), M3 = B5, B5 = E4, E4 = Qs(S2, 10), S2 = x5, x5 = L2;
      }
      L2 = Ua(this.h[1], p2, E4), this.h[1] = Ua(this.h[2], m32, B5), this.h[2] = Ua(this.h[3], y3, M3), this.h[3] = Ua(this.h[4], o2, x5), this.h[4] = Ua(this.h[0], f2, S2), this.h[0] = L2;
    };
    hi.prototype._digest = function(e2) {
      return e2 === "hex" ? On.toHex32(this.h, "little") : On.split32(this.h, "little");
    };
    function Y2(t3, e2, r2, o2) {
      return t3 <= 15 ? e2 ^ r2 ^ o2 : t3 <= 31 ? e2 & r2 | ~e2 & o2 : t3 <= 47 ? (e2 | ~r2) ^ o2 : t3 <= 63 ? e2 & o2 | r2 & ~o2 : e2 ^ (r2 | ~o2);
    }
    function OR(t3) {
      return t3 <= 15 ? 0 : t3 <= 31 ? 1518500249 : t3 <= 47 ? 1859775393 : t3 <= 63 ? 2400959708 : 2840853838;
    }
    function FR(t3) {
      return t3 <= 15 ? 1352829926 : t3 <= 31 ? 1548603684 : t3 <= 47 ? 1836072691 : t3 <= 63 ? 2053994217 : 0;
    }
    var UR = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13], zR = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11], HR = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6], WR = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
  });
  ty = T2((Ok, ey) => {
    var KR = Cr(), jR = ar();
    function Pf(t3, e2, r2) {
      if (!(this instanceof Pf))
        return new Pf(t3, e2, r2);
      this.Hash = t3, this.blockSize = t3.blockSize / 8, this.outSize = t3.outSize / 8, this.inner = null, this.outer = null, this._init(KR.toArray(e2, r2));
    }
    ey.exports = Pf;
    Pf.prototype._init = function(e2) {
      e2.length > this.blockSize && (e2 = new this.Hash().update(e2).digest()), jR(e2.length <= this.blockSize);
      for (var r2 = e2.length;r2 < this.blockSize; r2++)
        e2.push(0);
      for (r2 = 0;r2 < e2.length; r2++)
        e2[r2] ^= 54;
      for (this.inner = new this.Hash().update(e2), r2 = 0;r2 < e2.length; r2++)
        e2[r2] ^= 106;
      this.outer = new this.Hash().update(e2);
    };
    Pf.prototype.update = function(e2, r2) {
      return this.inner.update(e2, r2), this;
    };
    Pf.prototype.digest = function(e2) {
      return this.outer.update(this.inner.digest()), this.outer.digest(e2);
    };
  });
  e02 = T2((ry) => {
    var Kt = ry;
    Kt.utils = Cr();
    Kt.common = Tf();
    Kt.sha = V2();
    Kt.ripemd = Q22();
    Kt.hmac = ty();
    Kt.sha1 = Kt.sha.sha1;
    Kt.sha256 = Kt.sha.sha256;
    Kt.sha224 = Kt.sha.sha224;
    Kt.sha384 = Kt.sha.sha384;
    Kt.sha512 = Kt.sha.sha512;
    Kt.ripemd160 = Kt.ripemd.ripemd160;
  });
  ny = T2((Uk, iy) => {
    iy.exports = { doubles: { step: 4, points: [["e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a", "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"], ["8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508", "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"], ["175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739", "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"], ["363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640", "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"], ["8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c", "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"], ["723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda", "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"], ["eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa", "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"], ["100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0", "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"], ["e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d", "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"], ["feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d", "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"], ["da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1", "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"], ["53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0", "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"], ["8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047", "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"], ["385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862", "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"], ["6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7", "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"], ["3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd", "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"], ["85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83", "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"], ["948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a", "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"], ["6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8", "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"], ["e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d", "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"], ["e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725", "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"], ["213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754", "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"], ["4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c", "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"], ["fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6", "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"], ["76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39", "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"], ["c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891", "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"], ["d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b", "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"], ["b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03", "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"], ["e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d", "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"], ["a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070", "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"], ["90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4", "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"], ["8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da", "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"], ["e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11", "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"], ["8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e", "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"], ["e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41", "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"], ["b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef", "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"], ["d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8", "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"], ["324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d", "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"], ["4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96", "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"], ["9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd", "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"], ["6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5", "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"], ["a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266", "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"], ["7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71", "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"], ["928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac", "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"], ["85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751", "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"], ["ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e", "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"], ["827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241", "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"], ["eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3", "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"], ["e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f", "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"], ["1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19", "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"], ["146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be", "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"], ["fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9", "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"], ["da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2", "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"], ["a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13", "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"], ["174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c", "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"], ["959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba", "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"], ["d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151", "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"], ["64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073", "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"], ["8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458", "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"], ["13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b", "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"], ["bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366", "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"], ["8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa", "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"], ["8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0", "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"], ["dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787", "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"], ["f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e", "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"]] }, naf: { wnd: 7, points: [["f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9", "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"], ["2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4", "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"], ["5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc", "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"], ["acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe", "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"], ["774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb", "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"], ["f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8", "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"], ["d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e", "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"], ["defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34", "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"], ["2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c", "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"], ["352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5", "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"], ["2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f", "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"], ["9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714", "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"], ["daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729", "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"], ["c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db", "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"], ["6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4", "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"], ["1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5", "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"], ["605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479", "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"], ["62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d", "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"], ["80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f", "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"], ["7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb", "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"], ["d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9", "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"], ["49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963", "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"], ["77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74", "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"], ["f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530", "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"], ["463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b", "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"], ["f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247", "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"], ["caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1", "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"], ["2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120", "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"], ["7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435", "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"], ["754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18", "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"], ["e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8", "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"], ["186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb", "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"], ["df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f", "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"], ["5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143", "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"], ["290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba", "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"], ["af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45", "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"], ["766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a", "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"], ["59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e", "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"], ["f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8", "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"], ["7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c", "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"], ["948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519", "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"], ["7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab", "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"], ["3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca", "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"], ["d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf", "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"], ["1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610", "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"], ["733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4", "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"], ["15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c", "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"], ["a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940", "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"], ["e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980", "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"], ["311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3", "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"], ["34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf", "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"], ["f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63", "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"], ["d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448", "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"], ["32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf", "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"], ["7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5", "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"], ["ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6", "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"], ["16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5", "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"], ["eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99", "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"], ["78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51", "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"], ["494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5", "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"], ["a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5", "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"], ["c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997", "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"], ["841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881", "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"], ["5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5", "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"], ["36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66", "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"], ["336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726", "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"], ["8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede", "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"], ["1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94", "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"], ["85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31", "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"], ["29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51", "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"], ["a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252", "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"], ["4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5", "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"], ["d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b", "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"], ["ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4", "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"], ["af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f", "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"], ["e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889", "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"], ["591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246", "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"], ["11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984", "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"], ["3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a", "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"], ["cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030", "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"], ["c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197", "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"], ["c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593", "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"], ["a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef", "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"], ["347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38", "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"], ["da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a", "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"], ["c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111", "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"], ["4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502", "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"], ["3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea", "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"], ["cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26", "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"], ["b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986", "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"], ["d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e", "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"], ["48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4", "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"], ["dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda", "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"], ["6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859", "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"], ["e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f", "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"], ["eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c", "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"], ["13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942", "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"], ["ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a", "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"], ["b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80", "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"], ["ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d", "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"], ["8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1", "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"], ["52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63", "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"], ["e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352", "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"], ["7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193", "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"], ["5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00", "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"], ["32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58", "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"], ["e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7", "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"], ["8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8", "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"], ["4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e", "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"], ["3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d", "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"], ["674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b", "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"], ["d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f", "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"], ["30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6", "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"], ["be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297", "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"], ["93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a", "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"], ["b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c", "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"], ["d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52", "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"], ["d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb", "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"], ["463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065", "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"], ["7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917", "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"], ["74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9", "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"], ["30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3", "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"], ["9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57", "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"], ["176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66", "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"], ["75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8", "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"], ["809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721", "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"], ["1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180", "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"]] } };
  });
  t02 = T2((oy) => {
    var Zl = oy, Qi = e02(), jl = Pl(), ZR = or(), fy = ZR.assert;
    function ay(t3) {
      t3.type === "short" ? this.curve = new jl.short(t3) : t3.type === "edwards" ? this.curve = new jl.edwards(t3) : this.curve = new jl.mont(t3), this.g = this.curve.g, this.n = this.curve.n, this.hash = t3.hash, fy(this.g.validate(), "Invalid curve"), fy(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
    }
    Zl.PresetCurve = ay;
    function en(t3, e2) {
      Object.defineProperty(Zl, t3, { configurable: true, enumerable: true, get: function() {
        var r2 = new ay(e2);
        return Object.defineProperty(Zl, t3, { configurable: true, enumerable: true, value: r2 }), r2;
      } });
    }
    en("p192", { type: "short", prime: "p192", p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff", a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc", b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1", n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831", hash: Qi.sha256, gRed: false, g: ["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012", "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"] });
    en("p224", { type: "short", prime: "p224", p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001", a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe", b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4", n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d", hash: Qi.sha256, gRed: false, g: ["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21", "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"] });
    en("p256", { type: "short", prime: null, p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff", a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc", b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b", n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551", hash: Qi.sha256, gRed: false, g: ["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296", "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"] });
    en("p384", { type: "short", prime: null, p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff", a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc", b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef", n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973", hash: Qi.sha384, gRed: false, g: ["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7", "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"] });
    en("p521", { type: "short", prime: null, p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff", a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc", b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00", n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409", hash: Qi.sha512, gRed: false, g: ["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66", "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"] });
    en("curve25519", { type: "mont", prime: "p25519", p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed", a: "76d06", b: "1", n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed", hash: Qi.sha256, gRed: false, g: ["9"] });
    en("ed25519", { type: "edwards", prime: "p25519", p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed", a: "-1", c: "1", d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3", n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed", hash: Qi.sha256, gRed: false, g: ["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a", "6666666666666666666666666666666666666666666666666666666666666658"] });
    var Vl;
    try {
      Vl = ny();
    } catch {
      Vl = undefined;
    }
    en("secp256k1", { type: "short", prime: "k256", p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f", a: "0", b: "7", n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141", h: "1", hash: Qi.sha256, beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee", lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72", basis: [{ a: "3086d221a7d46bcde86c90e49284eb15", b: "-e4437ed6010e88286f547fa90abfe4c3" }, { a: "114ca50f7a8e2f3f657c1108d9d44cfd8", b: "3086d221a7d46bcde86c90e49284eb15" }], gRed: false, g: ["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8", Vl] });
  });
  uy = T2((Hk, hy) => {
    var VR = e02(), Fn = Nl(), sy = ar();
    function tn(t3) {
      if (!(this instanceof tn))
        return new tn(t3);
      this.hash = t3.hash, this.predResist = !!t3.predResist, this.outLen = this.hash.outSize, this.minEntropy = t3.minEntropy || this.hash.hmacStrength, this._reseed = null, this.reseedInterval = null, this.K = null, this.V = null;
      var e2 = Fn.toArray(t3.entropy, t3.entropyEnc || "hex"), r2 = Fn.toArray(t3.nonce, t3.nonceEnc || "hex"), o2 = Fn.toArray(t3.pers, t3.persEnc || "hex");
      sy(e2.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._init(e2, r2, o2);
    }
    hy.exports = tn;
    tn.prototype._init = function(e2, r2, o2) {
      var f2 = e2.concat(r2).concat(o2);
      this.K = new Array(this.outLen / 8), this.V = new Array(this.outLen / 8);
      for (var p2 = 0;p2 < this.V.length; p2++)
        this.K[p2] = 0, this.V[p2] = 1;
      this._update(f2), this._reseed = 1, this.reseedInterval = 281474976710656;
    };
    tn.prototype._hmac = function() {
      return new VR.hmac(this.hash, this.K);
    };
    tn.prototype._update = function(e2) {
      var r2 = this._hmac().update(this.V).update([0]);
      e2 && (r2 = r2.update(e2)), this.K = r2.digest(), this.V = this._hmac().update(this.V).digest(), e2 && (this.K = this._hmac().update(this.V).update([1]).update(e2).digest(), this.V = this._hmac().update(this.V).digest());
    };
    tn.prototype.reseed = function(e2, r2, o2, f2) {
      typeof r2 != "string" && (f2 = o2, o2 = r2, r2 = null), e2 = Fn.toArray(e2, r2), o2 = Fn.toArray(o2, f2), sy(e2.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._update(e2.concat(o2 || [])), this._reseed = 1;
    };
    tn.prototype.generate = function(e2, r2, o2, f2) {
      if (this._reseed > this.reseedInterval)
        throw new Error("Reseed is required");
      typeof r2 != "string" && (f2 = o2, o2 = r2, r2 = null), o2 && (o2 = Fn.toArray(o2, f2 || "hex"), this._update(o2));
      for (var p2 = [];p2.length < e2; )
        this.V = this._hmac().update(this.V).digest(), p2 = p2.concat(this.V);
      var m32 = p2.slice(0, e2);
      return this._update(o2), this._reseed++, Fn.encode(m32, r2);
    };
  });
  dy = T2((Wk, ly) => {
    var $R = ri(), GR = or(), $l = GR.assert;
    function Gt(t3, e2) {
      this.ec = t3, this.priv = null, this.pub = null, e2.priv && this._importPrivate(e2.priv, e2.privEnc), e2.pub && this._importPublic(e2.pub, e2.pubEnc);
    }
    ly.exports = Gt;
    Gt.fromPublic = function(e2, r2, o2) {
      return r2 instanceof Gt ? r2 : new Gt(e2, { pub: r2, pubEnc: o2 });
    };
    Gt.fromPrivate = function(e2, r2, o2) {
      return r2 instanceof Gt ? r2 : new Gt(e2, { priv: r2, privEnc: o2 });
    };
    Gt.prototype.validate = function() {
      var e2 = this.getPublic();
      return e2.isInfinity() ? { result: false, reason: "Invalid public key" } : e2.validate() ? e2.mul(this.ec.curve.n).isInfinity() ? { result: true, reason: null } : { result: false, reason: "Public key * N != O" } : { result: false, reason: "Public key is not a point" };
    };
    Gt.prototype.getPublic = function(e2, r2) {
      return typeof e2 == "string" && (r2 = e2, e2 = null), this.pub || (this.pub = this.ec.g.mul(this.priv)), r2 ? this.pub.encode(r2, e2) : this.pub;
    };
    Gt.prototype.getPrivate = function(e2) {
      return e2 === "hex" ? this.priv.toString(16, 2) : this.priv;
    };
    Gt.prototype._importPrivate = function(e2, r2) {
      this.priv = new $R(e2, r2 || 16), this.priv = this.priv.umod(this.ec.curve.n);
    };
    Gt.prototype._importPublic = function(e2, r2) {
      if (e2.x || e2.y) {
        this.ec.curve.type === "mont" ? $l(e2.x, "Need x coordinate") : (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") && $l(e2.x && e2.y, "Need both x and y coordinate"), this.pub = this.ec.curve.point(e2.x, e2.y);
        return;
      }
      this.pub = this.ec.curve.decodePoint(e2, r2);
    };
    Gt.prototype.derive = function(e2) {
      return e2.validate() || $l(e2.validate(), "public point not validated"), e2.mul(this.priv).getX();
    };
    Gt.prototype.sign = function(e2, r2, o2) {
      return this.ec.sign(e2, this, r2, o2);
    };
    Gt.prototype.verify = function(e2, r2) {
      return this.ec.verify(e2, r2, this);
    };
    Gt.prototype.inspect = function() {
      return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
    };
  });
  vy = T2((Kk, py) => {
    var r02 = ri(), Xl = or(), YR = Xl.assert;
    function i02(t3, e2) {
      if (t3 instanceof i02)
        return t3;
      this._importDER(t3, e2) || (YR(t3.r && t3.s, "Signature without r or s"), this.r = new r02(t3.r, 16), this.s = new r02(t3.s, 16), t3.recoveryParam === undefined ? this.recoveryParam = null : this.recoveryParam = t3.recoveryParam);
    }
    py.exports = i02;
    function XR() {
      this.place = 0;
    }
    function Gl(t3, e2) {
      var r2 = t3[e2.place++];
      if (!(r2 & 128))
        return r2;
      var o2 = r2 & 15;
      if (o2 === 0 || o2 > 4)
        return false;
      for (var f2 = 0, p2 = 0, m32 = e2.place;p2 < o2; p2++, m32++)
        f2 <<= 8, f2 |= t3[m32], f2 >>>= 0;
      return f2 <= 127 ? false : (e2.place = m32, f2);
    }
    function cy(t3) {
      for (var e2 = 0, r2 = t3.length - 1;!t3[e2] && !(t3[e2 + 1] & 128) && e2 < r2; )
        e2++;
      return e2 === 0 ? t3 : t3.slice(e2);
    }
    i02.prototype._importDER = function(e2, r2) {
      e2 = Xl.toArray(e2, r2);
      var o2 = new XR;
      if (e2[o2.place++] !== 48)
        return false;
      var f2 = Gl(e2, o2);
      if (f2 === false || f2 + o2.place !== e2.length || e2[o2.place++] !== 2)
        return false;
      var p2 = Gl(e2, o2);
      if (p2 === false)
        return false;
      var m32 = e2.slice(o2.place, p2 + o2.place);
      if (o2.place += p2, e2[o2.place++] !== 2)
        return false;
      var y3 = Gl(e2, o2);
      if (y3 === false || e2.length !== y3 + o2.place)
        return false;
      var M3 = e2.slice(o2.place, y3 + o2.place);
      if (m32[0] === 0)
        if (m32[1] & 128)
          m32 = m32.slice(1);
        else
          return false;
      if (M3[0] === 0)
        if (M3[1] & 128)
          M3 = M3.slice(1);
        else
          return false;
      return this.r = new r02(m32), this.s = new r02(M3), this.recoveryParam = null, true;
    };
    function Yl(t3, e2) {
      if (e2 < 128) {
        t3.push(e2);
        return;
      }
      var r2 = 1 + (Math.log(e2) / Math.LN2 >>> 3);
      for (t3.push(r2 | 128);--r2; )
        t3.push(e2 >>> (r2 << 3) & 255);
      t3.push(e2);
    }
    i02.prototype.toDER = function(e2) {
      var r2 = this.r.toArray(), o2 = this.s.toArray();
      for (r2[0] & 128 && (r2 = [0].concat(r2)), o2[0] & 128 && (o2 = [0].concat(o2)), r2 = cy(r2), o2 = cy(o2);!o2[0] && !(o2[1] & 128); )
        o2 = o2.slice(1);
      var f2 = [2];
      Yl(f2, r2.length), f2 = f2.concat(r2), f2.push(2), Yl(f2, o2.length);
      var p2 = f2.concat(o2), m32 = [48];
      return Yl(m32, p2.length), m32 = m32.concat(p2), Xl.encode(m32, e2);
    };
  });
  yy = T2((jk, gy) => {
    var Un = ri(), by = uy(), JR = or(), Jl = t02(), QR = As(), my = JR.assert, Ql = dy(), n02 = vy();
    function Sr(t3) {
      if (!(this instanceof Sr))
        return new Sr(t3);
      typeof t3 == "string" && (my(Object.prototype.hasOwnProperty.call(Jl, t3), "Unknown curve " + t3), t3 = Jl[t3]), t3 instanceof Jl.PresetCurve && (t3 = { curve: t3 }), this.curve = t3.curve.curve, this.n = this.curve.n, this.nh = this.n.ushrn(1), this.g = this.curve.g, this.g = t3.curve.g, this.g.precompute(t3.curve.n.bitLength() + 1), this.hash = t3.hash || t3.curve.hash;
    }
    gy.exports = Sr;
    Sr.prototype.keyPair = function(e2) {
      return new Ql(this, e2);
    };
    Sr.prototype.keyFromPrivate = function(e2, r2) {
      return Ql.fromPrivate(this, e2, r2);
    };
    Sr.prototype.keyFromPublic = function(e2, r2) {
      return Ql.fromPublic(this, e2, r2);
    };
    Sr.prototype.genKeyPair = function(e2) {
      e2 || (e2 = {});
      for (var r2 = new by({ hash: this.hash, pers: e2.pers, persEnc: e2.persEnc || "utf8", entropy: e2.entropy || QR(this.hash.hmacStrength), entropyEnc: e2.entropy && e2.entropyEnc || "utf8", nonce: this.n.toArray() }), o2 = this.n.byteLength(), f2 = this.n.sub(new Un(2));; ) {
        var p2 = new Un(r2.generate(o2));
        if (!(p2.cmp(f2) > 0))
          return p2.iaddn(1), this.keyFromPrivate(p2);
      }
    };
    Sr.prototype._truncateToN = function(e2, r2) {
      var o2 = e2.byteLength() * 8 - this.n.bitLength();
      return o2 > 0 && (e2 = e2.ushrn(o2)), !r2 && e2.cmp(this.n) >= 0 ? e2.sub(this.n) : e2;
    };
    Sr.prototype.sign = function(e2, r2, o2, f2) {
      typeof o2 == "object" && (f2 = o2, o2 = null), f2 || (f2 = {}), r2 = this.keyFromPrivate(r2, o2), e2 = this._truncateToN(new Un(e2, 16));
      for (var p2 = this.n.byteLength(), m32 = r2.getPrivate().toArray("be", p2), y3 = e2.toArray("be", p2), M3 = new by({ hash: this.hash, entropy: m32, nonce: y3, pers: f2.pers, persEnc: f2.persEnc || "utf8" }), x5 = this.n.sub(new Un(1)), S2 = 0;; S2++) {
        var E4 = f2.k ? f2.k(S2) : new Un(M3.generate(this.n.byteLength()));
        if (E4 = this._truncateToN(E4, true), !(E4.cmpn(1) <= 0 || E4.cmp(x5) >= 0)) {
          var B5 = this.g.mul(E4);
          if (!B5.isInfinity()) {
            var q = B5.getX(), L2 = q.umod(this.n);
            if (L2.cmpn(0) !== 0) {
              var ge = E4.invm(this.n).mul(L2.mul(r2.getPrivate()).iadd(e2));
              if (ge = ge.umod(this.n), ge.cmpn(0) !== 0) {
                var _e = (B5.getY().isOdd() ? 1 : 0) | (q.cmp(L2) !== 0 ? 2 : 0);
                return f2.canonical && ge.cmp(this.nh) > 0 && (ge = this.n.sub(ge), _e ^= 1), new n02({ r: L2, s: ge, recoveryParam: _e });
              }
            }
          }
        }
      }
    };
    Sr.prototype.verify = function(e2, r2, o2, f2) {
      e2 = this._truncateToN(new Un(e2, 16)), o2 = this.keyFromPublic(o2, f2), r2 = new n02(r2, "hex");
      var { r: p2, s: m32 } = r2;
      if (p2.cmpn(1) < 0 || p2.cmp(this.n) >= 0 || m32.cmpn(1) < 0 || m32.cmp(this.n) >= 0)
        return false;
      var y3 = m32.invm(this.n), M3 = y3.mul(e2).umod(this.n), x5 = y3.mul(p2).umod(this.n), S2;
      return this.curve._maxwellTrick ? (S2 = this.g.jmulAdd(M3, o2.getPublic(), x5), S2.isInfinity() ? false : S2.eqXToP(p2)) : (S2 = this.g.mulAdd(M3, o2.getPublic(), x5), S2.isInfinity() ? false : S2.getX().umod(this.n).cmp(p2) === 0);
    };
    Sr.prototype.recoverPubKey = function(t3, e2, r2, o2) {
      my((3 & r2) === r2, "The recovery param is more than two bits"), e2 = new n02(e2, o2);
      var f2 = this.n, p2 = new Un(t3), m32 = e2.r, y3 = e2.s, M3 = r2 & 1, x5 = r2 >> 1;
      if (m32.cmp(this.curve.p.umod(this.curve.n)) >= 0 && x5)
        throw new Error("Unable to find sencond key candinate");
      x5 ? m32 = this.curve.pointFromX(m32.add(this.curve.n), M3) : m32 = this.curve.pointFromX(m32, M3);
      var S2 = e2.r.invm(f2), E4 = f2.sub(p2).mul(S2).umod(f2), B5 = y3.mul(S2).umod(f2);
      return this.g.mulAdd(E4, m32, B5);
    };
    Sr.prototype.getKeyRecoveryParam = function(t3, e2, r2, o2) {
      if (e2 = new n02(e2, o2), e2.recoveryParam !== null)
        return e2.recoveryParam;
      for (var f2 = 0;f2 < 4; f2++) {
        var p2;
        try {
          p2 = this.recoverPubKey(t3, e2, f2);
        } catch {
          continue;
        }
        if (p2.eq(r2))
          return f2;
      }
      throw new Error("Unable to find valid recovery factor");
    };
  });
  xy = T2((Zk, _y) => {
    var za = or(), My = za.assert, wy = za.parseBytes, Cf = za.cachedProperty;
    function Ft(t3, e2) {
      this.eddsa = t3, this._secret = wy(e2.secret), t3.isPoint(e2.pub) ? this._pub = e2.pub : this._pubBytes = wy(e2.pub);
    }
    Ft.fromPublic = function(e2, r2) {
      return r2 instanceof Ft ? r2 : new Ft(e2, { pub: r2 });
    };
    Ft.fromSecret = function(e2, r2) {
      return r2 instanceof Ft ? r2 : new Ft(e2, { secret: r2 });
    };
    Ft.prototype.secret = function() {
      return this._secret;
    };
    Cf(Ft, "pubBytes", function() {
      return this.eddsa.encodePoint(this.pub());
    });
    Cf(Ft, "pub", function() {
      return this._pubBytes ? this.eddsa.decodePoint(this._pubBytes) : this.eddsa.g.mul(this.priv());
    });
    Cf(Ft, "privBytes", function() {
      var e2 = this.eddsa, r2 = this.hash(), o2 = e2.encodingLength - 1, f2 = r2.slice(0, e2.encodingLength);
      return f2[0] &= 248, f2[o2] &= 127, f2[o2] |= 64, f2;
    });
    Cf(Ft, "priv", function() {
      return this.eddsa.decodeInt(this.privBytes());
    });
    Cf(Ft, "hash", function() {
      return this.eddsa.hash().update(this.secret()).digest();
    });
    Cf(Ft, "messagePrefix", function() {
      return this.hash().slice(this.eddsa.encodingLength);
    });
    Ft.prototype.sign = function(e2) {
      return My(this._secret, "KeyPair can only verify"), this.eddsa.sign(e2, this);
    };
    Ft.prototype.verify = function(e2, r2) {
      return this.eddsa.verify(e2, r2, this);
    };
    Ft.prototype.getSecret = function(e2) {
      return My(this._secret, "KeyPair is public only"), za.encode(this.secret(), e2);
    };
    Ft.prototype.getPublic = function(e2) {
      return za.encode(this.pubBytes(), e2);
    };
    _y.exports = Ft;
  });
  Ey = T2((Vk, Sy) => {
    var eB = ri(), f02 = or(), tB = f02.assert, a02 = f02.cachedProperty, rB = f02.parseBytes;
    function zn(t3, e2) {
      this.eddsa = t3, typeof e2 != "object" && (e2 = rB(e2)), Array.isArray(e2) && (e2 = { R: e2.slice(0, t3.encodingLength), S: e2.slice(t3.encodingLength) }), tB(e2.R && e2.S, "Signature without R or S"), t3.isPoint(e2.R) && (this._R = e2.R), e2.S instanceof eB && (this._S = e2.S), this._Rencoded = Array.isArray(e2.R) ? e2.R : e2.Rencoded, this._Sencoded = Array.isArray(e2.S) ? e2.S : e2.Sencoded;
    }
    a02(zn, "S", function() {
      return this.eddsa.decodeInt(this.Sencoded());
    });
    a02(zn, "R", function() {
      return this.eddsa.decodePoint(this.Rencoded());
    });
    a02(zn, "Rencoded", function() {
      return this.eddsa.encodePoint(this.R());
    });
    a02(zn, "Sencoded", function() {
      return this.eddsa.encodeInt(this.S());
    });
    zn.prototype.toBytes = function() {
      return this.Rencoded().concat(this.Sencoded());
    };
    zn.prototype.toHex = function() {
      return f02.encode(this.toBytes(), "hex").toUpperCase();
    };
    Sy.exports = zn;
  });
  Iy = T2(($k, qy) => {
    var iB = e02(), nB = t02(), Of = or(), fB = Of.assert, Ry = Of.parseBytes, By = xy(), Ay = Ey();
    function nr(t3) {
      if (fB(t3 === "ed25519", "only tested with ed25519 so far"), !(this instanceof nr))
        return new nr(t3);
      t3 = nB[t3].curve, this.curve = t3, this.g = t3.g, this.g.precompute(t3.n.bitLength() + 1), this.pointClass = t3.point().constructor, this.encodingLength = Math.ceil(t3.n.bitLength() / 8), this.hash = iB.sha512;
    }
    qy.exports = nr;
    nr.prototype.sign = function(e2, r2) {
      e2 = Ry(e2);
      var o2 = this.keyFromSecret(r2), f2 = this.hashInt(o2.messagePrefix(), e2), p2 = this.g.mul(f2), m32 = this.encodePoint(p2), y3 = this.hashInt(m32, o2.pubBytes(), e2).mul(o2.priv()), M3 = f2.add(y3).umod(this.curve.n);
      return this.makeSignature({ R: p2, S: M3, Rencoded: m32 });
    };
    nr.prototype.verify = function(e2, r2, o2) {
      e2 = Ry(e2), r2 = this.makeSignature(r2);
      var f2 = this.keyFromPublic(o2), p2 = this.hashInt(r2.Rencoded(), f2.pubBytes(), e2), m32 = this.g.mul(r2.S()), y3 = r2.R().add(f2.pub().mul(p2));
      return y3.eq(m32);
    };
    nr.prototype.hashInt = function() {
      for (var e2 = this.hash(), r2 = 0;r2 < arguments.length; r2++)
        e2.update(arguments[r2]);
      return Of.intFromLE(e2.digest()).umod(this.curve.n);
    };
    nr.prototype.keyFromPublic = function(e2) {
      return By.fromPublic(this, e2);
    };
    nr.prototype.keyFromSecret = function(e2) {
      return By.fromSecret(this, e2);
    };
    nr.prototype.makeSignature = function(e2) {
      return e2 instanceof Ay ? e2 : new Ay(this, e2);
    };
    nr.prototype.encodePoint = function(e2) {
      var r2 = e2.getY().toArray("le", this.encodingLength);
      return r2[this.encodingLength - 1] |= e2.getX().isOdd() ? 128 : 0, r2;
    };
    nr.prototype.decodePoint = function(e2) {
      e2 = Of.parseBytes(e2);
      var r2 = e2.length - 1, o2 = e2.slice(0, r2).concat(e2[r2] & -129), f2 = (e2[r2] & 128) !== 0, p2 = Of.intFromLE(o2);
      return this.curve.pointFromY(p2, f2);
    };
    nr.prototype.encodeInt = function(e2) {
      return e2.toArray("le", this.encodingLength);
    };
    nr.prototype.decodeInt = function(e2) {
      return Of.intFromLE(e2);
    };
    nr.prototype.isPoint = function(e2) {
      return e2 instanceof this.pointClass;
    };
  });
  o02 = T2((Ty) => {
    var Hn = Ty;
    Hn.version = s22().version;
    Hn.utils = or();
    Hn.rand = As();
    Hn.curve = Pl();
    Hn.curves = t02();
    Hn.ec = yy();
    Hn.eddsa = Iy();
  });
  td = T2((ky, ed) => {
    (function(t3, e2) {
      function r2(v32, i) {
        if (!v32)
          throw new Error(i || "Assertion failed");
      }
      function o2(v32, i) {
        v32.super_ = i;
        var a2 = function() {
        };
        a2.prototype = i.prototype, v32.prototype = new a2, v32.prototype.constructor = v32;
      }
      function f2(v32, i, a2) {
        if (f2.isBN(v32))
          return v32;
        this.negative = 0, this.words = null, this.length = 0, this.red = null, v32 !== null && ((i === "le" || i === "be") && (a2 = i, i = 10), this._init(v32 || 0, i || 10, a2 || "be"));
      }
      typeof t3 == "object" ? t3.exports = f2 : e2.BN = f2, f2.BN = f2, f2.wordSize = 26;
      var p2;
      try {
        typeof window < "u" && typeof window.Buffer < "u" ? p2 = window.Buffer : p2 = ji().Buffer;
      } catch {
      }
      f2.isBN = function(i) {
        return i instanceof f2 ? true : i !== null && typeof i == "object" && i.constructor.wordSize === f2.wordSize && Array.isArray(i.words);
      }, f2.max = function(i, a2) {
        return i.cmp(a2) > 0 ? i : a2;
      }, f2.min = function(i, a2) {
        return i.cmp(a2) < 0 ? i : a2;
      }, f2.prototype._init = function(i, a2, h3) {
        if (typeof i == "number")
          return this._initNumber(i, a2, h3);
        if (typeof i == "object")
          return this._initArray(i, a2, h3);
        a2 === "hex" && (a2 = 16), r2(a2 === (a2 | 0) && a2 >= 2 && a2 <= 36), i = i.toString().replace(/\s+/g, "");
        var s3 = 0;
        i[0] === "-" && (s3++, this.negative = 1), s3 < i.length && (a2 === 16 ? this._parseHex(i, s3, h3) : (this._parseBase(i, a2, s3), h3 === "le" && this._initArray(this.toArray(), a2, h3)));
      }, f2.prototype._initNumber = function(i, a2, h3) {
        i < 0 && (this.negative = 1, i = -i), i < 67108864 ? (this.words = [i & 67108863], this.length = 1) : i < 4503599627370496 ? (this.words = [i & 67108863, i / 67108864 & 67108863], this.length = 2) : (r2(i < 9007199254740992), this.words = [i & 67108863, i / 67108864 & 67108863, 1], this.length = 3), h3 === "le" && this._initArray(this.toArray(), a2, h3);
      }, f2.prototype._initArray = function(i, a2, h3) {
        if (r2(typeof i.length == "number"), i.length <= 0)
          return this.words = [0], this.length = 1, this;
        this.length = Math.ceil(i.length / 3), this.words = new Array(this.length);
        for (var s3 = 0;s3 < this.length; s3++)
          this.words[s3] = 0;
        var u4, c2, b3 = 0;
        if (h3 === "be")
          for (s3 = i.length - 1, u4 = 0;s3 >= 0; s3 -= 3)
            c2 = i[s3] | i[s3 - 1] << 8 | i[s3 - 2] << 16, this.words[u4] |= c2 << b3 & 67108863, this.words[u4 + 1] = c2 >>> 26 - b3 & 67108863, b3 += 24, b3 >= 26 && (b3 -= 26, u4++);
        else if (h3 === "le")
          for (s3 = 0, u4 = 0;s3 < i.length; s3 += 3)
            c2 = i[s3] | i[s3 + 1] << 8 | i[s3 + 2] << 16, this.words[u4] |= c2 << b3 & 67108863, this.words[u4 + 1] = c2 >>> 26 - b3 & 67108863, b3 += 24, b3 >= 26 && (b3 -= 26, u4++);
        return this.strip();
      };
      function m32(v32, i) {
        var a2 = v32.charCodeAt(i);
        return a2 >= 65 && a2 <= 70 ? a2 - 55 : a2 >= 97 && a2 <= 102 ? a2 - 87 : a2 - 48 & 15;
      }
      function y3(v32, i, a2) {
        var h3 = m32(v32, a2);
        return a2 - 1 >= i && (h3 |= m32(v32, a2 - 1) << 4), h3;
      }
      f2.prototype._parseHex = function(i, a2, h3) {
        this.length = Math.ceil((i.length - a2) / 6), this.words = new Array(this.length);
        for (var s3 = 0;s3 < this.length; s3++)
          this.words[s3] = 0;
        var u4 = 0, c2 = 0, b3;
        if (h3 === "be")
          for (s3 = i.length - 1;s3 >= a2; s3 -= 2)
            b3 = y3(i, a2, s3) << u4, this.words[c2] |= b3 & 67108863, u4 >= 18 ? (u4 -= 18, c2 += 1, this.words[c2] |= b3 >>> 26) : u4 += 8;
        else {
          var l3 = i.length - a2;
          for (s3 = l3 % 2 === 0 ? a2 + 1 : a2;s3 < i.length; s3 += 2)
            b3 = y3(i, a2, s3) << u4, this.words[c2] |= b3 & 67108863, u4 >= 18 ? (u4 -= 18, c2 += 1, this.words[c2] |= b3 >>> 26) : u4 += 8;
        }
        this.strip();
      };
      function M3(v32, i, a2, h3) {
        for (var s3 = 0, u4 = Math.min(v32.length, a2), c2 = i;c2 < u4; c2++) {
          var b3 = v32.charCodeAt(c2) - 48;
          s3 *= h3, b3 >= 49 ? s3 += b3 - 49 + 10 : b3 >= 17 ? s3 += b3 - 17 + 10 : s3 += b3;
        }
        return s3;
      }
      f2.prototype._parseBase = function(i, a2, h3) {
        this.words = [0], this.length = 1;
        for (var s3 = 0, u4 = 1;u4 <= 67108863; u4 *= a2)
          s3++;
        s3--, u4 = u4 / a2 | 0;
        for (var c2 = i.length - h3, b3 = c2 % s3, l3 = Math.min(c2, c2 - b3) + h3, n32 = 0, d2 = h3;d2 < l3; d2 += s3)
          n32 = M3(i, d2, d2 + s3, a2), this.imuln(u4), this.words[0] + n32 < 67108864 ? this.words[0] += n32 : this._iaddn(n32);
        if (b3 !== 0) {
          var w3 = 1;
          for (n32 = M3(i, d2, i.length, a2), d2 = 0;d2 < b3; d2++)
            w3 *= a2;
          this.imuln(w3), this.words[0] + n32 < 67108864 ? this.words[0] += n32 : this._iaddn(n32);
        }
        this.strip();
      }, f2.prototype.copy = function(i) {
        i.words = new Array(this.length);
        for (var a2 = 0;a2 < this.length; a2++)
          i.words[a2] = this.words[a2];
        i.length = this.length, i.negative = this.negative, i.red = this.red;
      }, f2.prototype.clone = function() {
        var i = new f2(null);
        return this.copy(i), i;
      }, f2.prototype._expand = function(i) {
        for (;this.length < i; )
          this.words[this.length++] = 0;
        return this;
      }, f2.prototype.strip = function() {
        for (;this.length > 1 && this.words[this.length - 1] === 0; )
          this.length--;
        return this._normSign();
      }, f2.prototype._normSign = function() {
        return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
      }, f2.prototype.inspect = function() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var x5 = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"], S2 = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], E4 = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
      f2.prototype.toString = function(i, a2) {
        i = i || 10, a2 = a2 | 0 || 1;
        var h3;
        if (i === 16 || i === "hex") {
          h3 = "";
          for (var s3 = 0, u4 = 0, c2 = 0;c2 < this.length; c2++) {
            var b3 = this.words[c2], l3 = ((b3 << s3 | u4) & 16777215).toString(16);
            u4 = b3 >>> 24 - s3 & 16777215, u4 !== 0 || c2 !== this.length - 1 ? h3 = x5[6 - l3.length] + l3 + h3 : h3 = l3 + h3, s3 += 2, s3 >= 26 && (s3 -= 26, c2--);
          }
          for (u4 !== 0 && (h3 = u4.toString(16) + h3);h3.length % a2 !== 0; )
            h3 = "0" + h3;
          return this.negative !== 0 && (h3 = "-" + h3), h3;
        }
        if (i === (i | 0) && i >= 2 && i <= 36) {
          var n32 = S2[i], d2 = E4[i];
          h3 = "";
          var w3 = this.clone();
          for (w3.negative = 0;!w3.isZero(); ) {
            var g2 = w3.modn(d2).toString(i);
            w3 = w3.idivn(d2), w3.isZero() ? h3 = g2 + h3 : h3 = x5[n32 - g2.length] + g2 + h3;
          }
          for (this.isZero() && (h3 = "0" + h3);h3.length % a2 !== 0; )
            h3 = "0" + h3;
          return this.negative !== 0 && (h3 = "-" + h3), h3;
        }
        r2(false, "Base should be between 2 and 36");
      }, f2.prototype.toNumber = function() {
        var i = this.words[0];
        return this.length === 2 ? i += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? i += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && r2(false, "Number can only safely store up to 53 bits"), this.negative !== 0 ? -i : i;
      }, f2.prototype.toJSON = function() {
        return this.toString(16);
      }, f2.prototype.toBuffer = function(i, a2) {
        return r2(typeof p2 < "u"), this.toArrayLike(p2, i, a2);
      }, f2.prototype.toArray = function(i, a2) {
        return this.toArrayLike(Array, i, a2);
      }, f2.prototype.toArrayLike = function(i, a2, h3) {
        var s3 = this.byteLength(), u4 = h3 || Math.max(1, s3);
        r2(s3 <= u4, "byte array longer than desired length"), r2(u4 > 0, "Requested array length <= 0"), this.strip();
        var c2 = a2 === "le", b3 = new i(u4), l3, n32, d2 = this.clone();
        if (c2) {
          for (n32 = 0;!d2.isZero(); n32++)
            l3 = d2.andln(255), d2.iushrn(8), b3[n32] = l3;
          for (;n32 < u4; n32++)
            b3[n32] = 0;
        } else {
          for (n32 = 0;n32 < u4 - s3; n32++)
            b3[n32] = 0;
          for (n32 = 0;!d2.isZero(); n32++)
            l3 = d2.andln(255), d2.iushrn(8), b3[u4 - n32 - 1] = l3;
        }
        return b3;
      }, Math.clz32 ? f2.prototype._countBits = function(i) {
        return 32 - Math.clz32(i);
      } : f2.prototype._countBits = function(i) {
        var a2 = i, h3 = 0;
        return a2 >= 4096 && (h3 += 13, a2 >>>= 13), a2 >= 64 && (h3 += 7, a2 >>>= 7), a2 >= 8 && (h3 += 4, a2 >>>= 4), a2 >= 2 && (h3 += 2, a2 >>>= 2), h3 + a2;
      }, f2.prototype._zeroBits = function(i) {
        if (i === 0)
          return 26;
        var a2 = i, h3 = 0;
        return (a2 & 8191) === 0 && (h3 += 13, a2 >>>= 13), (a2 & 127) === 0 && (h3 += 7, a2 >>>= 7), (a2 & 15) === 0 && (h3 += 4, a2 >>>= 4), (a2 & 3) === 0 && (h3 += 2, a2 >>>= 2), (a2 & 1) === 0 && h3++, h3;
      }, f2.prototype.bitLength = function() {
        var i = this.words[this.length - 1], a2 = this._countBits(i);
        return (this.length - 1) * 26 + a2;
      };
      function B5(v32) {
        for (var i = new Array(v32.bitLength()), a2 = 0;a2 < i.length; a2++) {
          var h3 = a2 / 26 | 0, s3 = a2 % 26;
          i[a2] = (v32.words[h3] & 1 << s3) >>> s3;
        }
        return i;
      }
      f2.prototype.zeroBits = function() {
        if (this.isZero())
          return 0;
        for (var i = 0, a2 = 0;a2 < this.length; a2++) {
          var h3 = this._zeroBits(this.words[a2]);
          if (i += h3, h3 !== 26)
            break;
        }
        return i;
      }, f2.prototype.byteLength = function() {
        return Math.ceil(this.bitLength() / 8);
      }, f2.prototype.toTwos = function(i) {
        return this.negative !== 0 ? this.abs().inotn(i).iaddn(1) : this.clone();
      }, f2.prototype.fromTwos = function(i) {
        return this.testn(i - 1) ? this.notn(i).iaddn(1).ineg() : this.clone();
      }, f2.prototype.isNeg = function() {
        return this.negative !== 0;
      }, f2.prototype.neg = function() {
        return this.clone().ineg();
      }, f2.prototype.ineg = function() {
        return this.isZero() || (this.negative ^= 1), this;
      }, f2.prototype.iuor = function(i) {
        for (;this.length < i.length; )
          this.words[this.length++] = 0;
        for (var a2 = 0;a2 < i.length; a2++)
          this.words[a2] = this.words[a2] | i.words[a2];
        return this.strip();
      }, f2.prototype.ior = function(i) {
        return r2((this.negative | i.negative) === 0), this.iuor(i);
      }, f2.prototype.or = function(i) {
        return this.length > i.length ? this.clone().ior(i) : i.clone().ior(this);
      }, f2.prototype.uor = function(i) {
        return this.length > i.length ? this.clone().iuor(i) : i.clone().iuor(this);
      }, f2.prototype.iuand = function(i) {
        var a2;
        this.length > i.length ? a2 = i : a2 = this;
        for (var h3 = 0;h3 < a2.length; h3++)
          this.words[h3] = this.words[h3] & i.words[h3];
        return this.length = a2.length, this.strip();
      }, f2.prototype.iand = function(i) {
        return r2((this.negative | i.negative) === 0), this.iuand(i);
      }, f2.prototype.and = function(i) {
        return this.length > i.length ? this.clone().iand(i) : i.clone().iand(this);
      }, f2.prototype.uand = function(i) {
        return this.length > i.length ? this.clone().iuand(i) : i.clone().iuand(this);
      }, f2.prototype.iuxor = function(i) {
        var a2, h3;
        this.length > i.length ? (a2 = this, h3 = i) : (a2 = i, h3 = this);
        for (var s3 = 0;s3 < h3.length; s3++)
          this.words[s3] = a2.words[s3] ^ h3.words[s3];
        if (this !== a2)
          for (;s3 < a2.length; s3++)
            this.words[s3] = a2.words[s3];
        return this.length = a2.length, this.strip();
      }, f2.prototype.ixor = function(i) {
        return r2((this.negative | i.negative) === 0), this.iuxor(i);
      }, f2.prototype.xor = function(i) {
        return this.length > i.length ? this.clone().ixor(i) : i.clone().ixor(this);
      }, f2.prototype.uxor = function(i) {
        return this.length > i.length ? this.clone().iuxor(i) : i.clone().iuxor(this);
      }, f2.prototype.inotn = function(i) {
        r2(typeof i == "number" && i >= 0);
        var a2 = Math.ceil(i / 26) | 0, h3 = i % 26;
        this._expand(a2), h3 > 0 && a2--;
        for (var s3 = 0;s3 < a2; s3++)
          this.words[s3] = ~this.words[s3] & 67108863;
        return h3 > 0 && (this.words[s3] = ~this.words[s3] & 67108863 >> 26 - h3), this.strip();
      }, f2.prototype.notn = function(i) {
        return this.clone().inotn(i);
      }, f2.prototype.setn = function(i, a2) {
        r2(typeof i == "number" && i >= 0);
        var h3 = i / 26 | 0, s3 = i % 26;
        return this._expand(h3 + 1), a2 ? this.words[h3] = this.words[h3] | 1 << s3 : this.words[h3] = this.words[h3] & ~(1 << s3), this.strip();
      }, f2.prototype.iadd = function(i) {
        var a2;
        if (this.negative !== 0 && i.negative === 0)
          return this.negative = 0, a2 = this.isub(i), this.negative ^= 1, this._normSign();
        if (this.negative === 0 && i.negative !== 0)
          return i.negative = 0, a2 = this.isub(i), i.negative = 1, a2._normSign();
        var h3, s3;
        this.length > i.length ? (h3 = this, s3 = i) : (h3 = i, s3 = this);
        for (var u4 = 0, c2 = 0;c2 < s3.length; c2++)
          a2 = (h3.words[c2] | 0) + (s3.words[c2] | 0) + u4, this.words[c2] = a2 & 67108863, u4 = a2 >>> 26;
        for (;u4 !== 0 && c2 < h3.length; c2++)
          a2 = (h3.words[c2] | 0) + u4, this.words[c2] = a2 & 67108863, u4 = a2 >>> 26;
        if (this.length = h3.length, u4 !== 0)
          this.words[this.length] = u4, this.length++;
        else if (h3 !== this)
          for (;c2 < h3.length; c2++)
            this.words[c2] = h3.words[c2];
        return this;
      }, f2.prototype.add = function(i) {
        var a2;
        return i.negative !== 0 && this.negative === 0 ? (i.negative = 0, a2 = this.sub(i), i.negative ^= 1, a2) : i.negative === 0 && this.negative !== 0 ? (this.negative = 0, a2 = i.sub(this), this.negative = 1, a2) : this.length > i.length ? this.clone().iadd(i) : i.clone().iadd(this);
      }, f2.prototype.isub = function(i) {
        if (i.negative !== 0) {
          i.negative = 0;
          var a2 = this.iadd(i);
          return i.negative = 1, a2._normSign();
        } else if (this.negative !== 0)
          return this.negative = 0, this.iadd(i), this.negative = 1, this._normSign();
        var h3 = this.cmp(i);
        if (h3 === 0)
          return this.negative = 0, this.length = 1, this.words[0] = 0, this;
        var s3, u4;
        h3 > 0 ? (s3 = this, u4 = i) : (s3 = i, u4 = this);
        for (var c2 = 0, b3 = 0;b3 < u4.length; b3++)
          a2 = (s3.words[b3] | 0) - (u4.words[b3] | 0) + c2, c2 = a2 >> 26, this.words[b3] = a2 & 67108863;
        for (;c2 !== 0 && b3 < s3.length; b3++)
          a2 = (s3.words[b3] | 0) + c2, c2 = a2 >> 26, this.words[b3] = a2 & 67108863;
        if (c2 === 0 && b3 < s3.length && s3 !== this)
          for (;b3 < s3.length; b3++)
            this.words[b3] = s3.words[b3];
        return this.length = Math.max(this.length, b3), s3 !== this && (this.negative = 1), this.strip();
      }, f2.prototype.sub = function(i) {
        return this.clone().isub(i);
      };
      function q(v32, i, a2) {
        a2.negative = i.negative ^ v32.negative;
        var h3 = v32.length + i.length | 0;
        a2.length = h3, h3 = h3 - 1 | 0;
        var s3 = v32.words[0] | 0, u4 = i.words[0] | 0, c2 = s3 * u4, b3 = c2 & 67108863, l3 = c2 / 67108864 | 0;
        a2.words[0] = b3;
        for (var n32 = 1;n32 < h3; n32++) {
          for (var d2 = l3 >>> 26, w3 = l3 & 67108863, g2 = Math.min(n32, i.length - 1), _5 = Math.max(0, n32 - v32.length + 1);_5 <= g2; _5++) {
            var A6 = n32 - _5 | 0;
            s3 = v32.words[A6] | 0, u4 = i.words[_5] | 0, c2 = s3 * u4 + w3, d2 += c2 / 67108864 | 0, w3 = c2 & 67108863;
          }
          a2.words[n32] = w3 | 0, l3 = d2 | 0;
        }
        return l3 !== 0 ? a2.words[n32] = l3 | 0 : a2.length--, a2.strip();
      }
      var L2 = function(i, a2, h3) {
        var s3 = i.words, u4 = a2.words, c2 = h3.words, b3 = 0, l3, n32, d2, w3 = s3[0] | 0, g2 = w3 & 8191, _5 = w3 >>> 13, A6 = s3[1] | 0, R4 = A6 & 8191, I2 = A6 >>> 13, Me = s3[2] | 0, k32 = Me & 8191, D3 = Me >>> 13, nt = s3[3] | 0, C3 = nt & 8191, O4 = nt >>> 13, vt = s3[4] | 0, F = vt & 8191, U2 = vt >>> 13, bt = s3[5] | 0, z4 = bt & 8191, H4 = bt >>> 13, mt = s3[6] | 0, W3 = mt & 8191, K2 = mt >>> 13, gt = s3[7] | 0, j32 = gt & 8191, Z4 = gt >>> 13, yt = s3[8] | 0, V3 = yt & 8191, $3 = yt >>> 13, wt = s3[9] | 0, G5 = wt & 8191, Y2 = wt >>> 13, Mt = u4[0] | 0, X4 = Mt & 8191, J = Mt >>> 13, _t = u4[1] | 0, Q4 = _t & 8191, ee = _t >>> 13, xt = u4[2] | 0, te = xt & 8191, re = xt >>> 13, St = u4[3] | 0, ie = St & 8191, ne = St >>> 13, Et = u4[4] | 0, fe = Et & 8191, ae = Et >>> 13, At = u4[5] | 0, oe = At & 8191, se = At >>> 13, Rt = u4[6] | 0, he = Rt & 8191, ue = Rt >>> 13, Bt = u4[7] | 0, le = Bt & 8191, de = Bt >>> 13, qt = u4[8] | 0, ce = qt & 8191, pe = qt >>> 13, It = u4[9] | 0, ve = It & 8191, be = It >>> 13;
        h3.negative = i.negative ^ a2.negative, h3.length = 19, l3 = Math.imul(g2, X4), n32 = Math.imul(g2, J), n32 = n32 + Math.imul(_5, X4) | 0, d2 = Math.imul(_5, J);
        var ft = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (ft >>> 26) | 0, ft &= 67108863, l3 = Math.imul(R4, X4), n32 = Math.imul(R4, J), n32 = n32 + Math.imul(I2, X4) | 0, d2 = Math.imul(I2, J), l3 = l3 + Math.imul(g2, Q4) | 0, n32 = n32 + Math.imul(g2, ee) | 0, n32 = n32 + Math.imul(_5, Q4) | 0, d2 = d2 + Math.imul(_5, ee) | 0;
        var Be = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Be >>> 26) | 0, Be &= 67108863, l3 = Math.imul(k32, X4), n32 = Math.imul(k32, J), n32 = n32 + Math.imul(D3, X4) | 0, d2 = Math.imul(D3, J), l3 = l3 + Math.imul(R4, Q4) | 0, n32 = n32 + Math.imul(R4, ee) | 0, n32 = n32 + Math.imul(I2, Q4) | 0, d2 = d2 + Math.imul(I2, ee) | 0, l3 = l3 + Math.imul(g2, te) | 0, n32 = n32 + Math.imul(g2, re) | 0, n32 = n32 + Math.imul(_5, te) | 0, d2 = d2 + Math.imul(_5, re) | 0;
        var qe = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (qe >>> 26) | 0, qe &= 67108863, l3 = Math.imul(C3, X4), n32 = Math.imul(C3, J), n32 = n32 + Math.imul(O4, X4) | 0, d2 = Math.imul(O4, J), l3 = l3 + Math.imul(k32, Q4) | 0, n32 = n32 + Math.imul(k32, ee) | 0, n32 = n32 + Math.imul(D3, Q4) | 0, d2 = d2 + Math.imul(D3, ee) | 0, l3 = l3 + Math.imul(R4, te) | 0, n32 = n32 + Math.imul(R4, re) | 0, n32 = n32 + Math.imul(I2, te) | 0, d2 = d2 + Math.imul(I2, re) | 0, l3 = l3 + Math.imul(g2, ie) | 0, n32 = n32 + Math.imul(g2, ne) | 0, n32 = n32 + Math.imul(_5, ie) | 0, d2 = d2 + Math.imul(_5, ne) | 0;
        var ze = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (ze >>> 26) | 0, ze &= 67108863, l3 = Math.imul(F, X4), n32 = Math.imul(F, J), n32 = n32 + Math.imul(U2, X4) | 0, d2 = Math.imul(U2, J), l3 = l3 + Math.imul(C3, Q4) | 0, n32 = n32 + Math.imul(C3, ee) | 0, n32 = n32 + Math.imul(O4, Q4) | 0, d2 = d2 + Math.imul(O4, ee) | 0, l3 = l3 + Math.imul(k32, te) | 0, n32 = n32 + Math.imul(k32, re) | 0, n32 = n32 + Math.imul(D3, te) | 0, d2 = d2 + Math.imul(D3, re) | 0, l3 = l3 + Math.imul(R4, ie) | 0, n32 = n32 + Math.imul(R4, ne) | 0, n32 = n32 + Math.imul(I2, ie) | 0, d2 = d2 + Math.imul(I2, ne) | 0, l3 = l3 + Math.imul(g2, fe) | 0, n32 = n32 + Math.imul(g2, ae) | 0, n32 = n32 + Math.imul(_5, fe) | 0, d2 = d2 + Math.imul(_5, ae) | 0;
        var He = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (He >>> 26) | 0, He &= 67108863, l3 = Math.imul(z4, X4), n32 = Math.imul(z4, J), n32 = n32 + Math.imul(H4, X4) | 0, d2 = Math.imul(H4, J), l3 = l3 + Math.imul(F, Q4) | 0, n32 = n32 + Math.imul(F, ee) | 0, n32 = n32 + Math.imul(U2, Q4) | 0, d2 = d2 + Math.imul(U2, ee) | 0, l3 = l3 + Math.imul(C3, te) | 0, n32 = n32 + Math.imul(C3, re) | 0, n32 = n32 + Math.imul(O4, te) | 0, d2 = d2 + Math.imul(O4, re) | 0, l3 = l3 + Math.imul(k32, ie) | 0, n32 = n32 + Math.imul(k32, ne) | 0, n32 = n32 + Math.imul(D3, ie) | 0, d2 = d2 + Math.imul(D3, ne) | 0, l3 = l3 + Math.imul(R4, fe) | 0, n32 = n32 + Math.imul(R4, ae) | 0, n32 = n32 + Math.imul(I2, fe) | 0, d2 = d2 + Math.imul(I2, ae) | 0, l3 = l3 + Math.imul(g2, oe) | 0, n32 = n32 + Math.imul(g2, se) | 0, n32 = n32 + Math.imul(_5, oe) | 0, d2 = d2 + Math.imul(_5, se) | 0;
        var We = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (We >>> 26) | 0, We &= 67108863, l3 = Math.imul(W3, X4), n32 = Math.imul(W3, J), n32 = n32 + Math.imul(K2, X4) | 0, d2 = Math.imul(K2, J), l3 = l3 + Math.imul(z4, Q4) | 0, n32 = n32 + Math.imul(z4, ee) | 0, n32 = n32 + Math.imul(H4, Q4) | 0, d2 = d2 + Math.imul(H4, ee) | 0, l3 = l3 + Math.imul(F, te) | 0, n32 = n32 + Math.imul(F, re) | 0, n32 = n32 + Math.imul(U2, te) | 0, d2 = d2 + Math.imul(U2, re) | 0, l3 = l3 + Math.imul(C3, ie) | 0, n32 = n32 + Math.imul(C3, ne) | 0, n32 = n32 + Math.imul(O4, ie) | 0, d2 = d2 + Math.imul(O4, ne) | 0, l3 = l3 + Math.imul(k32, fe) | 0, n32 = n32 + Math.imul(k32, ae) | 0, n32 = n32 + Math.imul(D3, fe) | 0, d2 = d2 + Math.imul(D3, ae) | 0, l3 = l3 + Math.imul(R4, oe) | 0, n32 = n32 + Math.imul(R4, se) | 0, n32 = n32 + Math.imul(I2, oe) | 0, d2 = d2 + Math.imul(I2, se) | 0, l3 = l3 + Math.imul(g2, he) | 0, n32 = n32 + Math.imul(g2, ue) | 0, n32 = n32 + Math.imul(_5, he) | 0, d2 = d2 + Math.imul(_5, ue) | 0;
        var Ke = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Ke >>> 26) | 0, Ke &= 67108863, l3 = Math.imul(j32, X4), n32 = Math.imul(j32, J), n32 = n32 + Math.imul(Z4, X4) | 0, d2 = Math.imul(Z4, J), l3 = l3 + Math.imul(W3, Q4) | 0, n32 = n32 + Math.imul(W3, ee) | 0, n32 = n32 + Math.imul(K2, Q4) | 0, d2 = d2 + Math.imul(K2, ee) | 0, l3 = l3 + Math.imul(z4, te) | 0, n32 = n32 + Math.imul(z4, re) | 0, n32 = n32 + Math.imul(H4, te) | 0, d2 = d2 + Math.imul(H4, re) | 0, l3 = l3 + Math.imul(F, ie) | 0, n32 = n32 + Math.imul(F, ne) | 0, n32 = n32 + Math.imul(U2, ie) | 0, d2 = d2 + Math.imul(U2, ne) | 0, l3 = l3 + Math.imul(C3, fe) | 0, n32 = n32 + Math.imul(C3, ae) | 0, n32 = n32 + Math.imul(O4, fe) | 0, d2 = d2 + Math.imul(O4, ae) | 0, l3 = l3 + Math.imul(k32, oe) | 0, n32 = n32 + Math.imul(k32, se) | 0, n32 = n32 + Math.imul(D3, oe) | 0, d2 = d2 + Math.imul(D3, se) | 0, l3 = l3 + Math.imul(R4, he) | 0, n32 = n32 + Math.imul(R4, ue) | 0, n32 = n32 + Math.imul(I2, he) | 0, d2 = d2 + Math.imul(I2, ue) | 0, l3 = l3 + Math.imul(g2, le) | 0, n32 = n32 + Math.imul(g2, de) | 0, n32 = n32 + Math.imul(_5, le) | 0, d2 = d2 + Math.imul(_5, de) | 0;
        var je = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (je >>> 26) | 0, je &= 67108863, l3 = Math.imul(V3, X4), n32 = Math.imul(V3, J), n32 = n32 + Math.imul($3, X4) | 0, d2 = Math.imul($3, J), l3 = l3 + Math.imul(j32, Q4) | 0, n32 = n32 + Math.imul(j32, ee) | 0, n32 = n32 + Math.imul(Z4, Q4) | 0, d2 = d2 + Math.imul(Z4, ee) | 0, l3 = l3 + Math.imul(W3, te) | 0, n32 = n32 + Math.imul(W3, re) | 0, n32 = n32 + Math.imul(K2, te) | 0, d2 = d2 + Math.imul(K2, re) | 0, l3 = l3 + Math.imul(z4, ie) | 0, n32 = n32 + Math.imul(z4, ne) | 0, n32 = n32 + Math.imul(H4, ie) | 0, d2 = d2 + Math.imul(H4, ne) | 0, l3 = l3 + Math.imul(F, fe) | 0, n32 = n32 + Math.imul(F, ae) | 0, n32 = n32 + Math.imul(U2, fe) | 0, d2 = d2 + Math.imul(U2, ae) | 0, l3 = l3 + Math.imul(C3, oe) | 0, n32 = n32 + Math.imul(C3, se) | 0, n32 = n32 + Math.imul(O4, oe) | 0, d2 = d2 + Math.imul(O4, se) | 0, l3 = l3 + Math.imul(k32, he) | 0, n32 = n32 + Math.imul(k32, ue) | 0, n32 = n32 + Math.imul(D3, he) | 0, d2 = d2 + Math.imul(D3, ue) | 0, l3 = l3 + Math.imul(R4, le) | 0, n32 = n32 + Math.imul(R4, de) | 0, n32 = n32 + Math.imul(I2, le) | 0, d2 = d2 + Math.imul(I2, de) | 0, l3 = l3 + Math.imul(g2, ce) | 0, n32 = n32 + Math.imul(g2, pe) | 0, n32 = n32 + Math.imul(_5, ce) | 0, d2 = d2 + Math.imul(_5, pe) | 0;
        var Ze = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Ze >>> 26) | 0, Ze &= 67108863, l3 = Math.imul(G5, X4), n32 = Math.imul(G5, J), n32 = n32 + Math.imul(Y2, X4) | 0, d2 = Math.imul(Y2, J), l3 = l3 + Math.imul(V3, Q4) | 0, n32 = n32 + Math.imul(V3, ee) | 0, n32 = n32 + Math.imul($3, Q4) | 0, d2 = d2 + Math.imul($3, ee) | 0, l3 = l3 + Math.imul(j32, te) | 0, n32 = n32 + Math.imul(j32, re) | 0, n32 = n32 + Math.imul(Z4, te) | 0, d2 = d2 + Math.imul(Z4, re) | 0, l3 = l3 + Math.imul(W3, ie) | 0, n32 = n32 + Math.imul(W3, ne) | 0, n32 = n32 + Math.imul(K2, ie) | 0, d2 = d2 + Math.imul(K2, ne) | 0, l3 = l3 + Math.imul(z4, fe) | 0, n32 = n32 + Math.imul(z4, ae) | 0, n32 = n32 + Math.imul(H4, fe) | 0, d2 = d2 + Math.imul(H4, ae) | 0, l3 = l3 + Math.imul(F, oe) | 0, n32 = n32 + Math.imul(F, se) | 0, n32 = n32 + Math.imul(U2, oe) | 0, d2 = d2 + Math.imul(U2, se) | 0, l3 = l3 + Math.imul(C3, he) | 0, n32 = n32 + Math.imul(C3, ue) | 0, n32 = n32 + Math.imul(O4, he) | 0, d2 = d2 + Math.imul(O4, ue) | 0, l3 = l3 + Math.imul(k32, le) | 0, n32 = n32 + Math.imul(k32, de) | 0, n32 = n32 + Math.imul(D3, le) | 0, d2 = d2 + Math.imul(D3, de) | 0, l3 = l3 + Math.imul(R4, ce) | 0, n32 = n32 + Math.imul(R4, pe) | 0, n32 = n32 + Math.imul(I2, ce) | 0, d2 = d2 + Math.imul(I2, pe) | 0, l3 = l3 + Math.imul(g2, ve) | 0, n32 = n32 + Math.imul(g2, be) | 0, n32 = n32 + Math.imul(_5, ve) | 0, d2 = d2 + Math.imul(_5, be) | 0;
        var Ve = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Ve >>> 26) | 0, Ve &= 67108863, l3 = Math.imul(G5, Q4), n32 = Math.imul(G5, ee), n32 = n32 + Math.imul(Y2, Q4) | 0, d2 = Math.imul(Y2, ee), l3 = l3 + Math.imul(V3, te) | 0, n32 = n32 + Math.imul(V3, re) | 0, n32 = n32 + Math.imul($3, te) | 0, d2 = d2 + Math.imul($3, re) | 0, l3 = l3 + Math.imul(j32, ie) | 0, n32 = n32 + Math.imul(j32, ne) | 0, n32 = n32 + Math.imul(Z4, ie) | 0, d2 = d2 + Math.imul(Z4, ne) | 0, l3 = l3 + Math.imul(W3, fe) | 0, n32 = n32 + Math.imul(W3, ae) | 0, n32 = n32 + Math.imul(K2, fe) | 0, d2 = d2 + Math.imul(K2, ae) | 0, l3 = l3 + Math.imul(z4, oe) | 0, n32 = n32 + Math.imul(z4, se) | 0, n32 = n32 + Math.imul(H4, oe) | 0, d2 = d2 + Math.imul(H4, se) | 0, l3 = l3 + Math.imul(F, he) | 0, n32 = n32 + Math.imul(F, ue) | 0, n32 = n32 + Math.imul(U2, he) | 0, d2 = d2 + Math.imul(U2, ue) | 0, l3 = l3 + Math.imul(C3, le) | 0, n32 = n32 + Math.imul(C3, de) | 0, n32 = n32 + Math.imul(O4, le) | 0, d2 = d2 + Math.imul(O4, de) | 0, l3 = l3 + Math.imul(k32, ce) | 0, n32 = n32 + Math.imul(k32, pe) | 0, n32 = n32 + Math.imul(D3, ce) | 0, d2 = d2 + Math.imul(D3, pe) | 0, l3 = l3 + Math.imul(R4, ve) | 0, n32 = n32 + Math.imul(R4, be) | 0, n32 = n32 + Math.imul(I2, ve) | 0, d2 = d2 + Math.imul(I2, be) | 0;
        var $e = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + ($e >>> 26) | 0, $e &= 67108863, l3 = Math.imul(G5, te), n32 = Math.imul(G5, re), n32 = n32 + Math.imul(Y2, te) | 0, d2 = Math.imul(Y2, re), l3 = l3 + Math.imul(V3, ie) | 0, n32 = n32 + Math.imul(V3, ne) | 0, n32 = n32 + Math.imul($3, ie) | 0, d2 = d2 + Math.imul($3, ne) | 0, l3 = l3 + Math.imul(j32, fe) | 0, n32 = n32 + Math.imul(j32, ae) | 0, n32 = n32 + Math.imul(Z4, fe) | 0, d2 = d2 + Math.imul(Z4, ae) | 0, l3 = l3 + Math.imul(W3, oe) | 0, n32 = n32 + Math.imul(W3, se) | 0, n32 = n32 + Math.imul(K2, oe) | 0, d2 = d2 + Math.imul(K2, se) | 0, l3 = l3 + Math.imul(z4, he) | 0, n32 = n32 + Math.imul(z4, ue) | 0, n32 = n32 + Math.imul(H4, he) | 0, d2 = d2 + Math.imul(H4, ue) | 0, l3 = l3 + Math.imul(F, le) | 0, n32 = n32 + Math.imul(F, de) | 0, n32 = n32 + Math.imul(U2, le) | 0, d2 = d2 + Math.imul(U2, de) | 0, l3 = l3 + Math.imul(C3, ce) | 0, n32 = n32 + Math.imul(C3, pe) | 0, n32 = n32 + Math.imul(O4, ce) | 0, d2 = d2 + Math.imul(O4, pe) | 0, l3 = l3 + Math.imul(k32, ve) | 0, n32 = n32 + Math.imul(k32, be) | 0, n32 = n32 + Math.imul(D3, ve) | 0, d2 = d2 + Math.imul(D3, be) | 0;
        var Ge = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Ge >>> 26) | 0, Ge &= 67108863, l3 = Math.imul(G5, ie), n32 = Math.imul(G5, ne), n32 = n32 + Math.imul(Y2, ie) | 0, d2 = Math.imul(Y2, ne), l3 = l3 + Math.imul(V3, fe) | 0, n32 = n32 + Math.imul(V3, ae) | 0, n32 = n32 + Math.imul($3, fe) | 0, d2 = d2 + Math.imul($3, ae) | 0, l3 = l3 + Math.imul(j32, oe) | 0, n32 = n32 + Math.imul(j32, se) | 0, n32 = n32 + Math.imul(Z4, oe) | 0, d2 = d2 + Math.imul(Z4, se) | 0, l3 = l3 + Math.imul(W3, he) | 0, n32 = n32 + Math.imul(W3, ue) | 0, n32 = n32 + Math.imul(K2, he) | 0, d2 = d2 + Math.imul(K2, ue) | 0, l3 = l3 + Math.imul(z4, le) | 0, n32 = n32 + Math.imul(z4, de) | 0, n32 = n32 + Math.imul(H4, le) | 0, d2 = d2 + Math.imul(H4, de) | 0, l3 = l3 + Math.imul(F, ce) | 0, n32 = n32 + Math.imul(F, pe) | 0, n32 = n32 + Math.imul(U2, ce) | 0, d2 = d2 + Math.imul(U2, pe) | 0, l3 = l3 + Math.imul(C3, ve) | 0, n32 = n32 + Math.imul(C3, be) | 0, n32 = n32 + Math.imul(O4, ve) | 0, d2 = d2 + Math.imul(O4, be) | 0;
        var Ye = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Ye >>> 26) | 0, Ye &= 67108863, l3 = Math.imul(G5, fe), n32 = Math.imul(G5, ae), n32 = n32 + Math.imul(Y2, fe) | 0, d2 = Math.imul(Y2, ae), l3 = l3 + Math.imul(V3, oe) | 0, n32 = n32 + Math.imul(V3, se) | 0, n32 = n32 + Math.imul($3, oe) | 0, d2 = d2 + Math.imul($3, se) | 0, l3 = l3 + Math.imul(j32, he) | 0, n32 = n32 + Math.imul(j32, ue) | 0, n32 = n32 + Math.imul(Z4, he) | 0, d2 = d2 + Math.imul(Z4, ue) | 0, l3 = l3 + Math.imul(W3, le) | 0, n32 = n32 + Math.imul(W3, de) | 0, n32 = n32 + Math.imul(K2, le) | 0, d2 = d2 + Math.imul(K2, de) | 0, l3 = l3 + Math.imul(z4, ce) | 0, n32 = n32 + Math.imul(z4, pe) | 0, n32 = n32 + Math.imul(H4, ce) | 0, d2 = d2 + Math.imul(H4, pe) | 0, l3 = l3 + Math.imul(F, ve) | 0, n32 = n32 + Math.imul(F, be) | 0, n32 = n32 + Math.imul(U2, ve) | 0, d2 = d2 + Math.imul(U2, be) | 0;
        var Xe = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Xe >>> 26) | 0, Xe &= 67108863, l3 = Math.imul(G5, oe), n32 = Math.imul(G5, se), n32 = n32 + Math.imul(Y2, oe) | 0, d2 = Math.imul(Y2, se), l3 = l3 + Math.imul(V3, he) | 0, n32 = n32 + Math.imul(V3, ue) | 0, n32 = n32 + Math.imul($3, he) | 0, d2 = d2 + Math.imul($3, ue) | 0, l3 = l3 + Math.imul(j32, le) | 0, n32 = n32 + Math.imul(j32, de) | 0, n32 = n32 + Math.imul(Z4, le) | 0, d2 = d2 + Math.imul(Z4, de) | 0, l3 = l3 + Math.imul(W3, ce) | 0, n32 = n32 + Math.imul(W3, pe) | 0, n32 = n32 + Math.imul(K2, ce) | 0, d2 = d2 + Math.imul(K2, pe) | 0, l3 = l3 + Math.imul(z4, ve) | 0, n32 = n32 + Math.imul(z4, be) | 0, n32 = n32 + Math.imul(H4, ve) | 0, d2 = d2 + Math.imul(H4, be) | 0;
        var Je = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Je >>> 26) | 0, Je &= 67108863, l3 = Math.imul(G5, he), n32 = Math.imul(G5, ue), n32 = n32 + Math.imul(Y2, he) | 0, d2 = Math.imul(Y2, ue), l3 = l3 + Math.imul(V3, le) | 0, n32 = n32 + Math.imul(V3, de) | 0, n32 = n32 + Math.imul($3, le) | 0, d2 = d2 + Math.imul($3, de) | 0, l3 = l3 + Math.imul(j32, ce) | 0, n32 = n32 + Math.imul(j32, pe) | 0, n32 = n32 + Math.imul(Z4, ce) | 0, d2 = d2 + Math.imul(Z4, pe) | 0, l3 = l3 + Math.imul(W3, ve) | 0, n32 = n32 + Math.imul(W3, be) | 0, n32 = n32 + Math.imul(K2, ve) | 0, d2 = d2 + Math.imul(K2, be) | 0;
        var Qe = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (Qe >>> 26) | 0, Qe &= 67108863, l3 = Math.imul(G5, le), n32 = Math.imul(G5, de), n32 = n32 + Math.imul(Y2, le) | 0, d2 = Math.imul(Y2, de), l3 = l3 + Math.imul(V3, ce) | 0, n32 = n32 + Math.imul(V3, pe) | 0, n32 = n32 + Math.imul($3, ce) | 0, d2 = d2 + Math.imul($3, pe) | 0, l3 = l3 + Math.imul(j32, ve) | 0, n32 = n32 + Math.imul(j32, be) | 0, n32 = n32 + Math.imul(Z4, ve) | 0, d2 = d2 + Math.imul(Z4, be) | 0;
        var et = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (et >>> 26) | 0, et &= 67108863, l3 = Math.imul(G5, ce), n32 = Math.imul(G5, pe), n32 = n32 + Math.imul(Y2, ce) | 0, d2 = Math.imul(Y2, pe), l3 = l3 + Math.imul(V3, ve) | 0, n32 = n32 + Math.imul(V3, be) | 0, n32 = n32 + Math.imul($3, ve) | 0, d2 = d2 + Math.imul($3, be) | 0;
        var tt = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        b3 = (d2 + (n32 >>> 13) | 0) + (tt >>> 26) | 0, tt &= 67108863, l3 = Math.imul(G5, ve), n32 = Math.imul(G5, be), n32 = n32 + Math.imul(Y2, ve) | 0, d2 = Math.imul(Y2, be);
        var rt = (b3 + l3 | 0) + ((n32 & 8191) << 13) | 0;
        return b3 = (d2 + (n32 >>> 13) | 0) + (rt >>> 26) | 0, rt &= 67108863, c2[0] = ft, c2[1] = Be, c2[2] = qe, c2[3] = ze, c2[4] = He, c2[5] = We, c2[6] = Ke, c2[7] = je, c2[8] = Ze, c2[9] = Ve, c2[10] = $e, c2[11] = Ge, c2[12] = Ye, c2[13] = Xe, c2[14] = Je, c2[15] = Qe, c2[16] = et, c2[17] = tt, c2[18] = rt, b3 !== 0 && (c2[19] = b3, h3.length++), h3;
      };
      Math.imul || (L2 = q);
      function ge(v32, i, a2) {
        a2.negative = i.negative ^ v32.negative, a2.length = v32.length + i.length;
        for (var h3 = 0, s3 = 0, u4 = 0;u4 < a2.length - 1; u4++) {
          var c2 = s3;
          s3 = 0;
          for (var b3 = h3 & 67108863, l3 = Math.min(u4, i.length - 1), n32 = Math.max(0, u4 - v32.length + 1);n32 <= l3; n32++) {
            var d2 = u4 - n32, w3 = v32.words[d2] | 0, g2 = i.words[n32] | 0, _5 = w3 * g2, A6 = _5 & 67108863;
            c2 = c2 + (_5 / 67108864 | 0) | 0, A6 = A6 + b3 | 0, b3 = A6 & 67108863, c2 = c2 + (A6 >>> 26) | 0, s3 += c2 >>> 26, c2 &= 67108863;
          }
          a2.words[u4] = b3, h3 = c2, c2 = s3;
        }
        return h3 !== 0 ? a2.words[u4] = h3 : a2.length--, a2.strip();
      }
      function _e(v32, i, a2) {
        var h3 = new N4;
        return h3.mulp(v32, i, a2);
      }
      f2.prototype.mulTo = function(i, a2) {
        var h3, s3 = this.length + i.length;
        return this.length === 10 && i.length === 10 ? h3 = L2(this, i, a2) : s3 < 63 ? h3 = q(this, i, a2) : s3 < 1024 ? h3 = ge(this, i, a2) : h3 = _e(this, i, a2), h3;
      };
      function N4(v32, i) {
        this.x = v32, this.y = i;
      }
      N4.prototype.makeRBT = function(i) {
        for (var a2 = new Array(i), h3 = f2.prototype._countBits(i) - 1, s3 = 0;s3 < i; s3++)
          a2[s3] = this.revBin(s3, h3, i);
        return a2;
      }, N4.prototype.revBin = function(i, a2, h3) {
        if (i === 0 || i === h3 - 1)
          return i;
        for (var s3 = 0, u4 = 0;u4 < a2; u4++)
          s3 |= (i & 1) << a2 - u4 - 1, i >>= 1;
        return s3;
      }, N4.prototype.permute = function(i, a2, h3, s3, u4, c2) {
        for (var b3 = 0;b3 < c2; b3++)
          s3[b3] = a2[i[b3]], u4[b3] = h3[i[b3]];
      }, N4.prototype.transform = function(i, a2, h3, s3, u4, c2) {
        this.permute(c2, i, a2, h3, s3, u4);
        for (var b3 = 1;b3 < u4; b3 <<= 1)
          for (var l3 = b3 << 1, n32 = Math.cos(2 * Math.PI / l3), d2 = Math.sin(2 * Math.PI / l3), w3 = 0;w3 < u4; w3 += l3)
            for (var g2 = n32, _5 = d2, A6 = 0;A6 < b3; A6++) {
              var R4 = h3[w3 + A6], I2 = s3[w3 + A6], Me = h3[w3 + A6 + b3], k32 = s3[w3 + A6 + b3], D3 = g2 * Me - _5 * k32;
              k32 = g2 * k32 + _5 * Me, Me = D3, h3[w3 + A6] = R4 + Me, s3[w3 + A6] = I2 + k32, h3[w3 + A6 + b3] = R4 - Me, s3[w3 + A6 + b3] = I2 - k32, A6 !== l3 && (D3 = n32 * g2 - d2 * _5, _5 = n32 * _5 + d2 * g2, g2 = D3);
            }
      }, N4.prototype.guessLen13b = function(i, a2) {
        var h3 = Math.max(a2, i) | 1, s3 = h3 & 1, u4 = 0;
        for (h3 = h3 / 2 | 0;h3; h3 = h3 >>> 1)
          u4++;
        return 1 << u4 + 1 + s3;
      }, N4.prototype.conjugate = function(i, a2, h3) {
        if (!(h3 <= 1))
          for (var s3 = 0;s3 < h3 / 2; s3++) {
            var u4 = i[s3];
            i[s3] = i[h3 - s3 - 1], i[h3 - s3 - 1] = u4, u4 = a2[s3], a2[s3] = -a2[h3 - s3 - 1], a2[h3 - s3 - 1] = -u4;
          }
      }, N4.prototype.normalize13b = function(i, a2) {
        for (var h3 = 0, s3 = 0;s3 < a2 / 2; s3++) {
          var u4 = Math.round(i[2 * s3 + 1] / a2) * 8192 + Math.round(i[2 * s3] / a2) + h3;
          i[s3] = u4 & 67108863, u4 < 67108864 ? h3 = 0 : h3 = u4 / 67108864 | 0;
        }
        return i;
      }, N4.prototype.convert13b = function(i, a2, h3, s3) {
        for (var u4 = 0, c2 = 0;c2 < a2; c2++)
          u4 = u4 + (i[c2] | 0), h3[2 * c2] = u4 & 8191, u4 = u4 >>> 13, h3[2 * c2 + 1] = u4 & 8191, u4 = u4 >>> 13;
        for (c2 = 2 * a2;c2 < s3; ++c2)
          h3[c2] = 0;
        r2(u4 === 0), r2((u4 & -8192) === 0);
      }, N4.prototype.stub = function(i) {
        for (var a2 = new Array(i), h3 = 0;h3 < i; h3++)
          a2[h3] = 0;
        return a2;
      }, N4.prototype.mulp = function(i, a2, h3) {
        var s3 = 2 * this.guessLen13b(i.length, a2.length), u4 = this.makeRBT(s3), c2 = this.stub(s3), b3 = new Array(s3), l3 = new Array(s3), n32 = new Array(s3), d2 = new Array(s3), w3 = new Array(s3), g2 = new Array(s3), _5 = h3.words;
        _5.length = s3, this.convert13b(i.words, i.length, b3, s3), this.convert13b(a2.words, a2.length, d2, s3), this.transform(b3, c2, l3, n32, s3, u4), this.transform(d2, c2, w3, g2, s3, u4);
        for (var A6 = 0;A6 < s3; A6++) {
          var R4 = l3[A6] * w3[A6] - n32[A6] * g2[A6];
          n32[A6] = l3[A6] * g2[A6] + n32[A6] * w3[A6], l3[A6] = R4;
        }
        return this.conjugate(l3, n32, s3), this.transform(l3, n32, _5, c2, s3, u4), this.conjugate(_5, c2, s3), this.normalize13b(_5, s3), h3.negative = i.negative ^ a2.negative, h3.length = i.length + a2.length, h3.strip();
      }, f2.prototype.mul = function(i) {
        var a2 = new f2(null);
        return a2.words = new Array(this.length + i.length), this.mulTo(i, a2);
      }, f2.prototype.mulf = function(i) {
        var a2 = new f2(null);
        return a2.words = new Array(this.length + i.length), _e(this, i, a2);
      }, f2.prototype.imul = function(i) {
        return this.clone().mulTo(i, this);
      }, f2.prototype.imuln = function(i) {
        r2(typeof i == "number"), r2(i < 67108864);
        for (var a2 = 0, h3 = 0;h3 < this.length; h3++) {
          var s3 = (this.words[h3] | 0) * i, u4 = (s3 & 67108863) + (a2 & 67108863);
          a2 >>= 26, a2 += s3 / 67108864 | 0, a2 += u4 >>> 26, this.words[h3] = u4 & 67108863;
        }
        return a2 !== 0 && (this.words[h3] = a2, this.length++), this;
      }, f2.prototype.muln = function(i) {
        return this.clone().imuln(i);
      }, f2.prototype.sqr = function() {
        return this.mul(this);
      }, f2.prototype.isqr = function() {
        return this.imul(this.clone());
      }, f2.prototype.pow = function(i) {
        var a2 = B5(i);
        if (a2.length === 0)
          return new f2(1);
        for (var h3 = this, s3 = 0;s3 < a2.length && a2[s3] === 0; s3++, h3 = h3.sqr())
          ;
        if (++s3 < a2.length)
          for (var u4 = h3.sqr();s3 < a2.length; s3++, u4 = u4.sqr())
            a2[s3] !== 0 && (h3 = h3.mul(u4));
        return h3;
      }, f2.prototype.iushln = function(i) {
        r2(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26, s3 = 67108863 >>> 26 - a2 << 26 - a2, u4;
        if (a2 !== 0) {
          var c2 = 0;
          for (u4 = 0;u4 < this.length; u4++) {
            var b3 = this.words[u4] & s3, l3 = (this.words[u4] | 0) - b3 << a2;
            this.words[u4] = l3 | c2, c2 = b3 >>> 26 - a2;
          }
          c2 && (this.words[u4] = c2, this.length++);
        }
        if (h3 !== 0) {
          for (u4 = this.length - 1;u4 >= 0; u4--)
            this.words[u4 + h3] = this.words[u4];
          for (u4 = 0;u4 < h3; u4++)
            this.words[u4] = 0;
          this.length += h3;
        }
        return this.strip();
      }, f2.prototype.ishln = function(i) {
        return r2(this.negative === 0), this.iushln(i);
      }, f2.prototype.iushrn = function(i, a2, h3) {
        r2(typeof i == "number" && i >= 0);
        var s3;
        a2 ? s3 = (a2 - a2 % 26) / 26 : s3 = 0;
        var u4 = i % 26, c2 = Math.min((i - u4) / 26, this.length), b3 = 67108863 ^ 67108863 >>> u4 << u4, l3 = h3;
        if (s3 -= c2, s3 = Math.max(0, s3), l3) {
          for (var n32 = 0;n32 < c2; n32++)
            l3.words[n32] = this.words[n32];
          l3.length = c2;
        }
        if (c2 !== 0)
          if (this.length > c2)
            for (this.length -= c2, n32 = 0;n32 < this.length; n32++)
              this.words[n32] = this.words[n32 + c2];
          else
            this.words[0] = 0, this.length = 1;
        var d2 = 0;
        for (n32 = this.length - 1;n32 >= 0 && (d2 !== 0 || n32 >= s3); n32--) {
          var w3 = this.words[n32] | 0;
          this.words[n32] = d2 << 26 - u4 | w3 >>> u4, d2 = w3 & b3;
        }
        return l3 && d2 !== 0 && (l3.words[l3.length++] = d2), this.length === 0 && (this.words[0] = 0, this.length = 1), this.strip();
      }, f2.prototype.ishrn = function(i, a2, h3) {
        return r2(this.negative === 0), this.iushrn(i, a2, h3);
      }, f2.prototype.shln = function(i) {
        return this.clone().ishln(i);
      }, f2.prototype.ushln = function(i) {
        return this.clone().iushln(i);
      }, f2.prototype.shrn = function(i) {
        return this.clone().ishrn(i);
      }, f2.prototype.ushrn = function(i) {
        return this.clone().iushrn(i);
      }, f2.prototype.testn = function(i) {
        r2(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26, s3 = 1 << a2;
        if (this.length <= h3)
          return false;
        var u4 = this.words[h3];
        return !!(u4 & s3);
      }, f2.prototype.imaskn = function(i) {
        r2(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26;
        if (r2(this.negative === 0, "imaskn works only with positive numbers"), this.length <= h3)
          return this;
        if (a2 !== 0 && h3++, this.length = Math.min(h3, this.length), a2 !== 0) {
          var s3 = 67108863 ^ 67108863 >>> a2 << a2;
          this.words[this.length - 1] &= s3;
        }
        return this.strip();
      }, f2.prototype.maskn = function(i) {
        return this.clone().imaskn(i);
      }, f2.prototype.iaddn = function(i) {
        return r2(typeof i == "number"), r2(i < 67108864), i < 0 ? this.isubn(-i) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) < i ? (this.words[0] = i - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(i), this.negative = 1, this) : this._iaddn(i);
      }, f2.prototype._iaddn = function(i) {
        this.words[0] += i;
        for (var a2 = 0;a2 < this.length && this.words[a2] >= 67108864; a2++)
          this.words[a2] -= 67108864, a2 === this.length - 1 ? this.words[a2 + 1] = 1 : this.words[a2 + 1]++;
        return this.length = Math.max(this.length, a2 + 1), this;
      }, f2.prototype.isubn = function(i) {
        if (r2(typeof i == "number"), r2(i < 67108864), i < 0)
          return this.iaddn(-i);
        if (this.negative !== 0)
          return this.negative = 0, this.iaddn(i), this.negative = 1, this;
        if (this.words[0] -= i, this.length === 1 && this.words[0] < 0)
          this.words[0] = -this.words[0], this.negative = 1;
        else
          for (var a2 = 0;a2 < this.length && this.words[a2] < 0; a2++)
            this.words[a2] += 67108864, this.words[a2 + 1] -= 1;
        return this.strip();
      }, f2.prototype.addn = function(i) {
        return this.clone().iaddn(i);
      }, f2.prototype.subn = function(i) {
        return this.clone().isubn(i);
      }, f2.prototype.iabs = function() {
        return this.negative = 0, this;
      }, f2.prototype.abs = function() {
        return this.clone().iabs();
      }, f2.prototype._ishlnsubmul = function(i, a2, h3) {
        var s3 = i.length + h3, u4;
        this._expand(s3);
        var c2, b3 = 0;
        for (u4 = 0;u4 < i.length; u4++) {
          c2 = (this.words[u4 + h3] | 0) + b3;
          var l3 = (i.words[u4] | 0) * a2;
          c2 -= l3 & 67108863, b3 = (c2 >> 26) - (l3 / 67108864 | 0), this.words[u4 + h3] = c2 & 67108863;
        }
        for (;u4 < this.length - h3; u4++)
          c2 = (this.words[u4 + h3] | 0) + b3, b3 = c2 >> 26, this.words[u4 + h3] = c2 & 67108863;
        if (b3 === 0)
          return this.strip();
        for (r2(b3 === -1), b3 = 0, u4 = 0;u4 < this.length; u4++)
          c2 = -(this.words[u4] | 0) + b3, b3 = c2 >> 26, this.words[u4] = c2 & 67108863;
        return this.negative = 1, this.strip();
      }, f2.prototype._wordDiv = function(i, a2) {
        var h3 = this.length - i.length, s3 = this.clone(), u4 = i, c2 = u4.words[u4.length - 1] | 0, b3 = this._countBits(c2);
        h3 = 26 - b3, h3 !== 0 && (u4 = u4.ushln(h3), s3.iushln(h3), c2 = u4.words[u4.length - 1] | 0);
        var l3 = s3.length - u4.length, n32;
        if (a2 !== "mod") {
          n32 = new f2(null), n32.length = l3 + 1, n32.words = new Array(n32.length);
          for (var d2 = 0;d2 < n32.length; d2++)
            n32.words[d2] = 0;
        }
        var w3 = s3.clone()._ishlnsubmul(u4, 1, l3);
        w3.negative === 0 && (s3 = w3, n32 && (n32.words[l3] = 1));
        for (var g2 = l3 - 1;g2 >= 0; g2--) {
          var _5 = (s3.words[u4.length + g2] | 0) * 67108864 + (s3.words[u4.length + g2 - 1] | 0);
          for (_5 = Math.min(_5 / c2 | 0, 67108863), s3._ishlnsubmul(u4, _5, g2);s3.negative !== 0; )
            _5--, s3.negative = 0, s3._ishlnsubmul(u4, 1, g2), s3.isZero() || (s3.negative ^= 1);
          n32 && (n32.words[g2] = _5);
        }
        return n32 && n32.strip(), s3.strip(), a2 !== "div" && h3 !== 0 && s3.iushrn(h3), { div: n32 || null, mod: s3 };
      }, f2.prototype.divmod = function(i, a2, h3) {
        if (r2(!i.isZero()), this.isZero())
          return { div: new f2(0), mod: new f2(0) };
        var s3, u4, c2;
        return this.negative !== 0 && i.negative === 0 ? (c2 = this.neg().divmod(i, a2), a2 !== "mod" && (s3 = c2.div.neg()), a2 !== "div" && (u4 = c2.mod.neg(), h3 && u4.negative !== 0 && u4.iadd(i)), { div: s3, mod: u4 }) : this.negative === 0 && i.negative !== 0 ? (c2 = this.divmod(i.neg(), a2), a2 !== "mod" && (s3 = c2.div.neg()), { div: s3, mod: c2.mod }) : (this.negative & i.negative) !== 0 ? (c2 = this.neg().divmod(i.neg(), a2), a2 !== "div" && (u4 = c2.mod.neg(), h3 && u4.negative !== 0 && u4.isub(i)), { div: c2.div, mod: u4 }) : i.length > this.length || this.cmp(i) < 0 ? { div: new f2(0), mod: this } : i.length === 1 ? a2 === "div" ? { div: this.divn(i.words[0]), mod: null } : a2 === "mod" ? { div: null, mod: new f2(this.modn(i.words[0])) } : { div: this.divn(i.words[0]), mod: new f2(this.modn(i.words[0])) } : this._wordDiv(i, a2);
      }, f2.prototype.div = function(i) {
        return this.divmod(i, "div", false).div;
      }, f2.prototype.mod = function(i) {
        return this.divmod(i, "mod", false).mod;
      }, f2.prototype.umod = function(i) {
        return this.divmod(i, "mod", true).mod;
      }, f2.prototype.divRound = function(i) {
        var a2 = this.divmod(i);
        if (a2.mod.isZero())
          return a2.div;
        var h3 = a2.div.negative !== 0 ? a2.mod.isub(i) : a2.mod, s3 = i.ushrn(1), u4 = i.andln(1), c2 = h3.cmp(s3);
        return c2 < 0 || u4 === 1 && c2 === 0 ? a2.div : a2.div.negative !== 0 ? a2.div.isubn(1) : a2.div.iaddn(1);
      }, f2.prototype.modn = function(i) {
        r2(i <= 67108863);
        for (var a2 = (1 << 26) % i, h3 = 0, s3 = this.length - 1;s3 >= 0; s3--)
          h3 = (a2 * h3 + (this.words[s3] | 0)) % i;
        return h3;
      }, f2.prototype.idivn = function(i) {
        r2(i <= 67108863);
        for (var a2 = 0, h3 = this.length - 1;h3 >= 0; h3--) {
          var s3 = (this.words[h3] | 0) + a2 * 67108864;
          this.words[h3] = s3 / i | 0, a2 = s3 % i;
        }
        return this.strip();
      }, f2.prototype.divn = function(i) {
        return this.clone().idivn(i);
      }, f2.prototype.egcd = function(i) {
        r2(i.negative === 0), r2(!i.isZero());
        var a2 = this, h3 = i.clone();
        a2.negative !== 0 ? a2 = a2.umod(i) : a2 = a2.clone();
        for (var s3 = new f2(1), u4 = new f2(0), c2 = new f2(0), b3 = new f2(1), l3 = 0;a2.isEven() && h3.isEven(); )
          a2.iushrn(1), h3.iushrn(1), ++l3;
        for (var n32 = h3.clone(), d2 = a2.clone();!a2.isZero(); ) {
          for (var w3 = 0, g2 = 1;(a2.words[0] & g2) === 0 && w3 < 26; ++w3, g2 <<= 1)
            ;
          if (w3 > 0)
            for (a2.iushrn(w3);w3-- > 0; )
              (s3.isOdd() || u4.isOdd()) && (s3.iadd(n32), u4.isub(d2)), s3.iushrn(1), u4.iushrn(1);
          for (var _5 = 0, A6 = 1;(h3.words[0] & A6) === 0 && _5 < 26; ++_5, A6 <<= 1)
            ;
          if (_5 > 0)
            for (h3.iushrn(_5);_5-- > 0; )
              (c2.isOdd() || b3.isOdd()) && (c2.iadd(n32), b3.isub(d2)), c2.iushrn(1), b3.iushrn(1);
          a2.cmp(h3) >= 0 ? (a2.isub(h3), s3.isub(c2), u4.isub(b3)) : (h3.isub(a2), c2.isub(s3), b3.isub(u4));
        }
        return { a: c2, b: b3, gcd: h3.iushln(l3) };
      }, f2.prototype._invmp = function(i) {
        r2(i.negative === 0), r2(!i.isZero());
        var a2 = this, h3 = i.clone();
        a2.negative !== 0 ? a2 = a2.umod(i) : a2 = a2.clone();
        for (var s3 = new f2(1), u4 = new f2(0), c2 = h3.clone();a2.cmpn(1) > 0 && h3.cmpn(1) > 0; ) {
          for (var b3 = 0, l3 = 1;(a2.words[0] & l3) === 0 && b3 < 26; ++b3, l3 <<= 1)
            ;
          if (b3 > 0)
            for (a2.iushrn(b3);b3-- > 0; )
              s3.isOdd() && s3.iadd(c2), s3.iushrn(1);
          for (var n32 = 0, d2 = 1;(h3.words[0] & d2) === 0 && n32 < 26; ++n32, d2 <<= 1)
            ;
          if (n32 > 0)
            for (h3.iushrn(n32);n32-- > 0; )
              u4.isOdd() && u4.iadd(c2), u4.iushrn(1);
          a2.cmp(h3) >= 0 ? (a2.isub(h3), s3.isub(u4)) : (h3.isub(a2), u4.isub(s3));
        }
        var w3;
        return a2.cmpn(1) === 0 ? w3 = s3 : w3 = u4, w3.cmpn(0) < 0 && w3.iadd(i), w3;
      }, f2.prototype.gcd = function(i) {
        if (this.isZero())
          return i.abs();
        if (i.isZero())
          return this.abs();
        var a2 = this.clone(), h3 = i.clone();
        a2.negative = 0, h3.negative = 0;
        for (var s3 = 0;a2.isEven() && h3.isEven(); s3++)
          a2.iushrn(1), h3.iushrn(1);
        do {
          for (;a2.isEven(); )
            a2.iushrn(1);
          for (;h3.isEven(); )
            h3.iushrn(1);
          var u4 = a2.cmp(h3);
          if (u4 < 0) {
            var c2 = a2;
            a2 = h3, h3 = c2;
          } else if (u4 === 0 || h3.cmpn(1) === 0)
            break;
          a2.isub(h3);
        } while (true);
        return h3.iushln(s3);
      }, f2.prototype.invm = function(i) {
        return this.egcd(i).a.umod(i);
      }, f2.prototype.isEven = function() {
        return (this.words[0] & 1) === 0;
      }, f2.prototype.isOdd = function() {
        return (this.words[0] & 1) === 1;
      }, f2.prototype.andln = function(i) {
        return this.words[0] & i;
      }, f2.prototype.bincn = function(i) {
        r2(typeof i == "number");
        var a2 = i % 26, h3 = (i - a2) / 26, s3 = 1 << a2;
        if (this.length <= h3)
          return this._expand(h3 + 1), this.words[h3] |= s3, this;
        for (var u4 = s3, c2 = h3;u4 !== 0 && c2 < this.length; c2++) {
          var b3 = this.words[c2] | 0;
          b3 += u4, u4 = b3 >>> 26, b3 &= 67108863, this.words[c2] = b3;
        }
        return u4 !== 0 && (this.words[c2] = u4, this.length++), this;
      }, f2.prototype.isZero = function() {
        return this.length === 1 && this.words[0] === 0;
      }, f2.prototype.cmpn = function(i) {
        var a2 = i < 0;
        if (this.negative !== 0 && !a2)
          return -1;
        if (this.negative === 0 && a2)
          return 1;
        this.strip();
        var h3;
        if (this.length > 1)
          h3 = 1;
        else {
          a2 && (i = -i), r2(i <= 67108863, "Number is too big");
          var s3 = this.words[0] | 0;
          h3 = s3 === i ? 0 : s3 < i ? -1 : 1;
        }
        return this.negative !== 0 ? -h3 | 0 : h3;
      }, f2.prototype.cmp = function(i) {
        if (this.negative !== 0 && i.negative === 0)
          return -1;
        if (this.negative === 0 && i.negative !== 0)
          return 1;
        var a2 = this.ucmp(i);
        return this.negative !== 0 ? -a2 | 0 : a2;
      }, f2.prototype.ucmp = function(i) {
        if (this.length > i.length)
          return 1;
        if (this.length < i.length)
          return -1;
        for (var a2 = 0, h3 = this.length - 1;h3 >= 0; h3--) {
          var s3 = this.words[h3] | 0, u4 = i.words[h3] | 0;
          if (s3 !== u4) {
            s3 < u4 ? a2 = -1 : s3 > u4 && (a2 = 1);
            break;
          }
        }
        return a2;
      }, f2.prototype.gtn = function(i) {
        return this.cmpn(i) === 1;
      }, f2.prototype.gt = function(i) {
        return this.cmp(i) === 1;
      }, f2.prototype.gten = function(i) {
        return this.cmpn(i) >= 0;
      }, f2.prototype.gte = function(i) {
        return this.cmp(i) >= 0;
      }, f2.prototype.ltn = function(i) {
        return this.cmpn(i) === -1;
      }, f2.prototype.lt = function(i) {
        return this.cmp(i) === -1;
      }, f2.prototype.lten = function(i) {
        return this.cmpn(i) <= 0;
      }, f2.prototype.lte = function(i) {
        return this.cmp(i) <= 0;
      }, f2.prototype.eqn = function(i) {
        return this.cmpn(i) === 0;
      }, f2.prototype.eq = function(i) {
        return this.cmp(i) === 0;
      }, f2.red = function(i) {
        return new P(i);
      }, f2.prototype.toRed = function(i) {
        return r2(!this.red, "Already a number in reduction context"), r2(this.negative === 0, "red works only with positives"), i.convertTo(this)._forceRed(i);
      }, f2.prototype.fromRed = function() {
        return r2(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
      }, f2.prototype._forceRed = function(i) {
        return this.red = i, this;
      }, f2.prototype.forceRed = function(i) {
        return r2(!this.red, "Already a number in reduction context"), this._forceRed(i);
      }, f2.prototype.redAdd = function(i) {
        return r2(this.red, "redAdd works only with red numbers"), this.red.add(this, i);
      }, f2.prototype.redIAdd = function(i) {
        return r2(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, i);
      }, f2.prototype.redSub = function(i) {
        return r2(this.red, "redSub works only with red numbers"), this.red.sub(this, i);
      }, f2.prototype.redISub = function(i) {
        return r2(this.red, "redISub works only with red numbers"), this.red.isub(this, i);
      }, f2.prototype.redShl = function(i) {
        return r2(this.red, "redShl works only with red numbers"), this.red.shl(this, i);
      }, f2.prototype.redMul = function(i) {
        return r2(this.red, "redMul works only with red numbers"), this.red._verify2(this, i), this.red.mul(this, i);
      }, f2.prototype.redIMul = function(i) {
        return r2(this.red, "redMul works only with red numbers"), this.red._verify2(this, i), this.red.imul(this, i);
      }, f2.prototype.redSqr = function() {
        return r2(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
      }, f2.prototype.redISqr = function() {
        return r2(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
      }, f2.prototype.redSqrt = function() {
        return r2(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
      }, f2.prototype.redInvm = function() {
        return r2(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
      }, f2.prototype.redNeg = function() {
        return r2(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
      }, f2.prototype.redPow = function(i) {
        return r2(this.red && !i.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, i);
      };
      var we = { k256: null, p224: null, p192: null, p25519: null };
      function ye(v32, i) {
        this.name = v32, this.p = new f2(i, 16), this.n = this.p.bitLength(), this.k = new f2(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
      }
      ye.prototype._tmp = function() {
        var i = new f2(null);
        return i.words = new Array(Math.ceil(this.n / 13)), i;
      }, ye.prototype.ireduce = function(i) {
        var a2 = i, h3;
        do
          this.split(a2, this.tmp), a2 = this.imulK(a2), a2 = a2.iadd(this.tmp), h3 = a2.bitLength();
        while (h3 > this.n);
        var s3 = h3 < this.n ? -1 : a2.ucmp(this.p);
        return s3 === 0 ? (a2.words[0] = 0, a2.length = 1) : s3 > 0 ? a2.isub(this.p) : a2.strip !== undefined ? a2.strip() : a2._strip(), a2;
      }, ye.prototype.split = function(i, a2) {
        i.iushrn(this.n, 0, a2);
      }, ye.prototype.imulK = function(i) {
        return i.imul(this.k);
      };
      function xe() {
        ye.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      o2(xe, ye), xe.prototype.split = function(i, a2) {
        for (var h3 = 4194303, s3 = Math.min(i.length, 9), u4 = 0;u4 < s3; u4++)
          a2.words[u4] = i.words[u4];
        if (a2.length = s3, i.length <= 9) {
          i.words[0] = 0, i.length = 1;
          return;
        }
        var c2 = i.words[9];
        for (a2.words[a2.length++] = c2 & h3, u4 = 10;u4 < i.length; u4++) {
          var b3 = i.words[u4] | 0;
          i.words[u4 - 10] = (b3 & h3) << 4 | c2 >>> 22, c2 = b3;
        }
        c2 >>>= 22, i.words[u4 - 10] = c2, c2 === 0 && i.length > 10 ? i.length -= 10 : i.length -= 9;
      }, xe.prototype.imulK = function(i) {
        i.words[i.length] = 0, i.words[i.length + 1] = 0, i.length += 2;
        for (var a2 = 0, h3 = 0;h3 < i.length; h3++) {
          var s3 = i.words[h3] | 0;
          a2 += s3 * 977, i.words[h3] = a2 & 67108863, a2 = s3 * 64 + (a2 / 67108864 | 0);
        }
        return i.words[i.length - 1] === 0 && (i.length--, i.words[i.length - 1] === 0 && i.length--), i;
      };
      function Re() {
        ye.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      o2(Re, ye);
      function Ee() {
        ye.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      o2(Ee, ye);
      function Ae() {
        ye.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      o2(Ae, ye), Ae.prototype.imulK = function(i) {
        for (var a2 = 0, h3 = 0;h3 < i.length; h3++) {
          var s3 = (i.words[h3] | 0) * 19 + a2, u4 = s3 & 67108863;
          s3 >>>= 26, i.words[h3] = u4, a2 = s3;
        }
        return a2 !== 0 && (i.words[i.length++] = a2), i;
      }, f2._prime = function(i) {
        if (we[i])
          return we[i];
        var a2;
        if (i === "k256")
          a2 = new xe;
        else if (i === "p224")
          a2 = new Re;
        else if (i === "p192")
          a2 = new Ee;
        else if (i === "p25519")
          a2 = new Ae;
        else
          throw new Error("Unknown prime " + i);
        return we[i] = a2, a2;
      };
      function P(v32) {
        if (typeof v32 == "string") {
          var i = f2._prime(v32);
          this.m = i.p, this.prime = i;
        } else
          r2(v32.gtn(1), "modulus must be greater than 1"), this.m = v32, this.prime = null;
      }
      P.prototype._verify1 = function(i) {
        r2(i.negative === 0, "red works only with positives"), r2(i.red, "red works only with red numbers");
      }, P.prototype._verify2 = function(i, a2) {
        r2((i.negative | a2.negative) === 0, "red works only with positives"), r2(i.red && i.red === a2.red, "red works only with red numbers");
      }, P.prototype.imod = function(i) {
        return this.prime ? this.prime.ireduce(i)._forceRed(this) : i.umod(this.m)._forceRed(this);
      }, P.prototype.neg = function(i) {
        return i.isZero() ? i.clone() : this.m.sub(i)._forceRed(this);
      }, P.prototype.add = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.add(a2);
        return h3.cmp(this.m) >= 0 && h3.isub(this.m), h3._forceRed(this);
      }, P.prototype.iadd = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.iadd(a2);
        return h3.cmp(this.m) >= 0 && h3.isub(this.m), h3;
      }, P.prototype.sub = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.sub(a2);
        return h3.cmpn(0) < 0 && h3.iadd(this.m), h3._forceRed(this);
      }, P.prototype.isub = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.isub(a2);
        return h3.cmpn(0) < 0 && h3.iadd(this.m), h3;
      }, P.prototype.shl = function(i, a2) {
        return this._verify1(i), this.imod(i.ushln(a2));
      }, P.prototype.imul = function(i, a2) {
        return this._verify2(i, a2), this.imod(i.imul(a2));
      }, P.prototype.mul = function(i, a2) {
        return this._verify2(i, a2), this.imod(i.mul(a2));
      }, P.prototype.isqr = function(i) {
        return this.imul(i, i.clone());
      }, P.prototype.sqr = function(i) {
        return this.mul(i, i);
      }, P.prototype.sqrt = function(i) {
        if (i.isZero())
          return i.clone();
        var a2 = this.m.andln(3);
        if (r2(a2 % 2 === 1), a2 === 3) {
          var h3 = this.m.add(new f2(1)).iushrn(2);
          return this.pow(i, h3);
        }
        for (var s3 = this.m.subn(1), u4 = 0;!s3.isZero() && s3.andln(1) === 0; )
          u4++, s3.iushrn(1);
        r2(!s3.isZero());
        var c2 = new f2(1).toRed(this), b3 = c2.redNeg(), l3 = this.m.subn(1).iushrn(1), n32 = this.m.bitLength();
        for (n32 = new f2(2 * n32 * n32).toRed(this);this.pow(n32, l3).cmp(b3) !== 0; )
          n32.redIAdd(b3);
        for (var d2 = this.pow(n32, s3), w3 = this.pow(i, s3.addn(1).iushrn(1)), g2 = this.pow(i, s3), _5 = u4;g2.cmp(c2) !== 0; ) {
          for (var A6 = g2, R4 = 0;A6.cmp(c2) !== 0; R4++)
            A6 = A6.redSqr();
          r2(R4 < _5);
          var I2 = this.pow(d2, new f2(1).iushln(_5 - R4 - 1));
          w3 = w3.redMul(I2), d2 = I2.redSqr(), g2 = g2.redMul(d2), _5 = R4;
        }
        return w3;
      }, P.prototype.invm = function(i) {
        var a2 = i._invmp(this.m);
        return a2.negative !== 0 ? (a2.negative = 0, this.imod(a2).redNeg()) : this.imod(a2);
      }, P.prototype.pow = function(i, a2) {
        if (a2.isZero())
          return new f2(1).toRed(this);
        if (a2.cmpn(1) === 0)
          return i.clone();
        var h3 = 4, s3 = new Array(1 << h3);
        s3[0] = new f2(1).toRed(this), s3[1] = i;
        for (var u4 = 2;u4 < s3.length; u4++)
          s3[u4] = this.mul(s3[u4 - 1], i);
        var c2 = s3[0], b3 = 0, l3 = 0, n32 = a2.bitLength() % 26;
        for (n32 === 0 && (n32 = 26), u4 = a2.length - 1;u4 >= 0; u4--) {
          for (var d2 = a2.words[u4], w3 = n32 - 1;w3 >= 0; w3--) {
            var g2 = d2 >> w3 & 1;
            if (c2 !== s3[0] && (c2 = this.sqr(c2)), g2 === 0 && b3 === 0) {
              l3 = 0;
              continue;
            }
            b3 <<= 1, b3 |= g2, l3++, !(l3 !== h3 && (u4 !== 0 || w3 !== 0)) && (c2 = this.mul(c2, s3[b3]), l3 = 0, b3 = 0);
          }
          n32 = 26;
        }
        return c2;
      }, P.prototype.convertTo = function(i) {
        var a2 = i.umod(this.m);
        return a2 === i ? a2.clone() : a2;
      }, P.prototype.convertFrom = function(i) {
        var a2 = i.clone();
        return a2.red = null, a2;
      }, f2.mont = function(i) {
        return new Se(i);
      };
      function Se(v32) {
        P.call(this, v32), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new f2(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
      }
      o2(Se, P), Se.prototype.convertTo = function(i) {
        return this.imod(i.ushln(this.shift));
      }, Se.prototype.convertFrom = function(i) {
        var a2 = this.imod(i.mul(this.rinv));
        return a2.red = null, a2;
      }, Se.prototype.imul = function(i, a2) {
        if (i.isZero() || a2.isZero())
          return i.words[0] = 0, i.length = 1, i;
        var h3 = i.imul(a2), s3 = h3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u4 = h3.isub(s3).iushrn(this.shift), c2 = u4;
        return u4.cmp(this.m) >= 0 ? c2 = u4.isub(this.m) : u4.cmpn(0) < 0 && (c2 = u4.iadd(this.m)), c2._forceRed(this);
      }, Se.prototype.mul = function(i, a2) {
        if (i.isZero() || a2.isZero())
          return new f2(0)._forceRed(this);
        var h3 = i.mul(a2), s3 = h3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u4 = h3.isub(s3).iushrn(this.shift), c2 = u4;
        return u4.cmp(this.m) >= 0 ? c2 = u4.isub(this.m) : u4.cmpn(0) < 0 && (c2 = u4.iadd(this.m)), c2._forceRed(this);
      }, Se.prototype.invm = function(i) {
        var a2 = this.imod(i._invmp(this.m).mul(this.r2));
        return a2._forceRed(this);
      };
    })(typeof ed > "u" || ed, ky);
  });
  h02 = T2((Yk, Ly) => {
    var s02 = Ut(), Ff = s02.Buffer, Er = {}, Ar;
    for (Ar in s02)
      !s02.hasOwnProperty(Ar) || Ar === "SlowBuffer" || Ar === "Buffer" || (Er[Ar] = s02[Ar]);
    var Uf = Er.Buffer = {};
    for (Ar in Ff)
      !Ff.hasOwnProperty(Ar) || Ar === "allocUnsafe" || Ar === "allocUnsafeSlow" || (Uf[Ar] = Ff[Ar]);
    Er.Buffer.prototype = Ff.prototype;
    (!Uf.from || Uf.from === Uint8Array.from) && (Uf.from = function(t3, e2, r2) {
      if (typeof t3 == "number")
        throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof t3);
      if (t3 && typeof t3.length > "u")
        throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof t3);
      return Ff(t3, e2, r2);
    });
    Uf.alloc || (Uf.alloc = function(t3, e2, r2) {
      if (typeof t3 != "number")
        throw new TypeError('The "size" argument must be of type number. Received type ' + typeof t3);
      if (t3 < 0 || t3 >= 2 * (1 << 30))
        throw new RangeError('The value "' + t3 + '" is invalid for option "size"');
      var o2 = Ff(t3);
      return !e2 || e2.length === 0 ? o2.fill(0) : typeof r2 == "string" ? o2.fill(e2, r2) : o2.fill(e2), o2;
    });
    if (!Er.kStringMaxLength)
      try {
        Er.kStringMaxLength = process.binding("buffer").kStringMaxLength;
      } catch {
      }
    Er.constants || (Er.constants = { MAX_LENGTH: Er.kMaxLength }, Er.kStringMaxLength && (Er.constants.MAX_STRING_LENGTH = Er.kStringMaxLength));
    Ly.exports = Er;
  });
  u02 = T2((Ny) => {
    var aB = Ie();
    function Rr(t3) {
      this._reporterState = { obj: null, path: [], options: t3 || {}, errors: [] };
    }
    Ny.Reporter = Rr;
    Rr.prototype.isError = function(e2) {
      return e2 instanceof zf;
    };
    Rr.prototype.save = function() {
      let e2 = this._reporterState;
      return { obj: e2.obj, pathLen: e2.path.length };
    };
    Rr.prototype.restore = function(e2) {
      let r2 = this._reporterState;
      r2.obj = e2.obj, r2.path = r2.path.slice(0, e2.pathLen);
    };
    Rr.prototype.enterKey = function(e2) {
      return this._reporterState.path.push(e2);
    };
    Rr.prototype.exitKey = function(e2) {
      let r2 = this._reporterState;
      r2.path = r2.path.slice(0, e2 - 1);
    };
    Rr.prototype.leaveKey = function(e2, r2, o2) {
      let f2 = this._reporterState;
      this.exitKey(e2), f2.obj !== null && (f2.obj[r2] = o2);
    };
    Rr.prototype.path = function() {
      return this._reporterState.path.join("/");
    };
    Rr.prototype.enterObject = function() {
      let e2 = this._reporterState, r2 = e2.obj;
      return e2.obj = {}, r2;
    };
    Rr.prototype.leaveObject = function(e2) {
      let r2 = this._reporterState, o2 = r2.obj;
      return r2.obj = e2, o2;
    };
    Rr.prototype.error = function(e2) {
      let r2, o2 = this._reporterState, f2 = e2 instanceof zf;
      if (f2 ? r2 = e2 : r2 = new zf(o2.path.map(function(p2) {
        return "[" + JSON.stringify(p2) + "]";
      }).join(""), e2.message || e2, e2.stack), !o2.options.partial)
        throw r2;
      return f2 || o2.errors.push(r2), r2;
    };
    Rr.prototype.wrapResult = function(e2) {
      let r2 = this._reporterState;
      return r2.options.partial ? { result: this.isError(e2) ? null : e2, errors: r2.errors } : e2;
    };
    function zf(t3, e2) {
      this.path = t3, this.rethrow(e2);
    }
    aB(zf, Error);
    zf.prototype.rethrow = function(e2) {
      if (this.message = e2 + " at: " + (this.path || "(shallow)"), Error.captureStackTrace && Error.captureStackTrace(this, zf), !this.stack)
        try {
          throw new Error(this.message);
        } catch (r2) {
          this.stack = r2.stack;
        }
      return this;
    };
  });
  Kf = T2((rd) => {
    var oB = Ie(), l02 = u02().Reporter, Hf = h02().Buffer;
    function Br(t3, e2) {
      if (l02.call(this, e2), !Hf.isBuffer(t3)) {
        this.error("Input not Buffer");
        return;
      }
      this.base = t3, this.offset = 0, this.length = t3.length;
    }
    oB(Br, l02);
    rd.DecoderBuffer = Br;
    Br.isDecoderBuffer = function(e2) {
      return e2 instanceof Br ? true : typeof e2 == "object" && Hf.isBuffer(e2.base) && e2.constructor.name === "DecoderBuffer" && typeof e2.offset == "number" && typeof e2.length == "number" && typeof e2.save == "function" && typeof e2.restore == "function" && typeof e2.isEmpty == "function" && typeof e2.readUInt8 == "function" && typeof e2.skip == "function" && typeof e2.raw == "function";
    };
    Br.prototype.save = function() {
      return { offset: this.offset, reporter: l02.prototype.save.call(this) };
    };
    Br.prototype.restore = function(e2) {
      let r2 = new Br(this.base);
      return r2.offset = e2.offset, r2.length = this.offset, this.offset = e2.offset, l02.prototype.restore.call(this, e2.reporter), r2;
    };
    Br.prototype.isEmpty = function() {
      return this.offset === this.length;
    };
    Br.prototype.readUInt8 = function(e2) {
      return this.offset + 1 <= this.length ? this.base.readUInt8(this.offset++, true) : this.error(e2 || "DecoderBuffer overrun");
    };
    Br.prototype.skip = function(e2, r2) {
      if (!(this.offset + e2 <= this.length))
        return this.error(r2 || "DecoderBuffer overrun");
      let o2 = new Br(this.base);
      return o2._reporterState = this._reporterState, o2.offset = this.offset, o2.length = this.offset + e2, this.offset += e2, o2;
    };
    Br.prototype.raw = function(e2) {
      return this.base.slice(e2 ? e2.offset : this.offset, this.length);
    };
    function Wf(t3, e2) {
      if (Array.isArray(t3))
        this.length = 0, this.value = t3.map(function(r2) {
          return Wf.isEncoderBuffer(r2) || (r2 = new Wf(r2, e2)), this.length += r2.length, r2;
        }, this);
      else if (typeof t3 == "number") {
        if (!(0 <= t3 && t3 <= 255))
          return e2.error("non-byte EncoderBuffer value");
        this.value = t3, this.length = 1;
      } else if (typeof t3 == "string")
        this.value = t3, this.length = Hf.byteLength(t3);
      else if (Hf.isBuffer(t3))
        this.value = t3, this.length = t3.length;
      else
        return e2.error("Unsupported type: " + typeof t3);
    }
    rd.EncoderBuffer = Wf;
    Wf.isEncoderBuffer = function(e2) {
      return e2 instanceof Wf ? true : typeof e2 == "object" && e2.constructor.name === "EncoderBuffer" && typeof e2.length == "number" && typeof e2.join == "function";
    };
    Wf.prototype.join = function(e2, r2) {
      return e2 || (e2 = Hf.alloc(this.length)), r2 || (r2 = 0), this.length === 0 || (Array.isArray(this.value) ? this.value.forEach(function(o2) {
        o2.join(e2, r2), r2 += o2.length;
      }) : (typeof this.value == "number" ? e2[r2] = this.value : typeof this.value == "string" ? e2.write(this.value, r2) : Hf.isBuffer(this.value) && this.value.copy(e2, r2), r2 += this.length)), e2;
    };
  });
  d02 = T2((Qk, Py) => {
    var sB = u02().Reporter, hB = Kf().EncoderBuffer, uB = Kf().DecoderBuffer, Qt = ar(), Dy = ["seq", "seqof", "set", "setof", "objid", "bool", "gentime", "utctime", "null_", "enum", "int", "objDesc", "bitstr", "bmpstr", "charstr", "genstr", "graphstr", "ia5str", "iso646str", "numstr", "octstr", "printstr", "t61str", "unistr", "utf8str", "videostr"], lB = ["key", "obj", "use", "optional", "explicit", "implicit", "def", "choice", "any", "contains"].concat(Dy), dB = ["_peekTag", "_decodeTag", "_use", "_decodeStr", "_decodeObjid", "_decodeTime", "_decodeNull", "_decodeInt", "_decodeBool", "_decodeList", "_encodeComposite", "_encodeStr", "_encodeObjid", "_encodeTime", "_encodeNull", "_encodeInt", "_encodeBool"];
    function Ue(t3, e2, r2) {
      let o2 = {};
      this._baseState = o2, o2.name = r2, o2.enc = t3, o2.parent = e2 || null, o2.children = null, o2.tag = null, o2.args = null, o2.reverseArgs = null, o2.choice = null, o2.optional = false, o2.any = false, o2.obj = false, o2.use = null, o2.useDecoder = null, o2.key = null, o2.default = null, o2.explicit = null, o2.implicit = null, o2.contains = null, o2.parent || (o2.children = [], this._wrap());
    }
    Py.exports = Ue;
    var cB = ["enc", "parent", "children", "tag", "args", "reverseArgs", "choice", "optional", "any", "obj", "use", "alteredUse", "key", "default", "explicit", "implicit", "contains"];
    Ue.prototype.clone = function() {
      let e2 = this._baseState, r2 = {};
      cB.forEach(function(f2) {
        r2[f2] = e2[f2];
      });
      let o2 = new this.constructor(r2.parent);
      return o2._baseState = r2, o2;
    };
    Ue.prototype._wrap = function() {
      let e2 = this._baseState;
      lB.forEach(function(r2) {
        this[r2] = function() {
          let f2 = new this.constructor(this);
          return e2.children.push(f2), f2[r2].apply(f2, arguments);
        };
      }, this);
    };
    Ue.prototype._init = function(e2) {
      let r2 = this._baseState;
      Qt(r2.parent === null), e2.call(this), r2.children = r2.children.filter(function(o2) {
        return o2._baseState.parent === this;
      }, this), Qt.equal(r2.children.length, 1, "Root node can have only one child");
    };
    Ue.prototype._useArgs = function(e2) {
      let r2 = this._baseState, o2 = e2.filter(function(f2) {
        return f2 instanceof this.constructor;
      }, this);
      e2 = e2.filter(function(f2) {
        return !(f2 instanceof this.constructor);
      }, this), o2.length !== 0 && (Qt(r2.children === null), r2.children = o2, o2.forEach(function(f2) {
        f2._baseState.parent = this;
      }, this)), e2.length !== 0 && (Qt(r2.args === null), r2.args = e2, r2.reverseArgs = e2.map(function(f2) {
        if (typeof f2 != "object" || f2.constructor !== Object)
          return f2;
        let p2 = {};
        return Object.keys(f2).forEach(function(m32) {
          m32 == (m32 | 0) && (m32 |= 0);
          let y3 = f2[m32];
          p2[y3] = m32;
        }), p2;
      }));
    };
    dB.forEach(function(t3) {
      Ue.prototype[t3] = function() {
        let r2 = this._baseState;
        throw new Error(t3 + " not implemented for encoding: " + r2.enc);
      };
    });
    Dy.forEach(function(t3) {
      Ue.prototype[t3] = function() {
        let r2 = this._baseState, o2 = Array.prototype.slice.call(arguments);
        return Qt(r2.tag === null), r2.tag = t3, this._useArgs(o2), this;
      };
    });
    Ue.prototype.use = function(e2) {
      Qt(e2);
      let r2 = this._baseState;
      return Qt(r2.use === null), r2.use = e2, this;
    };
    Ue.prototype.optional = function() {
      let e2 = this._baseState;
      return e2.optional = true, this;
    };
    Ue.prototype.def = function(e2) {
      let r2 = this._baseState;
      return Qt(r2.default === null), r2.default = e2, r2.optional = true, this;
    };
    Ue.prototype.explicit = function(e2) {
      let r2 = this._baseState;
      return Qt(r2.explicit === null && r2.implicit === null), r2.explicit = e2, this;
    };
    Ue.prototype.implicit = function(e2) {
      let r2 = this._baseState;
      return Qt(r2.explicit === null && r2.implicit === null), r2.implicit = e2, this;
    };
    Ue.prototype.obj = function() {
      let e2 = this._baseState, r2 = Array.prototype.slice.call(arguments);
      return e2.obj = true, r2.length !== 0 && this._useArgs(r2), this;
    };
    Ue.prototype.key = function(e2) {
      let r2 = this._baseState;
      return Qt(r2.key === null), r2.key = e2, this;
    };
    Ue.prototype.any = function() {
      let e2 = this._baseState;
      return e2.any = true, this;
    };
    Ue.prototype.choice = function(e2) {
      let r2 = this._baseState;
      return Qt(r2.choice === null), r2.choice = e2, this._useArgs(Object.keys(e2).map(function(o2) {
        return e2[o2];
      })), this;
    };
    Ue.prototype.contains = function(e2) {
      let r2 = this._baseState;
      return Qt(r2.use === null), r2.contains = e2, this;
    };
    Ue.prototype._decode = function(e2, r2) {
      let o2 = this._baseState;
      if (o2.parent === null)
        return e2.wrapResult(o2.children[0]._decode(e2, r2));
      let f2 = o2.default, p2 = true, m32 = null;
      if (o2.key !== null && (m32 = e2.enterKey(o2.key)), o2.optional) {
        let M3 = null;
        if (o2.explicit !== null ? M3 = o2.explicit : o2.implicit !== null ? M3 = o2.implicit : o2.tag !== null && (M3 = o2.tag), M3 === null && !o2.any) {
          let x5 = e2.save();
          try {
            o2.choice === null ? this._decodeGeneric(o2.tag, e2, r2) : this._decodeChoice(e2, r2), p2 = true;
          } catch {
            p2 = false;
          }
          e2.restore(x5);
        } else if (p2 = this._peekTag(e2, M3, o2.any), e2.isError(p2))
          return p2;
      }
      let y3;
      if (o2.obj && p2 && (y3 = e2.enterObject()), p2) {
        if (o2.explicit !== null) {
          let x5 = this._decodeTag(e2, o2.explicit);
          if (e2.isError(x5))
            return x5;
          e2 = x5;
        }
        let M3 = e2.offset;
        if (o2.use === null && o2.choice === null) {
          let x5;
          o2.any && (x5 = e2.save());
          let S2 = this._decodeTag(e2, o2.implicit !== null ? o2.implicit : o2.tag, o2.any);
          if (e2.isError(S2))
            return S2;
          o2.any ? f2 = e2.raw(x5) : e2 = S2;
        }
        if (r2 && r2.track && o2.tag !== null && r2.track(e2.path(), M3, e2.length, "tagged"), r2 && r2.track && o2.tag !== null && r2.track(e2.path(), e2.offset, e2.length, "content"), o2.any || (o2.choice === null ? f2 = this._decodeGeneric(o2.tag, e2, r2) : f2 = this._decodeChoice(e2, r2)), e2.isError(f2))
          return f2;
        if (!o2.any && o2.choice === null && o2.children !== null && o2.children.forEach(function(S2) {
          S2._decode(e2, r2);
        }), o2.contains && (o2.tag === "octstr" || o2.tag === "bitstr")) {
          let x5 = new uB(f2);
          f2 = this._getUse(o2.contains, e2._reporterState.obj)._decode(x5, r2);
        }
      }
      return o2.obj && p2 && (f2 = e2.leaveObject(y3)), o2.key !== null && (f2 !== null || p2 === true) ? e2.leaveKey(m32, o2.key, f2) : m32 !== null && e2.exitKey(m32), f2;
    };
    Ue.prototype._decodeGeneric = function(e2, r2, o2) {
      let f2 = this._baseState;
      return e2 === "seq" || e2 === "set" ? null : e2 === "seqof" || e2 === "setof" ? this._decodeList(r2, e2, f2.args[0], o2) : /str$/.test(e2) ? this._decodeStr(r2, e2, o2) : e2 === "objid" && f2.args ? this._decodeObjid(r2, f2.args[0], f2.args[1], o2) : e2 === "objid" ? this._decodeObjid(r2, null, null, o2) : e2 === "gentime" || e2 === "utctime" ? this._decodeTime(r2, e2, o2) : e2 === "null_" ? this._decodeNull(r2, o2) : e2 === "bool" ? this._decodeBool(r2, o2) : e2 === "objDesc" ? this._decodeStr(r2, e2, o2) : e2 === "int" || e2 === "enum" ? this._decodeInt(r2, f2.args && f2.args[0], o2) : f2.use !== null ? this._getUse(f2.use, r2._reporterState.obj)._decode(r2, o2) : r2.error("unknown tag: " + e2);
    };
    Ue.prototype._getUse = function(e2, r2) {
      let o2 = this._baseState;
      return o2.useDecoder = this._use(e2, r2), Qt(o2.useDecoder._baseState.parent === null), o2.useDecoder = o2.useDecoder._baseState.children[0], o2.implicit !== o2.useDecoder._baseState.implicit && (o2.useDecoder = o2.useDecoder.clone(), o2.useDecoder._baseState.implicit = o2.implicit), o2.useDecoder;
    };
    Ue.prototype._decodeChoice = function(e2, r2) {
      let o2 = this._baseState, f2 = null, p2 = false;
      return Object.keys(o2.choice).some(function(m32) {
        let y3 = e2.save(), M3 = o2.choice[m32];
        try {
          let x5 = M3._decode(e2, r2);
          if (e2.isError(x5))
            return false;
          f2 = { type: m32, value: x5 }, p2 = true;
        } catch {
          return e2.restore(y3), false;
        }
        return true;
      }, this), p2 ? f2 : e2.error("Choice not matched");
    };
    Ue.prototype._createEncoderBuffer = function(e2) {
      return new hB(e2, this.reporter);
    };
    Ue.prototype._encode = function(e2, r2, o2) {
      let f2 = this._baseState;
      if (f2.default !== null && f2.default === e2)
        return;
      let p2 = this._encodeValue(e2, r2, o2);
      if (p2 !== undefined && !this._skipDefault(p2, r2, o2))
        return p2;
    };
    Ue.prototype._encodeValue = function(e2, r2, o2) {
      let f2 = this._baseState;
      if (f2.parent === null)
        return f2.children[0]._encode(e2, r2 || new sB);
      let p2 = null;
      if (this.reporter = r2, f2.optional && e2 === undefined)
        if (f2.default !== null)
          e2 = f2.default;
        else
          return;
      let m32 = null, y3 = false;
      if (f2.any)
        p2 = this._createEncoderBuffer(e2);
      else if (f2.choice)
        p2 = this._encodeChoice(e2, r2);
      else if (f2.contains)
        m32 = this._getUse(f2.contains, o2)._encode(e2, r2), y3 = true;
      else if (f2.children)
        m32 = f2.children.map(function(M3) {
          if (M3._baseState.tag === "null_")
            return M3._encode(null, r2, e2);
          if (M3._baseState.key === null)
            return r2.error("Child should have a key");
          let x5 = r2.enterKey(M3._baseState.key);
          if (typeof e2 != "object")
            return r2.error("Child expected, but input is not object");
          let S2 = M3._encode(e2[M3._baseState.key], r2, e2);
          return r2.leaveKey(x5), S2;
        }, this).filter(function(M3) {
          return M3;
        }), m32 = this._createEncoderBuffer(m32);
      else if (f2.tag === "seqof" || f2.tag === "setof") {
        if (!(f2.args && f2.args.length === 1))
          return r2.error("Too many args for : " + f2.tag);
        if (!Array.isArray(e2))
          return r2.error("seqof/setof, but data is not Array");
        let M3 = this.clone();
        M3._baseState.implicit = null, m32 = this._createEncoderBuffer(e2.map(function(x5) {
          let S2 = this._baseState;
          return this._getUse(S2.args[0], e2)._encode(x5, r2);
        }, M3));
      } else
        f2.use !== null ? p2 = this._getUse(f2.use, o2)._encode(e2, r2) : (m32 = this._encodePrimitive(f2.tag, e2), y3 = true);
      if (!f2.any && f2.choice === null) {
        let M3 = f2.implicit !== null ? f2.implicit : f2.tag, x5 = f2.implicit === null ? "universal" : "context";
        M3 === null ? f2.use === null && r2.error("Tag could be omitted only for .use()") : f2.use === null && (p2 = this._encodeComposite(M3, y3, x5, m32));
      }
      return f2.explicit !== null && (p2 = this._encodeComposite(f2.explicit, false, "context", p2)), p2;
    };
    Ue.prototype._encodeChoice = function(e2, r2) {
      let o2 = this._baseState, f2 = o2.choice[e2.type];
      return f2 || Qt(false, e2.type + " not found in " + JSON.stringify(Object.keys(o2.choice))), f2._encode(e2.value, r2);
    };
    Ue.prototype._encodePrimitive = function(e2, r2) {
      let o2 = this._baseState;
      if (/str$/.test(e2))
        return this._encodeStr(r2, e2);
      if (e2 === "objid" && o2.args)
        return this._encodeObjid(r2, o2.reverseArgs[0], o2.args[1]);
      if (e2 === "objid")
        return this._encodeObjid(r2, null, null);
      if (e2 === "gentime" || e2 === "utctime")
        return this._encodeTime(r2, e2);
      if (e2 === "null_")
        return this._encodeNull();
      if (e2 === "int" || e2 === "enum")
        return this._encodeInt(r2, o2.args && o2.reverseArgs[0]);
      if (e2 === "bool")
        return this._encodeBool(r2);
      if (e2 === "objDesc")
        return this._encodeStr(r2, e2);
      throw new Error("Unsupported tag: " + e2);
    };
    Ue.prototype._isNumstr = function(e2) {
      return /^[0-9 ]*$/.test(e2);
    };
    Ue.prototype._isPrintstr = function(e2) {
      return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(e2);
    };
  });
  c02 = T2((Wn) => {
    function Cy(t3) {
      let e2 = {};
      return Object.keys(t3).forEach(function(r2) {
        (r2 | 0) == r2 && (r2 = r2 | 0);
        let o2 = t3[r2];
        e2[o2] = r2;
      }), e2;
    }
    Wn.tagClass = { 0: "universal", 1: "application", 2: "context", 3: "private" };
    Wn.tagClassByName = Cy(Wn.tagClass);
    Wn.tag = { 0: "end", 1: "bool", 2: "int", 3: "bitstr", 4: "octstr", 5: "null_", 6: "objid", 7: "objDesc", 8: "external", 9: "real", 10: "enum", 11: "embed", 12: "utf8str", 13: "relativeOid", 16: "seq", 17: "set", 18: "numstr", 19: "printstr", 20: "t61str", 21: "videostr", 22: "ia5str", 23: "utctime", 24: "gentime", 25: "graphstr", 26: "iso646str", 27: "genstr", 28: "unistr", 29: "charstr", 30: "bmpstr" };
    Wn.tagByName = Cy(Wn.tag);
  });
  nd = T2((tL, Uy) => {
    var pB = Ie(), Ii = h02().Buffer, Oy = d02(), id = c02();
    function Fy(t3) {
      this.enc = "der", this.name = t3.name, this.entity = t3, this.tree = new Ur, this.tree._init(t3.body);
    }
    Uy.exports = Fy;
    Fy.prototype.encode = function(e2, r2) {
      return this.tree._encode(e2, r2).join();
    };
    function Ur(t3) {
      Oy.call(this, "der", t3);
    }
    pB(Ur, Oy);
    Ur.prototype._encodeComposite = function(e2, r2, o2, f2) {
      let p2 = vB(e2, r2, o2, this.reporter);
      if (f2.length < 128) {
        let M3 = Ii.alloc(2);
        return M3[0] = p2, M3[1] = f2.length, this._createEncoderBuffer([M3, f2]);
      }
      let m32 = 1;
      for (let M3 = f2.length;M3 >= 256; M3 >>= 8)
        m32++;
      let y3 = Ii.alloc(1 + 1 + m32);
      y3[0] = p2, y3[1] = 128 | m32;
      for (let M3 = 1 + m32, x5 = f2.length;x5 > 0; M3--, x5 >>= 8)
        y3[M3] = x5 & 255;
      return this._createEncoderBuffer([y3, f2]);
    };
    Ur.prototype._encodeStr = function(e2, r2) {
      if (r2 === "bitstr")
        return this._createEncoderBuffer([e2.unused | 0, e2.data]);
      if (r2 === "bmpstr") {
        let o2 = Ii.alloc(e2.length * 2);
        for (let f2 = 0;f2 < e2.length; f2++)
          o2.writeUInt16BE(e2.charCodeAt(f2), f2 * 2);
        return this._createEncoderBuffer(o2);
      } else
        return r2 === "numstr" ? this._isNumstr(e2) ? this._createEncoderBuffer(e2) : this.reporter.error("Encoding of string type: numstr supports only digits and space") : r2 === "printstr" ? this._isPrintstr(e2) ? this._createEncoderBuffer(e2) : this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark") : /str$/.test(r2) ? this._createEncoderBuffer(e2) : r2 === "objDesc" ? this._createEncoderBuffer(e2) : this.reporter.error("Encoding of string type: " + r2 + " unsupported");
    };
    Ur.prototype._encodeObjid = function(e2, r2, o2) {
      if (typeof e2 == "string") {
        if (!r2)
          return this.reporter.error("string objid given, but no values map found");
        if (!r2.hasOwnProperty(e2))
          return this.reporter.error("objid not found in values map");
        e2 = r2[e2].split(/[\s.]+/g);
        for (let y3 = 0;y3 < e2.length; y3++)
          e2[y3] |= 0;
      } else if (Array.isArray(e2)) {
        e2 = e2.slice();
        for (let y3 = 0;y3 < e2.length; y3++)
          e2[y3] |= 0;
      }
      if (!Array.isArray(e2))
        return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(e2));
      if (!o2) {
        if (e2[1] >= 40)
          return this.reporter.error("Second objid identifier OOB");
        e2.splice(0, 2, e2[0] * 40 + e2[1]);
      }
      let f2 = 0;
      for (let y3 = 0;y3 < e2.length; y3++) {
        let M3 = e2[y3];
        for (f2++;M3 >= 128; M3 >>= 7)
          f2++;
      }
      let p2 = Ii.alloc(f2), m32 = p2.length - 1;
      for (let y3 = e2.length - 1;y3 >= 0; y3--) {
        let M3 = e2[y3];
        for (p2[m32--] = M3 & 127;(M3 >>= 7) > 0; )
          p2[m32--] = 128 | M3 & 127;
      }
      return this._createEncoderBuffer(p2);
    };
    function qr(t3) {
      return t3 < 10 ? "0" + t3 : t3;
    }
    Ur.prototype._encodeTime = function(e2, r2) {
      let o2, f2 = new Date(e2);
      return r2 === "gentime" ? o2 = [qr(f2.getUTCFullYear()), qr(f2.getUTCMonth() + 1), qr(f2.getUTCDate()), qr(f2.getUTCHours()), qr(f2.getUTCMinutes()), qr(f2.getUTCSeconds()), "Z"].join("") : r2 === "utctime" ? o2 = [qr(f2.getUTCFullYear() % 100), qr(f2.getUTCMonth() + 1), qr(f2.getUTCDate()), qr(f2.getUTCHours()), qr(f2.getUTCMinutes()), qr(f2.getUTCSeconds()), "Z"].join("") : this.reporter.error("Encoding " + r2 + " time is not supported yet"), this._encodeStr(o2, "octstr");
    };
    Ur.prototype._encodeNull = function() {
      return this._createEncoderBuffer("");
    };
    Ur.prototype._encodeInt = function(e2, r2) {
      if (typeof e2 == "string") {
        if (!r2)
          return this.reporter.error("String int or enum given, but no values map");
        if (!r2.hasOwnProperty(e2))
          return this.reporter.error("Values map doesn't contain: " + JSON.stringify(e2));
        e2 = r2[e2];
      }
      if (typeof e2 != "number" && !Ii.isBuffer(e2)) {
        let p2 = e2.toArray();
        !e2.sign && p2[0] & 128 && p2.unshift(0), e2 = Ii.from(p2);
      }
      if (Ii.isBuffer(e2)) {
        let p2 = e2.length;
        e2.length === 0 && p2++;
        let m32 = Ii.alloc(p2);
        return e2.copy(m32), e2.length === 0 && (m32[0] = 0), this._createEncoderBuffer(m32);
      }
      if (e2 < 128)
        return this._createEncoderBuffer(e2);
      if (e2 < 256)
        return this._createEncoderBuffer([0, e2]);
      let o2 = 1;
      for (let p2 = e2;p2 >= 256; p2 >>= 8)
        o2++;
      let f2 = new Array(o2);
      for (let p2 = f2.length - 1;p2 >= 0; p2--)
        f2[p2] = e2 & 255, e2 >>= 8;
      return f2[0] & 128 && f2.unshift(0), this._createEncoderBuffer(Ii.from(f2));
    };
    Ur.prototype._encodeBool = function(e2) {
      return this._createEncoderBuffer(e2 ? 255 : 0);
    };
    Ur.prototype._use = function(e2, r2) {
      return typeof e2 == "function" && (e2 = e2(r2)), e2._getEncoder("der").tree;
    };
    Ur.prototype._skipDefault = function(e2, r2, o2) {
      let f2 = this._baseState, p2;
      if (f2.default === null)
        return false;
      let m32 = e2.join();
      if (f2.defaultBuffer === undefined && (f2.defaultBuffer = this._encodeValue(f2.default, r2, o2).join()), m32.length !== f2.defaultBuffer.length)
        return false;
      for (p2 = 0;p2 < m32.length; p2++)
        if (m32[p2] !== f2.defaultBuffer[p2])
          return false;
      return true;
    };
    function vB(t3, e2, r2, o2) {
      let f2;
      if (t3 === "seqof" ? t3 = "seq" : t3 === "setof" && (t3 = "set"), id.tagByName.hasOwnProperty(t3))
        f2 = id.tagByName[t3];
      else if (typeof t3 == "number" && (t3 | 0) === t3)
        f2 = t3;
      else
        return o2.error("Unknown tag: " + t3);
      return f2 >= 31 ? o2.error("Multi-octet tag encoding unsupported") : (e2 || (f2 |= 32), f2 |= id.tagClassByName[r2 || "universal"] << 6, f2);
    }
  });
  Hy = T2((rL, zy) => {
    var bB = Ie(), fd = nd();
    function ad(t3) {
      fd.call(this, t3), this.enc = "pem";
    }
    bB(ad, fd);
    zy.exports = ad;
    ad.prototype.encode = function(e2, r2) {
      let f2 = fd.prototype.encode.call(this, e2).toString("base64"), p2 = ["-----BEGIN " + r2.label + "-----"];
      for (let m32 = 0;m32 < f2.length; m32 += 64)
        p2.push(f2.slice(m32, m32 + 64));
      return p2.push("-----END " + r2.label + "-----"), p2.join(`
`);
    };
  });
  od = T2((Ky) => {
    var Wy = Ky;
    Wy.der = nd();
    Wy.pem = Hy();
  });
  hd = T2((nL, Yy) => {
    var mB = Ie(), gB = td(), jy = Kf().DecoderBuffer, Vy = d02(), Zy = c02();
    function $y(t3) {
      this.enc = "der", this.name = t3.name, this.entity = t3, this.tree = new sr, this.tree._init(t3.body);
    }
    Yy.exports = $y;
    $y.prototype.decode = function(e2, r2) {
      return jy.isDecoderBuffer(e2) || (e2 = new jy(e2, r2)), this.tree._decode(e2, r2);
    };
    function sr(t3) {
      Vy.call(this, "der", t3);
    }
    mB(sr, Vy);
    sr.prototype._peekTag = function(e2, r2, o2) {
      if (e2.isEmpty())
        return false;
      let f2 = e2.save(), p2 = sd(e2, 'Failed to peek tag: "' + r2 + '"');
      return e2.isError(p2) ? p2 : (e2.restore(f2), p2.tag === r2 || p2.tagStr === r2 || p2.tagStr + "of" === r2 || o2);
    };
    sr.prototype._decodeTag = function(e2, r2, o2) {
      let f2 = sd(e2, 'Failed to decode tag of "' + r2 + '"');
      if (e2.isError(f2))
        return f2;
      let p2 = Gy(e2, f2.primitive, 'Failed to get length of "' + r2 + '"');
      if (e2.isError(p2))
        return p2;
      if (!o2 && f2.tag !== r2 && f2.tagStr !== r2 && f2.tagStr + "of" !== r2)
        return e2.error('Failed to match tag: "' + r2 + '"');
      if (f2.primitive || p2 !== null)
        return e2.skip(p2, 'Failed to match body of: "' + r2 + '"');
      let m32 = e2.save(), y3 = this._skipUntilEnd(e2, 'Failed to skip indefinite length body: "' + this.tag + '"');
      return e2.isError(y3) ? y3 : (p2 = e2.offset - m32.offset, e2.restore(m32), e2.skip(p2, 'Failed to match body of: "' + r2 + '"'));
    };
    sr.prototype._skipUntilEnd = function(e2, r2) {
      for (;; ) {
        let o2 = sd(e2, r2);
        if (e2.isError(o2))
          return o2;
        let f2 = Gy(e2, o2.primitive, r2);
        if (e2.isError(f2))
          return f2;
        let p2;
        if (o2.primitive || f2 !== null ? p2 = e2.skip(f2) : p2 = this._skipUntilEnd(e2, r2), e2.isError(p2))
          return p2;
        if (o2.tagStr === "end")
          break;
      }
    };
    sr.prototype._decodeList = function(e2, r2, o2, f2) {
      let p2 = [];
      for (;!e2.isEmpty(); ) {
        let m32 = this._peekTag(e2, "end");
        if (e2.isError(m32))
          return m32;
        let y3 = o2.decode(e2, "der", f2);
        if (e2.isError(y3) && m32)
          break;
        p2.push(y3);
      }
      return p2;
    };
    sr.prototype._decodeStr = function(e2, r2) {
      if (r2 === "bitstr") {
        let o2 = e2.readUInt8();
        return e2.isError(o2) ? o2 : { unused: o2, data: e2.raw() };
      } else if (r2 === "bmpstr") {
        let o2 = e2.raw();
        if (o2.length % 2 === 1)
          return e2.error("Decoding of string type: bmpstr length mismatch");
        let f2 = "";
        for (let p2 = 0;p2 < o2.length / 2; p2++)
          f2 += String.fromCharCode(o2.readUInt16BE(p2 * 2));
        return f2;
      } else if (r2 === "numstr") {
        let o2 = e2.raw().toString("ascii");
        return this._isNumstr(o2) ? o2 : e2.error("Decoding of string type: numstr unsupported characters");
      } else {
        if (r2 === "octstr")
          return e2.raw();
        if (r2 === "objDesc")
          return e2.raw();
        if (r2 === "printstr") {
          let o2 = e2.raw().toString("ascii");
          return this._isPrintstr(o2) ? o2 : e2.error("Decoding of string type: printstr unsupported characters");
        } else
          return /str$/.test(r2) ? e2.raw().toString() : e2.error("Decoding of string type: " + r2 + " unsupported");
      }
    };
    sr.prototype._decodeObjid = function(e2, r2, o2) {
      let f2, p2 = [], m32 = 0, y3 = 0;
      for (;!e2.isEmpty(); )
        y3 = e2.readUInt8(), m32 <<= 7, m32 |= y3 & 127, (y3 & 128) === 0 && (p2.push(m32), m32 = 0);
      y3 & 128 && p2.push(m32);
      let M3 = p2[0] / 40 | 0, x5 = p2[0] % 40;
      if (o2 ? f2 = p2 : f2 = [M3, x5].concat(p2.slice(1)), r2) {
        let S2 = r2[f2.join(" ")];
        S2 === undefined && (S2 = r2[f2.join(".")]), S2 !== undefined && (f2 = S2);
      }
      return f2;
    };
    sr.prototype._decodeTime = function(e2, r2) {
      let o2 = e2.raw().toString(), f2, p2, m32, y3, M3, x5;
      if (r2 === "gentime")
        f2 = o2.slice(0, 4) | 0, p2 = o2.slice(4, 6) | 0, m32 = o2.slice(6, 8) | 0, y3 = o2.slice(8, 10) | 0, M3 = o2.slice(10, 12) | 0, x5 = o2.slice(12, 14) | 0;
      else if (r2 === "utctime")
        f2 = o2.slice(0, 2) | 0, p2 = o2.slice(2, 4) | 0, m32 = o2.slice(4, 6) | 0, y3 = o2.slice(6, 8) | 0, M3 = o2.slice(8, 10) | 0, x5 = o2.slice(10, 12) | 0, f2 < 70 ? f2 = 2000 + f2 : f2 = 1900 + f2;
      else
        return e2.error("Decoding " + r2 + " time is not supported yet");
      return Date.UTC(f2, p2 - 1, m32, y3, M3, x5, 0);
    };
    sr.prototype._decodeNull = function() {
      return null;
    };
    sr.prototype._decodeBool = function(e2) {
      let r2 = e2.readUInt8();
      return e2.isError(r2) ? r2 : r2 !== 0;
    };
    sr.prototype._decodeInt = function(e2, r2) {
      let o2 = e2.raw(), f2 = new gB(o2);
      return r2 && (f2 = r2[f2.toString(10)] || f2), f2;
    };
    sr.prototype._use = function(e2, r2) {
      return typeof e2 == "function" && (e2 = e2(r2)), e2._getDecoder("der").tree;
    };
    function sd(t3, e2) {
      let r2 = t3.readUInt8(e2);
      if (t3.isError(r2))
        return r2;
      let o2 = Zy.tagClass[r2 >> 6], f2 = (r2 & 32) === 0;
      if ((r2 & 31) === 31) {
        let m32 = r2;
        for (r2 = 0;(m32 & 128) === 128; ) {
          if (m32 = t3.readUInt8(e2), t3.isError(m32))
            return m32;
          r2 <<= 7, r2 |= m32 & 127;
        }
      } else
        r2 &= 31;
      let p2 = Zy.tag[r2];
      return { cls: o2, primitive: f2, tag: r2, tagStr: p2 };
    }
    function Gy(t3, e2, r2) {
      let o2 = t3.readUInt8(r2);
      if (t3.isError(o2))
        return o2;
      if (!e2 && o2 === 128)
        return null;
      if ((o2 & 128) === 0)
        return o2;
      let f2 = o2 & 127;
      if (f2 > 4)
        return t3.error("length octect is too long");
      o2 = 0;
      for (let p2 = 0;p2 < f2; p2++) {
        o2 <<= 8;
        let m32 = t3.readUInt8(r2);
        if (t3.isError(m32))
          return m32;
        o2 |= m32;
      }
      return o2;
    }
  });
  Jy = T2((fL, Xy) => {
    var yB = Ie(), wB = h02().Buffer, ud = hd();
    function ld(t3) {
      ud.call(this, t3), this.enc = "pem";
    }
    yB(ld, ud);
    Xy.exports = ld;
    ld.prototype.decode = function(e2, r2) {
      let o2 = e2.toString().split(/[\r\n]+/g), f2 = r2.label.toUpperCase(), p2 = /^-----(BEGIN|END) ([^-]+)-----$/, m32 = -1, y3 = -1;
      for (let S2 = 0;S2 < o2.length; S2++) {
        let E4 = o2[S2].match(p2);
        if (E4 !== null && E4[2] === f2)
          if (m32 === -1) {
            if (E4[1] !== "BEGIN")
              break;
            m32 = S2;
          } else {
            if (E4[1] !== "END")
              break;
            y3 = S2;
            break;
          }
      }
      if (m32 === -1 || y3 === -1)
        throw new Error("PEM section not found for: " + f2);
      let M3 = o2.slice(m32 + 1, y3).join("");
      M3.replace(/[^a-z0-9+/=]+/gi, "");
      let x5 = wB.from(M3, "base64");
      return ud.prototype.decode.call(this, x5, r2);
    };
  });
  dd = T2((e3) => {
    var Qy = e3;
    Qy.der = hd();
    Qy.pem = Jy();
  });
  r3 = T2((t3) => {
    var MB = od(), _B = dd(), xB = Ie(), SB = t3;
    SB.define = function(e2, r2) {
      return new jf(e2, r2);
    };
    function jf(t4, e2) {
      this.name = t4, this.body = e2, this.decoders = {}, this.encoders = {};
    }
    jf.prototype._createNamed = function(e2) {
      let r2 = this.name;
      function o2(f2) {
        this._initNamed(f2, r2);
      }
      return xB(o2, e2), o2.prototype._initNamed = function(p2, m32) {
        e2.call(this, p2, m32);
      }, new o2(this);
    };
    jf.prototype._getDecoder = function(e2) {
      return e2 = e2 || "der", this.decoders.hasOwnProperty(e2) || (this.decoders[e2] = this._createNamed(_B[e2])), this.decoders[e2];
    };
    jf.prototype.decode = function(e2, r2, o2) {
      return this._getDecoder(r2).decode(e2, o2);
    };
    jf.prototype._getEncoder = function(e2) {
      return e2 = e2 || "der", this.encoders.hasOwnProperty(e2) || (this.encoders[e2] = this._createNamed(MB[e2])), this.encoders[e2];
    };
    jf.prototype.encode = function(e2, r2, o2) {
      return this._getEncoder(r2).encode(e2, o2);
    };
  });
  n3 = T2((i3) => {
    var p02 = i3;
    p02.Reporter = u02().Reporter;
    p02.DecoderBuffer = Kf().DecoderBuffer;
    p02.EncoderBuffer = Kf().EncoderBuffer;
    p02.Node = d02();
  });
  o3 = T2((a3) => {
    var f3 = a3;
    f3._reverse = function(e2) {
      let r2 = {};
      return Object.keys(e2).forEach(function(o2) {
        (o2 | 0) == o2 && (o2 = o2 | 0);
        let f2 = e2[o2];
        r2[f2] = o2;
      }), r2;
    };
    f3.der = c02();
  });
  cd = T2((s3) => {
    var Zf = s3;
    Zf.bignum = td();
    Zf.define = r3().define;
    Zf.base = n3();
    Zf.constants = o3();
    Zf.decoders = dd();
    Zf.encoders = od();
  });
  d3 = T2((lL, l3) => {
    var zr = cd(), h3 = zr.define("Time", function() {
      this.choice({ utcTime: this.utctime(), generalTime: this.gentime() });
    }), EB = zr.define("AttributeTypeValue", function() {
      this.seq().obj(this.key("type").objid(), this.key("value").any());
    }), pd = zr.define("AlgorithmIdentifier", function() {
      this.seq().obj(this.key("algorithm").objid(), this.key("parameters").optional(), this.key("curve").objid().optional());
    }), AB = zr.define("SubjectPublicKeyInfo", function() {
      this.seq().obj(this.key("algorithm").use(pd), this.key("subjectPublicKey").bitstr());
    }), RB = zr.define("RelativeDistinguishedName", function() {
      this.setof(EB);
    }), BB = zr.define("RDNSequence", function() {
      this.seqof(RB);
    }), u32 = zr.define("Name", function() {
      this.choice({ rdnSequence: this.use(BB) });
    }), qB = zr.define("Validity", function() {
      this.seq().obj(this.key("notBefore").use(h3), this.key("notAfter").use(h3));
    }), IB = zr.define("Extension", function() {
      this.seq().obj(this.key("extnID").objid(), this.key("critical").bool().def(false), this.key("extnValue").octstr());
    }), TB = zr.define("TBSCertificate", function() {
      this.seq().obj(this.key("version").explicit(0).int().optional(), this.key("serialNumber").int(), this.key("signature").use(pd), this.key("issuer").use(u32), this.key("validity").use(qB), this.key("subject").use(u32), this.key("subjectPublicKeyInfo").use(AB), this.key("issuerUniqueID").implicit(1).bitstr().optional(), this.key("subjectUniqueID").implicit(2).bitstr().optional(), this.key("extensions").explicit(3).seqof(IB).optional());
    }), kB = zr.define("X509Certificate", function() {
      this.seq().obj(this.key("tbsCertificate").use(TB), this.key("signatureAlgorithm").use(pd), this.key("signatureValue").bitstr());
    });
    l3.exports = kB;
  });
  p3 = T2((Wr) => {
    var Hr = cd();
    Wr.certificate = d3();
    var LB = Hr.define("RSAPrivateKey", function() {
      this.seq().obj(this.key("version").int(), this.key("modulus").int(), this.key("publicExponent").int(), this.key("privateExponent").int(), this.key("prime1").int(), this.key("prime2").int(), this.key("exponent1").int(), this.key("exponent2").int(), this.key("coefficient").int());
    });
    Wr.RSAPrivateKey = LB;
    var NB = Hr.define("RSAPublicKey", function() {
      this.seq().obj(this.key("modulus").int(), this.key("publicExponent").int());
    });
    Wr.RSAPublicKey = NB;
    var DB = Hr.define("SubjectPublicKeyInfo", function() {
      this.seq().obj(this.key("algorithm").use(c3), this.key("subjectPublicKey").bitstr());
    });
    Wr.PublicKey = DB;
    var c3 = Hr.define("AlgorithmIdentifier", function() {
      this.seq().obj(this.key("algorithm").objid(), this.key("none").null_().optional(), this.key("curve").objid().optional(), this.key("params").seq().obj(this.key("p").int(), this.key("q").int(), this.key("g").int()).optional());
    }), PB = Hr.define("PrivateKeyInfo", function() {
      this.seq().obj(this.key("version").int(), this.key("algorithm").use(c3), this.key("subjectPrivateKey").octstr());
    });
    Wr.PrivateKey = PB;
    var CB = Hr.define("EncryptedPrivateKeyInfo", function() {
      this.seq().obj(this.key("algorithm").seq().obj(this.key("id").objid(), this.key("decrypt").seq().obj(this.key("kde").seq().obj(this.key("id").objid(), this.key("kdeparams").seq().obj(this.key("salt").octstr(), this.key("iters").int())), this.key("cipher").seq().obj(this.key("algo").objid(), this.key("iv").octstr()))), this.key("subjectPrivateKey").octstr());
    });
    Wr.EncryptedPrivateKey = CB;
    var OB = Hr.define("DSAPrivateKey", function() {
      this.seq().obj(this.key("version").int(), this.key("p").int(), this.key("q").int(), this.key("g").int(), this.key("pub_key").int(), this.key("priv_key").int());
    });
    Wr.DSAPrivateKey = OB;
    Wr.DSAparam = Hr.define("DSAparam", function() {
      this.int();
    });
    var FB = Hr.define("ECPrivateKey", function() {
      this.seq().obj(this.key("version").int(), this.key("privateKey").octstr(), this.key("parameters").optional().explicit(0).use(UB), this.key("publicKey").optional().explicit(1).bitstr());
    });
    Wr.ECPrivateKey = FB;
    var UB = Hr.define("ECParameters", function() {
      this.choice({ namedCurve: this.objid() });
    });
    Wr.signature = Hr.define("signature", function() {
      this.seq().obj(this.key("r").int(), this.key("s").int());
    });
  });
  v3 = T2((cL, zB) => {
    zB.exports = { "2.16.840.1.101.3.4.1.1": "aes-128-ecb", "2.16.840.1.101.3.4.1.2": "aes-128-cbc", "2.16.840.1.101.3.4.1.3": "aes-128-ofb", "2.16.840.1.101.3.4.1.4": "aes-128-cfb", "2.16.840.1.101.3.4.1.21": "aes-192-ecb", "2.16.840.1.101.3.4.1.22": "aes-192-cbc", "2.16.840.1.101.3.4.1.23": "aes-192-ofb", "2.16.840.1.101.3.4.1.24": "aes-192-cfb", "2.16.840.1.101.3.4.1.41": "aes-256-ecb", "2.16.840.1.101.3.4.1.42": "aes-256-cbc", "2.16.840.1.101.3.4.1.43": "aes-256-ofb", "2.16.840.1.101.3.4.1.44": "aes-256-cfb" };
  });
  m3 = T2((pL, b3) => {
    var HB = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m, WB = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m, KB = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m, jB = Ba(), ZB = Es(), v02 = Te().Buffer;
    b3.exports = function(t3, e2) {
      var r2 = t3.toString(), o2 = r2.match(HB), f2;
      if (o2) {
        var m4 = "aes" + o2[1], y3 = v02.from(o2[2], "hex"), M3 = v02.from(o2[3].replace(/[\r\n]/g, ""), "base64"), x5 = jB(e2, y3.slice(0, 8), parseInt(o2[1], 10)).key, S2 = [], E4 = ZB.createDecipheriv(m4, x5, y3);
        S2.push(E4.update(M3)), S2.push(E4.final()), f2 = v02.concat(S2);
      } else {
        var p2 = r2.match(KB);
        f2 = v02.from(p2[2].replace(/[\r\n]/g, ""), "base64");
      }
      var B5 = r2.match(WB)[1];
      return { tag: B5, data: f2 };
    };
  });
  Ha = T2((vL, y3) => {
    var fr = p3(), VB = v3(), $B = m3(), GB = Es(), YB = Iu(), vd = Te().Buffer;
    y3.exports = g3;
    function g3(t3) {
      var e2;
      typeof t3 == "object" && !vd.isBuffer(t3) && (e2 = t3.passphrase, t3 = t3.key), typeof t3 == "string" && (t3 = vd.from(t3));
      var r2 = $B(t3, e2), o2 = r2.tag, f2 = r2.data, p2, m4;
      switch (o2) {
        case "CERTIFICATE":
          m4 = fr.certificate.decode(f2, "der").tbsCertificate.subjectPublicKeyInfo;
        case "PUBLIC KEY":
          switch (m4 || (m4 = fr.PublicKey.decode(f2, "der")), p2 = m4.algorithm.algorithm.join("."), p2) {
            case "1.2.840.113549.1.1.1":
              return fr.RSAPublicKey.decode(m4.subjectPublicKey.data, "der");
            case "1.2.840.10045.2.1":
              return m4.subjectPrivateKey = m4.subjectPublicKey, { type: "ec", data: m4 };
            case "1.2.840.10040.4.1":
              return m4.algorithm.params.pub_key = fr.DSAparam.decode(m4.subjectPublicKey.data, "der"), { type: "dsa", data: m4.algorithm.params };
            default:
              throw new Error("unknown key id " + p2);
          }
        case "ENCRYPTED PRIVATE KEY":
          f2 = fr.EncryptedPrivateKey.decode(f2, "der"), f2 = XB(f2, e2);
        case "PRIVATE KEY":
          switch (m4 = fr.PrivateKey.decode(f2, "der"), p2 = m4.algorithm.algorithm.join("."), p2) {
            case "1.2.840.113549.1.1.1":
              return fr.RSAPrivateKey.decode(m4.subjectPrivateKey, "der");
            case "1.2.840.10045.2.1":
              return { curve: m4.algorithm.curve, privateKey: fr.ECPrivateKey.decode(m4.subjectPrivateKey, "der").privateKey };
            case "1.2.840.10040.4.1":
              return m4.algorithm.params.priv_key = fr.DSAparam.decode(m4.subjectPrivateKey, "der"), { type: "dsa", params: m4.algorithm.params };
            default:
              throw new Error("unknown key id " + p2);
          }
        case "RSA PUBLIC KEY":
          return fr.RSAPublicKey.decode(f2, "der");
        case "RSA PRIVATE KEY":
          return fr.RSAPrivateKey.decode(f2, "der");
        case "DSA PRIVATE KEY":
          return { type: "dsa", params: fr.DSAPrivateKey.decode(f2, "der") };
        case "EC PRIVATE KEY":
          return f2 = fr.ECPrivateKey.decode(f2, "der"), { curve: f2.parameters.value, privateKey: f2.privateKey };
        default:
          throw new Error("unknown key type " + o2);
      }
    }
    g3.signature = fr.signature;
    function XB(t3, e2) {
      var r2 = t3.algorithm.decrypt.kde.kdeparams.salt, o2 = parseInt(t3.algorithm.decrypt.kde.kdeparams.iters.toString(), 10), f2 = VB[t3.algorithm.decrypt.cipher.algo.join(".")], p2 = t3.algorithm.decrypt.cipher.iv, m4 = t3.subjectPrivateKey, y4 = parseInt(f2.split("-")[1], 10) / 8, M3 = YB.pbkdf2Sync(e2, r2, o2, y4, "sha1"), x5 = GB.createDecipheriv(f2, M3, p2), S2 = [];
      return S2.push(x5.update(m4)), S2.push(x5.final()), vd.concat(S2);
    }
  });
  bd = T2((bL, JB) => {
    JB.exports = { "1.3.132.0.10": "secp256k1", "1.3.132.0.33": "p224", "1.2.840.10045.3.1.1": "p192", "1.2.840.10045.3.1.7": "p256", "1.3.132.0.34": "p384", "1.3.132.0.35": "p521" };
  });
  _32 = T2((mL, m02) => {
    var Yt = Te().Buffer, Kn = wu(), QB = Ks(), eq = o02().ec, b02 = Ws(), tq = Ha(), rq = bd();
    function iq(t3, e2, r2, o2, f2) {
      var p2 = tq(e2);
      if (p2.curve) {
        if (o2 !== "ecdsa" && o2 !== "ecdsa/rsa")
          throw new Error("wrong private key type");
        return nq(t3, p2);
      } else if (p2.type === "dsa") {
        if (o2 !== "dsa")
          throw new Error("wrong private key type");
        return fq(t3, p2, r2);
      } else if (o2 !== "rsa" && o2 !== "ecdsa/rsa")
        throw new Error("wrong private key type");
      t3 = Yt.concat([f2, t3]);
      for (var m4 = p2.modulus.byteLength(), y3 = [0, 1];t3.length + y3.length + 1 < m4; )
        y3.push(255);
      y3.push(0);
      for (var M4 = -1;++M4 < t3.length; )
        y3.push(t3[M4]);
      var x5 = QB(y3, p2);
      return x5;
    }
    function nq(t3, e2) {
      var r2 = rq[e2.curve.join(".")];
      if (!r2)
        throw new Error("unknown curve " + e2.curve.join("."));
      var o2 = new eq(r2), f2 = o2.keyFromPrivate(e2.privateKey), p2 = f2.sign(t3);
      return Yt.from(p2.toDER());
    }
    function fq(t3, e2, r2) {
      for (var o2 = e2.params.priv_key, f2 = e2.params.p, p2 = e2.params.q, m4 = e2.params.g, y3 = new b02(0), M4, x5 = md(t3, p2).mod(p2), S2 = false, E4 = w3(o2, p2, t3, r2);S2 === false; )
        M4 = M3(p2, E4, r2), y3 = sq(m4, M4, f2, p2), S2 = M4.invm(p2).imul(x5.add(o2.mul(y3))).mod(p2), S2.cmpn(0) === 0 && (S2 = false, y3 = new b02(0));
      return aq(y3, S2);
    }
    function aq(t3, e2) {
      t3 = t3.toArray(), e2 = e2.toArray(), t3[0] & 128 && (t3 = [0].concat(t3)), e2[0] & 128 && (e2 = [0].concat(e2));
      var r2 = t3.length + e2.length + 4, o2 = [48, r2, 2, t3.length];
      return o2 = o2.concat(t3, [2, e2.length], e2), Yt.from(o2);
    }
    function w3(t3, e2, r2, o2) {
      if (t3 = Yt.from(t3.toArray()), t3.length < e2.byteLength()) {
        var f2 = Yt.alloc(e2.byteLength() - t3.length);
        t3 = Yt.concat([f2, t3]);
      }
      var p2 = r2.length, m4 = oq(r2, e2), y3 = Yt.alloc(p2);
      y3.fill(1);
      var M4 = Yt.alloc(p2);
      return M4 = Kn(o2, M4).update(y3).update(Yt.from([0])).update(t3).update(m4).digest(), y3 = Kn(o2, M4).update(y3).digest(), M4 = Kn(o2, M4).update(y3).update(Yt.from([1])).update(t3).update(m4).digest(), y3 = Kn(o2, M4).update(y3).digest(), { k: M4, v: y3 };
    }
    function md(t3, e2) {
      var r2 = new b02(t3), o2 = (t3.length << 3) - e2.bitLength();
      return o2 > 0 && r2.ishrn(o2), r2;
    }
    function oq(t3, e2) {
      t3 = md(t3, e2), t3 = t3.mod(e2);
      var r2 = Yt.from(t3.toArray());
      if (r2.length < e2.byteLength()) {
        var o2 = Yt.alloc(e2.byteLength() - r2.length);
        r2 = Yt.concat([o2, r2]);
      }
      return r2;
    }
    function M3(t3, e2, r2) {
      var o2, f2;
      do {
        for (o2 = Yt.alloc(0);o2.length * 8 < t3.bitLength(); )
          e2.v = Kn(r2, e2.k).update(e2.v).digest(), o2 = Yt.concat([o2, e2.v]);
        f2 = md(o2, t3), e2.k = Kn(r2, e2.k).update(e2.v).update(Yt.from([0])).digest(), e2.v = Kn(r2, e2.k).update(e2.v).digest();
      } while (f2.cmp(t3) !== -1);
      return f2;
    }
    function sq(t3, e2, r2, o2) {
      return t3.toRed(b02.mont(r2)).redPow(e2).fromRed().mod(o2);
    }
    m02.exports = iq;
    m02.exports.getKey = w3;
    m02.exports.makeKey = M3;
  });
  A32 = T2((gL, E32) => {
    var gd = Te().Buffer, Wa = Ws(), hq = o02().ec, S3 = Ha(), uq = bd();
    function lq(t3, e2, r2, o2, f2) {
      var p2 = S3(r2);
      if (p2.type === "ec") {
        if (o2 !== "ecdsa" && o2 !== "ecdsa/rsa")
          throw new Error("wrong public key type");
        return dq(t3, e2, p2);
      } else if (p2.type === "dsa") {
        if (o2 !== "dsa")
          throw new Error("wrong public key type");
        return cq(t3, e2, p2);
      } else if (o2 !== "rsa" && o2 !== "ecdsa/rsa")
        throw new Error("wrong public key type");
      e2 = gd.concat([f2, e2]);
      for (var m4 = p2.modulus.byteLength(), y3 = [1], M3 = 0;e2.length + y3.length + 2 < m4; )
        y3.push(255), M3++;
      y3.push(0);
      for (var x5 = -1;++x5 < e2.length; )
        y3.push(e2[x5]);
      y3 = gd.from(y3);
      var S2 = Wa.mont(p2.modulus);
      t3 = new Wa(t3).toRed(S2), t3 = t3.redPow(new Wa(p2.publicExponent)), t3 = gd.from(t3.fromRed().toArray());
      var E4 = M3 < 8 ? 1 : 0;
      for (m4 = Math.min(t3.length, y3.length), t3.length !== y3.length && (E4 = 1), x5 = -1;++x5 < m4; )
        E4 |= t3[x5] ^ y3[x5];
      return E4 === 0;
    }
    function dq(t3, e2, r2) {
      var o2 = uq[r2.data.algorithm.curve.join(".")];
      if (!o2)
        throw new Error("unknown curve " + r2.data.algorithm.curve.join("."));
      var f2 = new hq(o2), p2 = r2.data.subjectPrivateKey.data;
      return f2.verify(e2, t3, p2);
    }
    function cq(t3, e2, r2) {
      var o2 = r2.data.p, f2 = r2.data.q, p2 = r2.data.g, m4 = r2.data.pub_key, y3 = S3.signature.decode(t3, "der"), M3 = y3.s, x5 = y3.r;
      x32(M3, f2), x32(x5, f2);
      var S2 = Wa.mont(o2), E4 = M3.invm(f2), B5 = p2.toRed(S2).redPow(new Wa(e2).mul(E4).mod(f2)).fromRed().mul(m4.toRed(S2).redPow(x5.mul(E4).mod(f2)).fromRed()).mod(o2).mod(f2);
      return B5.cmp(x5) === 0;
    }
    function x32(t3, e2) {
      if (t3.cmpn(0) <= 0)
        throw new Error("invalid sig");
      if (t3.cmp(e2) >= e2)
        throw new Error("invalid sig");
    }
    E32.exports = lq;
  });
  k3 = T2((yL, T3) => {
    var g02 = Te().Buffer, q3 = bf(), y02 = i2(), I3 = Ie(), pq = _32(), vq = A32(), jn = Mu();
    Object.keys(jn).forEach(function(t3) {
      jn[t3].id = g02.from(jn[t3].id, "hex"), jn[t3.toLowerCase()] = jn[t3];
    });
    function Ka(t3) {
      y02.Writable.call(this);
      var e2 = jn[t3];
      if (!e2)
        throw new Error("Unknown message digest");
      this._hashType = e2.hash, this._hash = q3(e2.hash), this._tag = e2.id, this._signType = e2.sign;
    }
    I3(Ka, y02.Writable);
    Ka.prototype._write = function(e2, r2, o2) {
      this._hash.update(e2), o2();
    };
    Ka.prototype.update = function(e2, r2) {
      return typeof e2 == "string" && (e2 = g02.from(e2, r2)), this._hash.update(e2), this;
    };
    Ka.prototype.sign = function(e2, r2) {
      this.end();
      var o2 = this._hash.digest(), f2 = pq(o2, e2, this._hashType, this._signType, this._tag);
      return r2 ? f2.toString(r2) : f2;
    };
    function ja(t3) {
      y02.Writable.call(this);
      var e2 = jn[t3];
      if (!e2)
        throw new Error("Unknown message digest");
      this._hash = q3(e2.hash), this._tag = e2.id, this._signType = e2.sign;
    }
    I3(ja, y02.Writable);
    ja.prototype._write = function(e2, r2, o2) {
      this._hash.update(e2), o2();
    };
    ja.prototype.update = function(e2, r2) {
      return typeof e2 == "string" && (e2 = g02.from(e2, r2)), this._hash.update(e2), this;
    };
    ja.prototype.verify = function(e2, r2, o2) {
      typeof r2 == "string" && (r2 = g02.from(r2, o2)), this.end();
      var f2 = this._hash.digest();
      return vq(r2, f2, e2, this._signType, this._tag);
    };
    function R32(t3) {
      return new Ka(t3);
    }
    function B32(t3) {
      return new ja(t3);
    }
    T3.exports = { Sign: R32, Verify: B32, createSign: R32, createVerify: B32 };
  });
  N32 = T2((L3, yd) => {
    (function(t3, e2) {
      function r2(v4, i) {
        if (!v4)
          throw new Error(i || "Assertion failed");
      }
      function o2(v4, i) {
        v4.super_ = i;
        var a2 = function() {
        };
        a2.prototype = i.prototype, v4.prototype = new a2, v4.prototype.constructor = v4;
      }
      function f2(v4, i, a2) {
        if (f2.isBN(v4))
          return v4;
        this.negative = 0, this.words = null, this.length = 0, this.red = null, v4 !== null && ((i === "le" || i === "be") && (a2 = i, i = 10), this._init(v4 || 0, i || 10, a2 || "be"));
      }
      typeof t3 == "object" ? t3.exports = f2 : e2.BN = f2, f2.BN = f2, f2.wordSize = 26;
      var p2;
      try {
        typeof window < "u" && typeof window.Buffer < "u" ? p2 = window.Buffer : p2 = ji().Buffer;
      } catch {
      }
      f2.isBN = function(i) {
        return i instanceof f2 ? true : i !== null && typeof i == "object" && i.constructor.wordSize === f2.wordSize && Array.isArray(i.words);
      }, f2.max = function(i, a2) {
        return i.cmp(a2) > 0 ? i : a2;
      }, f2.min = function(i, a2) {
        return i.cmp(a2) < 0 ? i : a2;
      }, f2.prototype._init = function(i, a2, h3) {
        if (typeof i == "number")
          return this._initNumber(i, a2, h3);
        if (typeof i == "object")
          return this._initArray(i, a2, h3);
        a2 === "hex" && (a2 = 16), r2(a2 === (a2 | 0) && a2 >= 2 && a2 <= 36), i = i.toString().replace(/\s+/g, "");
        var s3 = 0;
        i[0] === "-" && (s3++, this.negative = 1), s3 < i.length && (a2 === 16 ? this._parseHex(i, s3, h3) : (this._parseBase(i, a2, s3), h3 === "le" && this._initArray(this.toArray(), a2, h3)));
      }, f2.prototype._initNumber = function(i, a2, h3) {
        i < 0 && (this.negative = 1, i = -i), i < 67108864 ? (this.words = [i & 67108863], this.length = 1) : i < 4503599627370496 ? (this.words = [i & 67108863, i / 67108864 & 67108863], this.length = 2) : (r2(i < 9007199254740992), this.words = [i & 67108863, i / 67108864 & 67108863, 1], this.length = 3), h3 === "le" && this._initArray(this.toArray(), a2, h3);
      }, f2.prototype._initArray = function(i, a2, h3) {
        if (r2(typeof i.length == "number"), i.length <= 0)
          return this.words = [0], this.length = 1, this;
        this.length = Math.ceil(i.length / 3), this.words = new Array(this.length);
        for (var s3 = 0;s3 < this.length; s3++)
          this.words[s3] = 0;
        var u4, c2, b3 = 0;
        if (h3 === "be")
          for (s3 = i.length - 1, u4 = 0;s3 >= 0; s3 -= 3)
            c2 = i[s3] | i[s3 - 1] << 8 | i[s3 - 2] << 16, this.words[u4] |= c2 << b3 & 67108863, this.words[u4 + 1] = c2 >>> 26 - b3 & 67108863, b3 += 24, b3 >= 26 && (b3 -= 26, u4++);
        else if (h3 === "le")
          for (s3 = 0, u4 = 0;s3 < i.length; s3 += 3)
            c2 = i[s3] | i[s3 + 1] << 8 | i[s3 + 2] << 16, this.words[u4] |= c2 << b3 & 67108863, this.words[u4 + 1] = c2 >>> 26 - b3 & 67108863, b3 += 24, b3 >= 26 && (b3 -= 26, u4++);
        return this.strip();
      };
      function m4(v4, i) {
        var a2 = v4.charCodeAt(i);
        return a2 >= 65 && a2 <= 70 ? a2 - 55 : a2 >= 97 && a2 <= 102 ? a2 - 87 : a2 - 48 & 15;
      }
      function y3(v4, i, a2) {
        var h3 = m4(v4, a2);
        return a2 - 1 >= i && (h3 |= m4(v4, a2 - 1) << 4), h3;
      }
      f2.prototype._parseHex = function(i, a2, h3) {
        this.length = Math.ceil((i.length - a2) / 6), this.words = new Array(this.length);
        for (var s3 = 0;s3 < this.length; s3++)
          this.words[s3] = 0;
        var u4 = 0, c2 = 0, b3;
        if (h3 === "be")
          for (s3 = i.length - 1;s3 >= a2; s3 -= 2)
            b3 = y3(i, a2, s3) << u4, this.words[c2] |= b3 & 67108863, u4 >= 18 ? (u4 -= 18, c2 += 1, this.words[c2] |= b3 >>> 26) : u4 += 8;
        else {
          var l3 = i.length - a2;
          for (s3 = l3 % 2 === 0 ? a2 + 1 : a2;s3 < i.length; s3 += 2)
            b3 = y3(i, a2, s3) << u4, this.words[c2] |= b3 & 67108863, u4 >= 18 ? (u4 -= 18, c2 += 1, this.words[c2] |= b3 >>> 26) : u4 += 8;
        }
        this.strip();
      };
      function M3(v4, i, a2, h3) {
        for (var s3 = 0, u4 = Math.min(v4.length, a2), c2 = i;c2 < u4; c2++) {
          var b3 = v4.charCodeAt(c2) - 48;
          s3 *= h3, b3 >= 49 ? s3 += b3 - 49 + 10 : b3 >= 17 ? s3 += b3 - 17 + 10 : s3 += b3;
        }
        return s3;
      }
      f2.prototype._parseBase = function(i, a2, h3) {
        this.words = [0], this.length = 1;
        for (var s3 = 0, u4 = 1;u4 <= 67108863; u4 *= a2)
          s3++;
        s3--, u4 = u4 / a2 | 0;
        for (var c2 = i.length - h3, b3 = c2 % s3, l3 = Math.min(c2, c2 - b3) + h3, n4 = 0, d2 = h3;d2 < l3; d2 += s3)
          n4 = M3(i, d2, d2 + s3, a2), this.imuln(u4), this.words[0] + n4 < 67108864 ? this.words[0] += n4 : this._iaddn(n4);
        if (b3 !== 0) {
          var w3 = 1;
          for (n4 = M3(i, d2, i.length, a2), d2 = 0;d2 < b3; d2++)
            w3 *= a2;
          this.imuln(w3), this.words[0] + n4 < 67108864 ? this.words[0] += n4 : this._iaddn(n4);
        }
        this.strip();
      }, f2.prototype.copy = function(i) {
        i.words = new Array(this.length);
        for (var a2 = 0;a2 < this.length; a2++)
          i.words[a2] = this.words[a2];
        i.length = this.length, i.negative = this.negative, i.red = this.red;
      }, f2.prototype.clone = function() {
        var i = new f2(null);
        return this.copy(i), i;
      }, f2.prototype._expand = function(i) {
        for (;this.length < i; )
          this.words[this.length++] = 0;
        return this;
      }, f2.prototype.strip = function() {
        for (;this.length > 1 && this.words[this.length - 1] === 0; )
          this.length--;
        return this._normSign();
      }, f2.prototype._normSign = function() {
        return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
      }, f2.prototype.inspect = function() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var x5 = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"], S2 = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], E4 = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
      f2.prototype.toString = function(i, a2) {
        i = i || 10, a2 = a2 | 0 || 1;
        var h3;
        if (i === 16 || i === "hex") {
          h3 = "";
          for (var s3 = 0, u4 = 0, c2 = 0;c2 < this.length; c2++) {
            var b3 = this.words[c2], l3 = ((b3 << s3 | u4) & 16777215).toString(16);
            u4 = b3 >>> 24 - s3 & 16777215, u4 !== 0 || c2 !== this.length - 1 ? h3 = x5[6 - l3.length] + l3 + h3 : h3 = l3 + h3, s3 += 2, s3 >= 26 && (s3 -= 26, c2--);
          }
          for (u4 !== 0 && (h3 = u4.toString(16) + h3);h3.length % a2 !== 0; )
            h3 = "0" + h3;
          return this.negative !== 0 && (h3 = "-" + h3), h3;
        }
        if (i === (i | 0) && i >= 2 && i <= 36) {
          var n4 = S2[i], d2 = E4[i];
          h3 = "";
          var w3 = this.clone();
          for (w3.negative = 0;!w3.isZero(); ) {
            var g2 = w3.modn(d2).toString(i);
            w3 = w3.idivn(d2), w3.isZero() ? h3 = g2 + h3 : h3 = x5[n4 - g2.length] + g2 + h3;
          }
          for (this.isZero() && (h3 = "0" + h3);h3.length % a2 !== 0; )
            h3 = "0" + h3;
          return this.negative !== 0 && (h3 = "-" + h3), h3;
        }
        r2(false, "Base should be between 2 and 36");
      }, f2.prototype.toNumber = function() {
        var i = this.words[0];
        return this.length === 2 ? i += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? i += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && r2(false, "Number can only safely store up to 53 bits"), this.negative !== 0 ? -i : i;
      }, f2.prototype.toJSON = function() {
        return this.toString(16);
      }, f2.prototype.toBuffer = function(i, a2) {
        return r2(typeof p2 < "u"), this.toArrayLike(p2, i, a2);
      }, f2.prototype.toArray = function(i, a2) {
        return this.toArrayLike(Array, i, a2);
      }, f2.prototype.toArrayLike = function(i, a2, h3) {
        var s3 = this.byteLength(), u4 = h3 || Math.max(1, s3);
        r2(s3 <= u4, "byte array longer than desired length"), r2(u4 > 0, "Requested array length <= 0"), this.strip();
        var c2 = a2 === "le", b3 = new i(u4), l3, n4, d2 = this.clone();
        if (c2) {
          for (n4 = 0;!d2.isZero(); n4++)
            l3 = d2.andln(255), d2.iushrn(8), b3[n4] = l3;
          for (;n4 < u4; n4++)
            b3[n4] = 0;
        } else {
          for (n4 = 0;n4 < u4 - s3; n4++)
            b3[n4] = 0;
          for (n4 = 0;!d2.isZero(); n4++)
            l3 = d2.andln(255), d2.iushrn(8), b3[u4 - n4 - 1] = l3;
        }
        return b3;
      }, Math.clz32 ? f2.prototype._countBits = function(i) {
        return 32 - Math.clz32(i);
      } : f2.prototype._countBits = function(i) {
        var a2 = i, h3 = 0;
        return a2 >= 4096 && (h3 += 13, a2 >>>= 13), a2 >= 64 && (h3 += 7, a2 >>>= 7), a2 >= 8 && (h3 += 4, a2 >>>= 4), a2 >= 2 && (h3 += 2, a2 >>>= 2), h3 + a2;
      }, f2.prototype._zeroBits = function(i) {
        if (i === 0)
          return 26;
        var a2 = i, h3 = 0;
        return (a2 & 8191) === 0 && (h3 += 13, a2 >>>= 13), (a2 & 127) === 0 && (h3 += 7, a2 >>>= 7), (a2 & 15) === 0 && (h3 += 4, a2 >>>= 4), (a2 & 3) === 0 && (h3 += 2, a2 >>>= 2), (a2 & 1) === 0 && h3++, h3;
      }, f2.prototype.bitLength = function() {
        var i = this.words[this.length - 1], a2 = this._countBits(i);
        return (this.length - 1) * 26 + a2;
      };
      function B5(v4) {
        for (var i = new Array(v4.bitLength()), a2 = 0;a2 < i.length; a2++) {
          var h3 = a2 / 26 | 0, s3 = a2 % 26;
          i[a2] = (v4.words[h3] & 1 << s3) >>> s3;
        }
        return i;
      }
      f2.prototype.zeroBits = function() {
        if (this.isZero())
          return 0;
        for (var i = 0, a2 = 0;a2 < this.length; a2++) {
          var h3 = this._zeroBits(this.words[a2]);
          if (i += h3, h3 !== 26)
            break;
        }
        return i;
      }, f2.prototype.byteLength = function() {
        return Math.ceil(this.bitLength() / 8);
      }, f2.prototype.toTwos = function(i) {
        return this.negative !== 0 ? this.abs().inotn(i).iaddn(1) : this.clone();
      }, f2.prototype.fromTwos = function(i) {
        return this.testn(i - 1) ? this.notn(i).iaddn(1).ineg() : this.clone();
      }, f2.prototype.isNeg = function() {
        return this.negative !== 0;
      }, f2.prototype.neg = function() {
        return this.clone().ineg();
      }, f2.prototype.ineg = function() {
        return this.isZero() || (this.negative ^= 1), this;
      }, f2.prototype.iuor = function(i) {
        for (;this.length < i.length; )
          this.words[this.length++] = 0;
        for (var a2 = 0;a2 < i.length; a2++)
          this.words[a2] = this.words[a2] | i.words[a2];
        return this.strip();
      }, f2.prototype.ior = function(i) {
        return r2((this.negative | i.negative) === 0), this.iuor(i);
      }, f2.prototype.or = function(i) {
        return this.length > i.length ? this.clone().ior(i) : i.clone().ior(this);
      }, f2.prototype.uor = function(i) {
        return this.length > i.length ? this.clone().iuor(i) : i.clone().iuor(this);
      }, f2.prototype.iuand = function(i) {
        var a2;
        this.length > i.length ? a2 = i : a2 = this;
        for (var h3 = 0;h3 < a2.length; h3++)
          this.words[h3] = this.words[h3] & i.words[h3];
        return this.length = a2.length, this.strip();
      }, f2.prototype.iand = function(i) {
        return r2((this.negative | i.negative) === 0), this.iuand(i);
      }, f2.prototype.and = function(i) {
        return this.length > i.length ? this.clone().iand(i) : i.clone().iand(this);
      }, f2.prototype.uand = function(i) {
        return this.length > i.length ? this.clone().iuand(i) : i.clone().iuand(this);
      }, f2.prototype.iuxor = function(i) {
        var a2, h3;
        this.length > i.length ? (a2 = this, h3 = i) : (a2 = i, h3 = this);
        for (var s3 = 0;s3 < h3.length; s3++)
          this.words[s3] = a2.words[s3] ^ h3.words[s3];
        if (this !== a2)
          for (;s3 < a2.length; s3++)
            this.words[s3] = a2.words[s3];
        return this.length = a2.length, this.strip();
      }, f2.prototype.ixor = function(i) {
        return r2((this.negative | i.negative) === 0), this.iuxor(i);
      }, f2.prototype.xor = function(i) {
        return this.length > i.length ? this.clone().ixor(i) : i.clone().ixor(this);
      }, f2.prototype.uxor = function(i) {
        return this.length > i.length ? this.clone().iuxor(i) : i.clone().iuxor(this);
      }, f2.prototype.inotn = function(i) {
        r2(typeof i == "number" && i >= 0);
        var a2 = Math.ceil(i / 26) | 0, h3 = i % 26;
        this._expand(a2), h3 > 0 && a2--;
        for (var s3 = 0;s3 < a2; s3++)
          this.words[s3] = ~this.words[s3] & 67108863;
        return h3 > 0 && (this.words[s3] = ~this.words[s3] & 67108863 >> 26 - h3), this.strip();
      }, f2.prototype.notn = function(i) {
        return this.clone().inotn(i);
      }, f2.prototype.setn = function(i, a2) {
        r2(typeof i == "number" && i >= 0);
        var h3 = i / 26 | 0, s3 = i % 26;
        return this._expand(h3 + 1), a2 ? this.words[h3] = this.words[h3] | 1 << s3 : this.words[h3] = this.words[h3] & ~(1 << s3), this.strip();
      }, f2.prototype.iadd = function(i) {
        var a2;
        if (this.negative !== 0 && i.negative === 0)
          return this.negative = 0, a2 = this.isub(i), this.negative ^= 1, this._normSign();
        if (this.negative === 0 && i.negative !== 0)
          return i.negative = 0, a2 = this.isub(i), i.negative = 1, a2._normSign();
        var h3, s3;
        this.length > i.length ? (h3 = this, s3 = i) : (h3 = i, s3 = this);
        for (var u4 = 0, c2 = 0;c2 < s3.length; c2++)
          a2 = (h3.words[c2] | 0) + (s3.words[c2] | 0) + u4, this.words[c2] = a2 & 67108863, u4 = a2 >>> 26;
        for (;u4 !== 0 && c2 < h3.length; c2++)
          a2 = (h3.words[c2] | 0) + u4, this.words[c2] = a2 & 67108863, u4 = a2 >>> 26;
        if (this.length = h3.length, u4 !== 0)
          this.words[this.length] = u4, this.length++;
        else if (h3 !== this)
          for (;c2 < h3.length; c2++)
            this.words[c2] = h3.words[c2];
        return this;
      }, f2.prototype.add = function(i) {
        var a2;
        return i.negative !== 0 && this.negative === 0 ? (i.negative = 0, a2 = this.sub(i), i.negative ^= 1, a2) : i.negative === 0 && this.negative !== 0 ? (this.negative = 0, a2 = i.sub(this), this.negative = 1, a2) : this.length > i.length ? this.clone().iadd(i) : i.clone().iadd(this);
      }, f2.prototype.isub = function(i) {
        if (i.negative !== 0) {
          i.negative = 0;
          var a2 = this.iadd(i);
          return i.negative = 1, a2._normSign();
        } else if (this.negative !== 0)
          return this.negative = 0, this.iadd(i), this.negative = 1, this._normSign();
        var h3 = this.cmp(i);
        if (h3 === 0)
          return this.negative = 0, this.length = 1, this.words[0] = 0, this;
        var s3, u4;
        h3 > 0 ? (s3 = this, u4 = i) : (s3 = i, u4 = this);
        for (var c2 = 0, b3 = 0;b3 < u4.length; b3++)
          a2 = (s3.words[b3] | 0) - (u4.words[b3] | 0) + c2, c2 = a2 >> 26, this.words[b3] = a2 & 67108863;
        for (;c2 !== 0 && b3 < s3.length; b3++)
          a2 = (s3.words[b3] | 0) + c2, c2 = a2 >> 26, this.words[b3] = a2 & 67108863;
        if (c2 === 0 && b3 < s3.length && s3 !== this)
          for (;b3 < s3.length; b3++)
            this.words[b3] = s3.words[b3];
        return this.length = Math.max(this.length, b3), s3 !== this && (this.negative = 1), this.strip();
      }, f2.prototype.sub = function(i) {
        return this.clone().isub(i);
      };
      function q(v4, i, a2) {
        a2.negative = i.negative ^ v4.negative;
        var h3 = v4.length + i.length | 0;
        a2.length = h3, h3 = h3 - 1 | 0;
        var s3 = v4.words[0] | 0, u4 = i.words[0] | 0, c2 = s3 * u4, b3 = c2 & 67108863, l3 = c2 / 67108864 | 0;
        a2.words[0] = b3;
        for (var n4 = 1;n4 < h3; n4++) {
          for (var d2 = l3 >>> 26, w3 = l3 & 67108863, g2 = Math.min(n4, i.length - 1), _5 = Math.max(0, n4 - v4.length + 1);_5 <= g2; _5++) {
            var A6 = n4 - _5 | 0;
            s3 = v4.words[A6] | 0, u4 = i.words[_5] | 0, c2 = s3 * u4 + w3, d2 += c2 / 67108864 | 0, w3 = c2 & 67108863;
          }
          a2.words[n4] = w3 | 0, l3 = d2 | 0;
        }
        return l3 !== 0 ? a2.words[n4] = l3 | 0 : a2.length--, a2.strip();
      }
      var L2 = function(i, a2, h3) {
        var s3 = i.words, u4 = a2.words, c2 = h3.words, b3 = 0, l3, n4, d2, w3 = s3[0] | 0, g2 = w3 & 8191, _5 = w3 >>> 13, A6 = s3[1] | 0, R4 = A6 & 8191, I2 = A6 >>> 13, Me = s3[2] | 0, k4 = Me & 8191, D3 = Me >>> 13, nt = s3[3] | 0, C3 = nt & 8191, O4 = nt >>> 13, vt = s3[4] | 0, F = vt & 8191, U2 = vt >>> 13, bt = s3[5] | 0, z4 = bt & 8191, H4 = bt >>> 13, mt = s3[6] | 0, W3 = mt & 8191, K2 = mt >>> 13, gt = s3[7] | 0, j32 = gt & 8191, Z4 = gt >>> 13, yt = s3[8] | 0, V3 = yt & 8191, $3 = yt >>> 13, wt = s3[9] | 0, G5 = wt & 8191, Y2 = wt >>> 13, Mt = u4[0] | 0, X4 = Mt & 8191, J = Mt >>> 13, _t = u4[1] | 0, Q4 = _t & 8191, ee = _t >>> 13, xt = u4[2] | 0, te = xt & 8191, re = xt >>> 13, St = u4[3] | 0, ie = St & 8191, ne = St >>> 13, Et = u4[4] | 0, fe = Et & 8191, ae = Et >>> 13, At = u4[5] | 0, oe = At & 8191, se = At >>> 13, Rt = u4[6] | 0, he = Rt & 8191, ue = Rt >>> 13, Bt = u4[7] | 0, le = Bt & 8191, de = Bt >>> 13, qt = u4[8] | 0, ce = qt & 8191, pe = qt >>> 13, It = u4[9] | 0, ve = It & 8191, be = It >>> 13;
        h3.negative = i.negative ^ a2.negative, h3.length = 19, l3 = Math.imul(g2, X4), n4 = Math.imul(g2, J), n4 = n4 + Math.imul(_5, X4) | 0, d2 = Math.imul(_5, J);
        var ft = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (ft >>> 26) | 0, ft &= 67108863, l3 = Math.imul(R4, X4), n4 = Math.imul(R4, J), n4 = n4 + Math.imul(I2, X4) | 0, d2 = Math.imul(I2, J), l3 = l3 + Math.imul(g2, Q4) | 0, n4 = n4 + Math.imul(g2, ee) | 0, n4 = n4 + Math.imul(_5, Q4) | 0, d2 = d2 + Math.imul(_5, ee) | 0;
        var Be = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Be >>> 26) | 0, Be &= 67108863, l3 = Math.imul(k4, X4), n4 = Math.imul(k4, J), n4 = n4 + Math.imul(D3, X4) | 0, d2 = Math.imul(D3, J), l3 = l3 + Math.imul(R4, Q4) | 0, n4 = n4 + Math.imul(R4, ee) | 0, n4 = n4 + Math.imul(I2, Q4) | 0, d2 = d2 + Math.imul(I2, ee) | 0, l3 = l3 + Math.imul(g2, te) | 0, n4 = n4 + Math.imul(g2, re) | 0, n4 = n4 + Math.imul(_5, te) | 0, d2 = d2 + Math.imul(_5, re) | 0;
        var qe = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (qe >>> 26) | 0, qe &= 67108863, l3 = Math.imul(C3, X4), n4 = Math.imul(C3, J), n4 = n4 + Math.imul(O4, X4) | 0, d2 = Math.imul(O4, J), l3 = l3 + Math.imul(k4, Q4) | 0, n4 = n4 + Math.imul(k4, ee) | 0, n4 = n4 + Math.imul(D3, Q4) | 0, d2 = d2 + Math.imul(D3, ee) | 0, l3 = l3 + Math.imul(R4, te) | 0, n4 = n4 + Math.imul(R4, re) | 0, n4 = n4 + Math.imul(I2, te) | 0, d2 = d2 + Math.imul(I2, re) | 0, l3 = l3 + Math.imul(g2, ie) | 0, n4 = n4 + Math.imul(g2, ne) | 0, n4 = n4 + Math.imul(_5, ie) | 0, d2 = d2 + Math.imul(_5, ne) | 0;
        var ze = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (ze >>> 26) | 0, ze &= 67108863, l3 = Math.imul(F, X4), n4 = Math.imul(F, J), n4 = n4 + Math.imul(U2, X4) | 0, d2 = Math.imul(U2, J), l3 = l3 + Math.imul(C3, Q4) | 0, n4 = n4 + Math.imul(C3, ee) | 0, n4 = n4 + Math.imul(O4, Q4) | 0, d2 = d2 + Math.imul(O4, ee) | 0, l3 = l3 + Math.imul(k4, te) | 0, n4 = n4 + Math.imul(k4, re) | 0, n4 = n4 + Math.imul(D3, te) | 0, d2 = d2 + Math.imul(D3, re) | 0, l3 = l3 + Math.imul(R4, ie) | 0, n4 = n4 + Math.imul(R4, ne) | 0, n4 = n4 + Math.imul(I2, ie) | 0, d2 = d2 + Math.imul(I2, ne) | 0, l3 = l3 + Math.imul(g2, fe) | 0, n4 = n4 + Math.imul(g2, ae) | 0, n4 = n4 + Math.imul(_5, fe) | 0, d2 = d2 + Math.imul(_5, ae) | 0;
        var He = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (He >>> 26) | 0, He &= 67108863, l3 = Math.imul(z4, X4), n4 = Math.imul(z4, J), n4 = n4 + Math.imul(H4, X4) | 0, d2 = Math.imul(H4, J), l3 = l3 + Math.imul(F, Q4) | 0, n4 = n4 + Math.imul(F, ee) | 0, n4 = n4 + Math.imul(U2, Q4) | 0, d2 = d2 + Math.imul(U2, ee) | 0, l3 = l3 + Math.imul(C3, te) | 0, n4 = n4 + Math.imul(C3, re) | 0, n4 = n4 + Math.imul(O4, te) | 0, d2 = d2 + Math.imul(O4, re) | 0, l3 = l3 + Math.imul(k4, ie) | 0, n4 = n4 + Math.imul(k4, ne) | 0, n4 = n4 + Math.imul(D3, ie) | 0, d2 = d2 + Math.imul(D3, ne) | 0, l3 = l3 + Math.imul(R4, fe) | 0, n4 = n4 + Math.imul(R4, ae) | 0, n4 = n4 + Math.imul(I2, fe) | 0, d2 = d2 + Math.imul(I2, ae) | 0, l3 = l3 + Math.imul(g2, oe) | 0, n4 = n4 + Math.imul(g2, se) | 0, n4 = n4 + Math.imul(_5, oe) | 0, d2 = d2 + Math.imul(_5, se) | 0;
        var We = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (We >>> 26) | 0, We &= 67108863, l3 = Math.imul(W3, X4), n4 = Math.imul(W3, J), n4 = n4 + Math.imul(K2, X4) | 0, d2 = Math.imul(K2, J), l3 = l3 + Math.imul(z4, Q4) | 0, n4 = n4 + Math.imul(z4, ee) | 0, n4 = n4 + Math.imul(H4, Q4) | 0, d2 = d2 + Math.imul(H4, ee) | 0, l3 = l3 + Math.imul(F, te) | 0, n4 = n4 + Math.imul(F, re) | 0, n4 = n4 + Math.imul(U2, te) | 0, d2 = d2 + Math.imul(U2, re) | 0, l3 = l3 + Math.imul(C3, ie) | 0, n4 = n4 + Math.imul(C3, ne) | 0, n4 = n4 + Math.imul(O4, ie) | 0, d2 = d2 + Math.imul(O4, ne) | 0, l3 = l3 + Math.imul(k4, fe) | 0, n4 = n4 + Math.imul(k4, ae) | 0, n4 = n4 + Math.imul(D3, fe) | 0, d2 = d2 + Math.imul(D3, ae) | 0, l3 = l3 + Math.imul(R4, oe) | 0, n4 = n4 + Math.imul(R4, se) | 0, n4 = n4 + Math.imul(I2, oe) | 0, d2 = d2 + Math.imul(I2, se) | 0, l3 = l3 + Math.imul(g2, he) | 0, n4 = n4 + Math.imul(g2, ue) | 0, n4 = n4 + Math.imul(_5, he) | 0, d2 = d2 + Math.imul(_5, ue) | 0;
        var Ke = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ke >>> 26) | 0, Ke &= 67108863, l3 = Math.imul(j32, X4), n4 = Math.imul(j32, J), n4 = n4 + Math.imul(Z4, X4) | 0, d2 = Math.imul(Z4, J), l3 = l3 + Math.imul(W3, Q4) | 0, n4 = n4 + Math.imul(W3, ee) | 0, n4 = n4 + Math.imul(K2, Q4) | 0, d2 = d2 + Math.imul(K2, ee) | 0, l3 = l3 + Math.imul(z4, te) | 0, n4 = n4 + Math.imul(z4, re) | 0, n4 = n4 + Math.imul(H4, te) | 0, d2 = d2 + Math.imul(H4, re) | 0, l3 = l3 + Math.imul(F, ie) | 0, n4 = n4 + Math.imul(F, ne) | 0, n4 = n4 + Math.imul(U2, ie) | 0, d2 = d2 + Math.imul(U2, ne) | 0, l3 = l3 + Math.imul(C3, fe) | 0, n4 = n4 + Math.imul(C3, ae) | 0, n4 = n4 + Math.imul(O4, fe) | 0, d2 = d2 + Math.imul(O4, ae) | 0, l3 = l3 + Math.imul(k4, oe) | 0, n4 = n4 + Math.imul(k4, se) | 0, n4 = n4 + Math.imul(D3, oe) | 0, d2 = d2 + Math.imul(D3, se) | 0, l3 = l3 + Math.imul(R4, he) | 0, n4 = n4 + Math.imul(R4, ue) | 0, n4 = n4 + Math.imul(I2, he) | 0, d2 = d2 + Math.imul(I2, ue) | 0, l3 = l3 + Math.imul(g2, le) | 0, n4 = n4 + Math.imul(g2, de) | 0, n4 = n4 + Math.imul(_5, le) | 0, d2 = d2 + Math.imul(_5, de) | 0;
        var je = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (je >>> 26) | 0, je &= 67108863, l3 = Math.imul(V3, X4), n4 = Math.imul(V3, J), n4 = n4 + Math.imul($3, X4) | 0, d2 = Math.imul($3, J), l3 = l3 + Math.imul(j32, Q4) | 0, n4 = n4 + Math.imul(j32, ee) | 0, n4 = n4 + Math.imul(Z4, Q4) | 0, d2 = d2 + Math.imul(Z4, ee) | 0, l3 = l3 + Math.imul(W3, te) | 0, n4 = n4 + Math.imul(W3, re) | 0, n4 = n4 + Math.imul(K2, te) | 0, d2 = d2 + Math.imul(K2, re) | 0, l3 = l3 + Math.imul(z4, ie) | 0, n4 = n4 + Math.imul(z4, ne) | 0, n4 = n4 + Math.imul(H4, ie) | 0, d2 = d2 + Math.imul(H4, ne) | 0, l3 = l3 + Math.imul(F, fe) | 0, n4 = n4 + Math.imul(F, ae) | 0, n4 = n4 + Math.imul(U2, fe) | 0, d2 = d2 + Math.imul(U2, ae) | 0, l3 = l3 + Math.imul(C3, oe) | 0, n4 = n4 + Math.imul(C3, se) | 0, n4 = n4 + Math.imul(O4, oe) | 0, d2 = d2 + Math.imul(O4, se) | 0, l3 = l3 + Math.imul(k4, he) | 0, n4 = n4 + Math.imul(k4, ue) | 0, n4 = n4 + Math.imul(D3, he) | 0, d2 = d2 + Math.imul(D3, ue) | 0, l3 = l3 + Math.imul(R4, le) | 0, n4 = n4 + Math.imul(R4, de) | 0, n4 = n4 + Math.imul(I2, le) | 0, d2 = d2 + Math.imul(I2, de) | 0, l3 = l3 + Math.imul(g2, ce) | 0, n4 = n4 + Math.imul(g2, pe) | 0, n4 = n4 + Math.imul(_5, ce) | 0, d2 = d2 + Math.imul(_5, pe) | 0;
        var Ze = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ze >>> 26) | 0, Ze &= 67108863, l3 = Math.imul(G5, X4), n4 = Math.imul(G5, J), n4 = n4 + Math.imul(Y2, X4) | 0, d2 = Math.imul(Y2, J), l3 = l3 + Math.imul(V3, Q4) | 0, n4 = n4 + Math.imul(V3, ee) | 0, n4 = n4 + Math.imul($3, Q4) | 0, d2 = d2 + Math.imul($3, ee) | 0, l3 = l3 + Math.imul(j32, te) | 0, n4 = n4 + Math.imul(j32, re) | 0, n4 = n4 + Math.imul(Z4, te) | 0, d2 = d2 + Math.imul(Z4, re) | 0, l3 = l3 + Math.imul(W3, ie) | 0, n4 = n4 + Math.imul(W3, ne) | 0, n4 = n4 + Math.imul(K2, ie) | 0, d2 = d2 + Math.imul(K2, ne) | 0, l3 = l3 + Math.imul(z4, fe) | 0, n4 = n4 + Math.imul(z4, ae) | 0, n4 = n4 + Math.imul(H4, fe) | 0, d2 = d2 + Math.imul(H4, ae) | 0, l3 = l3 + Math.imul(F, oe) | 0, n4 = n4 + Math.imul(F, se) | 0, n4 = n4 + Math.imul(U2, oe) | 0, d2 = d2 + Math.imul(U2, se) | 0, l3 = l3 + Math.imul(C3, he) | 0, n4 = n4 + Math.imul(C3, ue) | 0, n4 = n4 + Math.imul(O4, he) | 0, d2 = d2 + Math.imul(O4, ue) | 0, l3 = l3 + Math.imul(k4, le) | 0, n4 = n4 + Math.imul(k4, de) | 0, n4 = n4 + Math.imul(D3, le) | 0, d2 = d2 + Math.imul(D3, de) | 0, l3 = l3 + Math.imul(R4, ce) | 0, n4 = n4 + Math.imul(R4, pe) | 0, n4 = n4 + Math.imul(I2, ce) | 0, d2 = d2 + Math.imul(I2, pe) | 0, l3 = l3 + Math.imul(g2, ve) | 0, n4 = n4 + Math.imul(g2, be) | 0, n4 = n4 + Math.imul(_5, ve) | 0, d2 = d2 + Math.imul(_5, be) | 0;
        var Ve = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ve >>> 26) | 0, Ve &= 67108863, l3 = Math.imul(G5, Q4), n4 = Math.imul(G5, ee), n4 = n4 + Math.imul(Y2, Q4) | 0, d2 = Math.imul(Y2, ee), l3 = l3 + Math.imul(V3, te) | 0, n4 = n4 + Math.imul(V3, re) | 0, n4 = n4 + Math.imul($3, te) | 0, d2 = d2 + Math.imul($3, re) | 0, l3 = l3 + Math.imul(j32, ie) | 0, n4 = n4 + Math.imul(j32, ne) | 0, n4 = n4 + Math.imul(Z4, ie) | 0, d2 = d2 + Math.imul(Z4, ne) | 0, l3 = l3 + Math.imul(W3, fe) | 0, n4 = n4 + Math.imul(W3, ae) | 0, n4 = n4 + Math.imul(K2, fe) | 0, d2 = d2 + Math.imul(K2, ae) | 0, l3 = l3 + Math.imul(z4, oe) | 0, n4 = n4 + Math.imul(z4, se) | 0, n4 = n4 + Math.imul(H4, oe) | 0, d2 = d2 + Math.imul(H4, se) | 0, l3 = l3 + Math.imul(F, he) | 0, n4 = n4 + Math.imul(F, ue) | 0, n4 = n4 + Math.imul(U2, he) | 0, d2 = d2 + Math.imul(U2, ue) | 0, l3 = l3 + Math.imul(C3, le) | 0, n4 = n4 + Math.imul(C3, de) | 0, n4 = n4 + Math.imul(O4, le) | 0, d2 = d2 + Math.imul(O4, de) | 0, l3 = l3 + Math.imul(k4, ce) | 0, n4 = n4 + Math.imul(k4, pe) | 0, n4 = n4 + Math.imul(D3, ce) | 0, d2 = d2 + Math.imul(D3, pe) | 0, l3 = l3 + Math.imul(R4, ve) | 0, n4 = n4 + Math.imul(R4, be) | 0, n4 = n4 + Math.imul(I2, ve) | 0, d2 = d2 + Math.imul(I2, be) | 0;
        var $e = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + ($e >>> 26) | 0, $e &= 67108863, l3 = Math.imul(G5, te), n4 = Math.imul(G5, re), n4 = n4 + Math.imul(Y2, te) | 0, d2 = Math.imul(Y2, re), l3 = l3 + Math.imul(V3, ie) | 0, n4 = n4 + Math.imul(V3, ne) | 0, n4 = n4 + Math.imul($3, ie) | 0, d2 = d2 + Math.imul($3, ne) | 0, l3 = l3 + Math.imul(j32, fe) | 0, n4 = n4 + Math.imul(j32, ae) | 0, n4 = n4 + Math.imul(Z4, fe) | 0, d2 = d2 + Math.imul(Z4, ae) | 0, l3 = l3 + Math.imul(W3, oe) | 0, n4 = n4 + Math.imul(W3, se) | 0, n4 = n4 + Math.imul(K2, oe) | 0, d2 = d2 + Math.imul(K2, se) | 0, l3 = l3 + Math.imul(z4, he) | 0, n4 = n4 + Math.imul(z4, ue) | 0, n4 = n4 + Math.imul(H4, he) | 0, d2 = d2 + Math.imul(H4, ue) | 0, l3 = l3 + Math.imul(F, le) | 0, n4 = n4 + Math.imul(F, de) | 0, n4 = n4 + Math.imul(U2, le) | 0, d2 = d2 + Math.imul(U2, de) | 0, l3 = l3 + Math.imul(C3, ce) | 0, n4 = n4 + Math.imul(C3, pe) | 0, n4 = n4 + Math.imul(O4, ce) | 0, d2 = d2 + Math.imul(O4, pe) | 0, l3 = l3 + Math.imul(k4, ve) | 0, n4 = n4 + Math.imul(k4, be) | 0, n4 = n4 + Math.imul(D3, ve) | 0, d2 = d2 + Math.imul(D3, be) | 0;
        var Ge = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ge >>> 26) | 0, Ge &= 67108863, l3 = Math.imul(G5, ie), n4 = Math.imul(G5, ne), n4 = n4 + Math.imul(Y2, ie) | 0, d2 = Math.imul(Y2, ne), l3 = l3 + Math.imul(V3, fe) | 0, n4 = n4 + Math.imul(V3, ae) | 0, n4 = n4 + Math.imul($3, fe) | 0, d2 = d2 + Math.imul($3, ae) | 0, l3 = l3 + Math.imul(j32, oe) | 0, n4 = n4 + Math.imul(j32, se) | 0, n4 = n4 + Math.imul(Z4, oe) | 0, d2 = d2 + Math.imul(Z4, se) | 0, l3 = l3 + Math.imul(W3, he) | 0, n4 = n4 + Math.imul(W3, ue) | 0, n4 = n4 + Math.imul(K2, he) | 0, d2 = d2 + Math.imul(K2, ue) | 0, l3 = l3 + Math.imul(z4, le) | 0, n4 = n4 + Math.imul(z4, de) | 0, n4 = n4 + Math.imul(H4, le) | 0, d2 = d2 + Math.imul(H4, de) | 0, l3 = l3 + Math.imul(F, ce) | 0, n4 = n4 + Math.imul(F, pe) | 0, n4 = n4 + Math.imul(U2, ce) | 0, d2 = d2 + Math.imul(U2, pe) | 0, l3 = l3 + Math.imul(C3, ve) | 0, n4 = n4 + Math.imul(C3, be) | 0, n4 = n4 + Math.imul(O4, ve) | 0, d2 = d2 + Math.imul(O4, be) | 0;
        var Ye = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ye >>> 26) | 0, Ye &= 67108863, l3 = Math.imul(G5, fe), n4 = Math.imul(G5, ae), n4 = n4 + Math.imul(Y2, fe) | 0, d2 = Math.imul(Y2, ae), l3 = l3 + Math.imul(V3, oe) | 0, n4 = n4 + Math.imul(V3, se) | 0, n4 = n4 + Math.imul($3, oe) | 0, d2 = d2 + Math.imul($3, se) | 0, l3 = l3 + Math.imul(j32, he) | 0, n4 = n4 + Math.imul(j32, ue) | 0, n4 = n4 + Math.imul(Z4, he) | 0, d2 = d2 + Math.imul(Z4, ue) | 0, l3 = l3 + Math.imul(W3, le) | 0, n4 = n4 + Math.imul(W3, de) | 0, n4 = n4 + Math.imul(K2, le) | 0, d2 = d2 + Math.imul(K2, de) | 0, l3 = l3 + Math.imul(z4, ce) | 0, n4 = n4 + Math.imul(z4, pe) | 0, n4 = n4 + Math.imul(H4, ce) | 0, d2 = d2 + Math.imul(H4, pe) | 0, l3 = l3 + Math.imul(F, ve) | 0, n4 = n4 + Math.imul(F, be) | 0, n4 = n4 + Math.imul(U2, ve) | 0, d2 = d2 + Math.imul(U2, be) | 0;
        var Xe = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Xe >>> 26) | 0, Xe &= 67108863, l3 = Math.imul(G5, oe), n4 = Math.imul(G5, se), n4 = n4 + Math.imul(Y2, oe) | 0, d2 = Math.imul(Y2, se), l3 = l3 + Math.imul(V3, he) | 0, n4 = n4 + Math.imul(V3, ue) | 0, n4 = n4 + Math.imul($3, he) | 0, d2 = d2 + Math.imul($3, ue) | 0, l3 = l3 + Math.imul(j32, le) | 0, n4 = n4 + Math.imul(j32, de) | 0, n4 = n4 + Math.imul(Z4, le) | 0, d2 = d2 + Math.imul(Z4, de) | 0, l3 = l3 + Math.imul(W3, ce) | 0, n4 = n4 + Math.imul(W3, pe) | 0, n4 = n4 + Math.imul(K2, ce) | 0, d2 = d2 + Math.imul(K2, pe) | 0, l3 = l3 + Math.imul(z4, ve) | 0, n4 = n4 + Math.imul(z4, be) | 0, n4 = n4 + Math.imul(H4, ve) | 0, d2 = d2 + Math.imul(H4, be) | 0;
        var Je = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Je >>> 26) | 0, Je &= 67108863, l3 = Math.imul(G5, he), n4 = Math.imul(G5, ue), n4 = n4 + Math.imul(Y2, he) | 0, d2 = Math.imul(Y2, ue), l3 = l3 + Math.imul(V3, le) | 0, n4 = n4 + Math.imul(V3, de) | 0, n4 = n4 + Math.imul($3, le) | 0, d2 = d2 + Math.imul($3, de) | 0, l3 = l3 + Math.imul(j32, ce) | 0, n4 = n4 + Math.imul(j32, pe) | 0, n4 = n4 + Math.imul(Z4, ce) | 0, d2 = d2 + Math.imul(Z4, pe) | 0, l3 = l3 + Math.imul(W3, ve) | 0, n4 = n4 + Math.imul(W3, be) | 0, n4 = n4 + Math.imul(K2, ve) | 0, d2 = d2 + Math.imul(K2, be) | 0;
        var Qe = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Qe >>> 26) | 0, Qe &= 67108863, l3 = Math.imul(G5, le), n4 = Math.imul(G5, de), n4 = n4 + Math.imul(Y2, le) | 0, d2 = Math.imul(Y2, de), l3 = l3 + Math.imul(V3, ce) | 0, n4 = n4 + Math.imul(V3, pe) | 0, n4 = n4 + Math.imul($3, ce) | 0, d2 = d2 + Math.imul($3, pe) | 0, l3 = l3 + Math.imul(j32, ve) | 0, n4 = n4 + Math.imul(j32, be) | 0, n4 = n4 + Math.imul(Z4, ve) | 0, d2 = d2 + Math.imul(Z4, be) | 0;
        var et = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (et >>> 26) | 0, et &= 67108863, l3 = Math.imul(G5, ce), n4 = Math.imul(G5, pe), n4 = n4 + Math.imul(Y2, ce) | 0, d2 = Math.imul(Y2, pe), l3 = l3 + Math.imul(V3, ve) | 0, n4 = n4 + Math.imul(V3, be) | 0, n4 = n4 + Math.imul($3, ve) | 0, d2 = d2 + Math.imul($3, be) | 0;
        var tt = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (tt >>> 26) | 0, tt &= 67108863, l3 = Math.imul(G5, ve), n4 = Math.imul(G5, be), n4 = n4 + Math.imul(Y2, ve) | 0, d2 = Math.imul(Y2, be);
        var rt = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        return b3 = (d2 + (n4 >>> 13) | 0) + (rt >>> 26) | 0, rt &= 67108863, c2[0] = ft, c2[1] = Be, c2[2] = qe, c2[3] = ze, c2[4] = He, c2[5] = We, c2[6] = Ke, c2[7] = je, c2[8] = Ze, c2[9] = Ve, c2[10] = $e, c2[11] = Ge, c2[12] = Ye, c2[13] = Xe, c2[14] = Je, c2[15] = Qe, c2[16] = et, c2[17] = tt, c2[18] = rt, b3 !== 0 && (c2[19] = b3, h3.length++), h3;
      };
      Math.imul || (L2 = q);
      function ge(v4, i, a2) {
        a2.negative = i.negative ^ v4.negative, a2.length = v4.length + i.length;
        for (var h3 = 0, s3 = 0, u4 = 0;u4 < a2.length - 1; u4++) {
          var c2 = s3;
          s3 = 0;
          for (var b3 = h3 & 67108863, l3 = Math.min(u4, i.length - 1), n4 = Math.max(0, u4 - v4.length + 1);n4 <= l3; n4++) {
            var d2 = u4 - n4, w3 = v4.words[d2] | 0, g2 = i.words[n4] | 0, _5 = w3 * g2, A6 = _5 & 67108863;
            c2 = c2 + (_5 / 67108864 | 0) | 0, A6 = A6 + b3 | 0, b3 = A6 & 67108863, c2 = c2 + (A6 >>> 26) | 0, s3 += c2 >>> 26, c2 &= 67108863;
          }
          a2.words[u4] = b3, h3 = c2, c2 = s3;
        }
        return h3 !== 0 ? a2.words[u4] = h3 : a2.length--, a2.strip();
      }
      function _e(v4, i, a2) {
        var h3 = new N4;
        return h3.mulp(v4, i, a2);
      }
      f2.prototype.mulTo = function(i, a2) {
        var h3, s3 = this.length + i.length;
        return this.length === 10 && i.length === 10 ? h3 = L2(this, i, a2) : s3 < 63 ? h3 = q(this, i, a2) : s3 < 1024 ? h3 = ge(this, i, a2) : h3 = _e(this, i, a2), h3;
      };
      function N4(v4, i) {
        this.x = v4, this.y = i;
      }
      N4.prototype.makeRBT = function(i) {
        for (var a2 = new Array(i), h3 = f2.prototype._countBits(i) - 1, s3 = 0;s3 < i; s3++)
          a2[s3] = this.revBin(s3, h3, i);
        return a2;
      }, N4.prototype.revBin = function(i, a2, h3) {
        if (i === 0 || i === h3 - 1)
          return i;
        for (var s3 = 0, u4 = 0;u4 < a2; u4++)
          s3 |= (i & 1) << a2 - u4 - 1, i >>= 1;
        return s3;
      }, N4.prototype.permute = function(i, a2, h3, s3, u4, c2) {
        for (var b3 = 0;b3 < c2; b3++)
          s3[b3] = a2[i[b3]], u4[b3] = h3[i[b3]];
      }, N4.prototype.transform = function(i, a2, h3, s3, u4, c2) {
        this.permute(c2, i, a2, h3, s3, u4);
        for (var b3 = 1;b3 < u4; b3 <<= 1)
          for (var l3 = b3 << 1, n4 = Math.cos(2 * Math.PI / l3), d2 = Math.sin(2 * Math.PI / l3), w3 = 0;w3 < u4; w3 += l3)
            for (var g2 = n4, _5 = d2, A6 = 0;A6 < b3; A6++) {
              var R4 = h3[w3 + A6], I2 = s3[w3 + A6], Me = h3[w3 + A6 + b3], k4 = s3[w3 + A6 + b3], D3 = g2 * Me - _5 * k4;
              k4 = g2 * k4 + _5 * Me, Me = D3, h3[w3 + A6] = R4 + Me, s3[w3 + A6] = I2 + k4, h3[w3 + A6 + b3] = R4 - Me, s3[w3 + A6 + b3] = I2 - k4, A6 !== l3 && (D3 = n4 * g2 - d2 * _5, _5 = n4 * _5 + d2 * g2, g2 = D3);
            }
      }, N4.prototype.guessLen13b = function(i, a2) {
        var h3 = Math.max(a2, i) | 1, s3 = h3 & 1, u4 = 0;
        for (h3 = h3 / 2 | 0;h3; h3 = h3 >>> 1)
          u4++;
        return 1 << u4 + 1 + s3;
      }, N4.prototype.conjugate = function(i, a2, h3) {
        if (!(h3 <= 1))
          for (var s3 = 0;s3 < h3 / 2; s3++) {
            var u4 = i[s3];
            i[s3] = i[h3 - s3 - 1], i[h3 - s3 - 1] = u4, u4 = a2[s3], a2[s3] = -a2[h3 - s3 - 1], a2[h3 - s3 - 1] = -u4;
          }
      }, N4.prototype.normalize13b = function(i, a2) {
        for (var h3 = 0, s3 = 0;s3 < a2 / 2; s3++) {
          var u4 = Math.round(i[2 * s3 + 1] / a2) * 8192 + Math.round(i[2 * s3] / a2) + h3;
          i[s3] = u4 & 67108863, u4 < 67108864 ? h3 = 0 : h3 = u4 / 67108864 | 0;
        }
        return i;
      }, N4.prototype.convert13b = function(i, a2, h3, s3) {
        for (var u4 = 0, c2 = 0;c2 < a2; c2++)
          u4 = u4 + (i[c2] | 0), h3[2 * c2] = u4 & 8191, u4 = u4 >>> 13, h3[2 * c2 + 1] = u4 & 8191, u4 = u4 >>> 13;
        for (c2 = 2 * a2;c2 < s3; ++c2)
          h3[c2] = 0;
        r2(u4 === 0), r2((u4 & -8192) === 0);
      }, N4.prototype.stub = function(i) {
        for (var a2 = new Array(i), h3 = 0;h3 < i; h3++)
          a2[h3] = 0;
        return a2;
      }, N4.prototype.mulp = function(i, a2, h3) {
        var s3 = 2 * this.guessLen13b(i.length, a2.length), u4 = this.makeRBT(s3), c2 = this.stub(s3), b3 = new Array(s3), l3 = new Array(s3), n4 = new Array(s3), d2 = new Array(s3), w3 = new Array(s3), g2 = new Array(s3), _5 = h3.words;
        _5.length = s3, this.convert13b(i.words, i.length, b3, s3), this.convert13b(a2.words, a2.length, d2, s3), this.transform(b3, c2, l3, n4, s3, u4), this.transform(d2, c2, w3, g2, s3, u4);
        for (var A6 = 0;A6 < s3; A6++) {
          var R4 = l3[A6] * w3[A6] - n4[A6] * g2[A6];
          n4[A6] = l3[A6] * g2[A6] + n4[A6] * w3[A6], l3[A6] = R4;
        }
        return this.conjugate(l3, n4, s3), this.transform(l3, n4, _5, c2, s3, u4), this.conjugate(_5, c2, s3), this.normalize13b(_5, s3), h3.negative = i.negative ^ a2.negative, h3.length = i.length + a2.length, h3.strip();
      }, f2.prototype.mul = function(i) {
        var a2 = new f2(null);
        return a2.words = new Array(this.length + i.length), this.mulTo(i, a2);
      }, f2.prototype.mulf = function(i) {
        var a2 = new f2(null);
        return a2.words = new Array(this.length + i.length), _e(this, i, a2);
      }, f2.prototype.imul = function(i) {
        return this.clone().mulTo(i, this);
      }, f2.prototype.imuln = function(i) {
        r2(typeof i == "number"), r2(i < 67108864);
        for (var a2 = 0, h3 = 0;h3 < this.length; h3++) {
          var s3 = (this.words[h3] | 0) * i, u4 = (s3 & 67108863) + (a2 & 67108863);
          a2 >>= 26, a2 += s3 / 67108864 | 0, a2 += u4 >>> 26, this.words[h3] = u4 & 67108863;
        }
        return a2 !== 0 && (this.words[h3] = a2, this.length++), this;
      }, f2.prototype.muln = function(i) {
        return this.clone().imuln(i);
      }, f2.prototype.sqr = function() {
        return this.mul(this);
      }, f2.prototype.isqr = function() {
        return this.imul(this.clone());
      }, f2.prototype.pow = function(i) {
        var a2 = B5(i);
        if (a2.length === 0)
          return new f2(1);
        for (var h3 = this, s3 = 0;s3 < a2.length && a2[s3] === 0; s3++, h3 = h3.sqr())
          ;
        if (++s3 < a2.length)
          for (var u4 = h3.sqr();s3 < a2.length; s3++, u4 = u4.sqr())
            a2[s3] !== 0 && (h3 = h3.mul(u4));
        return h3;
      }, f2.prototype.iushln = function(i) {
        r2(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26, s3 = 67108863 >>> 26 - a2 << 26 - a2, u4;
        if (a2 !== 0) {
          var c2 = 0;
          for (u4 = 0;u4 < this.length; u4++) {
            var b3 = this.words[u4] & s3, l3 = (this.words[u4] | 0) - b3 << a2;
            this.words[u4] = l3 | c2, c2 = b3 >>> 26 - a2;
          }
          c2 && (this.words[u4] = c2, this.length++);
        }
        if (h3 !== 0) {
          for (u4 = this.length - 1;u4 >= 0; u4--)
            this.words[u4 + h3] = this.words[u4];
          for (u4 = 0;u4 < h3; u4++)
            this.words[u4] = 0;
          this.length += h3;
        }
        return this.strip();
      }, f2.prototype.ishln = function(i) {
        return r2(this.negative === 0), this.iushln(i);
      }, f2.prototype.iushrn = function(i, a2, h3) {
        r2(typeof i == "number" && i >= 0);
        var s3;
        a2 ? s3 = (a2 - a2 % 26) / 26 : s3 = 0;
        var u4 = i % 26, c2 = Math.min((i - u4) / 26, this.length), b3 = 67108863 ^ 67108863 >>> u4 << u4, l3 = h3;
        if (s3 -= c2, s3 = Math.max(0, s3), l3) {
          for (var n4 = 0;n4 < c2; n4++)
            l3.words[n4] = this.words[n4];
          l3.length = c2;
        }
        if (c2 !== 0)
          if (this.length > c2)
            for (this.length -= c2, n4 = 0;n4 < this.length; n4++)
              this.words[n4] = this.words[n4 + c2];
          else
            this.words[0] = 0, this.length = 1;
        var d2 = 0;
        for (n4 = this.length - 1;n4 >= 0 && (d2 !== 0 || n4 >= s3); n4--) {
          var w3 = this.words[n4] | 0;
          this.words[n4] = d2 << 26 - u4 | w3 >>> u4, d2 = w3 & b3;
        }
        return l3 && d2 !== 0 && (l3.words[l3.length++] = d2), this.length === 0 && (this.words[0] = 0, this.length = 1), this.strip();
      }, f2.prototype.ishrn = function(i, a2, h3) {
        return r2(this.negative === 0), this.iushrn(i, a2, h3);
      }, f2.prototype.shln = function(i) {
        return this.clone().ishln(i);
      }, f2.prototype.ushln = function(i) {
        return this.clone().iushln(i);
      }, f2.prototype.shrn = function(i) {
        return this.clone().ishrn(i);
      }, f2.prototype.ushrn = function(i) {
        return this.clone().iushrn(i);
      }, f2.prototype.testn = function(i) {
        r2(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26, s3 = 1 << a2;
        if (this.length <= h3)
          return false;
        var u4 = this.words[h3];
        return !!(u4 & s3);
      }, f2.prototype.imaskn = function(i) {
        r2(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26;
        if (r2(this.negative === 0, "imaskn works only with positive numbers"), this.length <= h3)
          return this;
        if (a2 !== 0 && h3++, this.length = Math.min(h3, this.length), a2 !== 0) {
          var s3 = 67108863 ^ 67108863 >>> a2 << a2;
          this.words[this.length - 1] &= s3;
        }
        return this.strip();
      }, f2.prototype.maskn = function(i) {
        return this.clone().imaskn(i);
      }, f2.prototype.iaddn = function(i) {
        return r2(typeof i == "number"), r2(i < 67108864), i < 0 ? this.isubn(-i) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) < i ? (this.words[0] = i - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(i), this.negative = 1, this) : this._iaddn(i);
      }, f2.prototype._iaddn = function(i) {
        this.words[0] += i;
        for (var a2 = 0;a2 < this.length && this.words[a2] >= 67108864; a2++)
          this.words[a2] -= 67108864, a2 === this.length - 1 ? this.words[a2 + 1] = 1 : this.words[a2 + 1]++;
        return this.length = Math.max(this.length, a2 + 1), this;
      }, f2.prototype.isubn = function(i) {
        if (r2(typeof i == "number"), r2(i < 67108864), i < 0)
          return this.iaddn(-i);
        if (this.negative !== 0)
          return this.negative = 0, this.iaddn(i), this.negative = 1, this;
        if (this.words[0] -= i, this.length === 1 && this.words[0] < 0)
          this.words[0] = -this.words[0], this.negative = 1;
        else
          for (var a2 = 0;a2 < this.length && this.words[a2] < 0; a2++)
            this.words[a2] += 67108864, this.words[a2 + 1] -= 1;
        return this.strip();
      }, f2.prototype.addn = function(i) {
        return this.clone().iaddn(i);
      }, f2.prototype.subn = function(i) {
        return this.clone().isubn(i);
      }, f2.prototype.iabs = function() {
        return this.negative = 0, this;
      }, f2.prototype.abs = function() {
        return this.clone().iabs();
      }, f2.prototype._ishlnsubmul = function(i, a2, h3) {
        var s3 = i.length + h3, u4;
        this._expand(s3);
        var c2, b3 = 0;
        for (u4 = 0;u4 < i.length; u4++) {
          c2 = (this.words[u4 + h3] | 0) + b3;
          var l3 = (i.words[u4] | 0) * a2;
          c2 -= l3 & 67108863, b3 = (c2 >> 26) - (l3 / 67108864 | 0), this.words[u4 + h3] = c2 & 67108863;
        }
        for (;u4 < this.length - h3; u4++)
          c2 = (this.words[u4 + h3] | 0) + b3, b3 = c2 >> 26, this.words[u4 + h3] = c2 & 67108863;
        if (b3 === 0)
          return this.strip();
        for (r2(b3 === -1), b3 = 0, u4 = 0;u4 < this.length; u4++)
          c2 = -(this.words[u4] | 0) + b3, b3 = c2 >> 26, this.words[u4] = c2 & 67108863;
        return this.negative = 1, this.strip();
      }, f2.prototype._wordDiv = function(i, a2) {
        var h3 = this.length - i.length, s3 = this.clone(), u4 = i, c2 = u4.words[u4.length - 1] | 0, b3 = this._countBits(c2);
        h3 = 26 - b3, h3 !== 0 && (u4 = u4.ushln(h3), s3.iushln(h3), c2 = u4.words[u4.length - 1] | 0);
        var l3 = s3.length - u4.length, n4;
        if (a2 !== "mod") {
          n4 = new f2(null), n4.length = l3 + 1, n4.words = new Array(n4.length);
          for (var d2 = 0;d2 < n4.length; d2++)
            n4.words[d2] = 0;
        }
        var w3 = s3.clone()._ishlnsubmul(u4, 1, l3);
        w3.negative === 0 && (s3 = w3, n4 && (n4.words[l3] = 1));
        for (var g2 = l3 - 1;g2 >= 0; g2--) {
          var _5 = (s3.words[u4.length + g2] | 0) * 67108864 + (s3.words[u4.length + g2 - 1] | 0);
          for (_5 = Math.min(_5 / c2 | 0, 67108863), s3._ishlnsubmul(u4, _5, g2);s3.negative !== 0; )
            _5--, s3.negative = 0, s3._ishlnsubmul(u4, 1, g2), s3.isZero() || (s3.negative ^= 1);
          n4 && (n4.words[g2] = _5);
        }
        return n4 && n4.strip(), s3.strip(), a2 !== "div" && h3 !== 0 && s3.iushrn(h3), { div: n4 || null, mod: s3 };
      }, f2.prototype.divmod = function(i, a2, h3) {
        if (r2(!i.isZero()), this.isZero())
          return { div: new f2(0), mod: new f2(0) };
        var s3, u4, c2;
        return this.negative !== 0 && i.negative === 0 ? (c2 = this.neg().divmod(i, a2), a2 !== "mod" && (s3 = c2.div.neg()), a2 !== "div" && (u4 = c2.mod.neg(), h3 && u4.negative !== 0 && u4.iadd(i)), { div: s3, mod: u4 }) : this.negative === 0 && i.negative !== 0 ? (c2 = this.divmod(i.neg(), a2), a2 !== "mod" && (s3 = c2.div.neg()), { div: s3, mod: c2.mod }) : (this.negative & i.negative) !== 0 ? (c2 = this.neg().divmod(i.neg(), a2), a2 !== "div" && (u4 = c2.mod.neg(), h3 && u4.negative !== 0 && u4.isub(i)), { div: c2.div, mod: u4 }) : i.length > this.length || this.cmp(i) < 0 ? { div: new f2(0), mod: this } : i.length === 1 ? a2 === "div" ? { div: this.divn(i.words[0]), mod: null } : a2 === "mod" ? { div: null, mod: new f2(this.modn(i.words[0])) } : { div: this.divn(i.words[0]), mod: new f2(this.modn(i.words[0])) } : this._wordDiv(i, a2);
      }, f2.prototype.div = function(i) {
        return this.divmod(i, "div", false).div;
      }, f2.prototype.mod = function(i) {
        return this.divmod(i, "mod", false).mod;
      }, f2.prototype.umod = function(i) {
        return this.divmod(i, "mod", true).mod;
      }, f2.prototype.divRound = function(i) {
        var a2 = this.divmod(i);
        if (a2.mod.isZero())
          return a2.div;
        var h3 = a2.div.negative !== 0 ? a2.mod.isub(i) : a2.mod, s3 = i.ushrn(1), u4 = i.andln(1), c2 = h3.cmp(s3);
        return c2 < 0 || u4 === 1 && c2 === 0 ? a2.div : a2.div.negative !== 0 ? a2.div.isubn(1) : a2.div.iaddn(1);
      }, f2.prototype.modn = function(i) {
        r2(i <= 67108863);
        for (var a2 = (1 << 26) % i, h3 = 0, s3 = this.length - 1;s3 >= 0; s3--)
          h3 = (a2 * h3 + (this.words[s3] | 0)) % i;
        return h3;
      }, f2.prototype.idivn = function(i) {
        r2(i <= 67108863);
        for (var a2 = 0, h3 = this.length - 1;h3 >= 0; h3--) {
          var s3 = (this.words[h3] | 0) + a2 * 67108864;
          this.words[h3] = s3 / i | 0, a2 = s3 % i;
        }
        return this.strip();
      }, f2.prototype.divn = function(i) {
        return this.clone().idivn(i);
      }, f2.prototype.egcd = function(i) {
        r2(i.negative === 0), r2(!i.isZero());
        var a2 = this, h3 = i.clone();
        a2.negative !== 0 ? a2 = a2.umod(i) : a2 = a2.clone();
        for (var s3 = new f2(1), u4 = new f2(0), c2 = new f2(0), b3 = new f2(1), l3 = 0;a2.isEven() && h3.isEven(); )
          a2.iushrn(1), h3.iushrn(1), ++l3;
        for (var n4 = h3.clone(), d2 = a2.clone();!a2.isZero(); ) {
          for (var w3 = 0, g2 = 1;(a2.words[0] & g2) === 0 && w3 < 26; ++w3, g2 <<= 1)
            ;
          if (w3 > 0)
            for (a2.iushrn(w3);w3-- > 0; )
              (s3.isOdd() || u4.isOdd()) && (s3.iadd(n4), u4.isub(d2)), s3.iushrn(1), u4.iushrn(1);
          for (var _5 = 0, A6 = 1;(h3.words[0] & A6) === 0 && _5 < 26; ++_5, A6 <<= 1)
            ;
          if (_5 > 0)
            for (h3.iushrn(_5);_5-- > 0; )
              (c2.isOdd() || b3.isOdd()) && (c2.iadd(n4), b3.isub(d2)), c2.iushrn(1), b3.iushrn(1);
          a2.cmp(h3) >= 0 ? (a2.isub(h3), s3.isub(c2), u4.isub(b3)) : (h3.isub(a2), c2.isub(s3), b3.isub(u4));
        }
        return { a: c2, b: b3, gcd: h3.iushln(l3) };
      }, f2.prototype._invmp = function(i) {
        r2(i.negative === 0), r2(!i.isZero());
        var a2 = this, h3 = i.clone();
        a2.negative !== 0 ? a2 = a2.umod(i) : a2 = a2.clone();
        for (var s3 = new f2(1), u4 = new f2(0), c2 = h3.clone();a2.cmpn(1) > 0 && h3.cmpn(1) > 0; ) {
          for (var b3 = 0, l3 = 1;(a2.words[0] & l3) === 0 && b3 < 26; ++b3, l3 <<= 1)
            ;
          if (b3 > 0)
            for (a2.iushrn(b3);b3-- > 0; )
              s3.isOdd() && s3.iadd(c2), s3.iushrn(1);
          for (var n4 = 0, d2 = 1;(h3.words[0] & d2) === 0 && n4 < 26; ++n4, d2 <<= 1)
            ;
          if (n4 > 0)
            for (h3.iushrn(n4);n4-- > 0; )
              u4.isOdd() && u4.iadd(c2), u4.iushrn(1);
          a2.cmp(h3) >= 0 ? (a2.isub(h3), s3.isub(u4)) : (h3.isub(a2), u4.isub(s3));
        }
        var w3;
        return a2.cmpn(1) === 0 ? w3 = s3 : w3 = u4, w3.cmpn(0) < 0 && w3.iadd(i), w3;
      }, f2.prototype.gcd = function(i) {
        if (this.isZero())
          return i.abs();
        if (i.isZero())
          return this.abs();
        var a2 = this.clone(), h3 = i.clone();
        a2.negative = 0, h3.negative = 0;
        for (var s3 = 0;a2.isEven() && h3.isEven(); s3++)
          a2.iushrn(1), h3.iushrn(1);
        do {
          for (;a2.isEven(); )
            a2.iushrn(1);
          for (;h3.isEven(); )
            h3.iushrn(1);
          var u4 = a2.cmp(h3);
          if (u4 < 0) {
            var c2 = a2;
            a2 = h3, h3 = c2;
          } else if (u4 === 0 || h3.cmpn(1) === 0)
            break;
          a2.isub(h3);
        } while (true);
        return h3.iushln(s3);
      }, f2.prototype.invm = function(i) {
        return this.egcd(i).a.umod(i);
      }, f2.prototype.isEven = function() {
        return (this.words[0] & 1) === 0;
      }, f2.prototype.isOdd = function() {
        return (this.words[0] & 1) === 1;
      }, f2.prototype.andln = function(i) {
        return this.words[0] & i;
      }, f2.prototype.bincn = function(i) {
        r2(typeof i == "number");
        var a2 = i % 26, h3 = (i - a2) / 26, s3 = 1 << a2;
        if (this.length <= h3)
          return this._expand(h3 + 1), this.words[h3] |= s3, this;
        for (var u4 = s3, c2 = h3;u4 !== 0 && c2 < this.length; c2++) {
          var b3 = this.words[c2] | 0;
          b3 += u4, u4 = b3 >>> 26, b3 &= 67108863, this.words[c2] = b3;
        }
        return u4 !== 0 && (this.words[c2] = u4, this.length++), this;
      }, f2.prototype.isZero = function() {
        return this.length === 1 && this.words[0] === 0;
      }, f2.prototype.cmpn = function(i) {
        var a2 = i < 0;
        if (this.negative !== 0 && !a2)
          return -1;
        if (this.negative === 0 && a2)
          return 1;
        this.strip();
        var h3;
        if (this.length > 1)
          h3 = 1;
        else {
          a2 && (i = -i), r2(i <= 67108863, "Number is too big");
          var s3 = this.words[0] | 0;
          h3 = s3 === i ? 0 : s3 < i ? -1 : 1;
        }
        return this.negative !== 0 ? -h3 | 0 : h3;
      }, f2.prototype.cmp = function(i) {
        if (this.negative !== 0 && i.negative === 0)
          return -1;
        if (this.negative === 0 && i.negative !== 0)
          return 1;
        var a2 = this.ucmp(i);
        return this.negative !== 0 ? -a2 | 0 : a2;
      }, f2.prototype.ucmp = function(i) {
        if (this.length > i.length)
          return 1;
        if (this.length < i.length)
          return -1;
        for (var a2 = 0, h3 = this.length - 1;h3 >= 0; h3--) {
          var s3 = this.words[h3] | 0, u4 = i.words[h3] | 0;
          if (s3 !== u4) {
            s3 < u4 ? a2 = -1 : s3 > u4 && (a2 = 1);
            break;
          }
        }
        return a2;
      }, f2.prototype.gtn = function(i) {
        return this.cmpn(i) === 1;
      }, f2.prototype.gt = function(i) {
        return this.cmp(i) === 1;
      }, f2.prototype.gten = function(i) {
        return this.cmpn(i) >= 0;
      }, f2.prototype.gte = function(i) {
        return this.cmp(i) >= 0;
      }, f2.prototype.ltn = function(i) {
        return this.cmpn(i) === -1;
      }, f2.prototype.lt = function(i) {
        return this.cmp(i) === -1;
      }, f2.prototype.lten = function(i) {
        return this.cmpn(i) <= 0;
      }, f2.prototype.lte = function(i) {
        return this.cmp(i) <= 0;
      }, f2.prototype.eqn = function(i) {
        return this.cmpn(i) === 0;
      }, f2.prototype.eq = function(i) {
        return this.cmp(i) === 0;
      }, f2.red = function(i) {
        return new P(i);
      }, f2.prototype.toRed = function(i) {
        return r2(!this.red, "Already a number in reduction context"), r2(this.negative === 0, "red works only with positives"), i.convertTo(this)._forceRed(i);
      }, f2.prototype.fromRed = function() {
        return r2(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
      }, f2.prototype._forceRed = function(i) {
        return this.red = i, this;
      }, f2.prototype.forceRed = function(i) {
        return r2(!this.red, "Already a number in reduction context"), this._forceRed(i);
      }, f2.prototype.redAdd = function(i) {
        return r2(this.red, "redAdd works only with red numbers"), this.red.add(this, i);
      }, f2.prototype.redIAdd = function(i) {
        return r2(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, i);
      }, f2.prototype.redSub = function(i) {
        return r2(this.red, "redSub works only with red numbers"), this.red.sub(this, i);
      }, f2.prototype.redISub = function(i) {
        return r2(this.red, "redISub works only with red numbers"), this.red.isub(this, i);
      }, f2.prototype.redShl = function(i) {
        return r2(this.red, "redShl works only with red numbers"), this.red.shl(this, i);
      }, f2.prototype.redMul = function(i) {
        return r2(this.red, "redMul works only with red numbers"), this.red._verify2(this, i), this.red.mul(this, i);
      }, f2.prototype.redIMul = function(i) {
        return r2(this.red, "redMul works only with red numbers"), this.red._verify2(this, i), this.red.imul(this, i);
      }, f2.prototype.redSqr = function() {
        return r2(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
      }, f2.prototype.redISqr = function() {
        return r2(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
      }, f2.prototype.redSqrt = function() {
        return r2(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
      }, f2.prototype.redInvm = function() {
        return r2(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
      }, f2.prototype.redNeg = function() {
        return r2(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
      }, f2.prototype.redPow = function(i) {
        return r2(this.red && !i.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, i);
      };
      var we = { k256: null, p224: null, p192: null, p25519: null };
      function ye(v4, i) {
        this.name = v4, this.p = new f2(i, 16), this.n = this.p.bitLength(), this.k = new f2(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
      }
      ye.prototype._tmp = function() {
        var i = new f2(null);
        return i.words = new Array(Math.ceil(this.n / 13)), i;
      }, ye.prototype.ireduce = function(i) {
        var a2 = i, h3;
        do
          this.split(a2, this.tmp), a2 = this.imulK(a2), a2 = a2.iadd(this.tmp), h3 = a2.bitLength();
        while (h3 > this.n);
        var s3 = h3 < this.n ? -1 : a2.ucmp(this.p);
        return s3 === 0 ? (a2.words[0] = 0, a2.length = 1) : s3 > 0 ? a2.isub(this.p) : a2.strip !== undefined ? a2.strip() : a2._strip(), a2;
      }, ye.prototype.split = function(i, a2) {
        i.iushrn(this.n, 0, a2);
      }, ye.prototype.imulK = function(i) {
        return i.imul(this.k);
      };
      function xe() {
        ye.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      o2(xe, ye), xe.prototype.split = function(i, a2) {
        for (var h3 = 4194303, s3 = Math.min(i.length, 9), u4 = 0;u4 < s3; u4++)
          a2.words[u4] = i.words[u4];
        if (a2.length = s3, i.length <= 9) {
          i.words[0] = 0, i.length = 1;
          return;
        }
        var c2 = i.words[9];
        for (a2.words[a2.length++] = c2 & h3, u4 = 10;u4 < i.length; u4++) {
          var b3 = i.words[u4] | 0;
          i.words[u4 - 10] = (b3 & h3) << 4 | c2 >>> 22, c2 = b3;
        }
        c2 >>>= 22, i.words[u4 - 10] = c2, c2 === 0 && i.length > 10 ? i.length -= 10 : i.length -= 9;
      }, xe.prototype.imulK = function(i) {
        i.words[i.length] = 0, i.words[i.length + 1] = 0, i.length += 2;
        for (var a2 = 0, h3 = 0;h3 < i.length; h3++) {
          var s3 = i.words[h3] | 0;
          a2 += s3 * 977, i.words[h3] = a2 & 67108863, a2 = s3 * 64 + (a2 / 67108864 | 0);
        }
        return i.words[i.length - 1] === 0 && (i.length--, i.words[i.length - 1] === 0 && i.length--), i;
      };
      function Re() {
        ye.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      o2(Re, ye);
      function Ee() {
        ye.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      o2(Ee, ye);
      function Ae() {
        ye.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      o2(Ae, ye), Ae.prototype.imulK = function(i) {
        for (var a2 = 0, h3 = 0;h3 < i.length; h3++) {
          var s3 = (i.words[h3] | 0) * 19 + a2, u4 = s3 & 67108863;
          s3 >>>= 26, i.words[h3] = u4, a2 = s3;
        }
        return a2 !== 0 && (i.words[i.length++] = a2), i;
      }, f2._prime = function(i) {
        if (we[i])
          return we[i];
        var a2;
        if (i === "k256")
          a2 = new xe;
        else if (i === "p224")
          a2 = new Re;
        else if (i === "p192")
          a2 = new Ee;
        else if (i === "p25519")
          a2 = new Ae;
        else
          throw new Error("Unknown prime " + i);
        return we[i] = a2, a2;
      };
      function P(v4) {
        if (typeof v4 == "string") {
          var i = f2._prime(v4);
          this.m = i.p, this.prime = i;
        } else
          r2(v4.gtn(1), "modulus must be greater than 1"), this.m = v4, this.prime = null;
      }
      P.prototype._verify1 = function(i) {
        r2(i.negative === 0, "red works only with positives"), r2(i.red, "red works only with red numbers");
      }, P.prototype._verify2 = function(i, a2) {
        r2((i.negative | a2.negative) === 0, "red works only with positives"), r2(i.red && i.red === a2.red, "red works only with red numbers");
      }, P.prototype.imod = function(i) {
        return this.prime ? this.prime.ireduce(i)._forceRed(this) : i.umod(this.m)._forceRed(this);
      }, P.prototype.neg = function(i) {
        return i.isZero() ? i.clone() : this.m.sub(i)._forceRed(this);
      }, P.prototype.add = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.add(a2);
        return h3.cmp(this.m) >= 0 && h3.isub(this.m), h3._forceRed(this);
      }, P.prototype.iadd = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.iadd(a2);
        return h3.cmp(this.m) >= 0 && h3.isub(this.m), h3;
      }, P.prototype.sub = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.sub(a2);
        return h3.cmpn(0) < 0 && h3.iadd(this.m), h3._forceRed(this);
      }, P.prototype.isub = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.isub(a2);
        return h3.cmpn(0) < 0 && h3.iadd(this.m), h3;
      }, P.prototype.shl = function(i, a2) {
        return this._verify1(i), this.imod(i.ushln(a2));
      }, P.prototype.imul = function(i, a2) {
        return this._verify2(i, a2), this.imod(i.imul(a2));
      }, P.prototype.mul = function(i, a2) {
        return this._verify2(i, a2), this.imod(i.mul(a2));
      }, P.prototype.isqr = function(i) {
        return this.imul(i, i.clone());
      }, P.prototype.sqr = function(i) {
        return this.mul(i, i);
      }, P.prototype.sqrt = function(i) {
        if (i.isZero())
          return i.clone();
        var a2 = this.m.andln(3);
        if (r2(a2 % 2 === 1), a2 === 3) {
          var h3 = this.m.add(new f2(1)).iushrn(2);
          return this.pow(i, h3);
        }
        for (var s3 = this.m.subn(1), u4 = 0;!s3.isZero() && s3.andln(1) === 0; )
          u4++, s3.iushrn(1);
        r2(!s3.isZero());
        var c2 = new f2(1).toRed(this), b3 = c2.redNeg(), l3 = this.m.subn(1).iushrn(1), n4 = this.m.bitLength();
        for (n4 = new f2(2 * n4 * n4).toRed(this);this.pow(n4, l3).cmp(b3) !== 0; )
          n4.redIAdd(b3);
        for (var d2 = this.pow(n4, s3), w3 = this.pow(i, s3.addn(1).iushrn(1)), g2 = this.pow(i, s3), _5 = u4;g2.cmp(c2) !== 0; ) {
          for (var A6 = g2, R4 = 0;A6.cmp(c2) !== 0; R4++)
            A6 = A6.redSqr();
          r2(R4 < _5);
          var I2 = this.pow(d2, new f2(1).iushln(_5 - R4 - 1));
          w3 = w3.redMul(I2), d2 = I2.redSqr(), g2 = g2.redMul(d2), _5 = R4;
        }
        return w3;
      }, P.prototype.invm = function(i) {
        var a2 = i._invmp(this.m);
        return a2.negative !== 0 ? (a2.negative = 0, this.imod(a2).redNeg()) : this.imod(a2);
      }, P.prototype.pow = function(i, a2) {
        if (a2.isZero())
          return new f2(1).toRed(this);
        if (a2.cmpn(1) === 0)
          return i.clone();
        var h3 = 4, s3 = new Array(1 << h3);
        s3[0] = new f2(1).toRed(this), s3[1] = i;
        for (var u4 = 2;u4 < s3.length; u4++)
          s3[u4] = this.mul(s3[u4 - 1], i);
        var c2 = s3[0], b3 = 0, l3 = 0, n4 = a2.bitLength() % 26;
        for (n4 === 0 && (n4 = 26), u4 = a2.length - 1;u4 >= 0; u4--) {
          for (var d2 = a2.words[u4], w3 = n4 - 1;w3 >= 0; w3--) {
            var g2 = d2 >> w3 & 1;
            if (c2 !== s3[0] && (c2 = this.sqr(c2)), g2 === 0 && b3 === 0) {
              l3 = 0;
              continue;
            }
            b3 <<= 1, b3 |= g2, l3++, !(l3 !== h3 && (u4 !== 0 || w3 !== 0)) && (c2 = this.mul(c2, s3[b3]), l3 = 0, b3 = 0);
          }
          n4 = 26;
        }
        return c2;
      }, P.prototype.convertTo = function(i) {
        var a2 = i.umod(this.m);
        return a2 === i ? a2.clone() : a2;
      }, P.prototype.convertFrom = function(i) {
        var a2 = i.clone();
        return a2.red = null, a2;
      }, f2.mont = function(i) {
        return new Se(i);
      };
      function Se(v4) {
        P.call(this, v4), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new f2(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
      }
      o2(Se, P), Se.prototype.convertTo = function(i) {
        return this.imod(i.ushln(this.shift));
      }, Se.prototype.convertFrom = function(i) {
        var a2 = this.imod(i.mul(this.rinv));
        return a2.red = null, a2;
      }, Se.prototype.imul = function(i, a2) {
        if (i.isZero() || a2.isZero())
          return i.words[0] = 0, i.length = 1, i;
        var h3 = i.imul(a2), s3 = h3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u4 = h3.isub(s3).iushrn(this.shift), c2 = u4;
        return u4.cmp(this.m) >= 0 ? c2 = u4.isub(this.m) : u4.cmpn(0) < 0 && (c2 = u4.iadd(this.m)), c2._forceRed(this);
      }, Se.prototype.mul = function(i, a2) {
        if (i.isZero() || a2.isZero())
          return new f2(0)._forceRed(this);
        var h3 = i.mul(a2), s3 = h3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u4 = h3.isub(s3).iushrn(this.shift), c2 = u4;
        return u4.cmp(this.m) >= 0 ? c2 = u4.isub(this.m) : u4.cmpn(0) < 0 && (c2 = u4.iadd(this.m)), c2._forceRed(this);
      }, Se.prototype.invm = function(i) {
        var a2 = this.imod(i._invmp(this.m).mul(this.r2));
        return a2._forceRed(this);
      };
    })(typeof yd > "u" || yd, L3);
  });
  P3 = T2((wL, D3) => {
    var bq = o02(), mq = N32();
    D3.exports = function(e2) {
      return new Zn(e2);
    };
    var hr = { secp256k1: { name: "secp256k1", byteLength: 32 }, secp224r1: { name: "p224", byteLength: 28 }, prime256v1: { name: "p256", byteLength: 32 }, prime192v1: { name: "p192", byteLength: 24 }, ed25519: { name: "ed25519", byteLength: 32 }, secp384r1: { name: "p384", byteLength: 48 }, secp521r1: { name: "p521", byteLength: 66 } };
    hr.p224 = hr.secp224r1;
    hr.p256 = hr.secp256r1 = hr.prime256v1;
    hr.p192 = hr.secp192r1 = hr.prime192v1;
    hr.p384 = hr.secp384r1;
    hr.p521 = hr.secp521r1;
    function Zn(t3) {
      this.curveType = hr[t3], this.curveType || (this.curveType = { name: t3 }), this.curve = new bq.ec(this.curveType.name), this.keys = undefined;
    }
    Zn.prototype.generateKeys = function(t3, e2) {
      return this.keys = this.curve.genKeyPair(), this.getPublicKey(t3, e2);
    };
    Zn.prototype.computeSecret = function(t3, e2, r2) {
      e2 = e2 || "utf8", Buffer.isBuffer(t3) || (t3 = new Buffer(t3, e2));
      var o2 = this.curve.keyFromPublic(t3).getPublic(), f2 = o2.mul(this.keys.getPrivate()).getX();
      return wd(f2, r2, this.curveType.byteLength);
    };
    Zn.prototype.getPublicKey = function(t3, e2) {
      var r2 = this.keys.getPublic(e2 === "compressed", true);
      return e2 === "hybrid" && (r2[r2.length - 1] % 2 ? r2[0] = 7 : r2[0] = 6), wd(r2, t3);
    };
    Zn.prototype.getPrivateKey = function(t3) {
      return wd(this.keys.getPrivate(), t3);
    };
    Zn.prototype.setPublicKey = function(t3, e2) {
      return e2 = e2 || "utf8", Buffer.isBuffer(t3) || (t3 = new Buffer(t3, e2)), this.keys._importPublic(t3), this;
    };
    Zn.prototype.setPrivateKey = function(t3, e2) {
      e2 = e2 || "utf8", Buffer.isBuffer(t3) || (t3 = new Buffer(t3, e2));
      var r2 = new mq(t3);
      return r2 = r2.toString(16), this.keys = this.curve.genKeyPair(), this.keys._importPrivate(r2), this;
    };
    function wd(t3, e2, r2) {
      Array.isArray(t3) || (t3 = t3.toArray());
      var o2 = new Buffer(t3);
      if (r2 && o2.length < r2) {
        var f2 = new Buffer(r2 - o2.length);
        f2.fill(0), o2 = Buffer.concat([f2, o2]);
      }
      return e2 ? o2.toString(e2) : o2;
    }
  });
  _d = T2((ML, C3) => {
    var gq = bf(), Md = Te().Buffer;
    C3.exports = function(t3, e2) {
      for (var r2 = Md.alloc(0), o2 = 0, f2;r2.length < e2; )
        f2 = yq(o2++), r2 = Md.concat([r2, gq("sha1").update(t3).update(f2).digest()]);
      return r2.slice(0, e2);
    };
    function yq(t3) {
      var e2 = Md.allocUnsafe(4);
      return e2.writeUInt32BE(t3, 0), e2;
    }
  });
  xd = T2((_L, O32) => {
    O32.exports = function(e2, r2) {
      for (var o2 = e2.length, f2 = -1;++f2 < o2; )
        e2[f2] ^= r2[f2];
      return e2;
    };
  });
  w02 = T2((F3, Sd) => {
    (function(t3, e2) {
      function r2(v4, i) {
        if (!v4)
          throw new Error(i || "Assertion failed");
      }
      function o2(v4, i) {
        v4.super_ = i;
        var a2 = function() {
        };
        a2.prototype = i.prototype, v4.prototype = new a2, v4.prototype.constructor = v4;
      }
      function f2(v4, i, a2) {
        if (f2.isBN(v4))
          return v4;
        this.negative = 0, this.words = null, this.length = 0, this.red = null, v4 !== null && ((i === "le" || i === "be") && (a2 = i, i = 10), this._init(v4 || 0, i || 10, a2 || "be"));
      }
      typeof t3 == "object" ? t3.exports = f2 : e2.BN = f2, f2.BN = f2, f2.wordSize = 26;
      var p2;
      try {
        typeof window < "u" && typeof window.Buffer < "u" ? p2 = window.Buffer : p2 = ji().Buffer;
      } catch {
      }
      f2.isBN = function(i) {
        return i instanceof f2 ? true : i !== null && typeof i == "object" && i.constructor.wordSize === f2.wordSize && Array.isArray(i.words);
      }, f2.max = function(i, a2) {
        return i.cmp(a2) > 0 ? i : a2;
      }, f2.min = function(i, a2) {
        return i.cmp(a2) < 0 ? i : a2;
      }, f2.prototype._init = function(i, a2, h3) {
        if (typeof i == "number")
          return this._initNumber(i, a2, h3);
        if (typeof i == "object")
          return this._initArray(i, a2, h3);
        a2 === "hex" && (a2 = 16), r2(a2 === (a2 | 0) && a2 >= 2 && a2 <= 36), i = i.toString().replace(/\s+/g, "");
        var s3 = 0;
        i[0] === "-" && (s3++, this.negative = 1), s3 < i.length && (a2 === 16 ? this._parseHex(i, s3, h3) : (this._parseBase(i, a2, s3), h3 === "le" && this._initArray(this.toArray(), a2, h3)));
      }, f2.prototype._initNumber = function(i, a2, h3) {
        i < 0 && (this.negative = 1, i = -i), i < 67108864 ? (this.words = [i & 67108863], this.length = 1) : i < 4503599627370496 ? (this.words = [i & 67108863, i / 67108864 & 67108863], this.length = 2) : (r2(i < 9007199254740992), this.words = [i & 67108863, i / 67108864 & 67108863, 1], this.length = 3), h3 === "le" && this._initArray(this.toArray(), a2, h3);
      }, f2.prototype._initArray = function(i, a2, h3) {
        if (r2(typeof i.length == "number"), i.length <= 0)
          return this.words = [0], this.length = 1, this;
        this.length = Math.ceil(i.length / 3), this.words = new Array(this.length);
        for (var s3 = 0;s3 < this.length; s3++)
          this.words[s3] = 0;
        var u4, c2, b3 = 0;
        if (h3 === "be")
          for (s3 = i.length - 1, u4 = 0;s3 >= 0; s3 -= 3)
            c2 = i[s3] | i[s3 - 1] << 8 | i[s3 - 2] << 16, this.words[u4] |= c2 << b3 & 67108863, this.words[u4 + 1] = c2 >>> 26 - b3 & 67108863, b3 += 24, b3 >= 26 && (b3 -= 26, u4++);
        else if (h3 === "le")
          for (s3 = 0, u4 = 0;s3 < i.length; s3 += 3)
            c2 = i[s3] | i[s3 + 1] << 8 | i[s3 + 2] << 16, this.words[u4] |= c2 << b3 & 67108863, this.words[u4 + 1] = c2 >>> 26 - b3 & 67108863, b3 += 24, b3 >= 26 && (b3 -= 26, u4++);
        return this.strip();
      };
      function m4(v4, i) {
        var a2 = v4.charCodeAt(i);
        return a2 >= 65 && a2 <= 70 ? a2 - 55 : a2 >= 97 && a2 <= 102 ? a2 - 87 : a2 - 48 & 15;
      }
      function y3(v4, i, a2) {
        var h3 = m4(v4, a2);
        return a2 - 1 >= i && (h3 |= m4(v4, a2 - 1) << 4), h3;
      }
      f2.prototype._parseHex = function(i, a2, h3) {
        this.length = Math.ceil((i.length - a2) / 6), this.words = new Array(this.length);
        for (var s3 = 0;s3 < this.length; s3++)
          this.words[s3] = 0;
        var u4 = 0, c2 = 0, b3;
        if (h3 === "be")
          for (s3 = i.length - 1;s3 >= a2; s3 -= 2)
            b3 = y3(i, a2, s3) << u4, this.words[c2] |= b3 & 67108863, u4 >= 18 ? (u4 -= 18, c2 += 1, this.words[c2] |= b3 >>> 26) : u4 += 8;
        else {
          var l3 = i.length - a2;
          for (s3 = l3 % 2 === 0 ? a2 + 1 : a2;s3 < i.length; s3 += 2)
            b3 = y3(i, a2, s3) << u4, this.words[c2] |= b3 & 67108863, u4 >= 18 ? (u4 -= 18, c2 += 1, this.words[c2] |= b3 >>> 26) : u4 += 8;
        }
        this.strip();
      };
      function M3(v4, i, a2, h3) {
        for (var s3 = 0, u4 = Math.min(v4.length, a2), c2 = i;c2 < u4; c2++) {
          var b3 = v4.charCodeAt(c2) - 48;
          s3 *= h3, b3 >= 49 ? s3 += b3 - 49 + 10 : b3 >= 17 ? s3 += b3 - 17 + 10 : s3 += b3;
        }
        return s3;
      }
      f2.prototype._parseBase = function(i, a2, h3) {
        this.words = [0], this.length = 1;
        for (var s3 = 0, u4 = 1;u4 <= 67108863; u4 *= a2)
          s3++;
        s3--, u4 = u4 / a2 | 0;
        for (var c2 = i.length - h3, b3 = c2 % s3, l3 = Math.min(c2, c2 - b3) + h3, n4 = 0, d2 = h3;d2 < l3; d2 += s3)
          n4 = M3(i, d2, d2 + s3, a2), this.imuln(u4), this.words[0] + n4 < 67108864 ? this.words[0] += n4 : this._iaddn(n4);
        if (b3 !== 0) {
          var w3 = 1;
          for (n4 = M3(i, d2, i.length, a2), d2 = 0;d2 < b3; d2++)
            w3 *= a2;
          this.imuln(w3), this.words[0] + n4 < 67108864 ? this.words[0] += n4 : this._iaddn(n4);
        }
        this.strip();
      }, f2.prototype.copy = function(i) {
        i.words = new Array(this.length);
        for (var a2 = 0;a2 < this.length; a2++)
          i.words[a2] = this.words[a2];
        i.length = this.length, i.negative = this.negative, i.red = this.red;
      }, f2.prototype.clone = function() {
        var i = new f2(null);
        return this.copy(i), i;
      }, f2.prototype._expand = function(i) {
        for (;this.length < i; )
          this.words[this.length++] = 0;
        return this;
      }, f2.prototype.strip = function() {
        for (;this.length > 1 && this.words[this.length - 1] === 0; )
          this.length--;
        return this._normSign();
      }, f2.prototype._normSign = function() {
        return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
      }, f2.prototype.inspect = function() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var x5 = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"], S2 = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], E4 = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
      f2.prototype.toString = function(i, a2) {
        i = i || 10, a2 = a2 | 0 || 1;
        var h3;
        if (i === 16 || i === "hex") {
          h3 = "";
          for (var s3 = 0, u4 = 0, c2 = 0;c2 < this.length; c2++) {
            var b3 = this.words[c2], l3 = ((b3 << s3 | u4) & 16777215).toString(16);
            u4 = b3 >>> 24 - s3 & 16777215, u4 !== 0 || c2 !== this.length - 1 ? h3 = x5[6 - l3.length] + l3 + h3 : h3 = l3 + h3, s3 += 2, s3 >= 26 && (s3 -= 26, c2--);
          }
          for (u4 !== 0 && (h3 = u4.toString(16) + h3);h3.length % a2 !== 0; )
            h3 = "0" + h3;
          return this.negative !== 0 && (h3 = "-" + h3), h3;
        }
        if (i === (i | 0) && i >= 2 && i <= 36) {
          var n4 = S2[i], d2 = E4[i];
          h3 = "";
          var w3 = this.clone();
          for (w3.negative = 0;!w3.isZero(); ) {
            var g2 = w3.modn(d2).toString(i);
            w3 = w3.idivn(d2), w3.isZero() ? h3 = g2 + h3 : h3 = x5[n4 - g2.length] + g2 + h3;
          }
          for (this.isZero() && (h3 = "0" + h3);h3.length % a2 !== 0; )
            h3 = "0" + h3;
          return this.negative !== 0 && (h3 = "-" + h3), h3;
        }
        r2(false, "Base should be between 2 and 36");
      }, f2.prototype.toNumber = function() {
        var i = this.words[0];
        return this.length === 2 ? i += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? i += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && r2(false, "Number can only safely store up to 53 bits"), this.negative !== 0 ? -i : i;
      }, f2.prototype.toJSON = function() {
        return this.toString(16);
      }, f2.prototype.toBuffer = function(i, a2) {
        return r2(typeof p2 < "u"), this.toArrayLike(p2, i, a2);
      }, f2.prototype.toArray = function(i, a2) {
        return this.toArrayLike(Array, i, a2);
      }, f2.prototype.toArrayLike = function(i, a2, h3) {
        var s3 = this.byteLength(), u4 = h3 || Math.max(1, s3);
        r2(s3 <= u4, "byte array longer than desired length"), r2(u4 > 0, "Requested array length <= 0"), this.strip();
        var c2 = a2 === "le", b3 = new i(u4), l3, n4, d2 = this.clone();
        if (c2) {
          for (n4 = 0;!d2.isZero(); n4++)
            l3 = d2.andln(255), d2.iushrn(8), b3[n4] = l3;
          for (;n4 < u4; n4++)
            b3[n4] = 0;
        } else {
          for (n4 = 0;n4 < u4 - s3; n4++)
            b3[n4] = 0;
          for (n4 = 0;!d2.isZero(); n4++)
            l3 = d2.andln(255), d2.iushrn(8), b3[u4 - n4 - 1] = l3;
        }
        return b3;
      }, Math.clz32 ? f2.prototype._countBits = function(i) {
        return 32 - Math.clz32(i);
      } : f2.prototype._countBits = function(i) {
        var a2 = i, h3 = 0;
        return a2 >= 4096 && (h3 += 13, a2 >>>= 13), a2 >= 64 && (h3 += 7, a2 >>>= 7), a2 >= 8 && (h3 += 4, a2 >>>= 4), a2 >= 2 && (h3 += 2, a2 >>>= 2), h3 + a2;
      }, f2.prototype._zeroBits = function(i) {
        if (i === 0)
          return 26;
        var a2 = i, h3 = 0;
        return (a2 & 8191) === 0 && (h3 += 13, a2 >>>= 13), (a2 & 127) === 0 && (h3 += 7, a2 >>>= 7), (a2 & 15) === 0 && (h3 += 4, a2 >>>= 4), (a2 & 3) === 0 && (h3 += 2, a2 >>>= 2), (a2 & 1) === 0 && h3++, h3;
      }, f2.prototype.bitLength = function() {
        var i = this.words[this.length - 1], a2 = this._countBits(i);
        return (this.length - 1) * 26 + a2;
      };
      function B5(v4) {
        for (var i = new Array(v4.bitLength()), a2 = 0;a2 < i.length; a2++) {
          var h3 = a2 / 26 | 0, s3 = a2 % 26;
          i[a2] = (v4.words[h3] & 1 << s3) >>> s3;
        }
        return i;
      }
      f2.prototype.zeroBits = function() {
        if (this.isZero())
          return 0;
        for (var i = 0, a2 = 0;a2 < this.length; a2++) {
          var h3 = this._zeroBits(this.words[a2]);
          if (i += h3, h3 !== 26)
            break;
        }
        return i;
      }, f2.prototype.byteLength = function() {
        return Math.ceil(this.bitLength() / 8);
      }, f2.prototype.toTwos = function(i) {
        return this.negative !== 0 ? this.abs().inotn(i).iaddn(1) : this.clone();
      }, f2.prototype.fromTwos = function(i) {
        return this.testn(i - 1) ? this.notn(i).iaddn(1).ineg() : this.clone();
      }, f2.prototype.isNeg = function() {
        return this.negative !== 0;
      }, f2.prototype.neg = function() {
        return this.clone().ineg();
      }, f2.prototype.ineg = function() {
        return this.isZero() || (this.negative ^= 1), this;
      }, f2.prototype.iuor = function(i) {
        for (;this.length < i.length; )
          this.words[this.length++] = 0;
        for (var a2 = 0;a2 < i.length; a2++)
          this.words[a2] = this.words[a2] | i.words[a2];
        return this.strip();
      }, f2.prototype.ior = function(i) {
        return r2((this.negative | i.negative) === 0), this.iuor(i);
      }, f2.prototype.or = function(i) {
        return this.length > i.length ? this.clone().ior(i) : i.clone().ior(this);
      }, f2.prototype.uor = function(i) {
        return this.length > i.length ? this.clone().iuor(i) : i.clone().iuor(this);
      }, f2.prototype.iuand = function(i) {
        var a2;
        this.length > i.length ? a2 = i : a2 = this;
        for (var h3 = 0;h3 < a2.length; h3++)
          this.words[h3] = this.words[h3] & i.words[h3];
        return this.length = a2.length, this.strip();
      }, f2.prototype.iand = function(i) {
        return r2((this.negative | i.negative) === 0), this.iuand(i);
      }, f2.prototype.and = function(i) {
        return this.length > i.length ? this.clone().iand(i) : i.clone().iand(this);
      }, f2.prototype.uand = function(i) {
        return this.length > i.length ? this.clone().iuand(i) : i.clone().iuand(this);
      }, f2.prototype.iuxor = function(i) {
        var a2, h3;
        this.length > i.length ? (a2 = this, h3 = i) : (a2 = i, h3 = this);
        for (var s3 = 0;s3 < h3.length; s3++)
          this.words[s3] = a2.words[s3] ^ h3.words[s3];
        if (this !== a2)
          for (;s3 < a2.length; s3++)
            this.words[s3] = a2.words[s3];
        return this.length = a2.length, this.strip();
      }, f2.prototype.ixor = function(i) {
        return r2((this.negative | i.negative) === 0), this.iuxor(i);
      }, f2.prototype.xor = function(i) {
        return this.length > i.length ? this.clone().ixor(i) : i.clone().ixor(this);
      }, f2.prototype.uxor = function(i) {
        return this.length > i.length ? this.clone().iuxor(i) : i.clone().iuxor(this);
      }, f2.prototype.inotn = function(i) {
        r2(typeof i == "number" && i >= 0);
        var a2 = Math.ceil(i / 26) | 0, h3 = i % 26;
        this._expand(a2), h3 > 0 && a2--;
        for (var s3 = 0;s3 < a2; s3++)
          this.words[s3] = ~this.words[s3] & 67108863;
        return h3 > 0 && (this.words[s3] = ~this.words[s3] & 67108863 >> 26 - h3), this.strip();
      }, f2.prototype.notn = function(i) {
        return this.clone().inotn(i);
      }, f2.prototype.setn = function(i, a2) {
        r2(typeof i == "number" && i >= 0);
        var h3 = i / 26 | 0, s3 = i % 26;
        return this._expand(h3 + 1), a2 ? this.words[h3] = this.words[h3] | 1 << s3 : this.words[h3] = this.words[h3] & ~(1 << s3), this.strip();
      }, f2.prototype.iadd = function(i) {
        var a2;
        if (this.negative !== 0 && i.negative === 0)
          return this.negative = 0, a2 = this.isub(i), this.negative ^= 1, this._normSign();
        if (this.negative === 0 && i.negative !== 0)
          return i.negative = 0, a2 = this.isub(i), i.negative = 1, a2._normSign();
        var h3, s3;
        this.length > i.length ? (h3 = this, s3 = i) : (h3 = i, s3 = this);
        for (var u4 = 0, c2 = 0;c2 < s3.length; c2++)
          a2 = (h3.words[c2] | 0) + (s3.words[c2] | 0) + u4, this.words[c2] = a2 & 67108863, u4 = a2 >>> 26;
        for (;u4 !== 0 && c2 < h3.length; c2++)
          a2 = (h3.words[c2] | 0) + u4, this.words[c2] = a2 & 67108863, u4 = a2 >>> 26;
        if (this.length = h3.length, u4 !== 0)
          this.words[this.length] = u4, this.length++;
        else if (h3 !== this)
          for (;c2 < h3.length; c2++)
            this.words[c2] = h3.words[c2];
        return this;
      }, f2.prototype.add = function(i) {
        var a2;
        return i.negative !== 0 && this.negative === 0 ? (i.negative = 0, a2 = this.sub(i), i.negative ^= 1, a2) : i.negative === 0 && this.negative !== 0 ? (this.negative = 0, a2 = i.sub(this), this.negative = 1, a2) : this.length > i.length ? this.clone().iadd(i) : i.clone().iadd(this);
      }, f2.prototype.isub = function(i) {
        if (i.negative !== 0) {
          i.negative = 0;
          var a2 = this.iadd(i);
          return i.negative = 1, a2._normSign();
        } else if (this.negative !== 0)
          return this.negative = 0, this.iadd(i), this.negative = 1, this._normSign();
        var h3 = this.cmp(i);
        if (h3 === 0)
          return this.negative = 0, this.length = 1, this.words[0] = 0, this;
        var s3, u4;
        h3 > 0 ? (s3 = this, u4 = i) : (s3 = i, u4 = this);
        for (var c2 = 0, b3 = 0;b3 < u4.length; b3++)
          a2 = (s3.words[b3] | 0) - (u4.words[b3] | 0) + c2, c2 = a2 >> 26, this.words[b3] = a2 & 67108863;
        for (;c2 !== 0 && b3 < s3.length; b3++)
          a2 = (s3.words[b3] | 0) + c2, c2 = a2 >> 26, this.words[b3] = a2 & 67108863;
        if (c2 === 0 && b3 < s3.length && s3 !== this)
          for (;b3 < s3.length; b3++)
            this.words[b3] = s3.words[b3];
        return this.length = Math.max(this.length, b3), s3 !== this && (this.negative = 1), this.strip();
      }, f2.prototype.sub = function(i) {
        return this.clone().isub(i);
      };
      function q(v4, i, a2) {
        a2.negative = i.negative ^ v4.negative;
        var h3 = v4.length + i.length | 0;
        a2.length = h3, h3 = h3 - 1 | 0;
        var s3 = v4.words[0] | 0, u4 = i.words[0] | 0, c2 = s3 * u4, b3 = c2 & 67108863, l3 = c2 / 67108864 | 0;
        a2.words[0] = b3;
        for (var n4 = 1;n4 < h3; n4++) {
          for (var d2 = l3 >>> 26, w3 = l3 & 67108863, g2 = Math.min(n4, i.length - 1), _5 = Math.max(0, n4 - v4.length + 1);_5 <= g2; _5++) {
            var A6 = n4 - _5 | 0;
            s3 = v4.words[A6] | 0, u4 = i.words[_5] | 0, c2 = s3 * u4 + w3, d2 += c2 / 67108864 | 0, w3 = c2 & 67108863;
          }
          a2.words[n4] = w3 | 0, l3 = d2 | 0;
        }
        return l3 !== 0 ? a2.words[n4] = l3 | 0 : a2.length--, a2.strip();
      }
      var L2 = function(i, a2, h3) {
        var s3 = i.words, u4 = a2.words, c2 = h3.words, b3 = 0, l3, n4, d2, w3 = s3[0] | 0, g2 = w3 & 8191, _5 = w3 >>> 13, A6 = s3[1] | 0, R4 = A6 & 8191, I2 = A6 >>> 13, Me = s3[2] | 0, k4 = Me & 8191, D3 = Me >>> 13, nt = s3[3] | 0, C3 = nt & 8191, O4 = nt >>> 13, vt = s3[4] | 0, F = vt & 8191, U2 = vt >>> 13, bt = s3[5] | 0, z4 = bt & 8191, H4 = bt >>> 13, mt = s3[6] | 0, W3 = mt & 8191, K2 = mt >>> 13, gt = s3[7] | 0, j32 = gt & 8191, Z4 = gt >>> 13, yt = s3[8] | 0, V3 = yt & 8191, $3 = yt >>> 13, wt = s3[9] | 0, G5 = wt & 8191, Y2 = wt >>> 13, Mt = u4[0] | 0, X4 = Mt & 8191, J = Mt >>> 13, _t = u4[1] | 0, Q4 = _t & 8191, ee = _t >>> 13, xt = u4[2] | 0, te = xt & 8191, re = xt >>> 13, St = u4[3] | 0, ie = St & 8191, ne = St >>> 13, Et = u4[4] | 0, fe = Et & 8191, ae = Et >>> 13, At = u4[5] | 0, oe = At & 8191, se = At >>> 13, Rt = u4[6] | 0, he = Rt & 8191, ue = Rt >>> 13, Bt = u4[7] | 0, le = Bt & 8191, de = Bt >>> 13, qt = u4[8] | 0, ce = qt & 8191, pe = qt >>> 13, It = u4[9] | 0, ve = It & 8191, be = It >>> 13;
        h3.negative = i.negative ^ a2.negative, h3.length = 19, l3 = Math.imul(g2, X4), n4 = Math.imul(g2, J), n4 = n4 + Math.imul(_5, X4) | 0, d2 = Math.imul(_5, J);
        var ft = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (ft >>> 26) | 0, ft &= 67108863, l3 = Math.imul(R4, X4), n4 = Math.imul(R4, J), n4 = n4 + Math.imul(I2, X4) | 0, d2 = Math.imul(I2, J), l3 = l3 + Math.imul(g2, Q4) | 0, n4 = n4 + Math.imul(g2, ee) | 0, n4 = n4 + Math.imul(_5, Q4) | 0, d2 = d2 + Math.imul(_5, ee) | 0;
        var Be = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Be >>> 26) | 0, Be &= 67108863, l3 = Math.imul(k4, X4), n4 = Math.imul(k4, J), n4 = n4 + Math.imul(D3, X4) | 0, d2 = Math.imul(D3, J), l3 = l3 + Math.imul(R4, Q4) | 0, n4 = n4 + Math.imul(R4, ee) | 0, n4 = n4 + Math.imul(I2, Q4) | 0, d2 = d2 + Math.imul(I2, ee) | 0, l3 = l3 + Math.imul(g2, te) | 0, n4 = n4 + Math.imul(g2, re) | 0, n4 = n4 + Math.imul(_5, te) | 0, d2 = d2 + Math.imul(_5, re) | 0;
        var qe = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (qe >>> 26) | 0, qe &= 67108863, l3 = Math.imul(C3, X4), n4 = Math.imul(C3, J), n4 = n4 + Math.imul(O4, X4) | 0, d2 = Math.imul(O4, J), l3 = l3 + Math.imul(k4, Q4) | 0, n4 = n4 + Math.imul(k4, ee) | 0, n4 = n4 + Math.imul(D3, Q4) | 0, d2 = d2 + Math.imul(D3, ee) | 0, l3 = l3 + Math.imul(R4, te) | 0, n4 = n4 + Math.imul(R4, re) | 0, n4 = n4 + Math.imul(I2, te) | 0, d2 = d2 + Math.imul(I2, re) | 0, l3 = l3 + Math.imul(g2, ie) | 0, n4 = n4 + Math.imul(g2, ne) | 0, n4 = n4 + Math.imul(_5, ie) | 0, d2 = d2 + Math.imul(_5, ne) | 0;
        var ze = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (ze >>> 26) | 0, ze &= 67108863, l3 = Math.imul(F, X4), n4 = Math.imul(F, J), n4 = n4 + Math.imul(U2, X4) | 0, d2 = Math.imul(U2, J), l3 = l3 + Math.imul(C3, Q4) | 0, n4 = n4 + Math.imul(C3, ee) | 0, n4 = n4 + Math.imul(O4, Q4) | 0, d2 = d2 + Math.imul(O4, ee) | 0, l3 = l3 + Math.imul(k4, te) | 0, n4 = n4 + Math.imul(k4, re) | 0, n4 = n4 + Math.imul(D3, te) | 0, d2 = d2 + Math.imul(D3, re) | 0, l3 = l3 + Math.imul(R4, ie) | 0, n4 = n4 + Math.imul(R4, ne) | 0, n4 = n4 + Math.imul(I2, ie) | 0, d2 = d2 + Math.imul(I2, ne) | 0, l3 = l3 + Math.imul(g2, fe) | 0, n4 = n4 + Math.imul(g2, ae) | 0, n4 = n4 + Math.imul(_5, fe) | 0, d2 = d2 + Math.imul(_5, ae) | 0;
        var He = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (He >>> 26) | 0, He &= 67108863, l3 = Math.imul(z4, X4), n4 = Math.imul(z4, J), n4 = n4 + Math.imul(H4, X4) | 0, d2 = Math.imul(H4, J), l3 = l3 + Math.imul(F, Q4) | 0, n4 = n4 + Math.imul(F, ee) | 0, n4 = n4 + Math.imul(U2, Q4) | 0, d2 = d2 + Math.imul(U2, ee) | 0, l3 = l3 + Math.imul(C3, te) | 0, n4 = n4 + Math.imul(C3, re) | 0, n4 = n4 + Math.imul(O4, te) | 0, d2 = d2 + Math.imul(O4, re) | 0, l3 = l3 + Math.imul(k4, ie) | 0, n4 = n4 + Math.imul(k4, ne) | 0, n4 = n4 + Math.imul(D3, ie) | 0, d2 = d2 + Math.imul(D3, ne) | 0, l3 = l3 + Math.imul(R4, fe) | 0, n4 = n4 + Math.imul(R4, ae) | 0, n4 = n4 + Math.imul(I2, fe) | 0, d2 = d2 + Math.imul(I2, ae) | 0, l3 = l3 + Math.imul(g2, oe) | 0, n4 = n4 + Math.imul(g2, se) | 0, n4 = n4 + Math.imul(_5, oe) | 0, d2 = d2 + Math.imul(_5, se) | 0;
        var We = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (We >>> 26) | 0, We &= 67108863, l3 = Math.imul(W3, X4), n4 = Math.imul(W3, J), n4 = n4 + Math.imul(K2, X4) | 0, d2 = Math.imul(K2, J), l3 = l3 + Math.imul(z4, Q4) | 0, n4 = n4 + Math.imul(z4, ee) | 0, n4 = n4 + Math.imul(H4, Q4) | 0, d2 = d2 + Math.imul(H4, ee) | 0, l3 = l3 + Math.imul(F, te) | 0, n4 = n4 + Math.imul(F, re) | 0, n4 = n4 + Math.imul(U2, te) | 0, d2 = d2 + Math.imul(U2, re) | 0, l3 = l3 + Math.imul(C3, ie) | 0, n4 = n4 + Math.imul(C3, ne) | 0, n4 = n4 + Math.imul(O4, ie) | 0, d2 = d2 + Math.imul(O4, ne) | 0, l3 = l3 + Math.imul(k4, fe) | 0, n4 = n4 + Math.imul(k4, ae) | 0, n4 = n4 + Math.imul(D3, fe) | 0, d2 = d2 + Math.imul(D3, ae) | 0, l3 = l3 + Math.imul(R4, oe) | 0, n4 = n4 + Math.imul(R4, se) | 0, n4 = n4 + Math.imul(I2, oe) | 0, d2 = d2 + Math.imul(I2, se) | 0, l3 = l3 + Math.imul(g2, he) | 0, n4 = n4 + Math.imul(g2, ue) | 0, n4 = n4 + Math.imul(_5, he) | 0, d2 = d2 + Math.imul(_5, ue) | 0;
        var Ke = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ke >>> 26) | 0, Ke &= 67108863, l3 = Math.imul(j32, X4), n4 = Math.imul(j32, J), n4 = n4 + Math.imul(Z4, X4) | 0, d2 = Math.imul(Z4, J), l3 = l3 + Math.imul(W3, Q4) | 0, n4 = n4 + Math.imul(W3, ee) | 0, n4 = n4 + Math.imul(K2, Q4) | 0, d2 = d2 + Math.imul(K2, ee) | 0, l3 = l3 + Math.imul(z4, te) | 0, n4 = n4 + Math.imul(z4, re) | 0, n4 = n4 + Math.imul(H4, te) | 0, d2 = d2 + Math.imul(H4, re) | 0, l3 = l3 + Math.imul(F, ie) | 0, n4 = n4 + Math.imul(F, ne) | 0, n4 = n4 + Math.imul(U2, ie) | 0, d2 = d2 + Math.imul(U2, ne) | 0, l3 = l3 + Math.imul(C3, fe) | 0, n4 = n4 + Math.imul(C3, ae) | 0, n4 = n4 + Math.imul(O4, fe) | 0, d2 = d2 + Math.imul(O4, ae) | 0, l3 = l3 + Math.imul(k4, oe) | 0, n4 = n4 + Math.imul(k4, se) | 0, n4 = n4 + Math.imul(D3, oe) | 0, d2 = d2 + Math.imul(D3, se) | 0, l3 = l3 + Math.imul(R4, he) | 0, n4 = n4 + Math.imul(R4, ue) | 0, n4 = n4 + Math.imul(I2, he) | 0, d2 = d2 + Math.imul(I2, ue) | 0, l3 = l3 + Math.imul(g2, le) | 0, n4 = n4 + Math.imul(g2, de) | 0, n4 = n4 + Math.imul(_5, le) | 0, d2 = d2 + Math.imul(_5, de) | 0;
        var je = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (je >>> 26) | 0, je &= 67108863, l3 = Math.imul(V3, X4), n4 = Math.imul(V3, J), n4 = n4 + Math.imul($3, X4) | 0, d2 = Math.imul($3, J), l3 = l3 + Math.imul(j32, Q4) | 0, n4 = n4 + Math.imul(j32, ee) | 0, n4 = n4 + Math.imul(Z4, Q4) | 0, d2 = d2 + Math.imul(Z4, ee) | 0, l3 = l3 + Math.imul(W3, te) | 0, n4 = n4 + Math.imul(W3, re) | 0, n4 = n4 + Math.imul(K2, te) | 0, d2 = d2 + Math.imul(K2, re) | 0, l3 = l3 + Math.imul(z4, ie) | 0, n4 = n4 + Math.imul(z4, ne) | 0, n4 = n4 + Math.imul(H4, ie) | 0, d2 = d2 + Math.imul(H4, ne) | 0, l3 = l3 + Math.imul(F, fe) | 0, n4 = n4 + Math.imul(F, ae) | 0, n4 = n4 + Math.imul(U2, fe) | 0, d2 = d2 + Math.imul(U2, ae) | 0, l3 = l3 + Math.imul(C3, oe) | 0, n4 = n4 + Math.imul(C3, se) | 0, n4 = n4 + Math.imul(O4, oe) | 0, d2 = d2 + Math.imul(O4, se) | 0, l3 = l3 + Math.imul(k4, he) | 0, n4 = n4 + Math.imul(k4, ue) | 0, n4 = n4 + Math.imul(D3, he) | 0, d2 = d2 + Math.imul(D3, ue) | 0, l3 = l3 + Math.imul(R4, le) | 0, n4 = n4 + Math.imul(R4, de) | 0, n4 = n4 + Math.imul(I2, le) | 0, d2 = d2 + Math.imul(I2, de) | 0, l3 = l3 + Math.imul(g2, ce) | 0, n4 = n4 + Math.imul(g2, pe) | 0, n4 = n4 + Math.imul(_5, ce) | 0, d2 = d2 + Math.imul(_5, pe) | 0;
        var Ze = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ze >>> 26) | 0, Ze &= 67108863, l3 = Math.imul(G5, X4), n4 = Math.imul(G5, J), n4 = n4 + Math.imul(Y2, X4) | 0, d2 = Math.imul(Y2, J), l3 = l3 + Math.imul(V3, Q4) | 0, n4 = n4 + Math.imul(V3, ee) | 0, n4 = n4 + Math.imul($3, Q4) | 0, d2 = d2 + Math.imul($3, ee) | 0, l3 = l3 + Math.imul(j32, te) | 0, n4 = n4 + Math.imul(j32, re) | 0, n4 = n4 + Math.imul(Z4, te) | 0, d2 = d2 + Math.imul(Z4, re) | 0, l3 = l3 + Math.imul(W3, ie) | 0, n4 = n4 + Math.imul(W3, ne) | 0, n4 = n4 + Math.imul(K2, ie) | 0, d2 = d2 + Math.imul(K2, ne) | 0, l3 = l3 + Math.imul(z4, fe) | 0, n4 = n4 + Math.imul(z4, ae) | 0, n4 = n4 + Math.imul(H4, fe) | 0, d2 = d2 + Math.imul(H4, ae) | 0, l3 = l3 + Math.imul(F, oe) | 0, n4 = n4 + Math.imul(F, se) | 0, n4 = n4 + Math.imul(U2, oe) | 0, d2 = d2 + Math.imul(U2, se) | 0, l3 = l3 + Math.imul(C3, he) | 0, n4 = n4 + Math.imul(C3, ue) | 0, n4 = n4 + Math.imul(O4, he) | 0, d2 = d2 + Math.imul(O4, ue) | 0, l3 = l3 + Math.imul(k4, le) | 0, n4 = n4 + Math.imul(k4, de) | 0, n4 = n4 + Math.imul(D3, le) | 0, d2 = d2 + Math.imul(D3, de) | 0, l3 = l3 + Math.imul(R4, ce) | 0, n4 = n4 + Math.imul(R4, pe) | 0, n4 = n4 + Math.imul(I2, ce) | 0, d2 = d2 + Math.imul(I2, pe) | 0, l3 = l3 + Math.imul(g2, ve) | 0, n4 = n4 + Math.imul(g2, be) | 0, n4 = n4 + Math.imul(_5, ve) | 0, d2 = d2 + Math.imul(_5, be) | 0;
        var Ve = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ve >>> 26) | 0, Ve &= 67108863, l3 = Math.imul(G5, Q4), n4 = Math.imul(G5, ee), n4 = n4 + Math.imul(Y2, Q4) | 0, d2 = Math.imul(Y2, ee), l3 = l3 + Math.imul(V3, te) | 0, n4 = n4 + Math.imul(V3, re) | 0, n4 = n4 + Math.imul($3, te) | 0, d2 = d2 + Math.imul($3, re) | 0, l3 = l3 + Math.imul(j32, ie) | 0, n4 = n4 + Math.imul(j32, ne) | 0, n4 = n4 + Math.imul(Z4, ie) | 0, d2 = d2 + Math.imul(Z4, ne) | 0, l3 = l3 + Math.imul(W3, fe) | 0, n4 = n4 + Math.imul(W3, ae) | 0, n4 = n4 + Math.imul(K2, fe) | 0, d2 = d2 + Math.imul(K2, ae) | 0, l3 = l3 + Math.imul(z4, oe) | 0, n4 = n4 + Math.imul(z4, se) | 0, n4 = n4 + Math.imul(H4, oe) | 0, d2 = d2 + Math.imul(H4, se) | 0, l3 = l3 + Math.imul(F, he) | 0, n4 = n4 + Math.imul(F, ue) | 0, n4 = n4 + Math.imul(U2, he) | 0, d2 = d2 + Math.imul(U2, ue) | 0, l3 = l3 + Math.imul(C3, le) | 0, n4 = n4 + Math.imul(C3, de) | 0, n4 = n4 + Math.imul(O4, le) | 0, d2 = d2 + Math.imul(O4, de) | 0, l3 = l3 + Math.imul(k4, ce) | 0, n4 = n4 + Math.imul(k4, pe) | 0, n4 = n4 + Math.imul(D3, ce) | 0, d2 = d2 + Math.imul(D3, pe) | 0, l3 = l3 + Math.imul(R4, ve) | 0, n4 = n4 + Math.imul(R4, be) | 0, n4 = n4 + Math.imul(I2, ve) | 0, d2 = d2 + Math.imul(I2, be) | 0;
        var $e = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + ($e >>> 26) | 0, $e &= 67108863, l3 = Math.imul(G5, te), n4 = Math.imul(G5, re), n4 = n4 + Math.imul(Y2, te) | 0, d2 = Math.imul(Y2, re), l3 = l3 + Math.imul(V3, ie) | 0, n4 = n4 + Math.imul(V3, ne) | 0, n4 = n4 + Math.imul($3, ie) | 0, d2 = d2 + Math.imul($3, ne) | 0, l3 = l3 + Math.imul(j32, fe) | 0, n4 = n4 + Math.imul(j32, ae) | 0, n4 = n4 + Math.imul(Z4, fe) | 0, d2 = d2 + Math.imul(Z4, ae) | 0, l3 = l3 + Math.imul(W3, oe) | 0, n4 = n4 + Math.imul(W3, se) | 0, n4 = n4 + Math.imul(K2, oe) | 0, d2 = d2 + Math.imul(K2, se) | 0, l3 = l3 + Math.imul(z4, he) | 0, n4 = n4 + Math.imul(z4, ue) | 0, n4 = n4 + Math.imul(H4, he) | 0, d2 = d2 + Math.imul(H4, ue) | 0, l3 = l3 + Math.imul(F, le) | 0, n4 = n4 + Math.imul(F, de) | 0, n4 = n4 + Math.imul(U2, le) | 0, d2 = d2 + Math.imul(U2, de) | 0, l3 = l3 + Math.imul(C3, ce) | 0, n4 = n4 + Math.imul(C3, pe) | 0, n4 = n4 + Math.imul(O4, ce) | 0, d2 = d2 + Math.imul(O4, pe) | 0, l3 = l3 + Math.imul(k4, ve) | 0, n4 = n4 + Math.imul(k4, be) | 0, n4 = n4 + Math.imul(D3, ve) | 0, d2 = d2 + Math.imul(D3, be) | 0;
        var Ge = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ge >>> 26) | 0, Ge &= 67108863, l3 = Math.imul(G5, ie), n4 = Math.imul(G5, ne), n4 = n4 + Math.imul(Y2, ie) | 0, d2 = Math.imul(Y2, ne), l3 = l3 + Math.imul(V3, fe) | 0, n4 = n4 + Math.imul(V3, ae) | 0, n4 = n4 + Math.imul($3, fe) | 0, d2 = d2 + Math.imul($3, ae) | 0, l3 = l3 + Math.imul(j32, oe) | 0, n4 = n4 + Math.imul(j32, se) | 0, n4 = n4 + Math.imul(Z4, oe) | 0, d2 = d2 + Math.imul(Z4, se) | 0, l3 = l3 + Math.imul(W3, he) | 0, n4 = n4 + Math.imul(W3, ue) | 0, n4 = n4 + Math.imul(K2, he) | 0, d2 = d2 + Math.imul(K2, ue) | 0, l3 = l3 + Math.imul(z4, le) | 0, n4 = n4 + Math.imul(z4, de) | 0, n4 = n4 + Math.imul(H4, le) | 0, d2 = d2 + Math.imul(H4, de) | 0, l3 = l3 + Math.imul(F, ce) | 0, n4 = n4 + Math.imul(F, pe) | 0, n4 = n4 + Math.imul(U2, ce) | 0, d2 = d2 + Math.imul(U2, pe) | 0, l3 = l3 + Math.imul(C3, ve) | 0, n4 = n4 + Math.imul(C3, be) | 0, n4 = n4 + Math.imul(O4, ve) | 0, d2 = d2 + Math.imul(O4, be) | 0;
        var Ye = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Ye >>> 26) | 0, Ye &= 67108863, l3 = Math.imul(G5, fe), n4 = Math.imul(G5, ae), n4 = n4 + Math.imul(Y2, fe) | 0, d2 = Math.imul(Y2, ae), l3 = l3 + Math.imul(V3, oe) | 0, n4 = n4 + Math.imul(V3, se) | 0, n4 = n4 + Math.imul($3, oe) | 0, d2 = d2 + Math.imul($3, se) | 0, l3 = l3 + Math.imul(j32, he) | 0, n4 = n4 + Math.imul(j32, ue) | 0, n4 = n4 + Math.imul(Z4, he) | 0, d2 = d2 + Math.imul(Z4, ue) | 0, l3 = l3 + Math.imul(W3, le) | 0, n4 = n4 + Math.imul(W3, de) | 0, n4 = n4 + Math.imul(K2, le) | 0, d2 = d2 + Math.imul(K2, de) | 0, l3 = l3 + Math.imul(z4, ce) | 0, n4 = n4 + Math.imul(z4, pe) | 0, n4 = n4 + Math.imul(H4, ce) | 0, d2 = d2 + Math.imul(H4, pe) | 0, l3 = l3 + Math.imul(F, ve) | 0, n4 = n4 + Math.imul(F, be) | 0, n4 = n4 + Math.imul(U2, ve) | 0, d2 = d2 + Math.imul(U2, be) | 0;
        var Xe = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Xe >>> 26) | 0, Xe &= 67108863, l3 = Math.imul(G5, oe), n4 = Math.imul(G5, se), n4 = n4 + Math.imul(Y2, oe) | 0, d2 = Math.imul(Y2, se), l3 = l3 + Math.imul(V3, he) | 0, n4 = n4 + Math.imul(V3, ue) | 0, n4 = n4 + Math.imul($3, he) | 0, d2 = d2 + Math.imul($3, ue) | 0, l3 = l3 + Math.imul(j32, le) | 0, n4 = n4 + Math.imul(j32, de) | 0, n4 = n4 + Math.imul(Z4, le) | 0, d2 = d2 + Math.imul(Z4, de) | 0, l3 = l3 + Math.imul(W3, ce) | 0, n4 = n4 + Math.imul(W3, pe) | 0, n4 = n4 + Math.imul(K2, ce) | 0, d2 = d2 + Math.imul(K2, pe) | 0, l3 = l3 + Math.imul(z4, ve) | 0, n4 = n4 + Math.imul(z4, be) | 0, n4 = n4 + Math.imul(H4, ve) | 0, d2 = d2 + Math.imul(H4, be) | 0;
        var Je = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Je >>> 26) | 0, Je &= 67108863, l3 = Math.imul(G5, he), n4 = Math.imul(G5, ue), n4 = n4 + Math.imul(Y2, he) | 0, d2 = Math.imul(Y2, ue), l3 = l3 + Math.imul(V3, le) | 0, n4 = n4 + Math.imul(V3, de) | 0, n4 = n4 + Math.imul($3, le) | 0, d2 = d2 + Math.imul($3, de) | 0, l3 = l3 + Math.imul(j32, ce) | 0, n4 = n4 + Math.imul(j32, pe) | 0, n4 = n4 + Math.imul(Z4, ce) | 0, d2 = d2 + Math.imul(Z4, pe) | 0, l3 = l3 + Math.imul(W3, ve) | 0, n4 = n4 + Math.imul(W3, be) | 0, n4 = n4 + Math.imul(K2, ve) | 0, d2 = d2 + Math.imul(K2, be) | 0;
        var Qe = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (Qe >>> 26) | 0, Qe &= 67108863, l3 = Math.imul(G5, le), n4 = Math.imul(G5, de), n4 = n4 + Math.imul(Y2, le) | 0, d2 = Math.imul(Y2, de), l3 = l3 + Math.imul(V3, ce) | 0, n4 = n4 + Math.imul(V3, pe) | 0, n4 = n4 + Math.imul($3, ce) | 0, d2 = d2 + Math.imul($3, pe) | 0, l3 = l3 + Math.imul(j32, ve) | 0, n4 = n4 + Math.imul(j32, be) | 0, n4 = n4 + Math.imul(Z4, ve) | 0, d2 = d2 + Math.imul(Z4, be) | 0;
        var et = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (et >>> 26) | 0, et &= 67108863, l3 = Math.imul(G5, ce), n4 = Math.imul(G5, pe), n4 = n4 + Math.imul(Y2, ce) | 0, d2 = Math.imul(Y2, pe), l3 = l3 + Math.imul(V3, ve) | 0, n4 = n4 + Math.imul(V3, be) | 0, n4 = n4 + Math.imul($3, ve) | 0, d2 = d2 + Math.imul($3, be) | 0;
        var tt = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        b3 = (d2 + (n4 >>> 13) | 0) + (tt >>> 26) | 0, tt &= 67108863, l3 = Math.imul(G5, ve), n4 = Math.imul(G5, be), n4 = n4 + Math.imul(Y2, ve) | 0, d2 = Math.imul(Y2, be);
        var rt = (b3 + l3 | 0) + ((n4 & 8191) << 13) | 0;
        return b3 = (d2 + (n4 >>> 13) | 0) + (rt >>> 26) | 0, rt &= 67108863, c2[0] = ft, c2[1] = Be, c2[2] = qe, c2[3] = ze, c2[4] = He, c2[5] = We, c2[6] = Ke, c2[7] = je, c2[8] = Ze, c2[9] = Ve, c2[10] = $e, c2[11] = Ge, c2[12] = Ye, c2[13] = Xe, c2[14] = Je, c2[15] = Qe, c2[16] = et, c2[17] = tt, c2[18] = rt, b3 !== 0 && (c2[19] = b3, h3.length++), h3;
      };
      Math.imul || (L2 = q);
      function ge(v4, i, a2) {
        a2.negative = i.negative ^ v4.negative, a2.length = v4.length + i.length;
        for (var h3 = 0, s3 = 0, u4 = 0;u4 < a2.length - 1; u4++) {
          var c2 = s3;
          s3 = 0;
          for (var b3 = h3 & 67108863, l3 = Math.min(u4, i.length - 1), n4 = Math.max(0, u4 - v4.length + 1);n4 <= l3; n4++) {
            var d2 = u4 - n4, w3 = v4.words[d2] | 0, g2 = i.words[n4] | 0, _5 = w3 * g2, A6 = _5 & 67108863;
            c2 = c2 + (_5 / 67108864 | 0) | 0, A6 = A6 + b3 | 0, b3 = A6 & 67108863, c2 = c2 + (A6 >>> 26) | 0, s3 += c2 >>> 26, c2 &= 67108863;
          }
          a2.words[u4] = b3, h3 = c2, c2 = s3;
        }
        return h3 !== 0 ? a2.words[u4] = h3 : a2.length--, a2.strip();
      }
      function _e(v4, i, a2) {
        var h3 = new N4;
        return h3.mulp(v4, i, a2);
      }
      f2.prototype.mulTo = function(i, a2) {
        var h3, s3 = this.length + i.length;
        return this.length === 10 && i.length === 10 ? h3 = L2(this, i, a2) : s3 < 63 ? h3 = q(this, i, a2) : s3 < 1024 ? h3 = ge(this, i, a2) : h3 = _e(this, i, a2), h3;
      };
      function N4(v4, i) {
        this.x = v4, this.y = i;
      }
      N4.prototype.makeRBT = function(i) {
        for (var a2 = new Array(i), h3 = f2.prototype._countBits(i) - 1, s3 = 0;s3 < i; s3++)
          a2[s3] = this.revBin(s3, h3, i);
        return a2;
      }, N4.prototype.revBin = function(i, a2, h3) {
        if (i === 0 || i === h3 - 1)
          return i;
        for (var s3 = 0, u4 = 0;u4 < a2; u4++)
          s3 |= (i & 1) << a2 - u4 - 1, i >>= 1;
        return s3;
      }, N4.prototype.permute = function(i, a2, h3, s3, u4, c2) {
        for (var b3 = 0;b3 < c2; b3++)
          s3[b3] = a2[i[b3]], u4[b3] = h3[i[b3]];
      }, N4.prototype.transform = function(i, a2, h3, s3, u4, c2) {
        this.permute(c2, i, a2, h3, s3, u4);
        for (var b3 = 1;b3 < u4; b3 <<= 1)
          for (var l3 = b3 << 1, n4 = Math.cos(2 * Math.PI / l3), d2 = Math.sin(2 * Math.PI / l3), w3 = 0;w3 < u4; w3 += l3)
            for (var g2 = n4, _5 = d2, A6 = 0;A6 < b3; A6++) {
              var R4 = h3[w3 + A6], I2 = s3[w3 + A6], Me = h3[w3 + A6 + b3], k4 = s3[w3 + A6 + b3], D3 = g2 * Me - _5 * k4;
              k4 = g2 * k4 + _5 * Me, Me = D3, h3[w3 + A6] = R4 + Me, s3[w3 + A6] = I2 + k4, h3[w3 + A6 + b3] = R4 - Me, s3[w3 + A6 + b3] = I2 - k4, A6 !== l3 && (D3 = n4 * g2 - d2 * _5, _5 = n4 * _5 + d2 * g2, g2 = D3);
            }
      }, N4.prototype.guessLen13b = function(i, a2) {
        var h3 = Math.max(a2, i) | 1, s3 = h3 & 1, u4 = 0;
        for (h3 = h3 / 2 | 0;h3; h3 = h3 >>> 1)
          u4++;
        return 1 << u4 + 1 + s3;
      }, N4.prototype.conjugate = function(i, a2, h3) {
        if (!(h3 <= 1))
          for (var s3 = 0;s3 < h3 / 2; s3++) {
            var u4 = i[s3];
            i[s3] = i[h3 - s3 - 1], i[h3 - s3 - 1] = u4, u4 = a2[s3], a2[s3] = -a2[h3 - s3 - 1], a2[h3 - s3 - 1] = -u4;
          }
      }, N4.prototype.normalize13b = function(i, a2) {
        for (var h3 = 0, s3 = 0;s3 < a2 / 2; s3++) {
          var u4 = Math.round(i[2 * s3 + 1] / a2) * 8192 + Math.round(i[2 * s3] / a2) + h3;
          i[s3] = u4 & 67108863, u4 < 67108864 ? h3 = 0 : h3 = u4 / 67108864 | 0;
        }
        return i;
      }, N4.prototype.convert13b = function(i, a2, h3, s3) {
        for (var u4 = 0, c2 = 0;c2 < a2; c2++)
          u4 = u4 + (i[c2] | 0), h3[2 * c2] = u4 & 8191, u4 = u4 >>> 13, h3[2 * c2 + 1] = u4 & 8191, u4 = u4 >>> 13;
        for (c2 = 2 * a2;c2 < s3; ++c2)
          h3[c2] = 0;
        r2(u4 === 0), r2((u4 & -8192) === 0);
      }, N4.prototype.stub = function(i) {
        for (var a2 = new Array(i), h3 = 0;h3 < i; h3++)
          a2[h3] = 0;
        return a2;
      }, N4.prototype.mulp = function(i, a2, h3) {
        var s3 = 2 * this.guessLen13b(i.length, a2.length), u4 = this.makeRBT(s3), c2 = this.stub(s3), b3 = new Array(s3), l3 = new Array(s3), n4 = new Array(s3), d2 = new Array(s3), w3 = new Array(s3), g2 = new Array(s3), _5 = h3.words;
        _5.length = s3, this.convert13b(i.words, i.length, b3, s3), this.convert13b(a2.words, a2.length, d2, s3), this.transform(b3, c2, l3, n4, s3, u4), this.transform(d2, c2, w3, g2, s3, u4);
        for (var A6 = 0;A6 < s3; A6++) {
          var R4 = l3[A6] * w3[A6] - n4[A6] * g2[A6];
          n4[A6] = l3[A6] * g2[A6] + n4[A6] * w3[A6], l3[A6] = R4;
        }
        return this.conjugate(l3, n4, s3), this.transform(l3, n4, _5, c2, s3, u4), this.conjugate(_5, c2, s3), this.normalize13b(_5, s3), h3.negative = i.negative ^ a2.negative, h3.length = i.length + a2.length, h3.strip();
      }, f2.prototype.mul = function(i) {
        var a2 = new f2(null);
        return a2.words = new Array(this.length + i.length), this.mulTo(i, a2);
      }, f2.prototype.mulf = function(i) {
        var a2 = new f2(null);
        return a2.words = new Array(this.length + i.length), _e(this, i, a2);
      }, f2.prototype.imul = function(i) {
        return this.clone().mulTo(i, this);
      }, f2.prototype.imuln = function(i) {
        r2(typeof i == "number"), r2(i < 67108864);
        for (var a2 = 0, h3 = 0;h3 < this.length; h3++) {
          var s3 = (this.words[h3] | 0) * i, u4 = (s3 & 67108863) + (a2 & 67108863);
          a2 >>= 26, a2 += s3 / 67108864 | 0, a2 += u4 >>> 26, this.words[h3] = u4 & 67108863;
        }
        return a2 !== 0 && (this.words[h3] = a2, this.length++), this;
      }, f2.prototype.muln = function(i) {
        return this.clone().imuln(i);
      }, f2.prototype.sqr = function() {
        return this.mul(this);
      }, f2.prototype.isqr = function() {
        return this.imul(this.clone());
      }, f2.prototype.pow = function(i) {
        var a2 = B5(i);
        if (a2.length === 0)
          return new f2(1);
        for (var h3 = this, s3 = 0;s3 < a2.length && a2[s3] === 0; s3++, h3 = h3.sqr())
          ;
        if (++s3 < a2.length)
          for (var u4 = h3.sqr();s3 < a2.length; s3++, u4 = u4.sqr())
            a2[s3] !== 0 && (h3 = h3.mul(u4));
        return h3;
      }, f2.prototype.iushln = function(i) {
        r2(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26, s3 = 67108863 >>> 26 - a2 << 26 - a2, u4;
        if (a2 !== 0) {
          var c2 = 0;
          for (u4 = 0;u4 < this.length; u4++) {
            var b3 = this.words[u4] & s3, l3 = (this.words[u4] | 0) - b3 << a2;
            this.words[u4] = l3 | c2, c2 = b3 >>> 26 - a2;
          }
          c2 && (this.words[u4] = c2, this.length++);
        }
        if (h3 !== 0) {
          for (u4 = this.length - 1;u4 >= 0; u4--)
            this.words[u4 + h3] = this.words[u4];
          for (u4 = 0;u4 < h3; u4++)
            this.words[u4] = 0;
          this.length += h3;
        }
        return this.strip();
      }, f2.prototype.ishln = function(i) {
        return r2(this.negative === 0), this.iushln(i);
      }, f2.prototype.iushrn = function(i, a2, h3) {
        r2(typeof i == "number" && i >= 0);
        var s3;
        a2 ? s3 = (a2 - a2 % 26) / 26 : s3 = 0;
        var u4 = i % 26, c2 = Math.min((i - u4) / 26, this.length), b3 = 67108863 ^ 67108863 >>> u4 << u4, l3 = h3;
        if (s3 -= c2, s3 = Math.max(0, s3), l3) {
          for (var n4 = 0;n4 < c2; n4++)
            l3.words[n4] = this.words[n4];
          l3.length = c2;
        }
        if (c2 !== 0)
          if (this.length > c2)
            for (this.length -= c2, n4 = 0;n4 < this.length; n4++)
              this.words[n4] = this.words[n4 + c2];
          else
            this.words[0] = 0, this.length = 1;
        var d2 = 0;
        for (n4 = this.length - 1;n4 >= 0 && (d2 !== 0 || n4 >= s3); n4--) {
          var w3 = this.words[n4] | 0;
          this.words[n4] = d2 << 26 - u4 | w3 >>> u4, d2 = w3 & b3;
        }
        return l3 && d2 !== 0 && (l3.words[l3.length++] = d2), this.length === 0 && (this.words[0] = 0, this.length = 1), this.strip();
      }, f2.prototype.ishrn = function(i, a2, h3) {
        return r2(this.negative === 0), this.iushrn(i, a2, h3);
      }, f2.prototype.shln = function(i) {
        return this.clone().ishln(i);
      }, f2.prototype.ushln = function(i) {
        return this.clone().iushln(i);
      }, f2.prototype.shrn = function(i) {
        return this.clone().ishrn(i);
      }, f2.prototype.ushrn = function(i) {
        return this.clone().iushrn(i);
      }, f2.prototype.testn = function(i) {
        r2(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26, s3 = 1 << a2;
        if (this.length <= h3)
          return false;
        var u4 = this.words[h3];
        return !!(u4 & s3);
      }, f2.prototype.imaskn = function(i) {
        r2(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26;
        if (r2(this.negative === 0, "imaskn works only with positive numbers"), this.length <= h3)
          return this;
        if (a2 !== 0 && h3++, this.length = Math.min(h3, this.length), a2 !== 0) {
          var s3 = 67108863 ^ 67108863 >>> a2 << a2;
          this.words[this.length - 1] &= s3;
        }
        return this.strip();
      }, f2.prototype.maskn = function(i) {
        return this.clone().imaskn(i);
      }, f2.prototype.iaddn = function(i) {
        return r2(typeof i == "number"), r2(i < 67108864), i < 0 ? this.isubn(-i) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) < i ? (this.words[0] = i - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(i), this.negative = 1, this) : this._iaddn(i);
      }, f2.prototype._iaddn = function(i) {
        this.words[0] += i;
        for (var a2 = 0;a2 < this.length && this.words[a2] >= 67108864; a2++)
          this.words[a2] -= 67108864, a2 === this.length - 1 ? this.words[a2 + 1] = 1 : this.words[a2 + 1]++;
        return this.length = Math.max(this.length, a2 + 1), this;
      }, f2.prototype.isubn = function(i) {
        if (r2(typeof i == "number"), r2(i < 67108864), i < 0)
          return this.iaddn(-i);
        if (this.negative !== 0)
          return this.negative = 0, this.iaddn(i), this.negative = 1, this;
        if (this.words[0] -= i, this.length === 1 && this.words[0] < 0)
          this.words[0] = -this.words[0], this.negative = 1;
        else
          for (var a2 = 0;a2 < this.length && this.words[a2] < 0; a2++)
            this.words[a2] += 67108864, this.words[a2 + 1] -= 1;
        return this.strip();
      }, f2.prototype.addn = function(i) {
        return this.clone().iaddn(i);
      }, f2.prototype.subn = function(i) {
        return this.clone().isubn(i);
      }, f2.prototype.iabs = function() {
        return this.negative = 0, this;
      }, f2.prototype.abs = function() {
        return this.clone().iabs();
      }, f2.prototype._ishlnsubmul = function(i, a2, h3) {
        var s3 = i.length + h3, u4;
        this._expand(s3);
        var c2, b3 = 0;
        for (u4 = 0;u4 < i.length; u4++) {
          c2 = (this.words[u4 + h3] | 0) + b3;
          var l3 = (i.words[u4] | 0) * a2;
          c2 -= l3 & 67108863, b3 = (c2 >> 26) - (l3 / 67108864 | 0), this.words[u4 + h3] = c2 & 67108863;
        }
        for (;u4 < this.length - h3; u4++)
          c2 = (this.words[u4 + h3] | 0) + b3, b3 = c2 >> 26, this.words[u4 + h3] = c2 & 67108863;
        if (b3 === 0)
          return this.strip();
        for (r2(b3 === -1), b3 = 0, u4 = 0;u4 < this.length; u4++)
          c2 = -(this.words[u4] | 0) + b3, b3 = c2 >> 26, this.words[u4] = c2 & 67108863;
        return this.negative = 1, this.strip();
      }, f2.prototype._wordDiv = function(i, a2) {
        var h3 = this.length - i.length, s3 = this.clone(), u4 = i, c2 = u4.words[u4.length - 1] | 0, b3 = this._countBits(c2);
        h3 = 26 - b3, h3 !== 0 && (u4 = u4.ushln(h3), s3.iushln(h3), c2 = u4.words[u4.length - 1] | 0);
        var l3 = s3.length - u4.length, n4;
        if (a2 !== "mod") {
          n4 = new f2(null), n4.length = l3 + 1, n4.words = new Array(n4.length);
          for (var d2 = 0;d2 < n4.length; d2++)
            n4.words[d2] = 0;
        }
        var w3 = s3.clone()._ishlnsubmul(u4, 1, l3);
        w3.negative === 0 && (s3 = w3, n4 && (n4.words[l3] = 1));
        for (var g2 = l3 - 1;g2 >= 0; g2--) {
          var _5 = (s3.words[u4.length + g2] | 0) * 67108864 + (s3.words[u4.length + g2 - 1] | 0);
          for (_5 = Math.min(_5 / c2 | 0, 67108863), s3._ishlnsubmul(u4, _5, g2);s3.negative !== 0; )
            _5--, s3.negative = 0, s3._ishlnsubmul(u4, 1, g2), s3.isZero() || (s3.negative ^= 1);
          n4 && (n4.words[g2] = _5);
        }
        return n4 && n4.strip(), s3.strip(), a2 !== "div" && h3 !== 0 && s3.iushrn(h3), { div: n4 || null, mod: s3 };
      }, f2.prototype.divmod = function(i, a2, h3) {
        if (r2(!i.isZero()), this.isZero())
          return { div: new f2(0), mod: new f2(0) };
        var s3, u4, c2;
        return this.negative !== 0 && i.negative === 0 ? (c2 = this.neg().divmod(i, a2), a2 !== "mod" && (s3 = c2.div.neg()), a2 !== "div" && (u4 = c2.mod.neg(), h3 && u4.negative !== 0 && u4.iadd(i)), { div: s3, mod: u4 }) : this.negative === 0 && i.negative !== 0 ? (c2 = this.divmod(i.neg(), a2), a2 !== "mod" && (s3 = c2.div.neg()), { div: s3, mod: c2.mod }) : (this.negative & i.negative) !== 0 ? (c2 = this.neg().divmod(i.neg(), a2), a2 !== "div" && (u4 = c2.mod.neg(), h3 && u4.negative !== 0 && u4.isub(i)), { div: c2.div, mod: u4 }) : i.length > this.length || this.cmp(i) < 0 ? { div: new f2(0), mod: this } : i.length === 1 ? a2 === "div" ? { div: this.divn(i.words[0]), mod: null } : a2 === "mod" ? { div: null, mod: new f2(this.modn(i.words[0])) } : { div: this.divn(i.words[0]), mod: new f2(this.modn(i.words[0])) } : this._wordDiv(i, a2);
      }, f2.prototype.div = function(i) {
        return this.divmod(i, "div", false).div;
      }, f2.prototype.mod = function(i) {
        return this.divmod(i, "mod", false).mod;
      }, f2.prototype.umod = function(i) {
        return this.divmod(i, "mod", true).mod;
      }, f2.prototype.divRound = function(i) {
        var a2 = this.divmod(i);
        if (a2.mod.isZero())
          return a2.div;
        var h3 = a2.div.negative !== 0 ? a2.mod.isub(i) : a2.mod, s3 = i.ushrn(1), u4 = i.andln(1), c2 = h3.cmp(s3);
        return c2 < 0 || u4 === 1 && c2 === 0 ? a2.div : a2.div.negative !== 0 ? a2.div.isubn(1) : a2.div.iaddn(1);
      }, f2.prototype.modn = function(i) {
        r2(i <= 67108863);
        for (var a2 = (1 << 26) % i, h3 = 0, s3 = this.length - 1;s3 >= 0; s3--)
          h3 = (a2 * h3 + (this.words[s3] | 0)) % i;
        return h3;
      }, f2.prototype.idivn = function(i) {
        r2(i <= 67108863);
        for (var a2 = 0, h3 = this.length - 1;h3 >= 0; h3--) {
          var s3 = (this.words[h3] | 0) + a2 * 67108864;
          this.words[h3] = s3 / i | 0, a2 = s3 % i;
        }
        return this.strip();
      }, f2.prototype.divn = function(i) {
        return this.clone().idivn(i);
      }, f2.prototype.egcd = function(i) {
        r2(i.negative === 0), r2(!i.isZero());
        var a2 = this, h3 = i.clone();
        a2.negative !== 0 ? a2 = a2.umod(i) : a2 = a2.clone();
        for (var s3 = new f2(1), u4 = new f2(0), c2 = new f2(0), b3 = new f2(1), l3 = 0;a2.isEven() && h3.isEven(); )
          a2.iushrn(1), h3.iushrn(1), ++l3;
        for (var n4 = h3.clone(), d2 = a2.clone();!a2.isZero(); ) {
          for (var w3 = 0, g2 = 1;(a2.words[0] & g2) === 0 && w3 < 26; ++w3, g2 <<= 1)
            ;
          if (w3 > 0)
            for (a2.iushrn(w3);w3-- > 0; )
              (s3.isOdd() || u4.isOdd()) && (s3.iadd(n4), u4.isub(d2)), s3.iushrn(1), u4.iushrn(1);
          for (var _5 = 0, A6 = 1;(h3.words[0] & A6) === 0 && _5 < 26; ++_5, A6 <<= 1)
            ;
          if (_5 > 0)
            for (h3.iushrn(_5);_5-- > 0; )
              (c2.isOdd() || b3.isOdd()) && (c2.iadd(n4), b3.isub(d2)), c2.iushrn(1), b3.iushrn(1);
          a2.cmp(h3) >= 0 ? (a2.isub(h3), s3.isub(c2), u4.isub(b3)) : (h3.isub(a2), c2.isub(s3), b3.isub(u4));
        }
        return { a: c2, b: b3, gcd: h3.iushln(l3) };
      }, f2.prototype._invmp = function(i) {
        r2(i.negative === 0), r2(!i.isZero());
        var a2 = this, h3 = i.clone();
        a2.negative !== 0 ? a2 = a2.umod(i) : a2 = a2.clone();
        for (var s3 = new f2(1), u4 = new f2(0), c2 = h3.clone();a2.cmpn(1) > 0 && h3.cmpn(1) > 0; ) {
          for (var b3 = 0, l3 = 1;(a2.words[0] & l3) === 0 && b3 < 26; ++b3, l3 <<= 1)
            ;
          if (b3 > 0)
            for (a2.iushrn(b3);b3-- > 0; )
              s3.isOdd() && s3.iadd(c2), s3.iushrn(1);
          for (var n4 = 0, d2 = 1;(h3.words[0] & d2) === 0 && n4 < 26; ++n4, d2 <<= 1)
            ;
          if (n4 > 0)
            for (h3.iushrn(n4);n4-- > 0; )
              u4.isOdd() && u4.iadd(c2), u4.iushrn(1);
          a2.cmp(h3) >= 0 ? (a2.isub(h3), s3.isub(u4)) : (h3.isub(a2), u4.isub(s3));
        }
        var w3;
        return a2.cmpn(1) === 0 ? w3 = s3 : w3 = u4, w3.cmpn(0) < 0 && w3.iadd(i), w3;
      }, f2.prototype.gcd = function(i) {
        if (this.isZero())
          return i.abs();
        if (i.isZero())
          return this.abs();
        var a2 = this.clone(), h3 = i.clone();
        a2.negative = 0, h3.negative = 0;
        for (var s3 = 0;a2.isEven() && h3.isEven(); s3++)
          a2.iushrn(1), h3.iushrn(1);
        do {
          for (;a2.isEven(); )
            a2.iushrn(1);
          for (;h3.isEven(); )
            h3.iushrn(1);
          var u4 = a2.cmp(h3);
          if (u4 < 0) {
            var c2 = a2;
            a2 = h3, h3 = c2;
          } else if (u4 === 0 || h3.cmpn(1) === 0)
            break;
          a2.isub(h3);
        } while (true);
        return h3.iushln(s3);
      }, f2.prototype.invm = function(i) {
        return this.egcd(i).a.umod(i);
      }, f2.prototype.isEven = function() {
        return (this.words[0] & 1) === 0;
      }, f2.prototype.isOdd = function() {
        return (this.words[0] & 1) === 1;
      }, f2.prototype.andln = function(i) {
        return this.words[0] & i;
      }, f2.prototype.bincn = function(i) {
        r2(typeof i == "number");
        var a2 = i % 26, h3 = (i - a2) / 26, s3 = 1 << a2;
        if (this.length <= h3)
          return this._expand(h3 + 1), this.words[h3] |= s3, this;
        for (var u4 = s3, c2 = h3;u4 !== 0 && c2 < this.length; c2++) {
          var b3 = this.words[c2] | 0;
          b3 += u4, u4 = b3 >>> 26, b3 &= 67108863, this.words[c2] = b3;
        }
        return u4 !== 0 && (this.words[c2] = u4, this.length++), this;
      }, f2.prototype.isZero = function() {
        return this.length === 1 && this.words[0] === 0;
      }, f2.prototype.cmpn = function(i) {
        var a2 = i < 0;
        if (this.negative !== 0 && !a2)
          return -1;
        if (this.negative === 0 && a2)
          return 1;
        this.strip();
        var h3;
        if (this.length > 1)
          h3 = 1;
        else {
          a2 && (i = -i), r2(i <= 67108863, "Number is too big");
          var s3 = this.words[0] | 0;
          h3 = s3 === i ? 0 : s3 < i ? -1 : 1;
        }
        return this.negative !== 0 ? -h3 | 0 : h3;
      }, f2.prototype.cmp = function(i) {
        if (this.negative !== 0 && i.negative === 0)
          return -1;
        if (this.negative === 0 && i.negative !== 0)
          return 1;
        var a2 = this.ucmp(i);
        return this.negative !== 0 ? -a2 | 0 : a2;
      }, f2.prototype.ucmp = function(i) {
        if (this.length > i.length)
          return 1;
        if (this.length < i.length)
          return -1;
        for (var a2 = 0, h3 = this.length - 1;h3 >= 0; h3--) {
          var s3 = this.words[h3] | 0, u4 = i.words[h3] | 0;
          if (s3 !== u4) {
            s3 < u4 ? a2 = -1 : s3 > u4 && (a2 = 1);
            break;
          }
        }
        return a2;
      }, f2.prototype.gtn = function(i) {
        return this.cmpn(i) === 1;
      }, f2.prototype.gt = function(i) {
        return this.cmp(i) === 1;
      }, f2.prototype.gten = function(i) {
        return this.cmpn(i) >= 0;
      }, f2.prototype.gte = function(i) {
        return this.cmp(i) >= 0;
      }, f2.prototype.ltn = function(i) {
        return this.cmpn(i) === -1;
      }, f2.prototype.lt = function(i) {
        return this.cmp(i) === -1;
      }, f2.prototype.lten = function(i) {
        return this.cmpn(i) <= 0;
      }, f2.prototype.lte = function(i) {
        return this.cmp(i) <= 0;
      }, f2.prototype.eqn = function(i) {
        return this.cmpn(i) === 0;
      }, f2.prototype.eq = function(i) {
        return this.cmp(i) === 0;
      }, f2.red = function(i) {
        return new P(i);
      }, f2.prototype.toRed = function(i) {
        return r2(!this.red, "Already a number in reduction context"), r2(this.negative === 0, "red works only with positives"), i.convertTo(this)._forceRed(i);
      }, f2.prototype.fromRed = function() {
        return r2(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
      }, f2.prototype._forceRed = function(i) {
        return this.red = i, this;
      }, f2.prototype.forceRed = function(i) {
        return r2(!this.red, "Already a number in reduction context"), this._forceRed(i);
      }, f2.prototype.redAdd = function(i) {
        return r2(this.red, "redAdd works only with red numbers"), this.red.add(this, i);
      }, f2.prototype.redIAdd = function(i) {
        return r2(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, i);
      }, f2.prototype.redSub = function(i) {
        return r2(this.red, "redSub works only with red numbers"), this.red.sub(this, i);
      }, f2.prototype.redISub = function(i) {
        return r2(this.red, "redISub works only with red numbers"), this.red.isub(this, i);
      }, f2.prototype.redShl = function(i) {
        return r2(this.red, "redShl works only with red numbers"), this.red.shl(this, i);
      }, f2.prototype.redMul = function(i) {
        return r2(this.red, "redMul works only with red numbers"), this.red._verify2(this, i), this.red.mul(this, i);
      }, f2.prototype.redIMul = function(i) {
        return r2(this.red, "redMul works only with red numbers"), this.red._verify2(this, i), this.red.imul(this, i);
      }, f2.prototype.redSqr = function() {
        return r2(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
      }, f2.prototype.redISqr = function() {
        return r2(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
      }, f2.prototype.redSqrt = function() {
        return r2(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
      }, f2.prototype.redInvm = function() {
        return r2(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
      }, f2.prototype.redNeg = function() {
        return r2(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
      }, f2.prototype.redPow = function(i) {
        return r2(this.red && !i.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, i);
      };
      var we = { k256: null, p224: null, p192: null, p25519: null };
      function ye(v4, i) {
        this.name = v4, this.p = new f2(i, 16), this.n = this.p.bitLength(), this.k = new f2(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
      }
      ye.prototype._tmp = function() {
        var i = new f2(null);
        return i.words = new Array(Math.ceil(this.n / 13)), i;
      }, ye.prototype.ireduce = function(i) {
        var a2 = i, h3;
        do
          this.split(a2, this.tmp), a2 = this.imulK(a2), a2 = a2.iadd(this.tmp), h3 = a2.bitLength();
        while (h3 > this.n);
        var s3 = h3 < this.n ? -1 : a2.ucmp(this.p);
        return s3 === 0 ? (a2.words[0] = 0, a2.length = 1) : s3 > 0 ? a2.isub(this.p) : a2.strip !== undefined ? a2.strip() : a2._strip(), a2;
      }, ye.prototype.split = function(i, a2) {
        i.iushrn(this.n, 0, a2);
      }, ye.prototype.imulK = function(i) {
        return i.imul(this.k);
      };
      function xe() {
        ye.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      o2(xe, ye), xe.prototype.split = function(i, a2) {
        for (var h3 = 4194303, s3 = Math.min(i.length, 9), u4 = 0;u4 < s3; u4++)
          a2.words[u4] = i.words[u4];
        if (a2.length = s3, i.length <= 9) {
          i.words[0] = 0, i.length = 1;
          return;
        }
        var c2 = i.words[9];
        for (a2.words[a2.length++] = c2 & h3, u4 = 10;u4 < i.length; u4++) {
          var b3 = i.words[u4] | 0;
          i.words[u4 - 10] = (b3 & h3) << 4 | c2 >>> 22, c2 = b3;
        }
        c2 >>>= 22, i.words[u4 - 10] = c2, c2 === 0 && i.length > 10 ? i.length -= 10 : i.length -= 9;
      }, xe.prototype.imulK = function(i) {
        i.words[i.length] = 0, i.words[i.length + 1] = 0, i.length += 2;
        for (var a2 = 0, h3 = 0;h3 < i.length; h3++) {
          var s3 = i.words[h3] | 0;
          a2 += s3 * 977, i.words[h3] = a2 & 67108863, a2 = s3 * 64 + (a2 / 67108864 | 0);
        }
        return i.words[i.length - 1] === 0 && (i.length--, i.words[i.length - 1] === 0 && i.length--), i;
      };
      function Re() {
        ye.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      o2(Re, ye);
      function Ee() {
        ye.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      o2(Ee, ye);
      function Ae() {
        ye.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      o2(Ae, ye), Ae.prototype.imulK = function(i) {
        for (var a2 = 0, h3 = 0;h3 < i.length; h3++) {
          var s3 = (i.words[h3] | 0) * 19 + a2, u4 = s3 & 67108863;
          s3 >>>= 26, i.words[h3] = u4, a2 = s3;
        }
        return a2 !== 0 && (i.words[i.length++] = a2), i;
      }, f2._prime = function(i) {
        if (we[i])
          return we[i];
        var a2;
        if (i === "k256")
          a2 = new xe;
        else if (i === "p224")
          a2 = new Re;
        else if (i === "p192")
          a2 = new Ee;
        else if (i === "p25519")
          a2 = new Ae;
        else
          throw new Error("Unknown prime " + i);
        return we[i] = a2, a2;
      };
      function P(v4) {
        if (typeof v4 == "string") {
          var i = f2._prime(v4);
          this.m = i.p, this.prime = i;
        } else
          r2(v4.gtn(1), "modulus must be greater than 1"), this.m = v4, this.prime = null;
      }
      P.prototype._verify1 = function(i) {
        r2(i.negative === 0, "red works only with positives"), r2(i.red, "red works only with red numbers");
      }, P.prototype._verify2 = function(i, a2) {
        r2((i.negative | a2.negative) === 0, "red works only with positives"), r2(i.red && i.red === a2.red, "red works only with red numbers");
      }, P.prototype.imod = function(i) {
        return this.prime ? this.prime.ireduce(i)._forceRed(this) : i.umod(this.m)._forceRed(this);
      }, P.prototype.neg = function(i) {
        return i.isZero() ? i.clone() : this.m.sub(i)._forceRed(this);
      }, P.prototype.add = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.add(a2);
        return h3.cmp(this.m) >= 0 && h3.isub(this.m), h3._forceRed(this);
      }, P.prototype.iadd = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.iadd(a2);
        return h3.cmp(this.m) >= 0 && h3.isub(this.m), h3;
      }, P.prototype.sub = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.sub(a2);
        return h3.cmpn(0) < 0 && h3.iadd(this.m), h3._forceRed(this);
      }, P.prototype.isub = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.isub(a2);
        return h3.cmpn(0) < 0 && h3.iadd(this.m), h3;
      }, P.prototype.shl = function(i, a2) {
        return this._verify1(i), this.imod(i.ushln(a2));
      }, P.prototype.imul = function(i, a2) {
        return this._verify2(i, a2), this.imod(i.imul(a2));
      }, P.prototype.mul = function(i, a2) {
        return this._verify2(i, a2), this.imod(i.mul(a2));
      }, P.prototype.isqr = function(i) {
        return this.imul(i, i.clone());
      }, P.prototype.sqr = function(i) {
        return this.mul(i, i);
      }, P.prototype.sqrt = function(i) {
        if (i.isZero())
          return i.clone();
        var a2 = this.m.andln(3);
        if (r2(a2 % 2 === 1), a2 === 3) {
          var h3 = this.m.add(new f2(1)).iushrn(2);
          return this.pow(i, h3);
        }
        for (var s3 = this.m.subn(1), u4 = 0;!s3.isZero() && s3.andln(1) === 0; )
          u4++, s3.iushrn(1);
        r2(!s3.isZero());
        var c2 = new f2(1).toRed(this), b3 = c2.redNeg(), l3 = this.m.subn(1).iushrn(1), n4 = this.m.bitLength();
        for (n4 = new f2(2 * n4 * n4).toRed(this);this.pow(n4, l3).cmp(b3) !== 0; )
          n4.redIAdd(b3);
        for (var d2 = this.pow(n4, s3), w3 = this.pow(i, s3.addn(1).iushrn(1)), g2 = this.pow(i, s3), _5 = u4;g2.cmp(c2) !== 0; ) {
          for (var A6 = g2, R4 = 0;A6.cmp(c2) !== 0; R4++)
            A6 = A6.redSqr();
          r2(R4 < _5);
          var I2 = this.pow(d2, new f2(1).iushln(_5 - R4 - 1));
          w3 = w3.redMul(I2), d2 = I2.redSqr(), g2 = g2.redMul(d2), _5 = R4;
        }
        return w3;
      }, P.prototype.invm = function(i) {
        var a2 = i._invmp(this.m);
        return a2.negative !== 0 ? (a2.negative = 0, this.imod(a2).redNeg()) : this.imod(a2);
      }, P.prototype.pow = function(i, a2) {
        if (a2.isZero())
          return new f2(1).toRed(this);
        if (a2.cmpn(1) === 0)
          return i.clone();
        var h3 = 4, s3 = new Array(1 << h3);
        s3[0] = new f2(1).toRed(this), s3[1] = i;
        for (var u4 = 2;u4 < s3.length; u4++)
          s3[u4] = this.mul(s3[u4 - 1], i);
        var c2 = s3[0], b3 = 0, l3 = 0, n4 = a2.bitLength() % 26;
        for (n4 === 0 && (n4 = 26), u4 = a2.length - 1;u4 >= 0; u4--) {
          for (var d2 = a2.words[u4], w3 = n4 - 1;w3 >= 0; w3--) {
            var g2 = d2 >> w3 & 1;
            if (c2 !== s3[0] && (c2 = this.sqr(c2)), g2 === 0 && b3 === 0) {
              l3 = 0;
              continue;
            }
            b3 <<= 1, b3 |= g2, l3++, !(l3 !== h3 && (u4 !== 0 || w3 !== 0)) && (c2 = this.mul(c2, s3[b3]), l3 = 0, b3 = 0);
          }
          n4 = 26;
        }
        return c2;
      }, P.prototype.convertTo = function(i) {
        var a2 = i.umod(this.m);
        return a2 === i ? a2.clone() : a2;
      }, P.prototype.convertFrom = function(i) {
        var a2 = i.clone();
        return a2.red = null, a2;
      }, f2.mont = function(i) {
        return new Se(i);
      };
      function Se(v4) {
        P.call(this, v4), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new f2(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
      }
      o2(Se, P), Se.prototype.convertTo = function(i) {
        return this.imod(i.ushln(this.shift));
      }, Se.prototype.convertFrom = function(i) {
        var a2 = this.imod(i.mul(this.rinv));
        return a2.red = null, a2;
      }, Se.prototype.imul = function(i, a2) {
        if (i.isZero() || a2.isZero())
          return i.words[0] = 0, i.length = 1, i;
        var h3 = i.imul(a2), s3 = h3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u4 = h3.isub(s3).iushrn(this.shift), c2 = u4;
        return u4.cmp(this.m) >= 0 ? c2 = u4.isub(this.m) : u4.cmpn(0) < 0 && (c2 = u4.iadd(this.m)), c2._forceRed(this);
      }, Se.prototype.mul = function(i, a2) {
        if (i.isZero() || a2.isZero())
          return new f2(0)._forceRed(this);
        var h3 = i.mul(a2), s3 = h3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u4 = h3.isub(s3).iushrn(this.shift), c2 = u4;
        return u4.cmp(this.m) >= 0 ? c2 = u4.isub(this.m) : u4.cmpn(0) < 0 && (c2 = u4.iadd(this.m)), c2._forceRed(this);
      }, Se.prototype.invm = function(i) {
        var a2 = this.imod(i._invmp(this.m).mul(this.r2));
        return a2._forceRed(this);
      };
    })(typeof Sd > "u" || Sd, F3);
  });
  Ed = T2((xL, z32) => {
    var U3 = w02(), wq = Te().Buffer;
    function Mq(t3, e2) {
      return wq.from(t3.toRed(U3.mont(e2.modulus)).redPow(new U3(e2.publicExponent)).fromRed().toArray());
    }
    z32.exports = Mq;
  });
  j3 = T2((SL, K3) => {
    var _q = Ha(), Ad = on(), xq = bf(), H32 = _d(), W3 = xd(), Rd = w02(), Sq = Ed(), Eq = Ks(), Kr = Te().Buffer;
    K3.exports = function(e2, r2, o2) {
      var f2;
      e2.padding ? f2 = e2.padding : o2 ? f2 = 1 : f2 = 4;
      var p2 = _q(e2), m4;
      if (f2 === 4)
        m4 = Aq(p2, r2);
      else if (f2 === 1)
        m4 = Rq(p2, r2, o2);
      else if (f2 === 3) {
        if (m4 = new Rd(r2), m4.cmp(p2.modulus) >= 0)
          throw new Error("data too long for modulus");
      } else
        throw new Error("unknown padding");
      return o2 ? Eq(m4, p2) : Sq(m4, p2);
    };
    function Aq(t3, e2) {
      var r2 = t3.modulus.byteLength(), o2 = e2.length, f2 = xq("sha1").update(Kr.alloc(0)).digest(), p2 = f2.length, m4 = 2 * p2;
      if (o2 > r2 - m4 - 2)
        throw new Error("message too long");
      var y3 = Kr.alloc(r2 - o2 - m4 - 2), M3 = r2 - p2 - 1, x5 = Ad(p2), S2 = W3(Kr.concat([f2, y3, Kr.alloc(1, 1), e2], M3), H32(x5, M3)), E4 = W3(x5, H32(S2, p2));
      return new Rd(Kr.concat([Kr.alloc(1), E4, S2], r2));
    }
    function Rq(t3, e2, r2) {
      var o2 = e2.length, f2 = t3.modulus.byteLength();
      if (o2 > f2 - 11)
        throw new Error("message too long");
      var p2;
      return r2 ? p2 = Kr.alloc(f2 - o2 - 3, 255) : p2 = Bq(f2 - o2 - 3), new Rd(Kr.concat([Kr.from([0, r2 ? 1 : 2]), p2, Kr.alloc(1), e2], f2));
    }
    function Bq(t3) {
      for (var e2 = Kr.allocUnsafe(t3), r2 = 0, o2 = Ad(t3 * 2), f2 = 0, p2;r2 < t3; )
        f2 === o2.length && (o2 = Ad(t3 * 2), f2 = 0), p2 = o2[f2++], p2 && (e2[r2++] = p2);
      return e2;
    }
  });
  Y3 = T2((EL, G32) => {
    var qq = Ha(), Z32 = _d(), V3 = xd(), $3 = w02(), Iq = Ks(), Tq = bf(), kq = Ed(), Za = Te().Buffer;
    G32.exports = function(e2, r2, o2) {
      var f2;
      e2.padding ? f2 = e2.padding : o2 ? f2 = 1 : f2 = 4;
      var p2 = qq(e2), m4 = p2.modulus.byteLength();
      if (r2.length > m4 || new $3(r2).cmp(p2.modulus) >= 0)
        throw new Error("decryption error");
      var y3;
      o2 ? y3 = kq(new $3(r2), p2) : y3 = Iq(r2, p2);
      var M3 = Za.alloc(m4 - y3.length);
      if (y3 = Za.concat([M3, y3], m4), f2 === 4)
        return Lq(p2, y3);
      if (f2 === 1)
        return Nq(p2, y3, o2);
      if (f2 === 3)
        return y3;
      throw new Error("unknown padding");
    };
    function Lq(t3, e2) {
      var r2 = t3.modulus.byteLength(), o2 = Tq("sha1").update(Za.alloc(0)).digest(), f2 = o2.length;
      if (e2[0] !== 0)
        throw new Error("decryption error");
      var p2 = e2.slice(1, f2 + 1), m4 = e2.slice(f2 + 1), y3 = V3(p2, Z32(m4, f2)), M3 = V3(m4, Z32(y3, r2 - f2 - 1));
      if (Dq(o2, M3.slice(0, f2)))
        throw new Error("decryption error");
      for (var x5 = f2;M3[x5] === 0; )
        x5++;
      if (M3[x5++] !== 1)
        throw new Error("decryption error");
      return M3.slice(x5);
    }
    function Nq(t3, e2, r2) {
      for (var o2 = e2.slice(0, 2), f2 = 2, p2 = 0;e2[f2++] !== 0; )
        if (f2 >= e2.length) {
          p2++;
          break;
        }
      var m4 = e2.slice(2, f2 - 1);
      if ((o2.toString("hex") !== "0002" && !r2 || o2.toString("hex") !== "0001" && r2) && p2++, m4.length < 8 && p2++, p2)
        throw new Error("decryption error");
      return e2.slice(f2);
    }
    function Dq(t3, e2) {
      t3 = Za.from(t3), e2 = Za.from(e2);
      var r2 = 0, o2 = t3.length;
      t3.length !== e2.length && (r2++, o2 = Math.min(t3.length, e2.length));
      for (var f2 = -1;++f2 < o2; )
        r2 += t3[f2] ^ e2[f2];
      return r2;
    }
  });
  X32 = T2((Vn) => {
    Vn.publicEncrypt = j3();
    Vn.privateDecrypt = Y3();
    Vn.privateEncrypt = function(e2, r2) {
      return Vn.publicEncrypt(e2, r2, true);
    };
    Vn.publicDecrypt = function(e2, r2) {
      return Vn.privateDecrypt(e2, r2, true);
    };
  });
  ow = T2((Va) => {
    function J3() {
      throw new Error(`secure random number generation not supported by this browser
use chrome, FireFox or Internet Explorer 11`);
    }
    var ew = Te(), Q32 = on(), tw = ew.Buffer, rw = ew.kMaxLength, Bd = global.crypto || global.msCrypto, iw = Math.pow(2, 32) - 1;
    function nw(t3, e2) {
      if (typeof t3 != "number" || t3 !== t3)
        throw new TypeError("offset must be a number");
      if (t3 > iw || t3 < 0)
        throw new TypeError("offset must be a uint32");
      if (t3 > rw || t3 > e2)
        throw new RangeError("offset out of range");
    }
    function fw(t3, e2, r2) {
      if (typeof t3 != "number" || t3 !== t3)
        throw new TypeError("size must be a number");
      if (t3 > iw || t3 < 0)
        throw new TypeError("size must be a uint32");
      if (t3 + e2 > r2 || t3 > rw)
        throw new RangeError("buffer too small");
    }
    Bd && Bd.getRandomValues ? (Va.randomFill = Pq, Va.randomFillSync = Cq) : (Va.randomFill = J3, Va.randomFillSync = J3);
    function Pq(t3, e2, r2, o2) {
      if (!tw.isBuffer(t3) && !(t3 instanceof global.Uint8Array))
        throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
      if (typeof e2 == "function")
        o2 = e2, e2 = 0, r2 = t3.length;
      else if (typeof r2 == "function")
        o2 = r2, r2 = t3.length - e2;
      else if (typeof o2 != "function")
        throw new TypeError('"cb" argument must be a function');
      return nw(e2, t3.length), fw(r2, e2, t3.length), aw(t3, e2, r2, o2);
    }
    function aw(t3, e2, r2, o2) {
      if (true) {
        var f2 = t3.buffer, p2 = new Uint8Array(f2, e2, r2);
        if (Bd.getRandomValues(p2), o2) {
          process.nextTick(function() {
            o2(null, t3);
          });
          return;
        }
        return t3;
      }
      if (o2) {
        Q32(r2, function(y3, M3) {
          if (y3)
            return o2(y3);
          M3.copy(t3, e2), o2(null, t3);
        });
        return;
      }
      var m4 = Q32(r2);
      return m4.copy(t3, e2), t3;
    }
    function Cq(t3, e2, r2) {
      if (typeof e2 > "u" && (e2 = 0), !tw.isBuffer(t3) && !(t3 instanceof global.Uint8Array))
        throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
      return nw(e2, t3.length), r2 === undefined && (r2 = t3.length - e2), fw(r2, e2, t3.length), aw(t3, e2, r2);
    }
  });
  qd = T2((ke) => {
    ke.randomBytes = ke.rng = ke.pseudoRandomBytes = ke.prng = on();
    ke.createHash = ke.Hash = bf();
    ke.createHmac = ke.Hmac = wu();
    var Oq = Eb(), Fq = Object.keys(Oq), Uq = ["sha1", "sha224", "sha256", "sha384", "sha512", "md5", "rmd160"].concat(Fq);
    ke.getHashes = function() {
      return Uq;
    };
    var sw = Iu();
    ke.pbkdf2 = sw.pbkdf2;
    ke.pbkdf2Sync = sw.pbkdf2Sync;
    var ui = Vm();
    ke.Cipher = ui.Cipher;
    ke.createCipher = ui.createCipher;
    ke.Cipheriv = ui.Cipheriv;
    ke.createCipheriv = ui.createCipheriv;
    ke.Decipher = ui.Decipher;
    ke.createDecipher = ui.createDecipher;
    ke.Decipheriv = ui.Decipheriv;
    ke.createDecipheriv = ui.createDecipheriv;
    ke.getCiphers = ui.getCiphers;
    ke.listCiphers = ui.listCiphers;
    var $a = hg();
    ke.DiffieHellmanGroup = $a.DiffieHellmanGroup;
    ke.createDiffieHellmanGroup = $a.createDiffieHellmanGroup;
    ke.getDiffieHellman = $a.getDiffieHellman;
    ke.createDiffieHellman = $a.createDiffieHellman;
    ke.DiffieHellman = $a.DiffieHellman;
    var M02 = k3();
    ke.createSign = M02.createSign;
    ke.Sign = M02.Sign;
    ke.createVerify = M02.createVerify;
    ke.Verify = M02.Verify;
    ke.createECDH = P3();
    var _02 = X32();
    ke.publicEncrypt = _02.publicEncrypt;
    ke.privateEncrypt = _02.privateEncrypt;
    ke.publicDecrypt = _02.publicDecrypt;
    ke.privateDecrypt = _02.privateDecrypt;
    var hw = ow();
    ke.randomFill = hw.randomFill;
    ke.randomFillSync = hw.randomFillSync;
    ke.createCredentials = function() {
      throw new Error(["sorry, createCredentials is not implemented yet", "we accept pull requests", "https://github.com/crypto-browserify/crypto-browserify"].join(`
`));
    };
    ke.constants = { DH_CHECK_P_NOT_SAFE_PRIME: 2, DH_CHECK_P_NOT_PRIME: 1, DH_UNABLE_TO_CHECK_GENERATOR: 4, DH_NOT_SUITABLE_GENERATOR: 8, NPN_ENABLED: 1, ALPN_ENABLED: 1, RSA_PKCS1_PADDING: 1, RSA_SSLV23_PADDING: 2, RSA_NO_PADDING: 3, RSA_PKCS1_OAEP_PADDING: 4, RSA_X931_PADDING: 5, RSA_PKCS1_PSS_PADDING: 6, POINT_CONVERSION_COMPRESSED: 2, POINT_CONVERSION_UNCOMPRESSED: 4, POINT_CONVERSION_HYBRID: 6 };
  });
  Xt = {};
  Ja(Xt, { DEFAULT_ENCODING: () => Ga, default: () => Wq, getCurves: () => dw, getRandomValues: () => uw, randomUUID: () => lw, scrypt: () => Td, scryptSync: () => Id, timingSafeEqual: () => x02, webcrypto: () => cw });
  ot(Xt, rn(qd()));
  zq = rn(qd());
  Ga = "buffer";
  uw = (t3) => crypto.getRandomValues(t3);
  lw = () => crypto.randomUUID();
  Hq = ["p192", "p224", "p256", "p384", "p521", "curve25519", "ed25519", "secp256k1", "secp224r1", "prime256v1", "prime192v1", "ed25519", "secp384r1", "secp521r1"];
  x02 = "timingSafeEqual" in crypto ? (t3, e2) => {
    let { byteLength: r2 } = t3, { byteLength: o2 } = e2;
    if (typeof r2 != "number" || typeof o2 != "number")
      throw new TypeError("Input must be an array buffer view");
    if (r2 !== o2)
      throw new RangeError("Input buffers must have the same length");
    return crypto.timingSafeEqual(t3, e2);
  } : undefined;
  Id = "scryptSync" in crypto ? (t3, e2, r2, o2) => {
    let f2 = crypto.scryptSync(t3, e2, r2, o2);
    return Ga !== "buffer" ? new Buffer(f2).toString(Ga) : new Buffer(f2);
  } : undefined;
  Td = "scryptSync" in crypto ? function(t3, e2, r2, o2, f2) {
    if (typeof o2 == "function" && (f2 = o2, o2 = undefined), typeof f2 != "function") {
      var p2 = new TypeError("callback must be a function");
      throw p2.code = "ERR_INVALID_CALLBACK", p2;
    }
    try {
      let m4 = crypto.scryptSync(t3, e2, r2, o2);
      process.nextTick(f2, null, Ga !== "buffer" ? new Buffer(m4).toString(Ga) : new Buffer(m4));
    } catch (m4) {
      throw m4;
    }
  } : undefined;
  x02 && (Object.defineProperty(x02, "name", { value: "::bunternal::" }), Object.defineProperty(Td, "name", { value: "::bunternal::" }), Object.defineProperty(Id, "name", { value: "::bunternal::" }));
  cw = crypto;
  Wq = { ...zq, getRandomValues: uw, randomUUID: lw, timingSafeEqual: x02, scryptSync: Id, scrypt: Td, webcrypto: cw, getCurves: dw };
  /*!
     * The buffer module from node.js, for the browser.
     *
     * @author   Feross Aboukhadijeh <https://feross.org>
     * @license  MIT
     */
  /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
  /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
});
var require_seedrandom = __commonJS((exports, module) => {
  (function(global2, pool, math) {
    var width = 256, chunks = 6, digits = 52, rngname = "random", startdenom = math.pow(width, chunks), significance = math.pow(2, digits), overflow = significance * 2, mask = width - 1, nodecrypto;
    function seedrandom(seed, options, callback) {
      var key = [];
      options = options == true ? { entropy: true } : options || {};
      var shortseed = mixkey(flatten(options.entropy ? [seed, tostring(pool)] : seed == null ? autoseed() : seed, 3), key);
      var arc4 = new ARC4(key);
      var prng = function() {
        var n4 = arc4.g(chunks), d2 = startdenom, x5 = 0;
        while (n4 < significance) {
          n4 = (n4 + x5) * width;
          d2 *= width;
          x5 = arc4.g(1);
        }
        while (n4 >= overflow) {
          n4 /= 2;
          d2 /= 2;
          x5 >>>= 1;
        }
        return (n4 + x5) / d2;
      };
      prng.int32 = function() {
        return arc4.g(4) | 0;
      };
      prng.quick = function() {
        return arc4.g(4) / 4294967296;
      };
      prng.double = prng;
      mixkey(tostring(arc4.S), pool);
      return (options.pass || callback || function(prng2, seed2, is_math_call, state) {
        if (state) {
          if (state.S) {
            copy(state, arc4);
          }
          prng2.state = function() {
            return copy(arc4, {});
          };
        }
        if (is_math_call) {
          math[rngname] = prng2;
          return seed2;
        } else
          return prng2;
      })(prng, shortseed, "global" in options ? options.global : this == math, options.state);
    }
    function ARC4(key) {
      var t3, keylen = key.length, me = this, i = 0, j4 = me.i = me.j = 0, s3 = me.S = [];
      if (!keylen) {
        key = [keylen++];
      }
      while (i < width) {
        s3[i] = i++;
      }
      for (i = 0;i < width; i++) {
        s3[i] = s3[j4 = mask & j4 + key[i % keylen] + (t3 = s3[i])];
        s3[j4] = t3;
      }
      (me.g = function(count) {
        var t4, r2 = 0, i3 = me.i, j5 = me.j, s4 = me.S;
        while (count--) {
          t4 = s4[i3 = mask & i3 + 1];
          r2 = r2 * width + s4[mask & (s4[i3] = s4[j5 = mask & j5 + t4]) + (s4[j5] = t4)];
        }
        me.i = i3;
        me.j = j5;
        return r2;
      })(width);
    }
    function copy(f2, t3) {
      t3.i = f2.i;
      t3.j = f2.j;
      t3.S = f2.S.slice();
      return t3;
    }
    function flatten(obj, depth) {
      var result = [], typ = typeof obj, prop;
      if (depth && typ == "object") {
        for (prop in obj) {
          try {
            result.push(flatten(obj[prop], depth - 1));
          } catch (e2) {
          }
        }
      }
      return result.length ? result : typ == "string" ? obj : obj + "\0";
    }
    function mixkey(seed, key) {
      var stringseed = seed + "", smear, j4 = 0;
      while (j4 < stringseed.length) {
        key[mask & j4] = mask & (smear ^= key[mask & j4] * 19) + stringseed.charCodeAt(j4++);
      }
      return tostring(key);
    }
    function autoseed() {
      try {
        var out;
        if (nodecrypto && (out = nodecrypto.randomBytes)) {
          out = out(width);
        } else {
          out = new Uint8Array(width);
          (global2.crypto || global2.msCrypto).getRandomValues(out);
        }
        return tostring(out);
      } catch (e2) {
        var browser = global2.navigator, plugins = browser && browser.plugins;
        return [+new Date, global2, plugins, global2.screen, tostring(pool)];
      }
    }
    function tostring(a2) {
      return String.fromCharCode.apply(0, a2);
    }
    mixkey(math.random(), pool);
    if (typeof module == "object" && exports) {
      module.exports = seedrandom;
      try {
        nodecrypto = (init_crypto(), __toCommonJS(exports_crypto));
      } catch (ex) {
      }
    } else if (typeof define == "function" && define.amd) {
      define(function() {
        return seedrandom;
      });
    } else {
      math["seed" + rngname] = seedrandom;
    }
  })(typeof self !== "undefined" ? self : exports, [], Math);
});
var require_seedrandom2 = __commonJS((exports, module) => {
  var alea = require_alea();
  var xor128 = require_xor128();
  var xorwow = require_xorwow();
  var xorshift7 = require_xorshift7();
  var xor4096 = require_xor4096();
  var tychei = require_tychei();
  var sr = require_seedrandom();
  sr.alea = alea;
  sr.xor128 = xor128;
  sr.xorwow = xorwow;
  sr.xorshift7 = xorshift7;
  sr.xor4096 = xor4096;
  sr.tychei = tychei;
  module.exports = sr;
});
var require_react_development = __commonJS((exports, module) => {
  if (true) {
    (function() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error);
      }
      var ReactVersion = "18.2.0";
      var REACT_ELEMENT_TYPE = Symbol.for("react.element");
      var REACT_PORTAL_TYPE = Symbol.for("react.portal");
      var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
      var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
      var REACT_CONTEXT_TYPE = Symbol.for("react.context");
      var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
      var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
      var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
      var REACT_MEMO_TYPE = Symbol.for("react.memo");
      var REACT_LAZY_TYPE = Symbol.for("react.lazy");
      var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var ReactCurrentDispatcher = {
        current: null
      };
      var ReactCurrentBatchConfig = {
        transition: null
      };
      var ReactCurrentActQueue = {
        current: null,
        isBatchingLegacy: false,
        didScheduleLegacyUpdate: false
      };
      var ReactCurrentOwner = {
        current: null
      };
      var ReactDebugCurrentFrame = {};
      var currentExtraStackFrame = null;
      function setExtraStackFrame(stack) {
        {
          currentExtraStackFrame = stack;
        }
      }
      {
        ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
          {
            currentExtraStackFrame = stack;
          }
        };
        ReactDebugCurrentFrame.getCurrentStack = null;
        ReactDebugCurrentFrame.getStackAddendum = function() {
          var stack = "";
          if (currentExtraStackFrame) {
            stack += currentExtraStackFrame;
          }
          var impl = ReactDebugCurrentFrame.getCurrentStack;
          if (impl) {
            stack += impl() || "";
          }
          return stack;
        };
      }
      var enableScopeAPI = false;
      var enableCacheElement = false;
      var enableTransitionTracing = false;
      var enableLegacyHidden = false;
      var enableDebugTracing = false;
      var ReactSharedInternals = {
        ReactCurrentDispatcher,
        ReactCurrentBatchConfig,
        ReactCurrentOwner
      };
      {
        ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
        ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
      }
      function warn(format) {
        {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1;_key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format, args);
          }
        }
      }
      function error(format) {
        {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1;_key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var didWarnStateUpdateForUnmountedComponent = {};
      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor;
          var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
          var warningKey = componentName + "." + callerName;
          if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
            return;
          }
          error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
          didWarnStateUpdateForUnmountedComponent[warningKey] = true;
        }
      }
      var ReactNoopUpdateQueue = {
        isMounted: function(publicInstance) {
          return false;
        },
        enqueueForceUpdate: function(publicInstance, callback, callerName) {
          warnNoop(publicInstance, "forceUpdate");
        },
        enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
          warnNoop(publicInstance, "replaceState");
        },
        enqueueSetState: function(publicInstance, partialState, callback, callerName) {
          warnNoop(publicInstance, "setState");
        }
      };
      var assign = Object.assign;
      var emptyObject = {};
      {
        Object.freeze(emptyObject);
      }
      function Component(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      Component.prototype.isReactComponent = {};
      Component.prototype.setState = function(partialState, callback) {
        if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
          throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        }
        this.updater.enqueueSetState(this, partialState, callback, "setState");
      };
      Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
      };
      {
        var deprecatedAPIs = {
          isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
          replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
        };
        var defineDeprecationWarning = function(methodName, info) {
          Object.defineProperty(Component.prototype, methodName, {
            get: function() {
              warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
              return;
            }
          });
        };
        for (var fnName in deprecatedAPIs) {
          if (deprecatedAPIs.hasOwnProperty(fnName)) {
            defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
          }
        }
      }
      function ComponentDummy() {
      }
      ComponentDummy.prototype = Component.prototype;
      function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      var pureComponentPrototype = PureComponent.prototype = new ComponentDummy;
      pureComponentPrototype.constructor = PureComponent;
      assign(pureComponentPrototype, Component.prototype);
      pureComponentPrototype.isPureReactComponent = true;
      function createRef() {
        var refObject = {
          current: null
        };
        {
          Object.seal(refObject);
        }
        return refObject;
      }
      var isArrayImpl = Array.isArray;
      function isArray(a2) {
        return isArrayImpl(a2);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
          var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        {
          try {
            testStringCoercion(value);
            return false;
          } catch (e2) {
            return true;
          }
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) {
          return displayName;
        }
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === "number") {
            error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
          return type;
        }
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              if (outerName !== null) {
                return outerName;
              }
              return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch (x5) {
                return null;
              }
            }
          }
        }
        return null;
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
      {
        didWarnAboutStringRefs = {};
      }
      function hasValidRef(config) {
        {
          if (hasOwnProperty.call(config, "ref")) {
            var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.ref !== undefined;
      }
      function hasValidKey(config) {
        {
          if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.key !== undefined;
      }
      function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
          {
            if (!specialPropKeyWarningShown) {
              specialPropKeyWarningShown = true;
              error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, "key", {
          get: warnAboutAccessingKey,
          configurable: true
        });
      }
      function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
          {
            if (!specialPropRefWarningShown) {
              specialPropRefWarningShown = true;
              error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, "ref", {
          get: warnAboutAccessingRef,
          configurable: true
        });
      }
      function warnIfStringRefCannotBeAutoConverted(config) {
        {
          if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
              error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
              didWarnAboutStringRefs[componentName] = true;
            }
          }
        }
      }
      var ReactElement = function(type, key, ref, self2, source, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          _owner: owner
        };
        {
          element._store = {};
          Object.defineProperty(element._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
          });
          Object.defineProperty(element, "_self", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self2
          });
          Object.defineProperty(element, "_source", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
          });
          if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
          }
        }
        return element;
      };
      function createElement(type, config, children) {
        var propName;
        var props = {};
        var key = null;
        var ref = null;
        var self2 = null;
        var source = null;
        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            {
              warnIfStringRefCannotBeAutoConverted(config);
            }
          }
          if (hasValidKey(config)) {
            {
              checkKeyStringCoercion(config.key);
            }
            key = "" + config.key;
          }
          self2 = config.__self === undefined ? null : config.__self;
          source = config.__source === undefined ? null : config.__source;
          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config[propName];
            }
          }
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);
          for (var i = 0;i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }
          {
            if (Object.freeze) {
              Object.freeze(childArray);
            }
          }
          props.children = childArray;
        }
        if (type && type.defaultProps) {
          var defaultProps = type.defaultProps;
          for (propName in defaultProps) {
            if (props[propName] === undefined) {
              props[propName] = defaultProps[propName];
            }
          }
        }
        {
          if (key || ref) {
            var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
            if (key) {
              defineKeyPropWarningGetter(props, displayName);
            }
            if (ref) {
              defineRefPropWarningGetter(props, displayName);
            }
          }
        }
        return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
      }
      function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
      }
      function cloneElement(element, config, children) {
        if (element === null || element === undefined) {
          throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        }
        var propName;
        var props = assign({}, element.props);
        var key = element.key;
        var ref = element.ref;
        var self2 = element._self;
        var source = element._source;
        var owner = element._owner;
        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            owner = ReactCurrentOwner.current;
          }
          if (hasValidKey(config)) {
            {
              checkKeyStringCoercion(config.key);
            }
            key = "" + config.key;
          }
          var defaultProps;
          if (element.type && element.type.defaultProps) {
            defaultProps = element.type.defaultProps;
          }
          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              if (config[propName] === undefined && defaultProps !== undefined) {
                props[propName] = defaultProps[propName];
              } else {
                props[propName] = config[propName];
              }
            }
          }
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);
          for (var i = 0;i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }
          props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self2, source, owner, props);
      }
      function isValidElement(object) {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      var SEPARATOR = ".";
      var SUBSEPARATOR = ":";
      function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
          "=": "=0",
          ":": "=2"
        };
        var escapedString = key.replace(escapeRegex, function(match) {
          return escaperLookup[match];
        });
        return "$" + escapedString;
      }
      var didWarnAboutMaps = false;
      var userProvidedKeyEscapeRegex = /\/+/g;
      function escapeUserProvidedKey(text) {
        return text.replace(userProvidedKeyEscapeRegex, "$&/");
      }
      function getElementKey(element, index) {
        if (typeof element === "object" && element !== null && element.key != null) {
          {
            checkKeyStringCoercion(element.key);
          }
          return escape("" + element.key);
        }
        return index.toString(36);
      }
      function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if (type === "undefined" || type === "boolean") {
          children = null;
        }
        var invokeCallback = false;
        if (children === null) {
          invokeCallback = true;
        } else {
          switch (type) {
            case "string":
            case "number":
              invokeCallback = true;
              break;
            case "object":
              switch (children.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  invokeCallback = true;
              }
          }
        }
        if (invokeCallback) {
          var _child = children;
          var mappedChild = callback(_child);
          var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
          if (isArray(mappedChild)) {
            var escapedChildKey = "";
            if (childKey != null) {
              escapedChildKey = escapeUserProvidedKey(childKey) + "/";
            }
            mapIntoArray(mappedChild, array, escapedChildKey, "", function(c2) {
              return c2;
            });
          } else if (mappedChild != null) {
            if (isValidElement(mappedChild)) {
              {
                if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                  checkKeyStringCoercion(mappedChild.key);
                }
              }
              mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
            }
            array.push(mappedChild);
          }
          return 1;
        }
        var child;
        var nextName;
        var subtreeCount = 0;
        var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (isArray(children)) {
          for (var i = 0;i < children.length; i++) {
            child = children[i];
            nextName = nextNamePrefix + getElementKey(child, i);
            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
          }
        } else {
          var iteratorFn = getIteratorFn(children);
          if (typeof iteratorFn === "function") {
            var iterableChildren = children;
            {
              if (iteratorFn === iterableChildren.entries) {
                if (!didWarnAboutMaps) {
                  warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
            }
            var iterator = iteratorFn.call(iterableChildren);
            var step;
            var ii = 0;
            while (!(step = iterator.next()).done) {
              child = step.value;
              nextName = nextNamePrefix + getElementKey(child, ii++);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else if (type === "object") {
            var childrenString = String(children);
            throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
          }
        }
        return subtreeCount;
      }
      function mapChildren(children, func, context) {
        if (children == null) {
          return children;
        }
        var result = [];
        var count = 0;
        mapIntoArray(children, result, "", "", function(child) {
          return func.call(context, child, count++);
        });
        return result;
      }
      function countChildren(children) {
        var n4 = 0;
        mapChildren(children, function() {
          n4++;
        });
        return n4;
      }
      function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
          forEachFunc.apply(this, arguments);
        }, forEachContext);
      }
      function toArray(children) {
        return mapChildren(children, function(child) {
          return child;
        }) || [];
      }
      function onlyChild(children) {
        if (!isValidElement(children)) {
          throw new Error("React.Children.only expected to receive a single React element child.");
        }
        return children;
      }
      function createContext(defaultValue) {
        var context = {
          $$typeof: REACT_CONTEXT_TYPE,
          _currentValue: defaultValue,
          _currentValue2: defaultValue,
          _threadCount: 0,
          Provider: null,
          Consumer: null,
          _defaultValue: null,
          _globalName: null
        };
        context.Provider = {
          $$typeof: REACT_PROVIDER_TYPE,
          _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        var hasWarnedAboutDisplayNameOnConsumer = false;
        {
          var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context
          };
          Object.defineProperties(Consumer, {
            Provider: {
              get: function() {
                if (!hasWarnedAboutUsingConsumerProvider) {
                  hasWarnedAboutUsingConsumerProvider = true;
                  error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                }
                return context.Provider;
              },
              set: function(_Provider) {
                context.Provider = _Provider;
              }
            },
            _currentValue: {
              get: function() {
                return context._currentValue;
              },
              set: function(_currentValue) {
                context._currentValue = _currentValue;
              }
            },
            _currentValue2: {
              get: function() {
                return context._currentValue2;
              },
              set: function(_currentValue2) {
                context._currentValue2 = _currentValue2;
              }
            },
            _threadCount: {
              get: function() {
                return context._threadCount;
              },
              set: function(_threadCount) {
                context._threadCount = _threadCount;
              }
            },
            Consumer: {
              get: function() {
                if (!hasWarnedAboutUsingNestedContextConsumers) {
                  hasWarnedAboutUsingNestedContextConsumers = true;
                  error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
                return context.Consumer;
              }
            },
            displayName: {
              get: function() {
                return context.displayName;
              },
              set: function(displayName) {
                if (!hasWarnedAboutDisplayNameOnConsumer) {
                  warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                  hasWarnedAboutDisplayNameOnConsumer = true;
                }
              }
            }
          });
          context.Consumer = Consumer;
        }
        {
          context._currentRenderer = null;
          context._currentRenderer2 = null;
        }
        return context;
      }
      var Uninitialized = -1;
      var Pending = 0;
      var Resolved = 1;
      var Rejected = 2;
      function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
          var ctor = payload._result;
          var thenable = ctor();
          thenable.then(function(moduleObject2) {
            if (payload._status === Pending || payload._status === Uninitialized) {
              var resolved = payload;
              resolved._status = Resolved;
              resolved._result = moduleObject2;
            }
          }, function(error2) {
            if (payload._status === Pending || payload._status === Uninitialized) {
              var rejected = payload;
              rejected._status = Rejected;
              rejected._result = error2;
            }
          });
          if (payload._status === Uninitialized) {
            var pending = payload;
            pending._status = Pending;
            pending._result = thenable;
          }
        }
        if (payload._status === Resolved) {
          var moduleObject = payload._result;
          {
            if (moduleObject === undefined) {
              error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
            }
          }
          {
            if (!("default" in moduleObject)) {
              error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
            }
          }
          return moduleObject.default;
        } else {
          throw payload._result;
        }
      }
      function lazy(ctor) {
        var payload = {
          _status: Uninitialized,
          _result: ctor
        };
        var lazyType = {
          $$typeof: REACT_LAZY_TYPE,
          _payload: payload,
          _init: lazyInitializer
        };
        {
          var defaultProps;
          var propTypes;
          Object.defineProperties(lazyType, {
            defaultProps: {
              configurable: true,
              get: function() {
                return defaultProps;
              },
              set: function(newDefaultProps) {
                error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                defaultProps = newDefaultProps;
                Object.defineProperty(lazyType, "defaultProps", {
                  enumerable: true
                });
              }
            },
            propTypes: {
              configurable: true,
              get: function() {
                return propTypes;
              },
              set: function(newPropTypes) {
                error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                propTypes = newPropTypes;
                Object.defineProperty(lazyType, "propTypes", {
                  enumerable: true
                });
              }
            }
          });
        }
        return lazyType;
      }
      function forwardRef(render) {
        {
          if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
            error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
          } else if (typeof render !== "function") {
            error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
          } else {
            if (render.length !== 0 && render.length !== 2) {
              error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
            }
          }
          if (render != null) {
            if (render.defaultProps != null || render.propTypes != null) {
              error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
            }
          }
        }
        var elementType = {
          $$typeof: REACT_FORWARD_REF_TYPE,
          render
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name;
              if (!render.name && !render.displayName) {
                render.displayName = name;
              }
            }
          });
        }
        return elementType;
      }
      var REACT_MODULE_REFERENCE;
      {
        REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      }
      function isValidElementType(type) {
        if (typeof type === "string" || typeof type === "function") {
          return true;
        }
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
          return true;
        }
        if (typeof type === "object" && type !== null) {
          if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
            return true;
          }
        }
        return false;
      }
      function memo(type, compare) {
        {
          if (!isValidElementType(type)) {
            error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
          }
        }
        var elementType = {
          $$typeof: REACT_MEMO_TYPE,
          type,
          compare: compare === undefined ? null : compare
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name;
              if (!type.name && !type.displayName) {
                type.displayName = name;
              }
            }
          });
        }
        return elementType;
      }
      function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        {
          if (dispatcher === null) {
            error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
        }
        return dispatcher;
      }
      function useContext(Context) {
        var dispatcher = resolveDispatcher();
        {
          if (Context._context !== undefined) {
            var realContext = Context._context;
            if (realContext.Consumer === Context) {
              error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
            } else if (realContext.Provider === Context) {
              error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
            }
          }
        }
        return dispatcher.useContext(Context);
      }
      function useState(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
      }
      function useReducer(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
      }
      function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
      }
      function useEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, deps);
      }
      function useInsertionEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useInsertionEffect(create, deps);
      }
      function useLayoutEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, deps);
      }
      function useCallback(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
      }
      function useMemo(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, deps);
      }
      function useImperativeHandle(ref, create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, deps);
      }
      function useDebugValue(value, formatterFn) {
        {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDebugValue(value, formatterFn);
        }
      }
      function useTransition() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useTransition();
      }
      function useDeferredValue(value) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDeferredValue(value);
      }
      function useId() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useId();
      }
      function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
      }
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
        }
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix === undefined) {
            try {
              throw Error();
            } catch (x5) {
              var match = x5.stack.trim().match(/\n( *(at )?)/);
              prefix = match && match[1] || "";
            }
          }
          return "\n" + prefix + name;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap;
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) {
          return "";
        }
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== undefined) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x5) {
                control = x5;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x5) {
                control = x5;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x5) {
              control = x5;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split("\n");
            var controlLines = control.stack.split("\n");
            var s3 = sampleLines.length - 1;
            var c2 = controlLines.length - 1;
            while (s3 >= 1 && c2 >= 0 && sampleLines[s3] !== controlLines[c2]) {
              c2--;
            }
            for (;s3 >= 1 && c2 >= 0; s3--, c2--) {
              if (sampleLines[s3] !== controlLines[c2]) {
                if (s3 !== 1 || c2 !== 1) {
                  do {
                    s3--;
                    c2--;
                    if (c2 < 0 || sampleLines[s3] !== controlLines[c2]) {
                      var _frame = "\n" + sampleLines[s3].replace(" at new ", " at ");
                      if (fn.displayName && _frame.includes("<anonymous>")) {
                        _frame = _frame.replace("<anonymous>", fn.displayName);
                      }
                      {
                        if (typeof fn === "function") {
                          componentFrameCache.set(fn, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s3 >= 1 && c2 >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher$1.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        {
          if (typeof fn === "function") {
            componentFrameCache.set(fn, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn, false);
        }
      }
      function shouldConstruct(Component2) {
        var prototype = Component2.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) {
          return "";
        }
        if (typeof type === "function") {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type));
          }
        }
        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type);
        }
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch (x5) {
              }
            }
          }
        }
        return "";
      }
      var loggedTypeFailures = {};
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes(typeSpecs, values, location, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = undefined;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }
      function setCurrentlyValidatingElement$1(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            setExtraStackFrame(stack);
          } else {
            setExtraStackFrame(null);
          }
        }
      }
      var propTypesMisspellWarningShown;
      {
        propTypesMisspellWarningShown = false;
      }
      function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
          var name = getComponentNameFromType(ReactCurrentOwner.current.type);
          if (name) {
            return "\n\nCheck the render method of `" + name + "`.";
          }
        }
        return "";
      }
      function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
          var fileName = source.fileName.replace(/^.*[\\\/]/, "");
          var lineNumber = source.lineNumber;
          return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
        }
        return "";
      }
      function getSourceInfoErrorAddendumForProps(elementProps) {
        if (elementProps !== null && elementProps !== undefined) {
          return getSourceInfoErrorAddendum(elementProps.__source);
        }
        return "";
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
          var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
          if (parentName) {
            info = "\n\nCheck the top-level render call using <" + parentName + ">.";
          }
        }
        return info;
      }
      function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) {
          return;
        }
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        var childOwner = "";
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
          childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        }
        {
          setCurrentlyValidatingElement$1(element);
          error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
          setCurrentlyValidatingElement$1(null);
        }
      }
      function validateChildKeys(node, parentType) {
        if (typeof node !== "object") {
          return;
        }
        if (isArray(node)) {
          for (var i = 0;i < node.length; i++) {
            var child = node[i];
            if (isValidElement(child)) {
              validateExplicitKey(child, parentType);
            }
          }
        } else if (isValidElement(node)) {
          if (node._store) {
            node._store.validated = true;
          }
        } else if (node) {
          var iteratorFn = getIteratorFn(node);
          if (typeof iteratorFn === "function") {
            if (iteratorFn !== node.entries) {
              var iterator = iteratorFn.call(node);
              var step;
              while (!(step = iterator.next()).done) {
                if (isValidElement(step.value)) {
                  validateExplicitKey(step.value, parentType);
                }
              }
            }
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type === null || type === undefined || typeof type === "string") {
            return;
          }
          var propTypes;
          if (typeof type === "function") {
            propTypes = type.propTypes;
          } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
            propTypes = type.propTypes;
          } else {
            return;
          }
          if (propTypes) {
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
          } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true;
            var _name = getComponentNameFromType(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
            error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
          }
        }
      }
      function validateFragmentProps(fragment) {
        {
          var keys = Object.keys(fragment.props);
          for (var i = 0;i < keys.length; i++) {
            var key = keys[i];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
              setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error("Invalid attribute `ref` supplied to `React.Fragment`.");
            setCurrentlyValidatingElement$1(null);
          }
        }
      }
      function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type);
        if (!validType) {
          var info = "";
          if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
            info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
          }
          var sourceInfo = getSourceInfoErrorAddendumForProps(props);
          if (sourceInfo) {
            info += sourceInfo;
          } else {
            info += getDeclarationErrorAddendum();
          }
          var typeString;
          if (type === null) {
            typeString = "null";
          } else if (isArray(type)) {
            typeString = "array";
          } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
            typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
            info = " Did you accidentally export a JSX literal instead of a component?";
          } else {
            typeString = typeof type;
          }
          {
            error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
          }
        }
        var element = createElement.apply(this, arguments);
        if (element == null) {
          return element;
        }
        if (validType) {
          for (var i = 2;i < arguments.length; i++) {
            validateChildKeys(arguments[i], type);
          }
        }
        if (type === REACT_FRAGMENT_TYPE) {
          validateFragmentProps(element);
        } else {
          validatePropTypes(element);
        }
        return element;
      }
      var didWarnAboutDeprecatedCreateFactory = false;
      function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        {
          if (!didWarnAboutDeprecatedCreateFactory) {
            didWarnAboutDeprecatedCreateFactory = true;
            warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
          }
          Object.defineProperty(validatedFactory, "type", {
            enumerable: false,
            get: function() {
              warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
              Object.defineProperty(this, "type", {
                value: type
              });
              return type;
            }
          });
        }
        return validatedFactory;
      }
      function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);
        for (var i = 2;i < arguments.length; i++) {
          validateChildKeys(arguments[i], newElement.type);
        }
        validatePropTypes(newElement);
        return newElement;
      }
      function startTransition(scope, options) {
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = {};
        var currentTransition = ReactCurrentBatchConfig.transition;
        {
          ReactCurrentBatchConfig.transition._updatedFibers = new Set;
        }
        try {
          scope();
        } finally {
          ReactCurrentBatchConfig.transition = prevTransition;
          {
            if (prevTransition === null && currentTransition._updatedFibers) {
              var updatedFibersCount = currentTransition._updatedFibers.size;
              if (updatedFibersCount > 10) {
                warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
              }
              currentTransition._updatedFibers.clear();
            }
          }
        }
      }
      var didWarnAboutMessageChannel = false;
      var enqueueTaskImpl = null;
      function enqueueTask(task) {
        if (enqueueTaskImpl === null) {
          try {
            var requireString = ("require" + Math.random()).slice(0, 7);
            var nodeRequire = module && module[requireString];
            enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
          } catch (_err) {
            enqueueTaskImpl = function(callback) {
              {
                if (didWarnAboutMessageChannel === false) {
                  didWarnAboutMessageChannel = true;
                  if (typeof MessageChannel === "undefined") {
                    error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                  }
                }
              }
              var channel = new MessageChannel;
              channel.port1.onmessage = callback;
              channel.port2.postMessage(undefined);
            };
          }
        }
        return enqueueTaskImpl(task);
      }
      var actScopeDepth = 0;
      var didWarnNoAwaitAct = false;
      function act(callback) {
        {
          var prevActScopeDepth = actScopeDepth;
          actScopeDepth++;
          if (ReactCurrentActQueue.current === null) {
            ReactCurrentActQueue.current = [];
          }
          var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
          var result;
          try {
            ReactCurrentActQueue.isBatchingLegacy = true;
            result = callback();
            if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                flushActQueue(queue);
              }
            }
          } catch (error2) {
            popActScope(prevActScopeDepth);
            throw error2;
          } finally {
            ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
          }
          if (result !== null && typeof result === "object" && typeof result.then === "function") {
            var thenableResult = result;
            var wasAwaited = false;
            var thenable = {
              then: function(resolve, reject) {
                wasAwaited = true;
                thenableResult.then(function(returnValue2) {
                  popActScope(prevActScopeDepth);
                  if (actScopeDepth === 0) {
                    recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                  } else {
                    resolve(returnValue2);
                  }
                }, function(error2) {
                  popActScope(prevActScopeDepth);
                  reject(error2);
                });
              }
            };
            {
              if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                Promise.resolve().then(function() {
                }).then(function() {
                  if (!wasAwaited) {
                    didWarnNoAwaitAct = true;
                    error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                  }
                });
              }
            }
            return thenable;
          } else {
            var returnValue = result;
            popActScope(prevActScopeDepth);
            if (actScopeDepth === 0) {
              var _queue = ReactCurrentActQueue.current;
              if (_queue !== null) {
                flushActQueue(_queue);
                ReactCurrentActQueue.current = null;
              }
              var _thenable = {
                then: function(resolve, reject) {
                  if (ReactCurrentActQueue.current === null) {
                    ReactCurrentActQueue.current = [];
                    recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                  } else {
                    resolve(returnValue);
                  }
                }
              };
              return _thenable;
            } else {
              var _thenable2 = {
                then: function(resolve, reject) {
                  resolve(returnValue);
                }
              };
              return _thenable2;
            }
          }
        }
      }
      function popActScope(prevActScopeDepth) {
        {
          if (prevActScopeDepth !== actScopeDepth - 1) {
            error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
          }
          actScopeDepth = prevActScopeDepth;
        }
      }
      function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
        {
          var queue = ReactCurrentActQueue.current;
          if (queue !== null) {
            try {
              flushActQueue(queue);
              enqueueTask(function() {
                if (queue.length === 0) {
                  ReactCurrentActQueue.current = null;
                  resolve(returnValue);
                } else {
                  recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                }
              });
            } catch (error2) {
              reject(error2);
            }
          } else {
            resolve(returnValue);
          }
        }
      }
      var isFlushing = false;
      function flushActQueue(queue) {
        {
          if (!isFlushing) {
            isFlushing = true;
            var i = 0;
            try {
              for (;i < queue.length; i++) {
                var callback = queue[i];
                do {
                  callback = callback(true);
                } while (callback !== null);
              }
              queue.length = 0;
            } catch (error2) {
              queue = queue.slice(i + 1);
              throw error2;
            } finally {
              isFlushing = false;
            }
          }
        }
      }
      var createElement$1 = createElementWithValidation;
      var cloneElement$1 = cloneElementWithValidation;
      var createFactory = createFactoryWithValidation;
      var Children = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray,
        only: onlyChild
      };
      exports.Children = Children;
      exports.Component = Component;
      exports.Fragment = REACT_FRAGMENT_TYPE;
      exports.Profiler = REACT_PROFILER_TYPE;
      exports.PureComponent = PureComponent;
      exports.StrictMode = REACT_STRICT_MODE_TYPE;
      exports.Suspense = REACT_SUSPENSE_TYPE;
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
      exports.cloneElement = cloneElement$1;
      exports.createContext = createContext;
      exports.createElement = createElement$1;
      exports.createFactory = createFactory;
      exports.createRef = createRef;
      exports.forwardRef = forwardRef;
      exports.isValidElement = isValidElement;
      exports.lazy = lazy;
      exports.memo = memo;
      exports.startTransition = startTransition;
      exports.unstable_act = act;
      exports.useCallback = useCallback;
      exports.useContext = useContext;
      exports.useDebugValue = useDebugValue;
      exports.useDeferredValue = useDeferredValue;
      exports.useEffect = useEffect;
      exports.useId = useId;
      exports.useImperativeHandle = useImperativeHandle;
      exports.useInsertionEffect = useInsertionEffect;
      exports.useLayoutEffect = useLayoutEffect;
      exports.useMemo = useMemo;
      exports.useReducer = useReducer;
      exports.useRef = useRef;
      exports.useState = useState;
      exports.useSyncExternalStore = useSyncExternalStore;
      exports.useTransition = useTransition;
      exports.version = ReactVersion;
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error);
      }
    })();
  }
});
var require_react = __commonJS((exports, module) => {
  var react_development = __toESM(require_react_development(), 1);
  if (false) {
  } else {
    module.exports = react_development;
  }
});
var require_scheduler_development = __commonJS((exports) => {
  if (true) {
    (function() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error);
      }
      var enableSchedulerDebugging = false;
      var enableProfiling = false;
      var frameYieldMs = 5;
      function push(heap, node) {
        var index = heap.length;
        heap.push(node);
        siftUp(heap, node, index);
      }
      function peek(heap) {
        return heap.length === 0 ? null : heap[0];
      }
      function pop(heap) {
        if (heap.length === 0) {
          return null;
        }
        var first = heap[0];
        var last = heap.pop();
        if (last !== first) {
          heap[0] = last;
          siftDown(heap, last, 0);
        }
        return first;
      }
      function siftUp(heap, node, i) {
        var index = i;
        while (index > 0) {
          var parentIndex = index - 1 >>> 1;
          var parent = heap[parentIndex];
          if (compare(parent, node) > 0) {
            heap[parentIndex] = node;
            heap[index] = parent;
            index = parentIndex;
          } else {
            return;
          }
        }
      }
      function siftDown(heap, node, i) {
        var index = i;
        var length = heap.length;
        var halfLength = length >>> 1;
        while (index < halfLength) {
          var leftIndex = (index + 1) * 2 - 1;
          var left = heap[leftIndex];
          var rightIndex = leftIndex + 1;
          var right = heap[rightIndex];
          if (compare(left, node) < 0) {
            if (rightIndex < length && compare(right, left) < 0) {
              heap[index] = right;
              heap[rightIndex] = node;
              index = rightIndex;
            } else {
              heap[index] = left;
              heap[leftIndex] = node;
              index = leftIndex;
            }
          } else if (rightIndex < length && compare(right, node) < 0) {
            heap[index] = right;
            heap[rightIndex] = node;
            index = rightIndex;
          } else {
            return;
          }
        }
      }
      function compare(a2, b3) {
        var diff = a2.sortIndex - b3.sortIndex;
        return diff !== 0 ? diff : a2.id - b3.id;
      }
      var ImmediatePriority = 1;
      var UserBlockingPriority = 2;
      var NormalPriority = 3;
      var LowPriority = 4;
      var IdlePriority = 5;
      function markTaskErrored(task, ms) {
      }
      var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
      if (hasPerformanceNow) {
        var localPerformance = performance;
        exports.unstable_now = function() {
          return localPerformance.now();
        };
      } else {
        var localDate = Date;
        var initialTime = localDate.now();
        exports.unstable_now = function() {
          return localDate.now() - initialTime;
        };
      }
      var maxSigned31BitInt = 1073741823;
      var IMMEDIATE_PRIORITY_TIMEOUT = -1;
      var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
      var NORMAL_PRIORITY_TIMEOUT = 5000;
      var LOW_PRIORITY_TIMEOUT = 1e4;
      var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
      var taskQueue = [];
      var timerQueue = [];
      var taskIdCounter = 1;
      var currentTask = null;
      var currentPriorityLevel = NormalPriority;
      var isPerformingWork = false;
      var isHostCallbackScheduled = false;
      var isHostTimeoutScheduled = false;
      var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
      var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
      var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
      var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
      function advanceTimers(currentTime) {
        var timer = peek(timerQueue);
        while (timer !== null) {
          if (timer.callback === null) {
            pop(timerQueue);
          } else if (timer.startTime <= currentTime) {
            pop(timerQueue);
            timer.sortIndex = timer.expirationTime;
            push(taskQueue, timer);
          } else {
            return;
          }
          timer = peek(timerQueue);
        }
      }
      function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled) {
          if (peek(taskQueue) !== null) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
          }
        }
      }
      function flushWork(hasTimeRemaining, initialTime2) {
        isHostCallbackScheduled = false;
        if (isHostTimeoutScheduled) {
          isHostTimeoutScheduled = false;
          cancelHostTimeout();
        }
        isPerformingWork = true;
        var previousPriorityLevel = currentPriorityLevel;
        try {
          if (enableProfiling) {
            try {
              return workLoop(hasTimeRemaining, initialTime2);
            } catch (error) {
              if (currentTask !== null) {
                var currentTime = exports.unstable_now();
                markTaskErrored(currentTask, currentTime);
                currentTask.isQueued = false;
              }
              throw error;
            }
          } else {
            return workLoop(hasTimeRemaining, initialTime2);
          }
        } finally {
          currentTask = null;
          currentPriorityLevel = previousPriorityLevel;
          isPerformingWork = false;
        }
      }
      function workLoop(hasTimeRemaining, initialTime2) {
        var currentTime = initialTime2;
        advanceTimers(currentTime);
        currentTask = peek(taskQueue);
        while (currentTask !== null && !enableSchedulerDebugging) {
          if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
            break;
          }
          var callback = currentTask.callback;
          if (typeof callback === "function") {
            currentTask.callback = null;
            currentPriorityLevel = currentTask.priorityLevel;
            var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
            var continuationCallback = callback(didUserCallbackTimeout);
            currentTime = exports.unstable_now();
            if (typeof continuationCallback === "function") {
              currentTask.callback = continuationCallback;
            } else {
              if (currentTask === peek(taskQueue)) {
                pop(taskQueue);
              }
            }
            advanceTimers(currentTime);
          } else {
            pop(taskQueue);
          }
          currentTask = peek(taskQueue);
        }
        if (currentTask !== null) {
          return true;
        } else {
          var firstTimer = peek(timerQueue);
          if (firstTimer !== null) {
            requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
          }
          return false;
        }
      }
      function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch (priorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
          case LowPriority:
          case IdlePriority:
            break;
          default:
            priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }
      function unstable_next(eventHandler) {
        var priorityLevel;
        switch (currentPriorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
            priorityLevel = NormalPriority;
            break;
          default:
            priorityLevel = currentPriorityLevel;
            break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }
      function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = parentPriorityLevel;
          try {
            return callback.apply(this, arguments);
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        };
      }
      function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now();
        var startTime2;
        if (typeof options === "object" && options !== null) {
          var delay = options.delay;
          if (typeof delay === "number" && delay > 0) {
            startTime2 = currentTime + delay;
          } else {
            startTime2 = currentTime;
          }
        } else {
          startTime2 = currentTime;
        }
        var timeout;
        switch (priorityLevel) {
          case ImmediatePriority:
            timeout = IMMEDIATE_PRIORITY_TIMEOUT;
            break;
          case UserBlockingPriority:
            timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
            break;
          case IdlePriority:
            timeout = IDLE_PRIORITY_TIMEOUT;
            break;
          case LowPriority:
            timeout = LOW_PRIORITY_TIMEOUT;
            break;
          case NormalPriority:
          default:
            timeout = NORMAL_PRIORITY_TIMEOUT;
            break;
        }
        var expirationTime = startTime2 + timeout;
        var newTask = {
          id: taskIdCounter++,
          callback,
          priorityLevel,
          startTime: startTime2,
          expirationTime,
          sortIndex: -1
        };
        if (startTime2 > currentTime) {
          newTask.sortIndex = startTime2;
          push(timerQueue, newTask);
          if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
            if (isHostTimeoutScheduled) {
              cancelHostTimeout();
            } else {
              isHostTimeoutScheduled = true;
            }
            requestHostTimeout(handleTimeout, startTime2 - currentTime);
          }
        } else {
          newTask.sortIndex = expirationTime;
          push(taskQueue, newTask);
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        return newTask;
      }
      function unstable_pauseExecution() {
      }
      function unstable_continueExecution() {
        if (!isHostCallbackScheduled && !isPerformingWork) {
          isHostCallbackScheduled = true;
          requestHostCallback(flushWork);
        }
      }
      function unstable_getFirstCallbackNode() {
        return peek(taskQueue);
      }
      function unstable_cancelCallback(task) {
        task.callback = null;
      }
      function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
      }
      var isMessageLoopRunning = false;
      var scheduledHostCallback = null;
      var taskTimeoutID = -1;
      var frameInterval = frameYieldMs;
      var startTime = -1;
      function shouldYieldToHost() {
        var timeElapsed = exports.unstable_now() - startTime;
        if (timeElapsed < frameInterval) {
          return false;
        }
        return true;
      }
      function requestPaint() {
      }
      function forceFrameRate(fps) {
        if (fps < 0 || fps > 125) {
          console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
          return;
        }
        if (fps > 0) {
          frameInterval = Math.floor(1000 / fps);
        } else {
          frameInterval = frameYieldMs;
        }
      }
      var performWorkUntilDeadline = function() {
        if (scheduledHostCallback !== null) {
          var currentTime = exports.unstable_now();
          startTime = currentTime;
          var hasTimeRemaining = true;
          var hasMoreWork = true;
          try {
            hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
          } finally {
            if (hasMoreWork) {
              schedulePerformWorkUntilDeadline();
            } else {
              isMessageLoopRunning = false;
              scheduledHostCallback = null;
            }
          }
        } else {
          isMessageLoopRunning = false;
        }
      };
      var schedulePerformWorkUntilDeadline;
      if (typeof localSetImmediate === "function") {
        schedulePerformWorkUntilDeadline = function() {
          localSetImmediate(performWorkUntilDeadline);
        };
      } else if (typeof MessageChannel !== "undefined") {
        var channel = new MessageChannel;
        var port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        schedulePerformWorkUntilDeadline = function() {
          port.postMessage(null);
        };
      } else {
        schedulePerformWorkUntilDeadline = function() {
          localSetTimeout(performWorkUntilDeadline, 0);
        };
      }
      function requestHostCallback(callback) {
        scheduledHostCallback = callback;
        if (!isMessageLoopRunning) {
          isMessageLoopRunning = true;
          schedulePerformWorkUntilDeadline();
        }
      }
      function requestHostTimeout(callback, ms) {
        taskTimeoutID = localSetTimeout(function() {
          callback(exports.unstable_now());
        }, ms);
      }
      function cancelHostTimeout() {
        localClearTimeout(taskTimeoutID);
        taskTimeoutID = -1;
      }
      var unstable_requestPaint = requestPaint;
      var unstable_Profiling = null;
      exports.unstable_IdlePriority = IdlePriority;
      exports.unstable_ImmediatePriority = ImmediatePriority;
      exports.unstable_LowPriority = LowPriority;
      exports.unstable_NormalPriority = NormalPriority;
      exports.unstable_Profiling = unstable_Profiling;
      exports.unstable_UserBlockingPriority = UserBlockingPriority;
      exports.unstable_cancelCallback = unstable_cancelCallback;
      exports.unstable_continueExecution = unstable_continueExecution;
      exports.unstable_forceFrameRate = forceFrameRate;
      exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
      exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
      exports.unstable_next = unstable_next;
      exports.unstable_pauseExecution = unstable_pauseExecution;
      exports.unstable_requestPaint = unstable_requestPaint;
      exports.unstable_runWithPriority = unstable_runWithPriority;
      exports.unstable_scheduleCallback = unstable_scheduleCallback;
      exports.unstable_shouldYield = shouldYieldToHost;
      exports.unstable_wrapCallback = unstable_wrapCallback;
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error);
      }
    })();
  }
});
var require_scheduler = __commonJS((exports, module) => {
  var scheduler_development = __toESM(require_scheduler_development(), 1);
  if (false) {
  } else {
    module.exports = scheduler_development;
  }
});
var require_react_dom_development = __commonJS((exports) => {
  var React = __toESM(require_react(), 1);
  var Scheduler = __toESM(require_scheduler(), 1);
  if (true) {
    (function() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error);
      }
      var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      var suppressWarning = false;
      function setSuppressWarning(newSuppressWarning) {
        {
          suppressWarning = newSuppressWarning;
        }
      }
      function warn(format) {
        {
          if (!suppressWarning) {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1;_key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format, args);
          }
        }
      }
      function error(format) {
        {
          if (!suppressWarning) {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1;_key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var FunctionComponent = 0;
      var ClassComponent = 1;
      var IndeterminateComponent = 2;
      var HostRoot = 3;
      var HostPortal = 4;
      var HostComponent = 5;
      var HostText = 6;
      var Fragment = 7;
      var Mode = 8;
      var ContextConsumer = 9;
      var ContextProvider = 10;
      var ForwardRef = 11;
      var Profiler = 12;
      var SuspenseComponent = 13;
      var MemoComponent = 14;
      var SimpleMemoComponent = 15;
      var LazyComponent = 16;
      var IncompleteClassComponent = 17;
      var DehydratedFragment = 18;
      var SuspenseListComponent = 19;
      var ScopeComponent = 21;
      var OffscreenComponent = 22;
      var LegacyHiddenComponent = 23;
      var CacheComponent = 24;
      var TracingMarkerComponent = 25;
      var enableClientRenderFallbackOnTextMismatch = true;
      var enableNewReconciler = false;
      var enableLazyContextPropagation = false;
      var enableLegacyHidden = false;
      var enableSuspenseAvoidThisFallback = false;
      var disableCommentsAsDOMContainers = true;
      var enableCustomElementPropertySupport = false;
      var warnAboutStringRefs = false;
      var enableSchedulingProfiler = true;
      var enableProfilerTimer = true;
      var enableProfilerCommitHooks = true;
      var allNativeEvents = new Set;
      var registrationNameDependencies = {};
      var possibleRegistrationNames = {};
      function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies);
        registerDirectEvent(registrationName + "Capture", dependencies);
      }
      function registerDirectEvent(registrationName, dependencies) {
        {
          if (registrationNameDependencies[registrationName]) {
            error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
          }
        }
        registrationNameDependencies[registrationName] = dependencies;
        {
          var lowerCasedName = registrationName.toLowerCase();
          possibleRegistrationNames[lowerCasedName] = registrationName;
          if (registrationName === "onDoubleClick") {
            possibleRegistrationNames.ondblclick = registrationName;
          }
        }
        for (var i = 0;i < dependencies.length; i++) {
          allNativeEvents.add(dependencies[i]);
        }
      }
      var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
          var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        {
          try {
            testStringCoercion(value);
            return false;
          } catch (e2) {
            return true;
          }
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkAttributeStringCoercion(value, attributeName) {
        {
          if (willCoercionThrow(value)) {
            error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkKeyStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkPropStringCoercion(value, propName) {
        {
          if (willCoercionThrow(value)) {
            error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkCSSPropertyStringCoercion(value, propName) {
        {
          if (willCoercionThrow(value)) {
            error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkHtmlStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkFormFieldValueStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      var RESERVED = 0;
      var STRING = 1;
      var BOOLEANISH_STRING = 2;
      var BOOLEAN = 3;
      var OVERLOADED_BOOLEAN = 4;
      var NUMERIC = 5;
      var POSITIVE_NUMERIC = 6;
      var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
      var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
      var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
      var illegalAttributeNameCache = {};
      var validatedAttributeNameCache = {};
      function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
          return true;
        }
        if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
          return false;
        }
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
          validatedAttributeNameCache[attributeName] = true;
          return true;
        }
        illegalAttributeNameCache[attributeName] = true;
        {
          error("Invalid attribute name: `%s`", attributeName);
        }
        return false;
      }
      function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null) {
          return propertyInfo.type === RESERVED;
        }
        if (isCustomComponentTag) {
          return false;
        }
        if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
          return true;
        }
        return false;
      }
      function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED) {
          return false;
        }
        switch (typeof value) {
          case "function":
          case "symbol":
            return true;
          case "boolean": {
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              return !propertyInfo.acceptsBooleans;
            } else {
              var prefix2 = name.toLowerCase().slice(0, 5);
              return prefix2 !== "data-" && prefix2 !== "aria-";
            }
          }
          default:
            return false;
        }
      }
      function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
        if (value === null || typeof value === "undefined") {
          return true;
        }
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
          return true;
        }
        if (isCustomComponentTag) {
          return false;
        }
        if (propertyInfo !== null) {
          switch (propertyInfo.type) {
            case BOOLEAN:
              return !value;
            case OVERLOADED_BOOLEAN:
              return value === false;
            case NUMERIC:
              return isNaN(value);
            case POSITIVE_NUMERIC:
              return isNaN(value) || value < 1;
          }
        }
        return false;
      }
      function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
      }
      function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
        this.attributeName = attributeName;
        this.attributeNamespace = attributeNamespace;
        this.mustUseProperty = mustUseProperty;
        this.propertyName = name;
        this.type = type;
        this.sanitizeURL = sanitizeURL2;
        this.removeEmptyString = removeEmptyString;
      }
      var properties = {};
      var reservedProps = [
        "children",
        "dangerouslySetInnerHTML",
        "defaultValue",
        "defaultChecked",
        "innerHTML",
        "suppressContentEditableWarning",
        "suppressHydrationWarning",
        "style"
      ];
      reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
      });
      [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
      });
      ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
      });
      ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
      });
      [
        "allowFullScreen",
        "async",
        "autoFocus",
        "autoPlay",
        "controls",
        "default",
        "defer",
        "disabled",
        "disablePictureInPicture",
        "disableRemotePlayback",
        "formNoValidate",
        "hidden",
        "loop",
        "noModule",
        "noValidate",
        "open",
        "playsInline",
        "readOnly",
        "required",
        "reversed",
        "scoped",
        "seamless",
        "itemScope"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
      });
      [
        "checked",
        "multiple",
        "muted",
        "selected"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
      });
      [
        "capture",
        "download"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
      });
      [
        "cols",
        "rows",
        "size",
        "span"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
      });
      ["rowSpan", "start"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
      });
      var CAMELIZE = /[\-\:]([a-z])/g;
      var capitalize = function(token) {
        return token[1].toUpperCase();
      };
      [
        "accent-height",
        "alignment-baseline",
        "arabic-form",
        "baseline-shift",
        "cap-height",
        "clip-path",
        "clip-rule",
        "color-interpolation",
        "color-interpolation-filters",
        "color-profile",
        "color-rendering",
        "dominant-baseline",
        "enable-background",
        "fill-opacity",
        "fill-rule",
        "flood-color",
        "flood-opacity",
        "font-family",
        "font-size",
        "font-size-adjust",
        "font-stretch",
        "font-style",
        "font-variant",
        "font-weight",
        "glyph-name",
        "glyph-orientation-horizontal",
        "glyph-orientation-vertical",
        "horiz-adv-x",
        "horiz-origin-x",
        "image-rendering",
        "letter-spacing",
        "lighting-color",
        "marker-end",
        "marker-mid",
        "marker-start",
        "overline-position",
        "overline-thickness",
        "paint-order",
        "panose-1",
        "pointer-events",
        "rendering-intent",
        "shape-rendering",
        "stop-color",
        "stop-opacity",
        "strikethrough-position",
        "strikethrough-thickness",
        "stroke-dasharray",
        "stroke-dashoffset",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-opacity",
        "stroke-width",
        "text-anchor",
        "text-decoration",
        "text-rendering",
        "underline-position",
        "underline-thickness",
        "unicode-bidi",
        "unicode-range",
        "units-per-em",
        "v-alphabetic",
        "v-hanging",
        "v-ideographic",
        "v-mathematical",
        "vector-effect",
        "vert-adv-y",
        "vert-origin-x",
        "vert-origin-y",
        "word-spacing",
        "writing-mode",
        "xmlns:xlink",
        "x-height"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
      });
      [
        "xlink:actuate",
        "xlink:arcrole",
        "xlink:role",
        "xlink:show",
        "xlink:title",
        "xlink:type"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
      });
      [
        "xml:base",
        "xml:lang",
        "xml:space"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
      });
      ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
      });
      var xlinkHref = "xlinkHref";
      properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
      ["src", "href", "action", "formAction"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
      });
      var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
      var didWarn = false;
      function sanitizeURL(url) {
        {
          if (!didWarn && isJavaScriptProtocol.test(url)) {
            didWarn = true;
            error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
          }
        }
      }
      function getValueForProperty(node, name, expected, propertyInfo) {
        {
          if (propertyInfo.mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            return node[propertyName];
          } else {
            {
              checkAttributeStringCoercion(expected, name);
            }
            if (propertyInfo.sanitizeURL) {
              sanitizeURL("" + expected);
            }
            var attributeName = propertyInfo.attributeName;
            var stringValue = null;
            if (propertyInfo.type === OVERLOADED_BOOLEAN) {
              if (node.hasAttribute(attributeName)) {
                var value = node.getAttribute(attributeName);
                if (value === "") {
                  return true;
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return value;
                }
                if (value === "" + expected) {
                  return expected;
                }
                return value;
              }
            } else if (node.hasAttribute(attributeName)) {
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return node.getAttribute(attributeName);
              }
              if (propertyInfo.type === BOOLEAN) {
                return expected;
              }
              stringValue = node.getAttribute(attributeName);
            }
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
              return stringValue === null ? expected : stringValue;
            } else if (stringValue === "" + expected) {
              return expected;
            } else {
              return stringValue;
            }
          }
        }
      }
      function getValueForAttribute(node, name, expected, isCustomComponentTag) {
        {
          if (!isAttributeNameSafe(name)) {
            return;
          }
          if (!node.hasAttribute(name)) {
            return expected === undefined ? undefined : null;
          }
          var value = node.getAttribute(name);
          {
            checkAttributeStringCoercion(expected, name);
          }
          if (value === "" + expected) {
            return expected;
          }
          return value;
        }
      }
      function setValueForProperty(node, name, value, isCustomComponentTag) {
        var propertyInfo = getPropertyInfo(name);
        if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
          return;
        }
        if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
          value = null;
        }
        if (isCustomComponentTag || propertyInfo === null) {
          if (isAttributeNameSafe(name)) {
            var _attributeName = name;
            if (value === null) {
              node.removeAttribute(_attributeName);
            } else {
              {
                checkAttributeStringCoercion(value, name);
              }
              node.setAttribute(_attributeName, "" + value);
            }
          }
          return;
        }
        var mustUseProperty = propertyInfo.mustUseProperty;
        if (mustUseProperty) {
          var propertyName = propertyInfo.propertyName;
          if (value === null) {
            var type = propertyInfo.type;
            node[propertyName] = type === BOOLEAN ? false : "";
          } else {
            node[propertyName] = value;
          }
          return;
        }
        var { attributeName, attributeNamespace } = propertyInfo;
        if (value === null) {
          node.removeAttribute(attributeName);
        } else {
          var _type = propertyInfo.type;
          var attributeValue;
          if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
            attributeValue = "";
          } else {
            {
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
            }
            if (propertyInfo.sanitizeURL) {
              sanitizeURL(attributeValue.toString());
            }
          }
          if (attributeNamespace) {
            node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
          } else {
            node.setAttribute(attributeName, attributeValue);
          }
        }
      }
      var REACT_ELEMENT_TYPE = Symbol.for("react.element");
      var REACT_PORTAL_TYPE = Symbol.for("react.portal");
      var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
      var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
      var REACT_CONTEXT_TYPE = Symbol.for("react.context");
      var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
      var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
      var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
      var REACT_MEMO_TYPE = Symbol.for("react.memo");
      var REACT_LAZY_TYPE = Symbol.for("react.lazy");
      var REACT_SCOPE_TYPE = Symbol.for("react.scope");
      var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
      var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
      var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
      var REACT_CACHE_TYPE = Symbol.for("react.cache");
      var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var assign = Object.assign;
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix === undefined) {
            try {
              throw Error();
            } catch (x5) {
              var match = x5.stack.trim().match(/\n( *(at )?)/);
              prefix = match && match[1] || "";
            }
          }
          return "\n" + prefix + name;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap;
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) {
          return "";
        }
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== undefined) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher.current;
          ReactCurrentDispatcher.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x5) {
                control = x5;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x5) {
                control = x5;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x5) {
              control = x5;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split("\n");
            var controlLines = control.stack.split("\n");
            var s3 = sampleLines.length - 1;
            var c2 = controlLines.length - 1;
            while (s3 >= 1 && c2 >= 0 && sampleLines[s3] !== controlLines[c2]) {
              c2--;
            }
            for (;s3 >= 1 && c2 >= 0; s3--, c2--) {
              if (sampleLines[s3] !== controlLines[c2]) {
                if (s3 !== 1 || c2 !== 1) {
                  do {
                    s3--;
                    c2--;
                    if (c2 < 0 || sampleLines[s3] !== controlLines[c2]) {
                      var _frame = "\n" + sampleLines[s3].replace(" at new ", " at ");
                      if (fn.displayName && _frame.includes("<anonymous>")) {
                        _frame = _frame.replace("<anonymous>", fn.displayName);
                      }
                      {
                        if (typeof fn === "function") {
                          componentFrameCache.set(fn, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s3 >= 1 && c2 >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        {
          if (typeof fn === "function") {
            componentFrameCache.set(fn, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeClassComponentFrame(ctor, source, ownerFn) {
        {
          return describeNativeComponentFrame(ctor, true);
        }
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn, false);
        }
      }
      function shouldConstruct(Component2) {
        var prototype = Component2.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) {
          return "";
        }
        if (typeof type === "function") {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type));
          }
        }
        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type);
        }
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch (x5) {
              }
            }
          }
        }
        return "";
      }
      function describeFiber(fiber) {
        var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
        var source = fiber._debugSource;
        switch (fiber.tag) {
          case HostComponent:
            return describeBuiltInComponentFrame(fiber.type);
          case LazyComponent:
            return describeBuiltInComponentFrame("Lazy");
          case SuspenseComponent:
            return describeBuiltInComponentFrame("Suspense");
          case SuspenseListComponent:
            return describeBuiltInComponentFrame("SuspenseList");
          case FunctionComponent:
          case IndeterminateComponent:
          case SimpleMemoComponent:
            return describeFunctionComponentFrame(fiber.type);
          case ForwardRef:
            return describeFunctionComponentFrame(fiber.type.render);
          case ClassComponent:
            return describeClassComponentFrame(fiber.type);
          default:
            return "";
        }
      }
      function getStackByFiberInDevAndProd(workInProgress2) {
        try {
          var info = "";
          var node = workInProgress2;
          do {
            info += describeFiber(node);
            node = node.return;
          } while (node);
          return info;
        } catch (x5) {
          return "\nError generating stack: " + x5.message + "\n" + x5.stack;
        }
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) {
          return displayName;
        }
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === "number") {
            error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
          return type;
        }
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              if (outerName !== null) {
                return outerName;
              }
              return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch (x5) {
                return null;
              }
            }
          }
        }
        return null;
      }
      function getWrappedName$1(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || "";
        return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
      }
      function getContextName$1(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromFiber(fiber) {
        var { tag, type } = fiber;
        switch (tag) {
          case CacheComponent:
            return "Cache";
          case ContextConsumer:
            var context = type;
            return getContextName$1(context) + ".Consumer";
          case ContextProvider:
            var provider = type;
            return getContextName$1(provider._context) + ".Provider";
          case DehydratedFragment:
            return "DehydratedFragment";
          case ForwardRef:
            return getWrappedName$1(type, type.render, "ForwardRef");
          case Fragment:
            return "Fragment";
          case HostComponent:
            return type;
          case HostPortal:
            return "Portal";
          case HostRoot:
            return "Root";
          case HostText:
            return "Text";
          case LazyComponent:
            return getComponentNameFromType(type);
          case Mode:
            if (type === REACT_STRICT_MODE_TYPE) {
              return "StrictMode";
            }
            return "Mode";
          case OffscreenComponent:
            return "Offscreen";
          case Profiler:
            return "Profiler";
          case ScopeComponent:
            return "Scope";
          case SuspenseComponent:
            return "Suspense";
          case SuspenseListComponent:
            return "SuspenseList";
          case TracingMarkerComponent:
            return "TracingMarker";
          case ClassComponent:
          case FunctionComponent:
          case IncompleteClassComponent:
          case IndeterminateComponent:
          case MemoComponent:
          case SimpleMemoComponent:
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            break;
        }
        return null;
      }
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      var current = null;
      var isRendering = false;
      function getCurrentFiberOwnerNameInDevOrNull() {
        {
          if (current === null) {
            return null;
          }
          var owner = current._debugOwner;
          if (owner !== null && typeof owner !== "undefined") {
            return getComponentNameFromFiber(owner);
          }
        }
        return null;
      }
      function getCurrentFiberStackInDev() {
        {
          if (current === null) {
            return "";
          }
          return getStackByFiberInDevAndProd(current);
        }
      }
      function resetCurrentFiber() {
        {
          ReactDebugCurrentFrame.getCurrentStack = null;
          current = null;
          isRendering = false;
        }
      }
      function setCurrentFiber(fiber) {
        {
          ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
          current = fiber;
          isRendering = false;
        }
      }
      function getCurrentFiber() {
        {
          return current;
        }
      }
      function setIsRendering(rendering) {
        {
          isRendering = rendering;
        }
      }
      function toString(value) {
        return "" + value;
      }
      function getToStringValue(value) {
        switch (typeof value) {
          case "boolean":
          case "number":
          case "string":
          case "undefined":
            return value;
          case "object":
            {
              checkFormFieldValueStringCoercion(value);
            }
            return value;
          default:
            return "";
        }
      }
      var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
      };
      function checkControlledValueProps(tagName, props) {
        {
          if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
            error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
          }
          if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
            error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
          }
        }
      }
      function isCheckable(elem) {
        var type = elem.type;
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
      }
      function getTracker(node) {
        return node._valueTracker;
      }
      function detachTracker(node) {
        node._valueTracker = null;
      }
      function getValueFromNode(node) {
        var value = "";
        if (!node) {
          return value;
        }
        if (isCheckable(node)) {
          value = node.checked ? "true" : "false";
        } else {
          value = node.value;
        }
        return value;
      }
      function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? "checked" : "value";
        var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
        {
          checkFormFieldValueStringCoercion(node[valueField]);
        }
        var currentValue = "" + node[valueField];
        if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
          return;
        }
        var { get: get2, set: set2 } = descriptor;
        Object.defineProperty(node, valueField, {
          configurable: true,
          get: function() {
            return get2.call(this);
          },
          set: function(value) {
            {
              checkFormFieldValueStringCoercion(value);
            }
            currentValue = "" + value;
            set2.call(this, value);
          }
        });
        Object.defineProperty(node, valueField, {
          enumerable: descriptor.enumerable
        });
        var tracker = {
          getValue: function() {
            return currentValue;
          },
          setValue: function(value) {
            {
              checkFormFieldValueStringCoercion(value);
            }
            currentValue = "" + value;
          },
          stopTracking: function() {
            detachTracker(node);
            delete node[valueField];
          }
        };
        return tracker;
      }
      function track(node) {
        if (getTracker(node)) {
          return;
        }
        node._valueTracker = trackValueOnNode(node);
      }
      function updateValueIfChanged(node) {
        if (!node) {
          return false;
        }
        var tracker = getTracker(node);
        if (!tracker) {
          return true;
        }
        var lastValue = tracker.getValue();
        var nextValue = getValueFromNode(node);
        if (nextValue !== lastValue) {
          tracker.setValue(nextValue);
          return true;
        }
        return false;
      }
      function getActiveElement(doc) {
        doc = doc || (typeof document !== "undefined" ? document : undefined);
        if (typeof doc === "undefined") {
          return null;
        }
        try {
          return doc.activeElement || doc.body;
        } catch (e2) {
          return doc.body;
        }
      }
      var didWarnValueDefaultValue = false;
      var didWarnCheckedDefaultChecked = false;
      var didWarnControlledToUncontrolled = false;
      var didWarnUncontrolledToControlled = false;
      function isControlled(props) {
        var usesChecked = props.type === "checkbox" || props.type === "radio";
        return usesChecked ? props.checked != null : props.value != null;
      }
      function getHostProps(element, props) {
        var node = element;
        var checked = props.checked;
        var hostProps = assign({}, props, {
          defaultChecked: undefined,
          defaultValue: undefined,
          value: undefined,
          checked: checked != null ? checked : node._wrapperState.initialChecked
        });
        return hostProps;
      }
      function initWrapperState(element, props) {
        {
          checkControlledValueProps("input", props);
          if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
            error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
            didWarnCheckedDefaultChecked = true;
          }
          if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
            error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
            didWarnValueDefaultValue = true;
          }
        }
        var node = element;
        var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
        node._wrapperState = {
          initialChecked: props.checked != null ? props.checked : props.defaultChecked,
          initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
          controlled: isControlled(props)
        };
      }
      function updateChecked(element, props) {
        var node = element;
        var checked = props.checked;
        if (checked != null) {
          setValueForProperty(node, "checked", checked, false);
        }
      }
      function updateWrapper(element, props) {
        var node = element;
        {
          var controlled = isControlled(props);
          if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
            error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnUncontrolledToControlled = true;
          }
          if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
            error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnControlledToUncontrolled = true;
          }
        }
        updateChecked(element, props);
        var value = getToStringValue(props.value);
        var type = props.type;
        if (value != null) {
          if (type === "number") {
            if (value === 0 && node.value === "" || node.value != value) {
              node.value = toString(value);
            }
          } else if (node.value !== toString(value)) {
            node.value = toString(value);
          }
        } else if (type === "submit" || type === "reset") {
          node.removeAttribute("value");
          return;
        }
        {
          if (props.hasOwnProperty("value")) {
            setDefaultValue(node, props.type, value);
          } else if (props.hasOwnProperty("defaultValue")) {
            setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
          }
        }
        {
          if (props.checked == null && props.defaultChecked != null) {
            node.defaultChecked = !!props.defaultChecked;
          }
        }
      }
      function postMountWrapper(element, props, isHydrating2) {
        var node = element;
        if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
          var type = props.type;
          var isButton = type === "submit" || type === "reset";
          if (isButton && (props.value === undefined || props.value === null)) {
            return;
          }
          var initialValue = toString(node._wrapperState.initialValue);
          if (!isHydrating2) {
            {
              if (initialValue !== node.value) {
                node.value = initialValue;
              }
            }
          }
          {
            node.defaultValue = initialValue;
          }
        }
        var name = node.name;
        if (name !== "") {
          node.name = "";
        }
        {
          node.defaultChecked = !node.defaultChecked;
          node.defaultChecked = !!node._wrapperState.initialChecked;
        }
        if (name !== "") {
          node.name = name;
        }
      }
      function restoreControlledState(element, props) {
        var node = element;
        updateWrapper(node, props);
        updateNamedCousins(node, props);
      }
      function updateNamedCousins(rootNode, props) {
        var name = props.name;
        if (props.type === "radio" && name != null) {
          var queryRoot = rootNode;
          while (queryRoot.parentNode) {
            queryRoot = queryRoot.parentNode;
          }
          {
            checkAttributeStringCoercion(name, "name");
          }
          var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
          for (var i = 0;i < group.length; i++) {
            var otherNode = group[i];
            if (otherNode === rootNode || otherNode.form !== rootNode.form) {
              continue;
            }
            var otherProps = getFiberCurrentPropsFromNode(otherNode);
            if (!otherProps) {
              throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
            }
            updateValueIfChanged(otherNode);
            updateWrapper(otherNode, otherProps);
          }
        }
      }
      function setDefaultValue(node, type, value) {
        if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
          if (value == null) {
            node.defaultValue = toString(node._wrapperState.initialValue);
          } else if (node.defaultValue !== toString(value)) {
            node.defaultValue = toString(value);
          }
        }
      }
      var didWarnSelectedSetOnOption = false;
      var didWarnInvalidChild = false;
      var didWarnInvalidInnerHTML = false;
      function validateProps(element, props) {
        {
          if (props.value == null) {
            if (typeof props.children === "object" && props.children !== null) {
              React.Children.forEach(props.children, function(child) {
                if (child == null) {
                  return;
                }
                if (typeof child === "string" || typeof child === "number") {
                  return;
                }
                if (!didWarnInvalidChild) {
                  didWarnInvalidChild = true;
                  error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                }
              });
            } else if (props.dangerouslySetInnerHTML != null) {
              if (!didWarnInvalidInnerHTML) {
                didWarnInvalidInnerHTML = true;
                error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
              }
            }
          }
          if (props.selected != null && !didWarnSelectedSetOnOption) {
            error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
            didWarnSelectedSetOnOption = true;
          }
        }
      }
      function postMountWrapper$1(element, props) {
        if (props.value != null) {
          element.setAttribute("value", toString(getToStringValue(props.value)));
        }
      }
      var isArrayImpl = Array.isArray;
      function isArray(a2) {
        return isArrayImpl(a2);
      }
      var didWarnValueDefaultValue$1;
      {
        didWarnValueDefaultValue$1 = false;
      }
      function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        if (ownerName) {
          return "\n\nCheck the render method of `" + ownerName + "`.";
        }
        return "";
      }
      var valuePropNames = ["value", "defaultValue"];
      function checkSelectPropTypes(props) {
        {
          checkControlledValueProps("select", props);
          for (var i = 0;i < valuePropNames.length; i++) {
            var propName = valuePropNames[i];
            if (props[propName] == null) {
              continue;
            }
            var propNameIsArray = isArray(props[propName]);
            if (props.multiple && !propNameIsArray) {
              error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
            } else if (!props.multiple && propNameIsArray) {
              error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
            }
          }
        }
      }
      function updateOptions(node, multiple, propValue, setDefaultSelected) {
        var options2 = node.options;
        if (multiple) {
          var selectedValues = propValue;
          var selectedValue = {};
          for (var i = 0;i < selectedValues.length; i++) {
            selectedValue["$" + selectedValues[i]] = true;
          }
          for (var _i = 0;_i < options2.length; _i++) {
            var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
            if (options2[_i].selected !== selected) {
              options2[_i].selected = selected;
            }
            if (selected && setDefaultSelected) {
              options2[_i].defaultSelected = true;
            }
          }
        } else {
          var _selectedValue = toString(getToStringValue(propValue));
          var defaultSelected = null;
          for (var _i2 = 0;_i2 < options2.length; _i2++) {
            if (options2[_i2].value === _selectedValue) {
              options2[_i2].selected = true;
              if (setDefaultSelected) {
                options2[_i2].defaultSelected = true;
              }
              return;
            }
            if (defaultSelected === null && !options2[_i2].disabled) {
              defaultSelected = options2[_i2];
            }
          }
          if (defaultSelected !== null) {
            defaultSelected.selected = true;
          }
        }
      }
      function getHostProps$1(element, props) {
        return assign({}, props, {
          value: undefined
        });
      }
      function initWrapperState$1(element, props) {
        var node = element;
        {
          checkSelectPropTypes(props);
        }
        node._wrapperState = {
          wasMultiple: !!props.multiple
        };
        {
          if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
            error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
            didWarnValueDefaultValue$1 = true;
          }
        }
      }
      function postMountWrapper$2(element, props) {
        var node = element;
        node.multiple = !!props.multiple;
        var value = props.value;
        if (value != null) {
          updateOptions(node, !!props.multiple, value, false);
        } else if (props.defaultValue != null) {
          updateOptions(node, !!props.multiple, props.defaultValue, true);
        }
      }
      function postUpdateWrapper(element, props) {
        var node = element;
        var wasMultiple = node._wrapperState.wasMultiple;
        node._wrapperState.wasMultiple = !!props.multiple;
        var value = props.value;
        if (value != null) {
          updateOptions(node, !!props.multiple, value, false);
        } else if (wasMultiple !== !!props.multiple) {
          if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue, true);
          } else {
            updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
          }
        }
      }
      function restoreControlledState$1(element, props) {
        var node = element;
        var value = props.value;
        if (value != null) {
          updateOptions(node, !!props.multiple, value, false);
        }
      }
      var didWarnValDefaultVal = false;
      function getHostProps$2(element, props) {
        var node = element;
        if (props.dangerouslySetInnerHTML != null) {
          throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
        }
        var hostProps = assign({}, props, {
          value: undefined,
          defaultValue: undefined,
          children: toString(node._wrapperState.initialValue)
        });
        return hostProps;
      }
      function initWrapperState$2(element, props) {
        var node = element;
        {
          checkControlledValueProps("textarea", props);
          if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
            error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
            didWarnValDefaultVal = true;
          }
        }
        var initialValue = props.value;
        if (initialValue == null) {
          var { children, defaultValue } = props;
          if (children != null) {
            {
              error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
            }
            {
              if (defaultValue != null) {
                throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
              }
              if (isArray(children)) {
                if (children.length > 1) {
                  throw new Error("<textarea> can only have at most one child.");
                }
                children = children[0];
              }
              defaultValue = children;
            }
          }
          if (defaultValue == null) {
            defaultValue = "";
          }
          initialValue = defaultValue;
        }
        node._wrapperState = {
          initialValue: getToStringValue(initialValue)
        };
      }
      function updateWrapper$1(element, props) {
        var node = element;
        var value = getToStringValue(props.value);
        var defaultValue = getToStringValue(props.defaultValue);
        if (value != null) {
          var newValue = toString(value);
          if (newValue !== node.value) {
            node.value = newValue;
          }
          if (props.defaultValue == null && node.defaultValue !== newValue) {
            node.defaultValue = newValue;
          }
        }
        if (defaultValue != null) {
          node.defaultValue = toString(defaultValue);
        }
      }
      function postMountWrapper$3(element, props) {
        var node = element;
        var textContent = node.textContent;
        if (textContent === node._wrapperState.initialValue) {
          if (textContent !== "" && textContent !== null) {
            node.value = textContent;
          }
        }
      }
      function restoreControlledState$2(element, props) {
        updateWrapper$1(element, props);
      }
      var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
      var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
      var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
      function getIntrinsicNamespace(type) {
        switch (type) {
          case "svg":
            return SVG_NAMESPACE;
          case "math":
            return MATH_NAMESPACE;
          default:
            return HTML_NAMESPACE;
        }
      }
      function getChildNamespace(parentNamespace, type) {
        if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
          return getIntrinsicNamespace(type);
        }
        if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
          return HTML_NAMESPACE;
        }
        return parentNamespace;
      }
      var createMicrosoftUnsafeLocalFunction = function(func) {
        if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
          return function(arg0, arg1, arg2, arg3) {
            MSApp.execUnsafeLocalFunction(function() {
              return func(arg0, arg1, arg2, arg3);
            });
          };
        } else {
          return func;
        }
      };
      var reusableSVGContainer;
      var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
        if (node.namespaceURI === SVG_NAMESPACE) {
          if (!("innerHTML" in node)) {
            reusableSVGContainer = reusableSVGContainer || document.createElement("div");
            reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
            var svgNode = reusableSVGContainer.firstChild;
            while (node.firstChild) {
              node.removeChild(node.firstChild);
            }
            while (svgNode.firstChild) {
              node.appendChild(svgNode.firstChild);
            }
            return;
          }
        }
        node.innerHTML = html;
      });
      var ELEMENT_NODE = 1;
      var TEXT_NODE = 3;
      var COMMENT_NODE = 8;
      var DOCUMENT_NODE = 9;
      var DOCUMENT_FRAGMENT_NODE = 11;
      var setTextContent = function(node, text) {
        if (text) {
          var firstChild = node.firstChild;
          if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
            firstChild.nodeValue = text;
            return;
          }
        }
        node.textContent = text;
      };
      var shorthandToLonghand = {
        animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
        background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
        backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
        border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
        borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
        borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
        borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
        borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
        borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
        borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
        borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
        borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
        borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
        borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
        borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
        borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
        borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
        columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
        columns: ["columnCount", "columnWidth"],
        flex: ["flexBasis", "flexGrow", "flexShrink"],
        flexFlow: ["flexDirection", "flexWrap"],
        font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
        fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
        gap: ["columnGap", "rowGap"],
        grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
        gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
        gridColumn: ["gridColumnEnd", "gridColumnStart"],
        gridColumnGap: ["columnGap"],
        gridGap: ["columnGap", "rowGap"],
        gridRow: ["gridRowEnd", "gridRowStart"],
        gridRowGap: ["rowGap"],
        gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
        listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
        margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
        marker: ["markerEnd", "markerMid", "markerStart"],
        mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
        maskPosition: ["maskPositionX", "maskPositionY"],
        outline: ["outlineColor", "outlineStyle", "outlineWidth"],
        overflow: ["overflowX", "overflowY"],
        padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
        placeContent: ["alignContent", "justifyContent"],
        placeItems: ["alignItems", "justifyItems"],
        placeSelf: ["alignSelf", "justifySelf"],
        textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
        textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
        transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
        wordWrap: ["overflowWrap"]
      };
      var isUnitlessNumber = {
        animationIterationCount: true,
        aspectRatio: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
      };
      function prefixKey(prefix2, key) {
        return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
      }
      var prefixes = ["Webkit", "ms", "Moz", "O"];
      Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix2) {
          isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
        });
      });
      function dangerousStyleValue(name, value, isCustomProperty) {
        var isEmpty = value == null || typeof value === "boolean" || value === "";
        if (isEmpty) {
          return "";
        }
        if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
          return value + "px";
        }
        {
          checkCSSPropertyStringCoercion(value, name);
        }
        return ("" + value).trim();
      }
      var uppercasePattern = /([A-Z])/g;
      var msPattern = /^ms-/;
      function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
      }
      var warnValidStyle = function() {
      };
      {
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
        var msPattern$1 = /^-ms-/;
        var hyphenPattern = /-(.)/g;
        var badStyleValueWithSemicolonPattern = /;\s*$/;
        var warnedStyleNames = {};
        var warnedStyleValues = {};
        var warnedForNaNValue = false;
        var warnedForInfinityValue = false;
        var camelize = function(string) {
          return string.replace(hyphenPattern, function(_5, character) {
            return character.toUpperCase();
          });
        };
        var warnHyphenatedStyleName = function(name) {
          if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
            return;
          }
          warnedStyleNames[name] = true;
          error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")));
        };
        var warnBadVendoredStyleName = function(name) {
          if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
            return;
          }
          warnedStyleNames[name] = true;
          error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
        };
        var warnStyleValueWithSemicolon = function(name, value) {
          if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
            return;
          }
          warnedStyleValues[value] = true;
          error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
        };
        var warnStyleValueIsNaN = function(name, value) {
          if (warnedForNaNValue) {
            return;
          }
          warnedForNaNValue = true;
          error("`NaN` is an invalid value for the `%s` css style property.", name);
        };
        var warnStyleValueIsInfinity = function(name, value) {
          if (warnedForInfinityValue) {
            return;
          }
          warnedForInfinityValue = true;
          error("`Infinity` is an invalid value for the `%s` css style property.", name);
        };
        warnValidStyle = function(name, value) {
          if (name.indexOf("-") > -1) {
            warnHyphenatedStyleName(name);
          } else if (badVendoredStyleNamePattern.test(name)) {
            warnBadVendoredStyleName(name);
          } else if (badStyleValueWithSemicolonPattern.test(value)) {
            warnStyleValueWithSemicolon(name, value);
          }
          if (typeof value === "number") {
            if (isNaN(value)) {
              warnStyleValueIsNaN(name, value);
            } else if (!isFinite(value)) {
              warnStyleValueIsInfinity(name, value);
            }
          }
        };
      }
      var warnValidStyle$1 = warnValidStyle;
      function createDangerousStringForStyles(styles) {
        {
          var serialized = "";
          var delimiter = "";
          for (var styleName in styles) {
            if (!styles.hasOwnProperty(styleName)) {
              continue;
            }
            var styleValue = styles[styleName];
            if (styleValue != null) {
              var isCustomProperty = styleName.indexOf("--") === 0;
              serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
              serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
              delimiter = ";";
            }
          }
          return serialized || null;
        }
      }
      function setValueForStyles(node, styles) {
        var style2 = node.style;
        for (var styleName in styles) {
          if (!styles.hasOwnProperty(styleName)) {
            continue;
          }
          var isCustomProperty = styleName.indexOf("--") === 0;
          {
            if (!isCustomProperty) {
              warnValidStyle$1(styleName, styles[styleName]);
            }
          }
          var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
          if (styleName === "float") {
            styleName = "cssFloat";
          }
          if (isCustomProperty) {
            style2.setProperty(styleName, styleValue);
          } else {
            style2[styleName] = styleValue;
          }
        }
      }
      function isValueEmpty(value) {
        return value == null || typeof value === "boolean" || value === "";
      }
      function expandShorthandMap(styles) {
        var expanded = {};
        for (var key in styles) {
          var longhands = shorthandToLonghand[key] || [key];
          for (var i = 0;i < longhands.length; i++) {
            expanded[longhands[i]] = key;
          }
        }
        return expanded;
      }
      function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
        {
          if (!nextStyles) {
            return;
          }
          var expandedUpdates = expandShorthandMap(styleUpdates);
          var expandedStyles = expandShorthandMap(nextStyles);
          var warnedAbout = {};
          for (var key in expandedUpdates) {
            var originalKey = expandedUpdates[key];
            var correctOriginalKey = expandedStyles[key];
            if (correctOriginalKey && originalKey !== correctOriginalKey) {
              var warningKey = originalKey + "," + correctOriginalKey;
              if (warnedAbout[warningKey]) {
                continue;
              }
              warnedAbout[warningKey] = true;
              error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
            }
          }
        }
      }
      var omittedCloseTags = {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true
      };
      var voidElementTags = assign({
        menuitem: true
      }, omittedCloseTags);
      var HTML = "__html";
      function assertValidProps(tag, props) {
        if (!props) {
          return;
        }
        if (voidElementTags[tag]) {
          if (props.children != null || props.dangerouslySetInnerHTML != null) {
            throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
          }
        }
        if (props.dangerouslySetInnerHTML != null) {
          if (props.children != null) {
            throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          }
          if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
            throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
          }
        }
        {
          if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
            error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
          }
        }
        if (props.style != null && typeof props.style !== "object") {
          throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
        }
      }
      function isCustomComponent(tagName, props) {
        if (tagName.indexOf("-") === -1) {
          return typeof props.is === "string";
        }
        switch (tagName) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return false;
          default:
            return true;
        }
      }
      var possibleStandardNames = {
        accept: "accept",
        acceptcharset: "acceptCharset",
        "accept-charset": "acceptCharset",
        accesskey: "accessKey",
        action: "action",
        allowfullscreen: "allowFullScreen",
        alt: "alt",
        as: "as",
        async: "async",
        autocapitalize: "autoCapitalize",
        autocomplete: "autoComplete",
        autocorrect: "autoCorrect",
        autofocus: "autoFocus",
        autoplay: "autoPlay",
        autosave: "autoSave",
        capture: "capture",
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        challenge: "challenge",
        charset: "charSet",
        checked: "checked",
        children: "children",
        cite: "cite",
        class: "className",
        classid: "classID",
        classname: "className",
        cols: "cols",
        colspan: "colSpan",
        content: "content",
        contenteditable: "contentEditable",
        contextmenu: "contextMenu",
        controls: "controls",
        controlslist: "controlsList",
        coords: "coords",
        crossorigin: "crossOrigin",
        dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
        data: "data",
        datetime: "dateTime",
        default: "default",
        defaultchecked: "defaultChecked",
        defaultvalue: "defaultValue",
        defer: "defer",
        dir: "dir",
        disabled: "disabled",
        disablepictureinpicture: "disablePictureInPicture",
        disableremoteplayback: "disableRemotePlayback",
        download: "download",
        draggable: "draggable",
        enctype: "encType",
        enterkeyhint: "enterKeyHint",
        for: "htmlFor",
        form: "form",
        formmethod: "formMethod",
        formaction: "formAction",
        formenctype: "formEncType",
        formnovalidate: "formNoValidate",
        formtarget: "formTarget",
        frameborder: "frameBorder",
        headers: "headers",
        height: "height",
        hidden: "hidden",
        high: "high",
        href: "href",
        hreflang: "hrefLang",
        htmlfor: "htmlFor",
        httpequiv: "httpEquiv",
        "http-equiv": "httpEquiv",
        icon: "icon",
        id: "id",
        imagesizes: "imageSizes",
        imagesrcset: "imageSrcSet",
        innerhtml: "innerHTML",
        inputmode: "inputMode",
        integrity: "integrity",
        is: "is",
        itemid: "itemID",
        itemprop: "itemProp",
        itemref: "itemRef",
        itemscope: "itemScope",
        itemtype: "itemType",
        keyparams: "keyParams",
        keytype: "keyType",
        kind: "kind",
        label: "label",
        lang: "lang",
        list: "list",
        loop: "loop",
        low: "low",
        manifest: "manifest",
        marginwidth: "marginWidth",
        marginheight: "marginHeight",
        max: "max",
        maxlength: "maxLength",
        media: "media",
        mediagroup: "mediaGroup",
        method: "method",
        min: "min",
        minlength: "minLength",
        multiple: "multiple",
        muted: "muted",
        name: "name",
        nomodule: "noModule",
        nonce: "nonce",
        novalidate: "noValidate",
        open: "open",
        optimum: "optimum",
        pattern: "pattern",
        placeholder: "placeholder",
        playsinline: "playsInline",
        poster: "poster",
        preload: "preload",
        profile: "profile",
        radiogroup: "radioGroup",
        readonly: "readOnly",
        referrerpolicy: "referrerPolicy",
        rel: "rel",
        required: "required",
        reversed: "reversed",
        role: "role",
        rows: "rows",
        rowspan: "rowSpan",
        sandbox: "sandbox",
        scope: "scope",
        scoped: "scoped",
        scrolling: "scrolling",
        seamless: "seamless",
        selected: "selected",
        shape: "shape",
        size: "size",
        sizes: "sizes",
        span: "span",
        spellcheck: "spellCheck",
        src: "src",
        srcdoc: "srcDoc",
        srclang: "srcLang",
        srcset: "srcSet",
        start: "start",
        step: "step",
        style: "style",
        summary: "summary",
        tabindex: "tabIndex",
        target: "target",
        title: "title",
        type: "type",
        usemap: "useMap",
        value: "value",
        width: "width",
        wmode: "wmode",
        wrap: "wrap",
        about: "about",
        accentheight: "accentHeight",
        "accent-height": "accentHeight",
        accumulate: "accumulate",
        additive: "additive",
        alignmentbaseline: "alignmentBaseline",
        "alignment-baseline": "alignmentBaseline",
        allowreorder: "allowReorder",
        alphabetic: "alphabetic",
        amplitude: "amplitude",
        arabicform: "arabicForm",
        "arabic-form": "arabicForm",
        ascent: "ascent",
        attributename: "attributeName",
        attributetype: "attributeType",
        autoreverse: "autoReverse",
        azimuth: "azimuth",
        basefrequency: "baseFrequency",
        baselineshift: "baselineShift",
        "baseline-shift": "baselineShift",
        baseprofile: "baseProfile",
        bbox: "bbox",
        begin: "begin",
        bias: "bias",
        by: "by",
        calcmode: "calcMode",
        capheight: "capHeight",
        "cap-height": "capHeight",
        clip: "clip",
        clippath: "clipPath",
        "clip-path": "clipPath",
        clippathunits: "clipPathUnits",
        cliprule: "clipRule",
        "clip-rule": "clipRule",
        color: "color",
        colorinterpolation: "colorInterpolation",
        "color-interpolation": "colorInterpolation",
        colorinterpolationfilters: "colorInterpolationFilters",
        "color-interpolation-filters": "colorInterpolationFilters",
        colorprofile: "colorProfile",
        "color-profile": "colorProfile",
        colorrendering: "colorRendering",
        "color-rendering": "colorRendering",
        contentscripttype: "contentScriptType",
        contentstyletype: "contentStyleType",
        cursor: "cursor",
        cx: "cx",
        cy: "cy",
        d: "d",
        datatype: "datatype",
        decelerate: "decelerate",
        descent: "descent",
        diffuseconstant: "diffuseConstant",
        direction: "direction",
        display: "display",
        divisor: "divisor",
        dominantbaseline: "dominantBaseline",
        "dominant-baseline": "dominantBaseline",
        dur: "dur",
        dx: "dx",
        dy: "dy",
        edgemode: "edgeMode",
        elevation: "elevation",
        enablebackground: "enableBackground",
        "enable-background": "enableBackground",
        end: "end",
        exponent: "exponent",
        externalresourcesrequired: "externalResourcesRequired",
        fill: "fill",
        fillopacity: "fillOpacity",
        "fill-opacity": "fillOpacity",
        fillrule: "fillRule",
        "fill-rule": "fillRule",
        filter: "filter",
        filterres: "filterRes",
        filterunits: "filterUnits",
        floodopacity: "floodOpacity",
        "flood-opacity": "floodOpacity",
        floodcolor: "floodColor",
        "flood-color": "floodColor",
        focusable: "focusable",
        fontfamily: "fontFamily",
        "font-family": "fontFamily",
        fontsize: "fontSize",
        "font-size": "fontSize",
        fontsizeadjust: "fontSizeAdjust",
        "font-size-adjust": "fontSizeAdjust",
        fontstretch: "fontStretch",
        "font-stretch": "fontStretch",
        fontstyle: "fontStyle",
        "font-style": "fontStyle",
        fontvariant: "fontVariant",
        "font-variant": "fontVariant",
        fontweight: "fontWeight",
        "font-weight": "fontWeight",
        format: "format",
        from: "from",
        fx: "fx",
        fy: "fy",
        g1: "g1",
        g2: "g2",
        glyphname: "glyphName",
        "glyph-name": "glyphName",
        glyphorientationhorizontal: "glyphOrientationHorizontal",
        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
        glyphorientationvertical: "glyphOrientationVertical",
        "glyph-orientation-vertical": "glyphOrientationVertical",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        hanging: "hanging",
        horizadvx: "horizAdvX",
        "horiz-adv-x": "horizAdvX",
        horizoriginx: "horizOriginX",
        "horiz-origin-x": "horizOriginX",
        ideographic: "ideographic",
        imagerendering: "imageRendering",
        "image-rendering": "imageRendering",
        in2: "in2",
        in: "in",
        inlist: "inlist",
        intercept: "intercept",
        k1: "k1",
        k2: "k2",
        k3: "k3",
        k4: "k4",
        k: "k",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        kerning: "kerning",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        letterspacing: "letterSpacing",
        "letter-spacing": "letterSpacing",
        lightingcolor: "lightingColor",
        "lighting-color": "lightingColor",
        limitingconeangle: "limitingConeAngle",
        local: "local",
        markerend: "markerEnd",
        "marker-end": "markerEnd",
        markerheight: "markerHeight",
        markermid: "markerMid",
        "marker-mid": "markerMid",
        markerstart: "markerStart",
        "marker-start": "markerStart",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        mask: "mask",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        mathematical: "mathematical",
        mode: "mode",
        numoctaves: "numOctaves",
        offset: "offset",
        opacity: "opacity",
        operator: "operator",
        order: "order",
        orient: "orient",
        orientation: "orientation",
        origin: "origin",
        overflow: "overflow",
        overlineposition: "overlinePosition",
        "overline-position": "overlinePosition",
        overlinethickness: "overlineThickness",
        "overline-thickness": "overlineThickness",
        paintorder: "paintOrder",
        "paint-order": "paintOrder",
        panose1: "panose1",
        "panose-1": "panose1",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointerevents: "pointerEvents",
        "pointer-events": "pointerEvents",
        points: "points",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        prefix: "prefix",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        property: "property",
        r: "r",
        radius: "radius",
        refx: "refX",
        refy: "refY",
        renderingintent: "renderingIntent",
        "rendering-intent": "renderingIntent",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        resource: "resource",
        restart: "restart",
        result: "result",
        results: "results",
        rotate: "rotate",
        rx: "rx",
        ry: "ry",
        scale: "scale",
        security: "security",
        seed: "seed",
        shaperendering: "shapeRendering",
        "shape-rendering": "shapeRendering",
        slope: "slope",
        spacing: "spacing",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        speed: "speed",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stemh: "stemh",
        stemv: "stemv",
        stitchtiles: "stitchTiles",
        stopcolor: "stopColor",
        "stop-color": "stopColor",
        stopopacity: "stopOpacity",
        "stop-opacity": "stopOpacity",
        strikethroughposition: "strikethroughPosition",
        "strikethrough-position": "strikethroughPosition",
        strikethroughthickness: "strikethroughThickness",
        "strikethrough-thickness": "strikethroughThickness",
        string: "string",
        stroke: "stroke",
        strokedasharray: "strokeDasharray",
        "stroke-dasharray": "strokeDasharray",
        strokedashoffset: "strokeDashoffset",
        "stroke-dashoffset": "strokeDashoffset",
        strokelinecap: "strokeLinecap",
        "stroke-linecap": "strokeLinecap",
        strokelinejoin: "strokeLinejoin",
        "stroke-linejoin": "strokeLinejoin",
        strokemiterlimit: "strokeMiterlimit",
        "stroke-miterlimit": "strokeMiterlimit",
        strokewidth: "strokeWidth",
        "stroke-width": "strokeWidth",
        strokeopacity: "strokeOpacity",
        "stroke-opacity": "strokeOpacity",
        suppresscontenteditablewarning: "suppressContentEditableWarning",
        suppresshydrationwarning: "suppressHydrationWarning",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textanchor: "textAnchor",
        "text-anchor": "textAnchor",
        textdecoration: "textDecoration",
        "text-decoration": "textDecoration",
        textlength: "textLength",
        textrendering: "textRendering",
        "text-rendering": "textRendering",
        to: "to",
        transform: "transform",
        typeof: "typeof",
        u1: "u1",
        u2: "u2",
        underlineposition: "underlinePosition",
        "underline-position": "underlinePosition",
        underlinethickness: "underlineThickness",
        "underline-thickness": "underlineThickness",
        unicode: "unicode",
        unicodebidi: "unicodeBidi",
        "unicode-bidi": "unicodeBidi",
        unicoderange: "unicodeRange",
        "unicode-range": "unicodeRange",
        unitsperem: "unitsPerEm",
        "units-per-em": "unitsPerEm",
        unselectable: "unselectable",
        valphabetic: "vAlphabetic",
        "v-alphabetic": "vAlphabetic",
        values: "values",
        vectoreffect: "vectorEffect",
        "vector-effect": "vectorEffect",
        version: "version",
        vertadvy: "vertAdvY",
        "vert-adv-y": "vertAdvY",
        vertoriginx: "vertOriginX",
        "vert-origin-x": "vertOriginX",
        vertoriginy: "vertOriginY",
        "vert-origin-y": "vertOriginY",
        vhanging: "vHanging",
        "v-hanging": "vHanging",
        videographic: "vIdeographic",
        "v-ideographic": "vIdeographic",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        visibility: "visibility",
        vmathematical: "vMathematical",
        "v-mathematical": "vMathematical",
        vocab: "vocab",
        widths: "widths",
        wordspacing: "wordSpacing",
        "word-spacing": "wordSpacing",
        writingmode: "writingMode",
        "writing-mode": "writingMode",
        x1: "x1",
        x2: "x2",
        x: "x",
        xchannelselector: "xChannelSelector",
        xheight: "xHeight",
        "x-height": "xHeight",
        xlinkactuate: "xlinkActuate",
        "xlink:actuate": "xlinkActuate",
        xlinkarcrole: "xlinkArcrole",
        "xlink:arcrole": "xlinkArcrole",
        xlinkhref: "xlinkHref",
        "xlink:href": "xlinkHref",
        xlinkrole: "xlinkRole",
        "xlink:role": "xlinkRole",
        xlinkshow: "xlinkShow",
        "xlink:show": "xlinkShow",
        xlinktitle: "xlinkTitle",
        "xlink:title": "xlinkTitle",
        xlinktype: "xlinkType",
        "xlink:type": "xlinkType",
        xmlbase: "xmlBase",
        "xml:base": "xmlBase",
        xmllang: "xmlLang",
        "xml:lang": "xmlLang",
        xmlns: "xmlns",
        "xml:space": "xmlSpace",
        xmlnsxlink: "xmlnsXlink",
        "xmlns:xlink": "xmlnsXlink",
        xmlspace: "xmlSpace",
        y1: "y1",
        y2: "y2",
        y: "y",
        ychannelselector: "yChannelSelector",
        z: "z",
        zoomandpan: "zoomAndPan"
      };
      var ariaProperties = {
        "aria-current": 0,
        "aria-description": 0,
        "aria-details": 0,
        "aria-disabled": 0,
        "aria-hidden": 0,
        "aria-invalid": 0,
        "aria-keyshortcuts": 0,
        "aria-label": 0,
        "aria-roledescription": 0,
        "aria-autocomplete": 0,
        "aria-checked": 0,
        "aria-expanded": 0,
        "aria-haspopup": 0,
        "aria-level": 0,
        "aria-modal": 0,
        "aria-multiline": 0,
        "aria-multiselectable": 0,
        "aria-orientation": 0,
        "aria-placeholder": 0,
        "aria-pressed": 0,
        "aria-readonly": 0,
        "aria-required": 0,
        "aria-selected": 0,
        "aria-sort": 0,
        "aria-valuemax": 0,
        "aria-valuemin": 0,
        "aria-valuenow": 0,
        "aria-valuetext": 0,
        "aria-atomic": 0,
        "aria-busy": 0,
        "aria-live": 0,
        "aria-relevant": 0,
        "aria-dropeffect": 0,
        "aria-grabbed": 0,
        "aria-activedescendant": 0,
        "aria-colcount": 0,
        "aria-colindex": 0,
        "aria-colspan": 0,
        "aria-controls": 0,
        "aria-describedby": 0,
        "aria-errormessage": 0,
        "aria-flowto": 0,
        "aria-labelledby": 0,
        "aria-owns": 0,
        "aria-posinset": 0,
        "aria-rowcount": 0,
        "aria-rowindex": 0,
        "aria-rowspan": 0,
        "aria-setsize": 0
      };
      var warnedProperties = {};
      var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
      var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
      function validateProperty(tagName, name) {
        {
          if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
            return true;
          }
          if (rARIACamel.test(name)) {
            var ariaName = "aria-" + name.slice(4).toLowerCase();
            var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
            if (correctName == null) {
              error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
              warnedProperties[name] = true;
              return true;
            }
            if (name !== correctName) {
              error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
              warnedProperties[name] = true;
              return true;
            }
          }
          if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase();
            var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
            if (standardName == null) {
              warnedProperties[name] = true;
              return false;
            }
            if (name !== standardName) {
              error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
              warnedProperties[name] = true;
              return true;
            }
          }
        }
        return true;
      }
      function warnInvalidARIAProps(type, props) {
        {
          var invalidProps = [];
          for (var key in props) {
            var isValid = validateProperty(type, key);
            if (!isValid) {
              invalidProps.push(key);
            }
          }
          var unknownPropString = invalidProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          if (invalidProps.length === 1) {
            error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
          } else if (invalidProps.length > 1) {
            error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
          }
        }
      }
      function validateProperties(type, props) {
        if (isCustomComponent(type, props)) {
          return;
        }
        warnInvalidARIAProps(type, props);
      }
      var didWarnValueNull = false;
      function validateProperties$1(type, props) {
        {
          if (type !== "input" && type !== "textarea" && type !== "select") {
            return;
          }
          if (props != null && props.value === null && !didWarnValueNull) {
            didWarnValueNull = true;
            if (type === "select" && props.multiple) {
              error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
            } else {
              error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
            }
          }
        }
      }
      var validateProperty$1 = function() {
      };
      {
        var warnedProperties$1 = {};
        var EVENT_NAME_REGEX = /^on./;
        var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
        var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        validateProperty$1 = function(tagName, name, value, eventRegistry) {
          if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
            return true;
          }
          var lowerCasedName = name.toLowerCase();
          if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
            error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
            warnedProperties$1[name] = true;
            return true;
          }
          if (eventRegistry != null) {
            var { registrationNameDependencies: registrationNameDependencies2, possibleRegistrationNames: possibleRegistrationNames2 } = eventRegistry;
            if (registrationNameDependencies2.hasOwnProperty(name)) {
              return true;
            }
            var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
            if (registrationName != null) {
              error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (EVENT_NAME_REGEX.test(name)) {
              error("Unknown event handler property `%s`. It will be ignored.", name);
              warnedProperties$1[name] = true;
              return true;
            }
          } else if (EVENT_NAME_REGEX.test(name)) {
            if (INVALID_EVENT_NAME_REGEX.test(name)) {
              error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
            }
            warnedProperties$1[name] = true;
            return true;
          }
          if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
            return true;
          }
          if (lowerCasedName === "innerhtml") {
            error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
            warnedProperties$1[name] = true;
            return true;
          }
          if (lowerCasedName === "aria") {
            error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
            warnedProperties$1[name] = true;
            return true;
          }
          if (lowerCasedName === "is" && value !== null && value !== undefined && typeof value !== "string") {
            error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
            warnedProperties$1[name] = true;
            return true;
          }
          if (typeof value === "number" && isNaN(value)) {
            error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
            warnedProperties$1[name] = true;
            return true;
          }
          var propertyInfo = getPropertyInfo(name);
          var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
          if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name) {
              error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
              warnedProperties$1[name] = true;
              return true;
            }
          } else if (!isReserved && name !== lowerCasedName) {
            error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
            warnedProperties$1[name] = true;
            return true;
          }
          if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            if (value) {
              error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
            } else {
              error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
            }
            warnedProperties$1[name] = true;
            return true;
          }
          if (isReserved) {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            warnedProperties$1[name] = true;
            return false;
          }
          if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
            error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
            warnedProperties$1[name] = true;
            return true;
          }
          return true;
        };
      }
      var warnUnknownProperties = function(type, props, eventRegistry) {
        {
          var unknownProps = [];
          for (var key in props) {
            var isValid = validateProperty$1(type, key, props[key], eventRegistry);
            if (!isValid) {
              unknownProps.push(key);
            }
          }
          var unknownPropString = unknownProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          if (unknownProps.length === 1) {
            error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
          } else if (unknownProps.length > 1) {
            error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
          }
        }
      };
      function validateProperties$2(type, props, eventRegistry) {
        if (isCustomComponent(type, props)) {
          return;
        }
        warnUnknownProperties(type, props, eventRegistry);
      }
      var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
      var IS_NON_DELEGATED = 1 << 1;
      var IS_CAPTURE_PHASE = 1 << 2;
      var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
      var currentReplayingEvent = null;
      function setReplayingEvent(event) {
        {
          if (currentReplayingEvent !== null) {
            error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        currentReplayingEvent = event;
      }
      function resetReplayingEvent() {
        {
          if (currentReplayingEvent === null) {
            error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        currentReplayingEvent = null;
      }
      function isReplayingEvent(event) {
        return event === currentReplayingEvent;
      }
      function getEventTarget(nativeEvent) {
        var target = nativeEvent.target || nativeEvent.srcElement || window;
        if (target.correspondingUseElement) {
          target = target.correspondingUseElement;
        }
        return target.nodeType === TEXT_NODE ? target.parentNode : target;
      }
      var restoreImpl = null;
      var restoreTarget = null;
      var restoreQueue = null;
      function restoreStateOfTarget(target) {
        var internalInstance = getInstanceFromNode(target);
        if (!internalInstance) {
          return;
        }
        if (typeof restoreImpl !== "function") {
          throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
        }
        var stateNode = internalInstance.stateNode;
        if (stateNode) {
          var _props = getFiberCurrentPropsFromNode(stateNode);
          restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
        }
      }
      function setRestoreImplementation(impl) {
        restoreImpl = impl;
      }
      function enqueueStateRestore(target) {
        if (restoreTarget) {
          if (restoreQueue) {
            restoreQueue.push(target);
          } else {
            restoreQueue = [target];
          }
        } else {
          restoreTarget = target;
        }
      }
      function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
      }
      function restoreStateIfNeeded() {
        if (!restoreTarget) {
          return;
        }
        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target);
        if (queuedTargets) {
          for (var i = 0;i < queuedTargets.length; i++) {
            restoreStateOfTarget(queuedTargets[i]);
          }
        }
      }
      var batchedUpdatesImpl = function(fn, bookkeeping) {
        return fn(bookkeeping);
      };
      var flushSyncImpl = function() {
      };
      var isInsideEventHandler = false;
      function finishEventHandler() {
        var controlledComponentsHavePendingUpdates = needsStateRestore();
        if (controlledComponentsHavePendingUpdates) {
          flushSyncImpl();
          restoreStateIfNeeded();
        }
      }
      function batchedUpdates(fn, a2, b3) {
        if (isInsideEventHandler) {
          return fn(a2, b3);
        }
        isInsideEventHandler = true;
        try {
          return batchedUpdatesImpl(fn, a2, b3);
        } finally {
          isInsideEventHandler = false;
          finishEventHandler();
        }
      }
      function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl;
        flushSyncImpl = _flushSyncImpl;
      }
      function isInteractive(tag) {
        return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
      }
      function shouldPreventMouseEvent(name, type, props) {
        switch (name) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
          case "onMouseEnter":
            return !!(props.disabled && isInteractive(type));
          default:
            return false;
        }
      }
      function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (stateNode === null) {
          return null;
        }
        var props = getFiberCurrentPropsFromNode(stateNode);
        if (props === null) {
          return null;
        }
        var listener = props[registrationName];
        if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
          return null;
        }
        if (listener && typeof listener !== "function") {
          throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        }
        return listener;
      }
      var passiveBrowserEventsSupported = false;
      if (canUseDOM) {
        try {
          var options = {};
          Object.defineProperty(options, "passive", {
            get: function() {
              passiveBrowserEventsSupported = true;
            }
          });
          window.addEventListener("test", options, options);
          window.removeEventListener("test", options, options);
        } catch (e2) {
          passiveBrowserEventsSupported = false;
        }
      }
      function invokeGuardedCallbackProd(name, func, context, a2, b3, c2, d2, e2, f2) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        try {
          func.apply(context, funcArgs);
        } catch (error2) {
          this.onError(error2);
        }
      }
      var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
      {
        if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
          var fakeNode = document.createElement("react");
          invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a2, b3, c2, d2, e2, f2) {
            if (typeof document === "undefined" || document === null) {
              throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
            }
            var evt = document.createEvent("Event");
            var didCall = false;
            var didError = true;
            var windowEvent = window.event;
            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
            function restoreAfterDispatch() {
              fakeNode.removeEventListener(evtType, callCallback2, false);
              if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                window.event = windowEvent;
              }
            }
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            function callCallback2() {
              didCall = true;
              restoreAfterDispatch();
              func.apply(context, funcArgs);
              didError = false;
            }
            var error2;
            var didSetError = false;
            var isCrossOriginError = false;
            function handleWindowError(event) {
              error2 = event.error;
              didSetError = true;
              if (error2 === null && event.colno === 0 && event.lineno === 0) {
                isCrossOriginError = true;
              }
              if (event.defaultPrevented) {
                if (error2 != null && typeof error2 === "object") {
                  try {
                    error2._suppressLogging = true;
                  } catch (inner) {
                  }
                }
              }
            }
            var evtType = "react-" + (name ? name : "invokeguardedcallback");
            window.addEventListener("error", handleWindowError);
            fakeNode.addEventListener(evtType, callCallback2, false);
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);
            if (windowEventDescriptor) {
              Object.defineProperty(window, "event", windowEventDescriptor);
            }
            if (didCall && didError) {
              if (!didSetError) {
                error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
              } else if (isCrossOriginError) {
                error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
              }
              this.onError(error2);
            }
            window.removeEventListener("error", handleWindowError);
            if (!didCall) {
              restoreAfterDispatch();
              return invokeGuardedCallbackProd.apply(this, arguments);
            }
          };
        }
      }
      var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
      var hasError = false;
      var caughtError = null;
      var hasRethrowError = false;
      var rethrowError = null;
      var reporter = {
        onError: function(error2) {
          hasError = true;
          caughtError = error2;
        }
      };
      function invokeGuardedCallback(name, func, context, a2, b3, c2, d2, e2, f2) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl$1.apply(reporter, arguments);
      }
      function invokeGuardedCallbackAndCatchFirstError(name, func, context, a2, b3, c2, d2, e2, f2) {
        invokeGuardedCallback.apply(this, arguments);
        if (hasError) {
          var error2 = clearCaughtError();
          if (!hasRethrowError) {
            hasRethrowError = true;
            rethrowError = error2;
          }
        }
      }
      function rethrowCaughtError() {
        if (hasRethrowError) {
          var error2 = rethrowError;
          hasRethrowError = false;
          rethrowError = null;
          throw error2;
        }
      }
      function hasCaughtError() {
        return hasError;
      }
      function clearCaughtError() {
        if (hasError) {
          var error2 = caughtError;
          hasError = false;
          caughtError = null;
          return error2;
        } else {
          throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      function get(key) {
        return key._reactInternals;
      }
      function has(key) {
        return key._reactInternals !== undefined;
      }
      function set(key, value) {
        key._reactInternals = value;
      }
      var NoFlags = 0;
      var PerformedWork = 1;
      var Placement = 2;
      var Update = 4;
      var ChildDeletion = 16;
      var ContentReset = 32;
      var Callback = 64;
      var DidCapture = 128;
      var ForceClientRender = 256;
      var Ref = 512;
      var Snapshot = 1024;
      var Passive = 2048;
      var Hydrating = 4096;
      var Visibility = 8192;
      var StoreConsistency = 16384;
      var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
      var HostEffectMask = 32767;
      var Incomplete = 32768;
      var ShouldCapture = 65536;
      var ForceUpdateForLegacySuspense = 131072;
      var Forked = 1048576;
      var RefStatic = 2097152;
      var LayoutStatic = 4194304;
      var PassiveStatic = 8388608;
      var MountLayoutDev = 16777216;
      var MountPassiveDev = 33554432;
      var BeforeMutationMask = Update | Snapshot | 0;
      var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
      var LayoutMask = Update | Callback | Ref | Visibility;
      var PassiveMask = Passive | ChildDeletion;
      var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
      function getNearestMountedFiber(fiber) {
        var node = fiber;
        var nearestMounted = fiber;
        if (!fiber.alternate) {
          var nextNode = node;
          do {
            node = nextNode;
            if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
              nearestMounted = node.return;
            }
            nextNode = node.return;
          } while (nextNode);
        } else {
          while (node.return) {
            node = node.return;
          }
        }
        if (node.tag === HostRoot) {
          return nearestMounted;
        }
        return null;
      }
      function getSuspenseInstanceFromFiber(fiber) {
        if (fiber.tag === SuspenseComponent) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState === null) {
            var current2 = fiber.alternate;
            if (current2 !== null) {
              suspenseState = current2.memoizedState;
            }
          }
          if (suspenseState !== null) {
            return suspenseState.dehydrated;
          }
        }
        return null;
      }
      function getContainerFromFiber(fiber) {
        return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
      }
      function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
      }
      function isMounted(component) {
        {
          var owner = ReactCurrentOwner.current;
          if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;
            if (!instance._warnedAboutRefsInRender) {
              error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
            }
            instance._warnedAboutRefsInRender = true;
          }
        }
        var fiber = get(component);
        if (!fiber) {
          return false;
        }
        return getNearestMountedFiber(fiber) === fiber;
      }
      function assertIsMounted(fiber) {
        if (getNearestMountedFiber(fiber) !== fiber) {
          throw new Error("Unable to find node on an unmounted component.");
        }
      }
      function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
          var nearestMounted = getNearestMountedFiber(fiber);
          if (nearestMounted === null) {
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (nearestMounted !== fiber) {
            return null;
          }
          return fiber;
        }
        var a2 = fiber;
        var b3 = alternate;
        while (true) {
          var parentA = a2.return;
          if (parentA === null) {
            break;
          }
          var parentB = parentA.alternate;
          if (parentB === null) {
            var nextParent = parentA.return;
            if (nextParent !== null) {
              a2 = b3 = nextParent;
              continue;
            }
            break;
          }
          if (parentA.child === parentB.child) {
            var child = parentA.child;
            while (child) {
              if (child === a2) {
                assertIsMounted(parentA);
                return fiber;
              }
              if (child === b3) {
                assertIsMounted(parentA);
                return alternate;
              }
              child = child.sibling;
            }
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (a2.return !== b3.return) {
            a2 = parentA;
            b3 = parentB;
          } else {
            var didFindChild = false;
            var _child = parentA.child;
            while (_child) {
              if (_child === a2) {
                didFindChild = true;
                a2 = parentA;
                b3 = parentB;
                break;
              }
              if (_child === b3) {
                didFindChild = true;
                b3 = parentA;
                a2 = parentB;
                break;
              }
              _child = _child.sibling;
            }
            if (!didFindChild) {
              _child = parentB.child;
              while (_child) {
                if (_child === a2) {
                  didFindChild = true;
                  a2 = parentB;
                  b3 = parentA;
                  break;
                }
                if (_child === b3) {
                  didFindChild = true;
                  b3 = parentB;
                  a2 = parentA;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
              }
            }
          }
          if (a2.alternate !== b3) {
            throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        if (a2.tag !== HostRoot) {
          throw new Error("Unable to find node on an unmounted component.");
        }
        if (a2.stateNode.current === a2) {
          return fiber;
        }
        return alternate;
      }
      function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
      }
      function findCurrentHostFiberImpl(node) {
        if (node.tag === HostComponent || node.tag === HostText) {
          return node;
        }
        var child = node.child;
        while (child !== null) {
          var match = findCurrentHostFiberImpl(child);
          if (match !== null) {
            return match;
          }
          child = child.sibling;
        }
        return null;
      }
      function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
      }
      function findCurrentHostFiberWithNoPortalsImpl(node) {
        if (node.tag === HostComponent || node.tag === HostText) {
          return node;
        }
        var child = node.child;
        while (child !== null) {
          if (child.tag !== HostPortal) {
            var match = findCurrentHostFiberWithNoPortalsImpl(child);
            if (match !== null) {
              return match;
            }
          }
          child = child.sibling;
        }
        return null;
      }
      var scheduleCallback = Scheduler.unstable_scheduleCallback;
      var cancelCallback = Scheduler.unstable_cancelCallback;
      var shouldYield = Scheduler.unstable_shouldYield;
      var requestPaint = Scheduler.unstable_requestPaint;
      var now = Scheduler.unstable_now;
      var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
      var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
      var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
      var NormalPriority = Scheduler.unstable_NormalPriority;
      var LowPriority = Scheduler.unstable_LowPriority;
      var IdlePriority = Scheduler.unstable_IdlePriority;
      var unstable_yieldValue2 = Scheduler.unstable_yieldValue;
      var unstable_setDisableYieldValue2 = Scheduler.unstable_setDisableYieldValue;
      var rendererID = null;
      var injectedHook = null;
      var injectedProfilingHooks = null;
      var hasLoggedError = false;
      var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
      function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
          return false;
        }
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled) {
          return true;
        }
        if (!hook.supportsFiber) {
          {
            error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
          }
          return true;
        }
        try {
          if (enableSchedulingProfiler) {
            internals = assign({}, internals, {
              getLaneLabelMap,
              injectProfilingHooks
            });
          }
          rendererID = hook.inject(internals);
          injectedHook = hook;
        } catch (err) {
          {
            error("React instrumentation encountered an error: %s.", err);
          }
        }
        if (hook.checkDCE) {
          return true;
        } else {
          return false;
        }
      }
      function onScheduleRoot(root2, children) {
        {
          if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
            try {
              injectedHook.onScheduleFiberRoot(rendererID, root2, children);
            } catch (err) {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function onCommitRoot(root2, eventPriority) {
        if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
          try {
            var didError = (root2.current.flags & DidCapture) === DidCapture;
            if (enableProfilerTimer) {
              var schedulerPriority;
              switch (eventPriority) {
                case DiscreteEventPriority:
                  schedulerPriority = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriority = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriority = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriority = IdlePriority;
                  break;
                default:
                  schedulerPriority = NormalPriority;
                  break;
              }
              injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
            } else {
              injectedHook.onCommitFiberRoot(rendererID, root2, undefined, didError);
            }
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function onPostCommitRoot(root2) {
        if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
          try {
            injectedHook.onPostCommitFiberRoot(rendererID, root2);
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function onCommitUnmount(fiber) {
        if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
          try {
            injectedHook.onCommitFiberUnmount(rendererID, fiber);
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function setIsStrictModeForDevtools(newIsStrictMode) {
        {
          if (typeof unstable_yieldValue2 === "function") {
            unstable_setDisableYieldValue2(newIsStrictMode);
            setSuppressWarning(newIsStrictMode);
          }
          if (injectedHook && typeof injectedHook.setStrictMode === "function") {
            try {
              injectedHook.setStrictMode(rendererID, newIsStrictMode);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
      }
      function injectProfilingHooks(profilingHooks) {
        injectedProfilingHooks = profilingHooks;
      }
      function getLaneLabelMap() {
        {
          var map = new Map;
          var lane = 1;
          for (var index2 = 0;index2 < TotalLanes; index2++) {
            var label = getLabelForLane(lane);
            map.set(lane, label);
            lane *= 2;
          }
          return map;
        }
      }
      function markCommitStarted(lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
            injectedProfilingHooks.markCommitStarted(lanes);
          }
        }
      }
      function markCommitStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
            injectedProfilingHooks.markCommitStopped();
          }
        }
      }
      function markComponentRenderStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
            injectedProfilingHooks.markComponentRenderStarted(fiber);
          }
        }
      }
      function markComponentRenderStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
            injectedProfilingHooks.markComponentRenderStopped();
          }
        }
      }
      function markComponentPassiveEffectMountStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
            injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
          }
        }
      }
      function markComponentPassiveEffectMountStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
            injectedProfilingHooks.markComponentPassiveEffectMountStopped();
          }
        }
      }
      function markComponentPassiveEffectUnmountStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
            injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
          }
        }
      }
      function markComponentPassiveEffectUnmountStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
            injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
          }
        }
      }
      function markComponentLayoutEffectMountStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
            injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
          }
        }
      }
      function markComponentLayoutEffectMountStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
            injectedProfilingHooks.markComponentLayoutEffectMountStopped();
          }
        }
      }
      function markComponentLayoutEffectUnmountStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
            injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
          }
        }
      }
      function markComponentLayoutEffectUnmountStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
            injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
          }
        }
      }
      function markComponentErrored(fiber, thrownValue, lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
            injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
          }
        }
      }
      function markComponentSuspended(fiber, wakeable, lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
            injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
          }
        }
      }
      function markLayoutEffectsStarted(lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
            injectedProfilingHooks.markLayoutEffectsStarted(lanes);
          }
        }
      }
      function markLayoutEffectsStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
            injectedProfilingHooks.markLayoutEffectsStopped();
          }
        }
      }
      function markPassiveEffectsStarted(lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
            injectedProfilingHooks.markPassiveEffectsStarted(lanes);
          }
        }
      }
      function markPassiveEffectsStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
            injectedProfilingHooks.markPassiveEffectsStopped();
          }
        }
      }
      function markRenderStarted(lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
            injectedProfilingHooks.markRenderStarted(lanes);
          }
        }
      }
      function markRenderYielded() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
            injectedProfilingHooks.markRenderYielded();
          }
        }
      }
      function markRenderStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
            injectedProfilingHooks.markRenderStopped();
          }
        }
      }
      function markRenderScheduled(lane) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
            injectedProfilingHooks.markRenderScheduled(lane);
          }
        }
      }
      function markForceUpdateScheduled(fiber, lane) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
            injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
          }
        }
      }
      function markStateUpdateScheduled(fiber, lane) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
            injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
          }
        }
      }
      var NoMode = 0;
      var ConcurrentMode = 1;
      var ProfileMode = 2;
      var StrictLegacyMode = 8;
      var StrictEffectsMode = 16;
      var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
      var log = Math.log;
      var LN2 = Math.LN2;
      function clz32Fallback(x5) {
        var asUint = x5 >>> 0;
        if (asUint === 0) {
          return 32;
        }
        return 31 - (log(asUint) / LN2 | 0) | 0;
      }
      var TotalLanes = 31;
      var NoLanes = 0;
      var NoLane = 0;
      var SyncLane = 1;
      var InputContinuousHydrationLane = 2;
      var InputContinuousLane = 4;
      var DefaultHydrationLane = 8;
      var DefaultLane = 16;
      var TransitionHydrationLane = 32;
      var TransitionLanes = 4194240;
      var TransitionLane1 = 64;
      var TransitionLane2 = 128;
      var TransitionLane3 = 256;
      var TransitionLane4 = 512;
      var TransitionLane5 = 1024;
      var TransitionLane6 = 2048;
      var TransitionLane7 = 4096;
      var TransitionLane8 = 8192;
      var TransitionLane9 = 16384;
      var TransitionLane10 = 32768;
      var TransitionLane11 = 65536;
      var TransitionLane12 = 131072;
      var TransitionLane13 = 262144;
      var TransitionLane14 = 524288;
      var TransitionLane15 = 1048576;
      var TransitionLane16 = 2097152;
      var RetryLanes = 130023424;
      var RetryLane1 = 4194304;
      var RetryLane2 = 8388608;
      var RetryLane3 = 16777216;
      var RetryLane4 = 33554432;
      var RetryLane5 = 67108864;
      var SomeRetryLane = RetryLane1;
      var SelectiveHydrationLane = 134217728;
      var NonIdleLanes = 268435455;
      var IdleHydrationLane = 268435456;
      var IdleLane = 536870912;
      var OffscreenLane = 1073741824;
      function getLabelForLane(lane) {
        {
          if (lane & SyncLane) {
            return "Sync";
          }
          if (lane & InputContinuousHydrationLane) {
            return "InputContinuousHydration";
          }
          if (lane & InputContinuousLane) {
            return "InputContinuous";
          }
          if (lane & DefaultHydrationLane) {
            return "DefaultHydration";
          }
          if (lane & DefaultLane) {
            return "Default";
          }
          if (lane & TransitionHydrationLane) {
            return "TransitionHydration";
          }
          if (lane & TransitionLanes) {
            return "Transition";
          }
          if (lane & RetryLanes) {
            return "Retry";
          }
          if (lane & SelectiveHydrationLane) {
            return "SelectiveHydration";
          }
          if (lane & IdleHydrationLane) {
            return "IdleHydration";
          }
          if (lane & IdleLane) {
            return "Idle";
          }
          if (lane & OffscreenLane) {
            return "Offscreen";
          }
        }
      }
      var NoTimestamp = -1;
      var nextTransitionLane = TransitionLane1;
      var nextRetryLane = RetryLane1;
      function getHighestPriorityLanes(lanes) {
        switch (getHighestPriorityLane(lanes)) {
          case SyncLane:
            return SyncLane;
          case InputContinuousHydrationLane:
            return InputContinuousHydrationLane;
          case InputContinuousLane:
            return InputContinuousLane;
          case DefaultHydrationLane:
            return DefaultHydrationLane;
          case DefaultLane:
            return DefaultLane;
          case TransitionHydrationLane:
            return TransitionHydrationLane;
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
            return lanes & TransitionLanes;
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
          case RetryLane5:
            return lanes & RetryLanes;
          case SelectiveHydrationLane:
            return SelectiveHydrationLane;
          case IdleHydrationLane:
            return IdleHydrationLane;
          case IdleLane:
            return IdleLane;
          case OffscreenLane:
            return OffscreenLane;
          default:
            {
              error("Should have found matching lanes. This is a bug in React.");
            }
            return lanes;
        }
      }
      function getNextLanes(root2, wipLanes) {
        var pendingLanes = root2.pendingLanes;
        if (pendingLanes === NoLanes) {
          return NoLanes;
        }
        var nextLanes = NoLanes;
        var suspendedLanes = root2.suspendedLanes;
        var pingedLanes = root2.pingedLanes;
        var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
        if (nonIdlePendingLanes !== NoLanes) {
          var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
          if (nonIdleUnblockedLanes !== NoLanes) {
            nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
          } else {
            var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
            if (nonIdlePingedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
            }
          }
        } else {
          var unblockedLanes = pendingLanes & ~suspendedLanes;
          if (unblockedLanes !== NoLanes) {
            nextLanes = getHighestPriorityLanes(unblockedLanes);
          } else {
            if (pingedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(pingedLanes);
            }
          }
        }
        if (nextLanes === NoLanes) {
          return NoLanes;
        }
        if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
          var nextLane = getHighestPriorityLane(nextLanes);
          var wipLane = getHighestPriorityLane(wipLanes);
          if (nextLane >= wipLane || nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
            return wipLanes;
          }
        }
        if ((nextLanes & InputContinuousLane) !== NoLanes) {
          nextLanes |= pendingLanes & DefaultLane;
        }
        var entangledLanes = root2.entangledLanes;
        if (entangledLanes !== NoLanes) {
          var entanglements = root2.entanglements;
          var lanes = nextLanes & entangledLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            nextLanes |= entanglements[index2];
            lanes &= ~lane;
          }
        }
        return nextLanes;
      }
      function getMostRecentEventTime(root2, lanes) {
        var eventTimes = root2.eventTimes;
        var mostRecentEventTime = NoTimestamp;
        while (lanes > 0) {
          var index2 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index2;
          var eventTime = eventTimes[index2];
          if (eventTime > mostRecentEventTime) {
            mostRecentEventTime = eventTime;
          }
          lanes &= ~lane;
        }
        return mostRecentEventTime;
      }
      function computeExpirationTime(lane, currentTime) {
        switch (lane) {
          case SyncLane:
          case InputContinuousHydrationLane:
          case InputContinuousLane:
            return currentTime + 250;
          case DefaultHydrationLane:
          case DefaultLane:
          case TransitionHydrationLane:
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
            return currentTime + 5000;
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
          case RetryLane5:
            return NoTimestamp;
          case SelectiveHydrationLane:
          case IdleHydrationLane:
          case IdleLane:
          case OffscreenLane:
            return NoTimestamp;
          default:
            {
              error("Should have found matching lanes. This is a bug in React.");
            }
            return NoTimestamp;
        }
      }
      function markStarvedLanesAsExpired(root2, currentTime) {
        var pendingLanes = root2.pendingLanes;
        var suspendedLanes = root2.suspendedLanes;
        var pingedLanes = root2.pingedLanes;
        var expirationTimes = root2.expirationTimes;
        var lanes = pendingLanes;
        while (lanes > 0) {
          var index2 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index2;
          var expirationTime = expirationTimes[index2];
          if (expirationTime === NoTimestamp) {
            if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
              expirationTimes[index2] = computeExpirationTime(lane, currentTime);
            }
          } else if (expirationTime <= currentTime) {
            root2.expiredLanes |= lane;
          }
          lanes &= ~lane;
        }
      }
      function getHighestPriorityPendingLanes(root2) {
        return getHighestPriorityLanes(root2.pendingLanes);
      }
      function getLanesToRetrySynchronouslyOnError(root2) {
        var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
        if (everythingButOffscreen !== NoLanes) {
          return everythingButOffscreen;
        }
        if (everythingButOffscreen & OffscreenLane) {
          return OffscreenLane;
        }
        return NoLanes;
      }
      function includesSyncLane(lanes) {
        return (lanes & SyncLane) !== NoLanes;
      }
      function includesNonIdleWork(lanes) {
        return (lanes & NonIdleLanes) !== NoLanes;
      }
      function includesOnlyRetries(lanes) {
        return (lanes & RetryLanes) === lanes;
      }
      function includesOnlyNonUrgentLanes(lanes) {
        var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
        return (lanes & UrgentLanes) === NoLanes;
      }
      function includesOnlyTransitions(lanes) {
        return (lanes & TransitionLanes) === lanes;
      }
      function includesBlockingLane(root2, lanes) {
        var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
        return (lanes & SyncDefaultLanes) !== NoLanes;
      }
      function includesExpiredLane(root2, lanes) {
        return (lanes & root2.expiredLanes) !== NoLanes;
      }
      function isTransitionLane(lane) {
        return (lane & TransitionLanes) !== NoLanes;
      }
      function claimNextTransitionLane() {
        var lane = nextTransitionLane;
        nextTransitionLane <<= 1;
        if ((nextTransitionLane & TransitionLanes) === NoLanes) {
          nextTransitionLane = TransitionLane1;
        }
        return lane;
      }
      function claimNextRetryLane() {
        var lane = nextRetryLane;
        nextRetryLane <<= 1;
        if ((nextRetryLane & RetryLanes) === NoLanes) {
          nextRetryLane = RetryLane1;
        }
        return lane;
      }
      function getHighestPriorityLane(lanes) {
        return lanes & -lanes;
      }
      function pickArbitraryLane(lanes) {
        return getHighestPriorityLane(lanes);
      }
      function pickArbitraryLaneIndex(lanes) {
        return 31 - clz32(lanes);
      }
      function laneToIndex(lane) {
        return pickArbitraryLaneIndex(lane);
      }
      function includesSomeLane(a2, b3) {
        return (a2 & b3) !== NoLanes;
      }
      function isSubsetOfLanes(set2, subset) {
        return (set2 & subset) === subset;
      }
      function mergeLanes(a2, b3) {
        return a2 | b3;
      }
      function removeLanes(set2, subset) {
        return set2 & ~subset;
      }
      function intersectLanes(a2, b3) {
        return a2 & b3;
      }
      function laneToLanes(lane) {
        return lane;
      }
      function higherPriorityLane(a2, b3) {
        return a2 !== NoLane && a2 < b3 ? a2 : b3;
      }
      function createLaneMap(initial) {
        var laneMap = [];
        for (var i = 0;i < TotalLanes; i++) {
          laneMap.push(initial);
        }
        return laneMap;
      }
      function markRootUpdated(root2, updateLane, eventTime) {
        root2.pendingLanes |= updateLane;
        if (updateLane !== IdleLane) {
          root2.suspendedLanes = NoLanes;
          root2.pingedLanes = NoLanes;
        }
        var eventTimes = root2.eventTimes;
        var index2 = laneToIndex(updateLane);
        eventTimes[index2] = eventTime;
      }
      function markRootSuspended(root2, suspendedLanes) {
        root2.suspendedLanes |= suspendedLanes;
        root2.pingedLanes &= ~suspendedLanes;
        var expirationTimes = root2.expirationTimes;
        var lanes = suspendedLanes;
        while (lanes > 0) {
          var index2 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index2;
          expirationTimes[index2] = NoTimestamp;
          lanes &= ~lane;
        }
      }
      function markRootPinged(root2, pingedLanes, eventTime) {
        root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
      }
      function markRootFinished(root2, remainingLanes) {
        var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
        root2.pendingLanes = remainingLanes;
        root2.suspendedLanes = NoLanes;
        root2.pingedLanes = NoLanes;
        root2.expiredLanes &= remainingLanes;
        root2.mutableReadLanes &= remainingLanes;
        root2.entangledLanes &= remainingLanes;
        var entanglements = root2.entanglements;
        var eventTimes = root2.eventTimes;
        var expirationTimes = root2.expirationTimes;
        var lanes = noLongerPendingLanes;
        while (lanes > 0) {
          var index2 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index2;
          entanglements[index2] = NoLanes;
          eventTimes[index2] = NoTimestamp;
          expirationTimes[index2] = NoTimestamp;
          lanes &= ~lane;
        }
      }
      function markRootEntangled(root2, entangledLanes) {
        var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
        var entanglements = root2.entanglements;
        var lanes = rootEntangledLanes;
        while (lanes) {
          var index2 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index2;
          if (lane & entangledLanes | entanglements[index2] & entangledLanes) {
            entanglements[index2] |= entangledLanes;
          }
          lanes &= ~lane;
        }
      }
      function getBumpedLaneForHydration(root2, renderLanes2) {
        var renderLane = getHighestPriorityLane(renderLanes2);
        var lane;
        switch (renderLane) {
          case InputContinuousLane:
            lane = InputContinuousHydrationLane;
            break;
          case DefaultLane:
            lane = DefaultHydrationLane;
            break;
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
          case RetryLane5:
            lane = TransitionHydrationLane;
            break;
          case IdleLane:
            lane = IdleHydrationLane;
            break;
          default:
            lane = NoLane;
            break;
        }
        if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
          return NoLane;
        }
        return lane;
      }
      function addFiberToLanesMap(root2, fiber, lanes) {
        if (!isDevToolsPresent) {
          return;
        }
        var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
        while (lanes > 0) {
          var index2 = laneToIndex(lanes);
          var lane = 1 << index2;
          var updaters = pendingUpdatersLaneMap[index2];
          updaters.add(fiber);
          lanes &= ~lane;
        }
      }
      function movePendingFibersToMemoized(root2, lanes) {
        if (!isDevToolsPresent) {
          return;
        }
        var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
        var memoizedUpdaters = root2.memoizedUpdaters;
        while (lanes > 0) {
          var index2 = laneToIndex(lanes);
          var lane = 1 << index2;
          var updaters = pendingUpdatersLaneMap[index2];
          if (updaters.size > 0) {
            updaters.forEach(function(fiber) {
              var alternate = fiber.alternate;
              if (alternate === null || !memoizedUpdaters.has(alternate)) {
                memoizedUpdaters.add(fiber);
              }
            });
            updaters.clear();
          }
          lanes &= ~lane;
        }
      }
      function getTransitionsForLanes(root2, lanes) {
        {
          return null;
        }
      }
      var DiscreteEventPriority = SyncLane;
      var ContinuousEventPriority = InputContinuousLane;
      var DefaultEventPriority = DefaultLane;
      var IdleEventPriority = IdleLane;
      var currentUpdatePriority = NoLane;
      function getCurrentUpdatePriority() {
        return currentUpdatePriority;
      }
      function setCurrentUpdatePriority(newPriority) {
        currentUpdatePriority = newPriority;
      }
      function runWithPriority(priority, fn) {
        var previousPriority = currentUpdatePriority;
        try {
          currentUpdatePriority = priority;
          return fn();
        } finally {
          currentUpdatePriority = previousPriority;
        }
      }
      function higherEventPriority(a2, b3) {
        return a2 !== 0 && a2 < b3 ? a2 : b3;
      }
      function lowerEventPriority(a2, b3) {
        return a2 === 0 || a2 > b3 ? a2 : b3;
      }
      function isHigherEventPriority(a2, b3) {
        return a2 !== 0 && a2 < b3;
      }
      function lanesToEventPriority(lanes) {
        var lane = getHighestPriorityLane(lanes);
        if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
          return DiscreteEventPriority;
        }
        if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
          return ContinuousEventPriority;
        }
        if (includesNonIdleWork(lane)) {
          return DefaultEventPriority;
        }
        return IdleEventPriority;
      }
      function isRootDehydrated(root2) {
        var currentState = root2.current.memoizedState;
        return currentState.isDehydrated;
      }
      var _attemptSynchronousHydration;
      function setAttemptSynchronousHydration(fn) {
        _attemptSynchronousHydration = fn;
      }
      function attemptSynchronousHydration(fiber) {
        _attemptSynchronousHydration(fiber);
      }
      var attemptContinuousHydration;
      function setAttemptContinuousHydration(fn) {
        attemptContinuousHydration = fn;
      }
      var attemptHydrationAtCurrentPriority;
      function setAttemptHydrationAtCurrentPriority(fn) {
        attemptHydrationAtCurrentPriority = fn;
      }
      var getCurrentUpdatePriority$1;
      function setGetCurrentUpdatePriority(fn) {
        getCurrentUpdatePriority$1 = fn;
      }
      var attemptHydrationAtPriority;
      function setAttemptHydrationAtPriority(fn) {
        attemptHydrationAtPriority = fn;
      }
      var hasScheduledReplayAttempt = false;
      var queuedDiscreteEvents = [];
      var queuedFocus = null;
      var queuedDrag = null;
      var queuedMouse = null;
      var queuedPointers = new Map;
      var queuedPointerCaptures = new Map;
      var queuedExplicitHydrationTargets = [];
      var discreteReplayableEvents = [
        "mousedown",
        "mouseup",
        "touchcancel",
        "touchend",
        "touchstart",
        "auxclick",
        "dblclick",
        "pointercancel",
        "pointerdown",
        "pointerup",
        "dragend",
        "dragstart",
        "drop",
        "compositionend",
        "compositionstart",
        "keydown",
        "keypress",
        "keyup",
        "input",
        "textInput",
        "copy",
        "cut",
        "paste",
        "click",
        "change",
        "contextmenu",
        "reset",
        "submit"
      ];
      function isDiscreteEventThatRequiresHydration(eventType) {
        return discreteReplayableEvents.indexOf(eventType) > -1;
      }
      function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return {
          blockedOn,
          domEventName,
          eventSystemFlags,
          nativeEvent,
          targetContainers: [targetContainer]
        };
      }
      function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch (domEventName) {
          case "focusin":
          case "focusout":
            queuedFocus = null;
            break;
          case "dragenter":
          case "dragleave":
            queuedDrag = null;
            break;
          case "mouseover":
          case "mouseout":
            queuedMouse = null;
            break;
          case "pointerover":
          case "pointerout": {
            var pointerId = nativeEvent.pointerId;
            queuedPointers.delete(pointerId);
            break;
          }
          case "gotpointercapture":
          case "lostpointercapture": {
            var _pointerId = nativeEvent.pointerId;
            queuedPointerCaptures.delete(_pointerId);
            break;
          }
        }
      }
      function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
          var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (blockedOn !== null) {
            var _fiber2 = getInstanceFromNode(blockedOn);
            if (_fiber2 !== null) {
              attemptContinuousHydration(_fiber2);
            }
          }
          return queuedEvent;
        }
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        var targetContainers = existingQueuedEvent.targetContainers;
        if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
          targetContainers.push(targetContainer);
        }
        return existingQueuedEvent;
      }
      function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        switch (domEventName) {
          case "focusin": {
            var focusEvent = nativeEvent;
            queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
            return true;
          }
          case "dragenter": {
            var dragEvent = nativeEvent;
            queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
            return true;
          }
          case "mouseover": {
            var mouseEvent = nativeEvent;
            queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
            return true;
          }
          case "pointerover": {
            var pointerEvent = nativeEvent;
            var pointerId = pointerEvent.pointerId;
            queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
            return true;
          }
          case "gotpointercapture": {
            var _pointerEvent = nativeEvent;
            var _pointerId2 = _pointerEvent.pointerId;
            queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
            return true;
          }
        }
        return false;
      }
      function attemptExplicitHydrationTarget(queuedTarget) {
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (targetInst !== null) {
          var nearestMounted = getNearestMountedFiber(targetInst);
          if (nearestMounted !== null) {
            var tag = nearestMounted.tag;
            if (tag === SuspenseComponent) {
              var instance = getSuspenseInstanceFromFiber(nearestMounted);
              if (instance !== null) {
                queuedTarget.blockedOn = instance;
                attemptHydrationAtPriority(queuedTarget.priority, function() {
                  attemptHydrationAtCurrentPriority(nearestMounted);
                });
                return;
              }
            } else if (tag === HostRoot) {
              var root2 = nearestMounted.stateNode;
              if (isRootDehydrated(root2)) {
                queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                return;
              }
            }
          }
        }
        queuedTarget.blockedOn = null;
      }
      function queueExplicitHydrationTarget(target) {
        var updatePriority = getCurrentUpdatePriority$1();
        var queuedTarget = {
          blockedOn: null,
          target,
          priority: updatePriority
        };
        var i = 0;
        for (;i < queuedExplicitHydrationTargets.length; i++) {
          if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
            break;
          }
        }
        queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
        if (i === 0) {
          attemptExplicitHydrationTarget(queuedTarget);
        }
      }
      function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (queuedEvent.blockedOn !== null) {
          return false;
        }
        var targetContainers = queuedEvent.targetContainers;
        while (targetContainers.length > 0) {
          var targetContainer = targetContainers[0];
          var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
          if (nextBlockedOn === null) {
            {
              var nativeEvent = queuedEvent.nativeEvent;
              var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
              setReplayingEvent(nativeEventClone);
              nativeEvent.target.dispatchEvent(nativeEventClone);
              resetReplayingEvent();
            }
          } else {
            var _fiber3 = getInstanceFromNode(nextBlockedOn);
            if (_fiber3 !== null) {
              attemptContinuousHydration(_fiber3);
            }
            queuedEvent.blockedOn = nextBlockedOn;
            return false;
          }
          targetContainers.shift();
        }
        return true;
      }
      function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
        if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
          map.delete(key);
        }
      }
      function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false;
        if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
          queuedFocus = null;
        }
        if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
          queuedDrag = null;
        }
        if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
          queuedMouse = null;
        }
        queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
        queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
      }
      function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        if (queuedEvent.blockedOn === unblocked) {
          queuedEvent.blockedOn = null;
          if (!hasScheduledReplayAttempt) {
            hasScheduledReplayAttempt = true;
            Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
          }
        }
      }
      function retryIfBlockedOn(unblocked) {
        if (queuedDiscreteEvents.length > 0) {
          scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
          for (var i = 1;i < queuedDiscreteEvents.length; i++) {
            var queuedEvent = queuedDiscreteEvents[i];
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
            }
          }
        }
        if (queuedFocus !== null) {
          scheduleCallbackIfUnblocked(queuedFocus, unblocked);
        }
        if (queuedDrag !== null) {
          scheduleCallbackIfUnblocked(queuedDrag, unblocked);
        }
        if (queuedMouse !== null) {
          scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        }
        var unblock = function(queuedEvent2) {
          return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
        };
        queuedPointers.forEach(unblock);
        queuedPointerCaptures.forEach(unblock);
        for (var _i = 0;_i < queuedExplicitHydrationTargets.length; _i++) {
          var queuedTarget = queuedExplicitHydrationTargets[_i];
          if (queuedTarget.blockedOn === unblocked) {
            queuedTarget.blockedOn = null;
          }
        }
        while (queuedExplicitHydrationTargets.length > 0) {
          var nextExplicitTarget = queuedExplicitHydrationTargets[0];
          if (nextExplicitTarget.blockedOn !== null) {
            break;
          } else {
            attemptExplicitHydrationTarget(nextExplicitTarget);
            if (nextExplicitTarget.blockedOn === null) {
              queuedExplicitHydrationTargets.shift();
            }
          }
        }
      }
      var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
      var _enabled = true;
      function setEnabled(enabled) {
        _enabled = !!enabled;
      }
      function isEnabled() {
        return _enabled;
      }
      function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
        var eventPriority = getEventPriority(domEventName);
        var listenerWrapper;
        switch (eventPriority) {
          case DiscreteEventPriority:
            listenerWrapper = dispatchDiscreteEvent;
            break;
          case ContinuousEventPriority:
            listenerWrapper = dispatchContinuousEvent;
            break;
          case DefaultEventPriority:
          default:
            listenerWrapper = dispatchEvent;
            break;
        }
        return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
      }
      function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
          setCurrentUpdatePriority(DiscreteEventPriority);
          dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig.transition = prevTransition;
        }
      }
      function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
          setCurrentUpdatePriority(ContinuousEventPriority);
          dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig.transition = prevTransition;
        }
      }
      function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (!_enabled) {
          return;
        }
        {
          dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        }
      }
      function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn === null) {
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
          clearIfContinuousEvent(domEventName, nativeEvent);
          return;
        }
        if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
          nativeEvent.stopPropagation();
          return;
        }
        clearIfContinuousEvent(domEventName, nativeEvent);
        if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
          while (blockedOn !== null) {
            var fiber = getInstanceFromNode(blockedOn);
            if (fiber !== null) {
              attemptSynchronousHydration(fiber);
            }
            var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (nextBlockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
            }
            if (nextBlockedOn === blockedOn) {
              break;
            }
            blockedOn = nextBlockedOn;
          }
          if (blockedOn !== null) {
            nativeEvent.stopPropagation();
          }
          return;
        }
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
      }
      var return_targetInst = null;
      function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return_targetInst = null;
        var nativeEventTarget = getEventTarget(nativeEvent);
        var targetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (targetInst !== null) {
          var nearestMounted = getNearestMountedFiber(targetInst);
          if (nearestMounted === null) {
            targetInst = null;
          } else {
            var tag = nearestMounted.tag;
            if (tag === SuspenseComponent) {
              var instance = getSuspenseInstanceFromFiber(nearestMounted);
              if (instance !== null) {
                return instance;
              }
              targetInst = null;
            } else if (tag === HostRoot) {
              var root2 = nearestMounted.stateNode;
              if (isRootDehydrated(root2)) {
                return getContainerFromFiber(nearestMounted);
              }
              targetInst = null;
            } else if (nearestMounted !== targetInst) {
              targetInst = null;
            }
          }
        }
        return_targetInst = targetInst;
        return null;
      }
      function getEventPriority(domEventName) {
        switch (domEventName) {
          case "cancel":
          case "click":
          case "close":
          case "contextmenu":
          case "copy":
          case "cut":
          case "auxclick":
          case "dblclick":
          case "dragend":
          case "dragstart":
          case "drop":
          case "focusin":
          case "focusout":
          case "input":
          case "invalid":
          case "keydown":
          case "keypress":
          case "keyup":
          case "mousedown":
          case "mouseup":
          case "paste":
          case "pause":
          case "play":
          case "pointercancel":
          case "pointerdown":
          case "pointerup":
          case "ratechange":
          case "reset":
          case "resize":
          case "seeked":
          case "submit":
          case "touchcancel":
          case "touchend":
          case "touchstart":
          case "volumechange":
          case "change":
          case "selectionchange":
          case "textInput":
          case "compositionstart":
          case "compositionend":
          case "compositionupdate":
          case "beforeblur":
          case "afterblur":
          case "beforeinput":
          case "blur":
          case "fullscreenchange":
          case "focus":
          case "hashchange":
          case "popstate":
          case "select":
          case "selectstart":
            return DiscreteEventPriority;
          case "drag":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "mousemove":
          case "mouseout":
          case "mouseover":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "scroll":
          case "toggle":
          case "touchmove":
          case "wheel":
          case "mouseenter":
          case "mouseleave":
          case "pointerenter":
          case "pointerleave":
            return ContinuousEventPriority;
          case "message": {
            var schedulerPriority = getCurrentPriorityLevel();
            switch (schedulerPriority) {
              case ImmediatePriority:
                return DiscreteEventPriority;
              case UserBlockingPriority:
                return ContinuousEventPriority;
              case NormalPriority:
              case LowPriority:
                return DefaultEventPriority;
              case IdlePriority:
                return IdleEventPriority;
              default:
                return DefaultEventPriority;
            }
          }
          default:
            return DefaultEventPriority;
        }
      }
      function addEventBubbleListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, false);
        return listener;
      }
      function addEventCaptureListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, true);
        return listener;
      }
      function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
          capture: true,
          passive
        });
        return listener;
      }
      function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
          passive
        });
        return listener;
      }
      var root = null;
      var startText = null;
      var fallbackText = null;
      function initialize(nativeEventTarget) {
        root = nativeEventTarget;
        startText = getText();
        return true;
      }
      function reset() {
        root = null;
        startText = null;
        fallbackText = null;
      }
      function getData() {
        if (fallbackText) {
          return fallbackText;
        }
        var start;
        var startValue = startText;
        var startLength = startValue.length;
        var end;
        var endValue = getText();
        var endLength = endValue.length;
        for (start = 0;start < startLength; start++) {
          if (startValue[start] !== endValue[start]) {
            break;
          }
        }
        var minEnd = startLength - start;
        for (end = 1;end <= minEnd; end++) {
          if (startValue[startLength - end] !== endValue[endLength - end]) {
            break;
          }
        }
        var sliceTail = end > 1 ? 1 - end : undefined;
        fallbackText = endValue.slice(start, sliceTail);
        return fallbackText;
      }
      function getText() {
        if ("value" in root) {
          return root.value;
        }
        return root.textContent;
      }
      function getEventCharCode(nativeEvent) {
        var charCode;
        var keyCode = nativeEvent.keyCode;
        if ("charCode" in nativeEvent) {
          charCode = nativeEvent.charCode;
          if (charCode === 0 && keyCode === 13) {
            charCode = 13;
          }
        } else {
          charCode = keyCode;
        }
        if (charCode === 10) {
          charCode = 13;
        }
        if (charCode >= 32 || charCode === 13) {
          return charCode;
        }
        return 0;
      }
      function functionThatReturnsTrue() {
        return true;
      }
      function functionThatReturnsFalse() {
        return false;
      }
      function createSyntheticEvent(Interface) {
        function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
          this._reactName = reactName;
          this._targetInst = targetInst;
          this.type = reactEventType;
          this.nativeEvent = nativeEvent;
          this.target = nativeEventTarget;
          this.currentTarget = null;
          for (var _propName in Interface) {
            if (!Interface.hasOwnProperty(_propName)) {
              continue;
            }
            var normalize = Interface[_propName];
            if (normalize) {
              this[_propName] = normalize(nativeEvent);
            } else {
              this[_propName] = nativeEvent[_propName];
            }
          }
          var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
          if (defaultPrevented) {
            this.isDefaultPrevented = functionThatReturnsTrue;
          } else {
            this.isDefaultPrevented = functionThatReturnsFalse;
          }
          this.isPropagationStopped = functionThatReturnsFalse;
          return this;
        }
        assign(SyntheticBaseEvent.prototype, {
          preventDefault: function() {
            this.defaultPrevented = true;
            var event = this.nativeEvent;
            if (!event) {
              return;
            }
            if (event.preventDefault) {
              event.preventDefault();
            } else if (typeof event.returnValue !== "unknown") {
              event.returnValue = false;
            }
            this.isDefaultPrevented = functionThatReturnsTrue;
          },
          stopPropagation: function() {
            var event = this.nativeEvent;
            if (!event) {
              return;
            }
            if (event.stopPropagation) {
              event.stopPropagation();
            } else if (typeof event.cancelBubble !== "unknown") {
              event.cancelBubble = true;
            }
            this.isPropagationStopped = functionThatReturnsTrue;
          },
          persist: function() {
          },
          isPersistent: functionThatReturnsTrue
        });
        return SyntheticBaseEvent;
      }
      var EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function(event) {
          return event.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
      };
      var SyntheticEvent = createSyntheticEvent(EventInterface);
      var UIEventInterface = assign({}, EventInterface, {
        view: 0,
        detail: 0
      });
      var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
      var lastMovementX;
      var lastMovementY;
      var lastMouseEvent;
      function updateMouseMovementPolyfillState(event) {
        if (event !== lastMouseEvent) {
          if (lastMouseEvent && event.type === "mousemove") {
            lastMovementX = event.screenX - lastMouseEvent.screenX;
            lastMovementY = event.screenY - lastMouseEvent.screenY;
          } else {
            lastMovementX = 0;
            lastMovementY = 0;
          }
          lastMouseEvent = event;
        }
      }
      var MouseEventInterface = assign({}, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function(event) {
          if (event.relatedTarget === undefined)
            return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
          return event.relatedTarget;
        },
        movementX: function(event) {
          if ("movementX" in event) {
            return event.movementX;
          }
          updateMouseMovementPolyfillState(event);
          return lastMovementX;
        },
        movementY: function(event) {
          if ("movementY" in event) {
            return event.movementY;
          }
          return lastMovementY;
        }
      });
      var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
      var DragEventInterface = assign({}, MouseEventInterface, {
        dataTransfer: 0
      });
      var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
      var FocusEventInterface = assign({}, UIEventInterface, {
        relatedTarget: 0
      });
      var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
      var AnimationEventInterface = assign({}, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      });
      var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
      var ClipboardEventInterface = assign({}, EventInterface, {
        clipboardData: function(event) {
          return "clipboardData" in event ? event.clipboardData : window.clipboardData;
        }
      });
      var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
      var CompositionEventInterface = assign({}, EventInterface, {
        data: 0
      });
      var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
      var SyntheticInputEvent = SyntheticCompositionEvent;
      var normalizeKey = {
        Esc: "Escape",
        Spacebar: " ",
        Left: "ArrowLeft",
        Up: "ArrowUp",
        Right: "ArrowRight",
        Down: "ArrowDown",
        Del: "Delete",
        Win: "OS",
        Menu: "ContextMenu",
        Apps: "ContextMenu",
        Scroll: "ScrollLock",
        MozPrintableKey: "Unidentified"
      };
      var translateToKey = {
        "8": "Backspace",
        "9": "Tab",
        "12": "Clear",
        "13": "Enter",
        "16": "Shift",
        "17": "Control",
        "18": "Alt",
        "19": "Pause",
        "20": "CapsLock",
        "27": "Escape",
        "32": " ",
        "33": "PageUp",
        "34": "PageDown",
        "35": "End",
        "36": "Home",
        "37": "ArrowLeft",
        "38": "ArrowUp",
        "39": "ArrowRight",
        "40": "ArrowDown",
        "45": "Insert",
        "46": "Delete",
        "112": "F1",
        "113": "F2",
        "114": "F3",
        "115": "F4",
        "116": "F5",
        "117": "F6",
        "118": "F7",
        "119": "F8",
        "120": "F9",
        "121": "F10",
        "122": "F11",
        "123": "F12",
        "144": "NumLock",
        "145": "ScrollLock",
        "224": "Meta"
      };
      function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
          var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
          if (key !== "Unidentified") {
            return key;
          }
        }
        if (nativeEvent.type === "keypress") {
          var charCode = getEventCharCode(nativeEvent);
          return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
        }
        if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
          return translateToKey[nativeEvent.keyCode] || "Unidentified";
        }
        return "";
      }
      var modifierKeyToProp = {
        Alt: "altKey",
        Control: "ctrlKey",
        Meta: "metaKey",
        Shift: "shiftKey"
      };
      function modifierStateGetter(keyArg) {
        var syntheticEvent = this;
        var nativeEvent = syntheticEvent.nativeEvent;
        if (nativeEvent.getModifierState) {
          return nativeEvent.getModifierState(keyArg);
        }
        var keyProp = modifierKeyToProp[keyArg];
        return keyProp ? !!nativeEvent[keyProp] : false;
      }
      function getEventModifierState(nativeEvent) {
        return modifierStateGetter;
      }
      var KeyboardEventInterface = assign({}, UIEventInterface, {
        key: getEventKey,
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        charCode: function(event) {
          if (event.type === "keypress") {
            return getEventCharCode(event);
          }
          return 0;
        },
        keyCode: function(event) {
          if (event.type === "keydown" || event.type === "keyup") {
            return event.keyCode;
          }
          return 0;
        },
        which: function(event) {
          if (event.type === "keypress") {
            return getEventCharCode(event);
          }
          if (event.type === "keydown" || event.type === "keyup") {
            return event.keyCode;
          }
          return 0;
        }
      });
      var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
      var PointerEventInterface = assign({}, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
      });
      var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
      var TouchEventInterface = assign({}, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
      });
      var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
      var TransitionEventInterface = assign({}, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      });
      var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
      var WheelEventInterface = assign({}, MouseEventInterface, {
        deltaX: function(event) {
          return "deltaX" in event ? event.deltaX : ("wheelDeltaX" in event) ? -event.wheelDeltaX : 0;
        },
        deltaY: function(event) {
          return "deltaY" in event ? event.deltaY : ("wheelDeltaY" in event) ? -event.wheelDeltaY : ("wheelDelta" in event) ? -event.wheelDelta : 0;
        },
        deltaZ: 0,
        deltaMode: 0
      });
      var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
      var END_KEYCODES = [9, 13, 27, 32];
      var START_KEYCODE = 229;
      var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
      var documentMode = null;
      if (canUseDOM && "documentMode" in document) {
        documentMode = document.documentMode;
      }
      var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
      var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
      var SPACEBAR_CODE = 32;
      var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
      function registerEvents() {
        registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
        registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
      }
      var hasSpaceKeypress = false;
      function isKeypressCommand(nativeEvent) {
        return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
      }
      function getCompositionEventType(domEventName) {
        switch (domEventName) {
          case "compositionstart":
            return "onCompositionStart";
          case "compositionend":
            return "onCompositionEnd";
          case "compositionupdate":
            return "onCompositionUpdate";
        }
      }
      function isFallbackCompositionStart(domEventName, nativeEvent) {
        return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
      }
      function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch (domEventName) {
          case "keyup":
            return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
          case "keydown":
            return nativeEvent.keyCode !== START_KEYCODE;
          case "keypress":
          case "mousedown":
          case "focusout":
            return true;
          default:
            return false;
        }
      }
      function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail;
        if (typeof detail === "object" && "data" in detail) {
          return detail.data;
        }
        return null;
      }
      function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === "ko";
      }
      var isComposing = false;
      function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var eventType;
        var fallbackData;
        if (canUseCompositionEvent) {
          eventType = getCompositionEventType(domEventName);
        } else if (!isComposing) {
          if (isFallbackCompositionStart(domEventName, nativeEvent)) {
            eventType = "onCompositionStart";
          }
        } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
          eventType = "onCompositionEnd";
        }
        if (!eventType) {
          return null;
        }
        if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
          if (!isComposing && eventType === "onCompositionStart") {
            isComposing = initialize(nativeEventTarget);
          } else if (eventType === "onCompositionEnd") {
            if (isComposing) {
              fallbackData = getData();
            }
          }
        }
        var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
        if (listeners.length > 0) {
          var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event,
            listeners
          });
          if (fallbackData) {
            event.data = fallbackData;
          } else {
            var customData = getDataFromCustomEvent(nativeEvent);
            if (customData !== null) {
              event.data = customData;
            }
          }
        }
      }
      function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch (domEventName) {
          case "compositionend":
            return getDataFromCustomEvent(nativeEvent);
          case "keypress":
            var which = nativeEvent.which;
            if (which !== SPACEBAR_CODE) {
              return null;
            }
            hasSpaceKeypress = true;
            return SPACEBAR_CHAR;
          case "textInput":
            var chars = nativeEvent.data;
            if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
              return null;
            }
            return chars;
          default:
            return null;
        }
      }
      function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        if (isComposing) {
          if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
            var chars = getData();
            reset();
            isComposing = false;
            return chars;
          }
          return null;
        }
        switch (domEventName) {
          case "paste":
            return null;
          case "keypress":
            if (!isKeypressCommand(nativeEvent)) {
              if (nativeEvent.char && nativeEvent.char.length > 1) {
                return nativeEvent.char;
              } else if (nativeEvent.which) {
                return String.fromCharCode(nativeEvent.which);
              }
            }
            return null;
          case "compositionend":
            return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
          default:
            return null;
        }
      }
      function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var chars;
        if (canUseTextInputEvent) {
          chars = getNativeBeforeInputChars(domEventName, nativeEvent);
        } else {
          chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
        }
        if (!chars) {
          return null;
        }
        var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
        if (listeners.length > 0) {
          var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event,
            listeners
          });
          event.data = chars;
        }
      }
      function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
      }
      var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        "datetime-local": true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
      };
      function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        if (nodeName === "input") {
          return !!supportedInputTypes[elem.type];
        }
        if (nodeName === "textarea") {
          return true;
        }
        return false;
      }
      function isEventSupported(eventNameSuffix) {
        if (!canUseDOM) {
          return false;
        }
        var eventName = "on" + eventNameSuffix;
        var isSupported = eventName in document;
        if (!isSupported) {
          var element = document.createElement("div");
          element.setAttribute(eventName, "return;");
          isSupported = typeof element[eventName] === "function";
        }
        return isSupported;
      }
      function registerEvents$1() {
        registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
      }
      function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
        enqueueStateRestore(target);
        var listeners = accumulateTwoPhaseListeners(inst, "onChange");
        if (listeners.length > 0) {
          var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
          dispatchQueue.push({
            event,
            listeners
          });
        }
      }
      var activeElement = null;
      var activeElementInst = null;
      function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === "select" || nodeName === "input" && elem.type === "file";
      }
      function manualDispatchChangeEvent(nativeEvent) {
        var dispatchQueue = [];
        createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
        batchedUpdates(runEventInBatch, dispatchQueue);
      }
      function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0);
      }
      function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode)) {
          return targetInst;
        }
      }
      function getTargetInstForChangeEvent(domEventName, targetInst) {
        if (domEventName === "change") {
          return targetInst;
        }
      }
      var isInputEventSupported = false;
      if (canUseDOM) {
        isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
      }
      function startWatchingForValueChange(target, targetInst) {
        activeElement = target;
        activeElementInst = targetInst;
        activeElement.attachEvent("onpropertychange", handlePropertyChange);
      }
      function stopWatchingForValueChange() {
        if (!activeElement) {
          return;
        }
        activeElement.detachEvent("onpropertychange", handlePropertyChange);
        activeElement = null;
        activeElementInst = null;
      }
      function handlePropertyChange(nativeEvent) {
        if (nativeEvent.propertyName !== "value") {
          return;
        }
        if (getInstIfValueChanged(activeElementInst)) {
          manualDispatchChangeEvent(nativeEvent);
        }
      }
      function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        if (domEventName === "focusin") {
          stopWatchingForValueChange();
          startWatchingForValueChange(target, targetInst);
        } else if (domEventName === "focusout") {
          stopWatchingForValueChange();
        }
      }
      function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
        if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
          return getInstIfValueChanged(activeElementInst);
        }
      }
      function shouldUseClickEvent(elem) {
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
      }
      function getTargetInstForClickEvent(domEventName, targetInst) {
        if (domEventName === "click") {
          return getInstIfValueChanged(targetInst);
        }
      }
      function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if (domEventName === "input" || domEventName === "change") {
          return getInstIfValueChanged(targetInst);
        }
      }
      function handleControlledInputBlur(node) {
        var state = node._wrapperState;
        if (!state || !state.controlled || node.type !== "number") {
          return;
        }
        {
          setDefaultValue(node, "number", node.value);
        }
      }
      function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        var getTargetInstFunc, handleEventFunc;
        if (shouldUseChangeEvent(targetNode)) {
          getTargetInstFunc = getTargetInstForChangeEvent;
        } else if (isTextInputElement(targetNode)) {
          if (isInputEventSupported) {
            getTargetInstFunc = getTargetInstForInputOrChangeEvent;
          } else {
            getTargetInstFunc = getTargetInstForInputEventPolyfill;
            handleEventFunc = handleEventsForInputEventPolyfill;
          }
        } else if (shouldUseClickEvent(targetNode)) {
          getTargetInstFunc = getTargetInstForClickEvent;
        }
        if (getTargetInstFunc) {
          var inst = getTargetInstFunc(domEventName, targetInst);
          if (inst) {
            createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
            return;
          }
        }
        if (handleEventFunc) {
          handleEventFunc(domEventName, targetNode, targetInst);
        }
        if (domEventName === "focusout") {
          handleControlledInputBlur(targetNode);
        }
      }
      function registerEvents$2() {
        registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
        registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
        registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
        registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
      }
      function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
        var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
        if (isOverEvent && !isReplayingEvent(nativeEvent)) {
          var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
          if (related) {
            if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
              return;
            }
          }
        }
        if (!isOutEvent && !isOverEvent) {
          return;
        }
        var win;
        if (nativeEventTarget.window === nativeEventTarget) {
          win = nativeEventTarget;
        } else {
          var doc = nativeEventTarget.ownerDocument;
          if (doc) {
            win = doc.defaultView || doc.parentWindow;
          } else {
            win = window;
          }
        }
        var from;
        var to;
        if (isOutEvent) {
          var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
          from = targetInst;
          to = _related ? getClosestInstanceFromNode(_related) : null;
          if (to !== null) {
            var nearestMounted = getNearestMountedFiber(to);
            if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
              to = null;
            }
          }
        } else {
          from = null;
          to = targetInst;
        }
        if (from === to) {
          return;
        }
        var SyntheticEventCtor = SyntheticMouseEvent;
        var leaveEventType = "onMouseLeave";
        var enterEventType = "onMouseEnter";
        var eventTypePrefix = "mouse";
        if (domEventName === "pointerout" || domEventName === "pointerover") {
          SyntheticEventCtor = SyntheticPointerEvent;
          leaveEventType = "onPointerLeave";
          enterEventType = "onPointerEnter";
          eventTypePrefix = "pointer";
        }
        var fromNode = from == null ? win : getNodeFromInstance(from);
        var toNode = to == null ? win : getNodeFromInstance(to);
        var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
        leave.target = fromNode;
        leave.relatedTarget = toNode;
        var enter = null;
        var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (nativeTargetInst === targetInst) {
          var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
          enterEvent.target = toNode;
          enterEvent.relatedTarget = fromNode;
          enter = enterEvent;
        }
        accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
      }
      function is(x5, y3) {
        return x5 === y3 && (x5 !== 0 || 1 / x5 === 1 / y3) || x5 !== x5 && y3 !== y3;
      }
      var objectIs = typeof Object.is === "function" ? Object.is : is;
      function shallowEqual(objA, objB) {
        if (objectIs(objA, objB)) {
          return true;
        }
        if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
          return false;
        }
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) {
          return false;
        }
        for (var i = 0;i < keysA.length; i++) {
          var currentKey = keysA[i];
          if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
            return false;
          }
        }
        return true;
      }
      function getLeafNode(node) {
        while (node && node.firstChild) {
          node = node.firstChild;
        }
        return node;
      }
      function getSiblingNode(node) {
        while (node) {
          if (node.nextSibling) {
            return node.nextSibling;
          }
          node = node.parentNode;
        }
      }
      function getNodeForCharacterOffset(root2, offset) {
        var node = getLeafNode(root2);
        var nodeStart = 0;
        var nodeEnd = 0;
        while (node) {
          if (node.nodeType === TEXT_NODE) {
            nodeEnd = nodeStart + node.textContent.length;
            if (nodeStart <= offset && nodeEnd >= offset) {
              return {
                node,
                offset: offset - nodeStart
              };
            }
            nodeStart = nodeEnd;
          }
          node = getLeafNode(getSiblingNode(node));
        }
      }
      function getOffsets(outerNode) {
        var ownerDocument = outerNode.ownerDocument;
        var win = ownerDocument && ownerDocument.defaultView || window;
        var selection = win.getSelection && win.getSelection();
        if (!selection || selection.rangeCount === 0) {
          return null;
        }
        var { anchorNode, anchorOffset, focusNode, focusOffset } = selection;
        try {
          anchorNode.nodeType;
          focusNode.nodeType;
        } catch (e2) {
          return null;
        }
        return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
      }
      function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
        var length = 0;
        var start = -1;
        var end = -1;
        var indexWithinAnchor = 0;
        var indexWithinFocus = 0;
        var node = outerNode;
        var parentNode = null;
        outer:
          while (true) {
            var next = null;
            while (true) {
              if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                start = length + anchorOffset;
              }
              if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                end = length + focusOffset;
              }
              if (node.nodeType === TEXT_NODE) {
                length += node.nodeValue.length;
              }
              if ((next = node.firstChild) === null) {
                break;
              }
              parentNode = node;
              node = next;
            }
            while (true) {
              if (node === outerNode) {
                break outer;
              }
              if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                start = length;
              }
              if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                end = length;
              }
              if ((next = node.nextSibling) !== null) {
                break;
              }
              node = parentNode;
              parentNode = node.parentNode;
            }
            node = next;
          }
        if (start === -1 || end === -1) {
          return null;
        }
        return {
          start,
          end
        };
      }
      function setOffsets(node, offsets) {
        var doc = node.ownerDocument || document;
        var win = doc && doc.defaultView || window;
        if (!win.getSelection) {
          return;
        }
        var selection = win.getSelection();
        var length = node.textContent.length;
        var start = Math.min(offsets.start, length);
        var end = offsets.end === undefined ? start : Math.min(offsets.end, length);
        if (!selection.extend && start > end) {
          var temp = end;
          end = start;
          start = temp;
        }
        var startMarker = getNodeForCharacterOffset(node, start);
        var endMarker = getNodeForCharacterOffset(node, end);
        if (startMarker && endMarker) {
          if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
            return;
          }
          var range = doc.createRange();
          range.setStart(startMarker.node, startMarker.offset);
          selection.removeAllRanges();
          if (start > end) {
            selection.addRange(range);
            selection.extend(endMarker.node, endMarker.offset);
          } else {
            range.setEnd(endMarker.node, endMarker.offset);
            selection.addRange(range);
          }
        }
      }
      function isTextNode(node) {
        return node && node.nodeType === TEXT_NODE;
      }
      function containsNode(outerNode, innerNode) {
        if (!outerNode || !innerNode) {
          return false;
        } else if (outerNode === innerNode) {
          return true;
        } else if (isTextNode(outerNode)) {
          return false;
        } else if (isTextNode(innerNode)) {
          return containsNode(outerNode, innerNode.parentNode);
        } else if ("contains" in outerNode) {
          return outerNode.contains(innerNode);
        } else if (outerNode.compareDocumentPosition) {
          return !!(outerNode.compareDocumentPosition(innerNode) & 16);
        } else {
          return false;
        }
      }
      function isInDocument(node) {
        return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
      }
      function isSameOriginFrame(iframe) {
        try {
          return typeof iframe.contentWindow.location.href === "string";
        } catch (err) {
          return false;
        }
      }
      function getActiveElementDeep() {
        var win = window;
        var element = getActiveElement();
        while (element instanceof win.HTMLIFrameElement) {
          if (isSameOriginFrame(element)) {
            win = element.contentWindow;
          } else {
            return element;
          }
          element = getActiveElement(win.document);
        }
        return element;
      }
      function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
      }
      function getSelectionInformation() {
        var focusedElem = getActiveElementDeep();
        return {
          focusedElem,
          selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
        };
      }
      function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep();
        var priorFocusedElem = priorSelectionInformation.focusedElem;
        var priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
          if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
            setSelection(priorFocusedElem, priorSelectionRange);
          }
          var ancestors = [];
          var ancestor = priorFocusedElem;
          while (ancestor = ancestor.parentNode) {
            if (ancestor.nodeType === ELEMENT_NODE) {
              ancestors.push({
                element: ancestor,
                left: ancestor.scrollLeft,
                top: ancestor.scrollTop
              });
            }
          }
          if (typeof priorFocusedElem.focus === "function") {
            priorFocusedElem.focus();
          }
          for (var i = 0;i < ancestors.length; i++) {
            var info = ancestors[i];
            info.element.scrollLeft = info.left;
            info.element.scrollTop = info.top;
          }
        }
      }
      function getSelection(input) {
        var selection;
        if ("selectionStart" in input) {
          selection = {
            start: input.selectionStart,
            end: input.selectionEnd
          };
        } else {
          selection = getOffsets(input);
        }
        return selection || {
          start: 0,
          end: 0
        };
      }
      function setSelection(input, offsets) {
        var start = offsets.start;
        var end = offsets.end;
        if (end === undefined) {
          end = start;
        }
        if ("selectionStart" in input) {
          input.selectionStart = start;
          input.selectionEnd = Math.min(end, input.value.length);
        } else {
          setOffsets(input, offsets);
        }
      }
      var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
      function registerEvents$3() {
        registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
      }
      var activeElement$1 = null;
      var activeElementInst$1 = null;
      var lastSelection = null;
      var mouseDown = false;
      function getSelection$1(node) {
        if ("selectionStart" in node && hasSelectionCapabilities(node)) {
          return {
            start: node.selectionStart,
            end: node.selectionEnd
          };
        } else {
          var win = node.ownerDocument && node.ownerDocument.defaultView || window;
          var selection = win.getSelection();
          return {
            anchorNode: selection.anchorNode,
            anchorOffset: selection.anchorOffset,
            focusNode: selection.focusNode,
            focusOffset: selection.focusOffset
          };
        }
      }
      function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
      }
      function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        var doc = getEventTargetDocument(nativeEventTarget);
        if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
          return;
        }
        var currentSelection = getSelection$1(activeElement$1);
        if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
          lastSelection = currentSelection;
          var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
          if (listeners.length > 0) {
            var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            event.target = activeElement$1;
          }
        }
      }
      function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        switch (domEventName) {
          case "focusin":
            if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
              activeElement$1 = targetNode;
              activeElementInst$1 = targetInst;
              lastSelection = null;
            }
            break;
          case "focusout":
            activeElement$1 = null;
            activeElementInst$1 = null;
            lastSelection = null;
            break;
          case "mousedown":
            mouseDown = true;
            break;
          case "contextmenu":
          case "mouseup":
          case "dragend":
            mouseDown = false;
            constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            break;
          case "selectionchange":
            if (skipSelectionChangeEvent) {
              break;
            }
          case "keydown":
          case "keyup":
            constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
        }
      }
      function makePrefixMap(styleProp, eventName) {
        var prefixes2 = {};
        prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes2["Webkit" + styleProp] = "webkit" + eventName;
        prefixes2["Moz" + styleProp] = "moz" + eventName;
        return prefixes2;
      }
      var vendorPrefixes = {
        animationend: makePrefixMap("Animation", "AnimationEnd"),
        animationiteration: makePrefixMap("Animation", "AnimationIteration"),
        animationstart: makePrefixMap("Animation", "AnimationStart"),
        transitionend: makePrefixMap("Transition", "TransitionEnd")
      };
      var prefixedEventNames = {};
      var style = {};
      if (canUseDOM) {
        style = document.createElement("div").style;
        if (!("AnimationEvent" in window)) {
          delete vendorPrefixes.animationend.animation;
          delete vendorPrefixes.animationiteration.animation;
          delete vendorPrefixes.animationstart.animation;
        }
        if (!("TransitionEvent" in window)) {
          delete vendorPrefixes.transitionend.transition;
        }
      }
      function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) {
          return prefixedEventNames[eventName];
        } else if (!vendorPrefixes[eventName]) {
          return eventName;
        }
        var prefixMap = vendorPrefixes[eventName];
        for (var styleProp in prefixMap) {
          if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
            return prefixedEventNames[eventName] = prefixMap[styleProp];
          }
        }
        return eventName;
      }
      var ANIMATION_END = getVendorPrefixedEventName("animationend");
      var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
      var ANIMATION_START = getVendorPrefixedEventName("animationstart");
      var TRANSITION_END = getVendorPrefixedEventName("transitionend");
      var topLevelEventsToReactNames = new Map;
      var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
      function registerSimpleEvent(domEventName, reactName) {
        topLevelEventsToReactNames.set(domEventName, reactName);
        registerTwoPhaseEvent(reactName, [domEventName]);
      }
      function registerSimpleEvents() {
        for (var i = 0;i < simpleEventPluginEvents.length; i++) {
          var eventName = simpleEventPluginEvents[i];
          var domEventName = eventName.toLowerCase();
          var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
          registerSimpleEvent(domEventName, "on" + capitalizedEvent);
        }
        registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
        registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
        registerSimpleEvent(ANIMATION_START, "onAnimationStart");
        registerSimpleEvent("dblclick", "onDoubleClick");
        registerSimpleEvent("focusin", "onFocus");
        registerSimpleEvent("focusout", "onBlur");
        registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
      }
      function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var reactName = topLevelEventsToReactNames.get(domEventName);
        if (reactName === undefined) {
          return;
        }
        var SyntheticEventCtor = SyntheticEvent;
        var reactEventType = domEventName;
        switch (domEventName) {
          case "keypress":
            if (getEventCharCode(nativeEvent) === 0) {
              return;
            }
          case "keydown":
          case "keyup":
            SyntheticEventCtor = SyntheticKeyboardEvent;
            break;
          case "focusin":
            reactEventType = "focus";
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "focusout":
            reactEventType = "blur";
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "beforeblur":
          case "afterblur":
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "click":
            if (nativeEvent.button === 2) {
              return;
            }
          case "auxclick":
          case "dblclick":
          case "mousedown":
          case "mousemove":
          case "mouseup":
          case "mouseout":
          case "mouseover":
          case "contextmenu":
            SyntheticEventCtor = SyntheticMouseEvent;
            break;
          case "drag":
          case "dragend":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "dragstart":
          case "drop":
            SyntheticEventCtor = SyntheticDragEvent;
            break;
          case "touchcancel":
          case "touchend":
          case "touchmove":
          case "touchstart":
            SyntheticEventCtor = SyntheticTouchEvent;
            break;
          case ANIMATION_END:
          case ANIMATION_ITERATION:
          case ANIMATION_START:
            SyntheticEventCtor = SyntheticAnimationEvent;
            break;
          case TRANSITION_END:
            SyntheticEventCtor = SyntheticTransitionEvent;
            break;
          case "scroll":
            SyntheticEventCtor = SyntheticUIEvent;
            break;
          case "wheel":
            SyntheticEventCtor = SyntheticWheelEvent;
            break;
          case "copy":
          case "cut":
          case "paste":
            SyntheticEventCtor = SyntheticClipboardEvent;
            break;
          case "gotpointercapture":
          case "lostpointercapture":
          case "pointercancel":
          case "pointerdown":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "pointerup":
            SyntheticEventCtor = SyntheticPointerEvent;
            break;
        }
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        {
          var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
          var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
          if (_listeners.length > 0) {
            var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event: _event,
              listeners: _listeners
            });
          }
        }
      }
      registerSimpleEvents();
      registerEvents$2();
      registerEvents$1();
      registerEvents$3();
      registerEvents();
      function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
        if (shouldProcessPolyfillPlugins) {
          extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
      }
      var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
      var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
      function executeDispatch(event, listener, currentTarget) {
        var type = event.type || "unknown-event";
        event.currentTarget = currentTarget;
        invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
        event.currentTarget = null;
      }
      function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
        var previousInstance;
        if (inCapturePhase) {
          for (var i = dispatchListeners.length - 1;i >= 0; i--) {
            var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
            if (instance !== previousInstance && event.isPropagationStopped()) {
              return;
            }
            executeDispatch(event, listener, currentTarget);
            previousInstance = instance;
          }
        } else {
          for (var _i = 0;_i < dispatchListeners.length; _i++) {
            var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
            if (_instance !== previousInstance && event.isPropagationStopped()) {
              return;
            }
            executeDispatch(event, _listener, _currentTarget);
            previousInstance = _instance;
          }
        }
      }
      function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        for (var i = 0;i < dispatchQueue.length; i++) {
          var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
          processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
        }
        rethrowCaughtError();
      }
      function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var nativeEventTarget = getEventTarget(nativeEvent);
        var dispatchQueue = [];
        extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        processDispatchQueue(dispatchQueue, eventSystemFlags);
      }
      function listenToNonDelegatedEvent(domEventName, targetElement) {
        {
          if (!nonDelegatedEvents.has(domEventName)) {
            error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
          }
        }
        var isCapturePhaseListener = false;
        var listenerSet = getEventListenerSet(targetElement);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
        if (!listenerSet.has(listenerSetKey)) {
          addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
          listenerSet.add(listenerSetKey);
        }
      }
      function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
        {
          if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
            error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
          }
        }
        var eventSystemFlags = 0;
        if (isCapturePhaseListener) {
          eventSystemFlags |= IS_CAPTURE_PHASE;
        }
        addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
      }
      var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
      function listenToAllSupportedEvents(rootContainerElement) {
        if (!rootContainerElement[listeningMarker]) {
          rootContainerElement[listeningMarker] = true;
          allNativeEvents.forEach(function(domEventName) {
            if (domEventName !== "selectionchange") {
              if (!nonDelegatedEvents.has(domEventName)) {
                listenToNativeEvent(domEventName, false, rootContainerElement);
              }
              listenToNativeEvent(domEventName, true, rootContainerElement);
            }
          });
          var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          if (ownerDocument !== null) {
            if (!ownerDocument[listeningMarker]) {
              ownerDocument[listeningMarker] = true;
              listenToNativeEvent("selectionchange", false, ownerDocument);
            }
          }
        }
      }
      function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
        var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
        var isPassiveListener = undefined;
        if (passiveBrowserEventsSupported) {
          if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
            isPassiveListener = true;
          }
        }
        targetContainer = targetContainer;
        var unsubscribeListener;
        if (isCapturePhaseListener) {
          if (isPassiveListener !== undefined) {
            unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
          } else {
            unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
          }
        } else {
          if (isPassiveListener !== undefined) {
            unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
          } else {
            unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
          }
        }
      }
      function isMatchingRootContainer(grandContainer, targetContainer) {
        return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
      }
      function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var ancestorInst = targetInst;
        if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
          var targetContainerNode = targetContainer;
          if (targetInst !== null) {
            var node = targetInst;
            mainLoop:
              while (true) {
                if (node === null) {
                  return;
                }
                var nodeTag = node.tag;
                if (nodeTag === HostRoot || nodeTag === HostPortal) {
                  var container = node.stateNode.containerInfo;
                  if (isMatchingRootContainer(container, targetContainerNode)) {
                    break;
                  }
                  if (nodeTag === HostPortal) {
                    var grandNode = node.return;
                    while (grandNode !== null) {
                      var grandTag = grandNode.tag;
                      if (grandTag === HostRoot || grandTag === HostPortal) {
                        var grandContainer = grandNode.stateNode.containerInfo;
                        if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                          return;
                        }
                      }
                      grandNode = grandNode.return;
                    }
                  }
                  while (container !== null) {
                    var parentNode = getClosestInstanceFromNode(container);
                    if (parentNode === null) {
                      return;
                    }
                    var parentTag = parentNode.tag;
                    if (parentTag === HostComponent || parentTag === HostText) {
                      node = ancestorInst = parentNode;
                      continue mainLoop;
                    }
                    container = container.parentNode;
                  }
                }
                node = node.return;
              }
          }
        }
        batchedUpdates(function() {
          return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
        });
      }
      function createDispatchListener(instance, listener, currentTarget) {
        return {
          instance,
          listener,
          currentTarget
        };
      }
      function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
        var captureName = reactName !== null ? reactName + "Capture" : null;
        var reactEventName = inCapturePhase ? captureName : reactName;
        var listeners = [];
        var instance = targetFiber;
        var lastHostComponent = null;
        while (instance !== null) {
          var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
          if (tag === HostComponent && stateNode !== null) {
            lastHostComponent = stateNode;
            if (reactEventName !== null) {
              var listener = getListener(instance, reactEventName);
              if (listener != null) {
                listeners.push(createDispatchListener(instance, listener, lastHostComponent));
              }
            }
          }
          if (accumulateTargetOnly) {
            break;
          }
          instance = instance.return;
        }
        return listeners;
      }
      function accumulateTwoPhaseListeners(targetFiber, reactName) {
        var captureName = reactName + "Capture";
        var listeners = [];
        var instance = targetFiber;
        while (instance !== null) {
          var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
          if (tag === HostComponent && stateNode !== null) {
            var currentTarget = stateNode;
            var captureListener = getListener(instance, captureName);
            if (captureListener != null) {
              listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
            }
            var bubbleListener = getListener(instance, reactName);
            if (bubbleListener != null) {
              listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
            }
          }
          instance = instance.return;
        }
        return listeners;
      }
      function getParent(inst) {
        if (inst === null) {
          return null;
        }
        do {
          inst = inst.return;
        } while (inst && inst.tag !== HostComponent);
        if (inst) {
          return inst;
        }
        return null;
      }
      function getLowestCommonAncestor(instA, instB) {
        var nodeA = instA;
        var nodeB = instB;
        var depthA = 0;
        for (var tempA = nodeA;tempA; tempA = getParent(tempA)) {
          depthA++;
        }
        var depthB = 0;
        for (var tempB = nodeB;tempB; tempB = getParent(tempB)) {
          depthB++;
        }
        while (depthA - depthB > 0) {
          nodeA = getParent(nodeA);
          depthA--;
        }
        while (depthB - depthA > 0) {
          nodeB = getParent(nodeB);
          depthB--;
        }
        var depth = depthA;
        while (depth--) {
          if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
            return nodeA;
          }
          nodeA = getParent(nodeA);
          nodeB = getParent(nodeB);
        }
        return null;
      }
      function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
        var registrationName = event._reactName;
        var listeners = [];
        var instance = target;
        while (instance !== null) {
          if (instance === common) {
            break;
          }
          var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
          if (alternate !== null && alternate === common) {
            break;
          }
          if (tag === HostComponent && stateNode !== null) {
            var currentTarget = stateNode;
            if (inCapturePhase) {
              var captureListener = getListener(instance, registrationName);
              if (captureListener != null) {
                listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
              }
            } else if (!inCapturePhase) {
              var bubbleListener = getListener(instance, registrationName);
              if (bubbleListener != null) {
                listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
              }
            }
          }
          instance = instance.return;
        }
        if (listeners.length !== 0) {
          dispatchQueue.push({
            event,
            listeners
          });
        }
      }
      function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
        var common = from && to ? getLowestCommonAncestor(from, to) : null;
        if (from !== null) {
          accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
        }
        if (to !== null && enterEvent !== null) {
          accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
        }
      }
      function getListenerSetKey(domEventName, capture) {
        return domEventName + "__" + (capture ? "capture" : "bubble");
      }
      var didWarnInvalidHydration = false;
      var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
      var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
      var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
      var AUTOFOCUS = "autoFocus";
      var CHILDREN = "children";
      var STYLE = "style";
      var HTML$1 = "__html";
      var warnedUnknownTags;
      var validatePropertiesInDevelopment;
      var warnForPropDifference;
      var warnForExtraAttributes;
      var warnForInvalidEventListener;
      var canDiffStyleForHydrationWarning;
      var normalizeHTML;
      {
        warnedUnknownTags = {
          dialog: true,
          webview: true
        };
        validatePropertiesInDevelopment = function(type, props) {
          validateProperties(type, props);
          validateProperties$1(type, props);
          validateProperties$2(type, props, {
            registrationNameDependencies,
            possibleRegistrationNames
          });
        };
        canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
        warnForPropDifference = function(propName, serverValue, clientValue) {
          if (didWarnInvalidHydration) {
            return;
          }
          var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
          var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
          if (normalizedServerValue === normalizedClientValue) {
            return;
          }
          didWarnInvalidHydration = true;
          error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
        };
        warnForExtraAttributes = function(attributeNames) {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          var names = [];
          attributeNames.forEach(function(name) {
            names.push(name);
          });
          error("Extra attributes from the server: %s", names);
        };
        warnForInvalidEventListener = function(registrationName, listener) {
          if (listener === false) {
            error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
          } else {
            error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
          }
        };
        normalizeHTML = function(parent, html) {
          var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
          testElement.innerHTML = html;
          return testElement.innerHTML;
        };
      }
      var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
      var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
      function normalizeMarkupForTextOrAttribute(markup) {
        {
          checkHtmlStringCoercion(markup);
        }
        var markupString = typeof markup === "string" ? markup : "" + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
      }
      function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
        var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
        if (normalizedServerText === normalizedClientText) {
          return;
        }
        if (shouldWarnDev) {
          {
            if (!didWarnInvalidHydration) {
              didWarnInvalidHydration = true;
              error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
            }
          }
        }
        if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
          throw new Error("Text content does not match server-rendered HTML.");
        }
      }
      function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
      }
      function noop() {
      }
      function trapClickOnNonInteractiveElement(node) {
        node.onclick = noop;
      }
      function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
        for (var propKey in nextProps) {
          if (!nextProps.hasOwnProperty(propKey)) {
            continue;
          }
          var nextProp = nextProps[propKey];
          if (propKey === STYLE) {
            {
              if (nextProp) {
                Object.freeze(nextProp);
              }
            }
            setValueForStyles(domElement, nextProp);
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
            if (nextHtml != null) {
              setInnerHTML(domElement, nextHtml);
            }
          } else if (propKey === CHILDREN) {
            if (typeof nextProp === "string") {
              var canSetTextContent = tag !== "textarea" || nextProp !== "";
              if (canSetTextContent) {
                setTextContent(domElement, nextProp);
              }
            } else if (typeof nextProp === "number") {
              setTextContent(domElement, "" + nextProp);
            }
          } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
            ;
          else if (propKey === AUTOFOCUS)
            ;
          else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              if (typeof nextProp !== "function") {
                warnForInvalidEventListener(propKey, nextProp);
              }
              if (propKey === "onScroll") {
                listenToNonDelegatedEvent("scroll", domElement);
              }
            }
          } else if (nextProp != null) {
            setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
          }
        }
      }
      function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
        for (var i = 0;i < updatePayload.length; i += 2) {
          var propKey = updatePayload[i];
          var propValue = updatePayload[i + 1];
          if (propKey === STYLE) {
            setValueForStyles(domElement, propValue);
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            setInnerHTML(domElement, propValue);
          } else if (propKey === CHILDREN) {
            setTextContent(domElement, propValue);
          } else {
            setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
          }
        }
      }
      function createElement(type, props, rootContainerElement, parentNamespace) {
        var isCustomComponentTag;
        var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
        var domElement;
        var namespaceURI = parentNamespace;
        if (namespaceURI === HTML_NAMESPACE) {
          namespaceURI = getIntrinsicNamespace(type);
        }
        if (namespaceURI === HTML_NAMESPACE) {
          {
            isCustomComponentTag = isCustomComponent(type, props);
            if (!isCustomComponentTag && type !== type.toLowerCase()) {
              error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
            }
          }
          if (type === "script") {
            var div = ownerDocument.createElement("div");
            div.innerHTML = "<script></script>";
            var firstChild = div.firstChild;
            domElement = div.removeChild(firstChild);
          } else if (typeof props.is === "string") {
            domElement = ownerDocument.createElement(type, {
              is: props.is
            });
          } else {
            domElement = ownerDocument.createElement(type);
            if (type === "select") {
              var node = domElement;
              if (props.multiple) {
                node.multiple = true;
              } else if (props.size) {
                node.size = props.size;
              }
            }
          }
        } else {
          domElement = ownerDocument.createElementNS(namespaceURI, type);
        }
        {
          if (namespaceURI === HTML_NAMESPACE) {
            if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
              warnedUnknownTags[type] = true;
              error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
            }
          }
        }
        return domElement;
      }
      function createTextNode(text, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
      }
      function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
        var isCustomComponentTag = isCustomComponent(tag, rawProps);
        {
          validatePropertiesInDevelopment(tag, rawProps);
        }
        var props;
        switch (tag) {
          case "dialog":
            listenToNonDelegatedEvent("cancel", domElement);
            listenToNonDelegatedEvent("close", domElement);
            props = rawProps;
            break;
          case "iframe":
          case "object":
          case "embed":
            listenToNonDelegatedEvent("load", domElement);
            props = rawProps;
            break;
          case "video":
          case "audio":
            for (var i = 0;i < mediaEventTypes.length; i++) {
              listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
            }
            props = rawProps;
            break;
          case "source":
            listenToNonDelegatedEvent("error", domElement);
            props = rawProps;
            break;
          case "img":
          case "image":
          case "link":
            listenToNonDelegatedEvent("error", domElement);
            listenToNonDelegatedEvent("load", domElement);
            props = rawProps;
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", domElement);
            props = rawProps;
            break;
          case "input":
            initWrapperState(domElement, rawProps);
            props = getHostProps(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "option":
            validateProps(domElement, rawProps);
            props = rawProps;
            break;
          case "select":
            initWrapperState$1(domElement, rawProps);
            props = getHostProps$1(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "textarea":
            initWrapperState$2(domElement, rawProps);
            props = getHostProps$2(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          default:
            props = rawProps;
        }
        assertValidProps(tag, props);
        setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
        switch (tag) {
          case "input":
            track(domElement);
            postMountWrapper(domElement, rawProps, false);
            break;
          case "textarea":
            track(domElement);
            postMountWrapper$3(domElement);
            break;
          case "option":
            postMountWrapper$1(domElement, rawProps);
            break;
          case "select":
            postMountWrapper$2(domElement, rawProps);
            break;
          default:
            if (typeof props.onClick === "function") {
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
        }
      }
      function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
        {
          validatePropertiesInDevelopment(tag, nextRawProps);
        }
        var updatePayload = null;
        var lastProps;
        var nextProps;
        switch (tag) {
          case "input":
            lastProps = getHostProps(domElement, lastRawProps);
            nextProps = getHostProps(domElement, nextRawProps);
            updatePayload = [];
            break;
          case "select":
            lastProps = getHostProps$1(domElement, lastRawProps);
            nextProps = getHostProps$1(domElement, nextRawProps);
            updatePayload = [];
            break;
          case "textarea":
            lastProps = getHostProps$2(domElement, lastRawProps);
            nextProps = getHostProps$2(domElement, nextRawProps);
            updatePayload = [];
            break;
          default:
            lastProps = lastRawProps;
            nextProps = nextRawProps;
            if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
        }
        assertValidProps(tag, nextProps);
        var propKey;
        var styleName;
        var styleUpdates = null;
        for (propKey in lastProps) {
          if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
            continue;
          }
          if (propKey === STYLE) {
            var lastStyle = lastProps[propKey];
            for (styleName in lastStyle) {
              if (lastStyle.hasOwnProperty(styleName)) {
                if (!styleUpdates) {
                  styleUpdates = {};
                }
                styleUpdates[styleName] = "";
              }
            }
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
            ;
          else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
            ;
          else if (propKey === AUTOFOCUS)
            ;
          else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (!updatePayload) {
              updatePayload = [];
            }
          } else {
            (updatePayload = updatePayload || []).push(propKey, null);
          }
        }
        for (propKey in nextProps) {
          var nextProp = nextProps[propKey];
          var lastProp = lastProps != null ? lastProps[propKey] : undefined;
          if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
            continue;
          }
          if (propKey === STYLE) {
            {
              if (nextProp) {
                Object.freeze(nextProp);
              }
            }
            if (lastProp) {
              for (styleName in lastProp) {
                if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = "";
                }
              }
              for (styleName in nextProp) {
                if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = nextProp[styleName];
                }
              }
            } else {
              if (!styleUpdates) {
                if (!updatePayload) {
                  updatePayload = [];
                }
                updatePayload.push(propKey, styleUpdates);
              }
              styleUpdates = nextProp;
            }
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
            var lastHtml = lastProp ? lastProp[HTML$1] : undefined;
            if (nextHtml != null) {
              if (lastHtml !== nextHtml) {
                (updatePayload = updatePayload || []).push(propKey, nextHtml);
              }
            }
          } else if (propKey === CHILDREN) {
            if (typeof nextProp === "string" || typeof nextProp === "number") {
              (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
            }
          } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
            ;
          else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              if (typeof nextProp !== "function") {
                warnForInvalidEventListener(propKey, nextProp);
              }
              if (propKey === "onScroll") {
                listenToNonDelegatedEvent("scroll", domElement);
              }
            }
            if (!updatePayload && lastProp !== nextProp) {
              updatePayload = [];
            }
          } else {
            (updatePayload = updatePayload || []).push(propKey, nextProp);
          }
        }
        if (styleUpdates) {
          {
            validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
          }
          (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
        }
        return updatePayload;
      }
      function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
        if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
          updateChecked(domElement, nextRawProps);
        }
        var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
        var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
        updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
        switch (tag) {
          case "input":
            updateWrapper(domElement, nextRawProps);
            break;
          case "textarea":
            updateWrapper$1(domElement, nextRawProps);
            break;
          case "select":
            postUpdateWrapper(domElement, nextRawProps);
            break;
        }
      }
      function getPossibleStandardName(propName) {
        {
          var lowerCasedName = propName.toLowerCase();
          if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            return null;
          }
          return possibleStandardNames[lowerCasedName] || null;
        }
      }
      function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
        var isCustomComponentTag;
        var extraAttributeNames;
        {
          isCustomComponentTag = isCustomComponent(tag, rawProps);
          validatePropertiesInDevelopment(tag, rawProps);
        }
        switch (tag) {
          case "dialog":
            listenToNonDelegatedEvent("cancel", domElement);
            listenToNonDelegatedEvent("close", domElement);
            break;
          case "iframe":
          case "object":
          case "embed":
            listenToNonDelegatedEvent("load", domElement);
            break;
          case "video":
          case "audio":
            for (var i = 0;i < mediaEventTypes.length; i++) {
              listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
            }
            break;
          case "source":
            listenToNonDelegatedEvent("error", domElement);
            break;
          case "img":
          case "image":
          case "link":
            listenToNonDelegatedEvent("error", domElement);
            listenToNonDelegatedEvent("load", domElement);
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", domElement);
            break;
          case "input":
            initWrapperState(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "option":
            validateProps(domElement, rawProps);
            break;
          case "select":
            initWrapperState$1(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "textarea":
            initWrapperState$2(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
        }
        assertValidProps(tag, rawProps);
        {
          extraAttributeNames = new Set;
          var attributes = domElement.attributes;
          for (var _i = 0;_i < attributes.length; _i++) {
            var name = attributes[_i].name.toLowerCase();
            switch (name) {
              case "value":
                break;
              case "checked":
                break;
              case "selected":
                break;
              default:
                extraAttributeNames.add(attributes[_i].name);
            }
          }
        }
        var updatePayload = null;
        for (var propKey in rawProps) {
          if (!rawProps.hasOwnProperty(propKey)) {
            continue;
          }
          var nextProp = rawProps[propKey];
          if (propKey === CHILDREN) {
            if (typeof nextProp === "string") {
              if (domElement.textContent !== nextProp) {
                if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                  checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                }
                updatePayload = [CHILDREN, nextProp];
              }
            } else if (typeof nextProp === "number") {
              if (domElement.textContent !== "" + nextProp) {
                if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                  checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                }
                updatePayload = [CHILDREN, "" + nextProp];
              }
            }
          } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              if (typeof nextProp !== "function") {
                warnForInvalidEventListener(propKey, nextProp);
              }
              if (propKey === "onScroll") {
                listenToNonDelegatedEvent("scroll", domElement);
              }
            }
          } else if (shouldWarnDev && true && typeof isCustomComponentTag === "boolean") {
            var serverValue = undefined;
            var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
            if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
              ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
              ;
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var serverHTML = domElement.innerHTML;
              var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
              if (nextHtml != null) {
                var expectedHTML = normalizeHTML(domElement, nextHtml);
                if (expectedHTML !== serverHTML) {
                  warnForPropDifference(propKey, serverHTML, expectedHTML);
                }
              }
            } else if (propKey === STYLE) {
              extraAttributeNames.delete(propKey);
              if (canDiffStyleForHydrationWarning) {
                var expectedStyle = createDangerousStringForStyles(nextProp);
                serverValue = domElement.getAttribute("style");
                if (expectedStyle !== serverValue) {
                  warnForPropDifference(propKey, serverValue, expectedStyle);
                }
              }
            } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
              extraAttributeNames.delete(propKey.toLowerCase());
              serverValue = getValueForAttribute(domElement, propKey, nextProp);
              if (nextProp !== serverValue) {
                warnForPropDifference(propKey, serverValue, nextProp);
              }
            } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
              var isMismatchDueToBadCasing = false;
              if (propertyInfo !== null) {
                extraAttributeNames.delete(propertyInfo.attributeName);
                serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
              } else {
                var ownNamespace = parentNamespace;
                if (ownNamespace === HTML_NAMESPACE) {
                  ownNamespace = getIntrinsicNamespace(tag);
                }
                if (ownNamespace === HTML_NAMESPACE) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                } else {
                  var standardName = getPossibleStandardName(propKey);
                  if (standardName !== null && standardName !== propKey) {
                    isMismatchDueToBadCasing = true;
                    extraAttributeNames.delete(standardName);
                  }
                  extraAttributeNames.delete(propKey);
                }
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
              }
              var dontWarnCustomElement = enableCustomElementPropertySupport;
              if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                warnForPropDifference(propKey, serverValue, nextProp);
              }
            }
          }
        }
        {
          if (shouldWarnDev) {
            if (extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
              warnForExtraAttributes(extraAttributeNames);
            }
          }
        }
        switch (tag) {
          case "input":
            track(domElement);
            postMountWrapper(domElement, rawProps, true);
            break;
          case "textarea":
            track(domElement);
            postMountWrapper$3(domElement);
            break;
          case "select":
          case "option":
            break;
          default:
            if (typeof rawProps.onClick === "function") {
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
        }
        return updatePayload;
      }
      function diffHydratedText(textNode, text, isConcurrentMode) {
        var isDifferent = textNode.nodeValue !== text;
        return isDifferent;
      }
      function warnForDeletedHydratableElement(parentNode, child) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
        }
      }
      function warnForDeletedHydratableText(parentNode, child) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
        }
      }
      function warnForInsertedHydratedElement(parentNode, tag, props) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
        }
      }
      function warnForInsertedHydratedText(parentNode, text) {
        {
          if (text === "") {
            return;
          }
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
        }
      }
      function restoreControlledState$3(domElement, tag, props) {
        switch (tag) {
          case "input":
            restoreControlledState(domElement, props);
            return;
          case "textarea":
            restoreControlledState$2(domElement, props);
            return;
          case "select":
            restoreControlledState$1(domElement, props);
            return;
        }
      }
      var validateDOMNesting = function() {
      };
      var updatedAncestorInfo = function() {
      };
      {
        var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
        var inScopeTags = [
          "applet",
          "caption",
          "html",
          "table",
          "td",
          "th",
          "marquee",
          "object",
          "template",
          "foreignObject",
          "desc",
          "title"
        ];
        var buttonScopeTags = inScopeTags.concat(["button"]);
        var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
        var emptyAncestorInfo = {
          current: null,
          formTag: null,
          aTagInScope: null,
          buttonTagInScope: null,
          nobrTagInScope: null,
          pTagInButtonScope: null,
          listItemTagAutoclosing: null,
          dlItemTagAutoclosing: null
        };
        updatedAncestorInfo = function(oldInfo, tag) {
          var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
          var info = {
            tag
          };
          if (inScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.aTagInScope = null;
            ancestorInfo.buttonTagInScope = null;
            ancestorInfo.nobrTagInScope = null;
          }
          if (buttonScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.pTagInButtonScope = null;
          }
          if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
            ancestorInfo.listItemTagAutoclosing = null;
            ancestorInfo.dlItemTagAutoclosing = null;
          }
          ancestorInfo.current = info;
          if (tag === "form") {
            ancestorInfo.formTag = info;
          }
          if (tag === "a") {
            ancestorInfo.aTagInScope = info;
          }
          if (tag === "button") {
            ancestorInfo.buttonTagInScope = info;
          }
          if (tag === "nobr") {
            ancestorInfo.nobrTagInScope = info;
          }
          if (tag === "p") {
            ancestorInfo.pTagInButtonScope = info;
          }
          if (tag === "li") {
            ancestorInfo.listItemTagAutoclosing = info;
          }
          if (tag === "dd" || tag === "dt") {
            ancestorInfo.dlItemTagAutoclosing = info;
          }
          return ancestorInfo;
        };
        var isTagValidWithParent = function(tag, parentTag) {
          switch (parentTag) {
            case "select":
              return tag === "option" || tag === "optgroup" || tag === "#text";
            case "optgroup":
              return tag === "option" || tag === "#text";
            case "option":
              return tag === "#text";
            case "tr":
              return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
            case "tbody":
            case "thead":
            case "tfoot":
              return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
            case "colgroup":
              return tag === "col" || tag === "template";
            case "table":
              return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
            case "head":
              return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
            case "html":
              return tag === "head" || tag === "body" || tag === "frameset";
            case "frameset":
              return tag === "frame";
            case "#document":
              return tag === "html";
          }
          switch (tag) {
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
            case "rp":
            case "rt":
              return impliedEndTags.indexOf(parentTag) === -1;
            case "body":
            case "caption":
            case "col":
            case "colgroup":
            case "frameset":
            case "frame":
            case "head":
            case "html":
            case "tbody":
            case "td":
            case "tfoot":
            case "th":
            case "thead":
            case "tr":
              return parentTag == null;
          }
          return true;
        };
        var findInvalidAncestorForTag = function(tag, ancestorInfo) {
          switch (tag) {
            case "address":
            case "article":
            case "aside":
            case "blockquote":
            case "center":
            case "details":
            case "dialog":
            case "dir":
            case "div":
            case "dl":
            case "fieldset":
            case "figcaption":
            case "figure":
            case "footer":
            case "header":
            case "hgroup":
            case "main":
            case "menu":
            case "nav":
            case "ol":
            case "p":
            case "section":
            case "summary":
            case "ul":
            case "pre":
            case "listing":
            case "table":
            case "hr":
            case "xmp":
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              return ancestorInfo.pTagInButtonScope;
            case "form":
              return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case "li":
              return ancestorInfo.listItemTagAutoclosing;
            case "dd":
            case "dt":
              return ancestorInfo.dlItemTagAutoclosing;
            case "button":
              return ancestorInfo.buttonTagInScope;
            case "a":
              return ancestorInfo.aTagInScope;
            case "nobr":
              return ancestorInfo.nobrTagInScope;
          }
          return null;
        };
        var didWarn$1 = {};
        validateDOMNesting = function(childTag, childText, ancestorInfo) {
          ancestorInfo = ancestorInfo || emptyAncestorInfo;
          var parentInfo = ancestorInfo.current;
          var parentTag = parentInfo && parentInfo.tag;
          if (childText != null) {
            if (childTag != null) {
              error("validateDOMNesting: when childText is passed, childTag should be null");
            }
            childTag = "#text";
          }
          var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
          var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
          var invalidParentOrAncestor = invalidParent || invalidAncestor;
          if (!invalidParentOrAncestor) {
            return;
          }
          var ancestorTag = invalidParentOrAncestor.tag;
          var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
          if (didWarn$1[warnKey]) {
            return;
          }
          didWarn$1[warnKey] = true;
          var tagDisplayName = childTag;
          var whitespaceInfo = "";
          if (childTag === "#text") {
            if (/\S/.test(childText)) {
              tagDisplayName = "Text nodes";
            } else {
              tagDisplayName = "Whitespace text nodes";
              whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
            }
          } else {
            tagDisplayName = "<" + childTag + ">";
          }
          if (invalidParent) {
            var info = "";
            if (ancestorTag === "table" && childTag === "tr") {
              info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
            }
            error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
          } else {
            error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
          }
        };
      }
      var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
      var SUSPENSE_START_DATA = "$";
      var SUSPENSE_END_DATA = "/$";
      var SUSPENSE_PENDING_START_DATA = "$?";
      var SUSPENSE_FALLBACK_START_DATA = "$!";
      var STYLE$1 = "style";
      var eventsEnabled = null;
      var selectionInformation = null;
      function getRootHostContext(rootContainerInstance) {
        var type;
        var namespace;
        var nodeType = rootContainerInstance.nodeType;
        switch (nodeType) {
          case DOCUMENT_NODE:
          case DOCUMENT_FRAGMENT_NODE: {
            type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
            var root2 = rootContainerInstance.documentElement;
            namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
            break;
          }
          default: {
            var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
            var ownNamespace = container.namespaceURI || null;
            type = container.tagName;
            namespace = getChildNamespace(ownNamespace, type);
            break;
          }
        }
        {
          var validatedTag = type.toLowerCase();
          var ancestorInfo = updatedAncestorInfo(null, validatedTag);
          return {
            namespace,
            ancestorInfo
          };
        }
      }
      function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        {
          var parentHostContextDev = parentHostContext;
          var namespace = getChildNamespace(parentHostContextDev.namespace, type);
          var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
          return {
            namespace,
            ancestorInfo
          };
        }
      }
      function getPublicInstance(instance) {
        return instance;
      }
      function prepareForCommit(containerInfo) {
        eventsEnabled = isEnabled();
        selectionInformation = getSelectionInformation();
        var activeInstance = null;
        setEnabled(false);
        return activeInstance;
      }
      function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation);
        setEnabled(eventsEnabled);
        eventsEnabled = null;
        selectionInformation = null;
      }
      function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var parentNamespace;
        {
          var hostContextDev = hostContext;
          validateDOMNesting(type, null, hostContextDev.ancestorInfo);
          if (typeof props.children === "string" || typeof props.children === "number") {
            var string = "" + props.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
          }
          parentNamespace = hostContextDev.namespace;
        }
        var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
        precacheFiberNode(internalInstanceHandle, domElement);
        updateFiberProps(domElement, props);
        return domElement;
      }
      function appendInitialChild(parentInstance, child) {
        parentInstance.appendChild(child);
      }
      function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
        setInitialProperties(domElement, type, props, rootContainerInstance);
        switch (type) {
          case "button":
          case "input":
          case "select":
          case "textarea":
            return !!props.autoFocus;
          case "img":
            return true;
          default:
            return false;
        }
      }
      function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
        {
          var hostContextDev = hostContext;
          if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
            var string = "" + newProps.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
          }
        }
        return diffProperties(domElement, type, oldProps, newProps);
      }
      function shouldSetTextContent(type, props) {
        return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
      }
      function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        {
          var hostContextDev = hostContext;
          validateDOMNesting(null, text, hostContextDev.ancestorInfo);
        }
        var textNode = createTextNode(text, rootContainerInstance);
        precacheFiberNode(internalInstanceHandle, textNode);
        return textNode;
      }
      function getCurrentEventPriority() {
        var currentEvent = window.event;
        if (currentEvent === undefined) {
          return DefaultEventPriority;
        }
        return getEventPriority(currentEvent.type);
      }
      var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : undefined;
      var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : undefined;
      var noTimeout = -1;
      var localPromise = typeof Promise === "function" ? Promise : undefined;
      var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
        return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
      } : scheduleTimeout;
      function handleErrorInNextTick(error2) {
        setTimeout(function() {
          throw error2;
        });
      }
      function commitMount(domElement, type, newProps, internalInstanceHandle) {
        switch (type) {
          case "button":
          case "input":
          case "select":
          case "textarea":
            if (newProps.autoFocus) {
              domElement.focus();
            }
            return;
          case "img": {
            if (newProps.src) {
              domElement.src = newProps.src;
            }
            return;
          }
        }
      }
      function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
        updateProperties(domElement, updatePayload, type, oldProps, newProps);
        updateFiberProps(domElement, newProps);
      }
      function resetTextContent(domElement) {
        setTextContent(domElement, "");
      }
      function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
      }
      function appendChild(parentInstance, child) {
        parentInstance.appendChild(child);
      }
      function appendChildToContainer(container, child) {
        var parentNode;
        if (container.nodeType === COMMENT_NODE) {
          parentNode = container.parentNode;
          parentNode.insertBefore(child, container);
        } else {
          parentNode = container;
          parentNode.appendChild(child);
        }
        var reactRootContainer = container._reactRootContainer;
        if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
          trapClickOnNonInteractiveElement(parentNode);
        }
      }
      function insertBefore(parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild);
      }
      function insertInContainerBefore(container, child, beforeChild) {
        if (container.nodeType === COMMENT_NODE) {
          container.parentNode.insertBefore(child, beforeChild);
        } else {
          container.insertBefore(child, beforeChild);
        }
      }
      function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
      }
      function removeChildFromContainer(container, child) {
        if (container.nodeType === COMMENT_NODE) {
          container.parentNode.removeChild(child);
        } else {
          container.removeChild(child);
        }
      }
      function clearSuspenseBoundary(parentInstance, suspenseInstance) {
        var node = suspenseInstance;
        var depth = 0;
        do {
          var nextNode = node.nextSibling;
          parentInstance.removeChild(node);
          if (nextNode && nextNode.nodeType === COMMENT_NODE) {
            var data = nextNode.data;
            if (data === SUSPENSE_END_DATA) {
              if (depth === 0) {
                parentInstance.removeChild(nextNode);
                retryIfBlockedOn(suspenseInstance);
                return;
              } else {
                depth--;
              }
            } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
              depth++;
            }
          }
          node = nextNode;
        } while (node);
        retryIfBlockedOn(suspenseInstance);
      }
      function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
        if (container.nodeType === COMMENT_NODE) {
          clearSuspenseBoundary(container.parentNode, suspenseInstance);
        } else if (container.nodeType === ELEMENT_NODE) {
          clearSuspenseBoundary(container, suspenseInstance);
        }
        retryIfBlockedOn(container);
      }
      function hideInstance(instance) {
        instance = instance;
        var style2 = instance.style;
        if (typeof style2.setProperty === "function") {
          style2.setProperty("display", "none", "important");
        } else {
          style2.display = "none";
        }
      }
      function hideTextInstance(textInstance) {
        textInstance.nodeValue = "";
      }
      function unhideInstance(instance, props) {
        instance = instance;
        var styleProp = props[STYLE$1];
        var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
        instance.style.display = dangerousStyleValue("display", display);
      }
      function unhideTextInstance(textInstance, text) {
        textInstance.nodeValue = text;
      }
      function clearContainer(container) {
        if (container.nodeType === ELEMENT_NODE) {
          container.textContent = "";
        } else if (container.nodeType === DOCUMENT_NODE) {
          if (container.documentElement) {
            container.removeChild(container.documentElement);
          }
        }
      }
      function canHydrateInstance(instance, type, props) {
        if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
          return null;
        }
        return instance;
      }
      function canHydrateTextInstance(instance, text) {
        if (text === "" || instance.nodeType !== TEXT_NODE) {
          return null;
        }
        return instance;
      }
      function canHydrateSuspenseInstance(instance) {
        if (instance.nodeType !== COMMENT_NODE) {
          return null;
        }
        return instance;
      }
      function isSuspenseInstancePending(instance) {
        return instance.data === SUSPENSE_PENDING_START_DATA;
      }
      function isSuspenseInstanceFallback(instance) {
        return instance.data === SUSPENSE_FALLBACK_START_DATA;
      }
      function getSuspenseInstanceFallbackErrorDetails(instance) {
        var dataset = instance.nextSibling && instance.nextSibling.dataset;
        var digest, message, stack;
        if (dataset) {
          digest = dataset.dgst;
          {
            message = dataset.msg;
            stack = dataset.stck;
          }
        }
        {
          return {
            message,
            digest,
            stack
          };
        }
      }
      function registerSuspenseInstanceRetry(instance, callback) {
        instance._reactRetry = callback;
      }
      function getNextHydratable(node) {
        for (;node != null; node = node.nextSibling) {
          var nodeType = node.nodeType;
          if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
            break;
          }
          if (nodeType === COMMENT_NODE) {
            var nodeData = node.data;
            if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
              break;
            }
            if (nodeData === SUSPENSE_END_DATA) {
              return null;
            }
          }
        }
        return node;
      }
      function getNextHydratableSibling(instance) {
        return getNextHydratable(instance.nextSibling);
      }
      function getFirstHydratableChild(parentInstance) {
        return getNextHydratable(parentInstance.firstChild);
      }
      function getFirstHydratableChildWithinContainer(parentContainer) {
        return getNextHydratable(parentContainer.firstChild);
      }
      function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
        return getNextHydratable(parentInstance.nextSibling);
      }
      function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, instance);
        updateFiberProps(instance, props);
        var parentNamespace;
        {
          var hostContextDev = hostContext;
          parentNamespace = hostContextDev.namespace;
        }
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
      }
      function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, textInstance);
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedText(textInstance, text);
      }
      function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, suspenseInstance);
      }
      function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        var node = suspenseInstance.nextSibling;
        var depth = 0;
        while (node) {
          if (node.nodeType === COMMENT_NODE) {
            var data = node.data;
            if (data === SUSPENSE_END_DATA) {
              if (depth === 0) {
                return getNextHydratableSibling(node);
              } else {
                depth--;
              }
            } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
              depth++;
            }
          }
          node = node.nextSibling;
        }
        return null;
      }
      function getParentSuspenseInstance(targetInstance) {
        var node = targetInstance.previousSibling;
        var depth = 0;
        while (node) {
          if (node.nodeType === COMMENT_NODE) {
            var data = node.data;
            if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
              if (depth === 0) {
                return node;
              } else {
                depth--;
              }
            } else if (data === SUSPENSE_END_DATA) {
              depth++;
            }
          }
          node = node.previousSibling;
        }
        return null;
      }
      function commitHydratedContainer(container) {
        retryIfBlockedOn(container);
      }
      function commitHydratedSuspenseInstance(suspenseInstance) {
        retryIfBlockedOn(suspenseInstance);
      }
      function shouldDeleteUnhydratedTailInstances(parentType) {
        return parentType !== "head" && parentType !== "body";
      }
      function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
        var shouldWarnDev = true;
        checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
      }
      function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
          var shouldWarnDev = true;
          checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
        }
      }
      function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
        {
          if (instance.nodeType === ELEMENT_NODE) {
            warnForDeletedHydratableElement(parentContainer, instance);
          } else if (instance.nodeType === COMMENT_NODE)
            ;
          else {
            warnForDeletedHydratableText(parentContainer, instance);
          }
        }
      }
      function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
        {
          var parentNode = parentInstance.parentNode;
          if (parentNode !== null) {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentNode, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentNode, instance);
            }
          }
        }
      }
      function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
        {
          if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentInstance, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentInstance, instance);
            }
          }
        }
      }
      function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
        {
          warnForInsertedHydratedElement(parentContainer, type);
        }
      }
      function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
        {
          warnForInsertedHydratedText(parentContainer, text);
        }
      }
      function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
        {
          var parentNode = parentInstance.parentNode;
          if (parentNode !== null)
            warnForInsertedHydratedElement(parentNode, type);
        }
      }
      function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
        {
          var parentNode = parentInstance.parentNode;
          if (parentNode !== null)
            warnForInsertedHydratedText(parentNode, text);
        }
      }
      function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
        {
          if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedElement(parentInstance, type);
          }
        }
      }
      function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
        {
          if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedText(parentInstance, text);
          }
        }
      }
      function errorHydratingContainer(parentContainer) {
        {
          error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
        }
      }
      function preparePortalMount(portalInstance) {
        listenToAllSupportedEvents(portalInstance);
      }
      var randomKey = Math.random().toString(36).slice(2);
      var internalInstanceKey = "__reactFiber$" + randomKey;
      var internalPropsKey = "__reactProps$" + randomKey;
      var internalContainerInstanceKey = "__reactContainer$" + randomKey;
      var internalEventHandlersKey = "__reactEvents$" + randomKey;
      var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
      var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
      function detachDeletedInstance(node) {
        delete node[internalInstanceKey];
        delete node[internalPropsKey];
        delete node[internalEventHandlersKey];
        delete node[internalEventHandlerListenersKey];
        delete node[internalEventHandlesSetKey];
      }
      function precacheFiberNode(hostInst, node) {
        node[internalInstanceKey] = hostInst;
      }
      function markContainerAsRoot(hostRoot, node) {
        node[internalContainerInstanceKey] = hostRoot;
      }
      function unmarkContainerAsRoot(node) {
        node[internalContainerInstanceKey] = null;
      }
      function isContainerMarkedAsRoot(node) {
        return !!node[internalContainerInstanceKey];
      }
      function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst) {
          return targetInst;
        }
        var parentNode = targetNode.parentNode;
        while (parentNode) {
          targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
          if (targetInst) {
            var alternate = targetInst.alternate;
            if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
              var suspenseInstance = getParentSuspenseInstance(targetNode);
              while (suspenseInstance !== null) {
                var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                if (targetSuspenseInst) {
                  return targetSuspenseInst;
                }
                suspenseInstance = getParentSuspenseInstance(suspenseInstance);
              }
            }
            return targetInst;
          }
          targetNode = parentNode;
          parentNode = targetNode.parentNode;
        }
        return null;
      }
      function getInstanceFromNode(node) {
        var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
        if (inst) {
          if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
            return inst;
          } else {
            return null;
          }
        }
        return null;
      }
      function getNodeFromInstance(inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) {
          return inst.stateNode;
        }
        throw new Error("getNodeFromInstance: Invalid argument.");
      }
      function getFiberCurrentPropsFromNode(node) {
        return node[internalPropsKey] || null;
      }
      function updateFiberProps(node, props) {
        node[internalPropsKey] = props;
      }
      function getEventListenerSet(node) {
        var elementListenerSet = node[internalEventHandlersKey];
        if (elementListenerSet === undefined) {
          elementListenerSet = node[internalEventHandlersKey] = new Set;
        }
        return elementListenerSet;
      }
      var loggedTypeFailures = {};
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes(typeSpecs, values, location, componentName, element) {
        {
          var has2 = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs) {
            if (has2(typeSpecs, typeSpecName)) {
              var error$1 = undefined;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }
      var valueStack = [];
      var fiberStack;
      {
        fiberStack = [];
      }
      var index = -1;
      function createCursor(defaultValue) {
        return {
          current: defaultValue
        };
      }
      function pop(cursor, fiber) {
        if (index < 0) {
          {
            error("Unexpected pop.");
          }
          return;
        }
        {
          if (fiber !== fiberStack[index]) {
            error("Unexpected Fiber popped.");
          }
        }
        cursor.current = valueStack[index];
        valueStack[index] = null;
        {
          fiberStack[index] = null;
        }
        index--;
      }
      function push(cursor, value, fiber) {
        index++;
        valueStack[index] = cursor.current;
        {
          fiberStack[index] = fiber;
        }
        cursor.current = value;
      }
      var warnedAboutMissingGetChildContext;
      {
        warnedAboutMissingGetChildContext = {};
      }
      var emptyContextObject = {};
      {
        Object.freeze(emptyContextObject);
      }
      var contextStackCursor = createCursor(emptyContextObject);
      var didPerformWorkStackCursor = createCursor(false);
      var previousContext = emptyContextObject;
      function getUnmaskedContext(workInProgress2, Component2, didPushOwnContextIfProvider) {
        {
          if (didPushOwnContextIfProvider && isContextProvider(Component2)) {
            return previousContext;
          }
          return contextStackCursor.current;
        }
      }
      function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
        {
          var instance = workInProgress2.stateNode;
          instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
          instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
        }
      }
      function getMaskedContext(workInProgress2, unmaskedContext) {
        {
          var type = workInProgress2.type;
          var contextTypes = type.contextTypes;
          if (!contextTypes) {
            return emptyContextObject;
          }
          var instance = workInProgress2.stateNode;
          if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
            return instance.__reactInternalMemoizedMaskedChildContext;
          }
          var context = {};
          for (var key in contextTypes) {
            context[key] = unmaskedContext[key];
          }
          {
            var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
            checkPropTypes(contextTypes, context, "context", name);
          }
          if (instance) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return context;
        }
      }
      function hasContextChanged() {
        {
          return didPerformWorkStackCursor.current;
        }
      }
      function isContextProvider(type) {
        {
          var childContextTypes = type.childContextTypes;
          return childContextTypes !== null && childContextTypes !== undefined;
        }
      }
      function popContext(fiber) {
        {
          pop(didPerformWorkStackCursor, fiber);
          pop(contextStackCursor, fiber);
        }
      }
      function popTopLevelContextObject(fiber) {
        {
          pop(didPerformWorkStackCursor, fiber);
          pop(contextStackCursor, fiber);
        }
      }
      function pushTopLevelContextObject(fiber, context, didChange) {
        {
          if (contextStackCursor.current !== emptyContextObject) {
            throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
          }
          push(contextStackCursor, context, fiber);
          push(didPerformWorkStackCursor, didChange, fiber);
        }
      }
      function processChildContext(fiber, type, parentContext) {
        {
          var instance = fiber.stateNode;
          var childContextTypes = type.childContextTypes;
          if (typeof instance.getChildContext !== "function") {
            {
              var componentName = getComponentNameFromFiber(fiber) || "Unknown";
              if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
              }
            }
            return parentContext;
          }
          var childContext = instance.getChildContext();
          for (var contextKey in childContext) {
            if (!(contextKey in childContextTypes)) {
              throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
            }
          }
          {
            var name = getComponentNameFromFiber(fiber) || "Unknown";
            checkPropTypes(childContextTypes, childContext, "child context", name);
          }
          return assign({}, parentContext, childContext);
        }
      }
      function pushContextProvider(workInProgress2) {
        {
          var instance = workInProgress2.stateNode;
          var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
          previousContext = contextStackCursor.current;
          push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
          push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
          return true;
        }
      }
      function invalidateContextProvider(workInProgress2, type, didChange) {
        {
          var instance = workInProgress2.stateNode;
          if (!instance) {
            throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
          }
          if (didChange) {
            var mergedContext = processChildContext(workInProgress2, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext;
            pop(didPerformWorkStackCursor, workInProgress2);
            pop(contextStackCursor, workInProgress2);
            push(contextStackCursor, mergedContext, workInProgress2);
            push(didPerformWorkStackCursor, didChange, workInProgress2);
          } else {
            pop(didPerformWorkStackCursor, workInProgress2);
            push(didPerformWorkStackCursor, didChange, workInProgress2);
          }
        }
      }
      function findCurrentUnmaskedContext(fiber) {
        {
          if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
            throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
          }
          var node = fiber;
          do {
            switch (node.tag) {
              case HostRoot:
                return node.stateNode.context;
              case ClassComponent: {
                var Component2 = node.type;
                if (isContextProvider(Component2)) {
                  return node.stateNode.__reactInternalMemoizedMergedChildContext;
                }
                break;
              }
            }
            node = node.return;
          } while (node !== null);
          throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      var LegacyRoot = 0;
      var ConcurrentRoot = 1;
      var syncQueue = null;
      var includesLegacySyncCallbacks = false;
      var isFlushingSyncQueue = false;
      function scheduleSyncCallback(callback) {
        if (syncQueue === null) {
          syncQueue = [callback];
        } else {
          syncQueue.push(callback);
        }
      }
      function scheduleLegacySyncCallback(callback) {
        includesLegacySyncCallbacks = true;
        scheduleSyncCallback(callback);
      }
      function flushSyncCallbacksOnlyInLegacyMode() {
        if (includesLegacySyncCallbacks) {
          flushSyncCallbacks();
        }
      }
      function flushSyncCallbacks() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
          isFlushingSyncQueue = true;
          var i = 0;
          var previousUpdatePriority = getCurrentUpdatePriority();
          try {
            var isSync = true;
            var queue = syncQueue;
            setCurrentUpdatePriority(DiscreteEventPriority);
            for (;i < queue.length; i++) {
              var callback = queue[i];
              do {
                callback = callback(isSync);
              } while (callback !== null);
            }
            syncQueue = null;
            includesLegacySyncCallbacks = false;
          } catch (error2) {
            if (syncQueue !== null) {
              syncQueue = syncQueue.slice(i + 1);
            }
            scheduleCallback(ImmediatePriority, flushSyncCallbacks);
            throw error2;
          } finally {
            setCurrentUpdatePriority(previousUpdatePriority);
            isFlushingSyncQueue = false;
          }
        }
        return null;
      }
      var forkStack = [];
      var forkStackIndex = 0;
      var treeForkProvider = null;
      var treeForkCount = 0;
      var idStack = [];
      var idStackIndex = 0;
      var treeContextProvider = null;
      var treeContextId = 1;
      var treeContextOverflow = "";
      function isForkedChild(workInProgress2) {
        warnIfNotHydrating();
        return (workInProgress2.flags & Forked) !== NoFlags;
      }
      function getForksAtLevel(workInProgress2) {
        warnIfNotHydrating();
        return treeForkCount;
      }
      function getTreeId() {
        var overflow = treeContextOverflow;
        var idWithLeadingBit = treeContextId;
        var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
        return id.toString(32) + overflow;
      }
      function pushTreeFork(workInProgress2, totalChildren) {
        warnIfNotHydrating();
        forkStack[forkStackIndex++] = treeForkCount;
        forkStack[forkStackIndex++] = treeForkProvider;
        treeForkProvider = workInProgress2;
        treeForkCount = totalChildren;
      }
      function pushTreeId(workInProgress2, totalChildren, index2) {
        warnIfNotHydrating();
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextProvider = workInProgress2;
        var baseIdWithLeadingBit = treeContextId;
        var baseOverflow = treeContextOverflow;
        var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
        var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
        var slot = index2 + 1;
        var length = getBitLength(totalChildren) + baseLength;
        if (length > 30) {
          var numberOfOverflowBits = baseLength - baseLength % 5;
          var newOverflowBits = (1 << numberOfOverflowBits) - 1;
          var newOverflow = (baseId & newOverflowBits).toString(32);
          var restOfBaseId = baseId >> numberOfOverflowBits;
          var restOfBaseLength = baseLength - numberOfOverflowBits;
          var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
          var restOfNewBits = slot << restOfBaseLength;
          var id = restOfNewBits | restOfBaseId;
          var overflow = newOverflow + baseOverflow;
          treeContextId = 1 << restOfLength | id;
          treeContextOverflow = overflow;
        } else {
          var newBits = slot << baseLength;
          var _id = newBits | baseId;
          var _overflow = baseOverflow;
          treeContextId = 1 << length | _id;
          treeContextOverflow = _overflow;
        }
      }
      function pushMaterializedTreeId(workInProgress2) {
        warnIfNotHydrating();
        var returnFiber = workInProgress2.return;
        if (returnFiber !== null) {
          var numberOfForks = 1;
          var slotIndex = 0;
          pushTreeFork(workInProgress2, numberOfForks);
          pushTreeId(workInProgress2, numberOfForks, slotIndex);
        }
      }
      function getBitLength(number) {
        return 32 - clz32(number);
      }
      function getLeadingBit(id) {
        return 1 << getBitLength(id) - 1;
      }
      function popTreeContext(workInProgress2) {
        while (workInProgress2 === treeForkProvider) {
          treeForkProvider = forkStack[--forkStackIndex];
          forkStack[forkStackIndex] = null;
          treeForkCount = forkStack[--forkStackIndex];
          forkStack[forkStackIndex] = null;
        }
        while (workInProgress2 === treeContextProvider) {
          treeContextProvider = idStack[--idStackIndex];
          idStack[idStackIndex] = null;
          treeContextOverflow = idStack[--idStackIndex];
          idStack[idStackIndex] = null;
          treeContextId = idStack[--idStackIndex];
          idStack[idStackIndex] = null;
        }
      }
      function getSuspendedTreeContext() {
        warnIfNotHydrating();
        if (treeContextProvider !== null) {
          return {
            id: treeContextId,
            overflow: treeContextOverflow
          };
        } else {
          return null;
        }
      }
      function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
        warnIfNotHydrating();
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextId = suspendedContext.id;
        treeContextOverflow = suspendedContext.overflow;
        treeContextProvider = workInProgress2;
      }
      function warnIfNotHydrating() {
        {
          if (!getIsHydrating()) {
            error("Expected to be hydrating. This is a bug in React. Please file an issue.");
          }
        }
      }
      var hydrationParentFiber = null;
      var nextHydratableInstance = null;
      var isHydrating = false;
      var didSuspendOrErrorDEV = false;
      var hydrationErrors = null;
      function warnIfHydrating() {
        {
          if (isHydrating) {
            error("We should not be hydrating here. This is a bug in React. Please file a bug.");
          }
        }
      }
      function markDidThrowWhileHydratingDEV() {
        {
          didSuspendOrErrorDEV = true;
        }
      }
      function didSuspendOrErrorWhileHydratingDEV() {
        {
          return didSuspendOrErrorDEV;
        }
      }
      function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        hydrationErrors = null;
        didSuspendOrErrorDEV = false;
        return true;
      }
      function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
        nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        hydrationErrors = null;
        didSuspendOrErrorDEV = false;
        if (treeContext !== null) {
          restoreSuspendedTreeContext(fiber, treeContext);
        }
        return true;
      }
      function warnUnhydratedInstance(returnFiber, instance) {
        {
          switch (returnFiber.tag) {
            case HostRoot: {
              didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
              break;
            }
            case HostComponent: {
              var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
              didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, isConcurrentMode);
              break;
            }
            case SuspenseComponent: {
              var suspenseState = returnFiber.memoizedState;
              if (suspenseState.dehydrated !== null)
                didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
              break;
            }
          }
        }
      }
      function deleteHydratableInstance(returnFiber, instance) {
        warnUnhydratedInstance(returnFiber, instance);
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance;
        childToDelete.return = returnFiber;
        var deletions = returnFiber.deletions;
        if (deletions === null) {
          returnFiber.deletions = [childToDelete];
          returnFiber.flags |= ChildDeletion;
        } else {
          deletions.push(childToDelete);
        }
      }
      function warnNonhydratedInstance(returnFiber, fiber) {
        {
          if (didSuspendOrErrorDEV) {
            return;
          }
          switch (returnFiber.tag) {
            case HostRoot: {
              var parentContainer = returnFiber.stateNode.containerInfo;
              switch (fiber.tag) {
                case HostComponent:
                  var type = fiber.type;
                  var props = fiber.pendingProps;
                  didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                  break;
                case HostText:
                  var text = fiber.pendingProps;
                  didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                  break;
              }
              break;
            }
            case HostComponent: {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;
              switch (fiber.tag) {
                case HostComponent: {
                  var _type = fiber.type;
                  var _props = fiber.pendingProps;
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, isConcurrentMode);
                  break;
                }
                case HostText: {
                  var _text = fiber.pendingProps;
                  var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, _isConcurrentMode);
                  break;
                }
              }
              break;
            }
            case SuspenseComponent: {
              var suspenseState = returnFiber.memoizedState;
              var _parentInstance = suspenseState.dehydrated;
              if (_parentInstance !== null)
                switch (fiber.tag) {
                  case HostComponent:
                    var _type2 = fiber.type;
                    var _props2 = fiber.pendingProps;
                    didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                    break;
                  case HostText:
                    var _text2 = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                    break;
                }
              break;
            }
            default:
              return;
          }
        }
      }
      function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.flags = fiber.flags & ~Hydrating | Placement;
        warnNonhydratedInstance(returnFiber, fiber);
      }
      function tryHydrate(fiber, nextInstance) {
        switch (fiber.tag) {
          case HostComponent: {
            var type = fiber.type;
            var props = fiber.pendingProps;
            var instance = canHydrateInstance(nextInstance, type);
            if (instance !== null) {
              fiber.stateNode = instance;
              hydrationParentFiber = fiber;
              nextHydratableInstance = getFirstHydratableChild(instance);
              return true;
            }
            return false;
          }
          case HostText: {
            var text = fiber.pendingProps;
            var textInstance = canHydrateTextInstance(nextInstance, text);
            if (textInstance !== null) {
              fiber.stateNode = textInstance;
              hydrationParentFiber = fiber;
              nextHydratableInstance = null;
              return true;
            }
            return false;
          }
          case SuspenseComponent: {
            var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
            if (suspenseInstance !== null) {
              var suspenseState = {
                dehydrated: suspenseInstance,
                treeContext: getSuspendedTreeContext(),
                retryLane: OffscreenLane
              };
              fiber.memoizedState = suspenseState;
              var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
              dehydratedFragment.return = fiber;
              fiber.child = dehydratedFragment;
              hydrationParentFiber = fiber;
              nextHydratableInstance = null;
              return true;
            }
            return false;
          }
          default:
            return false;
        }
      }
      function shouldClientRenderOnMismatch(fiber) {
        return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
      }
      function throwOnHydrationMismatch(fiber) {
        throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
      }
      function tryToClaimNextHydratableInstance(fiber) {
        if (!isHydrating) {
          return;
        }
        var nextInstance = nextHydratableInstance;
        if (!nextInstance) {
          if (shouldClientRenderOnMismatch(fiber)) {
            warnNonhydratedInstance(hydrationParentFiber, fiber);
            throwOnHydrationMismatch();
          }
          insertNonHydratedInstance(hydrationParentFiber, fiber);
          isHydrating = false;
          hydrationParentFiber = fiber;
          return;
        }
        var firstAttemptedInstance = nextInstance;
        if (!tryHydrate(fiber, nextInstance)) {
          if (shouldClientRenderOnMismatch(fiber)) {
            warnNonhydratedInstance(hydrationParentFiber, fiber);
            throwOnHydrationMismatch();
          }
          nextInstance = getNextHydratableSibling(firstAttemptedInstance);
          var prevHydrationParentFiber = hydrationParentFiber;
          if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
        }
      }
      function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        var instance = fiber.stateNode;
        var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
        var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
        fiber.updateQueue = updatePayload;
        if (updatePayload !== null) {
          return true;
        }
        return false;
      }
      function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode;
        var textContent = fiber.memoizedProps;
        var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        if (shouldUpdate) {
          var returnFiber = hydrationParentFiber;
          if (returnFiber !== null) {
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, isConcurrentMode);
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, _isConcurrentMode2);
                break;
              }
            }
          }
        }
        return shouldUpdate;
      }
      function prepareToHydrateHostSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) {
          throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        }
        hydrateSuspenseInstance(suspenseInstance, fiber);
      }
      function skipPastDehydratedSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) {
          throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        }
        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
      }
      function popToNextHostParent(fiber) {
        var parent = fiber.return;
        while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
          parent = parent.return;
        }
        hydrationParentFiber = parent;
      }
      function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) {
          return false;
        }
        if (!isHydrating) {
          popToNextHostParent(fiber);
          isHydrating = true;
          return false;
        }
        if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
          var nextInstance = nextHydratableInstance;
          if (nextInstance) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnIfUnhydratedTailNodes(fiber);
              throwOnHydrationMismatch();
            } else {
              while (nextInstance) {
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
              }
            }
          }
        }
        popToNextHostParent(fiber);
        if (fiber.tag === SuspenseComponent) {
          nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
        } else {
          nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        }
        return true;
      }
      function hasUnhydratedTailNodes() {
        return isHydrating && nextHydratableInstance !== null;
      }
      function warnIfUnhydratedTailNodes(fiber) {
        var nextInstance = nextHydratableInstance;
        while (nextInstance) {
          warnUnhydratedInstance(fiber, nextInstance);
          nextInstance = getNextHydratableSibling(nextInstance);
        }
      }
      function resetHydrationState() {
        hydrationParentFiber = null;
        nextHydratableInstance = null;
        isHydrating = false;
        didSuspendOrErrorDEV = false;
      }
      function upgradeHydrationErrorsToRecoverable() {
        if (hydrationErrors !== null) {
          queueRecoverableErrors(hydrationErrors);
          hydrationErrors = null;
        }
      }
      function getIsHydrating() {
        return isHydrating;
      }
      function queueHydrationError(error2) {
        if (hydrationErrors === null) {
          hydrationErrors = [error2];
        } else {
          hydrationErrors.push(error2);
        }
      }
      var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
      var NoTransition = null;
      function requestCurrentTransition() {
        return ReactCurrentBatchConfig$1.transition;
      }
      var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function(fiber, instance) {
        },
        flushPendingUnsafeLifecycleWarnings: function() {
        },
        recordLegacyContextWarning: function(fiber, instance) {
        },
        flushLegacyContextWarning: function() {
        },
        discardPendingWarnings: function() {
        }
      };
      {
        var findStrictRoot = function(fiber) {
          var maybeStrictRoot = null;
          var node = fiber;
          while (node !== null) {
            if (node.mode & StrictLegacyMode) {
              maybeStrictRoot = node;
            }
            node = node.return;
          }
          return maybeStrictRoot;
        };
        var setToSortedString = function(set2) {
          var array = [];
          set2.forEach(function(value) {
            array.push(value);
          });
          return array.sort().join(", ");
        };
        var pendingComponentWillMountWarnings = [];
        var pendingUNSAFE_ComponentWillMountWarnings = [];
        var pendingComponentWillReceivePropsWarnings = [];
        var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        var pendingComponentWillUpdateWarnings = [];
        var pendingUNSAFE_ComponentWillUpdateWarnings = [];
        var didWarnAboutUnsafeLifecycles = new Set;
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
          if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
            return;
          }
          if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
            pendingComponentWillMountWarnings.push(fiber);
          }
          if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
            pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
          }
          if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
            pendingComponentWillReceivePropsWarnings.push(fiber);
          }
          if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
          }
          if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
            pendingComponentWillUpdateWarnings.push(fiber);
          }
          if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
            pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
          }
        };
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
          var componentWillMountUniqueNames = new Set;
          if (pendingComponentWillMountWarnings.length > 0) {
            pendingComponentWillMountWarnings.forEach(function(fiber) {
              componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillMountWarnings = [];
          }
          var UNSAFE_componentWillMountUniqueNames = new Set;
          if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
            pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
              UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillMountWarnings = [];
          }
          var componentWillReceivePropsUniqueNames = new Set;
          if (pendingComponentWillReceivePropsWarnings.length > 0) {
            pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
              componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillReceivePropsWarnings = [];
          }
          var UNSAFE_componentWillReceivePropsUniqueNames = new Set;
          if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
              UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          }
          var componentWillUpdateUniqueNames = new Set;
          if (pendingComponentWillUpdateWarnings.length > 0) {
            pendingComponentWillUpdateWarnings.forEach(function(fiber) {
              componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillUpdateWarnings = [];
          }
          var UNSAFE_componentWillUpdateUniqueNames = new Set;
          if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
              UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
          }
          if (UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
          }
          if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
            error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
          }
          if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
            error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
          }
          if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
            warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
          }
          if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
            warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
          }
          if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
            warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
          }
        };
        var pendingLegacyContextWarning = new Map;
        var didWarnAboutLegacyContext = new Set;
        ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
          var strictRoot = findStrictRoot(fiber);
          if (strictRoot === null) {
            error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
            return;
          }
          if (didWarnAboutLegacyContext.has(fiber.type)) {
            return;
          }
          var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
          if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
            if (warningsForRoot === undefined) {
              warningsForRoot = [];
              pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
            }
            warningsForRoot.push(fiber);
          }
        };
        ReactStrictModeWarnings.flushLegacyContextWarning = function() {
          pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
            if (fiberArray.length === 0) {
              return;
            }
            var firstFiber = fiberArray[0];
            var uniqueNames = new Set;
            fiberArray.forEach(function(fiber) {
              uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            try {
              setCurrentFiber(firstFiber);
              error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
            } finally {
              resetCurrentFiber();
            }
          });
        };
        ReactStrictModeWarnings.discardPendingWarnings = function() {
          pendingComponentWillMountWarnings = [];
          pendingUNSAFE_ComponentWillMountWarnings = [];
          pendingComponentWillReceivePropsWarnings = [];
          pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          pendingComponentWillUpdateWarnings = [];
          pendingUNSAFE_ComponentWillUpdateWarnings = [];
          pendingLegacyContextWarning = new Map;
        };
      }
      function resolveDefaultProps(Component2, baseProps) {
        if (Component2 && Component2.defaultProps) {
          var props = assign({}, baseProps);
          var defaultProps = Component2.defaultProps;
          for (var propName in defaultProps) {
            if (props[propName] === undefined) {
              props[propName] = defaultProps[propName];
            }
          }
          return props;
        }
        return baseProps;
      }
      var valueCursor = createCursor(null);
      var rendererSigil;
      {
        rendererSigil = {};
      }
      var currentlyRenderingFiber = null;
      var lastContextDependency = null;
      var lastFullyObservedContext = null;
      var isDisallowedContextReadInDEV = false;
      function resetContextDependencies() {
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastFullyObservedContext = null;
        {
          isDisallowedContextReadInDEV = false;
        }
      }
      function enterDisallowedContextReadInDEV() {
        {
          isDisallowedContextReadInDEV = true;
        }
      }
      function exitDisallowedContextReadInDEV() {
        {
          isDisallowedContextReadInDEV = false;
        }
      }
      function pushProvider(providerFiber, context, nextValue) {
        {
          push(valueCursor, context._currentValue, providerFiber);
          context._currentValue = nextValue;
          {
            if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
              error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
            }
            context._currentRenderer = rendererSigil;
          }
        }
      }
      function popProvider(context, providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber);
        {
          {
            context._currentValue = currentValue;
          }
        }
      }
      function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
        var node = parent;
        while (node !== null) {
          var alternate = node.alternate;
          if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
            node.childLanes = mergeLanes(node.childLanes, renderLanes2);
            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
            }
          } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
            alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
          }
          if (node === propagationRoot) {
            break;
          }
          node = node.return;
        }
        {
          if (node !== propagationRoot) {
            error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
      function propagateContextChange(workInProgress2, context, renderLanes2) {
        {
          propagateContextChange_eager(workInProgress2, context, renderLanes2);
        }
      }
      function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
        var fiber = workInProgress2.child;
        if (fiber !== null) {
          fiber.return = workInProgress2;
        }
        while (fiber !== null) {
          var nextFiber = undefined;
          var list = fiber.dependencies;
          if (list !== null) {
            nextFiber = fiber.child;
            var dependency = list.firstContext;
            while (dependency !== null) {
              if (dependency.context === context) {
                if (fiber.tag === ClassComponent) {
                  var lane = pickArbitraryLane(renderLanes2);
                  var update = createUpdate(NoTimestamp, lane);
                  update.tag = ForceUpdate;
                  var updateQueue = fiber.updateQueue;
                  if (updateQueue === null)
                    ;
                  else {
                    var sharedQueue = updateQueue.shared;
                    var pending = sharedQueue.pending;
                    if (pending === null) {
                      update.next = update;
                    } else {
                      update.next = pending.next;
                      pending.next = update;
                    }
                    sharedQueue.pending = update;
                  }
                }
                fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                var alternate = fiber.alternate;
                if (alternate !== null) {
                  alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                list.lanes = mergeLanes(list.lanes, renderLanes2);
                break;
              }
              dependency = dependency.next;
            }
          } else if (fiber.tag === ContextProvider) {
            nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
          } else if (fiber.tag === DehydratedFragment) {
            var parentSuspense = fiber.return;
            if (parentSuspense === null) {
              throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
            }
            parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
            var _alternate = parentSuspense.alternate;
            if (_alternate !== null) {
              _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
            nextFiber = fiber.sibling;
          } else {
            nextFiber = fiber.child;
          }
          if (nextFiber !== null) {
            nextFiber.return = fiber;
          } else {
            nextFiber = fiber;
            while (nextFiber !== null) {
              if (nextFiber === workInProgress2) {
                nextFiber = null;
                break;
              }
              var sibling = nextFiber.sibling;
              if (sibling !== null) {
                sibling.return = nextFiber.return;
                nextFiber = sibling;
                break;
              }
              nextFiber = nextFiber.return;
            }
          }
          fiber = nextFiber;
        }
      }
      function prepareToReadContext(workInProgress2, renderLanes2) {
        currentlyRenderingFiber = workInProgress2;
        lastContextDependency = null;
        lastFullyObservedContext = null;
        var dependencies = workInProgress2.dependencies;
        if (dependencies !== null) {
          {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
              if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                markWorkInProgressReceivedUpdate();
              }
              dependencies.firstContext = null;
            }
          }
        }
      }
      function readContext(context) {
        {
          if (isDisallowedContextReadInDEV) {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          }
        }
        var value = context._currentValue;
        if (lastFullyObservedContext === context)
          ;
        else {
          var contextItem = {
            context,
            memoizedValue: value,
            next: null
          };
          if (lastContextDependency === null) {
            if (currentlyRenderingFiber === null) {
              throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
            lastContextDependency = contextItem;
            currentlyRenderingFiber.dependencies = {
              lanes: NoLanes,
              firstContext: contextItem
            };
          } else {
            lastContextDependency = lastContextDependency.next = contextItem;
          }
        }
        return value;
      }
      var concurrentQueues = null;
      function pushConcurrentUpdateQueue(queue) {
        if (concurrentQueues === null) {
          concurrentQueues = [queue];
        } else {
          concurrentQueues.push(queue);
        }
      }
      function finishQueueingConcurrentUpdates() {
        if (concurrentQueues !== null) {
          for (var i = 0;i < concurrentQueues.length; i++) {
            var queue = concurrentQueues[i];
            var lastInterleavedUpdate = queue.interleaved;
            if (lastInterleavedUpdate !== null) {
              queue.interleaved = null;
              var firstInterleavedUpdate = lastInterleavedUpdate.next;
              var lastPendingUpdate = queue.pending;
              if (lastPendingUpdate !== null) {
                var firstPendingUpdate = lastPendingUpdate.next;
                lastPendingUpdate.next = firstInterleavedUpdate;
                lastInterleavedUpdate.next = firstPendingUpdate;
              }
              queue.pending = lastInterleavedUpdate;
            }
          }
          concurrentQueues = null;
        }
      }
      function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        if (interleaved === null) {
          update.next = update;
          pushConcurrentUpdateQueue(queue);
        } else {
          update.next = interleaved.next;
          interleaved.next = update;
        }
        queue.interleaved = update;
        return markUpdateLaneFromFiberToRoot(fiber, lane);
      }
      function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        if (interleaved === null) {
          update.next = update;
          pushConcurrentUpdateQueue(queue);
        } else {
          update.next = interleaved.next;
          interleaved.next = update;
        }
        queue.interleaved = update;
      }
      function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        if (interleaved === null) {
          update.next = update;
          pushConcurrentUpdateQueue(queue);
        } else {
          update.next = interleaved.next;
          interleaved.next = update;
        }
        queue.interleaved = update;
        return markUpdateLaneFromFiberToRoot(fiber, lane);
      }
      function enqueueConcurrentRenderForLane(fiber, lane) {
        return markUpdateLaneFromFiberToRoot(fiber, lane);
      }
      var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
      function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
        var alternate = sourceFiber.alternate;
        if (alternate !== null) {
          alternate.lanes = mergeLanes(alternate.lanes, lane);
        }
        {
          if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
            warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
          }
        }
        var node = sourceFiber;
        var parent = sourceFiber.return;
        while (parent !== null) {
          parent.childLanes = mergeLanes(parent.childLanes, lane);
          alternate = parent.alternate;
          if (alternate !== null) {
            alternate.childLanes = mergeLanes(alternate.childLanes, lane);
          } else {
            {
              if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
          }
          node = parent;
          parent = parent.return;
        }
        if (node.tag === HostRoot) {
          var root2 = node.stateNode;
          return root2;
        } else {
          return null;
        }
      }
      var UpdateState = 0;
      var ReplaceState = 1;
      var ForceUpdate = 2;
      var CaptureUpdate = 3;
      var hasForceUpdate = false;
      var didWarnUpdateInsideUpdate;
      var currentlyProcessingQueue;
      {
        didWarnUpdateInsideUpdate = false;
        currentlyProcessingQueue = null;
      }
      function initializeUpdateQueue(fiber) {
        var queue = {
          baseState: fiber.memoizedState,
          firstBaseUpdate: null,
          lastBaseUpdate: null,
          shared: {
            pending: null,
            interleaved: null,
            lanes: NoLanes
          },
          effects: null
        };
        fiber.updateQueue = queue;
      }
      function cloneUpdateQueue(current2, workInProgress2) {
        var queue = workInProgress2.updateQueue;
        var currentQueue = current2.updateQueue;
        if (queue === currentQueue) {
          var clone = {
            baseState: currentQueue.baseState,
            firstBaseUpdate: currentQueue.firstBaseUpdate,
            lastBaseUpdate: currentQueue.lastBaseUpdate,
            shared: currentQueue.shared,
            effects: currentQueue.effects
          };
          workInProgress2.updateQueue = clone;
        }
      }
      function createUpdate(eventTime, lane) {
        var update = {
          eventTime,
          lane,
          tag: UpdateState,
          payload: null,
          callback: null,
          next: null
        };
        return update;
      }
      function enqueueUpdate(fiber, update, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) {
          return null;
        }
        var sharedQueue = updateQueue.shared;
        {
          if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
            error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
            didWarnUpdateInsideUpdate = true;
          }
        }
        if (isUnsafeClassRenderPhaseUpdate()) {
          var pending = sharedQueue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          sharedQueue.pending = update;
          return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
        } else {
          return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
        }
      }
      function entangleTransitions(root2, fiber, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) {
          return;
        }
        var sharedQueue = updateQueue.shared;
        if (isTransitionLane(lane)) {
          var queueLanes = sharedQueue.lanes;
          queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
          var newQueueLanes = mergeLanes(queueLanes, lane);
          sharedQueue.lanes = newQueueLanes;
          markRootEntangled(root2, newQueueLanes);
        }
      }
      function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
        var queue = workInProgress2.updateQueue;
        var current2 = workInProgress2.alternate;
        if (current2 !== null) {
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var newFirst = null;
            var newLast = null;
            var firstBaseUpdate = queue.firstBaseUpdate;
            if (firstBaseUpdate !== null) {
              var update = firstBaseUpdate;
              do {
                var clone = {
                  eventTime: update.eventTime,
                  lane: update.lane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                if (newLast === null) {
                  newFirst = newLast = clone;
                } else {
                  newLast.next = clone;
                  newLast = clone;
                }
                update = update.next;
              } while (update !== null);
              if (newLast === null) {
                newFirst = newLast = capturedUpdate;
              } else {
                newLast.next = capturedUpdate;
                newLast = capturedUpdate;
              }
            } else {
              newFirst = newLast = capturedUpdate;
            }
            queue = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: newFirst,
              lastBaseUpdate: newLast,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = queue;
            return;
          }
        }
        var lastBaseUpdate = queue.lastBaseUpdate;
        if (lastBaseUpdate === null) {
          queue.firstBaseUpdate = capturedUpdate;
        } else {
          lastBaseUpdate.next = capturedUpdate;
        }
        queue.lastBaseUpdate = capturedUpdate;
      }
      function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
        switch (update.tag) {
          case ReplaceState: {
            var payload = update.payload;
            if (typeof payload === "function") {
              {
                enterDisallowedContextReadInDEV();
              }
              var nextState = payload.call(instance, prevState, nextProps);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    payload.call(instance, prevState, nextProps);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                exitDisallowedContextReadInDEV();
              }
              return nextState;
            }
            return payload;
          }
          case CaptureUpdate: {
            workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
          }
          case UpdateState: {
            var _payload = update.payload;
            var partialState;
            if (typeof _payload === "function") {
              {
                enterDisallowedContextReadInDEV();
              }
              partialState = _payload.call(instance, prevState, nextProps);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    _payload.call(instance, prevState, nextProps);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                exitDisallowedContextReadInDEV();
              }
            } else {
              partialState = _payload;
            }
            if (partialState === null || partialState === undefined) {
              return prevState;
            }
            return assign({}, prevState, partialState);
          }
          case ForceUpdate: {
            hasForceUpdate = true;
            return prevState;
          }
        }
        return prevState;
      }
      function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
        var queue = workInProgress2.updateQueue;
        hasForceUpdate = false;
        {
          currentlyProcessingQueue = queue.shared;
        }
        var firstBaseUpdate = queue.firstBaseUpdate;
        var lastBaseUpdate = queue.lastBaseUpdate;
        var pendingQueue = queue.shared.pending;
        if (pendingQueue !== null) {
          queue.shared.pending = null;
          var lastPendingUpdate = pendingQueue;
          var firstPendingUpdate = lastPendingUpdate.next;
          lastPendingUpdate.next = null;
          if (lastBaseUpdate === null) {
            firstBaseUpdate = firstPendingUpdate;
          } else {
            lastBaseUpdate.next = firstPendingUpdate;
          }
          lastBaseUpdate = lastPendingUpdate;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
            if (currentLastBaseUpdate !== lastBaseUpdate) {
              if (currentLastBaseUpdate === null) {
                currentQueue.firstBaseUpdate = firstPendingUpdate;
              } else {
                currentLastBaseUpdate.next = firstPendingUpdate;
              }
              currentQueue.lastBaseUpdate = lastPendingUpdate;
            }
          }
        }
        if (firstBaseUpdate !== null) {
          var newState = queue.baseState;
          var newLanes = NoLanes;
          var newBaseState = null;
          var newFirstBaseUpdate = null;
          var newLastBaseUpdate = null;
          var update = firstBaseUpdate;
          do {
            var updateLane = update.lane;
            var updateEventTime = update.eventTime;
            if (!isSubsetOfLanes(renderLanes2, updateLane)) {
              var clone = {
                eventTime: updateEventTime,
                lane: updateLane,
                tag: update.tag,
                payload: update.payload,
                callback: update.callback,
                next: null
              };
              if (newLastBaseUpdate === null) {
                newFirstBaseUpdate = newLastBaseUpdate = clone;
                newBaseState = newState;
              } else {
                newLastBaseUpdate = newLastBaseUpdate.next = clone;
              }
              newLanes = mergeLanes(newLanes, updateLane);
            } else {
              if (newLastBaseUpdate !== null) {
                var _clone = {
                  eventTime: updateEventTime,
                  lane: NoLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                newLastBaseUpdate = newLastBaseUpdate.next = _clone;
              }
              newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
              var callback = update.callback;
              if (callback !== null && update.lane !== NoLane) {
                workInProgress2.flags |= Callback;
                var effects = queue.effects;
                if (effects === null) {
                  queue.effects = [update];
                } else {
                  effects.push(update);
                }
              }
            }
            update = update.next;
            if (update === null) {
              pendingQueue = queue.shared.pending;
              if (pendingQueue === null) {
                break;
              } else {
                var _lastPendingUpdate = pendingQueue;
                var _firstPendingUpdate = _lastPendingUpdate.next;
                _lastPendingUpdate.next = null;
                update = _firstPendingUpdate;
                queue.lastBaseUpdate = _lastPendingUpdate;
                queue.shared.pending = null;
              }
            }
          } while (true);
          if (newLastBaseUpdate === null) {
            newBaseState = newState;
          }
          queue.baseState = newBaseState;
          queue.firstBaseUpdate = newFirstBaseUpdate;
          queue.lastBaseUpdate = newLastBaseUpdate;
          var lastInterleaved = queue.shared.interleaved;
          if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do {
              newLanes = mergeLanes(newLanes, interleaved.lane);
              interleaved = interleaved.next;
            } while (interleaved !== lastInterleaved);
          } else if (firstBaseUpdate === null) {
            queue.shared.lanes = NoLanes;
          }
          markSkippedUpdateLanes(newLanes);
          workInProgress2.lanes = newLanes;
          workInProgress2.memoizedState = newState;
        }
        {
          currentlyProcessingQueue = null;
        }
      }
      function callCallback(callback, context) {
        if (typeof callback !== "function") {
          throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
        }
        callback.call(context);
      }
      function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
      }
      function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
      }
      function commitUpdateQueue(finishedWork, finishedQueue, instance) {
        var effects = finishedQueue.effects;
        finishedQueue.effects = null;
        if (effects !== null) {
          for (var i = 0;i < effects.length; i++) {
            var effect = effects[i];
            var callback = effect.callback;
            if (callback !== null) {
              effect.callback = null;
              callCallback(callback, instance);
            }
          }
        }
      }
      var fakeInternalInstance = {};
      var emptyRefsObject = new React.Component().refs;
      var didWarnAboutStateAssignmentForComponent;
      var didWarnAboutUninitializedState;
      var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
      var didWarnAboutLegacyLifecyclesAndDerivedState;
      var didWarnAboutUndefinedDerivedState;
      var warnOnUndefinedDerivedState;
      var warnOnInvalidCallback;
      var didWarnAboutDirectlyAssigningPropsToState;
      var didWarnAboutContextTypeAndContextTypes;
      var didWarnAboutInvalidateContextType;
      {
        didWarnAboutStateAssignmentForComponent = new Set;
        didWarnAboutUninitializedState = new Set;
        didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set;
        didWarnAboutLegacyLifecyclesAndDerivedState = new Set;
        didWarnAboutDirectlyAssigningPropsToState = new Set;
        didWarnAboutUndefinedDerivedState = new Set;
        didWarnAboutContextTypeAndContextTypes = new Set;
        didWarnAboutInvalidateContextType = new Set;
        var didWarnOnInvalidCallback = new Set;
        warnOnInvalidCallback = function(callback, callerName) {
          if (callback === null || typeof callback === "function") {
            return;
          }
          var key = callerName + "_" + callback;
          if (!didWarnOnInvalidCallback.has(key)) {
            didWarnOnInvalidCallback.add(key);
            error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
          }
        };
        warnOnUndefinedDerivedState = function(type, partialState) {
          if (partialState === undefined) {
            var componentName = getComponentNameFromType(type) || "Component";
            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
              didWarnAboutUndefinedDerivedState.add(componentName);
              error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
            }
          }
        };
        Object.defineProperty(fakeInternalInstance, "_processChildContext", {
          enumerable: false,
          value: function() {
            throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
          }
        });
        Object.freeze(fakeInternalInstance);
      }
      function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress2.memoizedState;
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        {
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              partialState = getDerivedStateFromProps(nextProps, prevState);
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          warnOnUndefinedDerivedState(ctor, partialState);
        }
        var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);
        workInProgress2.memoizedState = memoizedState;
        if (workInProgress2.lanes === NoLanes) {
          var updateQueue = workInProgress2.updateQueue;
          updateQueue.baseState = memoizedState;
        }
      }
      var classComponentUpdater = {
        isMounted,
        enqueueSetState: function(inst, payload, callback) {
          var fiber = get(inst);
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = createUpdate(eventTime, lane);
          update.payload = payload;
          if (callback !== undefined && callback !== null) {
            {
              warnOnInvalidCallback(callback, "setState");
            }
            update.callback = callback;
          }
          var root2 = enqueueUpdate(fiber, update, lane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            entangleTransitions(root2, fiber, lane);
          }
          {
            markStateUpdateScheduled(fiber, lane);
          }
        },
        enqueueReplaceState: function(inst, payload, callback) {
          var fiber = get(inst);
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = createUpdate(eventTime, lane);
          update.tag = ReplaceState;
          update.payload = payload;
          if (callback !== undefined && callback !== null) {
            {
              warnOnInvalidCallback(callback, "replaceState");
            }
            update.callback = callback;
          }
          var root2 = enqueueUpdate(fiber, update, lane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            entangleTransitions(root2, fiber, lane);
          }
          {
            markStateUpdateScheduled(fiber, lane);
          }
        },
        enqueueForceUpdate: function(inst, callback) {
          var fiber = get(inst);
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = createUpdate(eventTime, lane);
          update.tag = ForceUpdate;
          if (callback !== undefined && callback !== null) {
            {
              warnOnInvalidCallback(callback, "forceUpdate");
            }
            update.callback = callback;
          }
          var root2 = enqueueUpdate(fiber, update, lane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            entangleTransitions(root2, fiber, lane);
          }
          {
            markForceUpdateScheduled(fiber, lane);
          }
        }
      };
      function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress2.stateNode;
        if (typeof instance.shouldComponentUpdate === "function") {
          var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            if (shouldUpdate === undefined) {
              error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
            }
          }
          return shouldUpdate;
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent) {
          return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        }
        return true;
      }
      function checkClassInstance(workInProgress2, ctor, newProps) {
        var instance = workInProgress2.stateNode;
        {
          var name = getComponentNameFromType(ctor) || "Component";
          var renderPresent = instance.render;
          if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === "function") {
              error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
            } else {
              error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
            }
          }
          if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
            error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
          }
          if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
            error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
          }
          if (instance.propTypes) {
            error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
          }
          if (instance.contextType) {
            error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
          }
          {
            if (instance.contextTypes) {
              error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
            }
            if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
              didWarnAboutContextTypeAndContextTypes.add(ctor);
              error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
            }
          }
          if (typeof instance.componentShouldUpdate === "function") {
            error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
            error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
          }
          if (typeof instance.componentDidUnmount === "function") {
            error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
          }
          if (typeof instance.componentDidReceiveProps === "function") {
            error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
          }
          if (typeof instance.componentWillRecieveProps === "function") {
            error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
          }
          if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
            error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
          }
          var hasMutatedProps = instance.props !== newProps;
          if (instance.props !== undefined && hasMutatedProps) {
            error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
          }
          if (instance.defaultProps) {
            error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
            error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
          }
          if (typeof instance.getDerivedStateFromProps === "function") {
            error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
          }
          if (typeof instance.getDerivedStateFromError === "function") {
            error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
          }
          if (typeof ctor.getSnapshotBeforeUpdate === "function") {
            error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
          }
          var _state = instance.state;
          if (_state && (typeof _state !== "object" || isArray(_state))) {
            error("%s.state: must be set to an object or null", name);
          }
          if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
            error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
          }
        }
      }
      function adoptClassInstance(workInProgress2, instance) {
        instance.updater = classComponentUpdater;
        workInProgress2.stateNode = instance;
        set(instance, workInProgress2);
        {
          instance._reactInternalInstance = fakeInternalInstance;
        }
      }
      function constructClassInstance(workInProgress2, ctor, props) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context = emptyContextObject;
        var contextType = ctor.contextType;
        {
          if ("contextType" in ctor) {
            var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined;
            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
              didWarnAboutInvalidateContextType.add(ctor);
              var addendum = "";
              if (contextType === undefined) {
                addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
              } else if (typeof contextType !== "object") {
                addendum = " However, it is set to a " + typeof contextType + ".";
              } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                addendum = " Did you accidentally pass the Context.Provider instead?";
              } else if (contextType._context !== undefined) {
                addendum = " Did you accidentally pass the Context.Consumer instead?";
              } else {
                addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
              }
              error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
            }
          }
        }
        if (typeof contextType === "object" && contextType !== null) {
          context = readContext(contextType);
        } else {
          unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          var contextTypes = ctor.contextTypes;
          isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
          context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
        }
        var instance = new ctor(props, context);
        {
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              instance = new ctor(props, context);
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
        }
        var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
        adoptClassInstance(workInProgress2, instance);
        {
          if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            if (!didWarnAboutUninitializedState.has(componentName)) {
              didWarnAboutUninitializedState.add(componentName);
              error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
            }
          }
          if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
            var foundWillMountName = null;
            var foundWillReceivePropsName = null;
            var foundWillUpdateName = null;
            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
              foundWillMountName = "componentWillMount";
            } else if (typeof instance.UNSAFE_componentWillMount === "function") {
              foundWillMountName = "UNSAFE_componentWillMount";
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              foundWillReceivePropsName = "componentWillReceiveProps";
            } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              foundWillUpdateName = "componentWillUpdate";
            } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
              foundWillUpdateName = "UNSAFE_componentWillUpdate";
            }
            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
              var _componentName = getComponentNameFromType(ctor) || "Component";
              var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
              if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
              }
            }
          }
        }
        if (isLegacyContextConsumer) {
          cacheContext(workInProgress2, unmaskedContext, context);
        }
        return instance;
      }
      function callComponentWillMount(workInProgress2, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount === "function") {
          instance.componentWillMount();
        }
        if (typeof instance.UNSAFE_componentWillMount === "function") {
          instance.UNSAFE_componentWillMount();
        }
        if (oldState !== instance.state) {
          {
            error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
          }
          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
      }
      function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
        var oldState = instance.state;
        if (typeof instance.componentWillReceiveProps === "function") {
          instance.componentWillReceiveProps(newProps, nextContext);
        }
        if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
          instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        }
        if (instance.state !== oldState) {
          {
            var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
              didWarnAboutStateAssignmentForComponent.add(componentName);
              error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
            }
          }
          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
      }
      function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
        {
          checkClassInstance(workInProgress2, ctor, newProps);
        }
        var instance = workInProgress2.stateNode;
        instance.props = newProps;
        instance.state = workInProgress2.memoizedState;
        instance.refs = emptyRefsObject;
        initializeUpdateQueue(workInProgress2);
        var contextType = ctor.contextType;
        if (typeof contextType === "object" && contextType !== null) {
          instance.context = readContext(contextType);
        } else {
          var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          instance.context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        {
          if (instance.state === newProps) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
              didWarnAboutDirectlyAssigningPropsToState.add(componentName);
              error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
            }
          }
          if (workInProgress2.mode & StrictLegacyMode) {
            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
          }
          {
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
          }
        }
        instance.state = workInProgress2.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
          instance.state = workInProgress2.memoizedState;
        }
        if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
          callComponentWillMount(workInProgress2, instance);
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          instance.state = workInProgress2.memoizedState;
        }
        if (typeof instance.componentDidMount === "function") {
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          workInProgress2.flags |= fiberFlags;
        }
      }
      function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
        var instance = workInProgress2.stateNode;
        var oldProps = workInProgress2.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === "object" && contextType !== null) {
          nextContext = readContext(contextType);
        } else {
          var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
          if (oldProps !== newProps || oldContext !== nextContext) {
            callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
          }
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress2.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
        newState = workInProgress2.memoizedState;
        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
          if (typeof instance.componentDidMount === "function") {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            workInProgress2.flags |= fiberFlags;
          }
          return false;
        }
        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
          newState = workInProgress2.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
          }
          if (typeof instance.componentDidMount === "function") {
            var _fiberFlags = Update;
            {
              _fiberFlags |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              _fiberFlags |= MountLayoutDev;
            }
            workInProgress2.flags |= _fiberFlags;
          }
        } else {
          if (typeof instance.componentDidMount === "function") {
            var _fiberFlags2 = Update;
            {
              _fiberFlags2 |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              _fiberFlags2 |= MountLayoutDev;
            }
            workInProgress2.flags |= _fiberFlags2;
          }
          workInProgress2.memoizedProps = newProps;
          workInProgress2.memoizedState = newState;
        }
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
      }
      function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
        var instance = workInProgress2.stateNode;
        cloneUpdateQueue(current2, workInProgress2);
        var unresolvedOldProps = workInProgress2.memoizedProps;
        var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
        instance.props = oldProps;
        var unresolvedNewProps = workInProgress2.pendingProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === "object" && contextType !== null) {
          nextContext = readContext(contextType);
        } else {
          var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
          if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
            callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
          }
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress2.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
        newState = workInProgress2.memoizedState;
        if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
          if (typeof instance.componentDidUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Update;
            }
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Snapshot;
            }
          }
          return false;
        }
        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
          newState = workInProgress2.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || enableLazyContextPropagation;
        if (shouldUpdate) {
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
            if (typeof instance.componentWillUpdate === "function") {
              instance.componentWillUpdate(newProps, newState, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillUpdate === "function") {
              instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
            }
          }
          if (typeof instance.componentDidUpdate === "function") {
            workInProgress2.flags |= Update;
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            workInProgress2.flags |= Snapshot;
          }
        } else {
          if (typeof instance.componentDidUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Update;
            }
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Snapshot;
            }
          }
          workInProgress2.memoizedProps = newProps;
          workInProgress2.memoizedState = newState;
        }
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
      }
      var didWarnAboutMaps;
      var didWarnAboutGenerators;
      var didWarnAboutStringRefs;
      var ownerHasKeyUseWarning;
      var ownerHasFunctionTypeWarning;
      var warnForMissingKey = function(child, returnFiber) {
      };
      {
        didWarnAboutMaps = false;
        didWarnAboutGenerators = false;
        didWarnAboutStringRefs = {};
        ownerHasKeyUseWarning = {};
        ownerHasFunctionTypeWarning = {};
        warnForMissingKey = function(child, returnFiber) {
          if (child === null || typeof child !== "object") {
            return;
          }
          if (!child._store || child._store.validated || child.key != null) {
            return;
          }
          if (typeof child._store !== "object") {
            throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
          }
          child._store.validated = true;
          var componentName = getComponentNameFromFiber(returnFiber) || "Component";
          if (ownerHasKeyUseWarning[componentName]) {
            return;
          }
          ownerHasKeyUseWarning[componentName] = true;
          error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
        };
      }
      function coerceRef(returnFiber, current2, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
          {
            if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (!didWarnAboutStringRefs[componentName]) {
                {
                  error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                }
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
          if (element._owner) {
            var owner = element._owner;
            var inst;
            if (owner) {
              var ownerFiber = owner;
              if (ownerFiber.tag !== ClassComponent) {
                throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
              }
              inst = ownerFiber.stateNode;
            }
            if (!inst) {
              throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
            }
            var resolvedInst = inst;
            {
              checkPropStringCoercion(mixedRef, "ref");
            }
            var stringRef = "" + mixedRef;
            if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
              return current2.ref;
            }
            var ref = function(value) {
              var refs = resolvedInst.refs;
              if (refs === emptyRefsObject) {
                refs = resolvedInst.refs = {};
              }
              if (value === null) {
                delete refs[stringRef];
              } else {
                refs[stringRef] = value;
              }
            };
            ref._stringRef = stringRef;
            return ref;
          } else {
            if (typeof mixedRef !== "string") {
              throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
            }
            if (!element._owner) {
              throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
            }
          }
        }
        return mixedRef;
      }
      function throwOnInvalidObjectType(returnFiber, newChild) {
        var childString = Object.prototype.toString.call(newChild);
        throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
      }
      function warnOnFunctionType(returnFiber) {
        {
          var componentName = getComponentNameFromFiber(returnFiber) || "Component";
          if (ownerHasFunctionTypeWarning[componentName]) {
            return;
          }
          ownerHasFunctionTypeWarning[componentName] = true;
          error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
        }
      }
      function resolveLazy(lazyType) {
        var payload = lazyType._payload;
        var init = lazyType._init;
        return init(payload);
      }
      function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
          if (!shouldTrackSideEffects) {
            return;
          }
          var deletions = returnFiber.deletions;
          if (deletions === null) {
            returnFiber.deletions = [childToDelete];
            returnFiber.flags |= ChildDeletion;
          } else {
            deletions.push(childToDelete);
          }
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
          if (!shouldTrackSideEffects) {
            return null;
          }
          var childToDelete = currentFirstChild;
          while (childToDelete !== null) {
            deleteChild(returnFiber, childToDelete);
            childToDelete = childToDelete.sibling;
          }
          return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
          var existingChildren = new Map;
          var existingChild = currentFirstChild;
          while (existingChild !== null) {
            if (existingChild.key !== null) {
              existingChildren.set(existingChild.key, existingChild);
            } else {
              existingChildren.set(existingChild.index, existingChild);
            }
            existingChild = existingChild.sibling;
          }
          return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
          var clone = createWorkInProgress(fiber, pendingProps);
          clone.index = 0;
          clone.sibling = null;
          return clone;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
          newFiber.index = newIndex;
          if (!shouldTrackSideEffects) {
            newFiber.flags |= Forked;
            return lastPlacedIndex;
          }
          var current2 = newFiber.alternate;
          if (current2 !== null) {
            var oldIndex = current2.index;
            if (oldIndex < lastPlacedIndex) {
              newFiber.flags |= Placement;
              return lastPlacedIndex;
            } else {
              return oldIndex;
            }
          } else {
            newFiber.flags |= Placement;
            return lastPlacedIndex;
          }
        }
        function placeSingleChild(newFiber) {
          if (shouldTrackSideEffects && newFiber.alternate === null) {
            newFiber.flags |= Placement;
          }
          return newFiber;
        }
        function updateTextNode(returnFiber, current2, textContent, lanes) {
          if (current2 === null || current2.tag !== HostText) {
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current2, textContent);
            existing.return = returnFiber;
            return existing;
          }
        }
        function updateElement(returnFiber, current2, element, lanes) {
          var elementType = element.type;
          if (elementType === REACT_FRAGMENT_TYPE) {
            return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
          }
          if (current2 !== null) {
            if (current2.elementType === elementType || isCompatibleFamilyForHotReloading(current2, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
              var existing = useFiber(current2, element.props);
              existing.ref = coerceRef(returnFiber, current2, element);
              existing.return = returnFiber;
              {
                existing._debugSource = element._source;
                existing._debugOwner = element._owner;
              }
              return existing;
            }
          }
          var created = createFiberFromElement(element, returnFiber.mode, lanes);
          created.ref = coerceRef(returnFiber, current2, element);
          created.return = returnFiber;
          return created;
        }
        function updatePortal(returnFiber, current2, portal, lanes) {
          if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current2, portal.children || []);
            existing.return = returnFiber;
            return existing;
          }
        }
        function updateFragment2(returnFiber, current2, fragment, lanes, key) {
          if (current2 === null || current2.tag !== Fragment) {
            var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current2, fragment);
            existing.return = returnFiber;
            return existing;
          }
        }
        function createChild(returnFiber, newChild, lanes) {
          if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
            var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                _created.ref = coerceRef(returnFiber, null, newChild);
                _created.return = returnFiber;
                return _created;
              }
              case REACT_PORTAL_TYPE: {
                var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                _created2.return = returnFiber;
                return _created2;
              }
              case REACT_LAZY_TYPE: {
                var payload = newChild._payload;
                var init = newChild._init;
                return createChild(returnFiber, init(payload), lanes);
              }
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
              _created3.return = returnFiber;
              return _created3;
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
          var key = oldFiber !== null ? oldFiber.key : null;
          if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
            if (key !== null) {
              return null;
            }
            return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                if (newChild.key === key) {
                  return updateElement(returnFiber, oldFiber, newChild, lanes);
                } else {
                  return null;
                }
              }
              case REACT_PORTAL_TYPE: {
                if (newChild.key === key) {
                  return updatePortal(returnFiber, oldFiber, newChild, lanes);
                } else {
                  return null;
                }
              }
              case REACT_LAZY_TYPE: {
                var payload = newChild._payload;
                var init = newChild._init;
                return updateSlot(returnFiber, oldFiber, init(payload), lanes);
              }
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              if (key !== null) {
                return null;
              }
              return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
          if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
            var matchedFiber = existingChildren.get(newIdx) || null;
            return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                return updateElement(returnFiber, _matchedFiber, newChild, lanes);
              }
              case REACT_PORTAL_TYPE: {
                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
              }
              case REACT_LAZY_TYPE:
                var payload = newChild._payload;
                var init = newChild._init;
                return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              var _matchedFiber3 = existingChildren.get(newIdx) || null;
              return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }
        function warnOnInvalidKey(child, knownKeys, returnFiber) {
          {
            if (typeof child !== "object" || child === null) {
              return knownKeys;
            }
            switch (child.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                warnForMissingKey(child, returnFiber);
                var key = child.key;
                if (typeof key !== "string") {
                  break;
                }
                if (knownKeys === null) {
                  knownKeys = new Set;
                  knownKeys.add(key);
                  break;
                }
                if (!knownKeys.has(key)) {
                  knownKeys.add(key);
                  break;
                }
                error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be " + "duplicated and/or omitted \u2014 the behavior is unsupported and " + "could change in a future version.", key);
                break;
              case REACT_LAZY_TYPE:
                var payload = child._payload;
                var init = child._init;
                warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                break;
            }
          }
          return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
          {
            var knownKeys = null;
            for (var i = 0;i < newChildren.length; i++) {
              var child = newChildren[i];
              knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
          }
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;
          for (;oldFiber !== null && newIdx < newChildren.length; newIdx++) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }
            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }
              break;
            }
            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }
            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }
          if (newIdx === newChildren.length) {
            deleteRemainingChildren(returnFiber, oldFiber);
            if (getIsHydrating()) {
              var numberOfForks = newIdx;
              pushTreeFork(returnFiber, numberOfForks);
            }
            return resultingFirstChild;
          }
          if (oldFiber === null) {
            for (;newIdx < newChildren.length; newIdx++) {
              var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
              if (_newFiber === null) {
                continue;
              }
              lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber;
              } else {
                previousNewFiber.sibling = _newFiber;
              }
              previousNewFiber = _newFiber;
            }
            if (getIsHydrating()) {
              var _numberOfForks = newIdx;
              pushTreeFork(returnFiber, _numberOfForks);
            }
            return resultingFirstChild;
          }
          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
          for (;newIdx < newChildren.length; newIdx++) {
            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
            if (_newFiber2 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber2.alternate !== null) {
                  existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                }
              }
              lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber2;
              } else {
                previousNewFiber.sibling = _newFiber2;
              }
              previousNewFiber = _newFiber2;
            }
          }
          if (shouldTrackSideEffects) {
            existingChildren.forEach(function(child2) {
              return deleteChild(returnFiber, child2);
            });
          }
          if (getIsHydrating()) {
            var _numberOfForks2 = newIdx;
            pushTreeFork(returnFiber, _numberOfForks2);
          }
          return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
          var iteratorFn = getIteratorFn(newChildrenIterable);
          if (typeof iteratorFn !== "function") {
            throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
          }
          {
            if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
              if (!didWarnAboutGenerators) {
                error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
              }
              didWarnAboutGenerators = true;
            }
            if (newChildrenIterable.entries === iteratorFn) {
              if (!didWarnAboutMaps) {
                error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
              }
              didWarnAboutMaps = true;
            }
            var _newChildren = iteratorFn.call(newChildrenIterable);
            if (_newChildren) {
              var knownKeys = null;
              var _step = _newChildren.next();
              for (;!_step.done; _step = _newChildren.next()) {
                var child = _step.value;
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
          }
          var newChildren = iteratorFn.call(newChildrenIterable);
          if (newChildren == null) {
            throw new Error("An iterable object provided no iterator.");
          }
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;
          var step = newChildren.next();
          for (;oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }
            var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }
              break;
            }
            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }
            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }
          if (step.done) {
            deleteRemainingChildren(returnFiber, oldFiber);
            if (getIsHydrating()) {
              var numberOfForks = newIdx;
              pushTreeFork(returnFiber, numberOfForks);
            }
            return resultingFirstChild;
          }
          if (oldFiber === null) {
            for (;!step.done; newIdx++, step = newChildren.next()) {
              var _newFiber3 = createChild(returnFiber, step.value, lanes);
              if (_newFiber3 === null) {
                continue;
              }
              lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber3;
              } else {
                previousNewFiber.sibling = _newFiber3;
              }
              previousNewFiber = _newFiber3;
            }
            if (getIsHydrating()) {
              var _numberOfForks3 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks3);
            }
            return resultingFirstChild;
          }
          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
          for (;!step.done; newIdx++, step = newChildren.next()) {
            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
            if (_newFiber4 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber4.alternate !== null) {
                  existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                }
              }
              lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber4;
              } else {
                previousNewFiber.sibling = _newFiber4;
              }
              previousNewFiber = _newFiber4;
            }
          }
          if (shouldTrackSideEffects) {
            existingChildren.forEach(function(child2) {
              return deleteChild(returnFiber, child2);
            });
          }
          if (getIsHydrating()) {
            var _numberOfForks4 = newIdx;
            pushTreeFork(returnFiber, _numberOfForks4);
          }
          return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
          if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
            var existing = useFiber(currentFirstChild, textContent);
            existing.return = returnFiber;
            return existing;
          }
          deleteRemainingChildren(returnFiber, currentFirstChild);
          var created = createFiberFromText(textContent, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
          var key = element.key;
          var child = currentFirstChild;
          while (child !== null) {
            if (child.key === key) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                if (child.tag === Fragment) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, element.props.children);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              } else {
                if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var _existing = useFiber(child, element.props);
                  _existing.ref = coerceRef(returnFiber, child, element);
                  _existing.return = returnFiber;
                  {
                    _existing._debugSource = element._source;
                    _existing._debugOwner = element._owner;
                  }
                  return _existing;
                }
              }
              deleteRemainingChildren(returnFiber, child);
              break;
            } else {
              deleteChild(returnFiber, child);
            }
            child = child.sibling;
          }
          if (element.type === REACT_FRAGMENT_TYPE) {
            var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
            created.return = returnFiber;
            return created;
          } else {
            var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
            _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
            _created4.return = returnFiber;
            return _created4;
          }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
          var key = portal.key;
          var child = currentFirstChild;
          while (child !== null) {
            if (child.key === key) {
              if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, portal.children || []);
                existing.return = returnFiber;
                return existing;
              } else {
                deleteRemainingChildren(returnFiber, child);
                break;
              }
            } else {
              deleteChild(returnFiber, child);
            }
            child = child.sibling;
          }
          var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        }
        function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
          var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
          if (isUnkeyedTopLevelFragment) {
            newChild = newChild.props.children;
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
              case REACT_PORTAL_TYPE:
                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
              case REACT_LAZY_TYPE:
                var payload = newChild._payload;
                var init = newChild._init;
                return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
            }
            if (isArray(newChild)) {
              return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
            }
            if (getIteratorFn(newChild)) {
              return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return reconcileChildFibers2;
      }
      var reconcileChildFibers = ChildReconciler(true);
      var mountChildFibers = ChildReconciler(false);
      function cloneChildFibers(current2, workInProgress2) {
        if (current2 !== null && workInProgress2.child !== current2.child) {
          throw new Error("Resuming work not yet implemented.");
        }
        if (workInProgress2.child === null) {
          return;
        }
        var currentChild = workInProgress2.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
        workInProgress2.child = newChild;
        newChild.return = workInProgress2;
        while (currentChild.sibling !== null) {
          currentChild = currentChild.sibling;
          newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
          newChild.return = workInProgress2;
        }
        newChild.sibling = null;
      }
      function resetChildFibers(workInProgress2, lanes) {
        var child = workInProgress2.child;
        while (child !== null) {
          resetWorkInProgress(child, lanes);
          child = child.sibling;
        }
      }
      var NO_CONTEXT = {};
      var contextStackCursor$1 = createCursor(NO_CONTEXT);
      var contextFiberStackCursor = createCursor(NO_CONTEXT);
      var rootInstanceStackCursor = createCursor(NO_CONTEXT);
      function requiredContext(c2) {
        if (c2 === NO_CONTEXT) {
          throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
        }
        return c2;
      }
      function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
      }
      function pushHostContainer(fiber, nextRootInstance) {
        push(rootInstanceStackCursor, nextRootInstance, fiber);
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance);
        pop(contextStackCursor$1, fiber);
        push(contextStackCursor$1, nextRootContext, fiber);
      }
      function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
      }
      function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
      }
      function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context, fiber.type);
        if (context === nextContext) {
          return;
        }
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, nextContext, fiber);
      }
      function popHostContext(fiber) {
        if (contextFiberStackCursor.current !== fiber) {
          return;
        }
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
      }
      var DefaultSuspenseContext = 0;
      var SubtreeSuspenseContextMask = 1;
      var InvisibleParentSuspenseContext = 1;
      var ForceSuspenseFallback = 2;
      var suspenseStackCursor = createCursor(DefaultSuspenseContext);
      function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
      }
      function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
      }
      function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
      }
      function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
      }
      function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
      }
      function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
      }
      function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
        var nextState = workInProgress2.memoizedState;
        if (nextState !== null) {
          if (nextState.dehydrated !== null) {
            return true;
          }
          return false;
        }
        var props = workInProgress2.memoizedProps;
        {
          return true;
        }
      }
      function findFirstSuspended(row) {
        var node = row;
        while (node !== null) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState;
            if (state !== null) {
              var dehydrated = state.dehydrated;
              if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                return node;
              }
            }
          } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== undefined) {
            var didSuspend = (node.flags & DidCapture) !== NoFlags;
            if (didSuspend) {
              return node;
            }
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === row) {
            return null;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === row) {
              return null;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
        return null;
      }
      var NoFlags$1 = 0;
      var HasEffect = 1;
      var Insertion = 2;
      var Layout = 4;
      var Passive$1 = 8;
      var workInProgressSources = [];
      function resetWorkInProgressVersions() {
        for (var i = 0;i < workInProgressSources.length; i++) {
          var mutableSource = workInProgressSources[i];
          {
            mutableSource._workInProgressVersionPrimary = null;
          }
        }
        workInProgressSources.length = 0;
      }
      function registerMutableSourceForHydration(root2, mutableSource) {
        var getVersion = mutableSource._getVersion;
        var version = getVersion(mutableSource._source);
        if (root2.mutableSourceEagerHydrationData == null) {
          root2.mutableSourceEagerHydrationData = [mutableSource, version];
        } else {
          root2.mutableSourceEagerHydrationData.push(mutableSource, version);
        }
      }
      var { ReactCurrentDispatcher: ReactCurrentDispatcher$1, ReactCurrentBatchConfig: ReactCurrentBatchConfig$2 } = ReactSharedInternals;
      var didWarnAboutMismatchedHooksForComponent;
      var didWarnUncachedGetSnapshot;
      {
        didWarnAboutMismatchedHooksForComponent = new Set;
      }
      var renderLanes = NoLanes;
      var currentlyRenderingFiber$1 = null;
      var currentHook = null;
      var workInProgressHook = null;
      var didScheduleRenderPhaseUpdate = false;
      var didScheduleRenderPhaseUpdateDuringThisPass = false;
      var localIdCounter = 0;
      var globalClientIdCounter = 0;
      var RE_RENDER_LIMIT = 25;
      var currentHookNameInDev = null;
      var hookTypesDev = null;
      var hookTypesUpdateIndexDev = -1;
      var ignorePreviousDependencies = false;
      function mountHookTypesDev() {
        {
          var hookName = currentHookNameInDev;
          if (hookTypesDev === null) {
            hookTypesDev = [hookName];
          } else {
            hookTypesDev.push(hookName);
          }
        }
      }
      function updateHookTypesDev() {
        {
          var hookName = currentHookNameInDev;
          if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++;
            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
              warnOnHookMismatchInDev(hookName);
            }
          }
        }
      }
      function checkDepsAreArrayDev(deps) {
        {
          if (deps !== undefined && deps !== null && !isArray(deps)) {
            error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
          }
        }
      }
      function warnOnHookMismatchInDev(currentHookName) {
        {
          var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
          if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName);
            if (hookTypesDev !== null) {
              var table = "";
              var secondColumnStart = 30;
              for (var i = 0;i <= hookTypesUpdateIndexDev; i++) {
                var oldHookName = hookTypesDev[i];
                var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                var row = i + 1 + ". " + oldHookName;
                while (row.length < secondColumnStart) {
                  row += " ";
                }
                row += newHookName + "\n";
                table += row;
              }
              error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
            }
          }
        }
      }
      function throwInvalidHookError() {
        throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
      }
      function areHookInputsEqual(nextDeps, prevDeps) {
        {
          if (ignorePreviousDependencies) {
            return false;
          }
        }
        if (prevDeps === null) {
          {
            error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
          }
          return false;
        }
        {
          if (nextDeps.length !== prevDeps.length) {
            error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
          }
        }
        for (var i = 0;i < prevDeps.length && i < nextDeps.length; i++) {
          if (objectIs(nextDeps[i], prevDeps[i])) {
            continue;
          }
          return false;
        }
        return true;
      }
      function renderWithHooks(current2, workInProgress2, Component2, props, secondArg, nextRenderLanes) {
        renderLanes = nextRenderLanes;
        currentlyRenderingFiber$1 = workInProgress2;
        {
          hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
          hookTypesUpdateIndexDev = -1;
          ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
        }
        workInProgress2.memoizedState = null;
        workInProgress2.updateQueue = null;
        workInProgress2.lanes = NoLanes;
        {
          if (current2 !== null && current2.memoizedState !== null) {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
          } else if (hookTypesDev !== null) {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
          } else {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
          }
        }
        var children = Component2(props, secondArg);
        if (didScheduleRenderPhaseUpdateDuringThisPass) {
          var numberOfReRenders = 0;
          do {
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
            if (numberOfReRenders >= RE_RENDER_LIMIT) {
              throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
            }
            numberOfReRenders += 1;
            {
              ignorePreviousDependencies = false;
            }
            currentHook = null;
            workInProgressHook = null;
            workInProgress2.updateQueue = null;
            {
              hookTypesUpdateIndexDev = -1;
            }
            ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
            children = Component2(props, secondArg);
          } while (didScheduleRenderPhaseUpdateDuringThisPass);
        }
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        {
          workInProgress2._debugHookTypes = hookTypesDev;
        }
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        {
          currentHookNameInDev = null;
          hookTypesDev = null;
          hookTypesUpdateIndexDev = -1;
          if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && (current2.mode & ConcurrentMode) !== NoMode) {
            error("Internal React error: Expected static flag was missing. Please notify the React team.");
          }
        }
        didScheduleRenderPhaseUpdate = false;
        if (didRenderTooFewHooks) {
          throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        }
        return children;
      }
      function checkDidRenderIdHook() {
        var didRenderIdHook = localIdCounter !== 0;
        localIdCounter = 0;
        return didRenderIdHook;
      }
      function bailoutHooks(current2, workInProgress2, lanes) {
        workInProgress2.updateQueue = current2.updateQueue;
        if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
          workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
        } else {
          workInProgress2.flags &= ~(Passive | Update);
        }
        current2.lanes = removeLanes(current2.lanes, lanes);
      }
      function resetHooksAfterThrow() {
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        if (didScheduleRenderPhaseUpdate) {
          var hook = currentlyRenderingFiber$1.memoizedState;
          while (hook !== null) {
            var queue = hook.queue;
            if (queue !== null) {
              queue.pending = null;
            }
            hook = hook.next;
          }
          didScheduleRenderPhaseUpdate = false;
        }
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        {
          hookTypesDev = null;
          hookTypesUpdateIndexDev = -1;
          currentHookNameInDev = null;
          isUpdatingOpaqueValueInRenderPhase = false;
        }
        didScheduleRenderPhaseUpdateDuringThisPass = false;
        localIdCounter = 0;
      }
      function mountWorkInProgressHook() {
        var hook = {
          memoizedState: null,
          baseState: null,
          baseQueue: null,
          queue: null,
          next: null
        };
        if (workInProgressHook === null) {
          currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
        } else {
          workInProgressHook = workInProgressHook.next = hook;
        }
        return workInProgressHook;
      }
      function updateWorkInProgressHook() {
        var nextCurrentHook;
        if (currentHook === null) {
          var current2 = currentlyRenderingFiber$1.alternate;
          if (current2 !== null) {
            nextCurrentHook = current2.memoizedState;
          } else {
            nextCurrentHook = null;
          }
        } else {
          nextCurrentHook = currentHook.next;
        }
        var nextWorkInProgressHook;
        if (workInProgressHook === null) {
          nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
        } else {
          nextWorkInProgressHook = workInProgressHook.next;
        }
        if (nextWorkInProgressHook !== null) {
          workInProgressHook = nextWorkInProgressHook;
          nextWorkInProgressHook = workInProgressHook.next;
          currentHook = nextCurrentHook;
        } else {
          if (nextCurrentHook === null) {
            throw new Error("Rendered more hooks than during the previous render.");
          }
          currentHook = nextCurrentHook;
          var newHook = {
            memoizedState: currentHook.memoizedState,
            baseState: currentHook.baseState,
            baseQueue: currentHook.baseQueue,
            queue: currentHook.queue,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
          } else {
            workInProgressHook = workInProgressHook.next = newHook;
          }
        }
        return workInProgressHook;
      }
      function createFunctionComponentUpdateQueue() {
        return {
          lastEffect: null,
          stores: null
        };
      }
      function basicStateReducer(state, action) {
        return typeof action === "function" ? action(state) : action;
      }
      function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        var initialState;
        if (init !== undefined) {
          initialState = init(initialArg);
        } else {
          initialState = initialArg;
        }
        hook.memoizedState = hook.baseState = initialState;
        var queue = {
          pending: null,
          interleaved: null,
          lanes: NoLanes,
          dispatch: null,
          lastRenderedReducer: reducer,
          lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch];
      }
      function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (queue === null) {
          throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        }
        queue.lastRenderedReducer = reducer;
        var current2 = currentHook;
        var baseQueue = current2.baseQueue;
        var pendingQueue = queue.pending;
        if (pendingQueue !== null) {
          if (baseQueue !== null) {
            var baseFirst = baseQueue.next;
            var pendingFirst = pendingQueue.next;
            baseQueue.next = pendingFirst;
            pendingQueue.next = baseFirst;
          }
          {
            if (current2.baseQueue !== baseQueue) {
              error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
            }
          }
          current2.baseQueue = baseQueue = pendingQueue;
          queue.pending = null;
        }
        if (baseQueue !== null) {
          var first = baseQueue.next;
          var newState = current2.baseState;
          var newBaseState = null;
          var newBaseQueueFirst = null;
          var newBaseQueueLast = null;
          var update = first;
          do {
            var updateLane = update.lane;
            if (!isSubsetOfLanes(renderLanes, updateLane)) {
              var clone = {
                lane: updateLane,
                action: update.action,
                hasEagerState: update.hasEagerState,
                eagerState: update.eagerState,
                next: null
              };
              if (newBaseQueueLast === null) {
                newBaseQueueFirst = newBaseQueueLast = clone;
                newBaseState = newState;
              } else {
                newBaseQueueLast = newBaseQueueLast.next = clone;
              }
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
              markSkippedUpdateLanes(updateLane);
            } else {
              if (newBaseQueueLast !== null) {
                var _clone = {
                  lane: NoLane,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                };
                newBaseQueueLast = newBaseQueueLast.next = _clone;
              }
              if (update.hasEagerState) {
                newState = update.eagerState;
              } else {
                var action = update.action;
                newState = reducer(newState, action);
              }
            }
            update = update.next;
          } while (update !== null && update !== first);
          if (newBaseQueueLast === null) {
            newBaseState = newState;
          } else {
            newBaseQueueLast.next = newBaseQueueFirst;
          }
          if (!objectIs(newState, hook.memoizedState)) {
            markWorkInProgressReceivedUpdate();
          }
          hook.memoizedState = newState;
          hook.baseState = newBaseState;
          hook.baseQueue = newBaseQueueLast;
          queue.lastRenderedState = newState;
        }
        var lastInterleaved = queue.interleaved;
        if (lastInterleaved !== null) {
          var interleaved = lastInterleaved;
          do {
            var interleavedLane = interleaved.lane;
            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
            markSkippedUpdateLanes(interleavedLane);
            interleaved = interleaved.next;
          } while (interleaved !== lastInterleaved);
        } else if (baseQueue === null) {
          queue.lanes = NoLanes;
        }
        var dispatch = queue.dispatch;
        return [hook.memoizedState, dispatch];
      }
      function rerenderReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (queue === null) {
          throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        }
        queue.lastRenderedReducer = reducer;
        var dispatch = queue.dispatch;
        var lastRenderPhaseUpdate = queue.pending;
        var newState = hook.memoizedState;
        if (lastRenderPhaseUpdate !== null) {
          queue.pending = null;
          var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
          var update = firstRenderPhaseUpdate;
          do {
            var action = update.action;
            newState = reducer(newState, action);
            update = update.next;
          } while (update !== firstRenderPhaseUpdate);
          if (!objectIs(newState, hook.memoizedState)) {
            markWorkInProgressReceivedUpdate();
          }
          hook.memoizedState = newState;
          if (hook.baseQueue === null) {
            hook.baseState = newState;
          }
          queue.lastRenderedState = newState;
        }
        return [newState, dispatch];
      }
      function mountMutableSource(source, getSnapshot, subscribe) {
        {
          return;
        }
      }
      function updateMutableSource(source, getSnapshot, subscribe) {
        {
          return;
        }
      }
      function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1;
        var hook = mountWorkInProgressHook();
        var nextSnapshot;
        var isHydrating2 = getIsHydrating();
        if (isHydrating2) {
          if (getServerSnapshot === undefined) {
            throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
          }
          nextSnapshot = getServerSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              if (nextSnapshot !== getServerSnapshot()) {
                error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
        } else {
          nextSnapshot = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedSnapshot = getSnapshot();
              if (!objectIs(nextSnapshot, cachedSnapshot)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var root2 = getWorkInProgressRoot();
          if (root2 === null) {
            throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
          }
          if (!includesBlockingLane(root2, renderLanes)) {
            pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
          }
        }
        hook.memoizedState = nextSnapshot;
        var inst = {
          value: nextSnapshot,
          getSnapshot
        };
        hook.queue = inst;
        mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
        fiber.flags |= Passive;
        pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);
        return nextSnapshot;
      }
      function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1;
        var hook = updateWorkInProgressHook();
        var nextSnapshot = getSnapshot();
        {
          if (!didWarnUncachedGetSnapshot) {
            var cachedSnapshot = getSnapshot();
            if (!objectIs(nextSnapshot, cachedSnapshot)) {
              error("The result of getSnapshot should be cached to avoid an infinite loop");
              didWarnUncachedGetSnapshot = true;
            }
          }
        }
        var prevSnapshot = hook.memoizedState;
        var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
        if (snapshotChanged) {
          hook.memoizedState = nextSnapshot;
          markWorkInProgressReceivedUpdate();
        }
        var inst = hook.queue;
        updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
        if (inst.getSnapshot !== getSnapshot || snapshotChanged || workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
          fiber.flags |= Passive;
          pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);
          var root2 = getWorkInProgressRoot();
          if (root2 === null) {
            throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
          }
          if (!includesBlockingLane(root2, renderLanes)) {
            pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
          }
        }
        return nextSnapshot;
      }
      function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
        fiber.flags |= StoreConsistency;
        var check = {
          getSnapshot,
          value: renderedSnapshot
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
          componentUpdateQueue = createFunctionComponentUpdateQueue();
          currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
          componentUpdateQueue.stores = [check];
        } else {
          var stores = componentUpdateQueue.stores;
          if (stores === null) {
            componentUpdateQueue.stores = [check];
          } else {
            stores.push(check);
          }
        }
      }
      function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
        inst.value = nextSnapshot;
        inst.getSnapshot = getSnapshot;
        if (checkIfSnapshotChanged(inst)) {
          forceStoreRerender(fiber);
        }
      }
      function subscribeToStore(fiber, inst, subscribe) {
        var handleStoreChange = function() {
          if (checkIfSnapshotChanged(inst)) {
            forceStoreRerender(fiber);
          }
        };
        return subscribe(handleStoreChange);
      }
      function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot;
        var prevValue = inst.value;
        try {
          var nextValue = latestGetSnapshot();
          return !objectIs(prevValue, nextValue);
        } catch (error2) {
          return true;
        }
      }
      function forceStoreRerender(fiber) {
        var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root2 !== null) {
          scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
        }
      }
      function mountState(initialState) {
        var hook = mountWorkInProgressHook();
        if (typeof initialState === "function") {
          initialState = initialState();
        }
        hook.memoizedState = hook.baseState = initialState;
        var queue = {
          pending: null,
          interleaved: null,
          lanes: NoLanes,
          dispatch: null,
          lastRenderedReducer: basicStateReducer,
          lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch];
      }
      function updateState(initialState) {
        return updateReducer(basicStateReducer);
      }
      function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer);
      }
      function pushEffect(tag, create, destroy, deps) {
        var effect = {
          tag,
          create,
          destroy,
          deps,
          next: null
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
          componentUpdateQueue = createFunctionComponentUpdateQueue();
          currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
          componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
          var lastEffect = componentUpdateQueue.lastEffect;
          if (lastEffect === null) {
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var firstEffect = lastEffect.next;
            lastEffect.next = effect;
            effect.next = firstEffect;
            componentUpdateQueue.lastEffect = effect;
          }
        }
        return effect;
      }
      function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        {
          var _ref2 = {
            current: initialValue
          };
          hook.memoizedState = _ref2;
          return _ref2;
        }
      }
      function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
      }
      function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
      }
      function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var destroy = undefined;
        if (currentHook !== null) {
          var prevEffect = currentHook.memoizedState;
          destroy = prevEffect.destroy;
          if (nextDeps !== null) {
            var prevDeps = prevEffect.deps;
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
              return;
            }
          }
        }
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
      }
      function mountEffect(create, deps) {
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
          return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
        } else {
          return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
        }
      }
      function updateEffect(create, deps) {
        return updateEffectImpl(Passive, Passive$1, create, deps);
      }
      function mountInsertionEffect(create, deps) {
        return mountEffectImpl(Update, Insertion, create, deps);
      }
      function updateInsertionEffect(create, deps) {
        return updateEffectImpl(Update, Insertion, create, deps);
      }
      function mountLayoutEffect(create, deps) {
        var fiberFlags = Update;
        {
          fiberFlags |= LayoutStatic;
        }
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
          fiberFlags |= MountLayoutDev;
        }
        return mountEffectImpl(fiberFlags, Layout, create, deps);
      }
      function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update, Layout, create, deps);
      }
      function imperativeHandleEffect(create, ref) {
        if (typeof ref === "function") {
          var refCallback = ref;
          var _inst = create();
          refCallback(_inst);
          return function() {
            refCallback(null);
          };
        } else if (ref !== null && ref !== undefined) {
          var refObject = ref;
          {
            if (!refObject.hasOwnProperty("current")) {
              error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
            }
          }
          var _inst2 = create();
          refObject.current = _inst2;
          return function() {
            refObject.current = null;
          };
        }
      }
      function mountImperativeHandle(ref, create, deps) {
        {
          if (typeof create !== "function") {
            error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
          }
        }
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
        var fiberFlags = Update;
        {
          fiberFlags |= LayoutStatic;
        }
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
          fiberFlags |= MountLayoutDev;
        }
        return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
      }
      function updateImperativeHandle(ref, create, deps) {
        {
          if (typeof create !== "function") {
            error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
          }
        }
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
        return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
      }
      function mountDebugValue(value, formatterFn) {
      }
      var updateDebugValue = mountDebugValue;
      function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        hook.memoizedState = [callback, nextDeps];
        return callback;
      }
      function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
          if (nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0];
            }
          }
        }
        hook.memoizedState = [callback, nextDeps];
        return callback;
      }
      function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var nextValue = nextCreate();
        hook.memoizedState = [nextValue, nextDeps];
        return nextValue;
      }
      function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
          if (nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0];
            }
          }
        }
        var nextValue = nextCreate();
        hook.memoizedState = [nextValue, nextDeps];
        return nextValue;
      }
      function mountDeferredValue(value) {
        var hook = mountWorkInProgressHook();
        hook.memoizedState = value;
        return value;
      }
      function updateDeferredValue(value) {
        var hook = updateWorkInProgressHook();
        var resolvedCurrentHook = currentHook;
        var prevValue = resolvedCurrentHook.memoizedState;
        return updateDeferredValueImpl(hook, prevValue, value);
      }
      function rerenderDeferredValue(value) {
        var hook = updateWorkInProgressHook();
        if (currentHook === null) {
          hook.memoizedState = value;
          return value;
        } else {
          var prevValue = currentHook.memoizedState;
          return updateDeferredValueImpl(hook, prevValue, value);
        }
      }
      function updateDeferredValueImpl(hook, prevValue, value) {
        var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
        if (shouldDeferValue) {
          if (!objectIs(value, prevValue)) {
            var deferredLane = claimNextTransitionLane();
            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
            markSkippedUpdateLanes(deferredLane);
            hook.baseState = true;
          }
          return prevValue;
        } else {
          if (hook.baseState) {
            hook.baseState = false;
            markWorkInProgressReceivedUpdate();
          }
          hook.memoizedState = value;
          return value;
        }
      }
      function startTransition(setPending, callback, options2) {
        var previousPriority = getCurrentUpdatePriority();
        setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
        setPending(true);
        var prevTransition = ReactCurrentBatchConfig$2.transition;
        ReactCurrentBatchConfig$2.transition = {};
        var currentTransition = ReactCurrentBatchConfig$2.transition;
        {
          ReactCurrentBatchConfig$2.transition._updatedFibers = new Set;
        }
        try {
          setPending(false);
          callback();
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$2.transition = prevTransition;
          {
            if (prevTransition === null && currentTransition._updatedFibers) {
              var updatedFibersCount = currentTransition._updatedFibers.size;
              if (updatedFibersCount > 10) {
                warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
              }
              currentTransition._updatedFibers.clear();
            }
          }
        }
      }
      function mountTransition() {
        var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
        var start = startTransition.bind(null, setPending);
        var hook = mountWorkInProgressHook();
        hook.memoizedState = start;
        return [isPending, start];
      }
      function updateTransition() {
        var _updateState = updateState(), isPending = _updateState[0];
        var hook = updateWorkInProgressHook();
        var start = hook.memoizedState;
        return [isPending, start];
      }
      function rerenderTransition() {
        var _rerenderState = rerenderState(), isPending = _rerenderState[0];
        var hook = updateWorkInProgressHook();
        var start = hook.memoizedState;
        return [isPending, start];
      }
      var isUpdatingOpaqueValueInRenderPhase = false;
      function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
        {
          return isUpdatingOpaqueValueInRenderPhase;
        }
      }
      function mountId() {
        var hook = mountWorkInProgressHook();
        var root2 = getWorkInProgressRoot();
        var identifierPrefix = root2.identifierPrefix;
        var id;
        if (getIsHydrating()) {
          var treeId = getTreeId();
          id = ":" + identifierPrefix + "R" + treeId;
          var localId = localIdCounter++;
          if (localId > 0) {
            id += "H" + localId.toString(32);
          }
          id += ":";
        } else {
          var globalClientId = globalClientIdCounter++;
          id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
        }
        hook.memoizedState = id;
        return id;
      }
      function updateId() {
        var hook = updateWorkInProgressHook();
        var id = hook.memoizedState;
        return id;
      }
      function dispatchReducerAction(fiber, queue, action) {
        {
          if (typeof arguments[3] === "function") {
            error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
          }
        }
        var lane = requestUpdateLane(fiber);
        var update = {
          lane,
          action,
          hasEagerState: false,
          eagerState: null,
          next: null
        };
        if (isRenderPhaseUpdate(fiber)) {
          enqueueRenderPhaseUpdate(queue, update);
        } else {
          var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            entangleTransitionUpdate(root2, queue, lane);
          }
        }
        markUpdateInDevTools(fiber, lane);
      }
      function dispatchSetState(fiber, queue, action) {
        {
          if (typeof arguments[3] === "function") {
            error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
          }
        }
        var lane = requestUpdateLane(fiber);
        var update = {
          lane,
          action,
          hasEagerState: false,
          eagerState: null,
          next: null
        };
        if (isRenderPhaseUpdate(fiber)) {
          enqueueRenderPhaseUpdate(queue, update);
        } else {
          var alternate = fiber.alternate;
          if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
            var lastRenderedReducer = queue.lastRenderedReducer;
            if (lastRenderedReducer !== null) {
              var prevDispatcher;
              {
                prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              }
              try {
                var currentState = queue.lastRenderedState;
                var eagerState = lastRenderedReducer(currentState, action);
                update.hasEagerState = true;
                update.eagerState = eagerState;
                if (objectIs(eagerState, currentState)) {
                  enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                  return;
                }
              } catch (error2) {
              } finally {
                {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }
            }
          }
          var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            entangleTransitionUpdate(root2, queue, lane);
          }
        }
        markUpdateInDevTools(fiber, lane);
      }
      function isRenderPhaseUpdate(fiber) {
        var alternate = fiber.alternate;
        return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
      }
      function enqueueRenderPhaseUpdate(queue, update) {
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
        var pending = queue.pending;
        if (pending === null) {
          update.next = update;
        } else {
          update.next = pending.next;
          pending.next = update;
        }
        queue.pending = update;
      }
      function entangleTransitionUpdate(root2, queue, lane) {
        if (isTransitionLane(lane)) {
          var queueLanes = queue.lanes;
          queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
          var newQueueLanes = mergeLanes(queueLanes, lane);
          queue.lanes = newQueueLanes;
          markRootEntangled(root2, newQueueLanes);
        }
      }
      function markUpdateInDevTools(fiber, lane, action) {
        {
          markStateUpdateScheduled(fiber, lane);
        }
      }
      var ContextOnlyDispatcher = {
        readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useInsertionEffect: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useSyncExternalStore: throwInvalidHookError,
        useId: throwInvalidHookError,
        unstable_isNewReconciler: enableNewReconciler
      };
      var HooksDispatcherOnMountInDEV = null;
      var HooksDispatcherOnMountWithHookTypesInDEV = null;
      var HooksDispatcherOnUpdateInDEV = null;
      var HooksDispatcherOnRerenderInDEV = null;
      var InvalidNestedHooksDispatcherOnMountInDEV = null;
      var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
      var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
      {
        var warnInvalidContextAccess = function() {
          error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        };
        var warnInvalidHookAccess = function() {
          error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
        };
        HooksDispatcherOnMountInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            mountHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            mountHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            mountHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            mountHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            mountHookTypesDev();
            return mountMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            mountHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            mountHookTypesDev();
            return mountId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        HooksDispatcherOnMountWithHookTypesInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return mountEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return mountInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return mountMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return mountId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        HooksDispatcherOnUpdateInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return updateDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return updateTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return updateMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        HooksDispatcherOnRerenderInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return rerenderState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return rerenderDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return rerenderTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return updateMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        InvalidNestedHooksDispatcherOnMountInDEV = {
          readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        InvalidNestedHooksDispatcherOnUpdateInDEV = {
          readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        InvalidNestedHooksDispatcherOnRerenderInDEV = {
          readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return rerenderState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
      }
      var now$1 = Scheduler.unstable_now;
      var commitTime = 0;
      var layoutEffectStartTime = -1;
      var profilerStartTime = -1;
      var passiveEffectStartTime = -1;
      var currentUpdateIsNested = false;
      var nestedUpdateScheduled = false;
      function isCurrentUpdateNested() {
        return currentUpdateIsNested;
      }
      function markNestedUpdateScheduled() {
        {
          nestedUpdateScheduled = true;
        }
      }
      function resetNestedUpdateFlag() {
        {
          currentUpdateIsNested = false;
          nestedUpdateScheduled = false;
        }
      }
      function syncNestedUpdateFlag() {
        {
          currentUpdateIsNested = nestedUpdateScheduled;
          nestedUpdateScheduled = false;
        }
      }
      function getCommitTime() {
        return commitTime;
      }
      function recordCommitTime() {
        commitTime = now$1();
      }
      function startProfilerTimer(fiber) {
        profilerStartTime = now$1();
        if (fiber.actualStartTime < 0) {
          fiber.actualStartTime = now$1();
        }
      }
      function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
      }
      function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
          var elapsedTime = now$1() - profilerStartTime;
          fiber.actualDuration += elapsedTime;
          if (overrideBaseTime) {
            fiber.selfBaseDuration = elapsedTime;
          }
          profilerStartTime = -1;
        }
      }
      function recordLayoutEffectDuration(fiber) {
        if (layoutEffectStartTime >= 0) {
          var elapsedTime = now$1() - layoutEffectStartTime;
          layoutEffectStartTime = -1;
          var parentFiber = fiber.return;
          while (parentFiber !== null) {
            switch (parentFiber.tag) {
              case HostRoot:
                var root2 = parentFiber.stateNode;
                root2.effectDuration += elapsedTime;
                return;
              case Profiler:
                var parentStateNode = parentFiber.stateNode;
                parentStateNode.effectDuration += elapsedTime;
                return;
            }
            parentFiber = parentFiber.return;
          }
        }
      }
      function recordPassiveEffectDuration(fiber) {
        if (passiveEffectStartTime >= 0) {
          var elapsedTime = now$1() - passiveEffectStartTime;
          passiveEffectStartTime = -1;
          var parentFiber = fiber.return;
          while (parentFiber !== null) {
            switch (parentFiber.tag) {
              case HostRoot:
                var root2 = parentFiber.stateNode;
                if (root2 !== null) {
                  root2.passiveEffectDuration += elapsedTime;
                }
                return;
              case Profiler:
                var parentStateNode = parentFiber.stateNode;
                if (parentStateNode !== null) {
                  parentStateNode.passiveEffectDuration += elapsedTime;
                }
                return;
            }
            parentFiber = parentFiber.return;
          }
        }
      }
      function startLayoutEffectTimer() {
        layoutEffectStartTime = now$1();
      }
      function startPassiveEffectTimer() {
        passiveEffectStartTime = now$1();
      }
      function transferActualDuration(fiber) {
        var child = fiber.child;
        while (child) {
          fiber.actualDuration += child.actualDuration;
          child = child.sibling;
        }
      }
      function createCapturedValueAtFiber(value, source) {
        return {
          value,
          source,
          stack: getStackByFiberInDevAndProd(source),
          digest: null
        };
      }
      function createCapturedValue(value, digest, stack) {
        return {
          value,
          source: null,
          stack: stack != null ? stack : null,
          digest: digest != null ? digest : null
        };
      }
      function showErrorDialog(boundary, errorInfo) {
        return true;
      }
      function logCapturedError(boundary, errorInfo) {
        try {
          var logError = showErrorDialog(boundary, errorInfo);
          if (logError === false) {
            return;
          }
          var error2 = errorInfo.value;
          if (true) {
            var source = errorInfo.source;
            var stack = errorInfo.stack;
            var componentStack = stack !== null ? stack : "";
            if (error2 != null && error2._suppressLogging) {
              if (boundary.tag === ClassComponent) {
                return;
              }
              console["error"](error2);
            }
            var componentName = source ? getComponentNameFromFiber(source) : null;
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
            var errorBoundaryMessage;
            if (boundary.tag === HostRoot) {
              errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
            } else {
              var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
              errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            }
            var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
            console["error"](combinedMessage);
          } else {
          }
        } catch (e2) {
          setTimeout(function() {
            throw e2;
          });
        }
      }
      var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
      function createRootErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        update.payload = {
          element: null
        };
        var error2 = errorInfo.value;
        update.callback = function() {
          onUncaughtError(error2);
          logCapturedError(fiber, errorInfo);
        };
        return update;
      }
      function createClassErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError === "function") {
          var error$1 = errorInfo.value;
          update.payload = function() {
            return getDerivedStateFromError(error$1);
          };
          update.callback = function() {
            {
              markFailedErrorBoundaryForHotReloading(fiber);
            }
            logCapturedError(fiber, errorInfo);
          };
        }
        var inst = fiber.stateNode;
        if (inst !== null && typeof inst.componentDidCatch === "function") {
          update.callback = function callback() {
            {
              markFailedErrorBoundaryForHotReloading(fiber);
            }
            logCapturedError(fiber, errorInfo);
            if (typeof getDerivedStateFromError !== "function") {
              markLegacyErrorBoundaryAsFailed(this);
            }
            var error$12 = errorInfo.value;
            var stack = errorInfo.stack;
            this.componentDidCatch(error$12, {
              componentStack: stack !== null ? stack : ""
            });
            {
              if (typeof getDerivedStateFromError !== "function") {
                if (!includesSomeLane(fiber.lanes, SyncLane)) {
                  error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                }
              }
            }
          };
        }
        return update;
      }
      function attachPingListener(root2, wakeable, lanes) {
        var pingCache = root2.pingCache;
        var threadIDs;
        if (pingCache === null) {
          pingCache = root2.pingCache = new PossiblyWeakMap$1;
          threadIDs = new Set;
          pingCache.set(wakeable, threadIDs);
        } else {
          threadIDs = pingCache.get(wakeable);
          if (threadIDs === undefined) {
            threadIDs = new Set;
            pingCache.set(wakeable, threadIDs);
          }
        }
        if (!threadIDs.has(lanes)) {
          threadIDs.add(lanes);
          var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
          {
            if (isDevToolsPresent) {
              restorePendingUpdaters(root2, lanes);
            }
          }
          wakeable.then(ping, ping);
        }
      }
      function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
        var wakeables = suspenseBoundary.updateQueue;
        if (wakeables === null) {
          var updateQueue = new Set;
          updateQueue.add(wakeable);
          suspenseBoundary.updateQueue = updateQueue;
        } else {
          wakeables.add(wakeable);
        }
      }
      function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
        var tag = sourceFiber.tag;
        if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
          var currentSource = sourceFiber.alternate;
          if (currentSource) {
            sourceFiber.updateQueue = currentSource.updateQueue;
            sourceFiber.memoizedState = currentSource.memoizedState;
            sourceFiber.lanes = currentSource.lanes;
          } else {
            sourceFiber.updateQueue = null;
            sourceFiber.memoizedState = null;
          }
        }
      }
      function getNearestSuspenseBoundaryToCapture(returnFiber) {
        var node = returnFiber;
        do {
          if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
            return node;
          }
          node = node.return;
        } while (node !== null);
        return null;
      }
      function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
        if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
          if (suspenseBoundary === returnFiber) {
            suspenseBoundary.flags |= ShouldCapture;
          } else {
            suspenseBoundary.flags |= DidCapture;
            sourceFiber.flags |= ForceUpdateForLegacySuspense;
            sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
            if (sourceFiber.tag === ClassComponent) {
              var currentSourceFiber = sourceFiber.alternate;
              if (currentSourceFiber === null) {
                sourceFiber.tag = IncompleteClassComponent;
              } else {
                var update = createUpdate(NoTimestamp, SyncLane);
                update.tag = ForceUpdate;
                enqueueUpdate(sourceFiber, update, SyncLane);
              }
            }
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
          }
          return suspenseBoundary;
        }
        suspenseBoundary.flags |= ShouldCapture;
        suspenseBoundary.lanes = rootRenderLanes;
        return suspenseBoundary;
      }
      function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
        sourceFiber.flags |= Incomplete;
        {
          if (isDevToolsPresent) {
            restorePendingUpdaters(root2, rootRenderLanes);
          }
        }
        if (value !== null && typeof value === "object" && typeof value.then === "function") {
          var wakeable = value;
          resetSuspendedComponent(sourceFiber);
          {
            if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
              markDidThrowWhileHydratingDEV();
            }
          }
          var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
          if (suspenseBoundary !== null) {
            suspenseBoundary.flags &= ~ForceClientRender;
            markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
            if (suspenseBoundary.mode & ConcurrentMode) {
              attachPingListener(root2, wakeable, rootRenderLanes);
            }
            attachRetryListener(suspenseBoundary, root2, wakeable);
            return;
          } else {
            if (!includesSyncLane(rootRenderLanes)) {
              attachPingListener(root2, wakeable, rootRenderLanes);
              renderDidSuspendDelayIfPossible();
              return;
            }
            var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
            value = uncaughtSuspenseError;
          }
        } else {
          if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
            markDidThrowWhileHydratingDEV();
            var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
            if (_suspenseBoundary !== null) {
              if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                _suspenseBoundary.flags |= ForceClientRender;
              }
              markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
              queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
              return;
            }
          }
        }
        value = createCapturedValueAtFiber(value, sourceFiber);
        renderDidError(value);
        var workInProgress2 = returnFiber;
        do {
          switch (workInProgress2.tag) {
            case HostRoot: {
              var _errorInfo = value;
              workInProgress2.flags |= ShouldCapture;
              var lane = pickArbitraryLane(rootRenderLanes);
              workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
              var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
              enqueueCapturedUpdate(workInProgress2, update);
              return;
            }
            case ClassComponent:
              var errorInfo = value;
              var ctor = workInProgress2.type;
              var instance = workInProgress2.stateNode;
              if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                workInProgress2.flags |= ShouldCapture;
                var _lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                enqueueCapturedUpdate(workInProgress2, _update);
                return;
              }
              break;
          }
          workInProgress2 = workInProgress2.return;
        } while (workInProgress2 !== null);
      }
      function getSuspendedCache() {
        {
          return null;
        }
      }
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
      var didReceiveUpdate = false;
      var didWarnAboutBadClass;
      var didWarnAboutModulePatternComponent;
      var didWarnAboutContextTypeOnFunctionComponent;
      var didWarnAboutGetDerivedStateOnFunctionComponent;
      var didWarnAboutFunctionRefs;
      var didWarnAboutReassigningProps;
      var didWarnAboutRevealOrder;
      var didWarnAboutTailOptions;
      {
        didWarnAboutBadClass = {};
        didWarnAboutModulePatternComponent = {};
        didWarnAboutContextTypeOnFunctionComponent = {};
        didWarnAboutGetDerivedStateOnFunctionComponent = {};
        didWarnAboutFunctionRefs = {};
        didWarnAboutReassigningProps = false;
        didWarnAboutRevealOrder = {};
        didWarnAboutTailOptions = {};
      }
      function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
        if (current2 === null) {
          workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        } else {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
        }
      }
      function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
        workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
        workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
      }
      function updateForwardRef(current2, workInProgress2, Component2, nextProps, renderLanes2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component2.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component2));
            }
          }
        }
        var render2 = Component2.render;
        var ref = workInProgress2.ref;
        var nextChildren;
        var hasId;
        prepareToReadContext(workInProgress2, renderLanes2);
        {
          markComponentRenderStarted(workInProgress2);
        }
        {
          ReactCurrentOwner$1.current = workInProgress2;
          setIsRendering(true);
          nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
          hasId = checkDidRenderIdHook();
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
        if (current2 !== null && !didReceiveUpdate) {
          bailoutHooks(current2, workInProgress2, renderLanes2);
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        if (getIsHydrating() && hasId) {
          pushMaterializedTreeId(workInProgress2);
        }
        workInProgress2.flags |= PerformedWork;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateMemoComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
        if (current2 === null) {
          var type = Component2.type;
          if (isSimpleFunctionComponent(type) && Component2.compare === null && Component2.defaultProps === undefined) {
            var resolvedType = type;
            {
              resolvedType = resolveFunctionForHotReloading(type);
            }
            workInProgress2.tag = SimpleMemoComponent;
            workInProgress2.type = resolvedType;
            {
              validateFunctionComponentInDev(workInProgress2, type);
            }
            return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
          }
          {
            var innerPropTypes = type.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(type));
            }
          }
          var child = createFiberFromTypeAndProps(Component2.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
          child.ref = workInProgress2.ref;
          child.return = workInProgress2;
          workInProgress2.child = child;
          return child;
        }
        {
          var _type = Component2.type;
          var _innerPropTypes = _type.propTypes;
          if (_innerPropTypes) {
            checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentNameFromType(_type));
          }
        }
        var currentChild = current2.child;
        var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
        if (!hasScheduledUpdateOrContext) {
          var prevProps = currentChild.memoizedProps;
          var compare = Component2.compare;
          compare = compare !== null ? compare : shallowEqual;
          if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
        }
        workInProgress2.flags |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        newChild.ref = workInProgress2.ref;
        newChild.return = workInProgress2;
        workInProgress2.child = newChild;
        return newChild;
      }
      function updateSimpleMemoComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var outerMemoType = workInProgress2.elementType;
            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
              var lazyComponent = outerMemoType;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                outerMemoType = init(payload);
              } catch (x5) {
                outerMemoType = null;
              }
              var outerPropTypes = outerMemoType && outerMemoType.propTypes;
              if (outerPropTypes) {
                checkPropTypes(outerPropTypes, nextProps, "prop", getComponentNameFromType(outerMemoType));
              }
            }
          }
        }
        if (current2 !== null) {
          var prevProps = current2.memoizedProps;
          if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
            didReceiveUpdate = false;
            workInProgress2.pendingProps = nextProps = prevProps;
            if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
              workInProgress2.lanes = current2.lanes;
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
              didReceiveUpdate = true;
            }
          }
        }
        return updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2);
      }
      function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps;
        var nextChildren = nextProps.children;
        var prevState = current2 !== null ? current2.memoizedState : null;
        if (nextProps.mode === "hidden" || enableLegacyHidden) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            var nextState = {
              baseLanes: NoLanes,
              cachePool: null,
              transitions: null
            };
            workInProgress2.memoizedState = nextState;
            pushRenderLanes(workInProgress2, renderLanes2);
          } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
            var spawnedCachePool = null;
            var nextBaseLanes;
            if (prevState !== null) {
              var prevBaseLanes = prevState.baseLanes;
              nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
            } else {
              nextBaseLanes = renderLanes2;
            }
            workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
            var _nextState = {
              baseLanes: nextBaseLanes,
              cachePool: spawnedCachePool,
              transitions: null
            };
            workInProgress2.memoizedState = _nextState;
            workInProgress2.updateQueue = null;
            pushRenderLanes(workInProgress2, nextBaseLanes);
            return null;
          } else {
            var _nextState2 = {
              baseLanes: NoLanes,
              cachePool: null,
              transitions: null
            };
            workInProgress2.memoizedState = _nextState2;
            var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
            pushRenderLanes(workInProgress2, subtreeRenderLanes2);
          }
        } else {
          var _subtreeRenderLanes;
          if (prevState !== null) {
            _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
            workInProgress2.memoizedState = null;
          } else {
            _subtreeRenderLanes = renderLanes2;
          }
          pushRenderLanes(workInProgress2, _subtreeRenderLanes);
        }
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateFragment(current2, workInProgress2, renderLanes2) {
        var nextChildren = workInProgress2.pendingProps;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateMode(current2, workInProgress2, renderLanes2) {
        var nextChildren = workInProgress2.pendingProps.children;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateProfiler(current2, workInProgress2, renderLanes2) {
        {
          workInProgress2.flags |= Update;
          {
            var stateNode = workInProgress2.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }
        }
        var nextProps = workInProgress2.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function markRef(current2, workInProgress2) {
        var ref = workInProgress2.ref;
        if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
          workInProgress2.flags |= Ref;
          {
            workInProgress2.flags |= RefStatic;
          }
        }
      }
      function updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component2.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component2));
            }
          }
        }
        var context;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, true);
          context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        var nextChildren;
        var hasId;
        prepareToReadContext(workInProgress2, renderLanes2);
        {
          markComponentRenderStarted(workInProgress2);
        }
        {
          ReactCurrentOwner$1.current = workInProgress2;
          setIsRendering(true);
          nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
          hasId = checkDidRenderIdHook();
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
        if (current2 !== null && !didReceiveUpdate) {
          bailoutHooks(current2, workInProgress2, renderLanes2);
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        if (getIsHydrating() && hasId) {
          pushMaterializedTreeId(workInProgress2);
        }
        workInProgress2.flags |= PerformedWork;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateClassComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
        {
          switch (shouldError(workInProgress2)) {
            case false: {
              var _instance = workInProgress2.stateNode;
              var ctor = workInProgress2.type;
              var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
              var state = tempInstance.state;
              _instance.updater.enqueueSetState(_instance, state, null);
              break;
            }
            case true: {
              workInProgress2.flags |= DidCapture;
              workInProgress2.flags |= ShouldCapture;
              var error$1 = new Error("Simulated error coming from DevTools");
              var lane = pickArbitraryLane(renderLanes2);
              workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
              var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
              enqueueCapturedUpdate(workInProgress2, update);
              break;
            }
          }
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component2.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component2));
            }
          }
        }
        var hasContext;
        if (isContextProvider(Component2)) {
          hasContext = true;
          pushContextProvider(workInProgress2);
        } else {
          hasContext = false;
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        var instance = workInProgress2.stateNode;
        var shouldUpdate;
        if (instance === null) {
          resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
          constructClassInstance(workInProgress2, Component2, nextProps);
          mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
          shouldUpdate = true;
        } else if (current2 === null) {
          shouldUpdate = resumeMountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
        } else {
          shouldUpdate = updateClassInstance(current2, workInProgress2, Component2, nextProps, renderLanes2);
        }
        var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2);
        {
          var inst = workInProgress2.stateNode;
          if (shouldUpdate && inst.props !== nextProps) {
            if (!didWarnAboutReassigningProps) {
              error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
            }
            didWarnAboutReassigningProps = true;
          }
        }
        return nextUnitOfWork;
      }
      function finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2) {
        markRef(current2, workInProgress2);
        var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
        if (!shouldUpdate && !didCaptureError) {
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component2, false);
          }
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        var instance = workInProgress2.stateNode;
        ReactCurrentOwner$1.current = workInProgress2;
        var nextChildren;
        if (didCaptureError && typeof Component2.getDerivedStateFromError !== "function") {
          nextChildren = null;
          {
            stopProfilerTimerIfRunning();
          }
        } else {
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            setIsRendering(true);
            nextChildren = instance.render();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                instance.render();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
        }
        workInProgress2.flags |= PerformedWork;
        if (current2 !== null && didCaptureError) {
          forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
        } else {
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        }
        workInProgress2.memoizedState = instance.state;
        if (hasContext) {
          invalidateContextProvider(workInProgress2, Component2, true);
        }
        return workInProgress2.child;
      }
      function pushHostRootContext(workInProgress2) {
        var root2 = workInProgress2.stateNode;
        if (root2.pendingContext) {
          pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
        } else if (root2.context) {
          pushTopLevelContextObject(workInProgress2, root2.context, false);
        }
        pushHostContainer(workInProgress2, root2.containerInfo);
      }
      function updateHostRoot(current2, workInProgress2, renderLanes2) {
        pushHostRootContext(workInProgress2);
        if (current2 === null) {
          throw new Error("Should have a current fiber. This is a bug in React.");
        }
        var nextProps = workInProgress2.pendingProps;
        var prevState = workInProgress2.memoizedState;
        var prevChildren = prevState.element;
        cloneUpdateQueue(current2, workInProgress2);
        processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
        var nextState = workInProgress2.memoizedState;
        var root2 = workInProgress2.stateNode;
        var nextChildren = nextState.element;
        if (prevState.isDehydrated) {
          var overrideState = {
            element: nextChildren,
            isDehydrated: false,
            cache: nextState.cache,
            pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
            transitions: nextState.transitions
          };
          var updateQueue = workInProgress2.updateQueue;
          updateQueue.baseState = overrideState;
          workInProgress2.memoizedState = overrideState;
          if (workInProgress2.flags & ForceClientRender) {
            var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
            return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
          } else if (nextChildren !== prevChildren) {
            var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
            return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
          } else {
            enterHydrationState(workInProgress2);
            var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            workInProgress2.child = child;
            var node = child;
            while (node) {
              node.flags = node.flags & ~Placement | Hydrating;
              node = node.sibling;
            }
          }
        } else {
          resetHydrationState();
          if (nextChildren === prevChildren) {
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        }
        return workInProgress2.child;
      }
      function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
        resetHydrationState();
        queueHydrationError(recoverableError);
        workInProgress2.flags |= ForceClientRender;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateHostComponent(current2, workInProgress2, renderLanes2) {
        pushHostContext(workInProgress2);
        if (current2 === null) {
          tryToClaimNextHydratableInstance(workInProgress2);
        }
        var type = workInProgress2.type;
        var nextProps = workInProgress2.pendingProps;
        var prevProps = current2 !== null ? current2.memoizedProps : null;
        var nextChildren = nextProps.children;
        var isDirectTextChild = shouldSetTextContent(type, nextProps);
        if (isDirectTextChild) {
          nextChildren = null;
        } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
          workInProgress2.flags |= ContentReset;
        }
        markRef(current2, workInProgress2);
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateHostText(current2, workInProgress2) {
        if (current2 === null) {
          tryToClaimNextHydratableInstance(workInProgress2);
        }
        return null;
      }
      function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
        var props = workInProgress2.pendingProps;
        var lazyComponent = elementType;
        var payload = lazyComponent._payload;
        var init = lazyComponent._init;
        var Component2 = init(payload);
        workInProgress2.type = Component2;
        var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component2);
        var resolvedProps = resolveDefaultProps(Component2, props);
        var child;
        switch (resolvedTag) {
          case FunctionComponent: {
            {
              validateFunctionComponentInDev(workInProgress2, Component2);
              workInProgress2.type = Component2 = resolveFunctionForHotReloading(Component2);
            }
            child = updateFunctionComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
            return child;
          }
          case ClassComponent: {
            {
              workInProgress2.type = Component2 = resolveClassForHotReloading(Component2);
            }
            child = updateClassComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
            return child;
          }
          case ForwardRef: {
            {
              workInProgress2.type = Component2 = resolveForwardRefForHotReloading(Component2);
            }
            child = updateForwardRef(null, workInProgress2, Component2, resolvedProps, renderLanes2);
            return child;
          }
          case MemoComponent: {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerPropTypes = Component2.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentNameFromType(Component2));
                }
              }
            }
            child = updateMemoComponent(null, workInProgress2, Component2, resolveDefaultProps(Component2.type, resolvedProps), renderLanes2);
            return child;
          }
        }
        var hint = "";
        {
          if (Component2 !== null && typeof Component2 === "object" && Component2.$$typeof === REACT_LAZY_TYPE) {
            hint = " Did you wrap a component in React.lazy() more than once?";
          }
        }
        throw new Error("Element type is invalid. Received a promise that resolves to: " + Component2 + ". " + ("Lazy element type must resolve to a class or function." + hint));
      }
      function mountIncompleteClassComponent(_current, workInProgress2, Component2, nextProps, renderLanes2) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
        workInProgress2.tag = ClassComponent;
        var hasContext;
        if (isContextProvider(Component2)) {
          hasContext = true;
          pushContextProvider(workInProgress2);
        } else {
          hasContext = false;
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        constructClassInstance(workInProgress2, Component2, nextProps);
        mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
        return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
      }
      function mountIndeterminateComponent(_current, workInProgress2, Component2, renderLanes2) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
        var props = workInProgress2.pendingProps;
        var context;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, false);
          context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        var value;
        var hasId;
        {
          markComponentRenderStarted(workInProgress2);
        }
        {
          if (Component2.prototype && typeof Component2.prototype.render === "function") {
            var componentName = getComponentNameFromType(Component2) || "Unknown";
            if (!didWarnAboutBadClass[componentName]) {
              error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
              didWarnAboutBadClass[componentName] = true;
            }
          }
          if (workInProgress2.mode & StrictLegacyMode) {
            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
          }
          setIsRendering(true);
          ReactCurrentOwner$1.current = workInProgress2;
          value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
          hasId = checkDidRenderIdHook();
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
        workInProgress2.flags |= PerformedWork;
        {
          if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === undefined) {
            var _componentName = getComponentNameFromType(Component2) || "Unknown";
            if (!didWarnAboutModulePatternComponent[_componentName]) {
              error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
              didWarnAboutModulePatternComponent[_componentName] = true;
            }
          }
        }
        if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === undefined) {
          {
            var _componentName2 = getComponentNameFromType(Component2) || "Unknown";
            if (!didWarnAboutModulePatternComponent[_componentName2]) {
              error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
              didWarnAboutModulePatternComponent[_componentName2] = true;
            }
          }
          workInProgress2.tag = ClassComponent;
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          var hasContext = false;
          if (isContextProvider(Component2)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          workInProgress2.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
          initializeUpdateQueue(workInProgress2);
          adoptClassInstance(workInProgress2, value);
          mountClassInstance(workInProgress2, Component2, props, renderLanes2);
          return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
        } else {
          workInProgress2.tag = FunctionComponent;
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          reconcileChildren(null, workInProgress2, value, renderLanes2);
          {
            validateFunctionComponentInDev(workInProgress2, Component2);
          }
          return workInProgress2.child;
        }
      }
      function validateFunctionComponentInDev(workInProgress2, Component2) {
        {
          if (Component2) {
            if (Component2.childContextTypes) {
              error("%s(...): childContextTypes cannot be defined on a function component.", Component2.displayName || Component2.name || "Component");
            }
          }
          if (workInProgress2.ref !== null) {
            var info = "";
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              info += "\n\nCheck the render method of `" + ownerName + "`.";
            }
            var warningKey = ownerName || "";
            var debugSource = workInProgress2._debugSource;
            if (debugSource) {
              warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
            }
            if (!didWarnAboutFunctionRefs[warningKey]) {
              didWarnAboutFunctionRefs[warningKey] = true;
              error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
            }
          }
          if (typeof Component2.getDerivedStateFromProps === "function") {
            var _componentName3 = getComponentNameFromType(Component2) || "Unknown";
            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
              error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
              didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
            }
          }
          if (typeof Component2.contextType === "object" && Component2.contextType !== null) {
            var _componentName4 = getComponentNameFromType(Component2) || "Unknown";
            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
              error("%s: Function components do not support contextType.", _componentName4);
              didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
            }
          }
        }
      }
      var SUSPENDED_MARKER = {
        dehydrated: null,
        treeContext: null,
        retryLane: NoLane
      };
      function mountSuspenseOffscreenState(renderLanes2) {
        return {
          baseLanes: renderLanes2,
          cachePool: getSuspendedCache(),
          transitions: null
        };
      }
      function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
        var cachePool = null;
        return {
          baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
          cachePool,
          transitions: prevOffscreenState.transitions
        };
      }
      function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
        if (current2 !== null) {
          var suspenseState = current2.memoizedState;
          if (suspenseState === null) {
            return false;
          }
        }
        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
      }
      function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
        return removeLanes(current2.childLanes, renderLanes2);
      }
      function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps;
        {
          if (shouldSuspend(workInProgress2)) {
            workInProgress2.flags |= DidCapture;
          }
        }
        var suspenseContext = suspenseStackCursor.current;
        var showFallback = false;
        var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
        if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
          showFallback = true;
          workInProgress2.flags &= ~DidCapture;
        } else {
          if (current2 === null || current2.memoizedState !== null) {
            {
              suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
            }
          }
        }
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        pushSuspenseContext(workInProgress2, suspenseContext);
        if (current2 === null) {
          tryToClaimNextHydratableInstance(workInProgress2);
          var suspenseState = workInProgress2.memoizedState;
          if (suspenseState !== null) {
            var dehydrated = suspenseState.dehydrated;
            if (dehydrated !== null) {
              return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
            }
          }
          var nextPrimaryChildren = nextProps.children;
          var nextFallbackChildren = nextProps.fallback;
          if (showFallback) {
            var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
            var primaryChildFragment = workInProgress2.child;
            primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
            workInProgress2.memoizedState = SUSPENDED_MARKER;
            return fallbackFragment;
          } else {
            return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
          }
        } else {
          var prevState = current2.memoizedState;
          if (prevState !== null) {
            var _dehydrated = prevState.dehydrated;
            if (_dehydrated !== null) {
              return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
            }
          }
          if (showFallback) {
            var _nextFallbackChildren = nextProps.fallback;
            var _nextPrimaryChildren = nextProps.children;
            var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
            var _primaryChildFragment2 = workInProgress2.child;
            var prevOffscreenState = current2.child.memoizedState;
            _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
            _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
            workInProgress2.memoizedState = SUSPENDED_MARKER;
            return fallbackChildFragment;
          } else {
            var _nextPrimaryChildren2 = nextProps.children;
            var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
            workInProgress2.memoizedState = null;
            return _primaryChildFragment3;
          }
        }
      }
      function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
        var mode = workInProgress2.mode;
        var primaryChildProps = {
          mode: "visible",
          children: primaryChildren
        };
        var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
        primaryChildFragment.return = workInProgress2;
        workInProgress2.child = primaryChildFragment;
        return primaryChildFragment;
      }
      function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var mode = workInProgress2.mode;
        var progressedPrimaryFragment = workInProgress2.child;
        var primaryChildProps = {
          mode: "hidden",
          children: primaryChildren
        };
        var primaryChildFragment;
        var fallbackChildFragment;
        if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
          primaryChildFragment = progressedPrimaryFragment;
          primaryChildFragment.childLanes = NoLanes;
          primaryChildFragment.pendingProps = primaryChildProps;
          if (workInProgress2.mode & ProfileMode) {
            primaryChildFragment.actualDuration = 0;
            primaryChildFragment.actualStartTime = -1;
            primaryChildFragment.selfBaseDuration = 0;
            primaryChildFragment.treeBaseDuration = 0;
          }
          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
        } else {
          primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
        }
        primaryChildFragment.return = workInProgress2;
        fallbackChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress2.child = primaryChildFragment;
        return fallbackChildFragment;
      }
      function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
        return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
      }
      function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
        return createWorkInProgress(current2, offscreenProps);
      }
      function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
        var currentPrimaryChildFragment = current2.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
          mode: "visible",
          children: primaryChildren
        });
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          primaryChildFragment.lanes = renderLanes2;
        }
        primaryChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = null;
        if (currentFallbackChildFragment !== null) {
          var deletions = workInProgress2.deletions;
          if (deletions === null) {
            workInProgress2.deletions = [currentFallbackChildFragment];
            workInProgress2.flags |= ChildDeletion;
          } else {
            deletions.push(currentFallbackChildFragment);
          }
        }
        workInProgress2.child = primaryChildFragment;
        return primaryChildFragment;
      }
      function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var mode = workInProgress2.mode;
        var currentPrimaryChildFragment = current2.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildProps = {
          mode: "hidden",
          children: primaryChildren
        };
        var primaryChildFragment;
        if ((mode & ConcurrentMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
          var progressedPrimaryFragment = workInProgress2.child;
          primaryChildFragment = progressedPrimaryFragment;
          primaryChildFragment.childLanes = NoLanes;
          primaryChildFragment.pendingProps = primaryChildProps;
          if (workInProgress2.mode & ProfileMode) {
            primaryChildFragment.actualDuration = 0;
            primaryChildFragment.actualStartTime = -1;
            primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
            primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
          }
          workInProgress2.deletions = null;
        } else {
          primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
          primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
        }
        var fallbackChildFragment;
        if (currentFallbackChildFragment !== null) {
          fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
        } else {
          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          fallbackChildFragment.flags |= Placement;
        }
        fallbackChildFragment.return = workInProgress2;
        primaryChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress2.child = primaryChildFragment;
        return fallbackChildFragment;
      }
      function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
        if (recoverableError !== null) {
          queueHydrationError(recoverableError);
        }
        reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
        var nextProps = workInProgress2.pendingProps;
        var primaryChildren = nextProps.children;
        var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
        primaryChildFragment.flags |= Placement;
        workInProgress2.memoizedState = null;
        return primaryChildFragment;
      }
      function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var fiberMode = workInProgress2.mode;
        var primaryChildProps = {
          mode: "visible",
          children: primaryChildren
        };
        var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
        var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
        fallbackChildFragment.flags |= Placement;
        primaryChildFragment.return = workInProgress2;
        fallbackChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress2.child = primaryChildFragment;
        if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
          reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
        }
        return fallbackChildFragment;
      }
      function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          {
            error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
          }
          workInProgress2.lanes = laneToLanes(SyncLane);
        } else if (isSuspenseInstanceFallback(suspenseInstance)) {
          workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
        } else {
          workInProgress2.lanes = laneToLanes(OffscreenLane);
        }
        return null;
      }
      function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
        if (!didSuspend) {
          warnIfHydrating();
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, null);
          }
          if (isSuspenseInstanceFallback(suspenseInstance)) {
            var digest, message, stack;
            {
              var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
              digest = _getSuspenseInstanceF.digest;
              message = _getSuspenseInstanceF.message;
              stack = _getSuspenseInstanceF.stack;
            }
            var error2;
            if (message) {
              error2 = new Error(message);
            } else {
              error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
            }
            var capturedValue = createCapturedValue(error2, digest, stack);
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
          }
          var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
          if (didReceiveUpdate || hasContextChanged2) {
            var root2 = getWorkInProgressRoot();
            if (root2 !== null) {
              var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
              if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                suspenseState.retryLane = attemptHydrationAtLane;
                var eventTime = NoTimestamp;
                enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
              }
            }
            renderDidSuspendDelayIfPossible();
            var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
          } else if (isSuspenseInstancePending(suspenseInstance)) {
            workInProgress2.flags |= DidCapture;
            workInProgress2.child = current2.child;
            var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
            registerSuspenseInstanceRetry(suspenseInstance, retry);
            return null;
          } else {
            reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Hydrating;
            return primaryChildFragment;
          }
        } else {
          if (workInProgress2.flags & ForceClientRender) {
            workInProgress2.flags &= ~ForceClientRender;
            var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
          } else if (workInProgress2.memoizedState !== null) {
            workInProgress2.child = current2.child;
            workInProgress2.flags |= DidCapture;
            return null;
          } else {
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
            var _primaryChildFragment4 = workInProgress2.child;
            _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
            workInProgress2.memoizedState = SUSPENDED_MARKER;
            return fallbackChildFragment;
          }
        }
      }
      function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
        fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
        var alternate = fiber.alternate;
        if (alternate !== null) {
          alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
        }
        scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
      }
      function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
        var node = firstChild;
        while (node !== null) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState;
            if (state !== null) {
              scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
            }
          } else if (node.tag === SuspenseListComponent) {
            scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === workInProgress2) {
            return;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === workInProgress2) {
              return;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      }
      function findLastContentRow(firstChild) {
        var row = firstChild;
        var lastContentRow = null;
        while (row !== null) {
          var currentRow = row.alternate;
          if (currentRow !== null && findFirstSuspended(currentRow) === null) {
            lastContentRow = row;
          }
          row = row.sibling;
        }
        return lastContentRow;
      }
      function validateRevealOrder(revealOrder) {
        {
          if (revealOrder !== undefined && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
            didWarnAboutRevealOrder[revealOrder] = true;
            if (typeof revealOrder === "string") {
              switch (revealOrder.toLowerCase()) {
                case "together":
                case "forwards":
                case "backwards": {
                  error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                  break;
                }
                case "forward":
                case "backward": {
                  error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                  break;
                }
                default:
                  error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                  break;
              }
            } else {
              error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
            }
          }
        }
      }
      function validateTailOptions(tailMode, revealOrder) {
        {
          if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
            if (tailMode !== "collapsed" && tailMode !== "hidden") {
              didWarnAboutTailOptions[tailMode] = true;
              error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
            } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
              didWarnAboutTailOptions[tailMode] = true;
              error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
            }
          }
        }
      }
      function validateSuspenseListNestedChild(childSlot, index2) {
        {
          var isAnArray = isArray(childSlot);
          var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
          if (isAnArray || isIterable) {
            var type = isAnArray ? "array" : "iterable";
            error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
            return false;
          }
        }
        return true;
      }
      function validateSuspenseListChildren(children, revealOrder) {
        {
          if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== undefined && children !== null && children !== false) {
            if (isArray(children)) {
              for (var i = 0;i < children.length; i++) {
                if (!validateSuspenseListNestedChild(children[i], i)) {
                  return;
                }
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var childrenIterator = iteratorFn.call(children);
                if (childrenIterator) {
                  var step = childrenIterator.next();
                  var _i = 0;
                  for (;!step.done; step = childrenIterator.next()) {
                    if (!validateSuspenseListNestedChild(step.value, _i)) {
                      return;
                    }
                    _i++;
                  }
                }
              } else {
                error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
              }
            }
          }
        }
      }
      function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
        var renderState = workInProgress2.memoizedState;
        if (renderState === null) {
          workInProgress2.memoizedState = {
            isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail,
            tailMode
          };
        } else {
          renderState.isBackwards = isBackwards;
          renderState.rendering = null;
          renderState.renderingStartTime = 0;
          renderState.last = lastContentRow;
          renderState.tail = tail;
          renderState.tailMode = tailMode;
        }
      }
      function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps;
        var revealOrder = nextProps.revealOrder;
        var tailMode = nextProps.tail;
        var newChildren = nextProps.children;
        validateRevealOrder(revealOrder);
        validateTailOptions(tailMode, revealOrder);
        validateSuspenseListChildren(newChildren, revealOrder);
        reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
        var suspenseContext = suspenseStackCursor.current;
        var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        if (shouldForceFallback) {
          suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
          workInProgress2.flags |= DidCapture;
        } else {
          var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
          if (didSuspendBefore) {
            propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }
        pushSuspenseContext(workInProgress2, suspenseContext);
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          workInProgress2.memoizedState = null;
        } else {
          switch (revealOrder) {
            case "forwards": {
              var lastContentRow = findLastContentRow(workInProgress2.child);
              var tail;
              if (lastContentRow === null) {
                tail = workInProgress2.child;
                workInProgress2.child = null;
              } else {
                tail = lastContentRow.sibling;
                lastContentRow.sibling = null;
              }
              initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode);
              break;
            }
            case "backwards": {
              var _tail = null;
              var row = workInProgress2.child;
              workInProgress2.child = null;
              while (row !== null) {
                var currentRow = row.alternate;
                if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                  workInProgress2.child = row;
                  break;
                }
                var nextRow = row.sibling;
                row.sibling = _tail;
                _tail = row;
                row = nextRow;
              }
              initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode);
              break;
            }
            case "together": {
              initSuspenseListRenderState(workInProgress2, false, null, null, undefined);
              break;
            }
            default: {
              workInProgress2.memoizedState = null;
            }
          }
        }
        return workInProgress2.child;
      }
      function updatePortalComponent(current2, workInProgress2, renderLanes2) {
        pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
        var nextChildren = workInProgress2.pendingProps;
        if (current2 === null) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        } else {
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        }
        return workInProgress2.child;
      }
      var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
      function updateContextProvider(current2, workInProgress2, renderLanes2) {
        var providerType = workInProgress2.type;
        var context = providerType._context;
        var newProps = workInProgress2.pendingProps;
        var oldProps = workInProgress2.memoizedProps;
        var newValue = newProps.value;
        {
          if (!("value" in newProps)) {
            if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
              hasWarnedAboutUsingNoValuePropOnContextProvider = true;
              error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
            }
          }
          var providerPropTypes = workInProgress2.type.propTypes;
          if (providerPropTypes) {
            checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
          }
        }
        pushProvider(workInProgress2, context, newValue);
        {
          if (oldProps !== null) {
            var oldValue = oldProps.value;
            if (objectIs(oldValue, newValue)) {
              if (oldProps.children === newProps.children && !hasContextChanged()) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            } else {
              propagateContextChange(workInProgress2, context, renderLanes2);
            }
          }
        }
        var newChildren = newProps.children;
        reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
        return workInProgress2.child;
      }
      var hasWarnedAboutUsingContextAsConsumer = false;
      function updateContextConsumer(current2, workInProgress2, renderLanes2) {
        var context = workInProgress2.type;
        {
          if (context._context === undefined) {
            if (context !== context.Consumer) {
              if (!hasWarnedAboutUsingContextAsConsumer) {
                hasWarnedAboutUsingContextAsConsumer = true;
                error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
              }
            }
          } else {
            context = context._context;
          }
        }
        var newProps = workInProgress2.pendingProps;
        var render2 = newProps.children;
        {
          if (typeof render2 !== "function") {
            error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
          }
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        var newValue = readContext(context);
        {
          markComponentRenderStarted(workInProgress2);
        }
        var newChildren;
        {
          ReactCurrentOwner$1.current = workInProgress2;
          setIsRendering(true);
          newChildren = render2(newValue);
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
        workInProgress2.flags |= PerformedWork;
        reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
        return workInProgress2.child;
      }
      function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
      }
      function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          if (current2 !== null) {
            current2.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.flags |= Placement;
          }
        }
      }
      function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
        if (current2 !== null) {
          workInProgress2.dependencies = current2.dependencies;
        }
        {
          stopProfilerTimerIfRunning();
        }
        markSkippedUpdateLanes(workInProgress2.lanes);
        if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
          {
            return null;
          }
        }
        cloneChildFibers(current2, workInProgress2);
        return workInProgress2.child;
      }
      function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
        {
          var returnFiber = oldWorkInProgress.return;
          if (returnFiber === null) {
            throw new Error("Cannot swap the root fiber.");
          }
          current2.alternate = null;
          oldWorkInProgress.alternate = null;
          newWorkInProgress.index = oldWorkInProgress.index;
          newWorkInProgress.sibling = oldWorkInProgress.sibling;
          newWorkInProgress.return = oldWorkInProgress.return;
          newWorkInProgress.ref = oldWorkInProgress.ref;
          if (oldWorkInProgress === returnFiber.child) {
            returnFiber.child = newWorkInProgress;
          } else {
            var prevSibling = returnFiber.child;
            if (prevSibling === null) {
              throw new Error("Expected parent to have a child.");
            }
            while (prevSibling.sibling !== oldWorkInProgress) {
              prevSibling = prevSibling.sibling;
              if (prevSibling === null) {
                throw new Error("Expected to find the previous sibling.");
              }
            }
            prevSibling.sibling = newWorkInProgress;
          }
          var deletions = returnFiber.deletions;
          if (deletions === null) {
            returnFiber.deletions = [current2];
            returnFiber.flags |= ChildDeletion;
          } else {
            deletions.push(current2);
          }
          newWorkInProgress.flags |= Placement;
          return newWorkInProgress;
        }
      }
      function checkScheduledUpdateOrContext(current2, renderLanes2) {
        var updateLanes = current2.lanes;
        if (includesSomeLane(updateLanes, renderLanes2)) {
          return true;
        }
        return false;
      }
      function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
        switch (workInProgress2.tag) {
          case HostRoot:
            pushHostRootContext(workInProgress2);
            var root2 = workInProgress2.stateNode;
            resetHydrationState();
            break;
          case HostComponent:
            pushHostContext(workInProgress2);
            break;
          case ClassComponent: {
            var Component2 = workInProgress2.type;
            if (isContextProvider(Component2)) {
              pushContextProvider(workInProgress2);
            }
            break;
          }
          case HostPortal:
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            break;
          case ContextProvider: {
            var newValue = workInProgress2.memoizedProps.value;
            var context = workInProgress2.type._context;
            pushProvider(workInProgress2, context, newValue);
            break;
          }
          case Profiler:
            {
              var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
              if (hasChildWork) {
                workInProgress2.flags |= Update;
              }
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            break;
          case SuspenseComponent: {
            var state = workInProgress2.memoizedState;
            if (state !== null) {
              if (state.dehydrated !== null) {
                pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                workInProgress2.flags |= DidCapture;
                return null;
              }
              var primaryChildFragment = workInProgress2.child;
              var primaryChildLanes = primaryChildFragment.childLanes;
              if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              } else {
                pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                if (child !== null) {
                  return child.sibling;
                } else {
                  return null;
                }
              }
            } else {
              pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
            }
            break;
          }
          case SuspenseListComponent: {
            var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
            var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
            if (didSuspendBefore) {
              if (_hasChildWork) {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              workInProgress2.flags |= DidCapture;
            }
            var renderState = workInProgress2.memoizedState;
            if (renderState !== null) {
              renderState.rendering = null;
              renderState.tail = null;
              renderState.lastEffect = null;
            }
            pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
            if (_hasChildWork) {
              break;
            } else {
              return null;
            }
          }
          case OffscreenComponent:
          case LegacyHiddenComponent: {
            workInProgress2.lanes = NoLanes;
            return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
          }
        }
        return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
      }
      function beginWork(current2, workInProgress2, renderLanes2) {
        {
          if (workInProgress2._debugNeedsRemount && current2 !== null) {
            return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
          }
        }
        if (current2 !== null) {
          var oldProps = current2.memoizedProps;
          var newProps = workInProgress2.pendingProps;
          if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
            didReceiveUpdate = true;
          } else {
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext && (workInProgress2.flags & DidCapture) === NoFlags) {
              didReceiveUpdate = false;
              return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
            }
            if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
              didReceiveUpdate = true;
            } else {
              didReceiveUpdate = false;
            }
          }
        } else {
          didReceiveUpdate = false;
          if (getIsHydrating() && isForkedChild(workInProgress2)) {
            var slotIndex = workInProgress2.index;
            var numberOfForks = getForksAtLevel();
            pushTreeId(workInProgress2, numberOfForks, slotIndex);
          }
        }
        workInProgress2.lanes = NoLanes;
        switch (workInProgress2.tag) {
          case IndeterminateComponent: {
            return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
          }
          case LazyComponent: {
            var elementType = workInProgress2.elementType;
            return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
          }
          case FunctionComponent: {
            var Component2 = workInProgress2.type;
            var unresolvedProps = workInProgress2.pendingProps;
            var resolvedProps = workInProgress2.elementType === Component2 ? unresolvedProps : resolveDefaultProps(Component2, unresolvedProps);
            return updateFunctionComponent(current2, workInProgress2, Component2, resolvedProps, renderLanes2);
          }
          case ClassComponent: {
            var _Component = workInProgress2.type;
            var _unresolvedProps = workInProgress2.pendingProps;
            var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
            return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
          }
          case HostRoot:
            return updateHostRoot(current2, workInProgress2, renderLanes2);
          case HostComponent:
            return updateHostComponent(current2, workInProgress2, renderLanes2);
          case HostText:
            return updateHostText(current2, workInProgress2);
          case SuspenseComponent:
            return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
          case HostPortal:
            return updatePortalComponent(current2, workInProgress2, renderLanes2);
          case ForwardRef: {
            var type = workInProgress2.type;
            var _unresolvedProps2 = workInProgress2.pendingProps;
            var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
            return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
          }
          case Fragment:
            return updateFragment(current2, workInProgress2, renderLanes2);
          case Mode:
            return updateMode(current2, workInProgress2, renderLanes2);
          case Profiler:
            return updateProfiler(current2, workInProgress2, renderLanes2);
          case ContextProvider:
            return updateContextProvider(current2, workInProgress2, renderLanes2);
          case ContextConsumer:
            return updateContextConsumer(current2, workInProgress2, renderLanes2);
          case MemoComponent: {
            var _type2 = workInProgress2.type;
            var _unresolvedProps3 = workInProgress2.pendingProps;
            var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerPropTypes = _type2.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentNameFromType(_type2));
                }
              }
            }
            _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
            return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
          }
          case SimpleMemoComponent: {
            return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
          }
          case IncompleteClassComponent: {
            var _Component2 = workInProgress2.type;
            var _unresolvedProps4 = workInProgress2.pendingProps;
            var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
            return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
          }
          case SuspenseListComponent: {
            return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
          }
          case ScopeComponent: {
            break;
          }
          case OffscreenComponent: {
            return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
          }
        }
        throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
      }
      function markUpdate(workInProgress2) {
        workInProgress2.flags |= Update;
      }
      function markRef$1(workInProgress2) {
        workInProgress2.flags |= Ref;
        {
          workInProgress2.flags |= RefStatic;
        }
      }
      var appendAllChildren;
      var updateHostContainer;
      var updateHostComponent$1;
      var updateHostText$1;
      {
        appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
          var node = workInProgress2.child;
          while (node !== null) {
            if (node.tag === HostComponent || node.tag === HostText) {
              appendInitialChild(parent, node.stateNode);
            } else if (node.tag === HostPortal)
              ;
            else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        };
        updateHostContainer = function(current2, workInProgress2) {
        };
        updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
          var oldProps = current2.memoizedProps;
          if (oldProps === newProps) {
            return;
          }
          var instance = workInProgress2.stateNode;
          var currentHostContext = getHostContext();
          var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
          workInProgress2.updateQueue = updatePayload;
          if (updatePayload) {
            markUpdate(workInProgress2);
          }
        };
        updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
          if (oldText !== newText) {
            markUpdate(workInProgress2);
          }
        };
      }
      function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (getIsHydrating()) {
          return;
        }
        switch (renderState.tailMode) {
          case "hidden": {
            var tailNode = renderState.tail;
            var lastTailNode = null;
            while (tailNode !== null) {
              if (tailNode.alternate !== null) {
                lastTailNode = tailNode;
              }
              tailNode = tailNode.sibling;
            }
            if (lastTailNode === null) {
              renderState.tail = null;
            } else {
              lastTailNode.sibling = null;
            }
            break;
          }
          case "collapsed": {
            var _tailNode = renderState.tail;
            var _lastTailNode = null;
            while (_tailNode !== null) {
              if (_tailNode.alternate !== null) {
                _lastTailNode = _tailNode;
              }
              _tailNode = _tailNode.sibling;
            }
            if (_lastTailNode === null) {
              if (!hasRenderedATailFallback && renderState.tail !== null) {
                renderState.tail.sibling = null;
              } else {
                renderState.tail = null;
              }
            } else {
              _lastTailNode.sibling = null;
            }
            break;
          }
        }
      }
      function bubbleProperties(completedWork) {
        var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
        var newChildLanes = NoLanes;
        var subtreeFlags = NoFlags;
        if (!didBailout) {
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            var actualDuration = completedWork.actualDuration;
            var treeBaseDuration = completedWork.selfBaseDuration;
            var child = completedWork.child;
            while (child !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
              subtreeFlags |= child.subtreeFlags;
              subtreeFlags |= child.flags;
              actualDuration += child.actualDuration;
              treeBaseDuration += child.treeBaseDuration;
              child = child.sibling;
            }
            completedWork.actualDuration = actualDuration;
            completedWork.treeBaseDuration = treeBaseDuration;
          } else {
            var _child = completedWork.child;
            while (_child !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
              subtreeFlags |= _child.subtreeFlags;
              subtreeFlags |= _child.flags;
              _child.return = completedWork;
              _child = _child.sibling;
            }
          }
          completedWork.subtreeFlags |= subtreeFlags;
        } else {
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            var _treeBaseDuration = completedWork.selfBaseDuration;
            var _child2 = completedWork.child;
            while (_child2 !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
              subtreeFlags |= _child2.subtreeFlags & StaticMask;
              subtreeFlags |= _child2.flags & StaticMask;
              _treeBaseDuration += _child2.treeBaseDuration;
              _child2 = _child2.sibling;
            }
            completedWork.treeBaseDuration = _treeBaseDuration;
          } else {
            var _child3 = completedWork.child;
            while (_child3 !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
              subtreeFlags |= _child3.subtreeFlags & StaticMask;
              subtreeFlags |= _child3.flags & StaticMask;
              _child3.return = completedWork;
              _child3 = _child3.sibling;
            }
          }
          completedWork.subtreeFlags |= subtreeFlags;
        }
        completedWork.childLanes = newChildLanes;
        return didBailout;
      }
      function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
        if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
          warnIfUnhydratedTailNodes(workInProgress2);
          resetHydrationState();
          workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
          return false;
        }
        var wasHydrated = popHydrationState(workInProgress2);
        if (nextState !== null && nextState.dehydrated !== null) {
          if (current2 === null) {
            if (!wasHydrated) {
              throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
            }
            prepareToHydrateHostSuspenseInstance(workInProgress2);
            bubbleProperties(workInProgress2);
            {
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                var isTimedOutSuspense = nextState !== null;
                if (isTimedOutSuspense) {
                  var primaryChildFragment = workInProgress2.child;
                  if (primaryChildFragment !== null) {
                    workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                  }
                }
              }
            }
            return false;
          } else {
            resetHydrationState();
            if ((workInProgress2.flags & DidCapture) === NoFlags) {
              workInProgress2.memoizedState = null;
            }
            workInProgress2.flags |= Update;
            bubbleProperties(workInProgress2);
            {
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                var _isTimedOutSuspense = nextState !== null;
                if (_isTimedOutSuspense) {
                  var _primaryChildFragment = workInProgress2.child;
                  if (_primaryChildFragment !== null) {
                    workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                  }
                }
              }
            }
            return false;
          }
        } else {
          upgradeHydrationErrorsToRecoverable();
          return true;
        }
      }
      function completeWork(current2, workInProgress2, renderLanes2) {
        var newProps = workInProgress2.pendingProps;
        popTreeContext(workInProgress2);
        switch (workInProgress2.tag) {
          case IndeterminateComponent:
          case LazyComponent:
          case SimpleMemoComponent:
          case FunctionComponent:
          case ForwardRef:
          case Fragment:
          case Mode:
          case Profiler:
          case ContextConsumer:
          case MemoComponent:
            bubbleProperties(workInProgress2);
            return null;
          case ClassComponent: {
            var Component2 = workInProgress2.type;
            if (isContextProvider(Component2)) {
              popContext(workInProgress2);
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case HostRoot: {
            var fiberRoot = workInProgress2.stateNode;
            popHostContainer(workInProgress2);
            popTopLevelContextObject(workInProgress2);
            resetWorkInProgressVersions();
            if (fiberRoot.pendingContext) {
              fiberRoot.context = fiberRoot.pendingContext;
              fiberRoot.pendingContext = null;
            }
            if (current2 === null || current2.child === null) {
              var wasHydrated = popHydrationState(workInProgress2);
              if (wasHydrated) {
                markUpdate(workInProgress2);
              } else {
                if (current2 !== null) {
                  var prevState = current2.memoizedState;
                  if (!prevState.isDehydrated || (workInProgress2.flags & ForceClientRender) !== NoFlags) {
                    workInProgress2.flags |= Snapshot;
                    upgradeHydrationErrorsToRecoverable();
                  }
                }
              }
            }
            updateHostContainer(current2, workInProgress2);
            bubbleProperties(workInProgress2);
            return null;
          }
          case HostComponent: {
            popHostContext(workInProgress2);
            var rootContainerInstance = getRootHostContainer();
            var type = workInProgress2.type;
            if (current2 !== null && workInProgress2.stateNode != null) {
              updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
              if (current2.ref !== workInProgress2.ref) {
                markRef$1(workInProgress2);
              }
            } else {
              if (!newProps) {
                if (workInProgress2.stateNode === null) {
                  throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              var currentHostContext = getHostContext();
              var _wasHydrated = popHydrationState(workInProgress2);
              if (_wasHydrated) {
                if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                  markUpdate(workInProgress2);
                }
              } else {
                var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                appendAllChildren(instance, workInProgress2, false, false);
                workInProgress2.stateNode = instance;
                if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                  markUpdate(workInProgress2);
                }
              }
              if (workInProgress2.ref !== null) {
                markRef$1(workInProgress2);
              }
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case HostText: {
            var newText = newProps;
            if (current2 && workInProgress2.stateNode != null) {
              var oldText = current2.memoizedProps;
              updateHostText$1(current2, workInProgress2, oldText, newText);
            } else {
              if (typeof newText !== "string") {
                if (workInProgress2.stateNode === null) {
                  throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var _rootContainerInstance = getRootHostContainer();
              var _currentHostContext = getHostContext();
              var _wasHydrated2 = popHydrationState(workInProgress2);
              if (_wasHydrated2) {
                if (prepareToHydrateHostTextInstance(workInProgress2)) {
                  markUpdate(workInProgress2);
                }
              } else {
                workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
              }
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case SuspenseComponent: {
            popSuspenseContext(workInProgress2);
            var nextState = workInProgress2.memoizedState;
            if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
              var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
              if (!fallthroughToNormalSuspensePath) {
                if (workInProgress2.flags & ShouldCapture) {
                  return workInProgress2;
                } else {
                  return null;
                }
              }
            }
            if ((workInProgress2.flags & DidCapture) !== NoFlags) {
              workInProgress2.lanes = renderLanes2;
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress2);
              }
              return workInProgress2;
            }
            var nextDidTimeout = nextState !== null;
            var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
            if (nextDidTimeout !== prevDidTimeout) {
              if (nextDidTimeout) {
                var _offscreenFiber2 = workInProgress2.child;
                _offscreenFiber2.flags |= Visibility;
                if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                  var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                  if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                    renderDidSuspend();
                  } else {
                    renderDidSuspendDelayIfPossible();
                  }
                }
              }
            }
            var wakeables = workInProgress2.updateQueue;
            if (wakeables !== null) {
              workInProgress2.flags |= Update;
            }
            bubbleProperties(workInProgress2);
            {
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                if (nextDidTimeout) {
                  var primaryChildFragment = workInProgress2.child;
                  if (primaryChildFragment !== null) {
                    workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                  }
                }
              }
            }
            return null;
          }
          case HostPortal:
            popHostContainer(workInProgress2);
            updateHostContainer(current2, workInProgress2);
            if (current2 === null) {
              preparePortalMount(workInProgress2.stateNode.containerInfo);
            }
            bubbleProperties(workInProgress2);
            return null;
          case ContextProvider:
            var context = workInProgress2.type._context;
            popProvider(context, workInProgress2);
            bubbleProperties(workInProgress2);
            return null;
          case IncompleteClassComponent: {
            var _Component = workInProgress2.type;
            if (isContextProvider(_Component)) {
              popContext(workInProgress2);
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case SuspenseListComponent: {
            popSuspenseContext(workInProgress2);
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              bubbleProperties(workInProgress2);
              return null;
            }
            var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
            var renderedTail = renderState.rendering;
            if (renderedTail === null) {
              if (!didSuspendAlready) {
                var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                if (!cannotBeSuspended) {
                  var row = workInProgress2.child;
                  while (row !== null) {
                    var suspended = findFirstSuspended(row);
                    if (suspended !== null) {
                      didSuspendAlready = true;
                      workInProgress2.flags |= DidCapture;
                      cutOffTailIfNeeded(renderState, false);
                      var newThenables = suspended.updateQueue;
                      if (newThenables !== null) {
                        workInProgress2.updateQueue = newThenables;
                        workInProgress2.flags |= Update;
                      }
                      workInProgress2.subtreeFlags = NoFlags;
                      resetChildFibers(workInProgress2, renderLanes2);
                      pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                      return workInProgress2.child;
                    }
                    row = row.sibling;
                  }
                }
                if (renderState.tail !== null && now() > getRenderTargetTime()) {
                  workInProgress2.flags |= DidCapture;
                  didSuspendAlready = true;
                  cutOffTailIfNeeded(renderState, false);
                  workInProgress2.lanes = SomeRetryLane;
                }
              } else {
                cutOffTailIfNeeded(renderState, false);
              }
            } else {
              if (!didSuspendAlready) {
                var _suspended = findFirstSuspended(renderedTail);
                if (_suspended !== null) {
                  workInProgress2.flags |= DidCapture;
                  didSuspendAlready = true;
                  var _newThenables = _suspended.updateQueue;
                  if (_newThenables !== null) {
                    workInProgress2.updateQueue = _newThenables;
                    workInProgress2.flags |= Update;
                  }
                  cutOffTailIfNeeded(renderState, true);
                  if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                  workInProgress2.flags |= DidCapture;
                  didSuspendAlready = true;
                  cutOffTailIfNeeded(renderState, false);
                  workInProgress2.lanes = SomeRetryLane;
                }
              }
              if (renderState.isBackwards) {
                renderedTail.sibling = workInProgress2.child;
                workInProgress2.child = renderedTail;
              } else {
                var previousSibling = renderState.last;
                if (previousSibling !== null) {
                  previousSibling.sibling = renderedTail;
                } else {
                  workInProgress2.child = renderedTail;
                }
                renderState.last = renderedTail;
              }
            }
            if (renderState.tail !== null) {
              var next = renderState.tail;
              renderState.rendering = next;
              renderState.tail = next.sibling;
              renderState.renderingStartTime = now();
              next.sibling = null;
              var suspenseContext = suspenseStackCursor.current;
              if (didSuspendAlready) {
                suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              } else {
                suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
              }
              pushSuspenseContext(workInProgress2, suspenseContext);
              return next;
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case ScopeComponent: {
            break;
          }
          case OffscreenComponent:
          case LegacyHiddenComponent: {
            popRenderLanes(workInProgress2);
            var _nextState = workInProgress2.memoizedState;
            var nextIsHidden = _nextState !== null;
            if (current2 !== null) {
              var _prevState = current2.memoizedState;
              var prevIsHidden = _prevState !== null;
              if (prevIsHidden !== nextIsHidden && !enableLegacyHidden) {
                workInProgress2.flags |= Visibility;
              }
            }
            if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
              bubbleProperties(workInProgress2);
            } else {
              if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                bubbleProperties(workInProgress2);
                {
                  if (workInProgress2.subtreeFlags & (Placement | Update)) {
                    workInProgress2.flags |= Visibility;
                  }
                }
              }
            }
            return null;
          }
          case CacheComponent: {
            return null;
          }
          case TracingMarkerComponent: {
            return null;
          }
        }
        throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
      }
      function unwindWork(current2, workInProgress2, renderLanes2) {
        popTreeContext(workInProgress2);
        switch (workInProgress2.tag) {
          case ClassComponent: {
            var Component2 = workInProgress2.type;
            if (isContextProvider(Component2)) {
              popContext(workInProgress2);
            }
            var flags = workInProgress2.flags;
            if (flags & ShouldCapture) {
              workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress2);
              }
              return workInProgress2;
            }
            return null;
          }
          case HostRoot: {
            var root2 = workInProgress2.stateNode;
            popHostContainer(workInProgress2);
            popTopLevelContextObject(workInProgress2);
            resetWorkInProgressVersions();
            var _flags = workInProgress2.flags;
            if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
              workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
              return workInProgress2;
            }
            return null;
          }
          case HostComponent: {
            popHostContext(workInProgress2);
            return null;
          }
          case SuspenseComponent: {
            popSuspenseContext(workInProgress2);
            var suspenseState = workInProgress2.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              if (workInProgress2.alternate === null) {
                throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
              }
              resetHydrationState();
            }
            var _flags2 = workInProgress2.flags;
            if (_flags2 & ShouldCapture) {
              workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress2);
              }
              return workInProgress2;
            }
            return null;
          }
          case SuspenseListComponent: {
            popSuspenseContext(workInProgress2);
            return null;
          }
          case HostPortal:
            popHostContainer(workInProgress2);
            return null;
          case ContextProvider:
            var context = workInProgress2.type._context;
            popProvider(context, workInProgress2);
            return null;
          case OffscreenComponent:
          case LegacyHiddenComponent:
            popRenderLanes(workInProgress2);
            return null;
          case CacheComponent:
            return null;
          default:
            return null;
        }
      }
      function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
        popTreeContext(interruptedWork);
        switch (interruptedWork.tag) {
          case ClassComponent: {
            var childContextTypes = interruptedWork.type.childContextTypes;
            if (childContextTypes !== null && childContextTypes !== undefined) {
              popContext(interruptedWork);
            }
            break;
          }
          case HostRoot: {
            var root2 = interruptedWork.stateNode;
            popHostContainer(interruptedWork);
            popTopLevelContextObject(interruptedWork);
            resetWorkInProgressVersions();
            break;
          }
          case HostComponent: {
            popHostContext(interruptedWork);
            break;
          }
          case HostPortal:
            popHostContainer(interruptedWork);
            break;
          case SuspenseComponent:
            popSuspenseContext(interruptedWork);
            break;
          case SuspenseListComponent:
            popSuspenseContext(interruptedWork);
            break;
          case ContextProvider:
            var context = interruptedWork.type._context;
            popProvider(context, interruptedWork);
            break;
          case OffscreenComponent:
          case LegacyHiddenComponent:
            popRenderLanes(interruptedWork);
            break;
        }
      }
      var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
      {
        didWarnAboutUndefinedSnapshotBeforeUpdate = new Set;
      }
      var offscreenSubtreeIsHidden = false;
      var offscreenSubtreeWasHidden = false;
      var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
      var nextEffect = null;
      var inProgressLanes = null;
      var inProgressRoot = null;
      function reportUncaughtErrorInDEV(error2) {
        {
          invokeGuardedCallback(null, function() {
            throw error2;
          });
          clearCaughtError();
        }
      }
      var callComponentWillUnmountWithTimer = function(current2, instance) {
        instance.props = current2.memoizedProps;
        instance.state = current2.memoizedState;
        if (current2.mode & ProfileMode) {
          try {
            startLayoutEffectTimer();
            instance.componentWillUnmount();
          } finally {
            recordLayoutEffectDuration(current2);
          }
        } else {
          instance.componentWillUnmount();
        }
      };
      function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
        try {
          commitHookEffectListMount(Layout, current2);
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
        try {
          callComponentWillUnmountWithTimer(current2, instance);
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
        try {
          instance.componentDidMount();
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyAttachRef(current2, nearestMountedAncestor) {
        try {
          commitAttachRef(current2);
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyDetachRef(current2, nearestMountedAncestor) {
        var ref = current2.ref;
        if (ref !== null) {
          if (typeof ref === "function") {
            var retVal;
            try {
              if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  retVal = ref(null);
                } finally {
                  recordLayoutEffectDuration(current2);
                }
              } else {
                retVal = ref(null);
              }
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
            {
              if (typeof retVal === "function") {
                error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
              }
            }
          } else {
            ref.current = null;
          }
        }
      }
      function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
        try {
          destroy();
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      var focusedInstanceHandle = null;
      var shouldFireAfterActiveInstanceBlur = false;
      function commitBeforeMutationEffects(root2, firstChild) {
        focusedInstanceHandle = prepareForCommit(root2.containerInfo);
        nextEffect = firstChild;
        commitBeforeMutationEffects_begin();
        var shouldFire = shouldFireAfterActiveInstanceBlur;
        shouldFireAfterActiveInstanceBlur = false;
        focusedInstanceHandle = null;
        return shouldFire;
      }
      function commitBeforeMutationEffects_begin() {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var child = fiber.child;
          if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
            child.return = fiber;
            nextEffect = child;
          } else {
            commitBeforeMutationEffects_complete();
          }
        }
      }
      function commitBeforeMutationEffects_complete() {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          setCurrentFiber(fiber);
          try {
            commitBeforeMutationEffectsOnFiber(fiber);
          } catch (error2) {
            captureCommitPhaseError(fiber, fiber.return, error2);
          }
          resetCurrentFiber();
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitBeforeMutationEffectsOnFiber(finishedWork) {
        var current2 = finishedWork.alternate;
        var flags = finishedWork.flags;
        if ((flags & Snapshot) !== NoFlags) {
          setCurrentFiber(finishedWork);
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              break;
            }
            case ClassComponent: {
              if (current2 !== null) {
                var prevProps = current2.memoizedProps;
                var prevState = current2.memoizedState;
                var instance = finishedWork.stateNode;
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    }
                  }
                }
                var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                {
                  var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                  if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                    didWarnSet.add(finishedWork.type);
                    error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                  }
                }
                instance.__reactInternalSnapshotBeforeUpdate = snapshot;
              }
              break;
            }
            case HostRoot: {
              {
                var root2 = finishedWork.stateNode;
                clearContainer(root2.containerInfo);
              }
              break;
            }
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
              break;
            default: {
              throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          resetCurrentFiber();
        }
      }
      function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          var effect = firstEffect;
          do {
            if ((effect.tag & flags) === flags) {
              var destroy = effect.destroy;
              effect.destroy = undefined;
              if (destroy !== undefined) {
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectUnmountStarted(finishedWork);
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectUnmountStarted(finishedWork);
                  }
                }
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(true);
                  }
                }
                safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(false);
                  }
                }
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectUnmountStopped();
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectUnmountStopped();
                  }
                }
              }
            }
            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }
      function commitHookEffectListMount(flags, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          var effect = firstEffect;
          do {
            if ((effect.tag & flags) === flags) {
              {
                if ((flags & Passive$1) !== NoFlags$1) {
                  markComponentPassiveEffectMountStarted(finishedWork);
                } else if ((flags & Layout) !== NoFlags$1) {
                  markComponentLayoutEffectMountStarted(finishedWork);
                }
              }
              var create = effect.create;
              {
                if ((flags & Insertion) !== NoFlags$1) {
                  setIsRunningInsertionEffect(true);
                }
              }
              effect.destroy = create();
              {
                if ((flags & Insertion) !== NoFlags$1) {
                  setIsRunningInsertionEffect(false);
                }
              }
              {
                if ((flags & Passive$1) !== NoFlags$1) {
                  markComponentPassiveEffectMountStopped();
                } else if ((flags & Layout) !== NoFlags$1) {
                  markComponentLayoutEffectMountStopped();
                }
              }
              {
                var destroy = effect.destroy;
                if (destroy !== undefined && typeof destroy !== "function") {
                  var hookName = undefined;
                  if ((effect.tag & Layout) !== NoFlags) {
                    hookName = "useLayoutEffect";
                  } else if ((effect.tag & Insertion) !== NoFlags) {
                    hookName = "useInsertionEffect";
                  } else {
                    hookName = "useEffect";
                  }
                  var addendum = undefined;
                  if (destroy === null) {
                    addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                  } else if (typeof destroy.then === "function") {
                    addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                  } else {
                    addendum = " You returned: " + destroy;
                  }
                  error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                }
              }
            }
            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }
      function commitPassiveEffectDurations(finishedRoot, finishedWork) {
        {
          if ((finishedWork.flags & Update) !== NoFlags) {
            switch (finishedWork.tag) {
              case Profiler: {
                var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                var commitTime2 = getCommitTime();
                var phase = finishedWork.alternate === null ? "mount" : "update";
                {
                  if (isCurrentUpdateNested()) {
                    phase = "nested-update";
                  }
                }
                if (typeof onPostCommit === "function") {
                  onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                }
                var parentFiber = finishedWork.return;
                outer:
                  while (parentFiber !== null) {
                    switch (parentFiber.tag) {
                      case HostRoot:
                        var root2 = parentFiber.stateNode;
                        root2.passiveEffectDuration += passiveEffectDuration;
                        break outer;
                      case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        parentStateNode.passiveEffectDuration += passiveEffectDuration;
                        break outer;
                    }
                    parentFiber = parentFiber.return;
                  }
                break;
              }
            }
          }
        }
      }
      function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
        if ((finishedWork.flags & LayoutMask) !== NoFlags) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (!offscreenSubtreeWasHidden) {
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListMount(Layout | HasEffect, finishedWork);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Layout | HasEffect, finishedWork);
                }
              }
              break;
            }
            case ClassComponent: {
              var instance = finishedWork.stateNode;
              if (finishedWork.flags & Update) {
                if (!offscreenSubtreeWasHidden) {
                  if (current2 === null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        instance.componentDidMount();
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      instance.componentDidMount();
                    }
                  } else {
                    var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                    var prevState = current2.memoizedState;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    }
                  }
                }
              }
              var updateQueue = finishedWork.updateQueue;
              if (updateQueue !== null) {
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    }
                  }
                }
                commitUpdateQueue(finishedWork, updateQueue, instance);
              }
              break;
            }
            case HostRoot: {
              var _updateQueue = finishedWork.updateQueue;
              if (_updateQueue !== null) {
                var _instance = null;
                if (finishedWork.child !== null) {
                  switch (finishedWork.child.tag) {
                    case HostComponent:
                      _instance = getPublicInstance(finishedWork.child.stateNode);
                      break;
                    case ClassComponent:
                      _instance = finishedWork.child.stateNode;
                      break;
                  }
                }
                commitUpdateQueue(finishedWork, _updateQueue, _instance);
              }
              break;
            }
            case HostComponent: {
              var _instance2 = finishedWork.stateNode;
              if (current2 === null && finishedWork.flags & Update) {
                var type = finishedWork.type;
                var props = finishedWork.memoizedProps;
                commitMount(_instance2, type, props);
              }
              break;
            }
            case HostText: {
              break;
            }
            case HostPortal: {
              break;
            }
            case Profiler: {
              {
                var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                var effectDuration = finishedWork.stateNode.effectDuration;
                var commitTime2 = getCommitTime();
                var phase = current2 === null ? "mount" : "update";
                {
                  if (isCurrentUpdateNested()) {
                    phase = "nested-update";
                  }
                }
                if (typeof onRender === "function") {
                  onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                }
                {
                  if (typeof onCommit === "function") {
                    onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                  }
                  enqueuePendingPassiveProfilerEffect(finishedWork);
                  var parentFiber = finishedWork.return;
                  outer:
                    while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root2 = parentFiber.stateNode;
                          root2.effectDuration += effectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.effectDuration += effectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                }
              }
              break;
            }
            case SuspenseComponent: {
              commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
              break;
            }
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
            case TracingMarkerComponent: {
              break;
            }
            default:
              throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        if (!offscreenSubtreeWasHidden) {
          {
            if (finishedWork.flags & Ref) {
              commitAttachRef(finishedWork);
            }
          }
        }
      }
      function reappearLayoutEffectsOnFiber(node) {
        switch (node.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (node.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                safelyCallCommitHookLayoutEffectListMount(node, node.return);
              } finally {
                recordLayoutEffectDuration(node);
              }
            } else {
              safelyCallCommitHookLayoutEffectListMount(node, node.return);
            }
            break;
          }
          case ClassComponent: {
            var instance = node.stateNode;
            if (typeof instance.componentDidMount === "function") {
              safelyCallComponentDidMount(node, node.return, instance);
            }
            safelyAttachRef(node, node.return);
            break;
          }
          case HostComponent: {
            safelyAttachRef(node, node.return);
            break;
          }
        }
      }
      function hideOrUnhideAllChildren(finishedWork, isHidden) {
        var hostSubtreeRoot = null;
        {
          var node = finishedWork;
          while (true) {
            if (node.tag === HostComponent) {
              if (hostSubtreeRoot === null) {
                hostSubtreeRoot = node;
                try {
                  var instance = node.stateNode;
                  if (isHidden) {
                    hideInstance(instance);
                  } else {
                    unhideInstance(node.stateNode, node.memoizedProps);
                  }
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
            } else if (node.tag === HostText) {
              if (hostSubtreeRoot === null) {
                try {
                  var _instance3 = node.stateNode;
                  if (isHidden) {
                    hideTextInstance(_instance3);
                  } else {
                    unhideTextInstance(_instance3, node.memoizedProps);
                  }
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
            } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
              ;
            else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === finishedWork) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === finishedWork) {
                return;
              }
              if (hostSubtreeRoot === node) {
                hostSubtreeRoot = null;
              }
              node = node.return;
            }
            if (hostSubtreeRoot === node) {
              hostSubtreeRoot = null;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
      }
      function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
          var instance = finishedWork.stateNode;
          var instanceToUse;
          switch (finishedWork.tag) {
            case HostComponent:
              instanceToUse = getPublicInstance(instance);
              break;
            default:
              instanceToUse = instance;
          }
          if (typeof ref === "function") {
            var retVal;
            if (finishedWork.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                retVal = ref(instanceToUse);
              } finally {
                recordLayoutEffectDuration(finishedWork);
              }
            } else {
              retVal = ref(instanceToUse);
            }
            {
              if (typeof retVal === "function") {
                error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
              }
            }
          } else {
            {
              if (!ref.hasOwnProperty("current")) {
                error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
              }
            }
            ref.current = instanceToUse;
          }
        }
      }
      function detachFiberMutation(fiber) {
        var alternate = fiber.alternate;
        if (alternate !== null) {
          alternate.return = null;
        }
        fiber.return = null;
      }
      function detachFiberAfterEffects(fiber) {
        var alternate = fiber.alternate;
        if (alternate !== null) {
          fiber.alternate = null;
          detachFiberAfterEffects(alternate);
        }
        {
          fiber.child = null;
          fiber.deletions = null;
          fiber.sibling = null;
          if (fiber.tag === HostComponent) {
            var hostInstance = fiber.stateNode;
            if (hostInstance !== null) {
              detachDeletedInstance(hostInstance);
            }
          }
          fiber.stateNode = null;
          {
            fiber._debugOwner = null;
          }
          {
            fiber.return = null;
            fiber.dependencies = null;
            fiber.memoizedProps = null;
            fiber.memoizedState = null;
            fiber.pendingProps = null;
            fiber.stateNode = null;
            fiber.updateQueue = null;
          }
        }
      }
      function getHostParentFiber(fiber) {
        var parent = fiber.return;
        while (parent !== null) {
          if (isHostParent(parent)) {
            return parent;
          }
          parent = parent.return;
        }
        throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
      }
      function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
      }
      function getHostSibling(fiber) {
        var node = fiber;
        siblings:
          while (true) {
            while (node.sibling === null) {
              if (node.return === null || isHostParent(node.return)) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
            while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
              if (node.flags & Placement) {
                continue siblings;
              }
              if (node.child === null || node.tag === HostPortal) {
                continue siblings;
              } else {
                node.child.return = node;
                node = node.child;
              }
            }
            if (!(node.flags & Placement)) {
              return node.stateNode;
            }
          }
      }
      function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork);
        switch (parentFiber.tag) {
          case HostComponent: {
            var parent = parentFiber.stateNode;
            if (parentFiber.flags & ContentReset) {
              resetTextContent(parent);
              parentFiber.flags &= ~ContentReset;
            }
            var before = getHostSibling(finishedWork);
            insertOrAppendPlacementNode(finishedWork, before, parent);
            break;
          }
          case HostRoot:
          case HostPortal: {
            var _parent = parentFiber.stateNode.containerInfo;
            var _before = getHostSibling(finishedWork);
            insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
            break;
          }
          default:
            throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
          var stateNode = node.stateNode;
          if (before) {
            insertInContainerBefore(parent, stateNode, before);
          } else {
            appendChildToContainer(parent, stateNode);
          }
        } else if (tag === HostPortal)
          ;
        else {
          var child = node.child;
          if (child !== null) {
            insertOrAppendPlacementNodeIntoContainer(child, before, parent);
            var sibling = child.sibling;
            while (sibling !== null) {
              insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
              sibling = sibling.sibling;
            }
          }
        }
      }
      function insertOrAppendPlacementNode(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
          var stateNode = node.stateNode;
          if (before) {
            insertBefore(parent, stateNode, before);
          } else {
            appendChild(parent, stateNode);
          }
        } else if (tag === HostPortal)
          ;
        else {
          var child = node.child;
          if (child !== null) {
            insertOrAppendPlacementNode(child, before, parent);
            var sibling = child.sibling;
            while (sibling !== null) {
              insertOrAppendPlacementNode(sibling, before, parent);
              sibling = sibling.sibling;
            }
          }
        }
      }
      var hostParent = null;
      var hostParentIsContainer = false;
      function commitDeletionEffects(root2, returnFiber, deletedFiber) {
        {
          var parent = returnFiber;
          findParent:
            while (parent !== null) {
              switch (parent.tag) {
                case HostComponent: {
                  hostParent = parent.stateNode;
                  hostParentIsContainer = false;
                  break findParent;
                }
                case HostRoot: {
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break findParent;
                }
                case HostPortal: {
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break findParent;
                }
              }
              parent = parent.return;
            }
          if (hostParent === null) {
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
          hostParent = null;
          hostParentIsContainer = false;
        }
        detachFiberMutation(deletedFiber);
      }
      function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
        var child = parent.child;
        while (child !== null) {
          commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
          child = child.sibling;
        }
      }
      function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
        onCommitUnmount(deletedFiber);
        switch (deletedFiber.tag) {
          case HostComponent: {
            if (!offscreenSubtreeWasHidden) {
              safelyDetachRef(deletedFiber, nearestMountedAncestor);
            }
          }
          case HostText: {
            {
              var prevHostParent = hostParent;
              var prevHostParentIsContainer = hostParentIsContainer;
              hostParent = null;
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              hostParent = prevHostParent;
              hostParentIsContainer = prevHostParentIsContainer;
              if (hostParent !== null) {
                if (hostParentIsContainer) {
                  removeChildFromContainer(hostParent, deletedFiber.stateNode);
                } else {
                  removeChild(hostParent, deletedFiber.stateNode);
                }
              }
            }
            return;
          }
          case DehydratedFragment: {
            {
              if (hostParent !== null) {
                if (hostParentIsContainer) {
                  clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                } else {
                  clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                }
              }
            }
            return;
          }
          case HostPortal: {
            {
              var _prevHostParent = hostParent;
              var _prevHostParentIsContainer = hostParentIsContainer;
              hostParent = deletedFiber.stateNode.containerInfo;
              hostParentIsContainer = true;
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              hostParent = _prevHostParent;
              hostParentIsContainer = _prevHostParentIsContainer;
            }
            return;
          }
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent: {
            if (!offscreenSubtreeWasHidden) {
              var updateQueue = deletedFiber.updateQueue;
              if (updateQueue !== null) {
                var lastEffect = updateQueue.lastEffect;
                if (lastEffect !== null) {
                  var firstEffect = lastEffect.next;
                  var effect = firstEffect;
                  do {
                    var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                    if (destroy !== undefined) {
                      if ((tag & Insertion) !== NoFlags$1) {
                        safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                      } else if ((tag & Layout) !== NoFlags$1) {
                        {
                          markComponentLayoutEffectUnmountStarted(deletedFiber);
                        }
                        if (deletedFiber.mode & ProfileMode) {
                          startLayoutEffectTimer();
                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          recordLayoutEffectDuration(deletedFiber);
                        } else {
                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                        }
                        {
                          markComponentLayoutEffectUnmountStopped();
                        }
                      }
                    }
                    effect = effect.next;
                  } while (effect !== firstEffect);
                }
              }
            }
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case ClassComponent: {
            if (!offscreenSubtreeWasHidden) {
              safelyDetachRef(deletedFiber, nearestMountedAncestor);
              var instance = deletedFiber.stateNode;
              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
              }
            }
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case ScopeComponent: {
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case OffscreenComponent: {
            if (deletedFiber.mode & ConcurrentMode) {
              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            } else {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            }
            break;
          }
          default: {
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
        }
      }
      function commitSuspenseCallback(finishedWork) {
        var newState = finishedWork.memoizedState;
      }
      function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState === null) {
          var current2 = finishedWork.alternate;
          if (current2 !== null) {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var suspenseInstance = prevState.dehydrated;
              if (suspenseInstance !== null) {
                commitHydratedSuspenseInstance(suspenseInstance);
              }
            }
          }
        }
      }
      function attachSuspenseRetryListeners(finishedWork) {
        var wakeables = finishedWork.updateQueue;
        if (wakeables !== null) {
          finishedWork.updateQueue = null;
          var retryCache = finishedWork.stateNode;
          if (retryCache === null) {
            retryCache = finishedWork.stateNode = new PossiblyWeakSet;
          }
          wakeables.forEach(function(wakeable) {
            var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
            if (!retryCache.has(wakeable)) {
              retryCache.add(wakeable);
              {
                if (isDevToolsPresent) {
                  if (inProgressLanes !== null && inProgressRoot !== null) {
                    restorePendingUpdaters(inProgressRoot, inProgressLanes);
                  } else {
                    throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                  }
                }
              }
              wakeable.then(retry, retry);
            }
          });
        }
      }
      function commitMutationEffects(root2, finishedWork, committedLanes) {
        inProgressLanes = committedLanes;
        inProgressRoot = root2;
        setCurrentFiber(finishedWork);
        commitMutationEffectsOnFiber(finishedWork, root2);
        setCurrentFiber(finishedWork);
        inProgressLanes = null;
        inProgressRoot = null;
      }
      function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
        var deletions = parentFiber.deletions;
        if (deletions !== null) {
          for (var i = 0;i < deletions.length; i++) {
            var childToDelete = deletions[i];
            try {
              commitDeletionEffects(root2, parentFiber, childToDelete);
            } catch (error2) {
              captureCommitPhaseError(childToDelete, parentFiber, error2);
            }
          }
        }
        var prevDebugFiber = getCurrentFiber();
        if (parentFiber.subtreeFlags & MutationMask) {
          var child = parentFiber.child;
          while (child !== null) {
            setCurrentFiber(child);
            commitMutationEffectsOnFiber(child, root2);
            child = child.sibling;
          }
        }
        setCurrentFiber(prevDebugFiber);
      }
      function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
        var current2 = finishedWork.alternate;
        var flags = finishedWork.flags;
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Update) {
              try {
                commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                commitHookEffectListMount(Insertion | HasEffect, finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              if (finishedWork.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                recordLayoutEffectDuration(finishedWork);
              } else {
                try {
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
            }
            return;
          }
          case ClassComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Ref) {
              if (current2 !== null) {
                safelyDetachRef(current2, current2.return);
              }
            }
            return;
          }
          case HostComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Ref) {
              if (current2 !== null) {
                safelyDetachRef(current2, current2.return);
              }
            }
            {
              if (finishedWork.flags & ContentReset) {
                var instance = finishedWork.stateNode;
                try {
                  resetTextContent(instance);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
              if (flags & Update) {
                var _instance4 = finishedWork.stateNode;
                if (_instance4 != null) {
                  var newProps = finishedWork.memoizedProps;
                  var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                  var type = finishedWork.type;
                  var updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;
                  if (updatePayload !== null) {
                    try {
                      commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
              }
            }
            return;
          }
          case HostText: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Update) {
              {
                if (finishedWork.stateNode === null) {
                  throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                }
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps;
                var oldText = current2 !== null ? current2.memoizedProps : newText;
                try {
                  commitTextUpdate(textInstance, oldText, newText);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
            }
            return;
          }
          case HostRoot: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Update) {
              {
                if (current2 !== null) {
                  var prevRootState = current2.memoizedState;
                  if (prevRootState.isDehydrated) {
                    try {
                      commitHydratedContainer(root2.containerInfo);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
              }
            }
            return;
          }
          case HostPortal: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            return;
          }
          case SuspenseComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            var offscreenFiber = finishedWork.child;
            if (offscreenFiber.flags & Visibility) {
              var offscreenInstance = offscreenFiber.stateNode;
              var newState = offscreenFiber.memoizedState;
              var isHidden = newState !== null;
              offscreenInstance.isHidden = isHidden;
              if (isHidden) {
                var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                if (!wasHidden) {
                  markCommitTimeOfFallback();
                }
              }
            }
            if (flags & Update) {
              try {
                commitSuspenseCallback(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              attachSuspenseRetryListeners(finishedWork);
            }
            return;
          }
          case OffscreenComponent: {
            var _wasHidden = current2 !== null && current2.memoizedState !== null;
            if (finishedWork.mode & ConcurrentMode) {
              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
              recursivelyTraverseMutationEffects(root2, finishedWork);
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            } else {
              recursivelyTraverseMutationEffects(root2, finishedWork);
            }
            commitReconciliationEffects(finishedWork);
            if (flags & Visibility) {
              var _offscreenInstance = finishedWork.stateNode;
              var _newState = finishedWork.memoizedState;
              var _isHidden = _newState !== null;
              var offscreenBoundary = finishedWork;
              _offscreenInstance.isHidden = _isHidden;
              {
                if (_isHidden) {
                  if (!_wasHidden) {
                    if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                      nextEffect = offscreenBoundary;
                      var offscreenChild = offscreenBoundary.child;
                      while (offscreenChild !== null) {
                        nextEffect = offscreenChild;
                        disappearLayoutEffects_begin(offscreenChild);
                        offscreenChild = offscreenChild.sibling;
                      }
                    }
                  }
                }
              }
              {
                hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
              }
            }
            return;
          }
          case SuspenseListComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Update) {
              attachSuspenseRetryListeners(finishedWork);
            }
            return;
          }
          case ScopeComponent: {
            return;
          }
          default: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            return;
          }
        }
      }
      function commitReconciliationEffects(finishedWork) {
        var flags = finishedWork.flags;
        if (flags & Placement) {
          try {
            commitPlacement(finishedWork);
          } catch (error2) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error2);
          }
          finishedWork.flags &= ~Placement;
        }
        if (flags & Hydrating) {
          finishedWork.flags &= ~Hydrating;
        }
      }
      function commitLayoutEffects(finishedWork, root2, committedLanes) {
        inProgressLanes = committedLanes;
        inProgressRoot = root2;
        nextEffect = finishedWork;
        commitLayoutEffects_begin(finishedWork, root2, committedLanes);
        inProgressLanes = null;
        inProgressRoot = null;
      }
      function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
        var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var firstChild = fiber.child;
          if (fiber.tag === OffscreenComponent && isModernRoot) {
            var isHidden = fiber.memoizedState !== null;
            var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
            if (newOffscreenSubtreeIsHidden) {
              commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              continue;
            } else {
              var current2 = fiber.alternate;
              var wasHidden = current2 !== null && current2.memoizedState !== null;
              var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
              var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
              offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
              if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                nextEffect = fiber;
                reappearLayoutEffects_begin(fiber);
              }
              var child = firstChild;
              while (child !== null) {
                nextEffect = child;
                commitLayoutEffects_begin(child, root2, committedLanes);
                child = child.sibling;
              }
              nextEffect = fiber;
              offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              continue;
            }
          }
          if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
            firstChild.return = fiber;
            nextEffect = firstChild;
          } else {
            commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
          }
        }
      }
      function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          if ((fiber.flags & LayoutMask) !== NoFlags) {
            var current2 = fiber.alternate;
            setCurrentFiber(fiber);
            try {
              commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
          }
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function disappearLayoutEffects_begin(subtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var firstChild = fiber.child;
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              if (fiber.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  commitHookEffectListUnmount(Layout, fiber, fiber.return);
                } finally {
                  recordLayoutEffectDuration(fiber);
                }
              } else {
                commitHookEffectListUnmount(Layout, fiber, fiber.return);
              }
              break;
            }
            case ClassComponent: {
              safelyDetachRef(fiber, fiber.return);
              var instance = fiber.stateNode;
              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(fiber, fiber.return, instance);
              }
              break;
            }
            case HostComponent: {
              safelyDetachRef(fiber, fiber.return);
              break;
            }
            case OffscreenComponent: {
              var isHidden = fiber.memoizedState !== null;
              if (isHidden) {
                disappearLayoutEffects_complete(subtreeRoot);
                continue;
              }
              break;
            }
          }
          if (firstChild !== null) {
            firstChild.return = fiber;
            nextEffect = firstChild;
          } else {
            disappearLayoutEffects_complete(subtreeRoot);
          }
        }
      }
      function disappearLayoutEffects_complete(subtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function reappearLayoutEffects_begin(subtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var firstChild = fiber.child;
          if (fiber.tag === OffscreenComponent) {
            var isHidden = fiber.memoizedState !== null;
            if (isHidden) {
              reappearLayoutEffects_complete(subtreeRoot);
              continue;
            }
          }
          if (firstChild !== null) {
            firstChild.return = fiber;
            nextEffect = firstChild;
          } else {
            reappearLayoutEffects_complete(subtreeRoot);
          }
        }
      }
      function reappearLayoutEffects_complete(subtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          setCurrentFiber(fiber);
          try {
            reappearLayoutEffectsOnFiber(fiber);
          } catch (error2) {
            captureCommitPhaseError(fiber, fiber.return, error2);
          }
          resetCurrentFiber();
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
        nextEffect = finishedWork;
        commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
      }
      function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var firstChild = fiber.child;
          if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
            firstChild.return = fiber;
            nextEffect = firstChild;
          } else {
            commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
          }
        }
      }
      function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          if ((fiber.flags & Passive) !== NoFlags) {
            setCurrentFiber(fiber);
            try {
              commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
          }
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (finishedWork.mode & ProfileMode) {
              startPassiveEffectTimer();
              try {
                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
              } finally {
                recordPassiveEffectDuration(finishedWork);
              }
            } else {
              commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
            }
            break;
          }
        }
      }
      function commitPassiveUnmountEffects(firstChild) {
        nextEffect = firstChild;
        commitPassiveUnmountEffects_begin();
      }
      function commitPassiveUnmountEffects_begin() {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var child = fiber.child;
          if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
            var deletions = fiber.deletions;
            if (deletions !== null) {
              for (var i = 0;i < deletions.length; i++) {
                var fiberToDelete = deletions[i];
                nextEffect = fiberToDelete;
                commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
              }
              {
                var previousFiber = fiber.alternate;
                if (previousFiber !== null) {
                  var detachedChild = previousFiber.child;
                  if (detachedChild !== null) {
                    previousFiber.child = null;
                    do {
                      var detachedSibling = detachedChild.sibling;
                      detachedChild.sibling = null;
                      detachedChild = detachedSibling;
                    } while (detachedChild !== null);
                  }
                }
              }
              nextEffect = fiber;
            }
          }
          if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
            child.return = fiber;
            nextEffect = child;
          } else {
            commitPassiveUnmountEffects_complete();
          }
        }
      }
      function commitPassiveUnmountEffects_complete() {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          if ((fiber.flags & Passive) !== NoFlags) {
            setCurrentFiber(fiber);
            commitPassiveUnmountOnFiber(fiber);
            resetCurrentFiber();
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitPassiveUnmountOnFiber(finishedWork) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (finishedWork.mode & ProfileMode) {
              startPassiveEffectTimer();
              commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
              recordPassiveEffectDuration(finishedWork);
            } else {
              commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
            }
            break;
          }
        }
      }
      function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          setCurrentFiber(fiber);
          commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
          resetCurrentFiber();
          var child = fiber.child;
          if (child !== null) {
            child.return = fiber;
            nextEffect = child;
          } else {
            commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
          }
        }
      }
      function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var sibling = fiber.sibling;
          var returnFiber = fiber.return;
          {
            detachFiberAfterEffects(fiber);
            if (fiber === deletedSubtreeRoot) {
              nextEffect = null;
              return;
            }
          }
          if (sibling !== null) {
            sibling.return = returnFiber;
            nextEffect = sibling;
            return;
          }
          nextEffect = returnFiber;
        }
      }
      function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
        switch (current2.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (current2.mode & ProfileMode) {
              startPassiveEffectTimer();
              commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
              recordPassiveEffectDuration(current2);
            } else {
              commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
            }
            break;
          }
        }
      }
      function invokeLayoutEffectMountInDEV(fiber) {
        {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              try {
                commitHookEffectListMount(Layout | HasEffect, fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              break;
            }
            case ClassComponent: {
              var instance = fiber.stateNode;
              try {
                instance.componentDidMount();
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              break;
            }
          }
        }
      }
      function invokePassiveEffectMountInDEV(fiber) {
        {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              try {
                commitHookEffectListMount(Passive$1 | HasEffect, fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              break;
            }
          }
        }
      }
      function invokeLayoutEffectUnmountInDEV(fiber) {
        {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              try {
                commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              break;
            }
            case ClassComponent: {
              var instance = fiber.stateNode;
              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(fiber, fiber.return, instance);
              }
              break;
            }
          }
        }
      }
      function invokePassiveEffectUnmountInDEV(fiber) {
        {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              try {
                commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
            }
          }
        }
      }
      var COMPONENT_TYPE = 0;
      var HAS_PSEUDO_CLASS_TYPE = 1;
      var ROLE_TYPE = 2;
      var TEST_NAME_TYPE = 3;
      var TEXT_TYPE = 4;
      if (typeof Symbol === "function" && Symbol.for) {
        var symbolFor = Symbol.for;
        COMPONENT_TYPE = symbolFor("selector.component");
        HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
        ROLE_TYPE = symbolFor("selector.role");
        TEST_NAME_TYPE = symbolFor("selector.test_id");
        TEXT_TYPE = symbolFor("selector.text");
      }
      var commitHooks = [];
      function onCommitRoot$1() {
        {
          commitHooks.forEach(function(commitHook) {
            return commitHook();
          });
        }
      }
      var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
      function isLegacyActEnvironment(fiber) {
        {
          var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : undefined;
          var jestIsDefined = typeof jest !== "undefined";
          return jestIsDefined && isReactActEnvironmentGlobal !== false;
        }
      }
      function isConcurrentActEnvironment() {
        {
          var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : undefined;
          if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
            error("The current testing environment is not configured to support act(...)");
          }
          return isReactActEnvironmentGlobal;
        }
      }
      var ceil = Math.ceil;
      var { ReactCurrentDispatcher: ReactCurrentDispatcher$2, ReactCurrentOwner: ReactCurrentOwner$2, ReactCurrentBatchConfig: ReactCurrentBatchConfig$3, ReactCurrentActQueue: ReactCurrentActQueue$1 } = ReactSharedInternals;
      var NoContext = 0;
      var BatchedContext = 1;
      var RenderContext = 2;
      var CommitContext = 4;
      var RootInProgress = 0;
      var RootFatalErrored = 1;
      var RootErrored = 2;
      var RootSuspended = 3;
      var RootSuspendedWithDelay = 4;
      var RootCompleted = 5;
      var RootDidNotComplete = 6;
      var executionContext = NoContext;
      var workInProgressRoot = null;
      var workInProgress = null;
      var workInProgressRootRenderLanes = NoLanes;
      var subtreeRenderLanes = NoLanes;
      var subtreeRenderLanesCursor = createCursor(NoLanes);
      var workInProgressRootExitStatus = RootInProgress;
      var workInProgressRootFatalError = null;
      var workInProgressRootIncludedLanes = NoLanes;
      var workInProgressRootSkippedLanes = NoLanes;
      var workInProgressRootInterleavedUpdatedLanes = NoLanes;
      var workInProgressRootPingedLanes = NoLanes;
      var workInProgressRootConcurrentErrors = null;
      var workInProgressRootRecoverableErrors = null;
      var globalMostRecentFallbackTime = 0;
      var FALLBACK_THROTTLE_MS = 500;
      var workInProgressRootRenderTargetTime = Infinity;
      var RENDER_TIMEOUT_MS = 500;
      var workInProgressTransitions = null;
      function resetRenderTimer() {
        workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
      }
      function getRenderTargetTime() {
        return workInProgressRootRenderTargetTime;
      }
      var hasUncaughtError = false;
      var firstUncaughtError = null;
      var legacyErrorBoundariesThatAlreadyFailed = null;
      var rootDoesHavePassiveEffects = false;
      var rootWithPendingPassiveEffects = null;
      var pendingPassiveEffectsLanes = NoLanes;
      var pendingPassiveProfilerEffects = [];
      var pendingPassiveTransitions = null;
      var NESTED_UPDATE_LIMIT = 50;
      var nestedUpdateCount = 0;
      var rootWithNestedUpdates = null;
      var isFlushingPassiveEffects = false;
      var didScheduleUpdateDuringPassiveEffects = false;
      var NESTED_PASSIVE_UPDATE_LIMIT = 50;
      var nestedPassiveUpdateCount = 0;
      var rootWithPassiveNestedUpdates = null;
      var currentEventTime = NoTimestamp;
      var currentEventTransitionLane = NoLanes;
      var isRunningInsertionEffect = false;
      function getWorkInProgressRoot() {
        return workInProgressRoot;
      }
      function requestEventTime() {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          return now();
        }
        if (currentEventTime !== NoTimestamp) {
          return currentEventTime;
        }
        currentEventTime = now();
        return currentEventTime;
      }
      function requestUpdateLane(fiber) {
        var mode = fiber.mode;
        if ((mode & ConcurrentMode) === NoMode) {
          return SyncLane;
        } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
          return pickArbitraryLane(workInProgressRootRenderLanes);
        }
        var isTransition = requestCurrentTransition() !== NoTransition;
        if (isTransition) {
          if (ReactCurrentBatchConfig$3.transition !== null) {
            var transition = ReactCurrentBatchConfig$3.transition;
            if (!transition._updatedFibers) {
              transition._updatedFibers = new Set;
            }
            transition._updatedFibers.add(fiber);
          }
          if (currentEventTransitionLane === NoLane) {
            currentEventTransitionLane = claimNextTransitionLane();
          }
          return currentEventTransitionLane;
        }
        var updateLane = getCurrentUpdatePriority();
        if (updateLane !== NoLane) {
          return updateLane;
        }
        var eventLane = getCurrentEventPriority();
        return eventLane;
      }
      function requestRetryLane(fiber) {
        var mode = fiber.mode;
        if ((mode & ConcurrentMode) === NoMode) {
          return SyncLane;
        }
        return claimNextRetryLane();
      }
      function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
        checkForNestedUpdates();
        {
          if (isRunningInsertionEffect) {
            error("useInsertionEffect must not schedule updates.");
          }
        }
        {
          if (isFlushingPassiveEffects) {
            didScheduleUpdateDuringPassiveEffects = true;
          }
        }
        markRootUpdated(root2, lane, eventTime);
        if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
          warnAboutRenderPhaseUpdatesInDEV(fiber);
        } else {
          {
            if (isDevToolsPresent) {
              addFiberToLanesMap(root2, fiber, lane);
            }
          }
          warnIfUpdatesNotWrappedWithActDEV(fiber);
          if (root2 === workInProgressRoot) {
            if ((executionContext & RenderContext) === NoContext) {
              workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
            }
            if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
              markRootSuspended$1(root2, workInProgressRootRenderLanes);
            }
          }
          ensureRootIsScheduled(root2, eventTime);
          if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && !ReactCurrentActQueue$1.isBatchingLegacy) {
            resetRenderTimer();
            flushSyncCallbacksOnlyInLegacyMode();
          }
        }
      }
      function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
        var current2 = root2.current;
        current2.lanes = lane;
        markRootUpdated(root2, lane, eventTime);
        ensureRootIsScheduled(root2, eventTime);
      }
      function isUnsafeClassRenderPhaseUpdate(fiber) {
        return (executionContext & RenderContext) !== NoContext;
      }
      function ensureRootIsScheduled(root2, currentTime) {
        var existingCallbackNode = root2.callbackNode;
        markStarvedLanesAsExpired(root2, currentTime);
        var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (nextLanes === NoLanes) {
          if (existingCallbackNode !== null) {
            cancelCallback$1(existingCallbackNode);
          }
          root2.callbackNode = null;
          root2.callbackPriority = NoLane;
          return;
        }
        var newCallbackPriority = getHighestPriorityLane(nextLanes);
        var existingCallbackPriority = root2.callbackPriority;
        if (existingCallbackPriority === newCallbackPriority && !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
          {
            if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
              error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          return;
        }
        if (existingCallbackNode != null) {
          cancelCallback$1(existingCallbackNode);
        }
        var newCallbackNode;
        if (newCallbackPriority === SyncLane) {
          if (root2.tag === LegacyRoot) {
            if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
              ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
            }
            scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
          } else {
            scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
          }
          {
            if (ReactCurrentActQueue$1.current !== null) {
              ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
            } else {
              scheduleMicrotask(function() {
                if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                  flushSyncCallbacks();
                }
              });
            }
          }
          newCallbackNode = null;
        } else {
          var schedulerPriorityLevel;
          switch (lanesToEventPriority(nextLanes)) {
            case DiscreteEventPriority:
              schedulerPriorityLevel = ImmediatePriority;
              break;
            case ContinuousEventPriority:
              schedulerPriorityLevel = UserBlockingPriority;
              break;
            case DefaultEventPriority:
              schedulerPriorityLevel = NormalPriority;
              break;
            case IdleEventPriority:
              schedulerPriorityLevel = IdlePriority;
              break;
            default:
              schedulerPriorityLevel = NormalPriority;
              break;
          }
          newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
        }
        root2.callbackPriority = newCallbackPriority;
        root2.callbackNode = newCallbackNode;
      }
      function performConcurrentWorkOnRoot(root2, didTimeout) {
        {
          resetNestedUpdateFlag();
        }
        currentEventTime = NoTimestamp;
        currentEventTransitionLane = NoLanes;
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          throw new Error("Should not already be working.");
        }
        var originalCallbackNode = root2.callbackNode;
        var didFlushPassiveEffects = flushPassiveEffects();
        if (didFlushPassiveEffects) {
          if (root2.callbackNode !== originalCallbackNode) {
            return null;
          }
        }
        var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (lanes === NoLanes) {
          return null;
        }
        var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
        var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
        if (exitStatus !== RootInProgress) {
          if (exitStatus === RootErrored) {
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
            if (errorRetryLanes !== NoLanes) {
              lanes = errorRetryLanes;
              exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
            }
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root2, NoLanes);
            markRootSuspended$1(root2, lanes);
            ensureRootIsScheduled(root2, now());
            throw fatalError;
          }
          if (exitStatus === RootDidNotComplete) {
            markRootSuspended$1(root2, lanes);
          } else {
            var renderWasConcurrent = !includesBlockingLane(root2, lanes);
            var finishedWork = root2.current.alternate;
            if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
              exitStatus = renderRootSync(root2, lanes);
              if (exitStatus === RootErrored) {
                var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                if (_errorRetryLanes !== NoLanes) {
                  lanes = _errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var _fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw _fatalError;
              }
            }
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            finishConcurrentRender(root2, exitStatus, lanes);
          }
        }
        ensureRootIsScheduled(root2, now());
        if (root2.callbackNode === originalCallbackNode) {
          return performConcurrentWorkOnRoot.bind(null, root2);
        }
        return null;
      }
      function recoverFromConcurrentError(root2, errorRetryLanes) {
        var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
        if (isRootDehydrated(root2)) {
          var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
          rootWorkInProgress.flags |= ForceClientRender;
          {
            errorHydratingContainer(root2.containerInfo);
          }
        }
        var exitStatus = renderRootSync(root2, errorRetryLanes);
        if (exitStatus !== RootErrored) {
          var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
          workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
          if (errorsFromSecondAttempt !== null) {
            queueRecoverableErrors(errorsFromSecondAttempt);
          }
        }
        return exitStatus;
      }
      function queueRecoverableErrors(errors) {
        if (workInProgressRootRecoverableErrors === null) {
          workInProgressRootRecoverableErrors = errors;
        } else {
          workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
        }
      }
      function finishConcurrentRender(root2, exitStatus, lanes) {
        switch (exitStatus) {
          case RootInProgress:
          case RootFatalErrored: {
            throw new Error("Root did not complete. This is a bug in React.");
          }
          case RootErrored: {
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          case RootSuspended: {
            markRootSuspended$1(root2, lanes);
            if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
              var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
              if (msUntilTimeout > 10) {
                var nextLanes = getNextLanes(root2, NoLanes);
                if (nextLanes !== NoLanes) {
                  break;
                }
                var suspendedLanes = root2.suspendedLanes;
                if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                  var eventTime = requestEventTime();
                  markRootPinged(root2, suspendedLanes);
                  break;
                }
                root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                break;
              }
            }
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          case RootSuspendedWithDelay: {
            markRootSuspended$1(root2, lanes);
            if (includesOnlyTransitions(lanes)) {
              break;
            }
            if (!shouldForceFlushFallbacksInDEV()) {
              var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
              var eventTimeMs = mostRecentEventTime;
              var timeElapsedMs = now() - eventTimeMs;
              var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
              if (_msUntilTimeout > 10) {
                root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                break;
              }
            }
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          case RootCompleted: {
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          default: {
            throw new Error("Unknown root exit status.");
          }
        }
      }
      function isRenderConsistentWithExternalStores(finishedWork) {
        var node = finishedWork;
        while (true) {
          if (node.flags & StoreConsistency) {
            var updateQueue = node.updateQueue;
            if (updateQueue !== null) {
              var checks = updateQueue.stores;
              if (checks !== null) {
                for (var i = 0;i < checks.length; i++) {
                  var check = checks[i];
                  var getSnapshot = check.getSnapshot;
                  var renderedValue = check.value;
                  try {
                    if (!objectIs(getSnapshot(), renderedValue)) {
                      return false;
                    }
                  } catch (error2) {
                    return false;
                  }
                }
              }
            }
          }
          var child = node.child;
          if (node.subtreeFlags & StoreConsistency && child !== null) {
            child.return = node;
            node = child;
            continue;
          }
          if (node === finishedWork) {
            return true;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === finishedWork) {
              return true;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
        return true;
      }
      function markRootSuspended$1(root2, suspendedLanes) {
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
        markRootSuspended(root2, suspendedLanes);
      }
      function performSyncWorkOnRoot(root2) {
        {
          syncNestedUpdateFlag();
        }
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          throw new Error("Should not already be working.");
        }
        flushPassiveEffects();
        var lanes = getNextLanes(root2, NoLanes);
        if (!includesSomeLane(lanes, SyncLane)) {
          ensureRootIsScheduled(root2, now());
          return null;
        }
        var exitStatus = renderRootSync(root2, lanes);
        if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
          var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
          if (errorRetryLanes !== NoLanes) {
            lanes = errorRetryLanes;
            exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
          }
        }
        if (exitStatus === RootFatalErrored) {
          var fatalError = workInProgressRootFatalError;
          prepareFreshStack(root2, NoLanes);
          markRootSuspended$1(root2, lanes);
          ensureRootIsScheduled(root2, now());
          throw fatalError;
        }
        if (exitStatus === RootDidNotComplete) {
          throw new Error("Root did not complete. This is a bug in React.");
        }
        var finishedWork = root2.current.alternate;
        root2.finishedWork = finishedWork;
        root2.finishedLanes = lanes;
        commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
        ensureRootIsScheduled(root2, now());
        return null;
      }
      function flushRoot(root2, lanes) {
        if (lanes !== NoLanes) {
          markRootEntangled(root2, mergeLanes(lanes, SyncLane));
          ensureRootIsScheduled(root2, now());
          if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
            resetRenderTimer();
            flushSyncCallbacks();
          }
        }
      }
      function batchedUpdates$1(fn, a2) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
          return fn(a2);
        } finally {
          executionContext = prevExecutionContext;
          if (executionContext === NoContext && !ReactCurrentActQueue$1.isBatchingLegacy) {
            resetRenderTimer();
            flushSyncCallbacksOnlyInLegacyMode();
          }
        }
      }
      function discreteUpdates(fn, a2, b3, c2, d2) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
          ReactCurrentBatchConfig$3.transition = null;
          setCurrentUpdatePriority(DiscreteEventPriority);
          return fn(a2, b3, c2, d2);
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$3.transition = prevTransition;
          if (executionContext === NoContext) {
            resetRenderTimer();
          }
        }
      }
      function flushSync(fn) {
        if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
          flushPassiveEffects();
        }
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        var previousPriority = getCurrentUpdatePriority();
        try {
          ReactCurrentBatchConfig$3.transition = null;
          setCurrentUpdatePriority(DiscreteEventPriority);
          if (fn) {
            return fn();
          } else {
            return;
          }
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$3.transition = prevTransition;
          executionContext = prevExecutionContext;
          if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
            flushSyncCallbacks();
          }
        }
      }
      function isAlreadyRendering() {
        return (executionContext & (RenderContext | CommitContext)) !== NoContext;
      }
      function pushRenderLanes(fiber, lanes) {
        push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
        subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
        workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
      }
      function popRenderLanes(fiber) {
        subtreeRenderLanes = subtreeRenderLanesCursor.current;
        pop(subtreeRenderLanesCursor, fiber);
      }
      function prepareFreshStack(root2, lanes) {
        root2.finishedWork = null;
        root2.finishedLanes = NoLanes;
        var timeoutHandle = root2.timeoutHandle;
        if (timeoutHandle !== noTimeout) {
          root2.timeoutHandle = noTimeout;
          cancelTimeout(timeoutHandle);
        }
        if (workInProgress !== null) {
          var interruptedWork = workInProgress.return;
          while (interruptedWork !== null) {
            var current2 = interruptedWork.alternate;
            unwindInterruptedWork(current2, interruptedWork);
            interruptedWork = interruptedWork.return;
          }
        }
        workInProgressRoot = root2;
        var rootWorkInProgress = createWorkInProgress(root2.current, null);
        workInProgress = rootWorkInProgress;
        workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
        workInProgressRootExitStatus = RootInProgress;
        workInProgressRootFatalError = null;
        workInProgressRootSkippedLanes = NoLanes;
        workInProgressRootInterleavedUpdatedLanes = NoLanes;
        workInProgressRootPingedLanes = NoLanes;
        workInProgressRootConcurrentErrors = null;
        workInProgressRootRecoverableErrors = null;
        finishQueueingConcurrentUpdates();
        {
          ReactStrictModeWarnings.discardPendingWarnings();
        }
        return rootWorkInProgress;
      }
      function handleError(root2, thrownValue) {
        do {
          var erroredWork = workInProgress;
          try {
            resetContextDependencies();
            resetHooksAfterThrow();
            resetCurrentFiber();
            ReactCurrentOwner$2.current = null;
            if (erroredWork === null || erroredWork.return === null) {
              workInProgressRootExitStatus = RootFatalErrored;
              workInProgressRootFatalError = thrownValue;
              workInProgress = null;
              return;
            }
            if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
              stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
            }
            if (enableSchedulingProfiler) {
              markComponentRenderStopped();
              if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                var wakeable = thrownValue;
                markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
              } else {
                markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
              }
            }
            throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
            completeUnitOfWork(erroredWork);
          } catch (yetAnotherThrownValue) {
            thrownValue = yetAnotherThrownValue;
            if (workInProgress === erroredWork && erroredWork !== null) {
              erroredWork = erroredWork.return;
              workInProgress = erroredWork;
            } else {
              erroredWork = workInProgress;
            }
            continue;
          }
          return;
        } while (true);
      }
      function pushDispatcher() {
        var prevDispatcher = ReactCurrentDispatcher$2.current;
        ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
        if (prevDispatcher === null) {
          return ContextOnlyDispatcher;
        } else {
          return prevDispatcher;
        }
      }
      function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$2.current = prevDispatcher;
      }
      function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now();
      }
      function markSkippedUpdateLanes(lane) {
        workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
      }
      function renderDidSuspend() {
        if (workInProgressRootExitStatus === RootInProgress) {
          workInProgressRootExitStatus = RootSuspended;
        }
      }
      function renderDidSuspendDelayIfPossible() {
        if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
          workInProgressRootExitStatus = RootSuspendedWithDelay;
        }
        if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
          markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
        }
      }
      function renderDidError(error2) {
        if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
          workInProgressRootExitStatus = RootErrored;
        }
        if (workInProgressRootConcurrentErrors === null) {
          workInProgressRootConcurrentErrors = [error2];
        } else {
          workInProgressRootConcurrentErrors.push(error2);
        }
      }
      function renderHasNotSuspendedYet() {
        return workInProgressRootExitStatus === RootInProgress;
      }
      function renderRootSync(root2, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();
        if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
          {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root2.memoizedUpdaters;
              if (memoizedUpdaters.size > 0) {
                restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                memoizedUpdaters.clear();
              }
              movePendingFibersToMemoized(root2, lanes);
            }
          }
          workInProgressTransitions = getTransitionsForLanes();
          prepareFreshStack(root2, lanes);
        }
        {
          markRenderStarted(lanes);
        }
        do {
          try {
            workLoopSync();
            break;
          } catch (thrownValue) {
            handleError(root2, thrownValue);
          }
        } while (true);
        resetContextDependencies();
        executionContext = prevExecutionContext;
        popDispatcher(prevDispatcher);
        if (workInProgress !== null) {
          throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
        }
        {
          markRenderStopped();
        }
        workInProgressRoot = null;
        workInProgressRootRenderLanes = NoLanes;
        return workInProgressRootExitStatus;
      }
      function workLoopSync() {
        while (workInProgress !== null) {
          performUnitOfWork(workInProgress);
        }
      }
      function renderRootConcurrent(root2, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();
        if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
          {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root2.memoizedUpdaters;
              if (memoizedUpdaters.size > 0) {
                restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                memoizedUpdaters.clear();
              }
              movePendingFibersToMemoized(root2, lanes);
            }
          }
          workInProgressTransitions = getTransitionsForLanes();
          resetRenderTimer();
          prepareFreshStack(root2, lanes);
        }
        {
          markRenderStarted(lanes);
        }
        do {
          try {
            workLoopConcurrent();
            break;
          } catch (thrownValue) {
            handleError(root2, thrownValue);
          }
        } while (true);
        resetContextDependencies();
        popDispatcher(prevDispatcher);
        executionContext = prevExecutionContext;
        if (workInProgress !== null) {
          {
            markRenderYielded();
          }
          return RootInProgress;
        } else {
          {
            markRenderStopped();
          }
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        }
      }
      function workLoopConcurrent() {
        while (workInProgress !== null && !shouldYield()) {
          performUnitOfWork(workInProgress);
        }
      }
      function performUnitOfWork(unitOfWork) {
        var current2 = unitOfWork.alternate;
        setCurrentFiber(unitOfWork);
        var next;
        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
          startProfilerTimer(unitOfWork);
          next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
          stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        } else {
          next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
        }
        resetCurrentFiber();
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        if (next === null) {
          completeUnitOfWork(unitOfWork);
        } else {
          workInProgress = next;
        }
        ReactCurrentOwner$2.current = null;
      }
      function completeUnitOfWork(unitOfWork) {
        var completedWork = unitOfWork;
        do {
          var current2 = completedWork.alternate;
          var returnFiber = completedWork.return;
          if ((completedWork.flags & Incomplete) === NoFlags) {
            setCurrentFiber(completedWork);
            var next = undefined;
            if ((completedWork.mode & ProfileMode) === NoMode) {
              next = completeWork(current2, completedWork, subtreeRenderLanes);
            } else {
              startProfilerTimer(completedWork);
              next = completeWork(current2, completedWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
            }
            resetCurrentFiber();
            if (next !== null) {
              workInProgress = next;
              return;
            }
          } else {
            var _next = unwindWork(current2, completedWork);
            if (_next !== null) {
              _next.flags &= HostEffectMask;
              workInProgress = _next;
              return;
            }
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              var actualDuration = completedWork.actualDuration;
              var child = completedWork.child;
              while (child !== null) {
                actualDuration += child.actualDuration;
                child = child.sibling;
              }
              completedWork.actualDuration = actualDuration;
            }
            if (returnFiber !== null) {
              returnFiber.flags |= Incomplete;
              returnFiber.subtreeFlags = NoFlags;
              returnFiber.deletions = null;
            } else {
              workInProgressRootExitStatus = RootDidNotComplete;
              workInProgress = null;
              return;
            }
          }
          var siblingFiber = completedWork.sibling;
          if (siblingFiber !== null) {
            workInProgress = siblingFiber;
            return;
          }
          completedWork = returnFiber;
          workInProgress = completedWork;
        } while (completedWork !== null);
        if (workInProgressRootExitStatus === RootInProgress) {
          workInProgressRootExitStatus = RootCompleted;
        }
      }
      function commitRoot(root2, recoverableErrors, transitions) {
        var previousUpdateLanePriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
          ReactCurrentBatchConfig$3.transition = null;
          setCurrentUpdatePriority(DiscreteEventPriority);
          commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
        } finally {
          ReactCurrentBatchConfig$3.transition = prevTransition;
          setCurrentUpdatePriority(previousUpdateLanePriority);
        }
        return null;
      }
      function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
        do {
          flushPassiveEffects();
        } while (rootWithPendingPassiveEffects !== null);
        flushRenderPhaseStrictModeWarningsInDEV();
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          throw new Error("Should not already be working.");
        }
        var finishedWork = root2.finishedWork;
        var lanes = root2.finishedLanes;
        {
          markCommitStarted(lanes);
        }
        if (finishedWork === null) {
          {
            markCommitStopped();
          }
          return null;
        } else {
          {
            if (lanes === NoLanes) {
              error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
            }
          }
        }
        root2.finishedWork = null;
        root2.finishedLanes = NoLanes;
        if (finishedWork === root2.current) {
          throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
        }
        root2.callbackNode = null;
        root2.callbackPriority = NoLane;
        var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
        markRootFinished(root2, remainingLanes);
        if (root2 === workInProgressRoot) {
          workInProgressRoot = null;
          workInProgress = null;
          workInProgressRootRenderLanes = NoLanes;
        }
        if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
          if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            pendingPassiveTransitions = transitions;
            scheduleCallback$1(NormalPriority, function() {
              flushPassiveEffects();
              return null;
            });
          }
        }
        var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
        var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
        if (subtreeHasEffects || rootHasEffect) {
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          ReactCurrentBatchConfig$3.transition = null;
          var previousPriority = getCurrentUpdatePriority();
          setCurrentUpdatePriority(DiscreteEventPriority);
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          ReactCurrentOwner$2.current = null;
          var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
          {
            recordCommitTime();
          }
          commitMutationEffects(root2, finishedWork, lanes);
          resetAfterCommit(root2.containerInfo);
          root2.current = finishedWork;
          {
            markLayoutEffectsStarted(lanes);
          }
          commitLayoutEffects(finishedWork, root2, lanes);
          {
            markLayoutEffectsStopped();
          }
          requestPaint();
          executionContext = prevExecutionContext;
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$3.transition = prevTransition;
        } else {
          root2.current = finishedWork;
          {
            recordCommitTime();
          }
        }
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
        if (rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = false;
          rootWithPendingPassiveEffects = root2;
          pendingPassiveEffectsLanes = lanes;
        } else {
          {
            nestedPassiveUpdateCount = 0;
            rootWithPassiveNestedUpdates = null;
          }
        }
        remainingLanes = root2.pendingLanes;
        if (remainingLanes === NoLanes) {
          legacyErrorBoundariesThatAlreadyFailed = null;
        }
        {
          if (!rootDidHavePassiveEffects) {
            commitDoubleInvokeEffectsInDEV(root2.current, false);
          }
        }
        onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
        {
          if (isDevToolsPresent) {
            root2.memoizedUpdaters.clear();
          }
        }
        {
          onCommitRoot$1();
        }
        ensureRootIsScheduled(root2, now());
        if (recoverableErrors !== null) {
          var onRecoverableError = root2.onRecoverableError;
          for (var i = 0;i < recoverableErrors.length; i++) {
            var recoverableError = recoverableErrors[i];
            var componentStack = recoverableError.stack;
            var digest = recoverableError.digest;
            onRecoverableError(recoverableError.value, {
              componentStack,
              digest
            });
          }
        }
        if (hasUncaughtError) {
          hasUncaughtError = false;
          var error$1 = firstUncaughtError;
          firstUncaughtError = null;
          throw error$1;
        }
        if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
          flushPassiveEffects();
        }
        remainingLanes = root2.pendingLanes;
        if (includesSomeLane(remainingLanes, SyncLane)) {
          {
            markNestedUpdateScheduled();
          }
          if (root2 === rootWithNestedUpdates) {
            nestedUpdateCount++;
          } else {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = root2;
          }
        } else {
          nestedUpdateCount = 0;
        }
        flushSyncCallbacks();
        {
          markCommitStopped();
        }
        return null;
      }
      function flushPassiveEffects() {
        if (rootWithPendingPassiveEffects !== null) {
          var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
          var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          var previousPriority = getCurrentUpdatePriority();
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(priority);
            return flushPassiveEffectsImpl();
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
          }
        }
        return false;
      }
      function enqueuePendingPassiveProfilerEffect(fiber) {
        {
          pendingPassiveProfilerEffects.push(fiber);
          if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback$1(NormalPriority, function() {
              flushPassiveEffects();
              return null;
            });
          }
        }
      }
      function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null) {
          return false;
        }
        var transitions = pendingPassiveTransitions;
        pendingPassiveTransitions = null;
        var root2 = rootWithPendingPassiveEffects;
        var lanes = pendingPassiveEffectsLanes;
        rootWithPendingPassiveEffects = null;
        pendingPassiveEffectsLanes = NoLanes;
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          throw new Error("Cannot flush passive effects while already rendering.");
        }
        {
          isFlushingPassiveEffects = true;
          didScheduleUpdateDuringPassiveEffects = false;
        }
        {
          markPassiveEffectsStarted(lanes);
        }
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        commitPassiveUnmountEffects(root2.current);
        commitPassiveMountEffects(root2, root2.current, lanes, transitions);
        {
          var profilerEffects = pendingPassiveProfilerEffects;
          pendingPassiveProfilerEffects = [];
          for (var i = 0;i < profilerEffects.length; i++) {
            var _fiber = profilerEffects[i];
            commitPassiveEffectDurations(root2, _fiber);
          }
        }
        {
          markPassiveEffectsStopped();
        }
        {
          commitDoubleInvokeEffectsInDEV(root2.current, true);
        }
        executionContext = prevExecutionContext;
        flushSyncCallbacks();
        {
          if (didScheduleUpdateDuringPassiveEffects) {
            if (root2 === rootWithPassiveNestedUpdates) {
              nestedPassiveUpdateCount++;
            } else {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = root2;
            }
          } else {
            nestedPassiveUpdateCount = 0;
          }
          isFlushingPassiveEffects = false;
          didScheduleUpdateDuringPassiveEffects = false;
        }
        onPostCommitRoot(root2);
        {
          var stateNode = root2.current.stateNode;
          stateNode.effectDuration = 0;
          stateNode.passiveEffectDuration = 0;
        }
        return true;
      }
      function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
      }
      function markLegacyErrorBoundaryAsFailed(instance) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) {
          legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
        } else {
          legacyErrorBoundariesThatAlreadyFailed.add(instance);
        }
      }
      function prepareToThrowUncaughtError(error2) {
        if (!hasUncaughtError) {
          hasUncaughtError = true;
          firstUncaughtError = error2;
        }
      }
      var onUncaughtError = prepareToThrowUncaughtError;
      function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
        var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
        var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
        var root2 = enqueueUpdate(rootFiber, update, SyncLane);
        var eventTime = requestEventTime();
        if (root2 !== null) {
          markRootUpdated(root2, SyncLane, eventTime);
          ensureRootIsScheduled(root2, eventTime);
        }
      }
      function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
        {
          reportUncaughtErrorInDEV(error$1);
          setIsRunningInsertionEffect(false);
        }
        if (sourceFiber.tag === HostRoot) {
          captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
          return;
        }
        var fiber = null;
        {
          fiber = nearestMountedAncestor;
        }
        while (fiber !== null) {
          if (fiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
            return;
          } else if (fiber.tag === ClassComponent) {
            var ctor = fiber.type;
            var instance = fiber.stateNode;
            if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
              var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
              var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
              var root2 = enqueueUpdate(fiber, update, SyncLane);
              var eventTime = requestEventTime();
              if (root2 !== null) {
                markRootUpdated(root2, SyncLane, eventTime);
                ensureRootIsScheduled(root2, eventTime);
              }
              return;
            }
          }
          fiber = fiber.return;
        }
        {
          error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
        }
      }
      function pingSuspendedRoot(root2, wakeable, pingedLanes) {
        var pingCache = root2.pingCache;
        if (pingCache !== null) {
          pingCache.delete(wakeable);
        }
        var eventTime = requestEventTime();
        markRootPinged(root2, pingedLanes);
        warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
        if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
          if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
            prepareFreshStack(root2, NoLanes);
          } else {
            workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
          }
        }
        ensureRootIsScheduled(root2, eventTime);
      }
      function retryTimedOutBoundary(boundaryFiber, retryLane) {
        if (retryLane === NoLane) {
          retryLane = requestRetryLane(boundaryFiber);
        }
        var eventTime = requestEventTime();
        var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
        if (root2 !== null) {
          markRootUpdated(root2, retryLane, eventTime);
          ensureRootIsScheduled(root2, eventTime);
        }
      }
      function retryDehydratedSuspenseBoundary(boundaryFiber) {
        var suspenseState = boundaryFiber.memoizedState;
        var retryLane = NoLane;
        if (suspenseState !== null) {
          retryLane = suspenseState.retryLane;
        }
        retryTimedOutBoundary(boundaryFiber, retryLane);
      }
      function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = NoLane;
        var retryCache;
        switch (boundaryFiber.tag) {
          case SuspenseComponent:
            retryCache = boundaryFiber.stateNode;
            var suspenseState = boundaryFiber.memoizedState;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            break;
          case SuspenseListComponent:
            retryCache = boundaryFiber.stateNode;
            break;
          default:
            throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
        }
        if (retryCache !== null) {
          retryCache.delete(wakeable);
        }
        retryTimedOutBoundary(boundaryFiber, retryLane);
      }
      function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
      }
      function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
          nestedUpdateCount = 0;
          rootWithNestedUpdates = null;
          throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
        }
        {
          if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
            nestedPassiveUpdateCount = 0;
            rootWithPassiveNestedUpdates = null;
            error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
          }
        }
      }
      function flushRenderPhaseStrictModeWarningsInDEV() {
        {
          ReactStrictModeWarnings.flushLegacyContextWarning();
          {
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
          }
        }
      }
      function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
        {
          setCurrentFiber(fiber);
          invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
          if (hasPassiveEffects) {
            invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
          }
          invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
          if (hasPassiveEffects) {
            invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
          }
          resetCurrentFiber();
        }
      }
      function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
        {
          var current2 = firstChild;
          var subtreeRoot = null;
          while (current2 !== null) {
            var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
            if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
              current2 = current2.child;
            } else {
              if ((current2.flags & fiberFlags) !== NoFlags) {
                invokeEffectFn(current2);
              }
              if (current2.sibling !== null) {
                current2 = current2.sibling;
              } else {
                current2 = subtreeRoot = current2.return;
              }
            }
          }
        }
      }
      var didWarnStateUpdateForNotYetMountedComponent = null;
      function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        {
          if ((executionContext & RenderContext) !== NoContext) {
            return;
          }
          if (!(fiber.mode & ConcurrentMode)) {
            return;
          }
          var tag = fiber.tag;
          if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
            return;
          }
          var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
          if (didWarnStateUpdateForNotYetMountedComponent !== null) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
              return;
            }
            didWarnStateUpdateForNotYetMountedComponent.add(componentName);
          } else {
            didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
          }
          var previousFiber = current;
          try {
            setCurrentFiber(fiber);
            error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
          } finally {
            if (previousFiber) {
              setCurrentFiber(fiber);
            } else {
              resetCurrentFiber();
            }
          }
        }
      }
      var beginWork$1;
      {
        var dummyFiber = null;
        beginWork$1 = function(current2, unitOfWork, lanes) {
          var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
          try {
            return beginWork(current2, unitOfWork, lanes);
          } catch (originalError) {
            if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
              throw originalError;
            }
            resetContextDependencies();
            resetHooksAfterThrow();
            unwindInterruptedWork(current2, unitOfWork);
            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
            if (unitOfWork.mode & ProfileMode) {
              startProfilerTimer(unitOfWork);
            }
            invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
            if (hasCaughtError()) {
              var replayError = clearCaughtError();
              if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                originalError._suppressLogging = true;
              }
            }
            throw originalError;
          }
        };
      }
      var didWarnAboutUpdateInRender = false;
      var didWarnAboutUpdateInRenderForAnotherComponent;
      {
        didWarnAboutUpdateInRenderForAnotherComponent = new Set;
      }
      function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        {
          if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                var dedupeKey = renderingComponentName;
                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                  didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                  var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                  error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                }
                break;
              }
              case ClassComponent: {
                if (!didWarnAboutUpdateInRender) {
                  error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                  didWarnAboutUpdateInRender = true;
                }
                break;
              }
            }
          }
        }
      }
      function restorePendingUpdaters(root2, lanes) {
        {
          if (isDevToolsPresent) {
            var memoizedUpdaters = root2.memoizedUpdaters;
            memoizedUpdaters.forEach(function(schedulingFiber) {
              addFiberToLanesMap(root2, schedulingFiber, lanes);
            });
          }
        }
      }
      var fakeActCallbackNode = {};
      function scheduleCallback$1(priorityLevel, callback) {
        {
          var actQueue = ReactCurrentActQueue$1.current;
          if (actQueue !== null) {
            actQueue.push(callback);
            return fakeActCallbackNode;
          } else {
            return scheduleCallback(priorityLevel, callback);
          }
        }
      }
      function cancelCallback$1(callbackNode) {
        if (callbackNode === fakeActCallbackNode) {
          return;
        }
        return cancelCallback(callbackNode);
      }
      function shouldForceFlushFallbacksInDEV() {
        return ReactCurrentActQueue$1.current !== null;
      }
      function warnIfUpdatesNotWrappedWithActDEV(fiber) {
        {
          if (fiber.mode & ConcurrentMode) {
            if (!isConcurrentActEnvironment()) {
              return;
            }
          } else {
            if (!isLegacyActEnvironment()) {
              return;
            }
            if (executionContext !== NoContext) {
              return;
            }
            if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
              return;
            }
          }
          if (ReactCurrentActQueue$1.current === null) {
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
      }
      function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
        {
          if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
            error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
          }
        }
      }
      function setIsRunningInsertionEffect(isRunning) {
        {
          isRunningInsertionEffect = isRunning;
        }
      }
      var resolveFamily = null;
      var failedBoundaries = null;
      var setRefreshHandler = function(handler) {
        {
          resolveFamily = handler;
        }
      };
      function resolveFunctionForHotReloading(type) {
        {
          if (resolveFamily === null) {
            return type;
          }
          var family = resolveFamily(type);
          if (family === undefined) {
            return type;
          }
          return family.current;
        }
      }
      function resolveClassForHotReloading(type) {
        return resolveFunctionForHotReloading(type);
      }
      function resolveForwardRefForHotReloading(type) {
        {
          if (resolveFamily === null) {
            return type;
          }
          var family = resolveFamily(type);
          if (family === undefined) {
            if (type !== null && type !== undefined && typeof type.render === "function") {
              var currentRender = resolveFunctionForHotReloading(type.render);
              if (type.render !== currentRender) {
                var syntheticType = {
                  $$typeof: REACT_FORWARD_REF_TYPE,
                  render: currentRender
                };
                if (type.displayName !== undefined) {
                  syntheticType.displayName = type.displayName;
                }
                return syntheticType;
              }
            }
            return type;
          }
          return family.current;
        }
      }
      function isCompatibleFamilyForHotReloading(fiber, element) {
        {
          if (resolveFamily === null) {
            return false;
          }
          var prevType = fiber.elementType;
          var nextType = element.type;
          var needsCompareFamilies = false;
          var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
          switch (fiber.tag) {
            case ClassComponent: {
              if (typeof nextType === "function") {
                needsCompareFamilies = true;
              }
              break;
            }
            case FunctionComponent: {
              if (typeof nextType === "function") {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            case ForwardRef: {
              if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            case MemoComponent:
            case SimpleMemoComponent: {
              if ($$typeofNextType === REACT_MEMO_TYPE) {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            default:
              return false;
          }
          if (needsCompareFamilies) {
            var prevFamily = resolveFamily(prevType);
            if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
              return true;
            }
          }
          return false;
        }
      }
      function markFailedErrorBoundaryForHotReloading(fiber) {
        {
          if (resolveFamily === null) {
            return;
          }
          if (typeof WeakSet !== "function") {
            return;
          }
          if (failedBoundaries === null) {
            failedBoundaries = new WeakSet;
          }
          failedBoundaries.add(fiber);
        }
      }
      var scheduleRefresh = function(root2, update) {
        {
          if (resolveFamily === null) {
            return;
          }
          var { staleFamilies, updatedFamilies } = update;
          flushPassiveEffects();
          flushSync(function() {
            scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
          });
        }
      };
      var scheduleRoot = function(root2, element) {
        {
          if (root2.context !== emptyContextObject) {
            return;
          }
          flushPassiveEffects();
          flushSync(function() {
            updateContainer(element, root2, null, null);
          });
        }
      };
      function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        {
          var { alternate, child, sibling, tag, type } = fiber;
          var candidateType = null;
          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;
            case ForwardRef:
              candidateType = type.render;
              break;
          }
          if (resolveFamily === null) {
            throw new Error("Expected resolveFamily to be set during hot reload.");
          }
          var needsRender = false;
          var needsRemount = false;
          if (candidateType !== null) {
            var family = resolveFamily(candidateType);
            if (family !== undefined) {
              if (staleFamilies.has(family)) {
                needsRemount = true;
              } else if (updatedFamilies.has(family)) {
                if (tag === ClassComponent) {
                  needsRemount = true;
                } else {
                  needsRender = true;
                }
              }
            }
          }
          if (failedBoundaries !== null) {
            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
              needsRemount = true;
            }
          }
          if (needsRemount) {
            fiber._debugNeedsRemount = true;
          }
          if (needsRemount || needsRender) {
            var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (_root !== null) {
              scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
            }
          }
          if (child !== null && !needsRemount) {
            scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
          }
          if (sibling !== null) {
            scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
          }
        }
      }
      var findHostInstancesForRefresh = function(root2, families) {
        {
          var hostInstances = new Set;
          var types = new Set(families.map(function(family) {
            return family.current;
          }));
          findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
          return hostInstances;
        }
      };
      function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        {
          var { child, sibling, tag, type } = fiber;
          var candidateType = null;
          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;
            case ForwardRef:
              candidateType = type.render;
              break;
          }
          var didMatch = false;
          if (candidateType !== null) {
            if (types.has(candidateType)) {
              didMatch = true;
            }
          }
          if (didMatch) {
            findHostInstancesForFiberShallowly(fiber, hostInstances);
          } else {
            if (child !== null) {
              findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
            }
          }
          if (sibling !== null) {
            findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
          }
        }
      }
      function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
          if (foundHostInstances) {
            return;
          }
          var node = fiber;
          while (true) {
            switch (node.tag) {
              case HostComponent:
                hostInstances.add(node.stateNode);
                return;
              case HostPortal:
                hostInstances.add(node.stateNode.containerInfo);
                return;
              case HostRoot:
                hostInstances.add(node.stateNode.containerInfo);
                return;
            }
            if (node.return === null) {
              throw new Error("Expected to reach root first.");
            }
            node = node.return;
          }
        }
      }
      function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var node = fiber;
          var foundHostInstances = false;
          while (true) {
            if (node.tag === HostComponent) {
              foundHostInstances = true;
              hostInstances.add(node.stateNode);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === fiber) {
              return foundHostInstances;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === fiber) {
                return foundHostInstances;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        return false;
      }
      var hasBadMapPolyfill;
      {
        hasBadMapPolyfill = false;
        try {
          var nonExtensibleObject = Object.preventExtensions({});
          new Map([[nonExtensibleObject, null]]);
          new Set([nonExtensibleObject]);
        } catch (e2) {
          hasBadMapPolyfill = true;
        }
      }
      function FiberNode(tag, pendingProps, key, mode) {
        this.tag = tag;
        this.key = key;
        this.elementType = null;
        this.type = null;
        this.stateNode = null;
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.dependencies = null;
        this.mode = mode;
        this.flags = NoFlags;
        this.subtreeFlags = NoFlags;
        this.deletions = null;
        this.lanes = NoLanes;
        this.childLanes = NoLanes;
        this.alternate = null;
        {
          this.actualDuration = Number.NaN;
          this.actualStartTime = Number.NaN;
          this.selfBaseDuration = Number.NaN;
          this.treeBaseDuration = Number.NaN;
          this.actualDuration = 0;
          this.actualStartTime = -1;
          this.selfBaseDuration = 0;
          this.treeBaseDuration = 0;
        }
        {
          this._debugSource = null;
          this._debugOwner = null;
          this._debugNeedsRemount = false;
          this._debugHookTypes = null;
          if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
            Object.preventExtensions(this);
          }
        }
      }
      var createFiber = function(tag, pendingProps, key, mode) {
        return new FiberNode(tag, pendingProps, key, mode);
      };
      function shouldConstruct$1(Component2) {
        var prototype = Component2.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function isSimpleFunctionComponent(type) {
        return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === undefined;
      }
      function resolveLazyComponentTag(Component2) {
        if (typeof Component2 === "function") {
          return shouldConstruct$1(Component2) ? ClassComponent : FunctionComponent;
        } else if (Component2 !== undefined && Component2 !== null) {
          var $$typeof = Component2.$$typeof;
          if ($$typeof === REACT_FORWARD_REF_TYPE) {
            return ForwardRef;
          }
          if ($$typeof === REACT_MEMO_TYPE) {
            return MemoComponent;
          }
        }
        return IndeterminateComponent;
      }
      function createWorkInProgress(current2, pendingProps) {
        var workInProgress2 = current2.alternate;
        if (workInProgress2 === null) {
          workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
          workInProgress2.elementType = current2.elementType;
          workInProgress2.type = current2.type;
          workInProgress2.stateNode = current2.stateNode;
          {
            workInProgress2._debugSource = current2._debugSource;
            workInProgress2._debugOwner = current2._debugOwner;
            workInProgress2._debugHookTypes = current2._debugHookTypes;
          }
          workInProgress2.alternate = current2;
          current2.alternate = workInProgress2;
        } else {
          workInProgress2.pendingProps = pendingProps;
          workInProgress2.type = current2.type;
          workInProgress2.flags = NoFlags;
          workInProgress2.subtreeFlags = NoFlags;
          workInProgress2.deletions = null;
          {
            workInProgress2.actualDuration = 0;
            workInProgress2.actualStartTime = -1;
          }
        }
        workInProgress2.flags = current2.flags & StaticMask;
        workInProgress2.childLanes = current2.childLanes;
        workInProgress2.lanes = current2.lanes;
        workInProgress2.child = current2.child;
        workInProgress2.memoizedProps = current2.memoizedProps;
        workInProgress2.memoizedState = current2.memoizedState;
        workInProgress2.updateQueue = current2.updateQueue;
        var currentDependencies = current2.dependencies;
        workInProgress2.dependencies = currentDependencies === null ? null : {
          lanes: currentDependencies.lanes,
          firstContext: currentDependencies.firstContext
        };
        workInProgress2.sibling = current2.sibling;
        workInProgress2.index = current2.index;
        workInProgress2.ref = current2.ref;
        {
          workInProgress2.selfBaseDuration = current2.selfBaseDuration;
          workInProgress2.treeBaseDuration = current2.treeBaseDuration;
        }
        {
          workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
              workInProgress2.type = resolveFunctionForHotReloading(current2.type);
              break;
            case ClassComponent:
              workInProgress2.type = resolveClassForHotReloading(current2.type);
              break;
            case ForwardRef:
              workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
              break;
          }
        }
        return workInProgress2;
      }
      function resetWorkInProgress(workInProgress2, renderLanes2) {
        workInProgress2.flags &= StaticMask | Placement;
        var current2 = workInProgress2.alternate;
        if (current2 === null) {
          workInProgress2.childLanes = NoLanes;
          workInProgress2.lanes = renderLanes2;
          workInProgress2.child = null;
          workInProgress2.subtreeFlags = NoFlags;
          workInProgress2.memoizedProps = null;
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.dependencies = null;
          workInProgress2.stateNode = null;
          {
            workInProgress2.selfBaseDuration = 0;
            workInProgress2.treeBaseDuration = 0;
          }
        } else {
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.subtreeFlags = NoFlags;
          workInProgress2.deletions = null;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          workInProgress2.type = current2.type;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
        }
        return workInProgress2;
      }
      function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
        var mode;
        if (tag === ConcurrentRoot) {
          mode = ConcurrentMode;
          if (isStrictMode === true) {
            mode |= StrictLegacyMode;
            {
              mode |= StrictEffectsMode;
            }
          }
        } else {
          mode = NoMode;
        }
        if (isDevToolsPresent) {
          mode |= ProfileMode;
        }
        return createFiber(HostRoot, null, null, mode);
      }
      function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
        var fiberTag = IndeterminateComponent;
        var resolvedType = type;
        if (typeof type === "function") {
          if (shouldConstruct$1(type)) {
            fiberTag = ClassComponent;
            {
              resolvedType = resolveClassForHotReloading(resolvedType);
            }
          } else {
            {
              resolvedType = resolveFunctionForHotReloading(resolvedType);
            }
          }
        } else if (typeof type === "string") {
          fiberTag = HostComponent;
        } else {
          getTag:
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);
              case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictLegacyMode;
                if ((mode & ConcurrentMode) !== NoMode) {
                  mode |= StrictEffectsMode;
                }
                break;
              case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);
              case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);
              case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
              case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
              case REACT_LEGACY_HIDDEN_TYPE:
              case REACT_SCOPE_TYPE:
              case REACT_CACHE_TYPE:
              case REACT_TRACING_MARKER_TYPE:
              case REACT_DEBUG_TRACING_MODE_TYPE:
              default: {
                if (typeof type === "object" && type !== null) {
                  switch (type.$$typeof) {
                    case REACT_PROVIDER_TYPE:
                      fiberTag = ContextProvider;
                      break getTag;
                    case REACT_CONTEXT_TYPE:
                      fiberTag = ContextConsumer;
                      break getTag;
                    case REACT_FORWARD_REF_TYPE:
                      fiberTag = ForwardRef;
                      {
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                      }
                      break getTag;
                    case REACT_MEMO_TYPE:
                      fiberTag = MemoComponent;
                      break getTag;
                    case REACT_LAZY_TYPE:
                      fiberTag = LazyComponent;
                      resolvedType = null;
                      break getTag;
                  }
                }
                var info = "";
                {
                  if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                    info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                  }
                  var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                  if (ownerName) {
                    info += "\n\nCheck the render method of `" + ownerName + "`.";
                  }
                }
                throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
              }
            }
        }
        var fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.lanes = lanes;
        {
          fiber._debugOwner = owner;
        }
        return fiber;
      }
      function createFiberFromElement(element, mode, lanes) {
        var owner = null;
        {
          owner = element._owner;
        }
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
        {
          fiber._debugSource = element._source;
          fiber._debugOwner = element._owner;
        }
        return fiber;
      }
      function createFiberFromFragment(elements, mode, lanes, key) {
        var fiber = createFiber(Fragment, elements, key, mode);
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromProfiler(pendingProps, mode, lanes, key) {
        {
          if (typeof pendingProps.id !== "string") {
            error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
          }
        }
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.lanes = lanes;
        {
          fiber.stateNode = {
            effectDuration: 0,
            passiveEffectDuration: 0
          };
        }
        return fiber;
      }
      function createFiberFromSuspense(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
        fiber.elementType = REACT_SUSPENSE_TYPE;
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
        fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
        var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
        fiber.elementType = REACT_OFFSCREEN_TYPE;
        fiber.lanes = lanes;
        var primaryChildInstance = {
          isHidden: false
        };
        fiber.stateNode = primaryChildInstance;
        return fiber;
      }
      function createFiberFromText(content, mode, lanes) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoMode);
        fiber.elementType = "DELETED";
        return fiber;
      }
      function createFiberFromDehydratedFragment(dehydratedNode) {
        var fiber = createFiber(DehydratedFragment, null, null, NoMode);
        fiber.stateNode = dehydratedNode;
        return fiber;
      }
      function createFiberFromPortal(portal, mode, lanes) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.lanes = lanes;
        fiber.stateNode = {
          containerInfo: portal.containerInfo,
          pendingChildren: null,
          implementation: portal.implementation
        };
        return fiber;
      }
      function assignFiberPropertiesInDEV(target, source) {
        if (target === null) {
          target = createFiber(IndeterminateComponent, null, null, NoMode);
        }
        target.tag = source.tag;
        target.key = source.key;
        target.elementType = source.elementType;
        target.type = source.type;
        target.stateNode = source.stateNode;
        target.return = source.return;
        target.child = source.child;
        target.sibling = source.sibling;
        target.index = source.index;
        target.ref = source.ref;
        target.pendingProps = source.pendingProps;
        target.memoizedProps = source.memoizedProps;
        target.updateQueue = source.updateQueue;
        target.memoizedState = source.memoizedState;
        target.dependencies = source.dependencies;
        target.mode = source.mode;
        target.flags = source.flags;
        target.subtreeFlags = source.subtreeFlags;
        target.deletions = source.deletions;
        target.lanes = source.lanes;
        target.childLanes = source.childLanes;
        target.alternate = source.alternate;
        {
          target.actualDuration = source.actualDuration;
          target.actualStartTime = source.actualStartTime;
          target.selfBaseDuration = source.selfBaseDuration;
          target.treeBaseDuration = source.treeBaseDuration;
        }
        target._debugSource = source._debugSource;
        target._debugOwner = source._debugOwner;
        target._debugNeedsRemount = source._debugNeedsRemount;
        target._debugHookTypes = source._debugHookTypes;
        return target;
      }
      function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
        this.tag = tag;
        this.containerInfo = containerInfo;
        this.pendingChildren = null;
        this.current = null;
        this.pingCache = null;
        this.finishedWork = null;
        this.timeoutHandle = noTimeout;
        this.context = null;
        this.pendingContext = null;
        this.callbackNode = null;
        this.callbackPriority = NoLane;
        this.eventTimes = createLaneMap(NoLanes);
        this.expirationTimes = createLaneMap(NoTimestamp);
        this.pendingLanes = NoLanes;
        this.suspendedLanes = NoLanes;
        this.pingedLanes = NoLanes;
        this.expiredLanes = NoLanes;
        this.mutableReadLanes = NoLanes;
        this.finishedLanes = NoLanes;
        this.entangledLanes = NoLanes;
        this.entanglements = createLaneMap(NoLanes);
        this.identifierPrefix = identifierPrefix;
        this.onRecoverableError = onRecoverableError;
        {
          this.mutableSourceEagerHydrationData = null;
        }
        {
          this.effectDuration = 0;
          this.passiveEffectDuration = 0;
        }
        {
          this.memoizedUpdaters = new Set;
          var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
          for (var _i = 0;_i < TotalLanes; _i++) {
            pendingUpdatersLaneMap.push(new Set);
          }
        }
        {
          switch (tag) {
            case ConcurrentRoot:
              this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
              break;
            case LegacyRoot:
              this._debugRootType = hydrate2 ? "hydrate()" : "render()";
              break;
          }
        }
      }
      function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
        var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
        root2.current = uninitializedFiber;
        uninitializedFiber.stateNode = root2;
        {
          var _initialState = {
            element: initialChildren,
            isDehydrated: hydrate2,
            cache: null,
            transitions: null,
            pendingSuspenseBoundaries: null
          };
          uninitializedFiber.memoizedState = _initialState;
        }
        initializeUpdateQueue(uninitializedFiber);
        return root2;
      }
      var ReactVersion = "18.2.0";
      function createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        {
          checkKeyStringCoercion(key);
        }
        return {
          $$typeof: REACT_PORTAL_TYPE,
          key: key == null ? null : "" + key,
          children,
          containerInfo,
          implementation
        };
      }
      var didWarnAboutNestedUpdates;
      var didWarnAboutFindNodeInStrictMode;
      {
        didWarnAboutNestedUpdates = false;
        didWarnAboutFindNodeInStrictMode = {};
      }
      function getContextForSubtree(parentComponent) {
        if (!parentComponent) {
          return emptyContextObject;
        }
        var fiber = get(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
          var Component2 = fiber.type;
          if (isContextProvider(Component2)) {
            return processChildContext(fiber, Component2, parentContext);
          }
        }
        return parentContext;
      }
      function findHostInstanceWithWarning(component, methodName) {
        {
          var fiber = get(component);
          if (fiber === undefined) {
            if (typeof component.render === "function") {
              throw new Error("Unable to find node on an unmounted component.");
            } else {
              var keys = Object.keys(component).join(",");
              throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
            }
          }
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          if (hostFiber.mode & StrictLegacyMode) {
            var componentName = getComponentNameFromFiber(fiber) || "Component";
            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
              didWarnAboutFindNodeInStrictMode[componentName] = true;
              var previousFiber = current;
              try {
                setCurrentFiber(hostFiber);
                if (fiber.mode & StrictLegacyMode) {
                  error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                } else {
                  error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                }
              } finally {
                if (previousFiber) {
                  setCurrentFiber(previousFiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          return hostFiber.stateNode;
        }
      }
      function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate2 = false;
        var initialChildren = null;
        return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
      }
      function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate2 = true;
        var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        root2.context = getContextForSubtree(null);
        var current2 = root2.current;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(current2);
        var update = createUpdate(eventTime, lane);
        update.callback = callback !== undefined && callback !== null ? callback : null;
        enqueueUpdate(current2, update, lane);
        scheduleInitialHydrationOnRoot(root2, lane, eventTime);
        return root2;
      }
      function updateContainer(element, container, parentComponent, callback) {
        {
          onScheduleRoot(container, element);
        }
        var current$1 = container.current;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(current$1);
        {
          markRenderScheduled(lane);
        }
        var context = getContextForSubtree(parentComponent);
        if (container.context === null) {
          container.context = context;
        } else {
          container.pendingContext = context;
        }
        {
          if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
          }
        }
        var update = createUpdate(eventTime, lane);
        update.payload = {
          element
        };
        callback = callback === undefined ? null : callback;
        if (callback !== null) {
          {
            if (typeof callback !== "function") {
              error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
            }
          }
          update.callback = callback;
        }
        var root2 = enqueueUpdate(current$1, update, lane);
        if (root2 !== null) {
          scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
          entangleTransitions(root2, current$1, lane);
        }
        return lane;
      }
      function getPublicRootInstance(container) {
        var containerFiber = container.current;
        if (!containerFiber.child) {
          return null;
        }
        switch (containerFiber.child.tag) {
          case HostComponent:
            return getPublicInstance(containerFiber.child.stateNode);
          default:
            return containerFiber.child.stateNode;
        }
      }
      function attemptSynchronousHydration$1(fiber) {
        switch (fiber.tag) {
          case HostRoot: {
            var root2 = fiber.stateNode;
            if (isRootDehydrated(root2)) {
              var lanes = getHighestPriorityPendingLanes(root2);
              flushRoot(root2, lanes);
            }
            break;
          }
          case SuspenseComponent: {
            flushSync(function() {
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
              }
            });
            var retryLane = SyncLane;
            markRetryLaneIfNotHydrated(fiber, retryLane);
            break;
          }
        }
      }
      function markRetryLaneImpl(fiber, retryLane) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState !== null && suspenseState.dehydrated !== null) {
          suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
        }
      }
      function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        var alternate = fiber.alternate;
        if (alternate) {
          markRetryLaneImpl(alternate, retryLane);
        }
      }
      function attemptContinuousHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) {
          return;
        }
        var lane = SelectiveHydrationLane;
        var root2 = enqueueConcurrentRenderForLane(fiber, lane);
        if (root2 !== null) {
          var eventTime = requestEventTime();
          scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
        }
        markRetryLaneIfNotHydrated(fiber, lane);
      }
      function attemptHydrationAtCurrentPriority$1(fiber) {
        if (fiber.tag !== SuspenseComponent) {
          return;
        }
        var lane = requestUpdateLane(fiber);
        var root2 = enqueueConcurrentRenderForLane(fiber, lane);
        if (root2 !== null) {
          var eventTime = requestEventTime();
          scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
        }
        markRetryLaneIfNotHydrated(fiber, lane);
      }
      function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        if (hostFiber === null) {
          return null;
        }
        return hostFiber.stateNode;
      }
      var shouldErrorImpl = function(fiber) {
        return null;
      };
      function shouldError(fiber) {
        return shouldErrorImpl(fiber);
      }
      var shouldSuspendImpl = function(fiber) {
        return false;
      };
      function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
      }
      var overrideHookState = null;
      var overrideHookStateDeletePath = null;
      var overrideHookStateRenamePath = null;
      var overrideProps = null;
      var overridePropsDeletePath = null;
      var overridePropsRenamePath = null;
      var scheduleUpdate = null;
      var setErrorHandler = null;
      var setSuspenseHandler = null;
      {
        var copyWithDeleteImpl = function(obj, path, index2) {
          var key = path[index2];
          var updated = isArray(obj) ? obj.slice() : assign({}, obj);
          if (index2 + 1 === path.length) {
            if (isArray(updated)) {
              updated.splice(key, 1);
            } else {
              delete updated[key];
            }
            return updated;
          }
          updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
          return updated;
        };
        var copyWithDelete = function(obj, path) {
          return copyWithDeleteImpl(obj, path, 0);
        };
        var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
          var oldKey = oldPath[index2];
          var updated = isArray(obj) ? obj.slice() : assign({}, obj);
          if (index2 + 1 === oldPath.length) {
            var newKey = newPath[index2];
            updated[newKey] = updated[oldKey];
            if (isArray(updated)) {
              updated.splice(oldKey, 1);
            } else {
              delete updated[oldKey];
            }
          } else {
            updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index2 + 1);
          }
          return updated;
        };
        var copyWithRename = function(obj, oldPath, newPath) {
          if (oldPath.length !== newPath.length) {
            warn("copyWithRename() expects paths of the same length");
            return;
          } else {
            for (var i = 0;i < newPath.length - 1; i++) {
              if (oldPath[i] !== newPath[i]) {
                warn("copyWithRename() expects paths to be the same except for the deepest key");
                return;
              }
            }
          }
          return copyWithRenameImpl(obj, oldPath, newPath, 0);
        };
        var copyWithSetImpl = function(obj, path, index2, value) {
          if (index2 >= path.length) {
            return value;
          }
          var key = path[index2];
          var updated = isArray(obj) ? obj.slice() : assign({}, obj);
          updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
          return updated;
        };
        var copyWithSet = function(obj, path, value) {
          return copyWithSetImpl(obj, path, 0, value);
        };
        var findHook = function(fiber, id) {
          var currentHook2 = fiber.memoizedState;
          while (currentHook2 !== null && id > 0) {
            currentHook2 = currentHook2.next;
            id--;
          }
          return currentHook2;
        };
        overrideHookState = function(fiber, id, path, value) {
          var hook = findHook(fiber, id);
          if (hook !== null) {
            var newState = copyWithSet(hook.memoizedState, path, value);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
        };
        overrideHookStateDeletePath = function(fiber, id, path) {
          var hook = findHook(fiber, id);
          if (hook !== null) {
            var newState = copyWithDelete(hook.memoizedState, path);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
        };
        overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
          var hook = findHook(fiber, id);
          if (hook !== null) {
            var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
        };
        overrideProps = function(fiber, path, value) {
          fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        };
        overridePropsDeletePath = function(fiber, path) {
          fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        };
        overridePropsRenamePath = function(fiber, oldPath, newPath) {
          fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        };
        scheduleUpdate = function(fiber) {
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        };
        setErrorHandler = function(newShouldErrorImpl) {
          shouldErrorImpl = newShouldErrorImpl;
        };
        setSuspenseHandler = function(newShouldSuspendImpl) {
          shouldSuspendImpl = newShouldSuspendImpl;
        };
      }
      function findHostInstanceByFiber(fiber) {
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) {
          return null;
        }
        return hostFiber.stateNode;
      }
      function emptyFindFiberByHostInstance(instance) {
        return null;
      }
      function getCurrentFiberForDevTools() {
        return current;
      }
      function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals({
          bundleType: devToolsConfig.bundleType,
          version: devToolsConfig.version,
          rendererPackageName: devToolsConfig.rendererPackageName,
          rendererConfig: devToolsConfig.rendererConfig,
          overrideHookState,
          overrideHookStateDeletePath,
          overrideHookStateRenamePath,
          overrideProps,
          overridePropsDeletePath,
          overridePropsRenamePath,
          setErrorHandler,
          setSuspenseHandler,
          scheduleUpdate,
          currentDispatcherRef: ReactCurrentDispatcher2,
          findHostInstanceByFiber,
          findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
          findHostInstancesForRefresh,
          scheduleRefresh,
          scheduleRoot,
          setRefreshHandler,
          getCurrentFiber: getCurrentFiberForDevTools,
          reconcilerVersion: ReactVersion
        });
      }
      var defaultOnRecoverableError = typeof reportError === "function" ? reportError : function(error2) {
        console["error"](error2);
      };
      function ReactDOMRoot(internalRoot) {
        this._internalRoot = internalRoot;
      }
      ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
        var root2 = this._internalRoot;
        if (root2 === null) {
          throw new Error("Cannot update an unmounted root.");
        }
        {
          if (typeof arguments[1] === "function") {
            error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
          } else if (isValidContainer(arguments[1])) {
            error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
          } else if (typeof arguments[1] !== "undefined") {
            error("You passed a second argument to root.render(...) but it only accepts one argument.");
          }
          var container = root2.containerInfo;
          if (container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(root2.current);
            if (hostInstance) {
              if (hostInstance.parentNode !== container) {
                error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
              }
            }
          }
        }
        updateContainer(children, root2, null, null);
      };
      ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
        {
          if (typeof arguments[0] === "function") {
            error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
          }
        }
        var root2 = this._internalRoot;
        if (root2 !== null) {
          this._internalRoot = null;
          var container = root2.containerInfo;
          {
            if (isAlreadyRendering()) {
              error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
            }
          }
          flushSync(function() {
            updateContainer(null, root2, null, null);
          });
          unmarkContainerAsRoot(container);
        }
      };
      function createRoot(container, options2) {
        if (!isValidContainer(container)) {
          throw new Error("createRoot(...): Target container is not a DOM element.");
        }
        warnIfReactDOMContainerInDEV(container);
        var isStrictMode = false;
        var concurrentUpdatesByDefaultOverride = false;
        var identifierPrefix = "";
        var onRecoverableError = defaultOnRecoverableError;
        var transitionCallbacks = null;
        if (options2 !== null && options2 !== undefined) {
          {
            if (options2.hydrate) {
              warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
            } else {
              if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
              }
            }
          }
          if (options2.unstable_strictMode === true) {
            isStrictMode = true;
          }
          if (options2.identifierPrefix !== undefined) {
            identifierPrefix = options2.identifierPrefix;
          }
          if (options2.onRecoverableError !== undefined) {
            onRecoverableError = options2.onRecoverableError;
          }
          if (options2.transitionCallbacks !== undefined) {
            transitionCallbacks = options2.transitionCallbacks;
          }
        }
        var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        markContainerAsRoot(root2.current, container);
        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        listenToAllSupportedEvents(rootContainerElement);
        return new ReactDOMRoot(root2);
      }
      function ReactDOMHydrationRoot(internalRoot) {
        this._internalRoot = internalRoot;
      }
      function scheduleHydration(target) {
        if (target) {
          queueExplicitHydrationTarget(target);
        }
      }
      ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
      function hydrateRoot(container, initialChildren, options2) {
        if (!isValidContainer(container)) {
          throw new Error("hydrateRoot(...): Target container is not a DOM element.");
        }
        warnIfReactDOMContainerInDEV(container);
        {
          if (initialChildren === undefined) {
            error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
          }
        }
        var hydrationCallbacks = options2 != null ? options2 : null;
        var mutableSources = options2 != null && options2.hydratedSources || null;
        var isStrictMode = false;
        var concurrentUpdatesByDefaultOverride = false;
        var identifierPrefix = "";
        var onRecoverableError = defaultOnRecoverableError;
        if (options2 !== null && options2 !== undefined) {
          if (options2.unstable_strictMode === true) {
            isStrictMode = true;
          }
          if (options2.identifierPrefix !== undefined) {
            identifierPrefix = options2.identifierPrefix;
          }
          if (options2.onRecoverableError !== undefined) {
            onRecoverableError = options2.onRecoverableError;
          }
        }
        var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        markContainerAsRoot(root2.current, container);
        listenToAllSupportedEvents(container);
        if (mutableSources) {
          for (var i = 0;i < mutableSources.length; i++) {
            var mutableSource = mutableSources[i];
            registerMutableSourceForHydration(root2, mutableSource);
          }
        }
        return new ReactDOMHydrationRoot(root2);
      }
      function isValidContainer(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
      }
      function isValidContainerLegacy(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
      }
      function warnIfReactDOMContainerInDEV(container) {
        {
          if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
            error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
          }
          if (isContainerMarkedAsRoot(container)) {
            if (container._reactRootContainer) {
              error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
            } else {
              error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
            }
          }
        }
      }
      var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
      var topLevelUpdateWarnings;
      {
        topLevelUpdateWarnings = function(container) {
          if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
            if (hostInstance) {
              if (hostInstance.parentNode !== container) {
                error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
              }
            }
          }
          var isRootRenderedBySomeReact = !!container._reactRootContainer;
          var rootEl = getReactRootElementInContainer(container);
          var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
          if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
            error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
          }
          if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
            error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
          }
        };
      }
      function getReactRootElementInContainer(container) {
        if (!container) {
          return null;
        }
        if (container.nodeType === DOCUMENT_NODE) {
          return container.documentElement;
        } else {
          return container.firstChild;
        }
      }
      function noopOnRecoverableError() {
      }
      function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
        if (isHydrationContainer) {
          if (typeof callback === "function") {
            var originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(root2);
              originalCallback.call(instance);
            };
          }
          var root2 = createHydrationContainer(initialChildren, callback, container, LegacyRoot, null, false, false, "", noopOnRecoverableError);
          container._reactRootContainer = root2;
          markContainerAsRoot(root2.current, container);
          var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          listenToAllSupportedEvents(rootContainerElement);
          flushSync();
          return root2;
        } else {
          var rootSibling;
          while (rootSibling = container.lastChild) {
            container.removeChild(rootSibling);
          }
          if (typeof callback === "function") {
            var _originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(_root);
              _originalCallback.call(instance);
            };
          }
          var _root = createContainer(container, LegacyRoot, null, false, false, "", noopOnRecoverableError);
          container._reactRootContainer = _root;
          markContainerAsRoot(_root.current, container);
          var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          listenToAllSupportedEvents(_rootContainerElement);
          flushSync(function() {
            updateContainer(initialChildren, _root, parentComponent, callback);
          });
          return _root;
        }
      }
      function warnOnInvalidCallback$1(callback, callerName) {
        {
          if (callback !== null && typeof callback !== "function") {
            error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
          }
        }
      }
      function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
        {
          topLevelUpdateWarnings(container);
          warnOnInvalidCallback$1(callback === undefined ? null : callback, "render");
        }
        var maybeRoot = container._reactRootContainer;
        var root2;
        if (!maybeRoot) {
          root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
        } else {
          root2 = maybeRoot;
          if (typeof callback === "function") {
            var originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(root2);
              originalCallback.call(instance);
            };
          }
          updateContainer(children, root2, parentComponent, callback);
        }
        return getPublicRootInstance(root2);
      }
      function findDOMNode(componentOrElement) {
        {
          var owner = ReactCurrentOwner$3.current;
          if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            if (!warnedAboutRefsInRender) {
              error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
            }
            owner.stateNode._warnedAboutRefsInRender = true;
          }
        }
        if (componentOrElement == null) {
          return null;
        }
        if (componentOrElement.nodeType === ELEMENT_NODE) {
          return componentOrElement;
        }
        {
          return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
        }
      }
      function hydrate(element, container, callback) {
        {
          error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        }
        if (!isValidContainerLegacy(container)) {
          throw new Error("Target container is not a DOM element.");
        }
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
          if (isModernRoot) {
            error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
          }
        }
        return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
      }
      function render(element, container, callback) {
        {
          error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        }
        if (!isValidContainerLegacy(container)) {
          throw new Error("Target container is not a DOM element.");
        }
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
          if (isModernRoot) {
            error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
          }
        }
        return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
      }
      function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        {
          error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        }
        if (!isValidContainerLegacy(containerNode)) {
          throw new Error("Target container is not a DOM element.");
        }
        if (parentComponent == null || !has(parentComponent)) {
          throw new Error("parentComponent must be a valid React Component");
        }
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
      }
      function unmountComponentAtNode(container) {
        if (!isValidContainerLegacy(container)) {
          throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
        }
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
          if (isModernRoot) {
            error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
          }
        }
        if (container._reactRootContainer) {
          {
            var rootEl = getReactRootElementInContainer(container);
            var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
            if (renderedByDifferentReact) {
              error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
            }
          }
          flushSync(function() {
            legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
              container._reactRootContainer = null;
              unmarkContainerAsRoot(container);
            });
          });
          return true;
        } else {
          {
            var _rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
            var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
            if (hasNonRootReactChild) {
              error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
            }
          }
          return false;
        }
      }
      setAttemptSynchronousHydration(attemptSynchronousHydration$1);
      setAttemptContinuousHydration(attemptContinuousHydration$1);
      setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
      setGetCurrentUpdatePriority(getCurrentUpdatePriority);
      setAttemptHydrationAtPriority(runWithPriority);
      {
        if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
          error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
        }
      }
      setRestoreImplementation(restoreControlledState$3);
      setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
      function createPortal$1(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        if (!isValidContainer(container)) {
          throw new Error("Target container is not a DOM element.");
        }
        return createPortal(children, container, null, key);
      }
      function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
      }
      var Internals = {
        usingClientEntryPoint: false,
        Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
      };
      function createRoot$1(container, options2) {
        {
          if (!Internals.usingClientEntryPoint && true) {
            error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
          }
        }
        return createRoot(container, options2);
      }
      function hydrateRoot$1(container, initialChildren, options2) {
        {
          if (!Internals.usingClientEntryPoint && true) {
            error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
          }
        }
        return hydrateRoot(container, initialChildren, options2);
      }
      function flushSync$1(fn) {
        {
          if (isAlreadyRendering()) {
            error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
          }
        }
        return flushSync(fn);
      }
      var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: "react-dom"
      });
      {
        if (!foundDevTools && canUseDOM && window.top === window.self) {
          if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
            var protocol = window.location.protocol;
            if (/^(https?|file):$/.test(protocol)) {
              console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
            }
          }
        }
      }
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
      exports.createPortal = createPortal$1;
      exports.createRoot = createRoot$1;
      exports.findDOMNode = findDOMNode;
      exports.flushSync = flushSync$1;
      exports.hydrate = hydrate;
      exports.hydrateRoot = hydrateRoot$1;
      exports.render = render;
      exports.unmountComponentAtNode = unmountComponentAtNode;
      exports.unstable_batchedUpdates = batchedUpdates$1;
      exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
      exports.version = ReactVersion;
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error);
      }
    })();
  }
});
var require_react_dom = __commonJS((exports, module) => {
  var react_dom_development = __toESM(require_react_dom_development(), 1);
  if (false) {
  } else {
    module.exports = react_dom_development;
  }
});
var require_client = __commonJS((exports) => {
  var m4 = __toESM(require_react_dom(), 1);
  if (false) {
  } else {
    i = m4.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    exports.createRoot = function(c2, o2) {
      i.usingClientEntryPoint = true;
      try {
        return m4.createRoot(c2, o2);
      } finally {
        i.usingClientEntryPoint = false;
      }
    };
    exports.hydrateRoot = function(c2, h3, o2) {
      i.usingClientEntryPoint = true;
      try {
        return m4.hydrateRoot(c2, h3, o2);
      } finally {
        i.usingClientEntryPoint = false;
      }
    };
  }
  var i;
});
var require_react_jsx_dev_runtime_development = __commonJS((exports) => {
  var React = __toESM(require_react(), 1);
  if (true) {
    (function() {
      var REACT_ELEMENT_TYPE = Symbol.for("react.element");
      var REACT_PORTAL_TYPE = Symbol.for("react.portal");
      var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
      var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
      var REACT_CONTEXT_TYPE = Symbol.for("react.context");
      var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
      var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
      var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
      var REACT_MEMO_TYPE = Symbol.for("react.memo");
      var REACT_LAZY_TYPE = Symbol.for("react.lazy");
      var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function error(format) {
        {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1;_key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var enableScopeAPI = false;
      var enableCacheElement = false;
      var enableTransitionTracing = false;
      var enableLegacyHidden = false;
      var enableDebugTracing = false;
      var REACT_MODULE_REFERENCE;
      {
        REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      }
      function isValidElementType(type) {
        if (typeof type === "string" || typeof type === "function") {
          return true;
        }
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
          return true;
        }
        if (typeof type === "object" && type !== null) {
          if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
            return true;
          }
        }
        return false;
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) {
          return displayName;
        }
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === "number") {
            error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
          return type;
        }
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              if (outerName !== null) {
                return outerName;
              }
              return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch (x5) {
                return null;
              }
            }
          }
        }
        return null;
      }
      var assign = Object.assign;
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix === undefined) {
            try {
              throw Error();
            } catch (x5) {
              var match = x5.stack.trim().match(/\n( *(at )?)/);
              prefix = match && match[1] || "";
            }
          }
          return "\n" + prefix + name;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap;
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) {
          return "";
        }
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== undefined) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher.current;
          ReactCurrentDispatcher.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x5) {
                control = x5;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x5) {
                control = x5;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x5) {
              control = x5;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split("\n");
            var controlLines = control.stack.split("\n");
            var s3 = sampleLines.length - 1;
            var c2 = controlLines.length - 1;
            while (s3 >= 1 && c2 >= 0 && sampleLines[s3] !== controlLines[c2]) {
              c2--;
            }
            for (;s3 >= 1 && c2 >= 0; s3--, c2--) {
              if (sampleLines[s3] !== controlLines[c2]) {
                if (s3 !== 1 || c2 !== 1) {
                  do {
                    s3--;
                    c2--;
                    if (c2 < 0 || sampleLines[s3] !== controlLines[c2]) {
                      var _frame = "\n" + sampleLines[s3].replace(" at new ", " at ");
                      if (fn.displayName && _frame.includes("<anonymous>")) {
                        _frame = _frame.replace("<anonymous>", fn.displayName);
                      }
                      {
                        if (typeof fn === "function") {
                          componentFrameCache.set(fn, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s3 >= 1 && c2 >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        {
          if (typeof fn === "function") {
            componentFrameCache.set(fn, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn, false);
        }
      }
      function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) {
          return "";
        }
        if (typeof type === "function") {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type));
          }
        }
        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type);
        }
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch (x5) {
              }
            }
          }
        }
        return "";
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var loggedTypeFailures = {};
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes(typeSpecs, values, location, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = undefined;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }
      var isArrayImpl = Array.isArray;
      function isArray(a2) {
        return isArrayImpl(a2);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
          var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        {
          try {
            testStringCoercion(value);
            return false;
          } catch (e2) {
            return true;
          }
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
      var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      var specialPropKeyWarningShown;
      var specialPropRefWarningShown;
      var didWarnAboutStringRefs;
      {
        didWarnAboutStringRefs = {};
      }
      function hasValidRef(config) {
        {
          if (hasOwnProperty.call(config, "ref")) {
            var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.ref !== undefined;
      }
      function hasValidKey(config) {
        {
          if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.key !== undefined;
      }
      function warnIfStringRefCannotBeAutoConverted(config, self2) {
        {
          if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
              error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
              didWarnAboutStringRefs[componentName] = true;
            }
          }
        }
      }
      function defineKeyPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
              specialPropKeyWarningShown = true;
              error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
      }
      function defineRefPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
              specialPropRefWarningShown = true;
              error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
      }
      var ReactElement = function(type, key, ref, self2, source, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          _owner: owner
        };
        {
          element._store = {};
          Object.defineProperty(element._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
          });
          Object.defineProperty(element, "_self", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self2
          });
          Object.defineProperty(element, "_source", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
          });
          if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
          }
        }
        return element;
      };
      function jsxDEV(type, config, maybeKey, source, self2) {
        {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          if (maybeKey !== undefined) {
            {
              checkKeyStringCoercion(maybeKey);
            }
            key = "" + maybeKey;
          }
          if (hasValidKey(config)) {
            {
              checkKeyStringCoercion(config.key);
            }
            key = "" + config.key;
          }
          if (hasValidRef(config)) {
            ref = config.ref;
            warnIfStringRefCannotBeAutoConverted(config, self2);
          }
          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config[propName];
            }
          }
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === undefined) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          if (key || ref) {
            var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
            if (key) {
              defineKeyPropWarningGetter(props, displayName);
            }
            if (ref) {
              defineRefPropWarningGetter(props, displayName);
            }
          }
          return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
        }
      }
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement$1(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }
      var propTypesMisspellWarningShown;
      {
        propTypesMisspellWarningShown = false;
      }
      function isValidElement(object) {
        {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
      }
      function getDeclarationErrorAddendum() {
        {
          if (ReactCurrentOwner$1.current) {
            var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
      }
      function getSourceInfoErrorAddendum(source) {
        {
          if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
      }
      function validateExplicitKey(element, parentType) {
        {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
            childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
          }
          setCurrentlyValidatingElement$1(element);
          error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
          setCurrentlyValidatingElement$1(null);
        }
      }
      function validateChildKeys(node, parentType) {
        {
          if (typeof node !== "object") {
            return;
          }
          if (isArray(node)) {
            for (var i = 0;i < node.length; i++) {
              var child = node[i];
              if (isValidElement(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement(node)) {
            if (node._store) {
              node._store.validated = true;
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type === null || type === undefined || typeof type === "string") {
            return;
          }
          var propTypes;
          if (typeof type === "function") {
            propTypes = type.propTypes;
          } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
            propTypes = type.propTypes;
          } else {
            return;
          }
          if (propTypes) {
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
          } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true;
            var _name = getComponentNameFromType(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
            error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
          }
        }
      }
      function validateFragmentProps(fragment) {
        {
          var keys = Object.keys(fragment.props);
          for (var i = 0;i < keys.length; i++) {
            var key = keys[i];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
              setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error("Invalid attribute `ref` supplied to `React.Fragment`.");
            setCurrentlyValidatingElement$1(null);
          }
        }
      }
      function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
        {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendum(source);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (isArray(type)) {
              typeString = "array";
            } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
          }
          var element = jsxDEV(type, props, key, source, self2);
          if (element == null) {
            return element;
          }
          if (validType) {
            var children = props.children;
            if (children !== undefined) {
              if (isStaticChildren) {
                if (isArray(children)) {
                  for (var i = 0;i < children.length; i++) {
                    validateChildKeys(children[i], type);
                  }
                  if (Object.freeze) {
                    Object.freeze(children);
                  }
                } else {
                  error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                }
              } else {
                validateChildKeys(children, type);
              }
            }
          }
          if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
      }
      var jsxDEV$1 = jsxWithValidation;
      exports.Fragment = REACT_FRAGMENT_TYPE;
      exports.jsxDEV = jsxDEV$1;
    })();
  }
});
var require_jsx_dev_runtime = __commonJS((exports, module) => {
  var react_jsx_dev_runtime_development = __toESM(require_react_jsx_dev_runtime_development(), 1);
  if (false) {
  } else {
    module.exports = react_jsx_dev_runtime_development;
  }
});
var GL = globalThis.WebGL2RenderingContext ?? {};
var POSITION_LOC = "position";
var INDEX_LOC = "index";
var TRANSFORM_LOC = "transform";
var SLOT_SIZE_LOC = "slotSize_and_number";
var ANIM_LOC = "animation";
var INSTANCE_LOC = "instance";
var SPRITE_TYPE_LOC = "spriteType";
var CAM_POS_LOC = "camPos";
var CAM_TILT_LOC = "camTilt";
var CAM_TURN_LOC = "camTurn";
var CAM_DISTANCE_LOC = "camDist";
var CAM_PROJECTION_LOC = "projection";
var CAM_CURVATURE_LOC = "curvature";
var BG_BLUR_LOC = "bgBlur";
var BG_COLOR_LOC = "bgColor";
var MAX_TEXTURE_SIZE_LOC = "maxTextureSize";
var TEXTURE_UNIFORM_LOC = "uTextures";
var TIME_LOC = "time";
var FADE_LOC = "fade";

class Disposable {
  disposables;
  own(destroyable) {
    if (!this.disposables) {
      this.disposables = new Set;
    }
    this.disposables.add(destroyable);
    return destroyable;
  }
  disown(destroyable) {
    this.disposables?.delete(destroyable);
  }
  addOnDestroy(callback) {
    if (callback) {
      this.disposables?.add({
        destroy: callback
      });
    }
  }
  destroy() {
    this.disposables?.forEach((disposable) => disposable.destroy());
    this.disposables?.clear();
  }
}
var createProgram = function(gl, vertex, fragment) {
  function createShader(shaderSource, type) {
    function typeName(type2) {
      return type2 === gl?.VERTEX_SHADER ? "vertex" : type2 === gl?.FRAGMENT_SHADER ? "fragment" : undefined;
    }
    if (type !== gl.VERTEX_SHADER && type !== gl.FRAGMENT_SHADER) {
      throw new Error(`Shader error in ${typeName(type)}`);
    }
    const shader = gl.createShader(type);
    if (!shader) {
      throw new Error(`Unable to generate ${typeName(type)} shader.`);
    }
    gl.shaderSource(shader, shaderSource);
    gl.compileShader(shader);
    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
      console.error(`Shader compile error in ${typeName(type)}:` + gl.getShaderInfoLog(shader));
    }
    return shader;
  }
  const program = gl.createProgram();
  if (!program) {
    throw new Error(`Unable to create program.`);
  }
  const vertexShader = createShader(vertex, gl.VERTEX_SHADER);
  const fragmentShader = createShader(fragment, gl.FRAGMENT_SHADER);
  const vertexInfo = gl.getShaderInfoLog(vertexShader), fragmentInfo = gl.getShaderInfoLog(fragmentShader);
  if (vertexInfo) {
    console.log("VERTEX", vertexInfo);
  }
  if (fragmentInfo) {
    console.log("FRAGMENT", fragmentInfo);
  }
  gl.attachShader(program, vertexShader);
  gl.attachShader(program, fragmentShader);
  gl.linkProgram(program);
  const programInfo = gl.getProgramInfoLog(program);
  if (programInfo) {
    console.log("PROGRAM", programInfo);
  }
  gl.detachShader(program, vertexShader);
  gl.detachShader(program, fragmentShader);
  gl.deleteShader(vertexShader);
  gl.deleteShader(fragmentShader);
  gl.validateProgram(program);
  Object.entries(GL).forEach(([k, value]) => {
    if (value && gl.getError() === value) {
      console.log(`gl.${k}`);
    }
  });
  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
    throw new Error("Unable to initialize the shader program:\n" + gl.getProgramInfoLog(program));
  }
  return program;
};
var deleteProgram = function(gl, program) {
  gl.deleteProgram(program);
};

class GLProgram extends Disposable {
  gl;
  program;
  constructor(gl, vertex, fragment) {
    super();
    this.gl = gl;
    this.program = createProgram(gl, vertex.trim(), fragment.trim());
  }
  use() {
    this.gl.useProgram(this.program);
  }
  destroy() {
    super.destroy();
    deleteProgram(this.gl, this.program);
  }
}

class GLPrograms extends Disposable {
  gl;
  activeProgramId = "";
  programs = {};
  constructor(gl) {
    super();
    this.gl = gl;
  }
  addProgram(id, vertex, fragment) {
    if (this.programs[id]) {
      this.removeProgram(id);
    }
    this.programs[id] = this.own(new GLProgram(this.gl, vertex, fragment));
  }
  useProgram(id) {
    if (this.activeProgramId !== id) {
      this.activeProgramId = id;
      this.programs[id].use();
    }
  }
  removeProgram(id) {
    this.programs[id].destroy();
    delete this.programs[id];
  }
  getProgram(id) {
    return this.programs[id ?? this.activeProgramId]?.program;
  }
}

class VertexArray {
  gl;
  triangleArray;
  constructor(gl) {
    this.gl = gl;
    this.triangleArray = this.gl.createVertexArray();
  }
  bind() {
    this.gl.bindVertexArray(this.triangleArray);
  }
  destroy() {
    this.gl.deleteVertexArray(this.triangleArray);
    this.triangleArray = null;
  }
}

class GLAttributeBuffers {
  gl;
  programs;
  bufferRecord = {};
  vertexArray;
  copyBuffer = null;
  constructor(gl, programs) {
    this.gl = gl;
    this.programs = programs;
    this.vertexArray = new VertexArray(this.gl);
  }
  bindVertexArray() {
    this.vertexArray.bind();
  }
  getAttributeLocation(name, programId) {
    const program = this.programs.getProgram(programId);
    return program ? this.gl.getAttribLocation(program, name) ?? -1 : -1;
  }
  hasBuffer(location) {
    return !!this.bufferRecord[location];
  }
  enableVertexAttribArray(location, index = 0) {
    const bufferInfo = this.bufferRecord[location];
    if (!bufferInfo.enabledVertexAttribArray[index]) {
      bufferInfo.enabledVertexAttribArray[index] = true;
      this.gl.enableVertexAttribArray(bufferInfo.location + index);
    }
  }
  disableVertexAttribArray(location) {
    const bufferInfo = this.bufferRecord[location];
    bufferInfo.enabledVertexAttribArray.forEach((enabled, index) => {
      if (enabled) {
        this.gl.disableVertexAttribArray(bufferInfo.location + index);
        bufferInfo.enabledVertexAttribArray[index] = false;
      }
    });
  }
  createBuffer({ location, target, usage, vertexAttribPointerRows, elemCount = 0, divisor = 0, callback, instanceCount = 1, data }) {
    this.deleteBuffer(location);
    const bufferBuffer = this.gl.createBuffer();
    if (!bufferBuffer) {
      throw new Error(`Unable to create buffer "${location}"`);
    }
    const bytesPerRow = elemCount * Float32Array.BYTES_PER_ELEMENT;
    const bytesPerInstance = vertexAttribPointerRows * bytesPerRow;
    const bufferInfo = this.bufferRecord[location] = {
      location: this.getAttributeLocation(location),
      target,
      usage,
      buffer: bufferBuffer,
      enabledVertexAttribArray: [],
      bytesPerInstance,
      instanceCount,
      callback
    };
    this.vertexArray.bind();
    this.gl.bindBuffer(bufferInfo.target, bufferInfo.buffer);
    for (let row = 0;row < vertexAttribPointerRows; row++) {
      const loc = bufferInfo.location + row;
      this.gl.vertexAttribPointer(loc, elemCount, GL.FLOAT, false, bytesPerInstance, row * bytesPerRow);
      this.enableVertexAttribArray(location, row);
      this.gl.vertexAttribDivisor(loc, divisor);
    }
    if (data) {
      this.gl.bufferData(target, data, bufferInfo.usage);
    } else if (callback) {
      this.gl.bufferData(target, Float32Array.from(new Array(instanceCount).fill(0).map((_, index) => callback(index))), bufferInfo.usage);
    } else if (instanceCount) {
      this.gl.bufferData(target, instanceCount * bytesPerInstance, bufferInfo.usage);
    }
    return bufferInfo;
  }
  ensureCopyBufferSize(newCount, bufferInfo) {
    this.vertexArray.bind();
    if (this.copyBuffer) {
      const bufferSize = this.gl.getBufferParameter(GL.ARRAY_BUFFER, GL.BUFFER_SIZE);
      if (bufferSize >= newCount * bufferInfo.bytesPerInstance) {
        this.gl.bindBuffer(GL.ARRAY_BUFFER, this.copyBuffer);
        return;
      }
      this.gl.deleteBuffer(this.copyBuffer);
    }
    this.copyBuffer = this.gl.createBuffer();
    this.gl.bindBuffer(GL.ARRAY_BUFFER, this.copyBuffer);
    this.gl.bufferData(GL.ARRAY_BUFFER, newCount * bufferInfo.bytesPerInstance, GL.DYNAMIC_COPY);
  }
  ensureSize(location, newCount) {
    const bufferInfo = this.bufferRecord[location];
    if (bufferInfo && bufferInfo.instanceCount < newCount) {
      this.bindBuffer(location);
      const bufferSize = this.gl.getBufferParameter(GL.ARRAY_BUFFER, GL.BUFFER_SIZE);
      const oldBufferData = new Float32Array(bufferSize / Float32Array.BYTES_PER_ELEMENT);
      this.gl.getBufferSubData(GL.ARRAY_BUFFER, 0, oldBufferData);
      this.bindBuffer(location);
      if (bufferInfo.callback) {
        const callback = bufferInfo.callback;
        this.gl.bufferData(bufferInfo.target, Float32Array.from(new Array(newCount).fill(0).map((_, index) => callback(index))), bufferInfo.usage);
      } else if (newCount) {
        this.gl.bufferData(bufferInfo.target, newCount * bufferInfo.bytesPerInstance, bufferInfo.usage);
      }
      this.gl.bufferSubData(bufferInfo.target, 0, oldBufferData);
      bufferInfo.instanceCount = newCount;
    }
  }
  bindBuffer(location) {
    const bufferInfo = this.bufferRecord[location];
    if (bufferInfo) {
      this.vertexArray.bind();
      this.gl.bindBuffer(bufferInfo.target, bufferInfo.buffer);
    }
  }
  deleteBuffer(location) {
    const bufferInfo = this.bufferRecord[location];
    if (bufferInfo) {
      this.disableVertexAttribArray(location);
      this.gl.deleteBuffer(bufferInfo.buffer);
      delete this.bufferRecord[location];
    }
  }
  getAttributeBuffer(location) {
    const bufferInfo = this.bufferRecord[location];
    if (!bufferInfo) {
      throw new Error(`Attribute "${location}" not created. Make sure "createBuffer" is called.`);
    }
    return bufferInfo;
  }
  clear() {
    Object.keys(this.bufferRecord).forEach((location) => this.deleteBuffer(location));
  }
  destroy() {
    this.clear();
  }
}
var vertexShader_default = "#version 300 es\n//  ~{AUTHOR}\n\nprecision highp float;\n\n//  FUNCTIONS\nfloat rand(vec2 co) {\n  return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n//  CONST\nconst mat4 identity = mat4(1.0);\nconst float SPRITE = 1.0;\nconst float HUD = 2.0;\nconst float DISTANT = 3.0;\nconst float WAVE = 4.0;\n\n//  IN\n//  shape\nlayout(location = 0) in vec2 position;\nlayout(location = 1) in mat4 transform;\n//  1, 2, 3, 4 reserved for transform\n//  animation\nlayout(location = 5) in vec4 slotSize_and_number;\nlayout(location = 6) in vec4 animation;\n//  instance\nlayout(location = 7) in float instance;\nlayout(location = 8) in float spriteType;\n\n//  UNIFORM\nuniform float maxTextureSize;\nuniform mat4 camPos;\nuniform mat4 camTurn;\nuniform mat4 camTilt;\nuniform float camDist;\nuniform mat4 projection;\nuniform float curvature;\nuniform float time;\n\n//  OUT\nout float vTextureIndex;\nout vec2 vTex;\nout float dist;\nout vec3 vInstanceColor;\nout vec2 var;\nout vec3 vNormal;\n\nvoid main() {\n  vec2 slotSize = vec2(pow(2.0, floor(slotSize_and_number.x / 16.0)),\n                       pow(2.0, mod(slotSize_and_number.x, 16.0)));\n  float slotNumber = slotSize_and_number.y;\n  vec2 spriteSize = abs(slotSize_and_number.zw);\n  vec2 tex = (position.xy) * vec2(0.49, -0.49) * sign(slotSize_and_number.zw) +\n             0.5; //  Texture corners 0..1\n  float sheetCols = ceil(1. / spriteSize[0]);\n  float frameStart = animation[0];\n  float frameEnd = animation[1];\n  float fps = animation[2];\n  float maxFrameCount = animation[3];\n  float frameOffset =\n      floor(mod(min(time * fps / 1000., maxFrameCount), frameEnd + 1.));\n  float frame = frameStart + frameOffset;\n  tex += vec2(1., 0) * mod(frame, sheetCols) +\n         vec2(0, 1.) * floor(frame / sheetCols);\n  tex *= spriteSize;\n\n  float maxCols = maxTextureSize / slotSize.x;\n  float maxRows = maxTextureSize / slotSize.y;\n  float slotX = mod(slotNumber, maxCols);\n  float slotY = mod(floor(slotNumber / maxCols), maxRows);\n\n  vec4 basePosition = vec4(position, 0.0, 1.0);\n\n  float isHud = max(0., 1. - 2. * abs(spriteType - HUD));\n  float isSprite = max(0., 1. - 2. * abs(spriteType - SPRITE));\n  float isDistant = max(0., 1. - 2. * abs(spriteType - DISTANT));\n  float isWave = max(0., 1. - 2. * abs(spriteType - WAVE));\n\n  mat4 billboardMatrix = inverse(camTilt * camTurn);\n  float isBillboard = max(isDistant, isSprite);\n  basePosition =\n      (isBillboard * billboardMatrix + (1. - isBillboard) * identity) *\n      basePosition;\n\n  vec4 worldPosition = transform * basePosition;\n  var = vec2(rand(worldPosition.xz), rand(worldPosition.xz - worldPosition.yx));\n\n  float noise = rand(worldPosition.xz) * 13.;\n  worldPosition.y += isWave * sin(noise + time / 1000.);\n\n  vNormal.y = 1.5 + isWave * sin(noise + 1333. + time / 777.);\n  vNormal.x = isWave * sin(noise + time / 1000.);\n  vNormal.z = isWave * cos(noise + time / 1001.);\n\n  // worldPosition => relativePositio\n  vec4 relativePosition = camTilt * camTurn * camPos * worldPosition;\n\n  float actualCurvature = curvature * (1. - isDistant);\n  relativePosition.y -= actualCurvature *\n                        ((relativePosition.z * relativePosition.z) +\n                         (relativePosition.x * relativePosition.x) / 4.) /\n                        10.;\n  relativePosition.x /= (1. + actualCurvature * 1.4);\n\n  relativePosition.z -= camDist;\n\n  dist = max(isDistant, isHud) + (1. - max(isDistant, isHud)) *\n                                     (relativePosition.z * relativePosition.z +\n                                      relativePosition.x * relativePosition.x);\n  // relativePosition => gl_Position\n  relativePosition = isHud * worldPosition + (1. - isHud) * relativePosition;\n  gl_Position = projection * relativePosition;\n\n  vTex = (vec2(slotX, slotY) + tex) * slotSize / maxTextureSize;\n  vTextureIndex = floor(slotNumber / (maxCols * maxRows));\n\n  //  instance\n  float r = fract(instance / (256.0 * 256.0 * 255.0));\n  float g = fract(instance / (256.0 * 255.0));\n  float b = fract(instance / 255.0);\n  vInstanceColor = vec3(r, g, b);\n}\n";
var fragmentShader_default = "#version 300 es\n//  ~{AUTHOR}\n\nprecision highp float;\n\n//  CONST\nconst int NUM_TEXTURES = 16;\nconst float threshold = 0.00001;\n\n//  IN\n//  texture\nin float vTextureIndex;\nin vec2 vTex;\nin float dist;\nin vec3 vInstanceColor;\nin vec2 var;\nin vec3 vNormal;\n\n//  OUT\nout vec4 fragColor;\n\n// UNIFORMS\nuniform sampler2D uTextures[NUM_TEXTURES];\nuniform vec3 bgColor;\nuniform float bgBlur;\nuniform float time;\nuniform float fade;\n\n//  FUNCTIONS\nvec4 getTextureColor(float textureSlot, vec2 vTexturePoint);\n\nfloat rand(vec2 co) {\n  return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nstruct DirectionalLight {\n  vec3 direction;\n  vec3 ambient;\n  vec3 diffuse;\n  vec3 specular;\n};\n\n// Function to calculate combined color with directional light\nvec3 calculateDirectionalLight(DirectionalLight dirLight, vec3 existingColor,\n                               vec3 normal) {\n  // Calculate diffuse reflection\n  float diff = max(dot(normal, -dirLight.direction), 0.0);\n  vec3 diffuse = dirLight.diffuse * diff;\n\n  // Combine existing color with diffuse reflection\n  return existingColor * (dirLight.ambient + diffuse);\n}\n\nvoid main() {\n  vec2 vFragment = vTex;\n  float blur = bgBlur * pow(dist, .7) / 20000.;\n  vec4 color = getTextureColor(vTextureIndex, vTex);\n  if (color.a < rand(vTex)) {\n    discard;\n  };\n  int blurPass = 8;\n  vec2 vecSeed = vTex * mod(time, 7.);\n  for (int i = 0; i < blurPass; i++) {\n    vFragment = vTex + blur * (rand(vecSeed + dist * float(i) - .5));\n    color += getTextureColor(vTextureIndex, vFragment);\n  }\n  color /= float(blurPass + 1);\n\n  float colorFactor = 1.25 * pow(dist, -.12) * (1. - fade);\n  color.rg += var.x * .02;\n  color.gb += var.y * .03;\n  color.rgb = color.rgb * colorFactor + bgColor * (1. - colorFactor);\n\n  color.rgb += vInstanceColor / 10.;\n\n  // Hardcoded DirectionalLight\n  DirectionalLight dirLight;\n  dirLight.direction = normalize(vec3(-1.0, -1.0, -1.0)); // Example direction\n  dirLight.ambient = vec3(0.1, 0.1, 0.1);       // Example ambient color\n  dirLight.diffuse = vec3(1.0, 1.0, 1.0) * 1.5; // More intense diffuse color\n  dirLight.specular = vec3(1.0, 1.0, 1.0);      // Example specular color\n\n  color.rgb = calculateDirectionalLight(dirLight, color.rgb, vNormal);\n\n  fragColor = vec4(color.rgb, 1.);\n}\n\nvec4 getTextureColor(float textureSlot, vec2 vTexturePoint) {\n  if (abs(0.0 - textureSlot) < threshold) {\n    return texture(uTextures[0], vTexturePoint);\n  }\n  if (abs(1.0 - textureSlot) < threshold) {\n    return texture(uTextures[1], vTexturePoint);\n  }\n  if (abs(2.0 - textureSlot) < threshold) {\n    return texture(uTextures[2], vTexturePoint);\n  }\n  if (abs(3.0 - textureSlot) < threshold) {\n    return texture(uTextures[3], vTexturePoint);\n  }\n  if (abs(4.0 - textureSlot) < threshold) {\n    return texture(uTextures[4], vTexturePoint);\n  }\n  if (abs(5.0 - textureSlot) < threshold) {\n    return texture(uTextures[5], vTexturePoint);\n  }\n  if (abs(6.0 - textureSlot) < threshold) {\n    return texture(uTextures[6], vTexturePoint);\n  }\n  if (abs(7.0 - textureSlot) < threshold) {\n    return texture(uTextures[7], vTexturePoint);\n  }\n  if (abs(8.0 - textureSlot) < threshold) {\n    return texture(uTextures[8], vTexturePoint);\n  }\n  if (abs(9.0 - textureSlot) < threshold) {\n    return texture(uTextures[9], vTexturePoint);\n  }\n  if (abs(10.0 - textureSlot) < threshold) {\n    return texture(uTextures[10], vTexturePoint);\n  }\n  if (abs(11.0 - textureSlot) < threshold) {\n    return texture(uTextures[11], vTexturePoint);\n  }\n  if (abs(12.0 - textureSlot) < threshold) {\n    return texture(uTextures[12], vTexturePoint);\n  }\n  if (abs(13.0 - textureSlot) < threshold) {\n    return texture(uTextures[13], vTexturePoint);\n  }\n  if (abs(14.0 - textureSlot) < threshold) {\n    return texture(uTextures[14], vTexturePoint);\n  }\n  if (abs(15.0 - textureSlot) < threshold) {\n    return texture(uTextures[15], vTexturePoint);\n  }\n  return texture(uTextures[0], vTexturePoint);\n}\n";

class Z {
  z;
  b;
  k;
  y;
  width;
  height;
  isVideo;
  #z = new Set;
  constructor(z, b, k, y) {
    this.id = z;
    this.texImgSrc = b;
    this.refreshRate = k;
    this.canvasImgSrc = y;
    const N = b;
    if (this.isVideo = !!(N.videoWidth || N.videoHeight), this.width = N.naturalWidth ?? N.videoWidth ?? N.displayWidth ?? N.width?.baseValue?.value ?? N.width, this.height = N.naturalHeight ?? N.videoHeight ?? N.displayHeight ?? N.height?.baseValue?.value ?? N.height, this.canvasImgSrc = y, !this.width || !this.height)
      throw new Error("Invalid image");
  }
  refresh() {
    this.refreshCallback?.();
  }
  static createFromCanvas(z, b) {
    return new Z(z, b, undefined, b);
  }
  static async loadImage(z, b) {
    const k = await new Promise((y, N) => {
      const U = new Image;
      U.crossOrigin = "anonymous";
      const w = (j) => N(j.error);
      U.addEventListener("error", w), U.addEventListener("load", () => y(U), { once: true }), U.src = b;
    });
    return new Z(z, k, undefined, k);
  }
  static async loadVideo(z, b, k, y = 30, N = 1, U = Number.MAX_SAFE_INTEGER) {
    const w = await new Promise((P, H) => {
      const F = document.createElement("video");
      if (F.loop = true, k !== undefined)
        F.volume = k;
      F.addEventListener("loadedmetadata", () => {
        F.play(), F.playbackRate = N, P(F);
      }, { once: true }), document.addEventListener("focus", () => F.play()), F.addEventListener("error", (h) => H(h.error)), F.src = b;
    }), j = new Z(z, w, Math.min(y * N, U));
    return j.#z.add(() => w.pause()), j;
  }
  static async loadWebcam(z, b) {
    const k = await new Promise((U, w) => {
      const j = document.createElement("video");
      j.loop = true, j.addEventListener("loadedmetadata", () => j.play()), j.addEventListener("playing", () => U(j), { once: true }), j.addEventListener("error", (P) => w(P.error));
    }), y = new Z(z, k);
    let N = false;
    return navigator.mediaDevices.getUserMedia({ video: { deviceId: b } }).then((U) => {
      if (!N)
        k.srcObject = U, y.#z.add(() => U.getTracks().forEach((w) => w.stop()));
    }), y.#z.add(() => {
      N = true, k.pause();
    }), y;
  }
  dispose() {
    this.#z.forEach((z) => z()), this.#z.clear();
  }
}
var T = function(z) {
  return z;
};

class v {
  renderProcedures = { image: T((z, b) => this.loadImage(z, b.src)), video: T((z, b) => this.loadVideo(z, b.src, b.volume, b.fps, b.playSpeed)), draw: T((z, b) => this.drawImage(z, b.draw)), canvas: T((z, b) => this.loadCanvas(z, b.canvas)), webcam: T((z, b) => this.loadWebCam(z, b.deviceId)) };
  async postProcess(z, b) {
    if (z.canvasImgSrc) {
      const k = new OffscreenCanvas(z.width, z.height);
      let y = k.getContext("2d");
      if (y)
        y.drawImage(z.canvasImgSrc, 0, 0), y = await b(y) ?? y;
      const N = z.id;
      return z.dispose(), Z.createFromCanvas(N, k);
    }
    return z;
  }
  async renderMedia(z, b) {
    const k = await this.renderProcedures[b.type](z, b), { postProcess: y } = b;
    return y ? this.postProcess(k, y) : k;
  }
  async drawImage(z, b) {
    const k = new OffscreenCanvas(1, 1);
    return b(k.getContext("2d")), Z.createFromCanvas(z, k);
  }
  async loadCanvas(z, b) {
    return Z.createFromCanvas(z, b);
  }
  async loadImage(z, b) {
    return await Z.loadImage(z, b);
  }
  async loadVideo(z, b, k, y, N, U) {
    return await Z.loadVideo(z, b, k, y, N, U);
  }
  async loadWebCam(z, b) {
    return await Z.loadWebcam(z, b);
  }
}
var W = globalThis.WebGL2RenderingContext ?? {};
var n = function(z, b = (k) => k.key) {
  var k = [];
  return M(z, "", true, (y) => k.push(y), b), k.join("");
};
var L = function(z) {
  if (z === null)
    return true;
  var b = p(z.left), k = p(z.right);
  if (Math.abs(b - k) <= 1 && L(z.left) && L(z.right))
    return true;
  return false;
};
var R = function(z, b, k, y, N) {
  const U = N - y;
  if (U > 0) {
    const w = y + Math.floor(U / 2), j = b[w], P = k[w], H = { key: j, data: P, parent: z };
    return H.left = R(H, b, k, y, w), H.right = R(H, b, k, w + 1, N), H;
  }
  return null;
};
var Q = function(z) {
  if (z === null)
    return 0;
  const b = Q(z.left), k = Q(z.right);
  return z.balanceFactor = b - k, Math.max(b, k) + 1;
};
var f = function(z, b, k, y, N) {
  if (k >= y)
    return;
  const U = z[k + y >> 1];
  let w = k - 1, j = y + 1;
  while (true) {
    do
      w++;
    while (N(z[w], U) < 0);
    do
      j--;
    while (N(z[j], U) > 0);
    if (w >= j)
      break;
    let P = z[w];
    z[w] = z[j], z[j] = P, P = b[w], b[w] = b[j], b[j] = P;
  }
  f(z, b, k, j, N), f(z, b, j + 1, y, N);
};
var S = function(z, b) {
  return Math.max(b, Math.pow(2, Math.ceil(Math.log(z) / Math.log(2))));
};
var O = function(z, b, k, y) {
  if (k < 1)
    throw new Error("Invalid count");
  const N = S(z, y.min), U = S(b, y.min), w = new Map;
  let j = y.min;
  for (let P = 1;P <= k; P++) {
    j = S(N * P, y.min);
    const H = S(U * Math.ceil(k / P), y.min);
    w.set(j, H);
  }
  for (let P = j;P <= y.max; P *= 2)
    if (!w.has(P))
      w.set(P, U);
  return w;
};
var M = function(z, b, k, y, N) {
  if (z) {
    y(`${b}${k ? "\u2514\u2500\u2500 " : "\u251C\u2500\u2500 "}${N(z)}\n`);
    const U = b + (k ? "    " : "\u2502   ");
    if (z.left)
      M(z.left, U, false, y, N);
    if (z.right)
      M(z.right, U, true, y, N);
  }
};
var p = function(z) {
  return z ? 1 + Math.max(p(z.left), p(z.right)) : 0;
};
var u = function(z, b) {
  return z > b ? 1 : z < b ? -1 : 0;
};
var _ = function(z) {
  var b = z.right;
  if (z.right = b.left, b.left)
    b.left.parent = z;
  if (b.parent = z.parent, b.parent)
    if (b.parent.left === z)
      b.parent.left = b;
    else
      b.parent.right = b;
  if (z.parent = b, b.left = z, z.balanceFactor += 1, b.balanceFactor < 0)
    z.balanceFactor -= b.balanceFactor;
  if (b.balanceFactor += 1, z.balanceFactor > 0)
    b.balanceFactor += z.balanceFactor;
  return b;
};
var E = function(z) {
  var b = z.left;
  if (z.left = b.right, z.left)
    z.left.parent = z;
  if (b.parent = z.parent, b.parent)
    if (b.parent.left === z)
      b.parent.left = b;
    else
      b.parent.right = b;
  if (z.parent = b, b.right = z, z.balanceFactor -= 1, b.balanceFactor > 0)
    z.balanceFactor -= b.balanceFactor;
  if (b.balanceFactor -= 1, z.balanceFactor < 0)
    b.balanceFactor += z.balanceFactor;
  return b;
};

class X {
  constructor(z, b = false) {
    this._comparator = z || u, this._root = null, this._size = 0, this._noDuplicates = !!b;
  }
  destroy() {
    return this.clear();
  }
  clear() {
    return this._root = null, this._size = 0, this;
  }
  get size() {
    return this._size;
  }
  contains(z) {
    if (this._root) {
      var b = this._root, k = this._comparator;
      while (b) {
        var y = k(z, b.key);
        if (y === 0)
          return true;
        else if (y < 0)
          b = b.left;
        else
          b = b.right;
      }
    }
    return false;
  }
  next(z) {
    var b = z;
    if (b)
      if (b.right) {
        b = b.right;
        while (b.left)
          b = b.left;
      } else {
        b = z.parent;
        while (b && b.right === z)
          z = b, b = b.parent;
      }
    return b;
  }
  prev(z) {
    var b = z;
    if (b)
      if (b.left) {
        b = b.left;
        while (b.right)
          b = b.right;
      } else {
        b = z.parent;
        while (b && b.left === z)
          z = b, b = b.parent;
      }
    return b;
  }
  forEach(z) {
    var b = this._root, k = [], y = false, N = 0;
    while (!y)
      if (b)
        k.push(b), b = b.left;
      else if (k.length > 0)
        b = k.pop(), z(b, N++), b = b.right;
      else
        y = true;
    return this;
  }
  range(z, b, k, y) {
    const N = [], U = this._comparator;
    let w = this._root, j;
    while (N.length !== 0 || w)
      if (w)
        N.push(w), w = w.left;
      else {
        if (w = N.pop(), j = U(w.key, b), j > 0)
          break;
        else if (U(w.key, z) >= 0) {
          if (k.call(y, w))
            return this;
        }
        w = w.right;
      }
    return this;
  }
  keys() {
    var z = this._root, b = [], k = [], y = false;
    while (!y)
      if (z)
        b.push(z), z = z.left;
      else if (b.length > 0)
        z = b.pop(), k.push(z.key), z = z.right;
      else
        y = true;
    return k;
  }
  values() {
    var z = this._root, b = [], k = [], y = false;
    while (!y)
      if (z)
        b.push(z), z = z.left;
      else if (b.length > 0)
        z = b.pop(), k.push(z.data), z = z.right;
      else
        y = true;
    return k;
  }
  at(z) {
    var b = this._root, k = [], y = false, N = 0;
    while (!y)
      if (b)
        k.push(b), b = b.left;
      else if (k.length > 0) {
        if (b = k.pop(), N === z)
          return b;
        N++, b = b.right;
      } else
        y = true;
    return null;
  }
  minNode() {
    var z = this._root;
    if (!z)
      return null;
    while (z.left)
      z = z.left;
    return z;
  }
  maxNode() {
    var z = this._root;
    if (!z)
      return null;
    while (z.right)
      z = z.right;
    return z;
  }
  min() {
    var z = this._root;
    if (!z)
      return null;
    while (z.left)
      z = z.left;
    return z.key;
  }
  max() {
    var z = this._root;
    if (!z)
      return null;
    while (z.right)
      z = z.right;
    return z.key;
  }
  isEmpty() {
    return !this._root;
  }
  pop() {
    var z = this._root, b = null;
    if (z) {
      while (z.left)
        z = z.left;
      b = { key: z.key, data: z.data }, this.remove(z.key);
    }
    return b;
  }
  popMax() {
    var z = this._root, b = null;
    if (z) {
      while (z.right)
        z = z.right;
      b = { key: z.key, data: z.data }, this.remove(z.key);
    }
    return b;
  }
  find(z) {
    var b = this._root, k = b, y, N = this._comparator;
    while (k)
      if (y = N(z, k.key), y === 0)
        return k;
      else if (y < 0)
        k = k.left;
      else
        k = k.right;
    return null;
  }
  insert(z, b) {
    if (!this._root)
      return this._root = { parent: null, left: null, right: null, balanceFactor: 0, key: z, data: b }, this._size++, this._root;
    var k = this._comparator, y = this._root, N = null, U = 0;
    if (this._noDuplicates)
      while (y)
        if (U = k(z, y.key), N = y, U === 0)
          return null;
        else if (U < 0)
          y = y.left;
        else
          y = y.right;
    else
      while (y)
        if (U = k(z, y.key), N = y, U <= 0)
          y = y.left;
        else
          y = y.right;
    var w = { left: null, right: null, balanceFactor: 0, parent: N, key: z, data: b }, j;
    if (U <= 0)
      N.left = w;
    else
      N.right = w;
    while (N) {
      if (U = k(N.key, z), U < 0)
        N.balanceFactor -= 1;
      else
        N.balanceFactor += 1;
      if (N.balanceFactor === 0)
        break;
      else if (N.balanceFactor < -1) {
        if (N.right.balanceFactor === 1)
          E(N.right);
        if (j = _(N), N === this._root)
          this._root = j;
        break;
      } else if (N.balanceFactor > 1) {
        if (N.left.balanceFactor === -1)
          _(N.left);
        if (j = E(N), N === this._root)
          this._root = j;
        break;
      }
      N = N.parent;
    }
    return this._size++, w;
  }
  remove(z) {
    if (!this._root)
      return null;
    var b = this._root, k = this._comparator, y = 0;
    while (b)
      if (y = k(z, b.key), y === 0)
        break;
      else if (y < 0)
        b = b.left;
      else
        b = b.right;
    if (!b)
      return null;
    var N = b.key, U, w;
    if (b.left) {
      U = b.left;
      while (U.left || U.right) {
        while (U.right)
          U = U.right;
        if (b.key = U.key, b.data = U.data, U.left)
          b = U, U = U.left;
      }
      b.key = U.key, b.data = U.data, b = U;
    }
    if (b.right) {
      w = b.right;
      while (w.left || w.right) {
        while (w.left)
          w = w.left;
        if (b.key = w.key, b.data = w.data, w.right)
          b = w, w = w.right;
      }
      b.key = w.key, b.data = w.data, b = w;
    }
    var j = b.parent, P = b, H;
    while (j) {
      if (j.left === P)
        j.balanceFactor -= 1;
      else
        j.balanceFactor += 1;
      if (j.balanceFactor < -1) {
        if (j.right.balanceFactor === 1)
          E(j.right);
        if (H = _(j), j === this._root)
          this._root = H;
        j = H;
      } else if (j.balanceFactor > 1) {
        if (j.left.balanceFactor === -1)
          _(j.left);
        if (H = E(j), j === this._root)
          this._root = H;
        j = H;
      }
      if (j.balanceFactor === -1 || j.balanceFactor === 1)
        break;
      P = j, j = j.parent;
    }
    if (b.parent)
      if (b.parent.left === b)
        b.parent.left = null;
      else
        b.parent.right = null;
    if (b === this._root)
      this._root = null;
    return this._size--, N;
  }
  load(z = [], b = [], k) {
    if (this._size !== 0)
      throw new Error("bulk-load: tree is not empty");
    const y = z.length;
    if (k)
      f(z, b, 0, y - 1, this._comparator);
    return this._root = R(null, z, b, 0, y), Q(this._root), this._size = y, this;
  }
  isBalanced() {
    return L(this._root);
  }
  toString(z) {
    return n(this._root, z);
  }
}
X.default = X;

class A {
  size;
  slotNumber;
  x;
  y;
  textureIndex;
  parent;
  sibbling;
  textureSizeLimits;
  constructor(z, b, k, y) {
    this.textureSizeLimits = k?.textureSizeLimits ?? y ?? { min: C, max: D }, this.size = z, this.slotNumber = b, this.parent = k, this.sibbling = undefined;
    const { x: N, y: U, textureIndex: w } = this.calculatePosition(z, b);
    this.x = N, this.y = U, this.textureIndex = w;
  }
  calculateTextureIndex(z, b) {
    const [k, y] = z, N = this.textureSizeLimits.max / k * (this.textureSizeLimits.max / y);
    return Math.floor(b / N);
  }
  calculatePosition(z, b) {
    const [k, y] = z, N = this.textureSizeLimits.max / k, U = this.textureSizeLimits.max / y, w = b % N * k, j = Math.floor(b / N) % U * y;
    return { x: w, y: j, textureIndex: this.calculateTextureIndex(z, b) };
  }
  getTag() {
    return A.getTag(this);
  }
  static getTag(z) {
    return `${z.size[0]}x${z.size[1]}-#${z.slotNumber}`;
  }
  static positionToTextureSlot(z, b, k, y, N) {
    const [U, w] = k, j = N.textureSizeLimits.max / U, P = N.textureSizeLimits.max / U * (N.textureSizeLimits.max / w) * y + b / w * j + z / U;
    return new A(k, P, N);
  }
  getPosition() {
    return { x: this.x, y: this.y, size: this.size, textureIndex: this.textureIndex };
  }
  canSplitHorizontally() {
    const [, z] = this.size;
    return z > this.textureSizeLimits.min;
  }
  canSplitVertically() {
    const [z] = this.size;
    return z > this.textureSizeLimits.min;
  }
  splitHorizontally() {
    const { x: z, y: b, size: k, textureIndex: y } = this, [N, U] = k;
    if (!this.canSplitHorizontally())
      throw new Error(`Cannot split texture slot of size ${N} horizontally`);
    const w = N / 2, j = A.positionToTextureSlot(z, b, [w, U], y, this), P = A.positionToTextureSlot(z + w, b, [w, U], y, this);
    return j.sibbling = P, P.sibbling = j, [j, P];
  }
  splitVertically() {
    const { x: z, y: b, size: k, textureIndex: y } = this, [N, U] = k;
    if (!this.canSplitVertically())
      throw new Error(`Cannot split texture slot of size ${U} vertically`);
    const w = U / 2, j = A.positionToTextureSlot(z, b, [N, w], y, this), P = A.positionToTextureSlot(z, b + w, [N, w], y, this);
    return j.sibbling = P, P.sibbling = j, [j, P];
  }
}
var x = false;
var C = 16;
var D = 4096;
var g = 16;

class B {
  textureSlots = new X((z, b) => {
    const k = z.size[0] * z.size[1] - b.size[0] * b.size[1];
    if (k !== 0)
      return k;
    return z.slotNumber - b.slotNumber;
  }, false);
  allocatedTextures = {};
  minTextureSize;
  maxTextureSize;
  numTextureSheets;
  initialSlots = [];
  constructor({ numTextureSheets: z, minTextureSize: b, maxTextureSize: k, excludeTexture: y } = {}, N) {
    if (this.numTextureSheets = z ?? g, this.minTextureSize = b ?? C, this.maxTextureSize = k ?? D, N)
      this.numTextureSheets = Math.min(this.numTextureSheets, N.getParameter(WebGL2RenderingContext.MAX_TEXTURE_IMAGE_UNITS)), this.maxTextureSize = Math.min(this.maxTextureSize, N.getParameter(WebGL2RenderingContext.MAX_TEXTURE_SIZE)), this.minTextureSize = Math.min(this.minTextureSize, this.maxTextureSize);
    for (let U = 0;U < this.numTextureSheets; U++) {
      if (y?.(U))
        continue;
      this.initialSlots.push(new A([this.maxTextureSize, this.maxTextureSize], U, undefined, { min: this.minTextureSize, max: this.maxTextureSize }));
    }
    this.initialSlots.forEach((U) => this.textureSlots.insert(U));
  }
  allocate(z, b, k = 1) {
    const { size: y, slotNumber: N, x: U, y: w, textureIndex: j } = this.allocateHelper(z, b, k);
    return { size: y, slotNumber: N, x: U, y: w, textureIndex: j };
  }
  deallocate(z) {
    if (!this.isSlotUsed(z))
      throw new Error("Slot is not allocated");
    const b = this.allocatedTextures[A.getTag(z)];
    this.deallocateHelper(b);
  }
  get countUsedTextureSheets() {
    return this.initialSlots.filter((z) => this.isSlotUsed(z)).length;
  }
  allocateHelper(z, b, k = 1) {
    const y = O(z, b, k, { min: this.minTextureSize, max: this.maxTextureSize }), N = this.findSlot(y);
    if (!N)
      throw new Error(`Could not find a slot for texture to fit ${k} sprites of size ${z}x${b}`);
    this.textureSlots.remove(N);
    const [U, w] = this.bestFit(y, N);
    return this.fitSlot(N, U, w);
  }
  findSlot(z) {
    for (let b = 0;b < this.textureSlots.size; b++) {
      const k = this.textureSlots.at(b).key, [y, N] = k.size;
      if (z.get(y) <= N)
        return k;
    }
    return null;
  }
  calculateRatio(z, b) {
    return Math.max(z / b, b / z);
  }
  bestFit(z, b) {
    const [k, y] = b.size;
    let N = b.textureSizeLimits.max;
    return z.forEach((U, w) => {
      if (w <= k && U <= y) {
        const j = w * U, P = z.get(N) * N;
        if (j < P)
          N = w;
        else if (j === P) {
          if (this.calculateRatio(w, U) < this.calculateRatio(N, z.get(N)))
            N = w;
        }
      }
    }), [N, z.get(N)];
  }
  isSlotUsed(z) {
    return !!this.allocatedTextures[A.getTag(z)];
  }
  deallocateHelper(z) {
    if (z.parent && z.sibbling && !this.isSlotUsed(z.sibbling)) {
      const b = z.sibbling;
      if (this.textureSlots.remove(b), x && this.textureSlots.find(z))
        throw new Error("Slot is not expected to be in the tree");
      const k = z.parent;
      this.deallocateHelper(k);
      return;
    }
    this.textureSlots.insert(z), delete this.allocatedTextures[z.getTag()];
  }
  trySplitHorizontally(z, b, k) {
    if (z.canSplitHorizontally()) {
      const [y, N] = z.splitHorizontally();
      if (y.size[0] >= b)
        return this.textureSlots.insert(N), this.fitSlot(y, b, k);
    }
    return null;
  }
  trySplitVertically(z, b, k) {
    if (z.canSplitVertically()) {
      const [y, N] = z.splitVertically();
      if (y.size[1] >= k)
        return this.textureSlots.insert(N), this.fitSlot(y, b, k);
    }
    return null;
  }
  fitSlot(z, b, k) {
    if (this.allocatedTextures[z.getTag()] = z, z.size[0] > z.size[1]) {
      const y = this.trySplitHorizontally(z, b, k) ?? this.trySplitVertically(z, b, k);
      if (y)
        return y;
    } else {
      const y = this.trySplitVertically(z, b, k) ?? this.trySplitHorizontally(z, b, k);
      if (y)
        return y;
    }
    return z;
  }
}
var V = 15;
var $ = `TEXTURE${V}`;

class l {
  gl;
  texturesById = {};
  #z = new OffscreenCanvas(1, 1).getContext("2d");
  #b = new B({ excludeTexture: (z) => z === V });
  #k = new B({ excludeTexture: (z) => z !== V });
  #y = new Set;
  constructor({ gl: z, textureSlotAllocator: b = new B({ excludeTexture: (y) => y === V }), textureSlotAllocatorForVideo: k = new B({ excludeTexture: (y) => y !== V }) }) {
    this.gl = z, this.#b = b, this.#k = k, this.#z.imageSmoothingEnabled = true;
  }
  getTexture(z) {
    if (!this.texturesById[z]) {
      const b = this.gl.createTexture();
      if (!b)
        return;
      const k = z === $ ? this.#k : this.#b;
      this.texturesById[z] = b, this.gl.bindTexture(W.TEXTURE_2D, b), this.gl.texImage2D(W.TEXTURE_2D, 0, W.RGBA, k.maxTextureSize, k.maxTextureSize, 0, W.RGBA, W.UNSIGNED_BYTE, null), this.generateMipMap(z);
    }
    return this.texturesById[z];
  }
  loadTexture(z, b, k, y, N) {
    this.gl.activeTexture(W[b]), this.gl.bindTexture(W.TEXTURE_2D, k), this.applyTexImage2d(z, y, N), this.gl.texParameteri(W.TEXTURE_2D, W.TEXTURE_MIN_FILTER, W.LINEAR);
  }
  applyTexImage2d(z, [b, k, y, N], [U, w, j, P]) {
    if (y === j && N === P && !b && !k)
      this.gl.texSubImage2D(W.TEXTURE_2D, 0, U, w, j, P, W.RGBA, W.UNSIGNED_BYTE, z.texImgSrc);
    else {
      const H = this.#z.canvas;
      if (z.texImgSrc instanceof ImageData) {
        if (H.width = j || z.width, H.height = P || z.height, this.#z.putImageData(z.texImgSrc, 0, 0), b || k)
          console.warn("Offset not available when sending imageData");
      } else {
        const F = y || z.width, h = N || z.height;
        H.width = j || F, H.height = P || h, this.#z.drawImage(z.texImgSrc, b, k, F, h, 0, 0, H.width, H.height);
      }
      this.gl.texSubImage2D(W.TEXTURE_2D, 0, U, w, H.width, H.height, W.RGBA, W.UNSIGNED_BYTE, H);
    }
  }
  allocateSlotForImage(z) {
    const k = (z.isVideo ? this.#k : this.#b).allocate(z.width, z.height), y = `TEXTURE${k.textureIndex}`, N = this.getTexture(y);
    if (!N)
      throw new Error(`Invalid texture Id ${y}`);
    const U = this.assignImageToTexture(z, y, N, [0, 0, z.width, z.height], [k.x, k.y, k.size[0], k.size[1]]);
    return { slot: k, refreshCallback: U };
  }
  assignImageToTexture(z, b, k, y, N) {
    const U = y ?? [0, 0, z.width, z.height], w = N ?? [0, 0, U[2], U[3]], j = () => {
      this.gl.bindTexture(W.TEXTURE_2D, k), this.applyTexImage2d(z, U, w);
    };
    if (this.#y.has(z))
      j();
    else
      this.loadTexture(z, b, k, U, w), this.#y.add(z);
    return j;
  }
  setupTextureForVideo(z) {
    const b = this.getTexture(z);
    if (b)
      this.gl.activeTexture(W[z]), this.gl.bindTexture(W.TEXTURE_2D, b), this.gl.texParameteri(W.TEXTURE_2D, W.TEXTURE_MIN_FILTER, W.LINEAR), this.gl.texParameteri(W.TEXTURE_2D, W.TEXTURE_MAG_FILTER, W.LINEAR);
  }
  generateMipMap(z) {
    const b = this.getTexture(z);
    if (b)
      this.gl.activeTexture(W[z]), this.gl.bindTexture(W.TEXTURE_2D, b), this.gl.texParameteri(W.TEXTURE_2D, W.TEXTURE_MIN_FILTER, W.LINEAR_MIPMAP_LINEAR), this.gl.texParameteri(W.TEXTURE_2D, W.TEXTURE_MAG_FILTER, W.LINEAR), this.gl.generateMipmap(W.TEXTURE_2D);
  }
  dispose() {
    Object.values(this.texturesById).forEach((z) => {
      this.gl.deleteTexture(z);
    });
  }
}
var SpriteType;
(function(SpriteType2) {
  SpriteType2[SpriteType2["DEFAULT"] = 0] = "DEFAULT";
  SpriteType2[SpriteType2["SPRITE"] = 1] = "SPRITE";
  SpriteType2[SpriteType2["HUD"] = 2] = "HUD";
  SpriteType2[SpriteType2["DISTANT"] = 3] = "DISTANT";
  SpriteType2[SpriteType2["WAVE"] = 4] = "WAVE";
})(SpriteType || (SpriteType = {}));
var D2;
(function(J) {
  J[J["DEFAULT"] = 0] = "DEFAULT";
  J[J["LAST"] = 1] = "LAST";
})(D2 || (D2 = {}));

class K {
  i;
  f;
  warningLimit = 50000;
  #k = new Set;
  #q = [];
  constructor(k, q) {
    this.initCall = k, this.onRecycle = q;
  }
  create(...k) {
    const q = this.#q.pop();
    if (q)
      return this.#k.add(q), this.initCall(q, ...k);
    const J = this.initCall(undefined, ...k);
    return this.#k.add(J), this.#X(), J;
  }
  recycle(k) {
    this.#k.delete(k), this.#J(k);
  }
  recycleAll() {
    for (let k of this.#k)
      this.#J(k);
    this.#k.clear();
  }
  clear() {
    this.#q.length = 0, this.#k.clear();
  }
  countObjectsInExistence() {
    return this.#k.size + this.#q.length;
  }
  #J(k) {
    this.#q.push(k), this.onRecycle?.(k);
  }
  #X() {
    if (this.countObjectsInExistence() === this.warningLimit)
      console.warn("ObjectPool already created", this.#k.size + this.#q.length, "in", this.constructor.name);
  }
}

class O2 extends K {
  constructor() {
    super((k) => {
      if (!k)
        return new Map;
      return k;
    }, (k) => k.clear());
  }
}
var E2 = 1000;
var Q2 = 16.5;
var w = 10;

class s {
  requestAnimationFrame;
  cancelAnimationFrame;
  maxLoopJump;
  constructor({ requestAnimationFrame: k = globalThis.requestAnimationFrame.bind(globalThis), cancelAnimationFrame: q = globalThis.cancelAnimationFrame.bind(globalThis) } = {}, { maxLoopJump: J = w } = {}) {
    this.requestAnimationFrame = k, this.cancelAnimationFrame = q, this.maxLoopJump = J;
  }
  startLoop(k, q = {}) {
    const J = q.frameDuration ?? (q.frameRate ? E2 / q.frameRate : undefined) ?? Q2;
    let F = 0;
    function X2(B2, Z2) {
      if (B2 > Z2)
        return F -= J * (B2 - Z2), Z2;
      return B2;
    }
    const { maxLoopJump: $2, requestAnimationFrame: b, cancelAnimationFrame: V22 } = this;
    let Y = 0;
    const H = (B2) => {
      W2 = b(H);
      const Z2 = X2(Math.round((B2 + F - Y) / J), $2);
      for (let z = 0;z < Z2; z++)
        Y += J, k(Y, z === Z2 - 1);
    };
    let W2 = b(H);
    return () => {
      V22(W2);
    };
  }
}
var x2 = 1000;

class j {
  time = 0;
  apptPool = new A2;
  schedulePool = new O2;
  schedule = this.schedulePool.create();
  loopExecutor;
  frameDuration;
  constructor({ loopExecutor: k } = {}, q = {}) {
    this.loopExecutor = k ?? new s, this.frameDuration = q.frameDuration ?? (q.frameRate ? 1000 / q.frameRate : undefined) ?? Q2;
  }
  loop(k, q, J) {
    this.scheduleUpdate(k, q, J ?? 1000);
  }
  scheduleUpdate(k, q, J = 0, F) {
    let X2 = this.schedule.get(k);
    if (!X2)
      this.schedule.set(k, X2 = this.apptPool.create(J, q));
    else if (X2.frameRate !== J)
      X2.frameRate = J, X2.period = J ? 1000 / J : 0, X2.data = q;
    if (F)
      X2.meetingTime = this.time + Q2;
  }
  stopUpdate(k) {
    const q = this.schedule.get(k);
    if (q)
      this.apptPool.recycle(q);
    this.schedule.delete(k);
  }
  deactivate() {
    this.stopLoop?.();
  }
  activate() {
    this.startLoop();
  }
  startLoop() {
    const k = { time: 0, deltaTime: this.frameDuration, data: undefined, renderFrame: true, cycle: { refresh: () => {
    } }, stopUpdate() {
      this.stopped = true;
    }, stopped: false };
    k.stopUpdate = k.stopUpdate.bind(k);
    const q = (F) => {
      if (!this.schedule.size)
        return;
      let X2 = this.schedule;
      const $2 = this.schedulePool.create(), b = this.schedulePool.create();
      let V22 = 100, Y = false;
      while (X2) {
        if (V22-- < 0)
          throw new Error("We keep scheduling updates within updates.");
        if (this.schedule = this.schedulePool.create(), X2.forEach((H, W2) => {
          if (F.time < H.meetingTime) {
            $2.set(W2, H);
            return;
          }
          if (!Y && W2.priority === D2.LAST) {
            b.set(W2, H);
            return;
          }
          if (F.data = H.data, F.cycle = W2, F.stopped = false, W2.refresh(F), H.period && !F.stopped)
            H.meetingTime = Math.max(H.meetingTime + H.period, F.time), $2.set(W2, H);
          else
            this.apptPool.recycle(H);
        }), this.schedulePool.recycle(X2), !Y)
          if (this.schedule.size)
            X2 = this.schedule;
          else
            this.schedulePool.recycle(this.schedule), Y = true, X2 = b;
        else
          this.schedulePool.recycle(this.schedule), X2 = undefined, this.schedule = $2;
      }
    }, J = this.loopExecutor.startLoop((F, X2) => {
      this.time = k.time = F, k.renderFrame = X2, q(k);
    }, { frameDuration: this.frameDuration });
    this.stopLoop = () => {
      J(), this.stopLoop = undefined, this.apptPool.clear();
    };
  }
}

class A2 extends K {
  constructor() {
    super((k, q, J) => {
      if (!k)
        return { meetingTime: 0, frameRate: q, period: q ? x2 / q : 0, data: J };
      return k.meetingTime = 0, k.period = q ? x2 / q : 0, k.frameRate = q, k.data = J, k;
    });
  }
}

class N {
  #k;
  #q;
  #J;
  #X;
  constructor({ motor: k, data: q, cycle: J }, { autoStart: F }) {
    this.#k = J, this.#q = k, this.#J = q, this.#X = F;
  }
  refresh(k) {
    this.#k?.refresh(k);
  }
  activate() {
    if (this.#X)
      this.start();
  }
  deactivate() {
    this.#q.stopUpdate(this);
  }
  start() {
    this.#q.loop(this, this.#J);
  }
}
var G;
(function(J) {
  J[J["ACTIVE_CYCLE_PRIORITY"] = 0] = "ACTIVE_CYCLE_PRIORITY";
  J[J["INCOMING_CYCLE_PRIORITY"] = 1] = "INCOMING_CYCLE_PRIORITY";
})(G || (G = {}));

class C2 {
  k;
  activeCycle;
  #k;
  constructor(k, q = {}) {
    this.motor = k;
    this.#k = q.policy ?? G.ACTIVE_CYCLE_PRIORITY;
  }
  loop(k, q, J) {
    this.scheduleUpdate(k, q, J ?? 1000);
  }
  scheduleUpdate(k, q, J, F) {
    if (this.activeCycle) {
      if (this.#k === G.ACTIVE_CYCLE_PRIORITY)
        return;
      this.stopUpdate(this.activeCycle);
    }
    this.activeCycle = k, this.motor.scheduleUpdate(k, q, J);
  }
  stopUpdate(k) {
    this.motor.stopUpdate(k);
  }
  get time() {
    return this.motor.time;
  }
}
var DEFAULT_MAX_TEXTURE_SIZE = 4096;

class TextureUniformInitializer {
  static initialize({ gl, program }, { maxTextureSize, textureUniformLoc = TEXTURE_UNIFORM_LOC, maxTextureSizeLoc = MAX_TEXTURE_SIZE_LOC } = {}) {
    const maxTextureUniform = gl.getUniformLocation(program, maxTextureSizeLoc);
    gl.uniform1f(maxTextureUniform, maxTextureSize ?? DEFAULT_MAX_TEXTURE_SIZE);
    const maxTextureUnits = gl.getParameter(GL.MAX_TEXTURE_IMAGE_UNITS);
    const arrayOfTextureIndex = new Array(maxTextureUnits).fill(null).map((_2, index) => index);
    const texturesUniform = gl.getUniformLocation(program, textureUniformLoc);
    gl.uniform1iv(texturesUniform, arrayOfTextureIndex);
  }
}

class BaseUniformHandler {
  updateCall;
  gl;
  location;
  constructor({ gl, program }, { name }, updateCall) {
    this.updateCall = updateCall;
    this.gl = gl;
    this.location = gl.getUniformLocation(program, name);
  }
  updateValue(value) {
    this.updateCall(this.gl, this.location, value);
  }
}

class MatrixUniformHandler extends BaseUniformHandler {
  matrix;
  constructor(props, config, matrix) {
    super(props, config, (gl, location, matrix2) => gl.uniformMatrix4fv(location, false, matrix2.getMatrix()));
    this.matrix = matrix;
  }
  update() {
    this.updateValue(this.matrix);
  }
}

class FloatUniformHandler extends BaseUniformHandler {
  val;
  constructor(props, config, val) {
    super(props, config, (gl, location, value) => gl.uniform1f(location, value));
    this.val = val;
    if (val === undefined) {
      this.update = () => {
      };
    }
  }
  update() {
    this.updateValue(this.val.valueOf());
  }
}

class VectorUniformHandler extends BaseUniformHandler {
  vector;
  constructor(props, config, vector) {
    super(props, config, (gl, location, vector2) => gl.uniform3fv(location, vector2));
    this.vector = vector;
  }
  update() {
    this.updateValue(this.vector);
  }
}
var x3 = function(u2, j2) {
  if (u2) {
    const p2 = u2.length.valueOf();
    for (let f2 = 0;f2 < p2; f2++)
      j2(u2.at(f2), f2);
  }
};
var z = function(u2, j2, p2 = []) {
  const f2 = p2 ?? [], q = u2.length.valueOf();
  f2.length = q;
  for (let v2 = 0;v2 < q; v2++) {
    const w2 = u2.at(v2);
    f2[v2] = j2(w2, v2);
  }
  return f2;
};

class TextureUpdateHandler {
  #textureSlots = new Map;
  #textureManager;
  #imageManager;
  constructor({ textureManager, imageManager }) {
    this.#textureManager = textureManager;
    this.#imageManager = imageManager;
  }
  getSlotBuffer(id) {
    const slot = this.#textureSlots.get(id);
    return slot?.buffer;
  }
  dispose() {
    this.#textureSlots.clear();
  }
  async updateTextures(ids, medias) {
    const mediaList = Array.from(ids).map((index) => medias.at(index));
    ids.clear();
    const mediaInfos = (await Promise.all(z(mediaList, async (media) => {
      if (media?.id === undefined) {
        return;
      }
      const mediaData = await this.#imageManager.renderMedia(media.id, media);
      return { mediaData, mediaId: media.id, spriteSheet: media.spriteSheet };
    }))).filter((data) => !!data);
    const textureIndices = await Promise.all(mediaInfos.map(async ({ mediaData, mediaId, spriteSheet }) => {
      const { slot, refreshCallback } = this.#textureManager.allocateSlotForImage(mediaData);
      const slotW = Math.log2(slot.size[0]), slotH = Math.log2(slot.size[1]);
      const wh = slotW * 16 + slotH;
      const [spriteWidth, spriteHeight] = spriteSheet?.spriteSize ?? [mediaData.width, mediaData.height];
      this.#textureSlots.set(mediaId, {
        buffer: Float32Array.from([wh, slot.slotNumber, spriteWidth / mediaData.width, spriteHeight / mediaData.height])
      });
      mediaData.refreshCallback = refreshCallback;
      return slot.textureIndex;
    }));
    const textureIndicesSet = new Set(textureIndices);
    textureIndicesSet.forEach((textureIndex) => {
      if (textureIndex === V) {
        this.#textureManager.setupTextureForVideo(`TEXTURE${textureIndex}`);
      } else {
        this.#textureManager.generateMipMap(`TEXTURE${textureIndex}`);
      }
    });
    return mediaInfos.map(({ mediaData }) => mediaData);
  }
}
var J0 = function() {
  var K2 = new k(9);
  if (k != Float32Array)
    K2[1] = 0, K2[2] = 0, K2[3] = 0, K2[5] = 0, K2[6] = 0, K2[7] = 0;
  return K2[0] = 1, K2[4] = 1, K2[8] = 1, K2;
};
var $K = function() {
  var K2 = new k(16);
  if (k != Float32Array)
    K2[1] = 0, K2[2] = 0, K2[3] = 0, K2[4] = 0, K2[6] = 0, K2[7] = 0, K2[8] = 0, K2[9] = 0, K2[11] = 0, K2[12] = 0, K2[13] = 0, K2[14] = 0;
  return K2[0] = 1, K2[5] = 1, K2[10] = 1, K2[15] = 1, K2;
};
var QK = function(K2) {
  var W2 = new k(16);
  return W2[0] = K2[0], W2[1] = K2[1], W2[2] = K2[2], W2[3] = K2[3], W2[4] = K2[4], W2[5] = K2[5], W2[6] = K2[6], W2[7] = K2[7], W2[8] = K2[8], W2[9] = K2[9], W2[10] = K2[10], W2[11] = K2[11], W2[12] = K2[12], W2[13] = K2[13], W2[14] = K2[14], W2[15] = K2[15], W2;
};
var ZK = function(K2, W2) {
  return K2[0] = W2[0], K2[1] = W2[1], K2[2] = W2[2], K2[3] = W2[3], K2[4] = W2[4], K2[5] = W2[5], K2[6] = W2[6], K2[7] = W2[7], K2[8] = W2[8], K2[9] = W2[9], K2[10] = W2[10], K2[11] = W2[11], K2[12] = W2[12], K2[13] = W2[13], K2[14] = W2[14], K2[15] = W2[15], K2;
};
var BK = function(K2, W2, X2, Y, $2, Q3, Z2, B2, O3, J, G2, L2, C3, V22, D3, E3) {
  var H = new k(16);
  return H[0] = K2, H[1] = W2, H[2] = X2, H[3] = Y, H[4] = $2, H[5] = Q3, H[6] = Z2, H[7] = B2, H[8] = O3, H[9] = J, H[10] = G2, H[11] = L2, H[12] = C3, H[13] = V22, H[14] = D3, H[15] = E3, H;
};
var OK = function(K2, W2, X2, Y, $2, Q3, Z2, B2, O3, J, G2, L2, C3, V22, D3, E3, H) {
  return K2[0] = W2, K2[1] = X2, K2[2] = Y, K2[3] = $2, K2[4] = Q3, K2[5] = Z2, K2[6] = B2, K2[7] = O3, K2[8] = J, K2[9] = G2, K2[10] = L2, K2[11] = C3, K2[12] = V22, K2[13] = D3, K2[14] = E3, K2[15] = H, K2;
};
var G0 = function(K2) {
  return K2[0] = 1, K2[1] = 0, K2[2] = 0, K2[3] = 0, K2[4] = 0, K2[5] = 1, K2[6] = 0, K2[7] = 0, K2[8] = 0, K2[9] = 0, K2[10] = 1, K2[11] = 0, K2[12] = 0, K2[13] = 0, K2[14] = 0, K2[15] = 1, K2;
};
var JK = function(K2, W2) {
  if (K2 === W2) {
    var X2 = W2[1], Y = W2[2], $2 = W2[3], Q3 = W2[6], Z2 = W2[7], B2 = W2[11];
    K2[1] = W2[4], K2[2] = W2[8], K2[3] = W2[12], K2[4] = X2, K2[6] = W2[9], K2[7] = W2[13], K2[8] = Y, K2[9] = Q3, K2[11] = W2[14], K2[12] = $2, K2[13] = Z2, K2[14] = B2;
  } else
    K2[0] = W2[0], K2[1] = W2[4], K2[2] = W2[8], K2[3] = W2[12], K2[4] = W2[1], K2[5] = W2[5], K2[6] = W2[9], K2[7] = W2[13], K2[8] = W2[2], K2[9] = W2[6], K2[10] = W2[10], K2[11] = W2[14], K2[12] = W2[3], K2[13] = W2[7], K2[14] = W2[11], K2[15] = W2[15];
  return K2;
};
var GK = function(K2, W2) {
  var X2 = W2[0], Y = W2[1], $2 = W2[2], Q3 = W2[3], Z2 = W2[4], B2 = W2[5], O3 = W2[6], J = W2[7], G2 = W2[8], L2 = W2[9], C3 = W2[10], V22 = W2[11], D3 = W2[12], E3 = W2[13], H = W2[14], I = W2[15], T22 = X2 * B2 - Y * Z2, R2 = X2 * O3 - $2 * Z2, P = X2 * J - Q3 * Z2, U = Y * O3 - $2 * B2, A3 = Y * J - Q3 * B2, p2 = $2 * J - Q3 * O3, h = G2 * E3 - L2 * D3, j2 = G2 * H - C3 * D3, M2 = G2 * I - V22 * D3, F = L2 * H - C3 * E3, q = L2 * I - V22 * E3, g2 = C3 * I - V22 * H, S2 = T22 * g2 - R2 * q + P * F + U * M2 - A3 * j2 + p2 * h;
  if (!S2)
    return null;
  return S2 = 1 / S2, K2[0] = (B2 * g2 - O3 * q + J * F) * S2, K2[1] = ($2 * q - Y * g2 - Q3 * F) * S2, K2[2] = (E3 * p2 - H * A3 + I * U) * S2, K2[3] = (C3 * A3 - L2 * p2 - V22 * U) * S2, K2[4] = (O3 * M2 - Z2 * g2 - J * j2) * S2, K2[5] = (X2 * g2 - $2 * M2 + Q3 * j2) * S2, K2[6] = (H * P - D3 * p2 - I * R2) * S2, K2[7] = (G2 * p2 - C3 * P + V22 * R2) * S2, K2[8] = (Z2 * q - B2 * M2 + J * h) * S2, K2[9] = (Y * M2 - X2 * q - Q3 * h) * S2, K2[10] = (D3 * A3 - E3 * P + I * T22) * S2, K2[11] = (L2 * P - G2 * A3 - V22 * T22) * S2, K2[12] = (B2 * j2 - Z2 * F - O3 * h) * S2, K2[13] = (X2 * F - Y * j2 + $2 * h) * S2, K2[14] = (E3 * R2 - D3 * U - H * T22) * S2, K2[15] = (G2 * U - L2 * R2 + C3 * T22) * S2, K2;
};
var HK = function(K2, W2) {
  var X2 = W2[0], Y = W2[1], $2 = W2[2], Q3 = W2[3], Z2 = W2[4], B2 = W2[5], O3 = W2[6], J = W2[7], G2 = W2[8], L2 = W2[9], C3 = W2[10], V22 = W2[11], D3 = W2[12], E3 = W2[13], H = W2[14], I = W2[15];
  return K2[0] = B2 * (C3 * I - V22 * H) - L2 * (O3 * I - J * H) + E3 * (O3 * V22 - J * C3), K2[1] = -(Y * (C3 * I - V22 * H) - L2 * ($2 * I - Q3 * H) + E3 * ($2 * V22 - Q3 * C3)), K2[2] = Y * (O3 * I - J * H) - B2 * ($2 * I - Q3 * H) + E3 * ($2 * J - Q3 * O3), K2[3] = -(Y * (O3 * V22 - J * C3) - B2 * ($2 * V22 - Q3 * C3) + L2 * ($2 * J - Q3 * O3)), K2[4] = -(Z2 * (C3 * I - V22 * H) - G2 * (O3 * I - J * H) + D3 * (O3 * V22 - J * C3)), K2[5] = X2 * (C3 * I - V22 * H) - G2 * ($2 * I - Q3 * H) + D3 * ($2 * V22 - Q3 * C3), K2[6] = -(X2 * (O3 * I - J * H) - Z2 * ($2 * I - Q3 * H) + D3 * ($2 * J - Q3 * O3)), K2[7] = X2 * (O3 * V22 - J * C3) - Z2 * ($2 * V22 - Q3 * C3) + G2 * ($2 * J - Q3 * O3), K2[8] = Z2 * (L2 * I - V22 * E3) - G2 * (B2 * I - J * E3) + D3 * (B2 * V22 - J * L2), K2[9] = -(X2 * (L2 * I - V22 * E3) - G2 * (Y * I - Q3 * E3) + D3 * (Y * V22 - Q3 * L2)), K2[10] = X2 * (B2 * I - J * E3) - Z2 * (Y * I - Q3 * E3) + D3 * (Y * J - Q3 * B2), K2[11] = -(X2 * (B2 * V22 - J * L2) - Z2 * (Y * V22 - Q3 * L2) + G2 * (Y * J - Q3 * B2)), K2[12] = -(Z2 * (L2 * H - C3 * E3) - G2 * (B2 * H - O3 * E3) + D3 * (B2 * C3 - O3 * L2)), K2[13] = X2 * (L2 * H - C3 * E3) - G2 * (Y * H - $2 * E3) + D3 * (Y * C3 - $2 * L2), K2[14] = -(X2 * (B2 * H - O3 * E3) - Z2 * (Y * H - $2 * E3) + D3 * (Y * O3 - $2 * B2)), K2[15] = X2 * (B2 * C3 - O3 * L2) - Z2 * (Y * C3 - $2 * L2) + G2 * (Y * O3 - $2 * B2), K2;
};
var LK = function(K2) {
  var W2 = K2[0], X2 = K2[1], Y = K2[2], $2 = K2[3], Q3 = K2[4], Z2 = K2[5], B2 = K2[6], O3 = K2[7], J = K2[8], G2 = K2[9], L2 = K2[10], C3 = K2[11], V22 = K2[12], D3 = K2[13], E3 = K2[14], H = K2[15], I = W2 * Z2 - X2 * Q3, T22 = W2 * B2 - Y * Q3, R2 = W2 * O3 - $2 * Q3, P = X2 * B2 - Y * Z2, U = X2 * O3 - $2 * Z2, A3 = Y * O3 - $2 * B2, p2 = J * D3 - G2 * V22, h = J * E3 - L2 * V22, j2 = J * H - C3 * V22, M2 = G2 * E3 - L2 * D3, F = G2 * H - C3 * D3, q = L2 * H - C3 * E3;
  return I * q - T22 * F + R2 * M2 + P * j2 - U * h + A3 * p2;
};
var H0 = function(K2, W2, X2) {
  var Y = W2[0], $2 = W2[1], Q3 = W2[2], Z2 = W2[3], B2 = W2[4], O3 = W2[5], J = W2[6], G2 = W2[7], L2 = W2[8], C3 = W2[9], V22 = W2[10], D3 = W2[11], E3 = W2[12], H = W2[13], I = W2[14], T22 = W2[15], R2 = X2[0], P = X2[1], U = X2[2], A3 = X2[3];
  return K2[0] = R2 * Y + P * B2 + U * L2 + A3 * E3, K2[1] = R2 * $2 + P * O3 + U * C3 + A3 * H, K2[2] = R2 * Q3 + P * J + U * V22 + A3 * I, K2[3] = R2 * Z2 + P * G2 + U * D3 + A3 * T22, R2 = X2[4], P = X2[5], U = X2[6], A3 = X2[7], K2[4] = R2 * Y + P * B2 + U * L2 + A3 * E3, K2[5] = R2 * $2 + P * O3 + U * C3 + A3 * H, K2[6] = R2 * Q3 + P * J + U * V22 + A3 * I, K2[7] = R2 * Z2 + P * G2 + U * D3 + A3 * T22, R2 = X2[8], P = X2[9], U = X2[10], A3 = X2[11], K2[8] = R2 * Y + P * B2 + U * L2 + A3 * E3, K2[9] = R2 * $2 + P * O3 + U * C3 + A3 * H, K2[10] = R2 * Q3 + P * J + U * V22 + A3 * I, K2[11] = R2 * Z2 + P * G2 + U * D3 + A3 * T22, R2 = X2[12], P = X2[13], U = X2[14], A3 = X2[15], K2[12] = R2 * Y + P * B2 + U * L2 + A3 * E3, K2[13] = R2 * $2 + P * O3 + U * C3 + A3 * H, K2[14] = R2 * Q3 + P * J + U * V22 + A3 * I, K2[15] = R2 * Z2 + P * G2 + U * D3 + A3 * T22, K2;
};
var VK = function(K2, W2, X2) {
  var Y = X2[0], $2 = X2[1], Q3 = X2[2], Z2, B2, O3, J, G2, L2, C3, V22, D3, E3, H, I;
  if (W2 === K2)
    K2[12] = W2[0] * Y + W2[4] * $2 + W2[8] * Q3 + W2[12], K2[13] = W2[1] * Y + W2[5] * $2 + W2[9] * Q3 + W2[13], K2[14] = W2[2] * Y + W2[6] * $2 + W2[10] * Q3 + W2[14], K2[15] = W2[3] * Y + W2[7] * $2 + W2[11] * Q3 + W2[15];
  else
    Z2 = W2[0], B2 = W2[1], O3 = W2[2], J = W2[3], G2 = W2[4], L2 = W2[5], C3 = W2[6], V22 = W2[7], D3 = W2[8], E3 = W2[9], H = W2[10], I = W2[11], K2[0] = Z2, K2[1] = B2, K2[2] = O3, K2[3] = J, K2[4] = G2, K2[5] = L2, K2[6] = C3, K2[7] = V22, K2[8] = D3, K2[9] = E3, K2[10] = H, K2[11] = I, K2[12] = Z2 * Y + G2 * $2 + D3 * Q3 + W2[12], K2[13] = B2 * Y + L2 * $2 + E3 * Q3 + W2[13], K2[14] = O3 * Y + C3 * $2 + H * Q3 + W2[14], K2[15] = J * Y + V22 * $2 + I * Q3 + W2[15];
  return K2;
};
var CK = function(K2, W2, X2) {
  var Y = X2[0], $2 = X2[1], Q3 = X2[2];
  return K2[0] = W2[0] * Y, K2[1] = W2[1] * Y, K2[2] = W2[2] * Y, K2[3] = W2[3] * Y, K2[4] = W2[4] * $2, K2[5] = W2[5] * $2, K2[6] = W2[6] * $2, K2[7] = W2[7] * $2, K2[8] = W2[8] * Q3, K2[9] = W2[9] * Q3, K2[10] = W2[10] * Q3, K2[11] = W2[11] * Q3, K2[12] = W2[12], K2[13] = W2[13], K2[14] = W2[14], K2[15] = W2[15], K2;
};
var EK = function(K2, W2, X2, Y) {
  var $2 = Y[0], Q3 = Y[1], Z2 = Y[2], B2 = Math.hypot($2, Q3, Z2), O3, J, G2, L2, C3, V22, D3, E3, H, I, T22, R2, P, U, A3, p2, h, j2, M2, F, q, g2, S2, f2;
  if (B2 < N2)
    return null;
  if (B2 = 1 / B2, $2 *= B2, Q3 *= B2, Z2 *= B2, O3 = Math.sin(X2), J = Math.cos(X2), G2 = 1 - J, L2 = W2[0], C3 = W2[1], V22 = W2[2], D3 = W2[3], E3 = W2[4], H = W2[5], I = W2[6], T22 = W2[7], R2 = W2[8], P = W2[9], U = W2[10], A3 = W2[11], p2 = $2 * $2 * G2 + J, h = Q3 * $2 * G2 + Z2 * O3, j2 = Z2 * $2 * G2 - Q3 * O3, M2 = $2 * Q3 * G2 - Z2 * O3, F = Q3 * Q3 * G2 + J, q = Z2 * Q3 * G2 + $2 * O3, g2 = $2 * Z2 * G2 + Q3 * O3, S2 = Q3 * Z2 * G2 - $2 * O3, f2 = Z2 * Z2 * G2 + J, K2[0] = L2 * p2 + E3 * h + R2 * j2, K2[1] = C3 * p2 + H * h + P * j2, K2[2] = V22 * p2 + I * h + U * j2, K2[3] = D3 * p2 + T22 * h + A3 * j2, K2[4] = L2 * M2 + E3 * F + R2 * q, K2[5] = C3 * M2 + H * F + P * q, K2[6] = V22 * M2 + I * F + U * q, K2[7] = D3 * M2 + T22 * F + A3 * q, K2[8] = L2 * g2 + E3 * S2 + R2 * f2, K2[9] = C3 * g2 + H * S2 + P * f2, K2[10] = V22 * g2 + I * S2 + U * f2, K2[11] = D3 * g2 + T22 * S2 + A3 * f2, W2 !== K2)
    K2[12] = W2[12], K2[13] = W2[13], K2[14] = W2[14], K2[15] = W2[15];
  return K2;
};
var DK = function(K2, W2, X2) {
  var Y = Math.sin(X2), $2 = Math.cos(X2), Q3 = W2[4], Z2 = W2[5], B2 = W2[6], O3 = W2[7], J = W2[8], G2 = W2[9], L2 = W2[10], C3 = W2[11];
  if (W2 !== K2)
    K2[0] = W2[0], K2[1] = W2[1], K2[2] = W2[2], K2[3] = W2[3], K2[12] = W2[12], K2[13] = W2[13], K2[14] = W2[14], K2[15] = W2[15];
  return K2[4] = Q3 * $2 + J * Y, K2[5] = Z2 * $2 + G2 * Y, K2[6] = B2 * $2 + L2 * Y, K2[7] = O3 * $2 + C3 * Y, K2[8] = J * $2 - Q3 * Y, K2[9] = G2 * $2 - Z2 * Y, K2[10] = L2 * $2 - B2 * Y, K2[11] = C3 * $2 - O3 * Y, K2;
};
var IK = function(K2, W2, X2) {
  var Y = Math.sin(X2), $2 = Math.cos(X2), Q3 = W2[0], Z2 = W2[1], B2 = W2[2], O3 = W2[3], J = W2[8], G2 = W2[9], L2 = W2[10], C3 = W2[11];
  if (W2 !== K2)
    K2[4] = W2[4], K2[5] = W2[5], K2[6] = W2[6], K2[7] = W2[7], K2[12] = W2[12], K2[13] = W2[13], K2[14] = W2[14], K2[15] = W2[15];
  return K2[0] = Q3 * $2 - J * Y, K2[1] = Z2 * $2 - G2 * Y, K2[2] = B2 * $2 - L2 * Y, K2[3] = O3 * $2 - C3 * Y, K2[8] = Q3 * Y + J * $2, K2[9] = Z2 * Y + G2 * $2, K2[10] = B2 * Y + L2 * $2, K2[11] = O3 * Y + C3 * $2, K2;
};
var UK = function(K2, W2, X2) {
  var Y = Math.sin(X2), $2 = Math.cos(X2), Q3 = W2[0], Z2 = W2[1], B2 = W2[2], O3 = W2[3], J = W2[4], G2 = W2[5], L2 = W2[6], C3 = W2[7];
  if (W2 !== K2)
    K2[8] = W2[8], K2[9] = W2[9], K2[10] = W2[10], K2[11] = W2[11], K2[12] = W2[12], K2[13] = W2[13], K2[14] = W2[14], K2[15] = W2[15];
  return K2[0] = Q3 * $2 + J * Y, K2[1] = Z2 * $2 + G2 * Y, K2[2] = B2 * $2 + L2 * Y, K2[3] = O3 * $2 + C3 * Y, K2[4] = J * $2 - Q3 * Y, K2[5] = G2 * $2 - Z2 * Y, K2[6] = L2 * $2 - B2 * Y, K2[7] = C3 * $2 - O3 * Y, K2;
};
var AK = function(K2, W2) {
  return K2[0] = 1, K2[1] = 0, K2[2] = 0, K2[3] = 0, K2[4] = 0, K2[5] = 1, K2[6] = 0, K2[7] = 0, K2[8] = 0, K2[9] = 0, K2[10] = 1, K2[11] = 0, K2[12] = W2[0], K2[13] = W2[1], K2[14] = W2[2], K2[15] = 1, K2;
};
var PK = function(K2, W2) {
  return K2[0] = W2[0], K2[1] = 0, K2[2] = 0, K2[3] = 0, K2[4] = 0, K2[5] = W2[1], K2[6] = 0, K2[7] = 0, K2[8] = 0, K2[9] = 0, K2[10] = W2[2], K2[11] = 0, K2[12] = 0, K2[13] = 0, K2[14] = 0, K2[15] = 1, K2;
};
var RK = function(K2, W2, X2) {
  var Y = X2[0], $2 = X2[1], Q3 = X2[2], Z2 = Math.hypot(Y, $2, Q3), B2, O3, J;
  if (Z2 < N2)
    return null;
  return Z2 = 1 / Z2, Y *= Z2, $2 *= Z2, Q3 *= Z2, B2 = Math.sin(W2), O3 = Math.cos(W2), J = 1 - O3, K2[0] = Y * Y * J + O3, K2[1] = $2 * Y * J + Q3 * B2, K2[2] = Q3 * Y * J - $2 * B2, K2[3] = 0, K2[4] = Y * $2 * J - Q3 * B2, K2[5] = $2 * $2 * J + O3, K2[6] = Q3 * $2 * J + Y * B2, K2[7] = 0, K2[8] = Y * Q3 * J + $2 * B2, K2[9] = $2 * Q3 * J - Y * B2, K2[10] = Q3 * Q3 * J + O3, K2[11] = 0, K2[12] = 0, K2[13] = 0, K2[14] = 0, K2[15] = 1, K2;
};
var NK = function(K2, W2) {
  var X2 = Math.sin(W2), Y = Math.cos(W2);
  return K2[0] = 1, K2[1] = 0, K2[2] = 0, K2[3] = 0, K2[4] = 0, K2[5] = Y, K2[6] = X2, K2[7] = 0, K2[8] = 0, K2[9] = -X2, K2[10] = Y, K2[11] = 0, K2[12] = 0, K2[13] = 0, K2[14] = 0, K2[15] = 1, K2;
};
var TK = function(K2, W2) {
  var X2 = Math.sin(W2), Y = Math.cos(W2);
  return K2[0] = Y, K2[1] = 0, K2[2] = -X2, K2[3] = 0, K2[4] = 0, K2[5] = 1, K2[6] = 0, K2[7] = 0, K2[8] = X2, K2[9] = 0, K2[10] = Y, K2[11] = 0, K2[12] = 0, K2[13] = 0, K2[14] = 0, K2[15] = 1, K2;
};
var SK = function(K2, W2) {
  var X2 = Math.sin(W2), Y = Math.cos(W2);
  return K2[0] = Y, K2[1] = X2, K2[2] = 0, K2[3] = 0, K2[4] = -X2, K2[5] = Y, K2[6] = 0, K2[7] = 0, K2[8] = 0, K2[9] = 0, K2[10] = 1, K2[11] = 0, K2[12] = 0, K2[13] = 0, K2[14] = 0, K2[15] = 1, K2;
};
var L0 = function(K2, W2, X2) {
  var Y = W2[0], $2 = W2[1], Q3 = W2[2], Z2 = W2[3], B2 = Y + Y, O3 = $2 + $2, J = Q3 + Q3, G2 = Y * B2, L2 = Y * O3, C3 = Y * J, V22 = $2 * O3, D3 = $2 * J, E3 = Q3 * J, H = Z2 * B2, I = Z2 * O3, T22 = Z2 * J;
  return K2[0] = 1 - (V22 + E3), K2[1] = L2 + T22, K2[2] = C3 - I, K2[3] = 0, K2[4] = L2 - T22, K2[5] = 1 - (G2 + E3), K2[6] = D3 + H, K2[7] = 0, K2[8] = C3 + I, K2[9] = D3 - H, K2[10] = 1 - (G2 + V22), K2[11] = 0, K2[12] = X2[0], K2[13] = X2[1], K2[14] = X2[2], K2[15] = 1, K2;
};
var _K = function(K2, W2) {
  var X2 = new k(3), Y = -W2[0], $2 = -W2[1], Q3 = -W2[2], Z2 = W2[3], B2 = W2[4], O3 = W2[5], J = W2[6], G2 = W2[7], L2 = Y * Y + $2 * $2 + Q3 * Q3 + Z2 * Z2;
  if (L2 > 0)
    X2[0] = (B2 * Z2 + G2 * Y + O3 * Q3 - J * $2) * 2 / L2, X2[1] = (O3 * Z2 + G2 * $2 + J * Y - B2 * Q3) * 2 / L2, X2[2] = (J * Z2 + G2 * Q3 + B2 * $2 - O3 * Y) * 2 / L2;
  else
    X2[0] = (B2 * Z2 + G2 * Y + O3 * Q3 - J * $2) * 2, X2[1] = (O3 * Z2 + G2 * $2 + J * Y - B2 * Q3) * 2, X2[2] = (J * Z2 + G2 * Q3 + B2 * $2 - O3 * Y) * 2;
  return L0(K2, W2, X2), K2;
};
var kK = function(K2, W2) {
  return K2[0] = W2[12], K2[1] = W2[13], K2[2] = W2[14], K2;
};
var V0 = function(K2, W2) {
  var X2 = W2[0], Y = W2[1], $2 = W2[2], Q3 = W2[4], Z2 = W2[5], B2 = W2[6], O3 = W2[8], J = W2[9], G2 = W2[10];
  return K2[0] = Math.hypot(X2, Y, $2), K2[1] = Math.hypot(Q3, Z2, B2), K2[2] = Math.hypot(O3, J, G2), K2;
};
var hK = function(K2, W2) {
  var X2 = new k(3);
  V0(X2, W2);
  var Y = 1 / X2[0], $2 = 1 / X2[1], Q3 = 1 / X2[2], Z2 = W2[0] * Y, B2 = W2[1] * $2, O3 = W2[2] * Q3, J = W2[4] * Y, G2 = W2[5] * $2, L2 = W2[6] * Q3, C3 = W2[8] * Y, V22 = W2[9] * $2, D3 = W2[10] * Q3, E3 = Z2 + G2 + D3, H = 0;
  if (E3 > 0)
    H = Math.sqrt(E3 + 1) * 2, K2[3] = 0.25 * H, K2[0] = (L2 - V22) / H, K2[1] = (C3 - O3) / H, K2[2] = (B2 - J) / H;
  else if (Z2 > G2 && Z2 > D3)
    H = Math.sqrt(1 + Z2 - G2 - D3) * 2, K2[3] = (L2 - V22) / H, K2[0] = 0.25 * H, K2[1] = (B2 + J) / H, K2[2] = (C3 + O3) / H;
  else if (G2 > D3)
    H = Math.sqrt(1 + G2 - Z2 - D3) * 2, K2[3] = (C3 - O3) / H, K2[0] = (B2 + J) / H, K2[1] = 0.25 * H, K2[2] = (L2 + V22) / H;
  else
    H = Math.sqrt(1 + D3 - Z2 - G2) * 2, K2[3] = (B2 - J) / H, K2[0] = (C3 + O3) / H, K2[1] = (L2 + V22) / H, K2[2] = 0.25 * H;
  return K2;
};
var jK = function(K2, W2, X2, Y) {
  var $2 = W2[0], Q3 = W2[1], Z2 = W2[2], B2 = W2[3], O3 = $2 + $2, J = Q3 + Q3, G2 = Z2 + Z2, L2 = $2 * O3, C3 = $2 * J, V22 = $2 * G2, D3 = Q3 * J, E3 = Q3 * G2, H = Z2 * G2, I = B2 * O3, T22 = B2 * J, R2 = B2 * G2, P = Y[0], U = Y[1], A3 = Y[2];
  return K2[0] = (1 - (D3 + H)) * P, K2[1] = (C3 + R2) * P, K2[2] = (V22 - T22) * P, K2[3] = 0, K2[4] = (C3 - R2) * U, K2[5] = (1 - (L2 + H)) * U, K2[6] = (E3 + I) * U, K2[7] = 0, K2[8] = (V22 + T22) * A3, K2[9] = (E3 - I) * A3, K2[10] = (1 - (L2 + D3)) * A3, K2[11] = 0, K2[12] = X2[0], K2[13] = X2[1], K2[14] = X2[2], K2[15] = 1, K2;
};
var MK = function(K2, W2, X2, Y, $2) {
  var Q3 = W2[0], Z2 = W2[1], B2 = W2[2], O3 = W2[3], J = Q3 + Q3, G2 = Z2 + Z2, L2 = B2 + B2, C3 = Q3 * J, V22 = Q3 * G2, D3 = Q3 * L2, E3 = Z2 * G2, H = Z2 * L2, I = B2 * L2, T22 = O3 * J, R2 = O3 * G2, P = O3 * L2, U = Y[0], A3 = Y[1], p2 = Y[2], h = $2[0], j2 = $2[1], M2 = $2[2], F = (1 - (E3 + I)) * U, q = (V22 + P) * U, g2 = (D3 - R2) * U, S2 = (V22 - P) * A3, f2 = (1 - (C3 + I)) * A3, i = (H + T22) * A3, y = (D3 + R2) * p2, B0 = (H - T22) * p2, O0 = (1 - (C3 + E3)) * p2;
  return K2[0] = F, K2[1] = q, K2[2] = g2, K2[3] = 0, K2[4] = S2, K2[5] = f2, K2[6] = i, K2[7] = 0, K2[8] = y, K2[9] = B0, K2[10] = O0, K2[11] = 0, K2[12] = X2[0] + h - (F * h + S2 * j2 + y * M2), K2[13] = X2[1] + j2 - (q * h + f2 * j2 + B0 * M2), K2[14] = X2[2] + M2 - (g2 * h + i * j2 + O0 * M2), K2[15] = 1, K2;
};
var pK = function(K2, W2) {
  var X2 = W2[0], Y = W2[1], $2 = W2[2], Q3 = W2[3], Z2 = X2 + X2, B2 = Y + Y, O3 = $2 + $2, J = X2 * Z2, G2 = Y * Z2, L2 = Y * B2, C3 = $2 * Z2, V22 = $2 * B2, D3 = $2 * O3, E3 = Q3 * Z2, H = Q3 * B2, I = Q3 * O3;
  return K2[0] = 1 - L2 - D3, K2[1] = G2 + I, K2[2] = C3 - H, K2[3] = 0, K2[4] = G2 - I, K2[5] = 1 - J - D3, K2[6] = V22 + E3, K2[7] = 0, K2[8] = C3 + H, K2[9] = V22 - E3, K2[10] = 1 - J - L2, K2[11] = 0, K2[12] = 0, K2[13] = 0, K2[14] = 0, K2[15] = 1, K2;
};
var FK = function(K2, W2, X2, Y, $2, Q3, Z2) {
  var B2 = 1 / (X2 - W2), O3 = 1 / ($2 - Y), J = 1 / (Q3 - Z2);
  return K2[0] = Q3 * 2 * B2, K2[1] = 0, K2[2] = 0, K2[3] = 0, K2[4] = 0, K2[5] = Q3 * 2 * O3, K2[6] = 0, K2[7] = 0, K2[8] = (X2 + W2) * B2, K2[9] = ($2 + Y) * O3, K2[10] = (Z2 + Q3) * J, K2[11] = -1, K2[12] = 0, K2[13] = 0, K2[14] = Z2 * Q3 * 2 * J, K2[15] = 0, K2;
};
var C0 = function(K2, W2, X2, Y, $2) {
  var Q3 = 1 / Math.tan(W2 / 2), Z2;
  if (K2[0] = Q3 / X2, K2[1] = 0, K2[2] = 0, K2[3] = 0, K2[4] = 0, K2[5] = Q3, K2[6] = 0, K2[7] = 0, K2[8] = 0, K2[9] = 0, K2[11] = -1, K2[12] = 0, K2[13] = 0, K2[15] = 0, $2 != null && $2 !== Infinity)
    Z2 = 1 / (Y - $2), K2[10] = ($2 + Y) * Z2, K2[14] = 2 * $2 * Y * Z2;
  else
    K2[10] = -1, K2[14] = -2 * Y;
  return K2;
};
var gK = function(K2, W2, X2, Y, $2) {
  var Q3 = 1 / Math.tan(W2 / 2), Z2;
  if (K2[0] = Q3 / X2, K2[1] = 0, K2[2] = 0, K2[3] = 0, K2[4] = 0, K2[5] = Q3, K2[6] = 0, K2[7] = 0, K2[8] = 0, K2[9] = 0, K2[11] = -1, K2[12] = 0, K2[13] = 0, K2[15] = 0, $2 != null && $2 !== Infinity)
    Z2 = 1 / (Y - $2), K2[10] = $2 * Z2, K2[14] = $2 * Y * Z2;
  else
    K2[10] = -1, K2[14] = -Y;
  return K2;
};
var fK = function(K2, W2, X2, Y) {
  var $2 = Math.tan(W2.upDegrees * Math.PI / 180), Q3 = Math.tan(W2.downDegrees * Math.PI / 180), Z2 = Math.tan(W2.leftDegrees * Math.PI / 180), B2 = Math.tan(W2.rightDegrees * Math.PI / 180), O3 = 2 / (Z2 + B2), J = 2 / ($2 + Q3);
  return K2[0] = O3, K2[1] = 0, K2[2] = 0, K2[3] = 0, K2[4] = 0, K2[5] = J, K2[6] = 0, K2[7] = 0, K2[8] = -((Z2 - B2) * O3 * 0.5), K2[9] = ($2 - Q3) * J * 0.5, K2[10] = Y / (X2 - Y), K2[11] = -1, K2[12] = 0, K2[13] = 0, K2[14] = Y * X2 / (X2 - Y), K2[15] = 0, K2;
};
var E0 = function(K2, W2, X2, Y, $2, Q3, Z2) {
  var B2 = 1 / (W2 - X2), O3 = 1 / (Y - $2), J = 1 / (Q3 - Z2);
  return K2[0] = -2 * B2, K2[1] = 0, K2[2] = 0, K2[3] = 0, K2[4] = 0, K2[5] = -2 * O3, K2[6] = 0, K2[7] = 0, K2[8] = 0, K2[9] = 0, K2[10] = 2 * J, K2[11] = 0, K2[12] = (W2 + X2) * B2, K2[13] = ($2 + Y) * O3, K2[14] = (Z2 + Q3) * J, K2[15] = 1, K2;
};
var dK = function(K2, W2, X2, Y, $2, Q3, Z2) {
  var B2 = 1 / (W2 - X2), O3 = 1 / (Y - $2), J = 1 / (Q3 - Z2);
  return K2[0] = -2 * B2, K2[1] = 0, K2[2] = 0, K2[3] = 0, K2[4] = 0, K2[5] = -2 * O3, K2[6] = 0, K2[7] = 0, K2[8] = 0, K2[9] = 0, K2[10] = J, K2[11] = 0, K2[12] = (W2 + X2) * B2, K2[13] = ($2 + Y) * O3, K2[14] = Q3 * J, K2[15] = 1, K2;
};
var vK = function(K2, W2, X2, Y) {
  var $2, Q3, Z2, B2, O3, J, G2, L2, C3, V22, D3 = W2[0], E3 = W2[1], H = W2[2], I = Y[0], T22 = Y[1], R2 = Y[2], P = X2[0], U = X2[1], A3 = X2[2];
  if (Math.abs(D3 - P) < N2 && Math.abs(E3 - U) < N2 && Math.abs(H - A3) < N2)
    return G0(K2);
  if (G2 = D3 - P, L2 = E3 - U, C3 = H - A3, V22 = 1 / Math.hypot(G2, L2, C3), G2 *= V22, L2 *= V22, C3 *= V22, $2 = T22 * C3 - R2 * L2, Q3 = R2 * G2 - I * C3, Z2 = I * L2 - T22 * G2, V22 = Math.hypot($2, Q3, Z2), !V22)
    $2 = 0, Q3 = 0, Z2 = 0;
  else
    V22 = 1 / V22, $2 *= V22, Q3 *= V22, Z2 *= V22;
  if (B2 = L2 * Z2 - C3 * Q3, O3 = C3 * $2 - G2 * Z2, J = G2 * Q3 - L2 * $2, V22 = Math.hypot(B2, O3, J), !V22)
    B2 = 0, O3 = 0, J = 0;
  else
    V22 = 1 / V22, B2 *= V22, O3 *= V22, J *= V22;
  return K2[0] = $2, K2[1] = B2, K2[2] = G2, K2[3] = 0, K2[4] = Q3, K2[5] = O3, K2[6] = L2, K2[7] = 0, K2[8] = Z2, K2[9] = J, K2[10] = C3, K2[11] = 0, K2[12] = -($2 * D3 + Q3 * E3 + Z2 * H), K2[13] = -(B2 * D3 + O3 * E3 + J * H), K2[14] = -(G2 * D3 + L2 * E3 + C3 * H), K2[15] = 1, K2;
};
var nK = function(K2, W2, X2, Y) {
  var $2 = W2[0], Q3 = W2[1], Z2 = W2[2], B2 = Y[0], O3 = Y[1], J = Y[2], G2 = $2 - X2[0], L2 = Q3 - X2[1], C3 = Z2 - X2[2], V22 = G2 * G2 + L2 * L2 + C3 * C3;
  if (V22 > 0)
    V22 = 1 / Math.sqrt(V22), G2 *= V22, L2 *= V22, C3 *= V22;
  var D3 = O3 * C3 - J * L2, E3 = J * G2 - B2 * C3, H = B2 * L2 - O3 * G2;
  if (V22 = D3 * D3 + E3 * E3 + H * H, V22 > 0)
    V22 = 1 / Math.sqrt(V22), D3 *= V22, E3 *= V22, H *= V22;
  return K2[0] = D3, K2[1] = E3, K2[2] = H, K2[3] = 0, K2[4] = L2 * H - C3 * E3, K2[5] = C3 * D3 - G2 * H, K2[6] = G2 * E3 - L2 * D3, K2[7] = 0, K2[8] = G2, K2[9] = L2, K2[10] = C3, K2[11] = 0, K2[12] = $2, K2[13] = Q3, K2[14] = Z2, K2[15] = 1, K2;
};
var lK = function(K2) {
  return "mat4(" + K2[0] + ", " + K2[1] + ", " + K2[2] + ", " + K2[3] + ", " + K2[4] + ", " + K2[5] + ", " + K2[6] + ", " + K2[7] + ", " + K2[8] + ", " + K2[9] + ", " + K2[10] + ", " + K2[11] + ", " + K2[12] + ", " + K2[13] + ", " + K2[14] + ", " + K2[15] + ")";
};
var cK = function(K2) {
  return Math.hypot(K2[0], K2[1], K2[2], K2[3], K2[4], K2[5], K2[6], K2[7], K2[8], K2[9], K2[10], K2[11], K2[12], K2[13], K2[14], K2[15]);
};
var iK = function(K2, W2, X2) {
  return K2[0] = W2[0] + X2[0], K2[1] = W2[1] + X2[1], K2[2] = W2[2] + X2[2], K2[3] = W2[3] + X2[3], K2[4] = W2[4] + X2[4], K2[5] = W2[5] + X2[5], K2[6] = W2[6] + X2[6], K2[7] = W2[7] + X2[7], K2[8] = W2[8] + X2[8], K2[9] = W2[9] + X2[9], K2[10] = W2[10] + X2[10], K2[11] = W2[11] + X2[11], K2[12] = W2[12] + X2[12], K2[13] = W2[13] + X2[13], K2[14] = W2[14] + X2[14], K2[15] = W2[15] + X2[15], K2;
};
var D0 = function(K2, W2, X2) {
  return K2[0] = W2[0] - X2[0], K2[1] = W2[1] - X2[1], K2[2] = W2[2] - X2[2], K2[3] = W2[3] - X2[3], K2[4] = W2[4] - X2[4], K2[5] = W2[5] - X2[5], K2[6] = W2[6] - X2[6], K2[7] = W2[7] - X2[7], K2[8] = W2[8] - X2[8], K2[9] = W2[9] - X2[9], K2[10] = W2[10] - X2[10], K2[11] = W2[11] - X2[11], K2[12] = W2[12] - X2[12], K2[13] = W2[13] - X2[13], K2[14] = W2[14] - X2[14], K2[15] = W2[15] - X2[15], K2;
};
var yK = function(K2, W2, X2) {
  return K2[0] = W2[0] * X2, K2[1] = W2[1] * X2, K2[2] = W2[2] * X2, K2[3] = W2[3] * X2, K2[4] = W2[4] * X2, K2[5] = W2[5] * X2, K2[6] = W2[6] * X2, K2[7] = W2[7] * X2, K2[8] = W2[8] * X2, K2[9] = W2[9] * X2, K2[10] = W2[10] * X2, K2[11] = W2[11] * X2, K2[12] = W2[12] * X2, K2[13] = W2[13] * X2, K2[14] = W2[14] * X2, K2[15] = W2[15] * X2, K2;
};
var zK = function(K2, W2, X2, Y) {
  return K2[0] = W2[0] + X2[0] * Y, K2[1] = W2[1] + X2[1] * Y, K2[2] = W2[2] + X2[2] * Y, K2[3] = W2[3] + X2[3] * Y, K2[4] = W2[4] + X2[4] * Y, K2[5] = W2[5] + X2[5] * Y, K2[6] = W2[6] + X2[6] * Y, K2[7] = W2[7] + X2[7] * Y, K2[8] = W2[8] + X2[8] * Y, K2[9] = W2[9] + X2[9] * Y, K2[10] = W2[10] + X2[10] * Y, K2[11] = W2[11] + X2[11] * Y, K2[12] = W2[12] + X2[12] * Y, K2[13] = W2[13] + X2[13] * Y, K2[14] = W2[14] + X2[14] * Y, K2[15] = W2[15] + X2[15] * Y, K2;
};
var sK = function(K2, W2) {
  return K2[0] === W2[0] && K2[1] === W2[1] && K2[2] === W2[2] && K2[3] === W2[3] && K2[4] === W2[4] && K2[5] === W2[5] && K2[6] === W2[6] && K2[7] === W2[7] && K2[8] === W2[8] && K2[9] === W2[9] && K2[10] === W2[10] && K2[11] === W2[11] && K2[12] === W2[12] && K2[13] === W2[13] && K2[14] === W2[14] && K2[15] === W2[15];
};
var rK = function(K2, W2) {
  var X2 = K2[0], Y = K2[1], $2 = K2[2], Q3 = K2[3], Z2 = K2[4], B2 = K2[5], O3 = K2[6], J = K2[7], G2 = K2[8], L2 = K2[9], C3 = K2[10], V22 = K2[11], D3 = K2[12], E3 = K2[13], H = K2[14], I = K2[15], T22 = W2[0], R2 = W2[1], P = W2[2], U = W2[3], A3 = W2[4], p2 = W2[5], h = W2[6], j2 = W2[7], M2 = W2[8], F = W2[9], q = W2[10], g2 = W2[11], S2 = W2[12], f2 = W2[13], i = W2[14], y = W2[15];
  return Math.abs(X2 - T22) <= N2 * Math.max(1, Math.abs(X2), Math.abs(T22)) && Math.abs(Y - R2) <= N2 * Math.max(1, Math.abs(Y), Math.abs(R2)) && Math.abs($2 - P) <= N2 * Math.max(1, Math.abs($2), Math.abs(P)) && Math.abs(Q3 - U) <= N2 * Math.max(1, Math.abs(Q3), Math.abs(U)) && Math.abs(Z2 - A3) <= N2 * Math.max(1, Math.abs(Z2), Math.abs(A3)) && Math.abs(B2 - p2) <= N2 * Math.max(1, Math.abs(B2), Math.abs(p2)) && Math.abs(O3 - h) <= N2 * Math.max(1, Math.abs(O3), Math.abs(h)) && Math.abs(J - j2) <= N2 * Math.max(1, Math.abs(J), Math.abs(j2)) && Math.abs(G2 - M2) <= N2 * Math.max(1, Math.abs(G2), Math.abs(M2)) && Math.abs(L2 - F) <= N2 * Math.max(1, Math.abs(L2), Math.abs(F)) && Math.abs(C3 - q) <= N2 * Math.max(1, Math.abs(C3), Math.abs(q)) && Math.abs(V22 - g2) <= N2 * Math.max(1, Math.abs(V22), Math.abs(g2)) && Math.abs(D3 - S2) <= N2 * Math.max(1, Math.abs(D3), Math.abs(S2)) && Math.abs(E3 - f2) <= N2 * Math.max(1, Math.abs(E3), Math.abs(f2)) && Math.abs(H - i) <= N2 * Math.max(1, Math.abs(H), Math.abs(i)) && Math.abs(I - y) <= N2 * Math.max(1, Math.abs(I), Math.abs(y));
};
var e = function() {
  var K2 = new k(3);
  if (k != Float32Array)
    K2[0] = 0, K2[1] = 0, K2[2] = 0;
  return K2;
};
var eK = function(K2) {
  var W2 = new k(3);
  return W2[0] = K2[0], W2[1] = K2[1], W2[2] = K2[2], W2;
};
var I0 = function(K2) {
  var W2 = K2[0], X2 = K2[1], Y = K2[2];
  return Math.hypot(W2, X2, Y);
};
var b = function(K2, W2, X2) {
  var Y = new k(3);
  return Y[0] = K2, Y[1] = W2, Y[2] = X2, Y;
};
var bK = function(K2, W2) {
  return K2[0] = W2[0], K2[1] = W2[1], K2[2] = W2[2], K2;
};
var uK = function(K2, W2, X2, Y) {
  return K2[0] = W2, K2[1] = X2, K2[2] = Y, K2;
};
var oK = function(K2, W2, X2) {
  return K2[0] = W2[0] + X2[0], K2[1] = W2[1] + X2[1], K2[2] = W2[2] + X2[2], K2;
};
var U0 = function(K2, W2, X2) {
  return K2[0] = W2[0] - X2[0], K2[1] = W2[1] - X2[1], K2[2] = W2[2] - X2[2], K2;
};
var A0 = function(K2, W2, X2) {
  return K2[0] = W2[0] * X2[0], K2[1] = W2[1] * X2[1], K2[2] = W2[2] * X2[2], K2;
};
var P0 = function(K2, W2, X2) {
  return K2[0] = W2[0] / X2[0], K2[1] = W2[1] / X2[1], K2[2] = W2[2] / X2[2], K2;
};
var tK = function(K2, W2) {
  return K2[0] = Math.ceil(W2[0]), K2[1] = Math.ceil(W2[1]), K2[2] = Math.ceil(W2[2]), K2;
};
var aK = function(K2, W2) {
  return K2[0] = Math.floor(W2[0]), K2[1] = Math.floor(W2[1]), K2[2] = Math.floor(W2[2]), K2;
};
var KW = function(K2, W2, X2) {
  return K2[0] = Math.min(W2[0], X2[0]), K2[1] = Math.min(W2[1], X2[1]), K2[2] = Math.min(W2[2], X2[2]), K2;
};
var WW = function(K2, W2, X2) {
  return K2[0] = Math.max(W2[0], X2[0]), K2[1] = Math.max(W2[1], X2[1]), K2[2] = Math.max(W2[2], X2[2]), K2;
};
var XW = function(K2, W2) {
  return K2[0] = Math.round(W2[0]), K2[1] = Math.round(W2[1]), K2[2] = Math.round(W2[2]), K2;
};
var YW = function(K2, W2, X2) {
  return K2[0] = W2[0] * X2, K2[1] = W2[1] * X2, K2[2] = W2[2] * X2, K2;
};
var $W = function(K2, W2, X2, Y) {
  return K2[0] = W2[0] + X2[0] * Y, K2[1] = W2[1] + X2[1] * Y, K2[2] = W2[2] + X2[2] * Y, K2;
};
var R0 = function(K2, W2) {
  var X2 = W2[0] - K2[0], Y = W2[1] - K2[1], $2 = W2[2] - K2[2];
  return Math.hypot(X2, Y, $2);
};
var N0 = function(K2, W2) {
  var X2 = W2[0] - K2[0], Y = W2[1] - K2[1], $2 = W2[2] - K2[2];
  return X2 * X2 + Y * Y + $2 * $2;
};
var T0 = function(K2) {
  var W2 = K2[0], X2 = K2[1], Y = K2[2];
  return W2 * W2 + X2 * X2 + Y * Y;
};
var QW = function(K2, W2) {
  return K2[0] = -W2[0], K2[1] = -W2[1], K2[2] = -W2[2], K2;
};
var ZW = function(K2, W2) {
  return K2[0] = 1 / W2[0], K2[1] = 1 / W2[1], K2[2] = 1 / W2[2], K2;
};
var K0 = function(K2, W2) {
  var X2 = W2[0], Y = W2[1], $2 = W2[2], Q3 = X2 * X2 + Y * Y + $2 * $2;
  if (Q3 > 0)
    Q3 = 1 / Math.sqrt(Q3);
  return K2[0] = W2[0] * Q3, K2[1] = W2[1] * Q3, K2[2] = W2[2] * Q3, K2;
};
var u2 = function(K2, W2) {
  return K2[0] * W2[0] + K2[1] * W2[1] + K2[2] * W2[2];
};
var s2 = function(K2, W2, X2) {
  var Y = W2[0], $2 = W2[1], Q3 = W2[2], Z2 = X2[0], B2 = X2[1], O3 = X2[2];
  return K2[0] = $2 * O3 - Q3 * B2, K2[1] = Q3 * Z2 - Y * O3, K2[2] = Y * B2 - $2 * Z2, K2;
};
var BW = function(K2, W2, X2, Y) {
  var $2 = W2[0], Q3 = W2[1], Z2 = W2[2];
  return K2[0] = $2 + Y * (X2[0] - $2), K2[1] = Q3 + Y * (X2[1] - Q3), K2[2] = Z2 + Y * (X2[2] - Z2), K2;
};
var OW = function(K2, W2, X2, Y, $2, Q3) {
  var Z2 = Q3 * Q3, B2 = Z2 * (2 * Q3 - 3) + 1, O3 = Z2 * (Q3 - 2) + Q3, J = Z2 * (Q3 - 1), G2 = Z2 * (3 - 2 * Q3);
  return K2[0] = W2[0] * B2 + X2[0] * O3 + Y[0] * J + $2[0] * G2, K2[1] = W2[1] * B2 + X2[1] * O3 + Y[1] * J + $2[1] * G2, K2[2] = W2[2] * B2 + X2[2] * O3 + Y[2] * J + $2[2] * G2, K2;
};
var JW = function(K2, W2, X2, Y, $2, Q3) {
  var Z2 = 1 - Q3, B2 = Z2 * Z2, O3 = Q3 * Q3, J = B2 * Z2, G2 = 3 * Q3 * B2, L2 = 3 * O3 * Z2, C3 = O3 * Q3;
  return K2[0] = W2[0] * J + X2[0] * G2 + Y[0] * L2 + $2[0] * C3, K2[1] = W2[1] * J + X2[1] * G2 + Y[1] * L2 + $2[1] * C3, K2[2] = W2[2] * J + X2[2] * G2 + Y[2] * L2 + $2[2] * C3, K2;
};
var GW = function(K2, W2) {
  W2 = W2 || 1;
  var X2 = v2() * 2 * Math.PI, Y = v2() * 2 - 1, $2 = Math.sqrt(1 - Y * Y) * W2;
  return K2[0] = Math.cos(X2) * $2, K2[1] = Math.sin(X2) * $2, K2[2] = Y * W2, K2;
};
var HW = function(K2, W2, X2) {
  var Y = W2[0], $2 = W2[1], Q3 = W2[2], Z2 = X2[3] * Y + X2[7] * $2 + X2[11] * Q3 + X2[15];
  return Z2 = Z2 || 1, K2[0] = (X2[0] * Y + X2[4] * $2 + X2[8] * Q3 + X2[12]) / Z2, K2[1] = (X2[1] * Y + X2[5] * $2 + X2[9] * Q3 + X2[13]) / Z2, K2[2] = (X2[2] * Y + X2[6] * $2 + X2[10] * Q3 + X2[14]) / Z2, K2;
};
var LW = function(K2, W2, X2) {
  var Y = W2[0], $2 = W2[1], Q3 = W2[2];
  return K2[0] = Y * X2[0] + $2 * X2[3] + Q3 * X2[6], K2[1] = Y * X2[1] + $2 * X2[4] + Q3 * X2[7], K2[2] = Y * X2[2] + $2 * X2[5] + Q3 * X2[8], K2;
};
var VW = function(K2, W2, X2) {
  var Y = X2[0], $2 = X2[1], Q3 = X2[2], Z2 = X2[3], B2 = W2[0], O3 = W2[1], J = W2[2], G2 = $2 * J - Q3 * O3, L2 = Q3 * B2 - Y * J, C3 = Y * O3 - $2 * B2, V22 = $2 * C3 - Q3 * L2, D3 = Q3 * G2 - Y * C3, E3 = Y * L2 - $2 * G2, H = Z2 * 2;
  return G2 *= H, L2 *= H, C3 *= H, V22 *= 2, D3 *= 2, E3 *= 2, K2[0] = B2 + G2 + V22, K2[1] = O3 + L2 + D3, K2[2] = J + C3 + E3, K2;
};
var CW = function(K2, W2, X2, Y) {
  var $2 = [], Q3 = [];
  return $2[0] = W2[0] - X2[0], $2[1] = W2[1] - X2[1], $2[2] = W2[2] - X2[2], Q3[0] = $2[0], Q3[1] = $2[1] * Math.cos(Y) - $2[2] * Math.sin(Y), Q3[2] = $2[1] * Math.sin(Y) + $2[2] * Math.cos(Y), K2[0] = Q3[0] + X2[0], K2[1] = Q3[1] + X2[1], K2[2] = Q3[2] + X2[2], K2;
};
var EW = function(K2, W2, X2, Y) {
  var $2 = [], Q3 = [];
  return $2[0] = W2[0] - X2[0], $2[1] = W2[1] - X2[1], $2[2] = W2[2] - X2[2], Q3[0] = $2[2] * Math.sin(Y) + $2[0] * Math.cos(Y), Q3[1] = $2[1], Q3[2] = $2[2] * Math.cos(Y) - $2[0] * Math.sin(Y), K2[0] = Q3[0] + X2[0], K2[1] = Q3[1] + X2[1], K2[2] = Q3[2] + X2[2], K2;
};
var DW = function(K2, W2, X2, Y) {
  var $2 = [], Q3 = [];
  return $2[0] = W2[0] - X2[0], $2[1] = W2[1] - X2[1], $2[2] = W2[2] - X2[2], Q3[0] = $2[0] * Math.cos(Y) - $2[1] * Math.sin(Y), Q3[1] = $2[0] * Math.sin(Y) + $2[1] * Math.cos(Y), Q3[2] = $2[2], K2[0] = Q3[0] + X2[0], K2[1] = Q3[1] + X2[1], K2[2] = Q3[2] + X2[2], K2;
};
var IW = function(K2, W2) {
  var X2 = K2[0], Y = K2[1], $2 = K2[2], Q3 = W2[0], Z2 = W2[1], B2 = W2[2], O3 = Math.sqrt(X2 * X2 + Y * Y + $2 * $2), J = Math.sqrt(Q3 * Q3 + Z2 * Z2 + B2 * B2), G2 = O3 * J, L2 = G2 && u2(K2, W2) / G2;
  return Math.acos(Math.min(Math.max(L2, -1), 1));
};
var UW = function(K2) {
  return K2[0] = 0, K2[1] = 0, K2[2] = 0, K2;
};
var AW = function(K2) {
  return "vec3(" + K2[0] + ", " + K2[1] + ", " + K2[2] + ")";
};
var PW = function(K2, W2) {
  return K2[0] === W2[0] && K2[1] === W2[1] && K2[2] === W2[2];
};
var RW = function(K2, W2) {
  var X2 = K2[0], Y = K2[1], $2 = K2[2], Q3 = W2[0], Z2 = W2[1], B2 = W2[2];
  return Math.abs(X2 - Q3) <= N2 * Math.max(1, Math.abs(X2), Math.abs(Q3)) && Math.abs(Y - Z2) <= N2 * Math.max(1, Math.abs(Y), Math.abs(Z2)) && Math.abs($2 - B2) <= N2 * Math.max(1, Math.abs($2), Math.abs(B2));
};
var MW = function() {
  var K2 = new k(4);
  if (k != Float32Array)
    K2[0] = 0, K2[1] = 0, K2[2] = 0, K2[3] = 0;
  return K2;
};
var S0 = function(K2) {
  var W2 = new k(4);
  return W2[0] = K2[0], W2[1] = K2[1], W2[2] = K2[2], W2[3] = K2[3], W2;
};
var _0 = function(K2, W2, X2, Y) {
  var $2 = new k(4);
  return $2[0] = K2, $2[1] = W2, $2[2] = X2, $2[3] = Y, $2;
};
var k0 = function(K2, W2) {
  return K2[0] = W2[0], K2[1] = W2[1], K2[2] = W2[2], K2[3] = W2[3], K2;
};
var h0 = function(K2, W2, X2, Y, $2) {
  return K2[0] = W2, K2[1] = X2, K2[2] = Y, K2[3] = $2, K2;
};
var j0 = function(K2, W2, X2) {
  return K2[0] = W2[0] + X2[0], K2[1] = W2[1] + X2[1], K2[2] = W2[2] + X2[2], K2[3] = W2[3] + X2[3], K2;
};
var M0 = function(K2, W2, X2) {
  return K2[0] = W2[0] * X2, K2[1] = W2[1] * X2, K2[2] = W2[2] * X2, K2[3] = W2[3] * X2, K2;
};
var p0 = function(K2) {
  var W2 = K2[0], X2 = K2[1], Y = K2[2], $2 = K2[3];
  return Math.hypot(W2, X2, Y, $2);
};
var F0 = function(K2) {
  var W2 = K2[0], X2 = K2[1], Y = K2[2], $2 = K2[3];
  return W2 * W2 + X2 * X2 + Y * Y + $2 * $2;
};
var q0 = function(K2, W2) {
  var X2 = W2[0], Y = W2[1], $2 = W2[2], Q3 = W2[3], Z2 = X2 * X2 + Y * Y + $2 * $2 + Q3 * Q3;
  if (Z2 > 0)
    Z2 = 1 / Math.sqrt(Z2);
  return K2[0] = X2 * Z2, K2[1] = Y * Z2, K2[2] = $2 * Z2, K2[3] = Q3 * Z2, K2;
};
var g0 = function(K2, W2) {
  return K2[0] * W2[0] + K2[1] * W2[1] + K2[2] * W2[2] + K2[3] * W2[3];
};
var f0 = function(K2, W2, X2, Y) {
  var $2 = W2[0], Q3 = W2[1], Z2 = W2[2], B2 = W2[3];
  return K2[0] = $2 + Y * (X2[0] - $2), K2[1] = Q3 + Y * (X2[1] - Q3), K2[2] = Z2 + Y * (X2[2] - Z2), K2[3] = B2 + Y * (X2[3] - B2), K2;
};
var w0 = function(K2, W2) {
  return K2[0] === W2[0] && K2[1] === W2[1] && K2[2] === W2[2] && K2[3] === W2[3];
};
var d0 = function(K2, W2) {
  var X2 = K2[0], Y = K2[1], $2 = K2[2], Q3 = K2[3], Z2 = W2[0], B2 = W2[1], O3 = W2[2], J = W2[3];
  return Math.abs(X2 - Z2) <= N2 * Math.max(1, Math.abs(X2), Math.abs(Z2)) && Math.abs(Y - B2) <= N2 * Math.max(1, Math.abs(Y), Math.abs(B2)) && Math.abs($2 - O3) <= N2 * Math.max(1, Math.abs($2), Math.abs(O3)) && Math.abs(Q3 - J) <= N2 * Math.max(1, Math.abs(Q3), Math.abs(J));
};
var X0 = function() {
  var K2 = new k(4);
  if (k != Float32Array)
    K2[0] = 0, K2[1] = 0, K2[2] = 0;
  return K2[3] = 1, K2;
};
var FW = function(K2) {
  return K2[0] = 0, K2[1] = 0, K2[2] = 0, K2[3] = 1, K2;
};
var v0 = function(K2, W2, X2) {
  X2 = X2 * 0.5;
  var Y = Math.sin(X2);
  return K2[0] = Y * W2[0], K2[1] = Y * W2[1], K2[2] = Y * W2[2], K2[3] = Math.cos(X2), K2;
};
var qW = function(K2, W2) {
  var X2 = Math.acos(W2[3]) * 2, Y = Math.sin(X2 / 2);
  if (Y > N2)
    K2[0] = W2[0] / Y, K2[1] = W2[1] / Y, K2[2] = W2[2] / Y;
  else
    K2[0] = 1, K2[1] = 0, K2[2] = 0;
  return X2;
};
var gW = function(K2, W2) {
  var X2 = z0(K2, W2);
  return Math.acos(2 * X2 * X2 - 1);
};
var n0 = function(K2, W2, X2) {
  var Y = W2[0], $2 = W2[1], Q3 = W2[2], Z2 = W2[3], B2 = X2[0], O3 = X2[1], J = X2[2], G2 = X2[3];
  return K2[0] = Y * G2 + Z2 * B2 + $2 * J - Q3 * O3, K2[1] = $2 * G2 + Z2 * O3 + Q3 * B2 - Y * J, K2[2] = Q3 * G2 + Z2 * J + Y * O3 - $2 * B2, K2[3] = Z2 * G2 - Y * B2 - $2 * O3 - Q3 * J, K2;
};
var fW = function(K2, W2, X2) {
  X2 *= 0.5;
  var Y = W2[0], $2 = W2[1], Q3 = W2[2], Z2 = W2[3], B2 = Math.sin(X2), O3 = Math.cos(X2);
  return K2[0] = Y * O3 + Z2 * B2, K2[1] = $2 * O3 + Q3 * B2, K2[2] = Q3 * O3 - $2 * B2, K2[3] = Z2 * O3 - Y * B2, K2;
};
var wW = function(K2, W2, X2) {
  X2 *= 0.5;
  var Y = W2[0], $2 = W2[1], Q3 = W2[2], Z2 = W2[3], B2 = Math.sin(X2), O3 = Math.cos(X2);
  return K2[0] = Y * O3 - Q3 * B2, K2[1] = $2 * O3 + Z2 * B2, K2[2] = Q3 * O3 + Y * B2, K2[3] = Z2 * O3 - $2 * B2, K2;
};
var dW = function(K2, W2, X2) {
  X2 *= 0.5;
  var Y = W2[0], $2 = W2[1], Q3 = W2[2], Z2 = W2[3], B2 = Math.sin(X2), O3 = Math.cos(X2);
  return K2[0] = Y * O3 + $2 * B2, K2[1] = $2 * O3 - Y * B2, K2[2] = Q3 * O3 + Z2 * B2, K2[3] = Z2 * O3 - Q3 * B2, K2;
};
var vW = function(K2, W2) {
  var X2 = W2[0], Y = W2[1], $2 = W2[2];
  return K2[0] = X2, K2[1] = Y, K2[2] = $2, K2[3] = Math.sqrt(Math.abs(1 - X2 * X2 - Y * Y - $2 * $2)), K2;
};
var l0 = function(K2, W2) {
  var X2 = W2[0], Y = W2[1], $2 = W2[2], Q3 = W2[3], Z2 = Math.sqrt(X2 * X2 + Y * Y + $2 * $2), B2 = Math.exp(Q3), O3 = Z2 > 0 ? B2 * Math.sin(Z2) / Z2 : 0;
  return K2[0] = X2 * O3, K2[1] = Y * O3, K2[2] = $2 * O3, K2[3] = B2 * Math.cos(Z2), K2;
};
var c0 = function(K2, W2) {
  var X2 = W2[0], Y = W2[1], $2 = W2[2], Q3 = W2[3], Z2 = Math.sqrt(X2 * X2 + Y * Y + $2 * $2), B2 = Z2 > 0 ? Math.atan2(Z2, Q3) / Z2 : 0;
  return K2[0] = X2 * B2, K2[1] = Y * B2, K2[2] = $2 * B2, K2[3] = 0.5 * Math.log(X2 * X2 + Y * Y + $2 * $2 + Q3 * Q3), K2;
};
var nW = function(K2, W2, X2) {
  return c0(K2, W2), y0(K2, K2, X2), l0(K2, K2), K2;
};
var o = function(K2, W2, X2, Y) {
  var $2 = W2[0], Q3 = W2[1], Z2 = W2[2], B2 = W2[3], O3 = X2[0], J = X2[1], G2 = X2[2], L2 = X2[3], C3, V22, D3, E3, H;
  if (V22 = $2 * O3 + Q3 * J + Z2 * G2 + B2 * L2, V22 < 0)
    V22 = -V22, O3 = -O3, J = -J, G2 = -G2, L2 = -L2;
  if (1 - V22 > N2)
    C3 = Math.acos(V22), D3 = Math.sin(C3), E3 = Math.sin((1 - Y) * C3) / D3, H = Math.sin(Y * C3) / D3;
  else
    E3 = 1 - Y, H = Y;
  return K2[0] = E3 * $2 + H * O3, K2[1] = E3 * Q3 + H * J, K2[2] = E3 * Z2 + H * G2, K2[3] = E3 * B2 + H * L2, K2;
};
var lW = function(K2) {
  var W2 = v2(), X2 = v2(), Y = v2(), $2 = Math.sqrt(1 - W2), Q3 = Math.sqrt(W2);
  return K2[0] = $2 * Math.sin(2 * Math.PI * X2), K2[1] = $2 * Math.cos(2 * Math.PI * X2), K2[2] = Q3 * Math.sin(2 * Math.PI * Y), K2[3] = Q3 * Math.cos(2 * Math.PI * Y), K2;
};
var cW = function(K2, W2) {
  var X2 = W2[0], Y = W2[1], $2 = W2[2], Q3 = W2[3], Z2 = X2 * X2 + Y * Y + $2 * $2 + Q3 * Q3, B2 = Z2 ? 1 / Z2 : 0;
  return K2[0] = -X2 * B2, K2[1] = -Y * B2, K2[2] = -$2 * B2, K2[3] = Q3 * B2, K2;
};
var iW = function(K2, W2) {
  return K2[0] = -W2[0], K2[1] = -W2[1], K2[2] = -W2[2], K2[3] = W2[3], K2;
};
var i0 = function(K2, W2) {
  var X2 = W2[0] + W2[4] + W2[8], Y;
  if (X2 > 0)
    Y = Math.sqrt(X2 + 1), K2[3] = 0.5 * Y, Y = 0.5 / Y, K2[0] = (W2[5] - W2[7]) * Y, K2[1] = (W2[6] - W2[2]) * Y, K2[2] = (W2[1] - W2[3]) * Y;
  else {
    var $2 = 0;
    if (W2[4] > W2[0])
      $2 = 1;
    if (W2[8] > W2[$2 * 3 + $2])
      $2 = 2;
    var Q3 = ($2 + 1) % 3, Z2 = ($2 + 2) % 3;
    Y = Math.sqrt(W2[$2 * 3 + $2] - W2[Q3 * 3 + Q3] - W2[Z2 * 3 + Z2] + 1), K2[$2] = 0.5 * Y, Y = 0.5 / Y, K2[3] = (W2[Q3 * 3 + Z2] - W2[Z2 * 3 + Q3]) * Y, K2[Q3] = (W2[Q3 * 3 + $2] + W2[$2 * 3 + Q3]) * Y, K2[Z2] = (W2[Z2 * 3 + $2] + W2[$2 * 3 + Z2]) * Y;
  }
  return K2;
};
var yW = function(K2, W2, X2, Y) {
  var $2 = 0.5 * Math.PI / 180;
  W2 *= $2, X2 *= $2, Y *= $2;
  var Q3 = Math.sin(W2), Z2 = Math.cos(W2), B2 = Math.sin(X2), O3 = Math.cos(X2), J = Math.sin(Y), G2 = Math.cos(Y);
  return K2[0] = Q3 * O3 * G2 - Z2 * B2 * J, K2[1] = Z2 * B2 * G2 + Q3 * O3 * J, K2[2] = Z2 * O3 * J - Q3 * B2 * G2, K2[3] = Z2 * O3 * G2 + Q3 * B2 * J, K2;
};
var zW = function(K2) {
  return "quat(" + K2[0] + ", " + K2[1] + ", " + K2[2] + ", " + K2[3] + ")";
};
var ZX = function(K2) {
  return o0((W2, X2) => W2.setYRotation(X2), K2);
};
var BX = function(K2) {
  return o0((W2, X2) => W2.setXRotation(X2), K2);
};
var WK = Object.defineProperty;
var a = (K2, W2) => {
  for (var X2 in W2)
    WK(K2, X2, { get: W2[X2], enumerable: true, configurable: true, set: (Y) => W2[X2] = () => Y });
};
var N2 = 0.000001;
var k = typeof Float32Array !== "undefined" ? Float32Array : Array;
var v2 = Math.random;
var LX = Math.PI / 180;
if (!Math.hypot)
  Math.hypot = function() {
    var K2 = 0, W2 = arguments.length;
    while (W2--)
      K2 += arguments[W2] * arguments[W2];
    return Math.sqrt(K2);
  };
var _2 = {};
a(_2, { transpose: () => {
  {
    return JK;
  }
}, translate: () => {
  {
    return VK;
  }
}, targetTo: () => {
  {
    return nK;
  }
}, subtract: () => {
  {
    return D0;
  }
}, sub: () => {
  {
    return xK;
  }
}, str: () => {
  {
    return lK;
  }
}, set: () => {
  {
    return OK;
  }
}, scale: () => {
  {
    return CK;
  }
}, rotateZ: () => {
  {
    return UK;
  }
}, rotateY: () => {
  {
    return IK;
  }
}, rotateX: () => {
  {
    return DK;
  }
}, rotate: () => {
  {
    return EK;
  }
}, perspectiveZO: () => {
  {
    return gK;
  }
}, perspectiveNO: () => {
  {
    return C0;
  }
}, perspectiveFromFieldOfView: () => {
  {
    return fK;
  }
}, perspective: () => {
  {
    return qK;
  }
}, orthoZO: () => {
  {
    return dK;
  }
}, orthoNO: () => {
  {
    return E0;
  }
}, ortho: () => {
  {
    return wK;
  }
}, multiplyScalarAndAdd: () => {
  {
    return zK;
  }
}, multiplyScalar: () => {
  {
    return yK;
  }
}, multiply: () => {
  {
    return H0;
  }
}, mul: () => {
  {
    return mK;
  }
}, lookAt: () => {
  {
    return vK;
  }
}, invert: () => {
  {
    return GK;
  }
}, identity: () => {
  {
    return G0;
  }
}, getTranslation: () => {
  {
    return kK;
  }
}, getScaling: () => {
  {
    return V0;
  }
}, getRotation: () => {
  {
    return hK;
  }
}, frustum: () => {
  {
    return FK;
  }
}, fromZRotation: () => {
  {
    return SK;
  }
}, fromYRotation: () => {
  {
    return TK;
  }
}, fromXRotation: () => {
  {
    return NK;
  }
}, fromValues: () => {
  {
    return BK;
  }
}, fromTranslation: () => {
  {
    return AK;
  }
}, fromScaling: () => {
  {
    return PK;
  }
}, fromRotationTranslationScaleOrigin: () => {
  {
    return MK;
  }
}, fromRotationTranslationScale: () => {
  {
    return jK;
  }
}, fromRotationTranslation: () => {
  {
    return L0;
  }
}, fromRotation: () => {
  {
    return RK;
  }
}, fromQuat2: () => {
  {
    return _K;
  }
}, fromQuat: () => {
  {
    return pK;
  }
}, frob: () => {
  {
    return cK;
  }
}, exactEquals: () => {
  {
    return sK;
  }
}, equals: () => {
  {
    return rK;
  }
}, determinant: () => {
  {
    return LK;
  }
}, create: () => {
  {
    return $K;
  }
}, copy: () => {
  {
    return ZK;
  }
}, clone: () => {
  {
    return QK;
  }
}, adjoint: () => {
  {
    return HK;
  }
}, add: () => {
  {
    return iK;
  }
} });
var qK = C0;
var wK = E0;
var mK = H0;
var xK = D0;
var m = {};
a(m, { str: () => {
  {
    return zW;
  }
}, squaredLength: () => {
  {
    return r0;
  }
}, sqrLen: () => {
  {
    return tW;
  }
}, sqlerp: () => {
  {
    return XX;
  }
}, slerp: () => {
  {
    return o;
  }
}, setAxisAngle: () => {
  {
    return v0;
  }
}, setAxes: () => {
  {
    return YX;
  }
}, set: () => {
  {
    return xW;
  }
}, scale: () => {
  {
    return y0;
  }
}, rotationTo: () => {
  {
    return WX;
  }
}, rotateZ: () => {
  {
    return dW;
  }
}, rotateY: () => {
  {
    return wW;
  }
}, rotateX: () => {
  {
    return fW;
  }
}, random: () => {
  {
    return lW;
  }
}, pow: () => {
  {
    return nW;
  }
}, normalize: () => {
  {
    return Y0;
  }
}, multiply: () => {
  {
    return n0;
  }
}, mul: () => {
  {
    return bW;
  }
}, ln: () => {
  {
    return c0;
  }
}, lerp: () => {
  {
    return uW;
  }
}, length: () => {
  {
    return s0;
  }
}, len: () => {
  {
    return oW;
  }
}, invert: () => {
  {
    return cW;
  }
}, identity: () => {
  {
    return FW;
  }
}, getAxisAngle: () => {
  {
    return qW;
  }
}, getAngle: () => {
  {
    return gW;
  }
}, fromValues: () => {
  {
    return rW;
  }
}, fromMat3: () => {
  {
    return i0;
  }
}, fromEuler: () => {
  {
    return yW;
  }
}, exp: () => {
  {
    return l0;
  }
}, exactEquals: () => {
  {
    return aW;
  }
}, equals: () => {
  {
    return KX;
  }
}, dot: () => {
  {
    return z0;
  }
}, create: () => {
  {
    return X0;
  }
}, copy: () => {
  {
    return mW;
  }
}, conjugate: () => {
  {
    return iW;
  }
}, clone: () => {
  {
    return sW;
  }
}, calculateW: () => {
  {
    return vW;
  }
}, add: () => {
  {
    return eW;
  }
} });
var r = {};
a(r, { zero: () => {
  {
    return UW;
  }
}, transformQuat: () => {
  {
    return VW;
  }
}, transformMat4: () => {
  {
    return HW;
  }
}, transformMat3: () => {
  {
    return LW;
  }
}, subtract: () => {
  {
    return U0;
  }
}, sub: () => {
  {
    return NW;
  }
}, str: () => {
  {
    return AW;
  }
}, squaredLength: () => {
  {
    return T0;
  }
}, squaredDistance: () => {
  {
    return N0;
  }
}, sqrLen: () => {
  {
    return hW;
  }
}, sqrDist: () => {
  {
    return kW;
  }
}, set: () => {
  {
    return uK;
  }
}, scaleAndAdd: () => {
  {
    return $W;
  }
}, scale: () => {
  {
    return YW;
  }
}, round: () => {
  {
    return XW;
  }
}, rotateZ: () => {
  {
    return DW;
  }
}, rotateY: () => {
  {
    return EW;
  }
}, rotateX: () => {
  {
    return CW;
  }
}, random: () => {
  {
    return GW;
  }
}, normalize: () => {
  {
    return K0;
  }
}, negate: () => {
  {
    return QW;
  }
}, multiply: () => {
  {
    return A0;
  }
}, mul: () => {
  {
    return TW;
  }
}, min: () => {
  {
    return KW;
  }
}, max: () => {
  {
    return WW;
  }
}, lerp: () => {
  {
    return BW;
  }
}, length: () => {
  {
    return I0;
  }
}, len: () => {
  {
    return W0;
  }
}, inverse: () => {
  {
    return ZW;
  }
}, hermite: () => {
  {
    return OW;
  }
}, fromValues: () => {
  {
    return b;
  }
}, forEach: () => {
  {
    return jW;
  }
}, floor: () => {
  {
    return aK;
  }
}, exactEquals: () => {
  {
    return PW;
  }
}, equals: () => {
  {
    return RW;
  }
}, dot: () => {
  {
    return u2;
  }
}, divide: () => {
  {
    return P0;
  }
}, div: () => {
  {
    return SW;
  }
}, distance: () => {
  {
    return R0;
  }
}, dist: () => {
  {
    return _W;
  }
}, cross: () => {
  {
    return s2;
  }
}, create: () => {
  {
    return e;
  }
}, copy: () => {
  {
    return bK;
  }
}, clone: () => {
  {
    return eK;
  }
}, ceil: () => {
  {
    return tK;
  }
}, bezier: () => {
  {
    return JW;
  }
}, angle: () => {
  {
    return IW;
  }
}, add: () => {
  {
    return oK;
  }
} });
var NW = U0;
var TW = A0;
var SW = P0;
var _W = R0;
var kW = N0;
var W0 = I0;
var hW = T0;
var jW = function() {
  var K2 = e();
  return function(W2, X2, Y, $2, Q3, Z2) {
    var B2, O3;
    if (!X2)
      X2 = 3;
    if (!Y)
      Y = 0;
    if ($2)
      O3 = Math.min($2 * X2 + Y, W2.length);
    else
      O3 = W2.length;
    for (B2 = Y;B2 < O3; B2 += X2)
      K2[0] = W2[B2], K2[1] = W2[B2 + 1], K2[2] = W2[B2 + 2], Q3(K2, K2, Z2), W2[B2] = K2[0], W2[B2 + 1] = K2[1], W2[B2 + 2] = K2[2];
    return W2;
  };
}();
var VX = function() {
  var K2 = MW();
  return function(W2, X2, Y, $2, Q3, Z2) {
    var B2, O3;
    if (!X2)
      X2 = 4;
    if (!Y)
      Y = 0;
    if ($2)
      O3 = Math.min($2 * X2 + Y, W2.length);
    else
      O3 = W2.length;
    for (B2 = Y;B2 < O3; B2 += X2)
      K2[0] = W2[B2], K2[1] = W2[B2 + 1], K2[2] = W2[B2 + 2], K2[3] = W2[B2 + 3], Q3(K2, K2, Z2), W2[B2] = K2[0], W2[B2 + 1] = K2[1], W2[B2 + 2] = K2[2], W2[B2 + 3] = K2[3];
    return W2;
  };
}();
var sW = S0;
var rW = _0;
var mW = k0;
var xW = h0;
var eW = j0;
var bW = n0;
var y0 = M0;
var z0 = g0;
var uW = f0;
var s0 = p0;
var oW = s0;
var r0 = F0;
var tW = r0;
var Y0 = q0;
var aW = w0;
var KX = d0;
var WX = function() {
  var K2 = e(), W2 = b(1, 0, 0), X2 = b(0, 1, 0);
  return function(Y, $2, Q3) {
    var Z2 = u2($2, Q3);
    if (Z2 < -0.999999) {
      if (s2(K2, W2, $2), W0(K2) < 0.000001)
        s2(K2, X2, $2);
      return K0(K2, K2), v0(Y, K2, Math.PI), Y;
    } else if (Z2 > 0.999999)
      return Y[0] = 0, Y[1] = 0, Y[2] = 0, Y[3] = 1, Y;
    else
      return s2(K2, $2, Q3), Y[0] = K2[0], Y[1] = K2[1], Y[2] = K2[2], Y[3] = 1 + Z2, Y0(Y, Y);
  };
}();
var XX = function() {
  var K2 = X0(), W2 = X0();
  return function(X2, Y, $2, Q3, Z2, B2) {
    return o(K2, Y, Z2, B2), o(W2, $2, Q3, B2), o(X2, K2, W2, 2 * B2 * (1 - B2)), X2;
  };
}();
var YX = function() {
  var K2 = J0();
  return function(W2, X2, Y, $2) {
    return K2[0] = Y[0], K2[3] = Y[1], K2[6] = Y[2], K2[1] = $2[0], K2[4] = $2[1], K2[7] = $2[2], K2[2] = -X2[0], K2[5] = -X2[1], K2[8] = -X2[2], Y0(W2, i0(W2, K2));
  };
}();

class n2 {
  d;
  listeners = new Set;
  constructor(K2) {
    this.elem = K2;
  }
  addChangeListener(K2) {
    return this.listeners.add(K2), this;
  }
  removeChangeListener(K2) {
    this.listeners.delete(K2);
  }
  onChange() {
    for (let K2 of this.listeners)
      K2.onChange(this.elem);
  }
}
var $X = Math.PI / 90;
var $0 = [0, 0, 0];
var m0 = _2.create();
var x0 = _2.create();
var t = m.create();

class x4 {
  static HIDDEN = x4.create().scale(0, 0, 0);
  static IDENTITY = x4.create();
  #K = Float32Array.from(_2.create());
  #W = new n2(this);
  constructor() {
    this.identity();
  }
  addChangeListener(K2) {
    return this.#W.addChangeListener(K2), this;
  }
  removeChangeListener(K2) {
    this.#W.removeChangeListener(K2);
  }
  static create() {
    return new x4;
  }
  copy(K2) {
    return _2.copy(this.#K, K2.getMatrix()), this.#W.onChange(), this;
  }
  identity() {
    return _2.identity(this.#K), this.#W.onChange(), this;
  }
  invert(K2) {
    return _2.invert(this.#K, K2?.getMatrix() ?? this.getMatrix()), this.#W.onChange(), this;
  }
  multiply(K2) {
    return _2.multiply(this.#K, this.#K, K2.getMatrix()), this.#W.onChange(), this;
  }
  multiply2(K2, W2) {
    return _2.multiply(this.#K, K2.getMatrix(), W2.getMatrix()), this.#W.onChange(), this;
  }
  multiply3(K2, W2, X2) {
    return this.multiply2(K2, W2), this.multiply(X2), this;
  }
  translate(K2, W2, X2) {
    const Y = $0;
    return Y[0] = K2, Y[1] = W2, Y[2] = X2, this.move(Y);
  }
  move(K2) {
    return _2.translate(this.#K, this.#K, K2), this.#W.onChange(), this;
  }
  rotateX(K2) {
    return _2.rotateX(this.#K, this.#K, K2), this.#W.onChange(), this;
  }
  rotateY(K2) {
    return _2.rotateY(this.#K, this.#K, K2), this.#W.onChange(), this;
  }
  rotateZ(K2) {
    return _2.rotateZ(this.#K, this.#K, K2), this.#W.onChange(), this;
  }
  setXRotation(K2) {
    return _2.fromXRotation(this.getMatrix(), K2), this.#W.onChange(), this;
  }
  setYRotation(K2) {
    return _2.fromYRotation(this.getMatrix(), K2), this.#W.onChange(), this;
  }
  scale(K2, W2, X2) {
    return _2.scale(this.#K, this.#K, [K2, W2 ?? K2, X2 ?? K2]), this.#W.onChange(), this;
  }
  perspective(K2, W2, X2, Y) {
    return _2.perspective(this.#K, K2 * $X, W2, X2, Y), this.#W.onChange(), this;
  }
  ortho(K2, W2, X2, Y, $2, Q3) {
    return _2.ortho(this.#K, K2, W2, X2, Y, $2, Q3), this.#W.onChange(), this;
  }
  combine(K2, W2, X2 = 0.5) {
    return _2.multiplyScalar(m0, K2.getMatrix(), 1 - X2), _2.multiplyScalar(x0, W2.getMatrix(), X2), _2.add(this.#K, m0, x0), this.#W.onChange(), this;
  }
  static getMoveVector(K2, W2, X2, Y) {
    const $2 = $0;
    if ($2[0] = K2, $2[1] = W2, $2[2] = X2, Y)
      _2.getRotation(t, Y.getMatrix()), m.invert(t, t), r.transformQuat($2, $2, t);
    return $2;
  }
  getPosition() {
    const K2 = $0;
    return K2[0] = this.#K[12], K2[1] = this.#K[13], K2[2] = this.#K[14], K2;
  }
  setVector(K2) {
    return this.setPosition(K2[0], K2[1], K2[2]);
  }
  setPosition(K2, W2, X2) {
    return this.#K[12] = K2, this.#K[13] = W2, this.#K[14] = X2, this.#W.onChange(), this;
  }
  getMatrix() {
    return this.#K;
  }
}
var w2 = x4;

class e0 {
  w;
  q;
  #K;
  #W = false;
  #X = 0;
  #Y;
  #$;
  constructor(K2, W2, X2) {
    this.getValue = W2, this.apply = X2, this.#$ = K2, this.#K = this.getValue(K2);
  }
  set element(K2) {
    this.#$ = K2, this.#K = this.getValue(K2), this.#Y = undefined;
  }
  setGoal(K2, W2, X2) {
    if (this.#Y && this.#Y !== X2)
      return;
    if (this.#K !== K2 || this.#X !== W2)
      this.#X = W2, this.#K = K2, this.#Y = X2, this.#W = true;
  }
  get goal() {
    return this.#K;
  }
  update(K2) {
    if (this.#W) {
      const W2 = this.getValue(this.#$), X2 = this.goal - W2, Y = Math.min(Math.abs(X2), this.#X * K2);
      if (Y <= 0.01)
        this.apply(this.#$, this.goal), this.#W = false, this.#Y = undefined;
      else
        this.apply(this.#$, W2 + Y * Math.sign(X2));
    }
    return this.#W;
  }
}

class b0 {
  i;
  f;
  warningLimit = 50000;
  #K = new Set;
  #W = [];
  constructor(K2, W2) {
    this.initCall = K2, this.onRecycle = W2;
  }
  create(...K2) {
    const W2 = this.#W.pop();
    if (W2)
      return this.#K.add(W2), this.initCall(W2, ...K2);
    const X2 = this.initCall(undefined, ...K2);
    return this.#K.add(X2), this.#Y(), X2;
  }
  recycle(K2) {
    this.#K.delete(K2), this.#X(K2);
  }
  recycleAll() {
    for (let K2 of this.#K)
      this.#X(K2);
    this.#K.clear();
  }
  clear() {
    this.#W.length = 0, this.#K.clear();
  }
  countObjectsInExistence() {
    return this.#K.size + this.#W.length;
  }
  #X(K2) {
    this.#W.push(K2), this.onRecycle?.(K2);
  }
  #Y() {
    if (this.countObjectsInExistence() === this.warningLimit)
      console.warn("ObjectPool already created", this.#K.size + this.#W.length, "in", this.constructor.name);
  }
}

class u0 extends b0 {
  constructor() {
    super((K2, W2) => {
      if (!K2)
        return new e0(W2, (X2) => X2.valueOf(), (X2, Y) => X2.setValue(Y));
      return K2.element = W2, K2;
    });
  }
}
var QX = new u0;

class l2 {
  w;
  q;
  #K = 0;
  #W;
  constructor(K2 = 0, W2, X2 = QX) {
    this.onChange = W2, this.pool = X2, this.#K = K2;
  }
  valueOf() {
    return this.#K;
  }
  setValue(K2) {
    if (K2 !== this.#K)
      this.#K = K2, this.onChange?.(this.#K);
    return this;
  }
  addValue(K2) {
    return this.setValue(this.#K + K2), this;
  }
  update(K2) {
    if (this.#W) {
      const W2 = !!this.#W.update(K2);
      if (!W2)
        this.pool.recycle(this.#W), this.#W = undefined;
      return W2;
    }
    return false;
  }
  refresh({ deltaTime: K2, stopUpdate: W2 }) {
    if (!this.update(K2))
      W2();
  }
  progressTowards(K2, W2, X2, Y) {
    if (!this.#W)
      this.#W = this.pool.create(this);
    if (this.#W.setGoal(K2, W2, X2), Y)
      Y.loop(this, undefined);
  }
  get goal() {
    return this.#W?.goal ?? this.valueOf();
  }
}
var o0 = function(K2, W2) {
  const X2 = w2.create(), Y = new Set;
  if (W2)
    Y.add({ onChange: W2 });
  const $2 = { angle: new l2(0, (Q3) => {
    K2(X2, Q3);
    for (let Z2 of Y)
      Z2.onChange($2);
  }), getMatrix() {
    return X2.getMatrix();
  }, addChangeListener(Q3) {
    return Y.add(Q3), this;
  }, removeChangeListener(Q3) {
    Y.delete(Q3);
  } };
  return $2;
};

class t0 {
  i;
  f;
  warningLimit = 50000;
  #K = new Set;
  #W = [];
  constructor(K2, W2) {
    this.initCall = K2, this.onRecycle = W2;
  }
  create(...K2) {
    const W2 = this.#W.pop();
    if (W2)
      return this.#K.add(W2), this.initCall(W2, ...K2);
    const X2 = this.initCall(undefined, ...K2);
    return this.#K.add(X2), this.#Y(), X2;
  }
  recycle(K2) {
    this.#K.delete(K2), this.#X(K2);
  }
  recycleAll() {
    for (let K2 of this.#K)
      this.#X(K2);
    this.#K.clear();
  }
  clear() {
    this.#W.length = 0, this.#K.clear();
  }
  countObjectsInExistence() {
    return this.#K.size + this.#W.length;
  }
  #X(K2) {
    this.#W.push(K2), this.onRecycle?.(K2);
  }
  #Y() {
    if (this.countObjectsInExistence() === this.warningLimit)
      console.warn("ObjectPool already created", this.#K.size + this.#W.length, "in", this.constructor.name);
  }
}

class Q0 extends t0 {
  constructor() {
    super((K2, W2, X2, Y) => {
      if (!K2)
        return [W2, X2, Y];
      return K2[0] = W2, K2[1] = X2, K2[2] = Y, K2;
    });
  }
}

class c {
  vectorPool;
  motor;
  data;
  constructor({ motor: K2, vectorPool: W2 }) {
    this.motor = K2, this.vectorPool = W2 ?? new Q0, this.data = { vectorPool: this.vectorPool };
  }
  refresh({ data: { vectorPool: K2 } }) {
    K2.recycleAll();
  }
  transformToPosition(K2) {
    this.motor.scheduleUpdate(this, this.data);
    const W2 = K2.getMatrix();
    return this.vectorPool.create(W2[12], W2[13], W2[14]);
  }
  toVector(K2, W2, X2) {
    return this.motor.scheduleUpdate(this, this.data), this.vectorPool.create(K2, W2, X2);
  }
  static toVector(K2, W2, X2, Y) {
    return Y[0] = K2, Y[1] = W2, Y[2] = X2, Y;
  }
  static transformToPosition(K2, W2) {
    const X2 = K2.getMatrix();
    W2[0] = X2[12], W2[1] = X2[13], W2[2] = X2[14];
  }
}
var d;
(function(Y) {
  Y[Y["AT_POSITION"] = 0] = "AT_POSITION";
  Y[Y["MOVED"] = 1] = "MOVED";
  Y[Y["BLOCKED"] = 2] = "BLOCKED";
})(d || (d = {}));
var Z0 = function(K2, W2) {
  if (K2) {
    const X2 = K2.length.valueOf();
    for (let Y = 0;Y < X2; Y++) {
      const $2 = K2.at(Y);
      if ($2 !== undefined && W2($2, Y))
        return true;
    }
  }
  return false;
};

class a0 {
  #K = w2.create().setPosition(0, 0, 0);
  #W = [0, 0, 0];
  #X = new n2(this);
  position = [0, 0, 0];
  blockers;
  constructor({ blockers: K2 } = {}) {
    this.blockers = K2, this.#K.addChangeListener({ onChange: () => {
      c.transformToPosition(this.#K, this.position), this.#X.onChange();
    } });
  }
  addChangeListener(K2) {
    return this.#X.addChangeListener(K2), this;
  }
  removeChangeListener(K2) {
    this.#X.removeChangeListener(K2);
  }
  moveBy(K2, W2, X2, Y) {
    const $2 = w2.getMoveVector(K2, W2, X2, Y), Q3 = Z0(this.blockers, (Z2) => Z2.isBlocked(c.toVector(this.position[0] + $2[0], this.position[1] + $2[1], this.position[2] + $2[2], this.#W), this.position));
    if (!Q3)
      if ($2[0] || $2[1] || $2[2])
        this.#K.move($2);
      else
        return d.AT_POSITION;
    return Q3 ? d.BLOCKED : d.MOVED;
  }
  moveTo(K2, W2, X2) {
    if (this.position[0] === K2 && this.position[1] === W2 && this.position[2] === X2)
      return d.AT_POSITION;
    const Y = Z0(this.blockers, ($2) => $2.isBlocked(c.toVector(K2, W2, X2, this.#W), this.position));
    if (!Y) {
      const [$2, Q3, Z2] = this.#K.getPosition();
      if ($2 !== K2 || Q3 !== W2 || Z2 !== X2)
        this.#K.setPosition(K2, W2, X2);
    }
    return Y ? d.BLOCKED : d.MOVED;
  }
  movedTo(K2, W2, X2) {
    return this.moveTo(K2, W2, X2), this;
  }
  gotoPos(K2, W2, X2, Y = 0.1) {
    const $2 = this.position, Q3 = K2 - $2[0], Z2 = W2 - $2[1], B2 = X2 - $2[2], O3 = Math.sqrt(Q3 * Q3 + Z2 * Z2 + B2 * B2);
    if (O3 > 0.01) {
      const J = Math.min(O3, Y);
      return this.moveBy(Q3 / O3 * J, Z2 / O3 * J, B2 / O3 * J);
    } else
      return this.moveTo(K2, W2, X2);
  }
  getMatrix() {
    return this.#K.getMatrix();
  }
}
var OX = 1;
var JX = 1;

class KK {
  #K = w2.create();
  #W = w2.create();
  #X = w2.create();
  #Y = [0, 0];
  #$ = new n2(this);
  perspective;
  zoom;
  constructor() {
    const K2 = { onChange: () => {
      this.#K.combine(this.#X, this.#W, this.perspective.valueOf());
    } };
    this.perspective = new l2(OX, K2.onChange), this.zoom = new l2(JX, (W2) => {
      this.configure(this.#Y, W2);
    }), this.#W.addChangeListener(K2), this.#X.addChangeListener(K2), this.#K.addChangeListener(this.#$);
  }
  addChangeListener(K2) {
    return this.#$.addChangeListener(K2), this;
  }
  removeChangeListener(K2) {
    this.#$.removeChangeListener(K2);
  }
  configPerspectiveMatrix(K2, W2, X2, Y) {
    this.#W.perspective(K2, W2, X2, Y);
  }
  configOrthoMatrix(K2, W2, X2, Y) {
    this.#X.ortho(-K2 / 2, K2 / 2, -W2 / 2, W2 / 2, X2, Y);
  }
  configure(K2, W2, X2 = 0.5, Y = 1e4) {
    if (!W2)
      W2 = this.zoom.valueOf();
    this.#Y[0] = K2[0], this.#Y[1] = K2[1];
    const $2 = this.#Y[0] / this.#Y[1], Q3 = 45 / Math.sqrt(W2);
    this.configPerspectiveMatrix(Q3, $2, Math.max(X2, 0.00001), Y), this.configOrthoMatrix($2 / W2 / W2, 1 / W2 / W2, -Y, Y);
  }
  getMatrix() {
    return this.#K.getMatrix();
  }
}
var VERTICES_PER_SPRITE = 6;
var TEX_BUFFER_ELEMS = 4;
var EMPTY_TEX = new Float32Array(TEX_BUFFER_ELEMS).fill(0);

class GraphicsEngine extends Disposable {
  gl;
  priority = D2.LAST;
  programs;
  attributeBuffers;
  animationSlots = new Map;
  pixelListener;
  maxSpriteCount = 0;
  textureUpdateHandler;
  tempBuffer = new Float32Array(4).fill(0);
  visibleSprites = [];
  constructor(gl) {
    super();
    this.gl = gl;
    this.programs = this.own(new GLPrograms(gl));
    const textureManager = new l({ gl });
    this.textureUpdateHandler = new TextureUpdateHandler({
      imageManager: new v,
      textureManager
    });
    this.addOnDestroy(() => textureManager.dispose());
    const PROGRAM_NAME = "main";
    const replacementMap = {
      AUTHOR: "Jack le hamster"
    };
    this.programs.addProgram(PROGRAM_NAME, replaceTilda(vertexShader_default, replacementMap), replaceTilda(fragmentShader_default, replacementMap));
    this.attributeBuffers = this.own(new GLAttributeBuffers(gl, this.programs));
    this.initialize(PROGRAM_NAME);
    TextureUniformInitializer.initialize({ gl, program: this.programs.getProgram() });
  }
  resetViewportSize() {
    this.gl.viewport(0, 0, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);
  }
  initialize(programName) {
    this.programs.useProgram(programName);
    this.gl.enable(GL.DEPTH_TEST);
    this.gl.depthFunc(GL.LESS);
    this.gl.clearDepth(1);
    this.gl.enable(GL.BLEND);
    this.gl.blendFunc(GL.SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA);
    this.gl.viewport(0, 0, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);
    this.gl.enable(GL.CULL_FACE);
    this.gl.cullFace(GL.BACK);
    this.gl.clearColor(0, 0, 0, 1);
  }
  deactivate() {
    this.animationSlots.clear();
    this.visibleSprites.length = 0;
  }
  setMaxSpriteCount(count) {
    if (count > this.maxSpriteCount) {
      this.maxSpriteCount = 1 << Math.ceil(Math.log2(count));
      this.ensureBuffers(this.maxSpriteCount);
    }
  }
  setBgColor(rgb) {
    this.gl.clearColor(rgb[0], rgb[1], rgb[2], 1);
    this.gl.clear(this.gl.COLOR_BUFFER_BIT);
  }
  ensureBuffers(instanceCount) {
    if (instanceCount >= 1e5) {
      console.warn("Sprite count has already reached:", instanceCount);
    }
    if (!this.attributeBuffers.hasBuffer(INDEX_LOC)) {
      this.attributeBuffers.createBuffer({
        location: INDEX_LOC,
        target: GL.ELEMENT_ARRAY_BUFFER,
        usage: GL.STATIC_DRAW,
        vertexAttribPointerRows: 0,
        data: Uint16Array.from([0, 1, 2, 2, 3, 0])
      });
    }
    if (!this.attributeBuffers.hasBuffer(POSITION_LOC)) {
      this.attributeBuffers.createBuffer({
        location: POSITION_LOC,
        target: GL.ARRAY_BUFFER,
        usage: GL.STATIC_DRAW,
        vertexAttribPointerRows: 1,
        elemCount: 2,
        data: Float32Array.from([-1, -1, 1, -1, 1, 1, -1, 1])
      });
    }
    if (!this.attributeBuffers.hasBuffer(TRANSFORM_LOC)) {
      this.attributeBuffers.createBuffer({
        location: TRANSFORM_LOC,
        target: GL.ARRAY_BUFFER,
        usage: GL.DYNAMIC_DRAW,
        vertexAttribPointerRows: 4,
        elemCount: 4,
        divisor: 1,
        instanceCount
      });
    } else {
      this.attributeBuffers.ensureSize(TRANSFORM_LOC, instanceCount);
    }
    if (!this.attributeBuffers.hasBuffer(SLOT_SIZE_LOC)) {
      this.attributeBuffers.createBuffer({
        location: SLOT_SIZE_LOC,
        target: GL.ARRAY_BUFFER,
        usage: GL.DYNAMIC_DRAW,
        vertexAttribPointerRows: 1,
        elemCount: TEX_BUFFER_ELEMS,
        divisor: 1,
        instanceCount
      });
    } else {
      this.attributeBuffers.ensureSize(SLOT_SIZE_LOC, instanceCount);
    }
    if (!this.attributeBuffers.hasBuffer(ANIM_LOC)) {
      this.attributeBuffers.createBuffer({
        location: ANIM_LOC,
        target: GL.ARRAY_BUFFER,
        usage: GL.DYNAMIC_DRAW,
        vertexAttribPointerRows: 1,
        elemCount: 4,
        divisor: 1,
        instanceCount
      });
    } else {
      this.attributeBuffers.ensureSize(ANIM_LOC, instanceCount);
    }
    if (!this.attributeBuffers.hasBuffer(INSTANCE_LOC)) {
      this.attributeBuffers.createBuffer({
        location: INSTANCE_LOC,
        target: GL.ARRAY_BUFFER,
        usage: GL.STATIC_DRAW,
        vertexAttribPointerRows: 1,
        elemCount: 1,
        divisor: 1,
        instanceCount,
        callback: (index) => index
      });
    } else {
      this.attributeBuffers.ensureSize(INSTANCE_LOC, instanceCount);
    }
    if (!this.attributeBuffers.hasBuffer(SPRITE_TYPE_LOC)) {
      this.attributeBuffers.createBuffer({
        location: SPRITE_TYPE_LOC,
        target: GL.ARRAY_BUFFER,
        usage: GL.STATIC_DRAW,
        vertexAttribPointerRows: 1,
        elemCount: 1,
        divisor: 1,
        instanceCount
      });
    } else {
      this.attributeBuffers.ensureSize(SPRITE_TYPE_LOC, instanceCount);
    }
    return this.attributeBuffers;
  }
  async updateTextures(ids, medias) {
    return this.textureUpdateHandler.updateTextures(ids, medias);
  }
  updateSpriteTransforms(spriteIds, sprites) {
    const attributeBuffers = this.attributeBuffers;
    attributeBuffers.bindBuffer(TRANSFORM_LOC);
    spriteIds.forEach((spriteId) => {
      const sprite = sprites.at(spriteId);
      const visible = !!(sprite && !sprite?.hidden);
      this.gl.bufferSubData(GL.ARRAY_BUFFER, 16 * Float32Array.BYTES_PER_ELEMENT * spriteId, (!visible ? w2.HIDDEN : sprite.transform).getMatrix());
      this.visibleSprites[spriteId] = visible;
    });
    spriteIds.clear();
    while (this.visibleSprites.length && !this.visibleSprites[this.visibleSprites.length - 1]) {
      this.visibleSprites.length--;
    }
  }
  updateSpriteTexSlots(spriteIds, sprites) {
    const attributeBuffers = this.attributeBuffers;
    attributeBuffers.bindBuffer(SLOT_SIZE_LOC);
    spriteIds.forEach((spriteId) => {
      const sprite = sprites.at(spriteId);
      if (!sprite) {
        spriteIds.delete(spriteId);
        return;
      }
      const slotBuffer = this.textureUpdateHandler.getSlotBuffer(sprite.imageId);
      let buffer = slotBuffer ?? EMPTY_TEX;
      if ((sprite.orientation ?? 1) < 0) {
        this.tempBuffer[0] = buffer[0];
        this.tempBuffer[1] = buffer[1];
        this.tempBuffer[2] = -buffer[2];
        this.tempBuffer[3] = buffer[3];
        buffer = this.tempBuffer;
      }
      this.gl.bufferSubData(GL.ARRAY_BUFFER, TEX_BUFFER_ELEMS * Float32Array.BYTES_PER_ELEMENT * spriteId, buffer);
      const spriteWaitingForTexture = sprite && !slotBuffer;
      if (!spriteWaitingForTexture) {
        spriteIds.delete(spriteId);
      }
    });
  }
  updateSpriteTypes(spriteIds, sprites) {
    const attributeBuffers = this.attributeBuffers;
    attributeBuffers.bindBuffer(SPRITE_TYPE_LOC);
    spriteIds.forEach((spriteId) => {
      const sprite = sprites.at(spriteId);
      if (!sprite) {
        return;
      }
      const type = sprite.spriteType ?? SpriteType.DEFAULT;
      this.tempBuffer[0] = type;
      this.gl.bufferSubData(GL.ARRAY_BUFFER, 1 * Float32Array.BYTES_PER_ELEMENT * spriteId, this.tempBuffer, 0, 1);
    });
    spriteIds.clear();
  }
  updateSpriteAnimations(spriteIds, sprites) {
    const attributeBuffers = this.attributeBuffers;
    attributeBuffers.bindBuffer(ANIM_LOC);
    spriteIds.forEach((spriteId) => {
      const sprite = sprites.at(spriteId);
      if (sprite?.animationId === undefined) {
        return;
      }
      const animation = this.animationSlots.get(sprite.animationId);
      this.tempBuffer[0] = animation?.frames?.[0] ?? 0;
      this.tempBuffer[1] = animation?.frames?.[1] ?? this.tempBuffer[0];
      this.tempBuffer[2] = animation?.fps ?? 0;
      this.tempBuffer[3] = animation?.maxFrameCount ?? Number.MAX_SAFE_INTEGER;
      this.gl.bufferSubData(GL.ARRAY_BUFFER, 4 * Float32Array.BYTES_PER_ELEMENT * spriteId, this.tempBuffer);
    });
    spriteIds.clear();
  }
  updateAnimationDefinitions(ids, animations) {
    for (let id of ids) {
      const animation = animations.at(id.valueOf());
      if (animation !== undefined) {
        this.animationSlots.set(animation.id, animation);
      }
    }
    ids.clear();
  }
  setPixelListener(listener) {
    this.pixelListener = listener;
  }
  _pixel = new Uint8Array(4);
  getPixel(x5, y) {
    this.gl.readPixels(x5, y, 1, 1, this.gl.RGBA, this.gl.UNSIGNED_BYTE, this._pixel);
    const [r2, g2, b2, _a] = this._pixel;
    return r2 * 65536 + g2 * 256 + b2;
  }
  static clearBit = GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT;
  refresh(updatePayload) {
    if (updatePayload.renderFrame) {
      this.gl.clear(GraphicsEngine.clearBit);
      if (this.visibleSprites.length) {
        this.#drawElementsInstanced(VERTICES_PER_SPRITE, this.visibleSprites.length);
        this.pixelListener?.setPixel(this.getPixel(this.pixelListener.x, this.pixelListener.y));
      }
    }
  }
  createMatrixUniformHandler(name, matrix) {
    return new MatrixUniformHandler({
      gl: this.gl,
      program: this.programs.getProgram(this.programs.activeProgramId)
    }, { name }, matrix);
  }
  createFloatUniformHandler(name, val) {
    return new FloatUniformHandler({
      gl: this.gl,
      program: this.programs.getProgram(this.programs.activeProgramId)
    }, { name }, val);
  }
  createVectorUniformHandler(name, vector) {
    return new VectorUniformHandler({
      gl: this.gl,
      program: this.programs.getProgram(this.programs.activeProgramId)
    }, { name }, vector);
  }
  #drawElementsInstanced(vertexCount, instances) {
    this.gl.drawElementsInstanced(GL.TRIANGLES, vertexCount, GL.UNSIGNED_SHORT, 0, instances);
  }
}

class AuxiliaryHolder {
  auxiliaries = [];
  active = false;
  activate() {
    if (this.active) {
      return;
    }
    this.active = true;
    this.auxiliaries.forEach((aux) => aux.activate?.());
  }
  deactivate() {
    if (!this.active) {
      return;
    }
    this.active = false;
    this.auxiliaries.forEach((aux) => aux.deactivate?.());
  }
  addAuxiliary(aux) {
    this.auxiliaries.push(aux);
    if (this.active) {
      aux.activate?.();
    }
    return this;
  }
  removeAuxiliary(aux) {
    let j2 = 0;
    for (let i = 0;i < this.auxiliaries.length; i++) {
      const a2 = this.auxiliaries[i];
      if (a2 !== aux) {
        this.auxiliaries[j2] = a2;
        j2++;
      } else {
        a2.deactivate?.();
      }
    }
    this.auxiliaries.length = j2;
  }
}

class y {
  w;
  q;
  #F;
  #w = false;
  #x = 0;
  #q;
  #y;
  constructor(F, w3, q) {
    this.getValue = w3;
    this.apply = q;
    this.#y = F, this.#F = this.getValue(F);
  }
  set element(F) {
    this.#y = F, this.#F = this.getValue(F), this.#q = undefined;
  }
  setGoal(F, w3, q) {
    if (this.#q && this.#q !== q)
      return;
    if (this.#F !== F || this.#x !== w3)
      this.#x = w3, this.#F = F, this.#q = q, this.#w = true;
  }
  get goal() {
    return this.#F;
  }
  update(F) {
    if (this.#w) {
      const w3 = this.getValue(this.#y), q = this.goal - w3, x5 = Math.min(Math.abs(q), this.#x * F);
      if (x5 <= 0.01)
        this.apply(this.#y, this.goal), this.#w = false, this.#q = undefined;
      else
        this.apply(this.#y, w3 + x5 * Math.sign(q));
    }
    return this.#w;
  }
}

class z2 {
  i;
  f;
  warningLimit = 50000;
  #F = new Set;
  #w = [];
  constructor(F, w3) {
    this.initCall = F, this.onRecycle = w3;
  }
  create(...F) {
    const w3 = this.#w.pop();
    if (w3)
      return this.#F.add(w3), this.initCall(w3, ...F);
    const q = this.initCall(undefined, ...F);
    return this.#F.add(q), this.#q(), q;
  }
  recycle(F) {
    this.#F.delete(F), this.#x(F);
  }
  recycleAll() {
    for (let F of this.#F)
      this.#x(F);
    this.#F.clear();
  }
  clear() {
    this.#w.length = 0, this.#F.clear();
  }
  countObjectsInExistence() {
    return this.#F.size + this.#w.length;
  }
  #x(F) {
    this.#w.push(F), this.onRecycle?.(F);
  }
  #q() {
    if (this.countObjectsInExistence() === this.warningLimit)
      console.warn("ObjectPool already created", this.#F.size + this.#w.length, "in", this.constructor.name);
  }
}

class A3 extends z2 {
  constructor() {
    super((F, w3) => {
      if (!F)
        return new y(w3, (q) => q.valueOf(), (q, x5) => q.setValue(x5));
      return F.element = w3, F;
    });
  }
}
var H = new A3;

class B2 {
  w;
  q;
  #F = 0;
  #w;
  constructor(F = 0, w3, q = H) {
    this.onChange = w3;
    this.pool = q;
    this.#F = F;
  }
  valueOf() {
    return this.#F;
  }
  setValue(F) {
    if (F !== this.#F)
      this.#F = F, this.onChange?.(this.#F);
    return this;
  }
  addValue(F) {
    return this.setValue(this.#F + F), this;
  }
  update(F) {
    if (this.#w) {
      const w3 = !!this.#w.update(F);
      if (!w3)
        this.pool.recycle(this.#w), this.#w = undefined;
      return w3;
    }
    return false;
  }
  refresh({ deltaTime: F, stopUpdate: w3 }) {
    if (!this.update(F))
      w3();
  }
  progressTowards(F, w3, q, x5) {
    if (!this.#w)
      this.#w = this.pool.create(this);
    if (this.#w.setGoal(F, w3, q), x5)
      x5.loop(this, undefined);
  }
  get goal() {
    return this.#w?.goal ?? this.valueOf();
  }
}
var z3 = function(D3, J = Y) {
  R2(D3, (K2, Q3) => D3.informUpdate(Q3, J));
};

class W2 {
  i;
  f;
  warningLimit = 50000;
  #D = new Set;
  #J = [];
  constructor(D3, J) {
    this.initCall = D3, this.onRecycle = J;
  }
  create(...D3) {
    const J = this.#J.pop();
    if (J)
      return this.#D.add(J), this.initCall(J, ...D3);
    const K2 = this.initCall(undefined, ...D3);
    return this.#D.add(K2), this.#Q(), K2;
  }
  recycle(D3) {
    this.#D.delete(D3), this.#K(D3);
  }
  recycleAll() {
    for (let D3 of this.#D)
      this.#K(D3);
    this.#D.clear();
  }
  clear() {
    this.#J.length = 0, this.#D.clear();
  }
  countObjectsInExistence() {
    return this.#D.size + this.#J.length;
  }
  #K(D3) {
    this.#J.push(D3), this.onRecycle?.(D3);
  }
  #Q() {
    if (this.countObjectsInExistence() === this.warningLimit)
      console.warn("ObjectPool already created", this.#D.size + this.#J.length, "in", this.constructor.name);
  }
}

class X2 {
  listeners = new Set;
  informUpdate(D3, J) {
    this.listeners.forEach((K2) => K2.onUpdate(D3, J));
  }
  addUpdateListener(D3) {
    this.listeners.add(D3);
  }
  removeUpdateListener(D3) {
    this.listeners.delete(D3);
  }
}
var R2 = function(D3, J) {
  if (D3) {
    const K2 = D3.length.valueOf();
    for (let Q3 = 0;Q3 < K2; Q3++)
      J(D3.at(Q3), Q3);
  }
};

class Z2 {
  D;
  J;
  K;
  Q;
  #D = [];
  constructor(D3, J, K2, Q3) {
    this.elems = D3;
    this.informUpdate = J;
    this.addElem = K2;
    this.removeElem = Q3;
    this.elems = D3, this.initialize(D3);
  }
  initialize(D3) {
    this.elems = D3, this.elems.addUpdateListener?.(this), R2(D3, (J, K2) => this.onUpdate(K2));
  }
  dispose() {
    R2(this.elems, (D3, J) => this.onUpdate(J)), this.elems.removeUpdateListener?.(this), this.elems = G2, this.#D.length = 0;
  }
  onUpdate(D3, J) {
    const K2 = this.elems.at(D3);
    let Q3 = this.#D[D3];
    if (Q3 === undefined) {
      if (!K2)
        return;
      const V22 = this.addElem(this.elems, D3);
      this.#D[D3] = V22;
      return;
    } else if (!K2) {
      this.removeElem(Q3), this.#D[D3] = undefined;
      return;
    }
    this.informUpdate(Q3, J);
  }
}

class $2 extends W2 {
  constructor({ informUpdate: D3, addElem: J, removeElem: K2 }) {
    super((Q3, V22) => {
      if (Q3)
        return Q3.initialize(V22), Q3;
      return new Z2(V22, D3, J, K2);
    }, (Q3) => {
      Q3.dispose();
    });
  }
}

class B3 {
  #D = [];
  #J = [];
  length;
  constructor({ onChange: D3 } = {}) {
    this.length = { valueOf: () => this.#D.length, onChange: D3 ? (J) => D3?.(J) : undefined };
  }
  at(D3) {
    return this.#D.at(D3);
  }
  addElem(D3) {
    const J = this.#K();
    return this.#D[J] = D3, J;
  }
  removeElem(D3) {
    const J = this.#D.at(D3);
    if (J !== undefined)
      this.#D[D3] = undefined, this.#J.push(D3);
    return J;
  }
  clear() {
    if (this.#D.length !== 0)
      this.#D.length = 0, this.#Q();
    this.#J.length = 0;
  }
  #K() {
    let D3 = this.#J.pop();
    if (D3 === undefined)
      D3 = this.#D.length, this.#D.push(undefined), this.#Q();
    return D3;
  }
  #Q() {
    this.length.onChange?.(this.length.valueOf());
  }
}

class H2 extends X2 {
  #D;
  #J = new Map;
  #K = new O3;
  #Q = new $2({ informUpdate: this.informUpdate.bind(this), addElem: this.#R.bind(this), removeElem: this.#V.bind(this) });
  constructor({ onChange: D3 } = {}) {
    super();
    this.#D = new B3({ onChange: D3 });
  }
  get length() {
    return this.#D.length;
  }
  at(D3) {
    const J = this.#D.at(D3);
    return J?.elems.at(J.index);
  }
  add(D3) {
    const J = this.#Q.create(D3);
    this.#J.set(D3, J);
  }
  remove(D3) {
    const J = this.#J.get(D3);
    if (J)
      this.#J.delete(D3), this.#Q.recycle(J);
  }
  clear() {
    R2(this.#D, (D3, J) => {
      if (this.informUpdate(J), D3)
        this.#K.recycle(D3);
    }), this.#D.clear();
  }
  updateFully(D3) {
    for (let [J, K2] of this.#J)
      R2(J, (Q3, V22) => K2.onUpdate(V22, D3));
  }
  #R(D3, J) {
    const K2 = this.#D.addElem(this.#K.create(D3, J));
    return this.informUpdate(K2), K2;
  }
  #V(D3) {
    const J = this.#D.removeElem(D3);
    if (J)
      this.#K.recycle(J), this.informUpdate(D3);
  }
}
var G2 = [];

class O3 extends W2 {
  constructor() {
    super((D3, J, K2) => {
      if (!D3)
        return { elems: J, index: K2 };
      return D3.elems = J, D3.index = K2, D3;
    }, (D3) => {
      D3.elems = G2;
    });
  }
}

class _3 {
  i;
  f;
  warningLimit = 50000;
  #D = new Set;
  #J = [];
  constructor(D3, J) {
    this.initCall = D3, this.onRecycle = J;
  }
  create(...D3) {
    const J = this.#J.pop();
    if (J)
      return this.#D.add(J), this.initCall(J, ...D3);
    const K2 = this.initCall(undefined, ...D3);
    return this.#D.add(K2), this.#Q(), K2;
  }
  recycle(D3) {
    this.#D.delete(D3), this.#K(D3);
  }
  recycleAll() {
    for (let D3 of this.#D)
      this.#K(D3);
    this.#D.clear();
  }
  clear() {
    this.#J.length = 0, this.#D.clear();
  }
  countObjectsInExistence() {
    return this.#D.size + this.#J.length;
  }
  #K(D3) {
    this.#J.push(D3), this.onRecycle?.(D3);
  }
  #Q() {
    if (this.countObjectsInExistence() === this.warningLimit)
      console.warn("ObjectPool already created", this.#D.size + this.#J.length, "in", this.constructor.name);
  }
}
var Y = -1;

class UpdateRegistry extends X2 {
  applyUpdate;
  motor;
  updatedIds = new Set;
  constructor(applyUpdate, motor) {
    super();
    this.applyUpdate = applyUpdate;
    this.motor = motor;
  }
  informUpdate(id, type) {
    super.informUpdate(id, type);
    if (!this.updatedIds.has(id)) {
      this.updatedIds.add(id);
    }
    this.motor.scheduleUpdate(this);
  }
  refresh(update) {
    this.applyUpdate(this.updatedIds, update);
    if (this.updatedIds.size) {
      this.motor.scheduleUpdate(this, undefined, undefined, true);
    }
  }
}

class Camera extends AuxiliaryHolder {
  position;
  projection;
  tilt = BX(() => this.#updateInformer.informUpdate(MatrixUniform.CAM_TILT));
  turn = ZX(() => this.#updateInformer.informUpdate(MatrixUniform.CAM_TURN));
  curvature = new B2(0.05, () => this.#updateInformerFloat.informUpdate(FloatUniform.CURVATURE));
  distance = new B2(0.5, () => this.#updateInformerFloat.informUpdate(FloatUniform.CAM_DISTANCE));
  blur = new B2(1, () => this.#updateInformerFloat.informUpdate(FloatUniform.BG_BLUR));
  fade = new B2(0, () => this.#updateInformerFloat.informUpdate(FloatUniform.FADE));
  #camMatrix = w2.create();
  #bgColor = [0, 0, 0];
  #viewportSize = [0, 0];
  #updateInformer;
  #updateInformerFloat;
  #updateInformerVector;
  #engine;
  #positionChangeListener = {
    onChange: () => {
      this.#camMatrix.invert(this.position);
      this.#updateInformer.informUpdate(MatrixUniform.CAM_POS);
    }
  };
  #projectionChangeListener = {
    onChange: () => this.#updateInformer.informUpdate(MatrixUniform.PROJECTION)
  };
  constructor({ engine, motor, position = new a0, projection = new KK }) {
    super();
    this.#engine = engine;
    this.position = position;
    this.projection = projection;
    const matrixUniformUpdaters = {
      [MatrixUniform.PROJECTION]: engine.createMatrixUniformHandler(CAM_PROJECTION_LOC, this.projection),
      [MatrixUniform.CAM_POS]: engine.createMatrixUniformHandler(CAM_POS_LOC, this.#camMatrix),
      [MatrixUniform.CAM_TURN]: engine.createMatrixUniformHandler(CAM_TURN_LOC, this.turn),
      [MatrixUniform.CAM_TILT]: engine.createMatrixUniformHandler(CAM_TILT_LOC, this.tilt)
    };
    this.#updateInformer = new UpdateRegistry((ids) => {
      ids.forEach((type) => matrixUniformUpdaters[type].update());
      ids.clear();
    }, motor);
    const vectorUniformUpdaters = {
      [VectorUniform.BG_COLOR]: engine.createVectorUniformHandler(BG_COLOR_LOC, this.#bgColor)
    };
    this.#updateInformerVector = new UpdateRegistry((ids) => {
      ids.forEach((type) => vectorUniformUpdaters[type].update());
      ids.clear();
    }, motor);
    const valUniformUpdaters = {
      [FloatUniform.BG_BLUR]: engine.createFloatUniformHandler(BG_BLUR_LOC, this.blur),
      [FloatUniform.CAM_DISTANCE]: engine.createFloatUniformHandler(CAM_DISTANCE_LOC, this.distance),
      [FloatUniform.CURVATURE]: engine.createFloatUniformHandler(CAM_CURVATURE_LOC, this.curvature),
      [FloatUniform.TIME]: undefined,
      [FloatUniform.FADE]: engine.createFloatUniformHandler(FADE_LOC, this.fade)
    };
    this.#updateInformerFloat = new UpdateRegistry((ids) => {
      ids.forEach((type) => {
        valUniformUpdaters[type]?.update();
      });
      ids.clear();
    }, motor);
  }
  activate() {
    super.activate();
    this.#updateInformer.informUpdate(MatrixUniform.PROJECTION);
    this.#updateInformer.informUpdate(MatrixUniform.CAM_POS);
    this.#updateInformer.informUpdate(MatrixUniform.CAM_TURN);
    this.#updateInformer.informUpdate(MatrixUniform.CAM_TILT);
    this.#updateInformerFloat.informUpdate(FloatUniform.CURVATURE);
    this.#updateInformerFloat.informUpdate(FloatUniform.CAM_DISTANCE);
    this.#updateInformerFloat.informUpdate(FloatUniform.BG_BLUR);
    this.#updateInformerVector.informUpdate(VectorUniform.BG_COLOR);
    this.position.addChangeListener(this.#positionChangeListener);
    this.projection.addChangeListener(this.#projectionChangeListener);
  }
  deactivate() {
    this.projection.removeChangeListener(this.#projectionChangeListener);
    this.position.removeChangeListener(this.#positionChangeListener);
    super.deactivate();
  }
  resizeViewport(width, height) {
    if (this.#viewportSize[0] !== width || this.#viewportSize[1] !== height) {
      this.#viewportSize[0] = width;
      this.#viewportSize[1] = height;
      this.projection.configure(this.#viewportSize);
    }
  }
  setBackgroundColor(rgb) {
    const red = rgb >> 16 & 255;
    const green = rgb >> 8 & 255;
    const blue = rgb & 255;
    this.#bgColor[0] = red / 255;
    this.#bgColor[1] = green / 255;
    this.#bgColor[2] = blue / 255;
    this.#updateInformerVector.informUpdate(VectorUniform.BG_COLOR);
    this.#engine.setBgColor(this.#bgColor);
  }
}
var MatrixUniform;
(function(MatrixUniform2) {
  MatrixUniform2[MatrixUniform2["PROJECTION"] = 0] = "PROJECTION";
  MatrixUniform2[MatrixUniform2["CAM_POS"] = 1] = "CAM_POS";
  MatrixUniform2[MatrixUniform2["CAM_TURN"] = 2] = "CAM_TURN";
  MatrixUniform2[MatrixUniform2["CAM_TILT"] = 3] = "CAM_TILT";
})(MatrixUniform || (MatrixUniform = {}));
var VectorUniform;
(function(VectorUniform2) {
  VectorUniform2[VectorUniform2["BG_COLOR"] = 0] = "BG_COLOR";
})(VectorUniform || (VectorUniform = {}));
var FloatUniform;
(function(FloatUniform2) {
  FloatUniform2[FloatUniform2["TIME"] = 0] = "TIME";
  FloatUniform2[FloatUniform2["CURVATURE"] = 1] = "CURVATURE";
  FloatUniform2[FloatUniform2["CAM_DISTANCE"] = 2] = "CAM_DISTANCE";
  FloatUniform2[FloatUniform2["BG_BLUR"] = 3] = "BG_BLUR";
  FloatUniform2[FloatUniform2["FADE"] = 4] = "FADE";
})(FloatUniform || (FloatUniform = {}));

class Auxiliaries {
  auxiliaries;
  active = false;
  constructor(auxiliaries) {
    this.auxiliaries = auxiliaries;
  }
  static from(...aux) {
    return new Auxiliaries(aux);
  }
  get length() {
    return this.auxiliaries.length;
  }
  at(index) {
    if (!this.active) {
      return;
    }
    return this.auxiliaries.at(index);
  }
  activate() {
    if (this.active) {
      return;
    }
    this.active = true;
    x3(this.auxiliaries, (aux) => aux?.activate?.());
  }
  deactivate() {
    if (!this.active) {
      return;
    }
    this.active = false;
    x3(this.auxiliaries, (aux) => aux?.deactivate?.());
  }
}

class ControlledLooper extends N {
  controls;
  triggerred;
  #listener;
  constructor(motor, controls, triggerred, data, cycle) {
    super({ motor, data, cycle }, { autoStart: false });
    this.controls = controls;
    this.triggerred = triggerred;
    this.#listener = this;
  }
  onAction(controls) {
    if (this.triggerred(controls)) {
      this.start();
    }
  }
  activate() {
    super.activate();
    this.controls.addListener(this.#listener);
  }
  deactivate() {
    this.controls.removeListener(this.#listener);
    super.deactivate();
  }
}

class TurnAuxiliary extends ControlledLooper {
  constructor({ controls, turn, motor }) {
    super(motor, controls, ({ turnLeft, turnRight }) => turnLeft || turnRight, { controls, turn });
  }
  refresh({ data: { controls, turn }, deltaTime, stopUpdate }) {
    const { turnLeft, turnRight } = controls;
    const turnspeed = deltaTime / 400;
    if (turnLeft) {
      turn.angle.addValue(-turnspeed);
    }
    if (turnRight) {
      turn.angle.addValue(turnspeed);
    }
    if (!turnLeft && !turnRight) {
      stopUpdate();
    }
  }
}
var G3 = function(F, n32, g2 = 0) {
  return A4(F, n32) <= g2 * g2;
};
var A4 = function(F, n32) {
  const g2 = F[0] - n32[0], k2 = F[1] - n32[1], w3 = F[2] - n32[2];
  return g2 * g2 + k2 * k2 + w3 * w3;
};

class m2 {
  i;
  f;
  warningLimit = 50000;
  #F = new Set;
  #n = [];
  constructor(F, n32) {
    this.initCall = F, this.onRecycle = n32;
  }
  create(...F) {
    const n32 = this.#n.pop();
    if (n32)
      return this.#F.add(n32), this.initCall(n32, ...F);
    const g2 = this.initCall(undefined, ...F);
    return this.#F.add(g2), this.#k(), g2;
  }
  recycle(F) {
    this.#F.delete(F), this.#g(F);
  }
  recycleAll() {
    for (let F of this.#F)
      this.#g(F);
    this.#F.clear();
  }
  clear() {
    this.#n.length = 0, this.#F.clear();
  }
  countObjectsInExistence() {
    return this.#F.size + this.#n.length;
  }
  #g(F) {
    this.#n.push(F), this.onRecycle?.(F);
  }
  #k() {
    if (this.countObjectsInExistence() === this.warningLimit)
      console.warn("ObjectPool already created", this.#F.size + this.#n.length, "in", this.constructor.name);
  }
}
var H3 = -1;

class PositionStepAuxiliary extends ControlledLooper {
  #goalPos;
  #airBoost;
  #stepCount = 0;
  constructor({ controls, position, turnGoal, motor }, config = {}) {
    super(motor, controls, ({ backward, forward, left, right }) => backward || forward || left || right, { controls, position, turnGoal, step: config.step ?? 2, speed: config.speed ?? 1 });
    this.#goalPos = [
      position.position[0],
      position.position[1],
      position.position[2]
    ];
    this.#airBoost = config?.airBoost ?? 1;
  }
  refresh({ deltaTime, data, stopUpdate }) {
    const { backward, forward, left, right } = data.controls;
    const { step, position } = data;
    const pos = position.position;
    const preX = Math.round(pos[0] / step) * step;
    const preY = Math.round(pos[1] / step) * step;
    const preZ = Math.round(pos[2] / step) * step;
    let dx = 0, dz = 0;
    if (forward) {
      dz--;
    }
    if (backward) {
      dz++;
    }
    if (left) {
      dx--;
    }
    if (right) {
      dx++;
    }
    const turnGoal = data.turnGoal?.goal ?? 0;
    if (dx || dz || this.#stepCount > 0) {
      const relativeDx = dx * Math.cos(turnGoal) - dz * Math.sin(turnGoal);
      const relativeDz = dx * Math.sin(turnGoal) + dz * Math.cos(turnGoal);
      const gx = Math.round(pos[0] / step + relativeDx) * step;
      const gz = Math.round(pos[2] / step + relativeDz) * step;
      this.#goalPos[0] = gx;
      this.#goalPos[2] = gz;
    }
    if (!dx && !dz) {
      this.#stepCount = 0;
    }
    let speed = (dx || dz ? deltaTime / 150 : deltaTime / 100) * data.speed;
    if (data.position.position[1] > 0) {
      speed *= this.#airBoost;
    }
    let moveResult = data.position.gotoPos(this.#goalPos[0], pos[1], this.#goalPos[2], speed);
    if (moveResult === d.BLOCKED && dx) {
      moveResult = data.position.gotoPos(this.#goalPos[0], pos[1], pos[2], speed);
    }
    if (moveResult === d.BLOCKED && dz) {
      moveResult = data.position.gotoPos(pos[0], pos[1], this.#goalPos[2], speed);
    }
    if (moveResult === d.BLOCKED) {
      const gx = Math.round(pos[0] / step) * step;
      const gz = Math.round(pos[2] / step) * step;
      this.#goalPos[0] = gx;
      this.#goalPos[2] = gz;
    }
    const newPos = position.position;
    if (Math.round(newPos[0] / step) * step !== preX || Math.round(newPos[1] / step) * step !== preY || Math.round(newPos[2] / step) * step !== preZ) {
      this.#stepCount++;
    }
    if (!backward && !forward && !left && !right && G3(newPos, this.#goalPos)) {
      stopUpdate();
    }
  }
}

class TiltResetAuxiliary {
  controls;
  listener;
  constructor({ controls, tilt, motor }) {
    this.listener = {
      onQuickTiltReset: () => {
        tilt.angle.progressTowards(0, 0.0033333333333333335, this, motor);
      }
    };
    this.controls = controls;
  }
  activate() {
    this.controls.addListener(this.listener);
  }
  deactivate() {
    this.controls.removeListener(this.listener);
  }
}

class ToggleAuxiliary {
  keyboard;
  active = false;
  toggleIndex;
  keys;
  auxiliaries;
  keyListener;
  constructor({ keyboard }, config) {
    this.keyboard = keyboard;
    this.keys = z(config.auxiliariesMapping, (keyMap) => keyMap?.key);
    this.keyListener = {
      onKeyDown: (keyCode) => {
        if (this.keys.indexOf(keyCode) >= 0) {
          const wasActive = this.active;
          this.auxiliary?.deactivate?.();
          this.toggle(keyCode);
          if (wasActive) {
            this.auxiliary?.activate?.();
          }
        }
      }
    };
    this.auxiliaries = z(config.auxiliariesMapping, (keyMap) => keyMap?.aux);
    this.toggleIndex = config.initialIndex ?? 0;
  }
  get auxiliary() {
    return this.auxiliaries.at(this.toggleIndex);
  }
  toggle(key) {
    if (this.keys[this.toggleIndex] !== key) {
      this.toggleIndex = this.keys.indexOf(key);
    } else {
      const nextIndex = this.keys.length ? (this.toggleIndex + 1) % this.keys.length : 0;
      if (this.keys[nextIndex] === key) {
        this.toggleIndex = nextIndex;
      }
    }
  }
  activate() {
    if (!this.active) {
      this.active = true;
      this.keyboard.addListener(this.keyListener);
      this.auxiliary?.activate?.();
    }
  }
  deactivate() {
    if (this.active) {
      this.active = false;
      this.keyboard.removeListener(this.keyListener);
      this.auxiliary?.deactivate?.();
    }
  }
}
var SpriteUpdateType;
(function(SpriteUpdateType2) {
  SpriteUpdateType2[SpriteUpdateType2["TRANSFORM"] = 1] = "TRANSFORM";
  SpriteUpdateType2[SpriteUpdateType2["TEX_SLOT"] = 2] = "TEX_SLOT";
  SpriteUpdateType2[SpriteUpdateType2["TYPE"] = 4] = "TYPE";
  SpriteUpdateType2[SpriteUpdateType2["ANIM"] = 8] = "ANIM";
})(SpriteUpdateType || (SpriteUpdateType = {}));

class ItemsGroup extends X2 {
  elems;
  constructor(elems) {
    super();
    this.elems = elems;
  }
  informUpdate(id, type) {
    super.informUpdate(id, type);
    this.elems.informUpdate?.(id, type);
  }
  get length() {
    return this.elems.length;
  }
  at(index) {
    return this.elems.at(index);
  }
}
var EMPTY_SPRITE = {
  imageId: 0,
  transform: new w2
};

class SpriteModel {
  sprite = EMPTY_SPRITE;
  animationId = 0;
  orientation = 1;
  imageId = 0;
  transform = w2.create();
  get spriteType() {
    return this.sprite.spriteType;
  }
  get hidden() {
    return this.sprite.hidden;
  }
}

class SpriteGroup extends ItemsGroup {
  #orientation = 1;
  #animationId;
  #imageId;
  #position;
  #spriteModel = new SpriteModel;
  constructor(sprites, position) {
    super(sprites);
    this.#position = position;
    this.#position?.addChangeListener({ onChange: () => z3(this, SpriteUpdateType.TRANSFORM) });
  }
  setOrientation(value) {
    if (this.#orientation !== value) {
      this.#orientation = value;
      x3(this.elems, (_4, index) => this.informUpdate(index, SpriteUpdateType.TEX_SLOT));
    }
  }
  setAnimationId(value) {
    if (this.#animationId !== value) {
      this.#animationId = value;
      x3(this.elems, (_4, index) => this.informUpdate(index, SpriteUpdateType.ANIM));
    }
  }
  setImageId(value) {
    if (this.#imageId !== value) {
      this.#imageId = value;
      x3(this.elems, (_4, index) => this.informUpdate(index, SpriteUpdateType.TEX_SLOT));
    }
  }
  at(index) {
    const s3 = super.at(index);
    if (!s3) {
      return;
    }
    this.#spriteModel.sprite = s3;
    this.#spriteModel.transform.copy(s3.transform);
    if (this.#position) {
      this.#spriteModel.transform.multiply2(this.#position, this.#spriteModel.transform);
    }
    this.#spriteModel.orientation = this.#orientation * (s3.orientation ?? 1);
    this.#spriteModel.animationId = this.#animationId ?? s3.animationId ?? 0;
    this.#spriteModel.imageId = this.#imageId ?? s3.imageId;
    return this.#spriteModel;
  }
}

class SpriteUpdater extends X2 {
  #sprites;
  #updateRegisteries;
  constructor({ engine, motor, sprites }) {
    super();
    this.#sprites = sprites;
    this.#updateRegisteries = {
      [SpriteUpdateType.TRANSFORM]: new UpdateRegistry((ids) => engine.updateSpriteTransforms(ids, this.#sprites), motor),
      [SpriteUpdateType.TEX_SLOT]: new UpdateRegistry((ids) => engine.updateSpriteTexSlots(ids, this.#sprites), motor),
      [SpriteUpdateType.TYPE]: new UpdateRegistry((ids) => engine.updateSpriteTypes(ids, this.#sprites), motor),
      [SpriteUpdateType.ANIM]: new UpdateRegistry((ids) => engine.updateSpriteAnimations(ids, this.#sprites), motor)
    };
  }
  onUpdate(id, type) {
    this.informUpdate(id, type);
  }
  activate() {
    this.#sprites.addUpdateListener?.(this);
  }
  deactivate() {
    this.#sprites.removeUpdateListener?.(this);
  }
  informUpdate(id, type = H3) {
    super.informUpdate(id, type);
    if (type & SpriteUpdateType.TRANSFORM) {
      this.#updateRegisteries[SpriteUpdateType.TRANSFORM].informUpdate(id);
    }
    if (type & SpriteUpdateType.TEX_SLOT) {
      this.#updateRegisteries[SpriteUpdateType.TEX_SLOT].informUpdate(id);
    }
    if (type & SpriteUpdateType.TYPE) {
      this.#updateRegisteries[SpriteUpdateType.TYPE].informUpdate(id);
    }
    if (type & SpriteUpdateType.ANIM) {
      this.#updateRegisteries[SpriteUpdateType.ANIM].informUpdate(id);
    }
  }
}

class MoveAuxiliary extends ControlledLooper {
  constructor({ controls, direction, motor, position }, config) {
    super(motor, controls, ({ forward, backward, left, right }) => forward || backward || left || right, { controls, direction, position, speed: config?.speed ?? 1 });
  }
  refresh({ data, deltaTime, stopUpdate }) {
    const { forward, backward, left, right } = data.controls;
    const speed = deltaTime / 80 * data.speed;
    let dx = 0, dz = 0;
    if (forward) {
      dz -= speed;
    }
    if (backward) {
      dz += speed;
    }
    if (left) {
      dx -= speed;
    }
    if (right) {
      dx += speed;
    }
    data.position.moveBy(dx, 0, dz, data.direction);
    if (!forward && !backward && !left && !right) {
      stopUpdate();
    }
  }
}

class JumpAuxiliary extends ControlledLooper {
  dy;
  constructor({ controls, position, motor }, config) {
    super(motor, controls, (controls2) => controls2.action, {
      controls,
      position,
      gravity: config?.gravity ?? -1,
      jump: config?.jump ?? 2,
      plane: config?.plane ?? 5
    });
    this.dy = 0;
  }
  refresh({ deltaTime, data, stopUpdate }) {
    if (!this.jump(deltaTime, data)) {
      stopUpdate();
    }
  }
  jump(deltaTime, data) {
    const speed = deltaTime / 80;
    const acceleration = deltaTime / 80;
    const { action } = data.controls;
    const onGround = data.position.position[1] <= 0;
    const movingDown = !onGround && data.position.moveBy(0, speed * this.dy, 0);
    if (onGround || !movingDown) {
      if (action) {
        this.dy = data.jump;
        data.position.moveBy(0, speed * this.dy, 0);
        return true;
      }
      this.dy = 0;
    }
    if (!onGround) {
      const mul = this.dy < 0 ? 1 / data.plane : 1;
      this.dy += data.gravity * acceleration * mul;
    } else {
      data.position.moveTo(data.position.position[0], 0, data.position.position[2]);
    }
    return !onGround;
  }
}

class TimeAuxiliary extends N {
  constructor({ engine, motor }) {
    super({ motor, data: engine.createFloatUniformHandler(TIME_LOC) }, { autoStart: true });
  }
  refresh({ time, data, renderFrame }) {
    if (renderFrame) {
      data.updateValue(time);
    }
  }
}

class TiltAuxiliary extends ControlledLooper {
  constructor({ controls, tilt, motor }) {
    super(motor, controls, ({ up, down }) => up || down, { controls, tilt });
  }
  refresh({ data: { controls, tilt }, deltaTime, stopUpdate }) {
    const { up, down } = controls;
    const turnspeed = deltaTime / 400;
    if (up) {
      tilt.angle.addValue(-turnspeed);
    }
    if (down) {
      tilt.angle.addValue(turnspeed);
    }
    if (!up && !down) {
      stopUpdate();
    }
  }
}

class SmoothFollowAuxiliary extends N {
  followee;
  listener = { onChange: () => this.start() };
  constructor({ followee, follower, motor }, config) {
    super({ motor, data: { followee, follower, speed: config?.speed ?? 1 } }, { autoStart: false });
    this.followee = followee;
  }
  activate() {
    super.activate();
    this.followee.addChangeListener(this.listener);
  }
  deactivate() {
    this.followee.removeChangeListener(this.listener);
    super.deactivate();
  }
  refresh({ data: { follower, followee, speed }, stopUpdate }) {
    const [x5, y22, z4] = followee.position;
    const [fx, fy, fz] = follower.position;
    const dx = x5 - fx, dy2 = y22 - fy, dz = z4 - fz;
    const dist = Math.sqrt(dx * dx + dy2 * dy2 + dz * dz);
    if (dist < 0.1) {
      follower.moveTo(x5, y22, z4);
      stopUpdate();
    } else {
      const moveSpeed = Math.min(dist, speed * dist) / dist;
      follower.moveBy(dx * moveSpeed, dy2 * moveSpeed, dz * moveSpeed);
    }
  }
}

class DirAuxiliary {
  onFlip;
  controls;
  dx = 0;
  constructor({ controls }, onFlip) {
    this.onFlip = onFlip;
    this.controls = controls;
  }
  checkControls(controls) {
    let dx = 0;
    if (controls.left) {
      dx--;
    }
    if (controls.right) {
      dx++;
    }
    if (dx && dx !== this.dx) {
      this.dx = dx;
      this.onFlip?.(this.dx);
    }
  }
  onAction(controls) {
    this.checkControls(controls);
  }
  onActionUp(controls) {
    this.checkControls(controls);
  }
  activate() {
    this.controls.addListener(this);
  }
  deactivate() {
    this.controls.removeListener(this);
  }
}

class Updater {
  elems;
  updateRegistry;
  constructor({ updateRegistry, elems }) {
    this.updateRegistry = updateRegistry;
    this.elems = elems;
  }
  onUpdate(id, type) {
    this.updateRegistry.informUpdate(id, type);
  }
  activate() {
    this.elems.addUpdateListener?.(this);
  }
  deactivate() {
    this.elems.removeUpdateListener?.(this);
  }
}

class MediaUpdater extends Updater {
  #savedMediaInfo = new Map;
  #motor;
  constructor({ engine, motor, medias }) {
    super({
      updateRegistry: new UpdateRegistry((ids) => {
        ids.forEach((id) => this.removeMedia(id));
        engine.updateTextures(ids, medias).then((mediaInfos) => mediaInfos.forEach((mediaInfo) => {
          if (mediaInfo.isVideo) {
            motor.scheduleUpdate(mediaInfo, undefined, mediaInfo.refreshRate);
            this.#savedMediaInfo.set(mediaInfo.id, mediaInfo);
          } else {
            mediaInfo.dispose();
          }
        }));
      }, motor),
      elems: medias
    });
    this.#motor = motor;
  }
  removeMedia(id) {
    const mediaInfo = this.#savedMediaInfo.get(id);
    if (mediaInfo) {
      this.#motor.stopUpdate(mediaInfo);
      mediaInfo.dispose();
      this.#savedMediaInfo.delete(id);
    }
  }
  deactivate() {
    this.#dispose();
  }
  #dispose() {
    this.#savedMediaInfo.forEach((mediaInfo) => this.removeMedia(mediaInfo.id));
  }
}

class AnimationUpdater extends Updater {
  constructor({ engine, motor, animations }) {
    super({
      updateRegistry: new UpdateRegistry((ids) => {
        engine.updateAnimationDefinitions(ids, animations);
      }, motor),
      elems: animations
    });
  }
}

class MotionAuxiliary {
  onChange;
  #controls;
  #moving = false;
  constructor({ controls }, onChange) {
    this.onChange = onChange;
    this.#controls = controls;
  }
  set moving(value) {
    if (this.#moving !== value) {
      this.#moving = value;
      this.onChange?.(this.#moving);
    }
  }
  checkMotion(controls) {
    const { left, forward, backward, right } = controls;
    this.moving = left || forward || backward || right;
  }
  onAction(controls) {
    this.checkMotion(controls);
  }
  onActionUp(controls) {
    this.checkMotion(controls);
  }
  activate() {
    this.#controls.addListener(this);
  }
  deactivate() {
    this.moving = false;
    this.#controls.removeListener(this);
  }
}

class FollowAuxiliary extends N {
  followee;
  config;
  listener = {
    onChange: () => {
      if (this.config.followX || this.config.followY || this.config.followZ) {
        this.start();
      }
    }
  };
  constructor({ followee, follower, motor }, config) {
    super({ motor, data: { followee, follower } }, { autoStart: false });
    this.followee = followee;
    this.config = {
      followX: config?.followX ?? true,
      followY: config?.followY ?? true,
      followZ: config?.followZ ?? true,
      speed: config?.speed ?? 1
    };
  }
  activate() {
    super.activate();
    this.followee.addChangeListener(this.listener);
    this.start();
  }
  deactivate() {
    this.followee.removeChangeListener(this.listener);
    super.deactivate();
  }
  refresh({ data, stopUpdate }) {
    const { followX, followY, followZ, speed } = this.config;
    const x5 = followX ? data.followee.position[0] : data.follower.position[0];
    const y22 = followY ? data.followee.position[1] : data.follower.position[1];
    const z4 = followZ ? data.followee.position[2] : data.follower.position[2];
    data.follower.gotoPos(x5, y22, z4, speed);
    if (data.followee.position[0] === data.follower.position[0] && data.followee.position[1] === data.follower.position[1] && data.followee.position[2] === data.follower.position[2]) {
      stopUpdate();
    }
  }
}

class DisplayBox {
  sprites;
  constructor({ box, imageId, insideImageId }) {
    if (!box.disabled) {
      const cX = (box.left + box.right) / 2;
      const cY = (box.top + box.bottom) / 2;
      const cZ = (box.near + box.far) / 2;
      const groundScale = [box.right - box.left, 2, box.near - box.far];
      const sideScale = [2, box.top - box.bottom, box.near - box.far];
      const faceScale = [box.right - box.left, box.top - box.bottom, 2];
      const outside = [
        w2.create().translate(cX, box.bottom, cZ).scale(...groundScale).scale(0.5).rotateX(Math.PI / 2),
        w2.create().translate(cX, box.top, cZ).scale(...groundScale).scale(0.5).rotateX(-Math.PI / 2),
        w2.create().translate(box.left, cY, cZ).scale(...sideScale).scale(0.5).rotateY(-Math.PI / 2),
        w2.create().translate(box.right, cY, cZ).scale(...sideScale).scale(0.5).rotateY(Math.PI / 2),
        w2.create().translate(cX, cY, box.near).scale(...faceScale).scale(0.5).rotateY(0),
        w2.create().translate(cX, cY, box.far).scale(...faceScale).scale(0.5).rotateY(Math.PI)
      ].map((transform) => ({ imageId, transform }));
      const inside = !insideImageId ? [] : [
        w2.create().translate(cX, box.bottom, cZ).scale(...groundScale).scale(0.5).rotateX(-Math.PI / 2),
        w2.create().translate(cX, box.top, cZ).scale(...groundScale).scale(0.5).rotateX(+Math.PI / 2),
        w2.create().translate(box.left, cY, cZ).scale(...sideScale).scale(0.5).rotateY(+Math.PI / 2),
        w2.create().translate(box.right, cY, cZ).scale(...sideScale).scale(0.5).rotateY(-Math.PI / 2),
        w2.create().translate(cX, cY, box.near).scale(...faceScale).scale(0.5).rotateY(Math.PI),
        w2.create().translate(cX, cY, box.far).scale(...faceScale).scale(0.5).rotateY(0)
      ].map((transform) => ({ imageId: insideImageId, transform }));
      this.sprites = [...inside, ...outside];
    } else {
      this.sprites = [];
    }
  }
  get length() {
    return this.sprites.length;
  }
  at(index) {
    return this.sprites.at(index);
  }
}
var NULLBOX = {
  top: 0,
  bottom: 0,
  left: 0,
  right: 0,
  near: 0,
  far: 0,
  disabled: false
};

class CollisionBox {
  box;
  position;
  constructor(box, position) {
    this.box = box;
    this.position = position;
  }
  collideWith(box) {
    return this.right > box.left && box.right > this.left && this.top > box.bottom && box.top > this.bottom && this.near > box.far && box.near > this.far;
  }
  gotoPosition(pos) {
    this.position[0] = pos[0];
    this.position[1] = pos[1];
    this.position[2] = pos[2];
  }
  get top() {
    return this.box.top + this.position[1];
  }
  get bottom() {
    return this.box.bottom + this.position[1];
  }
  get left() {
    return this.box.left + this.position[0];
  }
  get right() {
    return this.box.right + this.position[0];
  }
  get near() {
    return this.box.near + this.position[2];
  }
  get far() {
    return this.box.far + this.position[2];
  }
}

class CollisionDetector {
  #collisionBox;
  #heroCollisionBox;
  #config;
  #listener;
  #collide = false;
  #disabled;
  constructor({ blockerBox, blockerPosition, heroBox = NULLBOX, listener = {} }, config = {}) {
    this.#collisionBox = new CollisionBox(blockerBox, blockerPosition);
    this.#heroCollisionBox = new CollisionBox(heroBox, [0, 0, 0]);
    this.#listener = listener;
    this.#config = { shouldBlock: config.shouldBlock ?? false };
    this.#disabled = blockerBox.disabled;
  }
  isBlocked(to) {
    if (this.#disabled) {
      return false;
    }
    this.#heroCollisionBox.gotoPosition(to);
    const collide = this.#heroCollisionBox.collideWith(this.#collisionBox);
    if (collide !== this.#collide) {
      this.#collide = collide;
      this.#listener.onBlockChange?.(this.#collide);
      if (this.#collide) {
        this.#listener.onEnter?.();
      } else {
        this.#listener.onLeave?.();
      }
    }
    return this.#config.shouldBlock ? collide : false;
  }
}
var FADE_RATE = 0.002;

class FadeApiAuxiliary {
  camera;
  config;
  motor;
  api;
  constructor({ camera, motor, api }, config) {
    this.camera = camera;
    this.motor = motor;
    this.api = api;
    this.config = {
      speed: config?.speed ?? 1
    };
    this.fadeIn = this.fadeIn.bind(this);
    this.fadeOut = this.fadeOut.bind(this);
  }
  activate() {
    const api = this.api;
    api.fadeIn = this.fadeIn;
    api.fadeOut = this.fadeOut;
  }
  deactivate() {
    const api = this.api;
    if (api.fadeIn === this.fadeIn) {
      delete api.fadeIn;
    }
    if (api.fadeOut === this.fadeOut) {
      delete api.fadeOut;
    }
  }
  fadeOut() {
    this.camera.fade.progressTowards(1, this.config.speed * FADE_RATE, this, this.motor);
  }
  fadeIn() {
    this.camera.fade.progressTowards(0, this.config.speed * FADE_RATE, this, this.motor);
  }
}
var k2 = (m32) => {
  if (m32) {
    const j2 = m32.getImageData(0, 0, m32.canvas.width, m32.canvas.height), { data: f2 } = j2;
    for (let b2 = 0;b2 < f2.length; b2 += 4)
      f2[b2] = f2[b2 + 1] = f2[b2 + 2] = 0;
    m32.putImageData(j2, 0, 0);
  }
};

class h {
  i;
  f;
  warningLimit = 50000;
  #i = new Set;
  #f = [];
  constructor(i, f2) {
    this.initCall = i;
    this.onRecycle = f2;
  }
  create(...i) {
    const f2 = this.#f.pop();
    if (f2)
      return this.#i.add(f2), this.initCall(f2, ...i);
    const v32 = this.initCall(undefined, ...i);
    return this.#i.add(v32), this.#v(), v32;
  }
  recycle(i) {
    this.#i.delete(i), this.#h(i);
  }
  recycleAll() {
    for (let i of this.#i)
      this.#h(i);
    this.#i.clear();
  }
  clear() {
    this.#f.length = 0, this.#i.clear();
  }
  countObjectsInExistence() {
    return this.#i.size + this.#f.length;
  }
  #h(i) {
    this.#f.push(i), this.onRecycle?.(i);
  }
  #v() {
    if (this.countObjectsInExistence() === this.warningLimit)
      console.warn("ObjectPool already created", this.#i.size + this.#f.length, "in", this.constructor.name);
  }
}

class SpriteCellCreator extends X2 {
  factory;
  slots = [];
  slotPool;
  constructor({ factory, slotPool }) {
    super();
    this.factory = factory;
    this.slotPool = slotPool ?? new SlotPool(copySprite);
  }
  trackCell(cell) {
    return this.#createCell(cell);
  }
  untrackCells(cellTags) {
    return this.#destroyCells(cellTags);
  }
  get length() {
    return this.slots.length;
  }
  at(index) {
    return this.slots[index]?.elem;
  }
  deactivate() {
    this.slots.forEach((slot) => this.slotPool.recycle(slot));
    this.slots.length = 0;
  }
  #createCell(cell) {
    let count = 0;
    const { tag } = cell;
    const elems = this.factory.getElemsAtCell(cell);
    x3(elems, (elem) => {
      if (elem) {
        const slot = this.slotPool.create(elem, tag);
        const spriteId = this.slots.length;
        this.slots.push(slot);
        this.informUpdate(spriteId);
        count++;
      }
    });
    this.factory.doneCellTracking?.(cell);
    return !!count;
  }
  #destroyCells(tags) {
    for (let i = this.slots.length - 1;i >= 0; i--) {
      const slot = this.slots[i];
      if (tags.has(slot.tag)) {
        this.informUpdate(i);
        this.informUpdate(this.slots.length - 1, SpriteUpdateType.TRANSFORM);
        this.slots[i] = this.slots[this.slots.length - 1];
        this.slots.pop();
        this.slotPool.recycle(slot);
      }
    }
  }
}

class SlotPool extends h {
  constructor(copy) {
    super((slot, elem, tag) => {
      if (!slot) {
        return { elem: copy(elem), tag };
      }
      slot.elem = copy(elem, slot.elem);
      slot.tag = tag;
      return slot;
    });
  }
}
var N3 = function(m32, Y2, w3, H4) {
  const J = Z3(m32, Y2, w3, H4), V22 = m32 * H4, W3 = Y2 * H4, K2 = w3 * H4;
  return { pos: [m32, Y2, w3, H4], worldPosition: [V22, W3, K2], tag: J };
};
var X3 = function(m32, Y2, w3, H4, J) {
  const V22 = Z3(Y2, w3, H4, J), W3 = Y2 * J, K2 = w3 * J, $3 = H4 * J;
  return m32.worldPosition[0] = W3, m32.worldPosition[1] = K2, m32.worldPosition[2] = $3, m32.pos[0] = Y2, m32.pos[1] = w3, m32.pos[2] = H4, m32.pos[3] = J, m32.tag = V22, m32;
};
var Z3 = function(m32, Y2, w3, H4) {
  return m32 + "," + Y2 + "," + w3 + "|" + H4;
};
var j2 = function(m32, Y2) {
  return Math.round(m32 / Y2);
};
var b2 = function(m32, Y2) {
  return new M2({ tracker: m32, boundary: Y2 });
};
var u3 = 3;

class B4 {
  i;
  f;
  warningLimit = 50000;
  #m = new Set;
  #Y = [];
  constructor(m32, Y2) {
    this.initCall = m32, this.onRecycle = Y2;
  }
  create(...m32) {
    const Y2 = this.#Y.pop();
    if (Y2)
      return this.#m.add(Y2), this.initCall(Y2, ...m32);
    const w3 = this.initCall(undefined, ...m32);
    return this.#m.add(w3), this.#H(), w3;
  }
  recycle(m32) {
    this.#m.delete(m32), this.#w(m32);
  }
  recycleAll() {
    for (let m32 of this.#m)
      this.#w(m32);
    this.#m.clear();
  }
  clear() {
    this.#Y.length = 0, this.#m.clear();
  }
  countObjectsInExistence() {
    return this.#m.size + this.#Y.length;
  }
  #w(m32) {
    this.#Y.push(m32), this.onRecycle?.(m32);
  }
  #H() {
    if (this.countObjectsInExistence() === this.warningLimit)
      console.warn("ObjectPool already created", this.#m.size + this.#Y.length, "in", this.constructor.name);
  }
}

class Q3 extends B4 {
  constructor() {
    super((m32, Y2, w3, H4, J) => {
      return !m32 ? N3(Y2, w3, H4, J) : X3(m32, Y2, w3, H4, J);
    });
  }
  createFromPos(m32, Y2) {
    const w3 = j2(m32[0], Y2), H4 = j2(m32[1], Y2), J = j2(m32[2], Y2);
    return this.create(w3, H4, J, Y2);
  }
}

class G4 {
  #m = new Set;
  add(m32) {
    this.#m.add(m32);
  }
  remove(m32) {
    this.#m.delete(m32);
  }
  trackCell(m32) {
    let Y2 = false;
    return this.#m.forEach((w3) => {
      if (w3.trackCell(m32))
        Y2 = true;
    }), Y2;
  }
  untrackCells(m32) {
    this.#m.forEach((Y2) => {
      Y2.untrackCells(m32);
    });
  }
}

class I {
  i;
  f;
  warningLimit = 50000;
  #m = new Set;
  #Y = [];
  constructor(m32, Y2) {
    this.initCall = m32, this.onRecycle = Y2;
  }
  create(...m32) {
    const Y2 = this.#Y.pop();
    if (Y2)
      return this.#m.add(Y2), this.initCall(Y2, ...m32);
    const w3 = this.initCall(undefined, ...m32);
    return this.#m.add(w3), this.#H(), w3;
  }
  recycle(m32) {
    this.#m.delete(m32), this.#w(m32);
  }
  recycleAll() {
    for (let m32 of this.#m)
      this.#w(m32);
    this.#m.clear();
  }
  clear() {
    this.#Y.length = 0, this.#m.clear();
  }
  countObjectsInExistence() {
    return this.#m.size + this.#Y.length;
  }
  #w(m32) {
    this.#Y.push(m32), this.onRecycle?.(m32);
  }
  #H() {
    if (this.countObjectsInExistence() === this.warningLimit)
      console.warn("ObjectPool already created", this.#m.size + this.#Y.length, "in", this.constructor.name);
  }
}

class R3 {
  F;
  #m;
  #Y;
  #w = new Map;
  constructor(m32, Y2 = new _4) {
    this.pool = Y2, this.#m = { value: m32 }, this.#Y = { value: m32 }, this.#m.next = this.#Y, this.#Y.prev = this.#m;
  }
  clear() {
    while (this.#J(this.#m.next))
      ;
  }
  get size() {
    return this.#w.size;
  }
  contains(m32) {
    return this.#w.has(m32);
  }
  pushTop(m32) {
    this.#Q(this.#K(m32));
  }
  pushBottom(m32) {
    this.#V(this.#K(m32));
  }
  moveToTop(m32) {
    const Y2 = this.#w.get(m32);
    if (Y2)
      return this.#H(Y2), this.#Q(Y2), true;
    return false;
  }
  moveToBottom(m32) {
    const Y2 = this.#w.get(m32);
    if (Y2)
      return this.#H(Y2), this.#V(Y2), true;
    return false;
  }
  popBottom() {
    return this.#J(this.#m.next);
  }
  popTop() {
    return this.#J(this.#Y.prev);
  }
  #H(m32) {
    if (m32 === this.#Y || m32 === this.#m)
      return false;
    if (m32.prev && m32.next)
      m32.prev.next = m32.next, m32.next.prev = m32.prev;
    return m32.prev = m32.next = undefined, true;
  }
  #K(m32) {
    const Y2 = this.pool.create(m32);
    return this.#w.set(m32, Y2), Y2;
  }
  #J(m32) {
    if (!this.#H(m32))
      return;
    return this.pool.recycle(m32), this.#w.delete(m32.value), m32.value;
  }
  #Q(m32) {
    const Y2 = this.#Y.prev, w3 = m32;
    w3.prev = Y2, w3.next = this.#Y, Y2.next = this.#Y.prev = w3;
  }
  #V(m32) {
    const Y2 = this.#m.next, w3 = m32;
    w3.next = Y2, w3.prev = this.#m, Y2.prev = this.#m.next = w3;
  }
}

class _4 extends I {
  constructor() {
    super((m32, Y2) => {
      if (!m32)
        return { value: Y2 };
      return m32.value = Y2, m32.prev = undefined, m32.next = undefined, m32;
    });
  }
}
var U = [3, 3, 3];

class A5 {
  cellTags = new R3("");
  cellTrack;
  cellPool = new Q3;
  range;
  base;
  cellLimit;
  cellSize;
  _trimmedTags = new Set;
  constructor({ cellTrack: m32 }, { range: Y2, cellLimit: w3, cellSize: H4 = 1 } = {}) {
    this.range = [Y2?.[0] ?? U[0], Y2?.[1] ?? U[1], Y2?.[2] ?? U[2]], this.base = this.range.map((J) => Math.ceil(-J / 2)), this.cellLimit = Math.max(0, w3 ?? 10), this.cellSize = H4 ?? 1, this.cellTrack = m32;
  }
  onCell(m32) {
    this.#m(m32), this.#w();
  }
  #m(m32) {
    const { range: Y2, base: w3 } = this, { pos: H4 } = m32, J = H4[0] + w3[0], V22 = H4[1] + w3[1], W3 = H4[2] + w3[2];
    for (let K2 = 0;K2 < Y2[0]; K2++)
      for (let $3 = 0;$3 < Y2[2]; $3++)
        for (let O4 = 0;O4 < Y2[1]; O4++)
          this.#Y(this.cellPool.create(J + $3, V22 + O4, W3 + K2, this.cellSize));
    this.cellPool.clear();
  }
  #Y(m32) {
    if (!this.cellTags.contains(m32.tag)) {
      if (this.cellTrack.trackCell(m32))
        this.cellTags.pushTop(m32.tag);
    } else
      this.cellTags.moveToTop(m32.tag);
  }
  #w() {
    while (this.cellTags.size > this.cellLimit) {
      const m32 = this.cellTags.popBottom();
      if (m32)
        this._trimmedTags.add(m32);
      else
        break;
    }
    if (this._trimmedTags.size)
      this.cellTrack.untrackCells(this._trimmedTags), this._trimmedTags.clear();
  }
  deactivate() {
    this.cellTags.clear();
  }
}

class M2 {
  #m;
  #Y;
  constructor({ boundary: m32, tracker: Y2 }) {
    this.#m = m32, this.#Y = Y2;
  }
  trackCell(m32) {
    if (!this.#m.include(m32))
      return false;
    return this.#Y.trackCell(m32);
  }
  untrackCells(m32) {
    this.#Y.untrackCells(m32);
  }
}

class h2 {
  minX;
  maxX;
  minY;
  maxY;
  minZ;
  maxZ;
  constructor(m32) {
    this.minX = m32?.xRange?.[0] ?? Number.NEGATIVE_INFINITY, this.maxX = m32?.xRange?.[1] ?? Number.POSITIVE_INFINITY, this.minY = m32?.yRange?.[0] ?? Number.NEGATIVE_INFINITY, this.maxY = m32?.yRange?.[1] ?? Number.POSITIVE_INFINITY, this.minZ = m32?.zRange?.[0] ?? Number.NEGATIVE_INFINITY, this.maxZ = m32?.zRange?.[1] ?? Number.POSITIVE_INFINITY;
  }
  include(m32) {
    const Y2 = m32.pos[0], w3 = m32.pos[1], H4 = m32.pos[2];
    if (Y2 < this.minX || this.maxX < Y2 || w3 < this.minY || this.maxY < w3 || H4 < this.minZ || this.maxZ < H4)
      return false;
    return true;
  }
}

class E3 {
  #m = new Set;
  positionMatrix;
  previousCell;
  listener = { onChange: () => this.#w(this.positionMatrix) };
  #Y = new Q3;
  constructor({ positionMatrix: m32 }, Y2) {
    const w3 = Y2?.cellSize ?? 1;
    this.previousCell = this.#Y.create(Number.NaN, Number.NaN, Number.NaN, w3), this.positionMatrix = m32;
  }
  addListener(m32) {
    return this.#m.add(m32), this;
  }
  removeListener(m32) {
    this.#m.delete(m32);
  }
  #w(m32) {
    let Y2 = this.#Y.createFromPos(m32.position, this.previousCell.pos[u3]);
    if (this.previousCell.pos[0] !== Y2.pos[0] || this.previousCell.pos[1] !== Y2.pos[1] || this.previousCell.pos[2] !== Y2.pos[2]) {
      for (let H4 of this.#m)
        H4.onCell(Y2, this.previousCell);
      const w3 = this.previousCell;
      this.previousCell = Y2, Y2 = w3;
    }
    this.#Y.recycle(Y2);
  }
  activate() {
    this.positionMatrix.addChangeListener(this.listener), this.previousCell.pos[0] = Number.NaN, this.previousCell.pos[1] = Number.NaN, this.previousCell.pos[2] = Number.NaN, this.#w(this.positionMatrix);
  }
  deactivate() {
    this.positionMatrix.removeChangeListener(this.listener);
  }
}

class FixedSpriteFactory extends AuxiliaryHolder {
  spritesPerCell = new Map;
  spritesList;
  config;
  constructor(config, ...spritesList) {
    super();
    this.spritesList = spritesList;
    this.config = config;
    spritesList.forEach((sprites) => this.addAuxiliary(sprites));
  }
  activate() {
    super.activate();
    this.spritesList.forEach((sprites) => {
      x3(sprites, (sprite) => {
        if (sprite) {
          const vector = [0, 0, 0];
          c.transformToPosition(sprite.transform, vector);
          const cellSize = this.config.cellSize ?? 1;
          const cell = N3(j2(vector[0], cellSize), j2(vector[1], cellSize), j2(vector[2], cellSize), cellSize);
          if (!this.spritesPerCell.has(cell.tag)) {
            this.spritesPerCell.set(cell.tag, []);
          }
          this.spritesPerCell.get(cell.tag)?.push(copySprite(sprite));
        }
      });
    });
  }
  getElemsAtCell(cell) {
    return this.spritesPerCell.get(cell.tag);
  }
}
var import_seedrandom = __toESM(require_seedrandom2(), 1);

class SpritePool extends h {
  constructor() {
    super((sprite, imageId) => {
      if (!sprite) {
        return { imageId, transform: w2.create() };
      }
      sprite.imageId = imageId;
      sprite.transform.identity();
      sprite.spriteType = SpriteType.DEFAULT;
      return sprite;
    });
  }
}

class StepBackAuxiliary extends N {
  #previousCellPos;
  #curCellPos;
  constructor({ position, motor }, config = {}) {
    super({ motor, data: { position, speed: config.speed ?? 1, step: config.step ?? 2 } }, { autoStart: false });
    position.goBack = () => this.goBack();
    const step = config.step ?? 2;
    this.#curCellPos = [
      j2(position.position[0], step) * step,
      0,
      j2(position.position[2], step) * step
    ];
    this.#previousCellPos = [...this.#curCellPos];
  }
  onCell(cell) {
    if (this.#curCellPos[0] !== cell.pos[0] || this.#curCellPos[2] !== cell.pos[2]) {
      const temp = this.#previousCellPos;
      this.#previousCellPos = this.#curCellPos;
      this.#curCellPos = temp;
      this.#curCellPos[0] = cell.pos[0];
      this.#curCellPos[2] = cell.pos[2];
    }
  }
  goBack() {
    this.#curCellPos[0] = this.#previousCellPos[0];
    this.#curCellPos[2] = this.#previousCellPos[2];
    this.start();
  }
  refresh({ deltaTime, data, stopUpdate }) {
    const speed = deltaTime / 50 * data.speed;
    let moveResult = data.position.gotoPos(this.#previousCellPos[0] * data.step, this.#previousCellPos[1] * data.step, this.#previousCellPos[2] * data.step, speed);
    if (moveResult !== d.MOVED) {
      stopUpdate();
    }
  }
}
var updateBodyRecord = function(record, accumulator, id, elems) {
  if (!elems) {
    if (record[id]) {
      accumulator.remove(record[id]);
      delete record[id];
    }
  } else {
    if (!record[id]) {
      accumulator.add(elems);
      record[id] = elems;
    }
  }
};

class BodyModel {
  sprites = new H2;
  colliders = new H2;
  #bodies = new H2;
  #spritesPerId = {};
  #collidersPerId = {};
  constructor({ sprites, colliders, bodies } = {}) {
    this.#bodies.addUpdateListener({
      onUpdate: (bodyId) => {
        const body = this.#bodies.at(bodyId);
        updateBodyRecord(this.#spritesPerId, this.sprites, bodyId, body?.sprites);
        updateBodyRecord(this.#collidersPerId, this.colliders, bodyId, body?.colliders);
      }
    });
    if (sprites) {
      this.sprites.add(sprites);
    }
    if (colliders) {
      this.colliders.add(colliders);
    }
    if (bodies) {
      this.#bodies.add(bodies);
    }
  }
  addSprites(sprites) {
    this.sprites.add(sprites);
  }
  addColliders(colliders) {
    this.colliders.add(colliders);
  }
  addBodies(bodies) {
    this.#bodies.add(bodies);
  }
  removeSprites(sprites) {
    this.sprites.remove(sprites);
  }
  removeColliders(colliders) {
    this.colliders.remove(colliders);
  }
  removeBodies(bodies) {
    this.#bodies.remove(bodies);
  }
  updateFully() {
    this.sprites.updateFully();
    this.colliders.updateFully();
    this.#bodies.updateFully();
  }
}
var Assets;
(function(Assets2) {
  Assets2[Assets2["DOBUKI"] = 0] = "DOBUKI";
  Assets2[Assets2["LOGO"] = 1] = "LOGO";
  Assets2[Assets2["GROUND"] = 2] = "GROUND";
  Assets2[Assets2["VIDEO"] = 3] = "VIDEO";
  Assets2[Assets2["WIREFRAME"] = 4] = "WIREFRAME";
  Assets2[Assets2["WIREFRAME_RED"] = 5] = "WIREFRAME_RED";
  Assets2[Assets2["GRASS"] = 6] = "GRASS";
  Assets2[Assets2["BRICK"] = 7] = "BRICK";
  Assets2[Assets2["DODO"] = 8] = "DODO";
  Assets2[Assets2["DODO_SHADOW"] = 9] = "DODO_SHADOW";
  Assets2[Assets2["TREE"] = 10] = "TREE";
  Assets2[Assets2["BUN"] = 11] = "BUN";
  Assets2[Assets2["BUN_SHADOW"] = 12] = "BUN_SHADOW";
  Assets2[Assets2["WOLF"] = 13] = "WOLF";
  Assets2[Assets2["WOLF_SHADOW"] = 14] = "WOLF_SHADOW";
  Assets2[Assets2["WATER"] = 15] = "WATER";
  Assets2[Assets2["BUSHES"] = 16] = "BUSHES";
  Assets2[Assets2["GRASS_GROUND"] = 17] = "GRASS_GROUND";
})(Assets || (Assets = {}));
var Anims;
(function(Anims2) {
  Anims2[Anims2["STILL"] = 0] = "STILL";
  Anims2[Anims2["RUN"] = 1] = "RUN";
  Anims2[Anims2["WOLF_STILL"] = 2] = "WOLF_STILL";
  Anims2[Anims2["WOLF_JUMP"] = 3] = "WOLF_JUMP";
})(Anims || (Anims = {}));
var LOGO_SIZE = 512;
var CELLSIZE = 2;

class DemoGame extends AuxiliaryHolder {
  api = {};
  camera;
  constructor({ engine, motor, ui, keyboard, controls }) {
    super();
    const mediaAccumulator = new H2;
    this.addAuxiliary(new MediaUpdater({ engine, motor, medias: mediaAccumulator }));
    const mediaItems = new ItemsGroup([{
      id: Assets.DOBUKI,
      type: "image",
      src: "dobuki.png"
    }, {
      id: Assets.BUN,
      type: "image",
      src: "bun.png"
    }, {
      id: Assets.BUN_SHADOW,
      type: "image",
      src: "bun.png",
      postProcess: k2
    }, {
      id: Assets.DODO,
      type: "image",
      src: "dodo.png",
      spriteSheet: {
        spriteSize: [190, 209]
      }
    }, {
      id: Assets.DODO_SHADOW,
      type: "image",
      src: "dodo.png",
      spriteSheet: {
        spriteSize: [190, 209]
      },
      postProcess: k2
    }, {
      id: Assets.WOLF,
      type: "image",
      src: "wolf.png",
      spriteSheet: {
        spriteSize: [200, 256]
      }
    }, {
      id: Assets.WOLF_SHADOW,
      type: "image",
      src: "wolf.png",
      spriteSheet: {
        spriteSize: [200, 256]
      },
      postProcess: k2
    }, {
      id: Assets.LOGO,
      type: "draw",
      draw: (ctx) => {
        const { canvas } = ctx;
        canvas.width = LOGO_SIZE;
        canvas.height = LOGO_SIZE;
        const centerX = canvas.width / 2, centerY = canvas.height / 2;
        const halfSize = canvas.width / 2;
        ctx.imageSmoothingEnabled = true;
        ctx.lineWidth = canvas.width / 50;
        ctx.strokeStyle = "black";
        ctx.fillStyle = "gold";
        ctx.beginPath();
        ctx.arc(centerX, centerY, halfSize * 0.8, 0, 2 * Math.PI);
        ctx.fill();
        ctx.stroke();
        ctx.beginPath();
        ctx.arc(centerX, centerY, halfSize * 0.5, 0, Math.PI);
        ctx.stroke();
        ctx.beginPath();
        ctx.arc(canvas.width / 3, canvas.height / 3, halfSize * 0.1, 0, Math.PI, true);
        ctx.stroke();
        ctx.beginPath();
        ctx.arc(canvas.width / 3 * 2, canvas.height / 3, halfSize * 0.1, 0, Math.PI * 2, true);
        ctx.stroke();
      }
    }, {
      id: Assets.GROUND,
      type: "draw",
      draw: (ctx) => {
        const { canvas } = ctx;
        canvas.width = LOGO_SIZE;
        canvas.height = LOGO_SIZE;
        ctx.fillStyle = "#ddd";
        ctx.lineWidth = canvas.width / 50;
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        ctx.strokeStyle = "black";
        ctx.fillStyle = "silver";
        ctx.beginPath();
        ctx.rect(canvas.width * 0.2, canvas.height * 0.2, canvas.width * 0.6, canvas.height * 0.6);
        ctx.fill();
        ctx.stroke();
      }
    }, {
      id: Assets.GRASS_GROUND,
      type: "draw",
      draw: (ctx) => {
        const { canvas } = ctx;
        canvas.width = LOGO_SIZE;
        canvas.height = LOGO_SIZE;
        ctx.fillStyle = "green";
        ctx.lineWidth = canvas.width / 50;
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        ctx.strokeStyle = "#6f6";
        ctx.fillStyle = "lightgreen";
        ctx.beginPath();
        ctx.rect(canvas.width * 0.2, canvas.height * 0.2, canvas.width * 0.6, canvas.height * 0.6);
        ctx.fill();
        ctx.stroke();
      }
    }, {
      id: Assets.BRICK,
      type: "draw",
      draw: (ctx) => {
        const { canvas } = ctx;
        canvas.width = LOGO_SIZE;
        canvas.height = LOGO_SIZE;
        ctx.fillStyle = "#ddd";
        ctx.lineWidth = canvas.width / 50;
        ctx.fillRect(0, 0, canvas.width, canvas.height);
      }
    }, {
      id: Assets.VIDEO,
      type: "video",
      src: "sample.mp4",
      volume: 0,
      fps: 30,
      playSpeed: 0.5,
      maxRefreshRate: 30
    }, {
      id: Assets.WIREFRAME,
      type: "draw",
      draw: (ctx) => {
        const { canvas } = ctx;
        canvas.width = LOGO_SIZE;
        canvas.height = LOGO_SIZE;
        ctx.lineWidth = 40;
        ctx.setLineDash([20, 5]);
        ctx.strokeStyle = "lightblue";
        ctx.beginPath();
        ctx.rect(10, 10, canvas.width - 20, canvas.height - 20);
        ctx.stroke();
      }
    }, {
      id: Assets.WIREFRAME_RED,
      type: "draw",
      draw: (ctx) => {
        const { canvas } = ctx;
        canvas.width = LOGO_SIZE;
        canvas.height = LOGO_SIZE;
        ctx.lineWidth = 40;
        ctx.setLineDash([20, 5]);
        ctx.strokeStyle = "red";
        ctx.beginPath();
        ctx.rect(10, 10, canvas.width - 20, canvas.height - 20);
        ctx.stroke();
      }
    }, {
      id: Assets.GRASS,
      type: "draw",
      draw: (ctx) => {
        const { canvas } = ctx;
        canvas.width = 1024;
        canvas.height = 1024;
        ctx.fillStyle = "green";
        ctx.lineWidth = canvas.width / 50;
        ctx.fillRect(0, 0, canvas.width, canvas.height);
      }
    }, {
      id: Assets.BUSHES,
      type: "draw",
      draw: (ctx) => {
        const { canvas } = ctx;
        canvas.width = 1024;
        canvas.height = 1024;
        ctx.fillStyle = "#050";
        ctx.lineWidth = canvas.width / 50;
        ctx.fillRect(0, 0, canvas.width, canvas.height);
      }
    }, {
      id: Assets.WATER,
      type: "draw",
      draw: (ctx) => {
        const { canvas } = ctx;
        canvas.width = 1024;
        canvas.height = 1024;
        ctx.fillStyle = "#68f";
        ctx.lineWidth = canvas.width / 50;
        ctx.fillRect(0, 0, canvas.width, canvas.height);
      }
    }, {
      id: Assets.TREE,
      type: "draw",
      draw: (ctx) => {
        const { canvas } = ctx;
        canvas.width = 200;
        canvas.height = 200;
        ctx.fillStyle = "#0f0";
        ctx.beginPath();
        ctx.moveTo(100, 0);
        ctx.lineTo(200, 150);
        ctx.lineTo(0, 150);
        ctx.fill();
        ctx.fillStyle = "#430";
        ctx.fillRect(75, 125, 50, 50);
      }
    }]);
    mediaAccumulator.add(mediaItems);
    this.addAuxiliary({
      activate() {
        mediaAccumulator.updateFully();
      }
    });
    const animationAccumulator = new H2;
    this.addAuxiliary(new AnimationUpdater({ engine, motor, animations: animationAccumulator }));
    const animationItems = new ItemsGroup([{
      id: Anims.STILL,
      frames: [0]
    }, {
      id: Anims.RUN,
      frames: [1, 5],
      fps: 24
    }, {
      id: Anims.WOLF_STILL,
      frames: [0, 4],
      fps: 15
    }]);
    animationAccumulator.add(animationItems);
    this.addAuxiliary({
      activate() {
        animationAccumulator.updateFully();
      }
    });
    const cellTrackers = new G4;
    const spritesAccumulator = new H2({
      onChange: (value) => engine.setMaxSpriteCount(value)
    });
    this.addAuxiliary(new SpriteUpdater({ engine, motor, sprites: spritesAccumulator }));
    const exitBlock = {
      top: 2,
      bottom: -1,
      left: -0.1,
      right: 0.1,
      near: 0,
      far: -0.5
    };
    const exitCell = N3(0, 0, 0, CELLSIZE);
    const exitPosition = exitCell.worldPosition;
    const worldColliders = new H2;
    const heroBox = {
      top: 1,
      bottom: -1,
      left: -0.9,
      right: 0.9,
      near: 0.9,
      far: -0.9
    };
    const blockBox = {
      top: 2,
      bottom: -1,
      left: -1,
      right: 1,
      near: 1,
      far: -1
    };
    {
      const dobukiCell = N3(-3, 0, -1, CELLSIZE);
      const dobukiBox = {
        top: 1,
        bottom: -1,
        left: -0.1,
        right: 0.1,
        near: 0,
        far: -0.5
      };
      const dobukiPosition = dobukiCell.worldPosition;
      const dobukiBlockPosition = [
        dobukiPosition[0],
        dobukiPosition[1],
        dobukiPosition[2] - CELLSIZE
      ];
      const body = new BodyModel({
        colliders: [
          new CollisionDetector({
            blockerBox: blockBox,
            blockerPosition: dobukiBlockPosition,
            heroBox,
            listener: {
              onBlockChange(blocked) {
                displayBox.setImageId(blocked ? Assets.WIREFRAME_RED : Assets.WIREFRAME);
              }
            }
          }, { shouldBlock: true }),
          new CollisionDetector({
            blockerBox: dobukiBox,
            blockerPosition: dobukiPosition,
            heroBox,
            listener: {
              onEnter() {
                displayBox.setImageId(Assets.WIREFRAME_RED);
                ui.showDialog({
                  conversation: {
                    messages: [
                      { text: "Hello there." },
                      { text: "Bye bye." },
                      {
                        action: goBackAction(heroPos),
                        next: true
                      }
                    ]
                  }
                });
              },
              onLeave() {
                displayBox.setImageId(Assets.WIREFRAME);
              }
            }
          }, { shouldBlock: false })
        ]
      });
      const dobukiPosMatrix = new a0().movedTo(dobukiPosition[0], dobukiPosition[1], dobukiPosition[2]);
      body.addSprites(new SpriteGroup([{
        imageId: Assets.DOBUKI,
        spriteType: SpriteType.SPRITE,
        transform: w2.create().translate(0, -0.3, -1)
      }], dobukiPosMatrix));
      body.addSprites(new SpriteGroup(new DisplayBox({ box: dobukiBox, imageId: Assets.WIREFRAME, insideImageId: Assets.WIREFRAME }), dobukiPosMatrix));
      body.addSprites(new SpriteGroup(new DisplayBox({ box: blockBox, imageId: Assets.WIREFRAME, insideImageId: Assets.WIREFRAME }), new a0().movedTo(dobukiBlockPosition[0], dobukiBlockPosition[1], dobukiBlockPosition[2])));
      worldColliders.add(body.colliders);
      const factory = new FixedSpriteFactory({ cellSize: CELLSIZE }, body.sprites);
      const creator = new SpriteCellCreator({ factory });
      spritesAccumulator.add(creator);
      cellTrackers.add(creator);
      this.addAuxiliary(factory);
    }
    const blockPositions = [
      [-1, 0, -1],
      [1, 0, -1],
      [0, 0, -1],
      [-1, 0, 0],
      [1, 0, 0]
    ].map(([x5, y3, z4]) => [x5 * CELLSIZE, y3 * CELLSIZE, z4 * CELLSIZE]);
    blockPositions.forEach((blockPosition) => {
      const blockBoxSprites = new SpriteGroup(new DisplayBox({ box: blockBox, imageId: Assets.GROUND, insideImageId: Assets.BRICK }), new a0().movedTo(blockPosition[0], blockPosition[1], blockPosition[2]));
      const factory = new FixedSpriteFactory({ cellSize: CELLSIZE }, blockBoxSprites);
      this.addAuxiliary(factory);
      const creator = new SpriteCellCreator({ factory });
      spritesAccumulator.add(creator);
      cellTrackers.add(creator);
    });
    {
      const factory = new FixedSpriteFactory({ cellSize: CELLSIZE }, new SpriteGroup(new DisplayBox({ box: exitBlock, imageId: Assets.WIREFRAME, insideImageId: Assets.WIREFRAME }), new a0().movedTo(exitPosition[0], exitPosition[1], exitPosition[2])), [
        w2.create().translate(-3.01, 0, 0).rotateY(Math.PI / 2),
        w2.create().translate(-3.01, 0, 0).rotateY(-Math.PI / 2),
        w2.create().translate(3.01, 0, 0).rotateY(-Math.PI / 2),
        w2.create().translate(3.01, 0, 0).rotateY(Math.PI / 2)
      ].map((transform) => ({ imageId: Assets.LOGO, transform })), [
        w2.create().translate(0, -0.9, 0).rotateX(-Math.PI / 2),
        w2.create().translate(0, -0.9, 2).rotateX(-Math.PI / 2),
        w2.create().translate(-2, -0.9, 2).rotateX(-Math.PI / 2),
        w2.create().translate(2, -0.9, 2).rotateX(-Math.PI / 2)
      ].map((transform) => ({ imageId: Assets.GRASS_GROUND, transform })));
      const creator = new SpriteCellCreator({ factory });
      spritesAccumulator.add(creator);
      cellTrackers.add(creator);
      this.addAuxiliary(factory);
    }
    const camPosition = new a0;
    const camera = this.camera = new Camera({ engine, motor, position: camPosition });
    this.addAuxiliary(camera);
    {
      const arrayPool = new h((a2) => a2 ?? [], (a2) => a2.length = 0);
      const arrayPool2 = new h((a2) => a2 ?? [], (a2) => a2.length = 0);
      const spritePool = new SpritePool;
      const spritesMap = new Map;
      const collidersMap = new Map;
      cellTrackers.add(b2({
        trackCell: function(cell) {
          const rng2 = import_seedrandom.alea(cell.tag);
          const sprites = arrayPool.create();
          const cellPos = cell.pos;
          const px = cell.worldPosition[0];
          const pz = cell.worldPosition[2];
          const distSq = cellPos[0] * cellPos[0] + cellPos[2] * cellPos[2];
          const isWater = distSq > 1000;
          const hasTree = distSq > 10 && rng2() < 0.1 && !isWater;
          const ground = spritePool.create(hasTree ? Assets.BUSHES : isWater ? Assets.WATER : Assets.GRASS);
          ground.spriteType = isWater ? SpriteType.WAVE : SpriteType.DEFAULT;
          ground.transform.translate(px, -1 - (isWater ? 1 : 0), pz).rotateX(-Math.PI / 2);
          sprites.push(ground);
          const count = hasTree ? 5 + rng2() * 10 : 0;
          for (let i = 0;i < count; i++) {
            const tree = spritePool.create(Assets.TREE);
            tree.spriteType = SpriteType.SPRITE;
            const size = 1 + Math.floor(2 * rng2());
            tree.transform.translate(px + (rng2() - 0.5) * 2.5, -1 + size / 2, pz + (rng2() - 0.5) * 2.5).scale(0.2 + rng2(), size, 0.2 + rng2());
            sprites.push(tree);
          }
          if (!isWater && !count && rng2() < 0.02) {
            const bun = spritePool.create(Assets.BUN);
            bun.spriteType = SpriteType.SPRITE;
            bun.transform.translate(px, -0.7, pz).scale(0.5);
            const bunShadow = spritePool.create(Assets.BUN_SHADOW);
            bunShadow.transform.translate(px, -1, pz).rotateX(-Math.PI / 2).scale(0.5);
            sprites.push(bun, bunShadow);
          }
          if (!isWater && !count && rng2() < 0.01) {
            const scale = 1.5;
            const wolf = spritePool.create(Assets.WOLF);
            wolf.spriteType = SpriteType.SPRITE;
            wolf.transform.translate(px, 0, pz).scale(scale);
            const shadow = spritePool.create(Assets.WOLF_SHADOW);
            shadow.transform.translate(px, -0.99, pz - 0.5).rotateX(-Math.PI / 2).scale(scale);
            sprites.push(wolf, shadow);
          }
          spritesMap.set(cell.tag, sprites);
          spritesAccumulator.add(sprites);
          if (hasTree || isWater) {
            const colliders = arrayPool2.create();
            colliders.push(new CollisionDetector({
              blockerBox: blockBox,
              blockerPosition: [px, 0, pz],
              heroBox
            }, { shouldBlock: true }));
            collidersMap.set(cell.tag, colliders);
            worldColliders.add(colliders);
          }
          return sprites.length > 0;
        },
        untrackCells: function(cellTags) {
          cellTags.forEach((tag) => {
            const sprites = spritesMap.get(tag);
            if (sprites) {
              spritesAccumulator.remove(sprites);
              sprites.forEach((sprite) => spritePool.recycle(sprite));
              spritesMap.delete(tag);
              arrayPool.recycle(sprites);
            }
            const colliders = collidersMap.get(tag);
            if (colliders) {
              worldColliders.remove(colliders);
              collidersMap.delete(tag);
              arrayPool2.recycle(colliders);
            }
          });
        }
      }, new h2({ yRange: [0, 0] })));
    }
    worldColliders.add([
      ...blockPositions.map((blockPosition) => new CollisionDetector({
        blockerBox: blockBox,
        blockerPosition: blockPosition,
        heroBox,
        listener: {
          onBlockChange(blocked) {
            displayBox.setImageId(blocked ? Assets.WIREFRAME_RED : Assets.WIREFRAME);
          }
        }
      }, { shouldBlock: true })),
      new CollisionDetector({
        blockerBox: exitBlock,
        blockerPosition: exitPosition,
        heroBox,
        listener: {
          onEnter() {
            displayBox.setImageId(Assets.WIREFRAME_RED);
            ui.showDialog({
              conversation: {
                messages: [
                  { text: "Going down..." }
                ]
              }
            }, () => {
              camera.fade.progressTowards(1, 0.005, this, motor);
            });
          },
          onLeave() {
            displayBox.setImageId(Assets.WIREFRAME);
          }
        }
      }, { shouldBlock: false })
    ]);
    const heroPos = new a0({ blockers: worldColliders }).movedTo(0, 0, 3);
    const heroSprites = new SpriteGroup([{
      imageId: Assets.DODO,
      spriteType: SpriteType.SPRITE,
      transform: w2.create().translate(0, -0.3, 0),
      animationId: Anims.STILL
    }], heroPos);
    spritesAccumulator.add(heroSprites);
    this.addAuxiliary({
      activate() {
        spritesAccumulator.updateFully();
      }
    });
    const displayBox = new SpriteGroup(new DisplayBox({ box: heroBox, imageId: Assets.WIREFRAME }), heroPos);
    spritesAccumulator.add(displayBox);
    const shadowPos = new a0({});
    const shadowHeroSprites = new SpriteGroup([
      {
        imageId: Assets.DODO_SHADOW,
        transform: w2.create().translate(0, -0.89, 0.5).rotateX(-Math.PI / 2).scale(1, 0.3, 1),
        animationId: Anims.STILL
      }
    ], shadowPos);
    this.addAuxiliary(new FollowAuxiliary({
      motor,
      follower: shadowPos,
      followee: heroPos
    }, {
      followY: false
    }));
    spritesAccumulator.add(shadowHeroSprites);
    const videoSprites = new SpriteGroup([
      {
        imageId: Assets.VIDEO,
        spriteType: SpriteType.DISTANT,
        transform: w2.create().translate(3000, 1000, -5000).scale(480, 270, 1)
      }
    ]);
    spritesAccumulator.add(videoSprites);
    const controlledMotor = new C2(motor, { policy: G.INCOMING_CYCLE_PRIORITY });
    const stepBack = new StepBackAuxiliary({ motor: controlledMotor, position: heroPos });
    const posStep = new PositionStepAuxiliary({ motor: controlledMotor, controls, position: heroPos, turnGoal: camera.turn.angle }, { speed: 1.5, airBoost: 1.5 });
    this.addAuxiliary(keyboard);
    this.addAuxiliary(new ToggleAuxiliary({ keyboard }, {
      auxiliariesMapping: [
        {
          key: "Tab",
          aux: Auxiliaries.from(posStep, stepBack, new SmoothFollowAuxiliary({ motor, follower: camPosition, followee: heroPos }, { speed: 0.05 }), new JumpAuxiliary({ motor, controls, position: heroPos }, { gravity: -2, jump: 3 }))
        },
        {
          key: "Tab",
          aux: Auxiliaries.from(new TurnAuxiliary({ motor, controls, turn: camera.turn }), new TiltAuxiliary({ motor, controls, tilt: camera.tilt }), new MoveAuxiliary({ motor, controls, direction: camera.turn, position: heroPos }), new JumpAuxiliary({ motor, controls, position: heroPos }), new TiltResetAuxiliary({ motor, controls, tilt: camera.tilt }), new SmoothFollowAuxiliary({ motor, follower: camPosition, followee: heroPos }, { speed: 0.05 }))
        }
      ]
    })).addAuxiliary(new DirAuxiliary({ controls }, (dx) => {
      heroSprites.setOrientation(dx);
      shadowHeroSprites.setOrientation(dx);
    })).addAuxiliary(new MotionAuxiliary({ controls }, (moving) => {
      const animId = moving ? Anims.RUN : Anims.STILL;
      heroSprites.setAnimationId(animId);
      shadowHeroSprites.setAnimationId(animId);
    }));
    const surroundingTracker = new A5({ cellTrack: cellTrackers }, {
      cellLimit: 200,
      range: [7, 3, 7],
      cellSize: CELLSIZE
    });
    this.addAuxiliary(new E3({ positionMatrix: heroPos }, { cellSize: CELLSIZE }).addListener(surroundingTracker).addListener(stepBack));
    camera.distance.setValue(15);
    camera.tilt.angle.setValue(0.8);
    camera.projection.zoom.setValue(0.25);
    camera.projection.perspective.setValue(0.05);
    camera.setBackgroundColor(0);
    this.addAuxiliary(new TimeAuxiliary({ motor, engine })).addAuxiliary(new FadeApiAuxiliary({ camera, motor, api: this.api }));
  }
}

class ResizeAux {
  engine;
  camera;
  canvas;
  constructor({ engine, camera, canvas }) {
    this.engine = engine;
    this.camera = camera;
    this.canvas = canvas;
    this.onResize = this.onResize.bind(this);
  }
  activate() {
    window.addEventListener("resize", this.onResize);
    this.checkCanvasSize();
  }
  deactivate() {
    window.removeEventListener("resize", this.onResize);
  }
  onResize() {
    this.checkCanvasSize();
  }
  checkCanvasSize() {
    if (this.canvas) {
      if (this.canvas instanceof HTMLCanvasElement) {
        this.canvas.width = this.canvas.offsetWidth * 2;
        this.canvas.height = this.canvas.offsetHeight * 2;
      }
      this.camera?.resizeViewport(this.canvas.width, this.canvas.height);
      this.engine.resetViewportSize();
    }
  }
}

class DOMWrap extends AuxiliaryHolder {
  elem;
  constructor(elem) {
    super();
    this.elem = elem;
  }
}
var DEFAULT_ATTRIBUTES = {
  alpha: true,
  antialias: true,
  depth: true,
  failIfMajorPerformanceCaveat: undefined,
  powerPreference: "default",
  premultipliedAlpha: true,
  preserveDrawingBuffer: false,
  stencil: false
};

class WebGlCanvas extends DOMWrap {
  gl;
  constructor(canvas, { attributes } = {}, config) {
    super(canvas);
    const gl = canvas.getContext("webgl2", { ...DEFAULT_ATTRIBUTES, ...attributes });
    this.gl = config?.logGL ? logProxy(gl) : gl;
    canvas.style.pointerEvents = "none";
  }
}
var client = __toESM(require_client(), 1);
var import_react6 = __toESM(require_react(), 1);
var import_react4 = __toESM(require_react(), 1);
var jsx_dev_runtime = __toESM(require_jsx_dev_runtime(), 1);
var POPUP_CSS = {
  position: "absolute",
  outline: "3px solid #fff",
  backgroundColor: "black",
  borderRadius: 12,
  padding: 3,
  boxShadow: "10px 10px 0px #000000cc"
};
var DOUBLE_BORDER_CSS = {
  border: "3px solid white",
  borderRadius: 10,
  outline: "3px solid black",
  color: "white",
  padding: 10
};
var import_react3 = __toESM(require_react(), 1);
var getRandomValues;
var rnds8 = new Uint8Array(16);
var byteToHex = [];
for (let i = 0;i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).slice(1));
}
var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native_default = {
  randomUUID
};
var v4 = function(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0;i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
};
var v4_default = v4;
var import_react2 = __toESM(require_react(), 1);
var import_react = __toESM(require_react(), 1);
var DEFAULT_GAME_CONTEXT = {
  addControlsLock: function(_uid) {
    throw new Error("Function not implemented.");
  },
  removeControlsLock: function(_uid) {
    throw new Error("Function not implemented.");
  },
  setMenu: function(_value) {
    throw new Error("Function not implemented.");
  },
  setDialog: function(_value) {
    throw new Error("Function not implemented.");
  }
};
var Context = import_react.default.createContext(DEFAULT_GAME_CONTEXT);
var Context_default = Context;
var jsx_dev_runtime2 = __toESM(require_jsx_dev_runtime(), 1);
var Provider = ({ children, context }) => {
  return jsx_dev_runtime2.jsxDEV(Context_default.Provider, {
    value: context,
    children
  }, undefined, false, undefined, null);
};
var useGameContext = () => {
  const context = import_react2.useContext(Context_default);
  if (!context) {
    throw new Error("useMyContext must be used within a MyProvider");
  }
  return context;
};
var jsx_dev_runtime3 = __toESM(require_jsx_dev_runtime(), 1);
var import_react5 = __toESM(require_react(), 1);
var jsx_dev_runtime4 = __toESM(require_jsx_dev_runtime(), 1);
var jsx_dev_runtime5 = __toESM(require_jsx_dev_runtime(), 1);

class PopupManager {
  listeners;
  popups = new Set;
  constructor(listeners) {
    this.listeners = listeners;
    this.showPopup = this.showPopup.bind(this);
    this.dismiss = this.dismiss.bind(this);
  }
  showPopup(uid) {
    this.popups.add(uid);
    this.listeners.forEach((listener) => listener.onPopup(this.popups.size));
  }
  dismiss(uid) {
    this.popups.delete(uid);
    this.listeners.forEach((listener) => listener.onPopup(this.popups.size));
  }
}
var jsx_dev_runtime6 = __toESM(require_jsx_dev_runtime(), 1);
var STYLE = {
  position: "absolute",
  pointerEvents: "none",
  width: "100%",
  height: "100%"
};

class Hud extends AuxiliaryHolder {
  webGlCanvas;
  rootElem = document.createElement("div");
  root = client.default.createRoot(this.rootElem);
  listeners = new Set;
  popupManager = new PopupManager(this.listeners);
  controls;
  constructor({ controls, webGlCanvas }) {
    super();
    this.webGlCanvas = webGlCanvas;
    this.controls = controls;
    this.rootElem.style.pointerEvents = "none";
  }
  showDialog(dialog, onClose) {
    this.popupManager.showDialog?.(dialog, onClose);
  }
  dismissDialog() {
    this.popupManager.dismissDialog?.();
  }
  showMenu(menuData) {
    this.popupManager.showMenu?.(menuData);
  }
  dismissMenu() {
    this.popupManager.dismissMenu?.();
  }
  activate() {
    super.activate();
    document.body.appendChild(this.rootElem);
    this.root.render(this.createElement());
  }
  deactivate() {
    this.root.unmount();
    document.body.removeChild(this.rootElem);
    super.deactivate();
  }
  addDialogListener(listener) {
    this.listeners.add(listener);
  }
  removeDialogListener(listener) {
    this.listeners.delete(listener);
  }
  createElement() {
    const { offsetLeft: left, offsetTop: top } = this.webGlCanvas.elem;
    return jsx_dev_runtime6.jsxDEV("div", {
      style: { ...STYLE, top, left },
      children: jsx_dev_runtime6.jsxDEV("div", {
        style: {
          backgroundColor: "#ffffff66"
        },
        children: jsx_dev_runtime6.jsxDEV(HudContent, {
          dialogManager: this.popupManager,
          controls: this.controls
        }, undefined, false, undefined, this)
      }, undefined, false, undefined, this)
    }, undefined, false, undefined, this);
  }
}
var QUICK_TAP_TIME = 200;

class Keyboard extends AuxiliaryHolder {
  keys = {};
  keysUp = {};
  keyDownListener = new Set;
  keyUpListener = new Set;
  quickTapListener = new Set;
  timeProvider;
  isActive = false;
  constructor({ motor }) {
    super();
    this.keyDown = this.keyDown.bind(this);
    this.keyUp = this.keyUp.bind(this);
    this.timeProvider = motor;
  }
  keyDown(e2) {
    if (!this.keys[e2.code]) {
      const time = this.timeProvider.time;
      this.keys[e2.code] = time;
      this.keyDownListener.forEach((listener) => listener.onKeyDown?.(e2.code, time));
    }
    e2.preventDefault();
  }
  keyUp(e2) {
    const quickTap = this.timeProvider.time - this.keys[e2.code] < QUICK_TAP_TIME;
    this.keysUp[e2.code] = this.timeProvider.time;
    this.keys[e2.code] = 0;
    this.keyUpListener.forEach((listener) => listener.onKeyUp?.(e2.code, this.timeProvider.time));
    if (quickTap) {
      this.quickTapListener.forEach((listener) => listener.onQuickTap?.(e2.code, this.timeProvider.time));
    }
  }
  activate() {
    if (!this.isActive) {
      super.activate();
      this.isActive = true;
      document.addEventListener("keydown", this.keyDown);
      document.addEventListener("keyup", this.keyUp);
    }
  }
  deactivate() {
    if (this.isActive) {
      document.removeEventListener("keydown", this.keyDown);
      document.removeEventListener("keyup", this.keyUp);
      this.isActive = false;
      super.deactivate();
    }
  }
  addListener(listener) {
    if (listener.onKeyDown) {
      this.keyDownListener.add(listener);
    }
    if (listener.onKeyUp) {
      this.keyUpListener.add(listener);
    }
    if (listener.onQuickTap) {
      this.quickTapListener.add(listener);
    }
    return () => {
      this.removeListener(listener);
    };
  }
  removeListener(listener) {
    this.keyDownListener.delete(listener);
    this.keyUpListener.delete(listener);
    this.quickTapListener.delete(listener);
  }
}

class KeyboardControls {
  keyboard;
  listeners = new Set;
  isActive = false;
  keys = {};
  constructor(keyboard) {
    this.keyboard = keyboard;
  }
  activate() {
    if (!this.isActive) {
      this.keys = this.keyboard.keys;
      this.isActive = true;
      this.keyboard.addListener(this);
    }
  }
  deactivate() {
    if (this.isActive) {
      this.keys = {};
      this.onActionUp();
      this.isActive = false;
      this.keyboard.removeListener(this);
    }
  }
  setActive(active) {
    if (active) {
      this.activate();
    } else {
      this.deactivate();
    }
  }
  onQuickTap(keyCode) {
    switch (keyCode) {
      case "Space":
        this.listeners.forEach((listener) => listener.onQuickAction?.());
        break;
      case "ShiftRight":
        this.listeners.forEach((listener) => listener.onQuickTiltReset?.());
        break;
    }
  }
  onKeyDown(_keyCode, _time) {
    this.onAction();
  }
  onKeyUp(_keyCode, _time) {
    this.onActionUp();
  }
  onAction() {
    this.listeners.forEach((listener) => listener.onAction?.(this));
  }
  onActionUp() {
    this.listeners.forEach((listener) => listener.onAction?.(this));
  }
  addListener(listener) {
    this.listeners.add(listener);
  }
  removeListener(listener) {
    this.listeners.delete(listener);
  }
  get forward() {
    const { keys } = this;
    return !!(keys.KeyW || keys.ArrowUp && !keys.ShiftRight);
  }
  get backward() {
    const { keys } = this;
    return !!(keys.KeyS || keys.ArrowDown && !keys.ShiftRight);
  }
  get left() {
    const { keys } = this;
    return !!(keys.KeyA || keys.ArrowLeft && !keys.ShiftRight);
  }
  get right() {
    const { keys } = this;
    return !!(keys.KeyD || keys.ArrowRight && !keys.ShiftRight);
  }
  get turnLeft() {
    const { keys } = this;
    return !!(keys.KeyQ || keys.ArrowLeft && keys.ShiftRight);
  }
  get turnRight() {
    const { keys } = this;
    return !!(keys.KeyE || keys.ArrowRight && keys.ShiftRight);
  }
  get up() {
    const { keys } = this;
    return !!(keys.ArrowUp && keys.ShiftRight);
  }
  get down() {
    const { keys } = this;
    return !!(keys.ArrowDown && keys.ShiftRight);
  }
  get action() {
    const { keys } = this;
    return !!keys.Space;
  }
  get exit() {
    const { keys } = this;
    return !!keys.Escape;
  }
}
var onStop;
export {
  testCanvas,
  stop,
  hello
};
