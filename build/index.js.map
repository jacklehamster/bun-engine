{
  "version": 3,
  "sources": ["../src/updates/UpdatableList.ts", "../src/updates/TextureUpdate.ts", "../src/world/sprite/Medias.ts", "../src/lifecycle/Disposable.ts", "../src/world/aux/AuxiliaryHolder.ts", "../src/updates/SpriteAnimUpdate.ts", "../src/updates/SpriteTransformUpdate.ts", "../src/world/sprite/SpriteAccumulator.ts", "../src/world/World.ts", "../src/gl/attributes/Constants.ts", "../src/gl/attributes/Constants.ts", "../src/gl/programs/GLProgram.ts", "../src/gl/programs/GLPrograms.ts", "../src/gl/VertexArray.ts", "../src/gl/attributes/GLAttributeBuffers.ts", "../src/gl/uniforms/GLUniforms.ts", "../node_modules/avl/src/utils.js", "../node_modules/avl/src/index.js", "../node_modules/texture-slot-allocator/dist/src/texture/TextureSlot.js", "../node_modules/texture-slot-allocator/dist/src/texture/TextureUtils.js", "../node_modules/texture-slot-allocator/dist/src/texture/TextureSlotAllocator.js", "../src/gl/texture/TextureManager.ts", "../src/gl/texture/MediaData.ts", "../src/gl/texture/ImageManager.ts", "../src/generated/src/gl/resources/vertexShader.txt", "../src/generated/src/gl/resources/fragmentShader.txt", "../src/gl/utils/replaceTilda.ts", "../node_modules/gl-matrix/esm/common.js", "../node_modules/gl-matrix/esm/mat3.js", "../node_modules/gl-matrix/esm/mat4.js", "../node_modules/gl-matrix/esm/vec3.js", "../node_modules/gl-matrix/esm/vec4.js", "../node_modules/gl-matrix/esm/vec4.js", "../node_modules/gl-matrix/esm/vec4.js", "../node_modules/gl-matrix/esm/vec4.js", "../node_modules/gl-matrix/esm/vec4.js", "../node_modules/gl-matrix/esm/vec4.js", "../node_modules/gl-matrix/esm/vec4.js", "../node_modules/gl-matrix/esm/quat.js", "../src/gl/transform/Matrix.ts", "../src/gl/transform/ProjectionMatrix.ts", "../src/gl/utils/angleUtils.ts", "../src/core/value/Progressive.ts", "../src/gl/transform/TiltMatrix.ts", "../src/gl/transform/TurnMatrix.ts", "../src/updates/CameraUpdate.ts", "../src/updates/CameraFloatUpdate.ts", "../src/gl/camera/Camera.ts", "../src/core/graphics/GraphicsEngine.ts", "../src/core/motor/Motor.ts", "../src/controls/Keyboard.ts", "../src/core/aux/ResizeAux.ts", "../src/core/Core.ts", "../src/world/sprite/List.ts", "../src/world/aux/Auxiliaries.ts", "../src/world/aux/CamMoveAuxiliary.ts", "../src/world/aux/CamStepAuxiliary.ts", "../src/world/aux/CamTiltResetAuxiliary.ts", "../src/world/aux/JumpAuxiliary.ts", "../src/world/aux/RiseAuxiliary.ts", "../src/world/aux/ToggleAuxiliary.ts", "../src/demo/DemoWorld.ts", "../src/index.tsx"],
  "sourcesContent": [
    "import { IdType } from \"core/IdType\";\nimport { List } from \"world/sprite/List\";\nimport { UpdateNotifier } from \"./UpdateNotifier\";\n\nexport class UpdatableList<T> implements List<T> {\n  constructor(\n    private readonly array: List<T>,\n    private updateValue: (index: IdType, value?: T) => void,\n    private readonly notifier?: UpdateNotifier) {\n  }\n\n  at(index: number) {\n    return this.array.at(index);\n  }\n\n  get length() {\n    return this.array.length;\n  }\n\n  set(index: IdType, value: T) {\n    this.updateValue(index, value);\n    this.notifier?.informUpdate(index);\n  }\n\n  remove(index: IdType) {\n    this.updateValue(index, undefined);\n    this.notifier?.informUpdate(index);\n  }\n}\n",
  "import { Refresh } from \"./Refresh\";\nimport { MediaId } from \"gl/texture/ImageManager\";\nimport { Media } from \"gl/texture/Media\";\nimport { UpdateNotifier } from \"./UpdateNotifier\";\nimport { IGraphicsEngine } from \"core/graphics/IGraphicsEngine\";\nimport { IMotor } from \"core/motor/IMotor\";\n\nexport class TextureUpdate implements Refresh, UpdateNotifier {\n  private readonly updatedImageIds: Set<MediaId> = new Set();\n  constructor(private motor: IMotor, private getMedia: (imageId: MediaId) => Media | undefined, private engine: IGraphicsEngine) {\n  }\n\n  withImageId(imageId: MediaId): TextureUpdate {\n    this.updatedImageIds.add(imageId);\n    return this;\n  }\n\n  informUpdate(imageId: MediaId) {\n    this.motor.registerUpdate(this.withImageId(imageId));\n  }\n\n  refresh(): void {\n    const imageIds = Array.from(this.updatedImageIds);\n    this.updatedImageIds.clear();\n    this.engine.updateTextures(imageIds, this.getMedia).then((mediaInfos) => {\n      mediaInfos.forEach(mediaInfo => {\n        if (mediaInfo.isVideo) {\n          this.motor.registerUpdate(mediaInfo, mediaInfo.schedule);\n        }\n      });\n    });\n  }\n}\n",
  "import { Media } from \"gl/texture/Media\";\nimport { List } from \"./List\";\nimport { UpdatableList } from \"updates/UpdatableList\";\nimport { TextureUpdate } from \"updates/TextureUpdate\";\nimport { IGraphicsEngine } from \"core/graphics/IGraphicsEngine\";\nimport { IMotor } from \"core/motor/IMotor\";\n\nexport type Medias = List<Media>;\n\ninterface Props {\n  motor: IMotor;\n  engine: IGraphicsEngine;\n}\n\nexport class UpdatableMedias extends UpdatableList<Media> {\n  constructor({ motor, engine }: Props, medias: (Media | undefined)[] = []) {\n    super(medias, (index, value) => {\n      medias[index] = value;\n      while (!medias[medias.length - 1]) {\n        medias.length--;\n      }\n    }, new TextureUpdate(motor, medias.at.bind(medias), engine));\n  }\n}\n",
  "interface Destroyable {\n  destroy: () => void;\n}\n\nexport class Disposable {\n  disposables?: Set<Destroyable>;\n\n  own<D extends Disposable>(disposable: D): D {\n    if (!this.disposables) {\n      this.disposables = new Set();\n    }\n    this.disposables.add(disposable);\n    return disposable;\n  }\n\n  addOnDestroy(callback?: () => void) {\n    if (callback) {\n      this.disposables?.add({\n        destroy: callback,\n      });\n    }\n  }\n\n  destroy() {\n    this.disposables?.forEach((disposable) => disposable.destroy());\n  }\n}\n",
  "import { Refresh, UpdatePayload } from \"updates/Refresh\";\nimport { Auxiliary } from \"./Auxiliary\";\nimport { Disposable } from \"lifecycle/Disposable\";\n\nexport class AuxiliaryHolder extends Disposable implements Auxiliary {\n  private auxiliaries: Auxiliary[] = [];\n  private refreshes: Refresh[] = [];\n  private active: boolean = false;\n  constructor() {\n    super();\n  }\n\n  activate(): () => void {\n    if (this.active) {\n      return () => { };\n    }\n    const deactivates = new Set<() => void>();\n    for (const a of this.auxiliaries) {\n      const onDeactivate = a.activate?.();\n      if (onDeactivate) {\n        deactivates.add(onDeactivate);\n      }\n    }\n    return () => {\n      deactivates.forEach(d => d());\n    };\n  }\n\n  deactivate() {\n    if (!this.active) {\n      return;\n    }\n    for (const a of this.auxiliaries) {\n      a.deactivate?.();\n    }\n  }\n\n  refresh(updatePayload: UpdatePayload): void {\n    for (const r of this.refreshes) {\n      r.refresh(updatePayload);\n    }\n  }\n\n  onAddAuxiliary?(...aux: Auxiliary[]): () => void;\n  addAuxiliary(...aux: Auxiliary[]) {\n    this.auxiliaries.push(...aux);\n    this.refreshes.push(...aux.filter((a): a is Refresh => !!a.refresh));\n    const onDeactivates = new Set<() => void>();\n    if (this.active) {\n      for (const a of this.auxiliaries) {\n        const onDeactivate = a.activate?.();\n        if (onDeactivate) {\n          onDeactivates.add(onDeactivate);\n        }\n      }\n    }\n    const onAddDeactivate = this.onAddAuxiliary?.(...aux);\n    if (onAddDeactivate) {\n      onDeactivates.add(onAddDeactivate);\n    }\n    return () => onDeactivates.forEach(d => d());\n  }\n\n  removeAllAuxiliaries() {\n    this.removeAuxiliary(...this.auxiliaries);\n  }\n\n  removeAuxiliary(...aux: Auxiliary[]) {\n    const removeSet = new Set(aux);\n    let j = 0;\n    for (let i = 0; i < this.auxiliaries.length; i++) {\n      if (!removeSet.has(this.auxiliaries[i])) {\n        this.auxiliaries[j] = this.auxiliaries[i];\n        j++;\n      }\n    }\n    this.auxiliaries.length = j;\n    this.refreshes = this.auxiliaries.filter((a): a is Refresh => !!a.refresh);\n  }\n}\n",
  "import { Sprite, SpriteId } from \"world/sprite/Sprite\";\nimport { Refresh } from \"./Refresh\";\nimport { UpdateNotifier } from \"./UpdateNotifier\";\nimport { IGraphicsEngine } from \"core/graphics/IGraphicsEngine\";\nimport { IMotor } from \"core/motor/IMotor\";\n\nexport class SpriteAnimUpdate implements Refresh, UpdateNotifier {\n  private readonly updatedSpriteIds: Set<SpriteId> = new Set();\n  constructor(private getSprite: (spriteId: SpriteId) => Sprite | undefined, private engine: IGraphicsEngine, private motor: IMotor) {\n  }\n\n  informUpdate(id: SpriteId): void {\n    this.motor.registerUpdate(this.withSpriteId(id))\n  }\n\n  withSpriteId(spriteId: SpriteId): SpriteAnimUpdate {\n    this.updatedSpriteIds.add(spriteId);\n    return this;\n  }\n\n  refresh(): void {\n    this.engine.updateSpriteAnims(this.updatedSpriteIds, this.getSprite);\n    if (this.updatedSpriteIds.size) { //  re-register if some updates are remaining\n      this.motor.registerUpdate(this);\n    }\n  }\n}\n",
  "import { Sprite, SpriteId } from \"world/sprite/Sprite\";\nimport { Refresh } from \"./Refresh\";\nimport { UpdateNotifier } from \"./UpdateNotifier\";\nimport { IGraphicsEngine } from \"core/graphics/IGraphicsEngine\";\nimport { IMotor } from \"core/motor/IMotor\";\n\nexport class SpriteTransformUpdate implements Refresh, UpdateNotifier {\n  private readonly updatedSpriteIds: Set<SpriteId> = new Set();\n  constructor(private getSprite: (spriteId: SpriteId) => Sprite | undefined, private engine: IGraphicsEngine, private motor: IMotor) {\n  }\n\n  informUpdate(id: SpriteId): void {\n    this.motor.registerUpdate(this.withSpriteId(id));\n  }\n\n  withSpriteId(spriteId: SpriteId): SpriteTransformUpdate {\n    this.updatedSpriteIds.add(spriteId);\n    return this;\n  }\n\n  refresh(): void {\n    this.engine.updateSpriteTransforms(this.updatedSpriteIds, this.getSprite);\n  }\n}\n",
  "import { IGraphicsEngine } from \"core/graphics/IGraphicsEngine\";\nimport { Sprite, SpriteId } from \"./Sprite\";\nimport { Sprites } from \"./Sprites\";\nimport { IMotor } from \"core/motor/IMotor\";\nimport { SpriteAnimUpdate } from \"updates/SpriteAnimUpdate\";\nimport { SpriteTransformUpdate } from \"updates/SpriteTransformUpdate\";\nimport { UpdateNotifier } from \"updates/UpdateNotifier\";\n\ninterface Props {\n  engine: IGraphicsEngine;\n  motor: IMotor;\n}\n\nenum SpriteUpdateType {\n  NONE = 0,\n  TRANSFORM = 1,\n  ANIM = 2,\n  ALL = 3,\n};\n\nexport class SpritesAccumulator implements Sprites, UpdateNotifier {\n  private spritesList: Sprites[] = [];\n  private spritesIndices: { sprites: Sprites, baseIndex: number }[] = [];\n  private spriteTransformUpdate: SpriteTransformUpdate;\n  private spriteAnimUpdate: SpriteAnimUpdate;\n\n  constructor({ engine, motor }: Props) {\n    this.spriteTransformUpdate = new SpriteTransformUpdate(this.at.bind(this), engine, motor);\n    this.spriteAnimUpdate = new SpriteAnimUpdate(this.at.bind(this), engine, motor);\n  }\n\n  informUpdate(id: SpriteId, type: SpriteUpdateType = SpriteUpdateType.ALL): void {\n    if (type & SpriteUpdateType.TRANSFORM) {\n      this.spriteTransformUpdate.informUpdate(id);\n    }\n    if (type & SpriteUpdateType.ANIM) {\n      this.spriteAnimUpdate.informUpdate(id);\n    }\n  }\n\n  at(index: SpriteId): Sprite | undefined {\n    const spritesIndex = this.spritesIndices[index];\n    return spritesIndex?.sprites.at(index - (spritesIndex?.baseIndex ?? 0));\n  }\n\n  get length(): number {\n    return this.spritesIndices.length;\n  }\n\n  add(sprites: Sprites): void {\n    if (this.spritesList.indexOf(sprites) >= 0) {\n      return;\n    }\n    this.spritesList.push(sprites);\n    const baseIndex = this.spritesIndices.length;\n    for (let i = 0; i < sprites.length; i++) {\n      this.informUpdate(baseIndex + i);\n      this.spritesIndices.push({\n        sprites,\n        baseIndex,\n      });\n    }\n  }\n}\n",
  "import IWorld from \"./IWorld\";\nimport { Sprites } from \"./sprite/Sprites\";\nimport { Media } from \"gl/texture/Media\";\nimport { Auxiliary } from \"./aux/Auxiliary\";\nimport { UpdatableMedias } from \"./sprite/Medias\";\nimport { AuxiliaryHolder } from \"./aux/AuxiliaryHolder\";\nimport { SpritesAccumulator } from \"./sprite/SpriteAccumulator\";\nimport { Sprite } from \"./sprite/Sprite\";\nimport { IGraphicsEngine } from \"core/graphics/IGraphicsEngine\";\nimport { IMotor } from \"core/motor/IMotor\";\n\ninterface Props {\n  engine: IGraphicsEngine;\n  motor: IMotor;\n}\n\nexport abstract class World extends AuxiliaryHolder implements IWorld, Auxiliary {\n  public medias: UpdatableMedias;\n  private spritesAccumulator;\n\n  constructor(props: Props) {\n    super();\n    this.medias = new UpdatableMedias(props)\n    this.spritesAccumulator = new SpritesAccumulator(props);\n  }\n\n  get sprites(): Sprites {\n    return this.spritesAccumulator;\n  }\n\n  addMedia(...medias: Media[]) {\n    medias.forEach(media => {\n      this.medias.set(media.id, media);\n    });\n  }\n\n  addSprites(...sprites: (Sprites | (Sprite & { length?: number }))[]) {\n    sprites.forEach(s => {\n      this.spritesAccumulator.add(s.length ? s as Sprites : [s as Sprite]);\n    });\n  }\n}\n",
  "// To recognize dom types (see https://bun.sh/docs/typescript#dom-types):\n/// <reference lib=\"dom\" />\n/// <reference lib=\"dom.iterable\" />\n\nimport { LocationName } from './GLAttributeBuffers';\n\n//  GL\nexport type GL = WebGL2RenderingContext;\nexport const GL = globalThis.WebGL2RenderingContext ?? {} as any;\n\n//  Attributes\nexport const POSITION_LOC: LocationName = 'position';\nexport const INDEX_LOC: LocationName = 'index';\nexport const TRANSFORM_LOC: LocationName = 'transform';\nexport const SLOT_SIZE_LOC: LocationName = 'slotSize_and_number';\nexport const INSTANCE_LOC: LocationName = 'instance';\nexport const SPRITE_FLAGS_LOC: LocationName = 'spriteFlag';\n\n//  Uniform\nexport const CAM_POS_LOC: LocationName = 'camPos';\nexport const CAM_TILT_LOC: LocationName = 'camTilt';\nexport const CAM_TURN_LOC: LocationName = 'camTurn';\nexport const CAM_PROJECTION_LOC: LocationName = 'projection';\nexport const CAM_CURVATURE_LOC: LocationName = 'curvature';\nexport const MAX_TEXTURE_SIZE_LOC: LocationName = 'maxTextureSize';\nexport const TEXTURE_UNIFORM_LOC: LocationName = 'uTextures';\n",
  "// To recognize dom types (see https://bun.sh/docs/typescript#dom-types):\n/// <reference lib=\"dom\" />\n/// <reference lib=\"dom.iterable\" />\n\nimport { LocationName } from './GLAttributeBuffers';\n\n//  GL\nexport type GL = WebGL2RenderingContext;\nexport const GL = globalThis.WebGL2RenderingContext ?? {} as any;\n\n//  Attributes\nexport const POSITION_LOC: LocationName = 'position';\nexport const INDEX_LOC: LocationName = 'index';\nexport const TRANSFORM_LOC: LocationName = 'transform';\nexport const SLOT_SIZE_LOC: LocationName = 'slotSize_and_number';\nexport const INSTANCE_LOC: LocationName = 'instance';\nexport const SPRITE_FLAGS_LOC: LocationName = 'spriteFlag';\n\n//  Uniform\nexport const CAM_POS_LOC: LocationName = 'camPos';\nexport const CAM_TILT_LOC: LocationName = 'camTilt';\nexport const CAM_TURN_LOC: LocationName = 'camTurn';\nexport const CAM_PROJECTION_LOC: LocationName = 'projection';\nexport const CAM_CURVATURE_LOC: LocationName = 'curvature';\nexport const MAX_TEXTURE_SIZE_LOC: LocationName = 'maxTextureSize';\nexport const TEXTURE_UNIFORM_LOC: LocationName = 'uTextures';\n",
  "import { GL } from 'gl/attributes/Constants';\nimport { Disposable } from '../../lifecycle/Disposable';\n\nexport class GLProgram extends Disposable {\n  gl: GL;\n  program: WebGLProgram;\n  constructor(gl: GL, vertex: string, fragment: string) {\n    super();\n    this.gl = gl;\n    this.program = createProgram(gl, vertex.trim(), fragment.trim());\n  }\n\n  use() {\n    this.gl.useProgram(this.program);\n  }\n\n  destroy(): void {\n    super.destroy();\n    deleteProgram(this.gl, this.program);\n  }\n}\n\nfunction createProgram(\n  gl: GL,\n  vertex: string,\n  fragment: string,\n): WebGLProgram {\n  function createShader(shaderSource: string, type: GLenum) {\n    function typeName(type: number) {\n      return type === gl?.VERTEX_SHADER\n        ? 'vertex'\n        : type === gl?.FRAGMENT_SHADER\n          ? 'fragment'\n          : undefined;\n    }\n\n    if (type !== gl.VERTEX_SHADER && type !== gl.FRAGMENT_SHADER) {\n      throw new Error(`Shader error in ${typeName(type)}`);\n    }\n    const shader = gl.createShader(type);\n    if (!shader) {\n      throw new Error(`Unable to generate ${typeName(type)} shader.`);\n    }\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      // Something went wrong during compilation; get the error\n      console.error(\n        `Shader compile error in ${typeName(type)}:` +\n        gl.getShaderInfoLog(shader),\n      );\n    }\n    return shader;\n  }\n\n  const program = gl.createProgram();\n  if (!program) {\n    throw new Error(`Unable to create program.`);\n  }\n\n  const vertexShader = createShader(vertex, gl.VERTEX_SHADER)!;\n  const fragmentShader = createShader(fragment, gl.FRAGMENT_SHADER)!;\n  const vertexInfo = gl.getShaderInfoLog(vertexShader),\n    fragmentInfo = gl.getShaderInfoLog(fragmentShader);\n  if (vertexInfo) {\n    console.log('VERTEX', vertexInfo);\n  }\n  if (fragmentInfo) {\n    console.log('FRAGMENT', fragmentInfo);\n  }\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, fragmentShader);\n  gl.linkProgram(program);\n  const programInfo = gl.getProgramInfoLog(program);\n  if (programInfo) {\n    console.log('PROGRAM', programInfo);\n  }\n  gl.detachShader(program, vertexShader);\n  gl.detachShader(program, fragmentShader);\n  gl.deleteShader(vertexShader);\n  gl.deleteShader(fragmentShader);\n  gl.validateProgram(program);\n\n  Object.entries(GL).forEach(([k, value]) => {\n    if (value && gl.getError() === value) {\n      console.log(`gl.${k}`);\n    }\n  });\n\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    throw new Error(\n      'Unable to initialize the shader program:\\n' +\n      gl.getProgramInfoLog(program),\n    );\n  }\n\n  return program;\n}\n\nfunction deleteProgram(gl: GL, program: WebGLProgram) {\n  gl.deleteProgram(program);\n}\n",
  "import { GL } from 'gl/attributes/Constants';\nimport { Disposable } from '../../lifecycle/Disposable';\nimport { GLProgram } from './GLProgram';\n\nexport class GLPrograms extends Disposable {\n  activeProgramId: string = '';\n  private gl: GL;\n  private programs: Record<string, GLProgram> = {};\n\n  constructor(gl: GL) {\n    super();\n    this.gl = gl;\n  }\n\n  addProgram(id: string, vertex: string, fragment: string) {\n    if (this.programs[id]) {\n      this.removeProgram(id);\n    }\n    this.programs[id] = this.own(new GLProgram(this.gl, vertex, fragment));\n  }\n\n  useProgram(id: string) {\n    if (this.activeProgramId !== id) {\n      this.activeProgramId = id;\n      this.programs[id].use();\n    }\n  }\n\n  removeProgram(id: string) {\n    this.programs[id].destroy();\n    delete this.programs[id];\n  }\n\n  getProgram(id?: string): WebGLProgram | undefined {\n    return this.programs[id ?? this.activeProgramId]?.program;\n  }\n}\n",
  "import { Disposable } from '../lifecycle/Disposable';\nimport { GL } from './attributes/Constants';\n\nexport class VertexArray extends Disposable {\n  private gl: GL;\n  private triangleArray: WebGLVertexArrayObject | null;\n\n  constructor(gl: GL) {\n    super();\n    this.gl = gl;\n    this.triangleArray = gl.createVertexArray();\n    gl.bindVertexArray(this.triangleArray);\n  }\n\n  destroy(): void {\n    this.gl.deleteVertexArray(this.triangleArray);\n  }\n}\n",
  "import { Disposable } from '../../lifecycle/Disposable';\nimport { GLPrograms } from '../programs/GLPrograms';\nimport { GL } from './Constants';\n\nexport interface BufferInfo {\n  buffer: WebGLBuffer;\n  // target?: GLenum;\n  location: number;\n  // bufferSize?: number;\n  // usage?: GLenum;\n}\n\nexport type LocationName = string;\n\nexport class GLAttributeBuffers extends Disposable {\n  private readonly bufferRecord: Record<LocationName, BufferInfo> = {};\n  private readonly gl: GL;\n  private readonly programs: GLPrograms;\n\n  constructor(gl: GL, programs: GLPrograms) {\n    super();\n    this.gl = gl;\n    this.programs = programs;\n  }\n\n  getAttributeLocation(name: string, programId?: string): GLint {\n    const program = this.programs.getProgram(programId);\n    return program ? this.gl.getAttribLocation(program, name) ?? -1 : -1;\n  }\n\n  createBuffer(location: LocationName): BufferInfo {\n    this.deleteBuffer(location);\n    const bufferBuffer = this.gl?.createBuffer();\n    if (!bufferBuffer) {\n      throw new Error(`Unable to create buffer \"${location}\"`);\n    }\n    const record = {\n      buffer: bufferBuffer,\n      location: this.getAttributeLocation(location),\n    };\n    this.bufferRecord[location] = record;\n    return record;\n  }\n\n  deleteBuffer(location: LocationName) {\n    if (this.bufferRecord[location]) {\n      this.gl.deleteBuffer(this.bufferRecord[location].buffer);\n      delete this.bufferRecord[location];\n    }\n  }\n\n  getAttributeBuffer(location: LocationName): BufferInfo {\n    const attribute = this.bufferRecord[location];\n    if (!attribute) {\n      throw new Error(\n        `Attribute \"${location}\" not created. Make sure \"createBuffer\" is called.`,\n      );\n    }\n    return attribute;\n  }\n\n  destroy(): void {\n    Object.keys(this.bufferRecord).forEach((location) =>\n      this.deleteBuffer(location),\n    );\n  }\n}\n",
  "import { GL } from 'gl/attributes/Constants';\nimport { Disposable } from '../../lifecycle/Disposable';\nimport { GLPrograms } from '../programs/GLPrograms';\n\nexport class GLUniforms extends Disposable {\n  private gl: GL;\n  private programs: GLPrograms;\n\n  constructor(gl: GL, programs: GLPrograms) {\n    super();\n    this.gl = gl;\n    this.programs = programs;\n  }\n\n  getUniformLocation(\n    name: string,\n    programId?: string,\n  ): WebGLUniformLocation {\n    const program = this.programs.getProgram(programId)!;\n    return this.gl.getUniformLocation(program, name)!;\n  }\n}\n",
  "/**\n * Prints tree horizontally\n * @param  {Node}                       root\n * @param  {Function(node:Node):String} [printNode]\n * @return {String}\n */\nexport function print (root, printNode = (n) => n.key) {\n  var out = [];\n  row(root, '', true, (v) => out.push(v), printNode);\n  return out.join('');\n}\n\n/**\n * Prints level of the tree\n * @param  {Node}                        root\n * @param  {String}                      prefix\n * @param  {Boolean}                     isTail\n * @param  {Function(in:string):void}    out\n * @param  {Function(node:Node):String}  printNode\n */\nfunction row (root, prefix, isTail, out, printNode) {\n  if (root) {\n    out(`${ prefix }${ isTail ? '└── ' : '├── ' }${ printNode(root) }\\n`);\n    const indent = prefix + (isTail ? '    ' : '│   ');\n    if (root.left)  row(root.left,  indent, false, out, printNode);\n    if (root.right) row(root.right, indent, true,  out, printNode);\n  }\n}\n\n/**\n * Is the tree balanced (none of the subtrees differ in height by more than 1)\n * @param  {Node}    root\n * @return {Boolean}\n */\nexport function isBalanced(root) {\n  if (root === null) return true; // If node is empty then return true\n\n  // Get the height of left and right sub trees\n  var lh = height(root.left);\n  var rh = height(root.right);\n\n  if (Math.abs(lh - rh) <= 1 &&\n      isBalanced(root.left)  &&\n      isBalanced(root.right)) return true;\n\n  // If we reach here then tree is not height-balanced\n  return false;\n}\n\n/**\n * The function Compute the 'height' of a tree.\n * Height is the number of nodes along the longest path\n * from the root node down to the farthest leaf node.\n *\n * @param  {Node} node\n * @return {Number}\n */\nfunction height(node) {\n  return node ? (1 + Math.max(height(node.left), height(node.right))) : 0;\n}\n\nexport function loadRecursive (parent, keys, values, start, end) {\n  const size = end - start;\n  if (size > 0) {\n    const middle = start + Math.floor(size / 2);\n    const key    = keys[middle];\n    const data   = values[middle];\n    const node   = { key, data, parent };\n    node.left    = loadRecursive(node, keys, values, start, middle);\n    node.right   = loadRecursive(node, keys, values, middle + 1, end);\n    return node;\n  }\n  return null;\n}\n\nexport function markBalance(node) {\n  if (node === null) return 0;\n  const lh = markBalance(node.left);\n  const rh = markBalance(node.right);\n\n  node.balanceFactor = lh - rh;\n  return Math.max(lh, rh) + 1;\n}\n\nexport function sort(keys, values, left, right, compare) {\n  if (left >= right) return;\n\n  // eslint-disable-next-line no-bitwise\n  const pivot = keys[(left + right) >> 1];\n  let i = left - 1;\n  let j = right + 1;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    do i++; while (compare(keys[i], pivot) < 0);\n    do j--; while (compare(keys[j], pivot) > 0);\n    if (i >= j) break;\n\n    let tmp = keys[i];\n    keys[i] = keys[j];\n    keys[j] = tmp;\n\n    tmp = values[i];\n    values[i] = values[j];\n    values[j] = tmp;\n  }\n\n  sort(keys, values,  left,     j, compare);\n  sort(keys, values, j + 1, right, compare);\n}\n",
  "import { print, isBalanced, loadRecursive, markBalance, sort } from './utils';\n\n// function createNode (parent, left, right, height, key, data) {\n//   return { parent, left, right, balanceFactor: height, key, data };\n// }\n\n/**\n * @typedef {{\n *   parent:        ?Node,\n *   left:          ?Node,\n *   right:         ?Node,\n *   balanceFactor: number,\n *   key:           Key,\n *   data:          Value\n * }} Node\n */\n\n/**\n * @typedef {*} Key\n */\n\n/**\n * @typedef {*} Value\n */\n\n/**\n * Default comparison function\n * @param {Key} a\n * @param {Key} b\n * @returns {number}\n */\nfunction DEFAULT_COMPARE (a, b) { return a > b ? 1 : a < b ? -1 : 0; }\n\n/**\n * Single left rotation\n * @param  {Node} node\n * @return {Node}\n */\nfunction rotateLeft (node) {\n  var rightNode = node.right;\n  node.right    = rightNode.left;\n\n  if (rightNode.left) rightNode.left.parent = node;\n\n  rightNode.parent = node.parent;\n  if (rightNode.parent) {\n    if (rightNode.parent.left === node) {\n      rightNode.parent.left = rightNode;\n    } else {\n      rightNode.parent.right = rightNode;\n    }\n  }\n\n  node.parent    = rightNode;\n  rightNode.left = node;\n\n  node.balanceFactor += 1;\n  if (rightNode.balanceFactor < 0) {\n    node.balanceFactor -= rightNode.balanceFactor;\n  }\n\n  rightNode.balanceFactor += 1;\n  if (node.balanceFactor > 0) {\n    rightNode.balanceFactor += node.balanceFactor;\n  }\n  return rightNode;\n}\n\nfunction rotateRight (node) {\n  var leftNode = node.left;\n  node.left = leftNode.right;\n  if (node.left) node.left.parent = node;\n\n  leftNode.parent = node.parent;\n  if (leftNode.parent) {\n    if (leftNode.parent.left === node) {\n      leftNode.parent.left = leftNode;\n    } else {\n      leftNode.parent.right = leftNode;\n    }\n  }\n\n  node.parent    = leftNode;\n  leftNode.right = node;\n\n  node.balanceFactor -= 1;\n  if (leftNode.balanceFactor > 0) {\n    node.balanceFactor -= leftNode.balanceFactor;\n  }\n\n  leftNode.balanceFactor -= 1;\n  if (node.balanceFactor < 0) {\n    leftNode.balanceFactor += node.balanceFactor;\n  }\n\n  return leftNode;\n}\n\n// function leftBalance (node) {\n//   if (node.left.balanceFactor === -1) rotateLeft(node.left);\n//   return rotateRight(node);\n// }\n\n// function rightBalance (node) {\n//   if (node.right.balanceFactor === 1) rotateRight(node.right);\n//   return rotateLeft(node);\n// }\n\nexport default class AVLTree {\n  /**\n   * Callback for comparator\n   * @callback comparatorCallback\n   * @param {Key} a\n   * @param {Key} b\n   * @returns {number}\n   */\n\n  /**\n   * @class AVLTree\n   * @constructor\n   * @param  {comparatorCallback} [comparator]\n   * @param  {boolean}            [noDuplicates=false] Disallow duplicates\n   */\n  constructor (comparator, noDuplicates = false) {\n    this._comparator = comparator || DEFAULT_COMPARE;\n    this._root = null;\n    this._size = 0;\n    this._noDuplicates = !!noDuplicates;\n  }\n\n  /**\n   * Clear the tree\n   * @return {AVLTree}\n   */\n  destroy() {\n    return this.clear();\n  }\n\n  /**\n   * Clear the tree\n   * @return {AVLTree}\n   */\n  clear() {\n    this._root = null;\n    this._size = 0;\n    return this;\n  }\n\n  /**\n   * Number of nodes\n   * @return {number}\n   */\n  get size () {\n    return this._size;\n  }\n\n  /**\n   * Whether the tree contains a node with the given key\n   * @param  {Key} key\n   * @return {boolean} true/false\n   */\n  contains (key) {\n    if (this._root)  {\n      var node       = this._root;\n      var comparator = this._comparator;\n      while (node)  {\n        var cmp = comparator(key, node.key);\n        if      (cmp === 0) return true;\n        else if (cmp < 0)   node = node.left;\n        else                node = node.right;\n      }\n    }\n    return false;\n  }\n\n  /* eslint-disable class-methods-use-this */\n\n  /**\n   * Successor node\n   * @param  {Node} node\n   * @return {?Node}\n   */\n  next (node) {\n    var successor = node;\n    if (successor) {\n      if (successor.right) {\n        successor = successor.right;\n        while (successor.left) successor = successor.left;\n      } else {\n        successor = node.parent;\n        while (successor && successor.right === node) {\n          node = successor; successor = successor.parent;\n        }\n      }\n    }\n    return successor;\n  }\n\n  /**\n   * Predecessor node\n   * @param  {Node} node\n   * @return {?Node}\n   */\n  prev (node) {\n    var predecessor = node;\n    if (predecessor) {\n      if (predecessor.left) {\n        predecessor = predecessor.left;\n        while (predecessor.right) predecessor = predecessor.right;\n      } else {\n        predecessor = node.parent;\n        while (predecessor && predecessor.left === node) {\n          node = predecessor;\n          predecessor = predecessor.parent;\n        }\n      }\n    }\n    return predecessor;\n  }\n  /* eslint-enable class-methods-use-this */\n\n  /**\n   * Callback for forEach\n   * @callback forEachCallback\n   * @param {Node} node\n   * @param {number} index\n   */\n\n  /**\n   * @param  {forEachCallback} callback\n   * @return {AVLTree}\n   */\n  forEach(callback) {\n    var current = this._root;\n    var s = [], done = false, i = 0;\n\n    while (!done) {\n      // Reach the left most Node of the current Node\n      if (current) {\n        // Place pointer to a tree node on the stack\n        // before traversing the node's left subtree\n        s.push(current);\n        current = current.left;\n      } else {\n        // BackTrack from the empty subtree and visit the Node\n        // at the top of the stack; however, if the stack is\n        // empty you are done\n        if (s.length > 0) {\n          current = s.pop();\n          callback(current, i++);\n\n          // We have visited the node and its left\n          // subtree. Now, it's right subtree's turn\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Walk key range from `low` to `high`. Stops if `fn` returns a value.\n   * @param  {Key}      low\n   * @param  {Key}      high\n   * @param  {Function} fn\n   * @param  {*?}       ctx\n   * @return {SplayTree}\n   */\n  range(low, high, fn, ctx) {\n    const Q = [];\n    const compare = this._comparator;\n    let node = this._root, cmp;\n\n    while (Q.length !== 0 || node) {\n      if (node) {\n        Q.push(node);\n        node = node.left;\n      } else {\n        node = Q.pop();\n        cmp = compare(node.key, high);\n        if (cmp > 0) {\n          break;\n        } else if (compare(node.key, low) >= 0) {\n          if (fn.call(ctx, node)) return this; // stop if smth is returned\n        }\n        node = node.right;\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Returns all keys in order\n   * @return {Array<Key>}\n   */\n  keys () {\n    var current = this._root;\n    var s = [], r = [], done = false;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          r.push(current.key);\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return r;\n  }\n\n  /**\n   * Returns `data` fields of all nodes in order.\n   * @return {Array<Value>}\n   */\n  values () {\n    var current = this._root;\n    var s = [], r = [], done = false;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          r.push(current.data);\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return r;\n  }\n\n  /**\n   * Returns node at given index\n   * @param  {number} index\n   * @return {?Node}\n   */\n  at (index) {\n    // removed after a consideration, more misleading than useful\n    // index = index % this.size;\n    // if (index < 0) index = this.size - index;\n\n    var current = this._root;\n    var s = [], done = false, i = 0;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          if (i === index) return current;\n          i++;\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns node with the minimum key\n   * @return {?Node}\n   */\n  minNode () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.left) node = node.left;\n    return node;\n  }\n\n  /**\n   * Returns node with the max key\n   * @return {?Node}\n   */\n  maxNode () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.right) node = node.right;\n    return node;\n  }\n\n  /**\n   * Min key\n   * @return {?Key}\n   */\n  min () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.left) node = node.left;\n    return node.key;\n  }\n\n  /**\n   * Max key\n   * @return {?Key}\n   */\n  max () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.right) node = node.right;\n    return node.key;\n  }\n\n  /**\n   * @return {boolean} true/false\n   */\n  isEmpty() {\n    return !this._root;\n  }\n\n  /**\n   * Removes and returns the node with smallest key\n   * @return {?Node}\n   */\n  pop () {\n    var node = this._root, returnValue = null;\n    if (node) {\n      while (node.left) node = node.left;\n      returnValue = { key: node.key, data: node.data };\n      this.remove(node.key);\n    }\n    return returnValue;\n  }\n\n  /**\n   * Removes and returns the node with highest key\n   * @return {?Node}\n   */\n  popMax () {\n    var node = this._root, returnValue = null;\n    if (node) {\n      while (node.right) node = node.right;\n      returnValue = { key: node.key, data: node.data };\n      this.remove(node.key);\n    }\n    return returnValue;\n  }\n\n  /**\n   * Find node by key\n   * @param  {Key} key\n   * @return {?Node}\n   */\n  find (key) {\n    var root = this._root;\n    // if (root === null)    return null;\n    // if (key === root.key) return root;\n\n    var subtree = root, cmp;\n    var compare = this._comparator;\n    while (subtree) {\n      cmp = compare(key, subtree.key);\n      if      (cmp === 0) return subtree;\n      else if (cmp < 0)   subtree = subtree.left;\n      else                subtree = subtree.right;\n    }\n\n    return null;\n  }\n\n  /**\n   * Insert a node into the tree\n   * @param  {Key} key\n   * @param  {Value} [data]\n   * @return {?Node}\n   */\n  insert (key, data) {\n    if (!this._root) {\n      this._root = {\n        parent: null, left: null, right: null, balanceFactor: 0,\n        key, data\n      };\n      this._size++;\n      return this._root;\n    }\n\n    var compare = this._comparator;\n    var node    = this._root;\n    var parent  = null;\n    var cmp     = 0;\n\n    if (this._noDuplicates) {\n      while (node) {\n        cmp = compare(key, node.key);\n        parent = node;\n        if      (cmp === 0) return null;\n        else if (cmp < 0)   node = node.left;\n        else                node = node.right;\n      }\n    } else {\n      while (node) {\n        cmp = compare(key, node.key);\n        parent = node;\n        if      (cmp <= 0)  node = node.left; //return null;\n        else                node = node.right;\n      }\n    }\n\n    var newNode = {\n      left: null,\n      right: null,\n      balanceFactor: 0,\n      parent, key, data\n    };\n    var newRoot;\n    if (cmp <= 0) parent.left  = newNode;\n    else         parent.right = newNode;\n\n    while (parent) {\n      cmp = compare(parent.key, key);\n      if (cmp < 0) parent.balanceFactor -= 1;\n      else         parent.balanceFactor += 1;\n\n      if        (parent.balanceFactor === 0) break;\n      else if   (parent.balanceFactor < -1) {\n        // inlined\n        //var newRoot = rightBalance(parent);\n        if (parent.right.balanceFactor === 1) rotateRight(parent.right);\n        newRoot = rotateLeft(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        break;\n      } else if (parent.balanceFactor > 1) {\n        // inlined\n        // var newRoot = leftBalance(parent);\n        if (parent.left.balanceFactor === -1) rotateLeft(parent.left);\n        newRoot = rotateRight(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        break;\n      }\n      parent = parent.parent;\n    }\n\n    this._size++;\n    return newNode;\n  }\n\n  /**\n   * Removes the node from the tree. If not found, returns null.\n   * @param  {Key} key\n   * @return {?Node}\n   */\n  remove (key) {\n    if (!this._root) return null;\n\n    var node = this._root;\n    var compare = this._comparator;\n    var cmp = 0;\n\n    while (node) {\n      cmp = compare(key, node.key);\n      if      (cmp === 0) break;\n      else if (cmp < 0)   node = node.left;\n      else                node = node.right;\n    }\n    if (!node) return null;\n\n    var returnValue = node.key;\n    var max, min;\n\n    if (node.left) {\n      max = node.left;\n\n      while (max.left || max.right) {\n        while (max.right) max = max.right;\n\n        node.key = max.key;\n        node.data = max.data;\n        if (max.left) {\n          node = max;\n          max = max.left;\n        }\n      }\n\n      node.key  = max.key;\n      node.data = max.data;\n      node = max;\n    }\n\n    if (node.right) {\n      min = node.right;\n\n      while (min.left || min.right) {\n        while (min.left) min = min.left;\n\n        node.key  = min.key;\n        node.data = min.data;\n        if (min.right) {\n          node = min;\n          min = min.right;\n        }\n      }\n\n      node.key  = min.key;\n      node.data = min.data;\n      node = min;\n    }\n\n    var parent = node.parent;\n    var pp     = node;\n    var newRoot;\n\n    while (parent) {\n      if (parent.left === pp) parent.balanceFactor -= 1;\n      else                    parent.balanceFactor += 1;\n\n      if        (parent.balanceFactor < -1) {\n        // inlined\n        //var newRoot = rightBalance(parent);\n        if (parent.right.balanceFactor === 1) rotateRight(parent.right);\n        newRoot = rotateLeft(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        parent = newRoot;\n      } else if (parent.balanceFactor > 1) {\n        // inlined\n        // var newRoot = leftBalance(parent);\n        if (parent.left.balanceFactor === -1) rotateLeft(parent.left);\n        newRoot = rotateRight(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        parent = newRoot;\n      }\n\n      if (parent.balanceFactor === -1 || parent.balanceFactor === 1) break;\n\n      pp     = parent;\n      parent = parent.parent;\n    }\n\n    if (node.parent) {\n      if (node.parent.left === node) node.parent.left  = null;\n      else                           node.parent.right = null;\n    }\n\n    if (node === this._root) this._root = null;\n\n    this._size--;\n    return returnValue;\n  }\n\n  /**\n   * Bulk-load items\n   * @param  {Array<Key>}  keys\n   * @param  {Array<Value>}  [values]\n   * @return {AVLTree}\n   */\n  load(keys = [], values = [], presort) {\n    if (this._size !== 0) throw new Error('bulk-load: tree is not empty');\n    const size = keys.length;\n    if (presort) sort(keys, values, 0, size - 1, this._comparator);\n    this._root = loadRecursive(null, keys, values, 0, size);\n    markBalance(this._root);\n    this._size = size;\n    return this;\n  }\n\n  /**\n   * Returns true if the tree is balanced\n   * @return {boolean}\n   */\n  isBalanced() {\n    return isBalanced(this._root);\n  }\n\n  /**\n   * String representation of the tree - primitive horizontal print-out\n   * @param  {Function(Node):string} [printNode]\n   * @return {string}\n   */\n  toString (printNode) {\n    return print(this._root, printNode);\n  }\n}\n\nAVLTree.default = AVLTree;\n",
  "import { DEFAULT_MAX_TEXTURE_SIZE, DEFAULT_MIN_TEXTURE_SIZE } from \"./TextureSlotAllocator\";\nexport class TextureSlot {\n    size;\n    slotNumber;\n    x;\n    y;\n    textureIndex;\n    parent;\n    sibbling;\n    textureSizeLimits;\n    constructor(size, slotNumber, parent, textureSizeLimits) {\n        this.textureSizeLimits = parent?.textureSizeLimits ?? textureSizeLimits ?? { min: DEFAULT_MIN_TEXTURE_SIZE, max: DEFAULT_MAX_TEXTURE_SIZE };\n        this.size = size;\n        this.slotNumber = slotNumber;\n        this.parent = parent;\n        this.sibbling = undefined;\n        const { x, y, textureIndex } = this.calculatePosition(size, slotNumber);\n        this.x = x;\n        this.y = y;\n        this.textureIndex = textureIndex;\n    }\n    calculateTextureIndex(size, slotNumber) {\n        const [w, h] = size;\n        const slotsPerTexture = (this.textureSizeLimits.max / w) * (this.textureSizeLimits.max / h);\n        return Math.floor(slotNumber / slotsPerTexture);\n    }\n    calculatePosition(size, slotNumber) {\n        const [w, h] = size;\n        const slotsPerRow = this.textureSizeLimits.max / w;\n        const slotsPerColumn = this.textureSizeLimits.max / h;\n        const x = (slotNumber % slotsPerRow) * w;\n        const y = (Math.floor(slotNumber / slotsPerRow) % slotsPerColumn) * h;\n        return { x, y, textureIndex: this.calculateTextureIndex(size, slotNumber) };\n    }\n    getTag() {\n        return TextureSlot.getTag(this);\n    }\n    static getTag(slot) {\n        return `${slot.size[0]}x${slot.size[1]}-#${slot.slotNumber}`;\n    }\n    static positionToTextureSlot(x, y, size, textureIndex, parent) {\n        const [w, h] = size;\n        const slotsPerRow = parent.textureSizeLimits.max / w;\n        const slotsPerTexture = (parent.textureSizeLimits.max / w) * (parent.textureSizeLimits.max / h);\n        const slotNumber = slotsPerTexture * textureIndex + (y / h) * slotsPerRow + (x / w);\n        return new TextureSlot(size, slotNumber, parent);\n    }\n    getPosition() {\n        return { x: this.x, y: this.y, size: this.size, textureIndex: this.textureIndex };\n    }\n    canSplitHorizontally() {\n        const [, h] = this.size;\n        return h > this.textureSizeLimits.min;\n    }\n    canSplitVertically() {\n        const [w,] = this.size;\n        return w > this.textureSizeLimits.min;\n    }\n    splitHorizontally() {\n        const { x, y, size, textureIndex } = this;\n        const [w, h] = size;\n        if (!this.canSplitHorizontally()) {\n            throw new Error(`Cannot split texture slot of size ${w} horizontally`);\n        }\n        const halfWidth = w / 2;\n        const left = TextureSlot.positionToTextureSlot(x, y, [halfWidth, h], textureIndex, this);\n        const right = TextureSlot.positionToTextureSlot(x + halfWidth, y, [halfWidth, h], textureIndex, this);\n        left.sibbling = right;\n        right.sibbling = left;\n        return [left, right];\n    }\n    splitVertically() {\n        const { x, y, size, textureIndex } = this;\n        const [w, h] = size;\n        if (!this.canSplitVertically()) {\n            throw new Error(`Cannot split texture slot of size ${h} vertically`);\n        }\n        const halfHeight = h / 2;\n        const top = TextureSlot.positionToTextureSlot(x, y, [w, halfHeight], textureIndex, this);\n        const bottom = TextureSlot.positionToTextureSlot(x, y + halfHeight, [w, halfHeight], textureIndex, this);\n        top.sibbling = bottom;\n        bottom.sibbling = top;\n        return [top, bottom];\n    }\n}\n//# sourceMappingURL=TextureSlot.js.map",
  "//  This returns the smallest size that is a power of 2 and is larger than the given size\nexport function getMinTextureSlotSize(size, minSize) {\n    return Math.max(minSize, Math.pow(2, Math.ceil(Math.log(size) / Math.log(2))));\n}\n//  This rearranges the 'count' sprites into various sprite sheets\nexport function getFlexSizes(w, h, count, textureSizeLimits) {\n    if (count < 1) {\n        throw new Error(\"Invalid count\");\n    }\n    const wFixed = getMinTextureSlotSize(w, textureSizeLimits.min), hFixed = getMinTextureSlotSize(h, textureSizeLimits.min);\n    const flexSizes = new Map();\n    let wSize = textureSizeLimits.min;\n    for (let i = 1; i <= count; i++) {\n        wSize = getMinTextureSlotSize(wFixed * i, textureSizeLimits.min);\n        const hSize = getMinTextureSlotSize(hFixed * Math.ceil(count / i), textureSizeLimits.min);\n        flexSizes.set(wSize, hSize);\n    }\n    for (let size = wSize; size <= textureSizeLimits.max; size *= 2) {\n        if (!flexSizes.has(size)) {\n            flexSizes.set(size, hFixed);\n        }\n    }\n    return flexSizes;\n}\n//# sourceMappingURL=TextureUtils.js.map",
  "// To recognize dom types (see https://bun.sh/docs/typescript#dom-types):\n/// <reference lib=\"dom\" />\n/// <reference lib=\"dom.iterable\" />\nimport AVLTree from 'avl';\nimport { TextureSlot } from './TextureSlot';\nimport { getFlexSizes } from './TextureUtils';\nconst DEBUG = false;\nexport const DEFAULT_MIN_TEXTURE_SIZE = 16;\nexport const DEFAULT_MAX_TEXTURE_SIZE = 4096;\nexport const DEFAULT_NUM_TEXTURE_SHEETS = 16;\nexport class TextureSlotAllocator {\n    //  AVL tree of texture slots, sorted by size\n    textureSlots = new AVLTree((slot1, slot2) => {\n        const sizeDiff = slot1.size[0] * slot1.size[1] - slot2.size[0] * slot2.size[1];\n        if (sizeDiff !== 0) {\n            return sizeDiff;\n        }\n        return slot1.slotNumber - slot2.slotNumber;\n    }, false);\n    allocatedTextures = {};\n    minTextureSize;\n    maxTextureSize;\n    numTextureSheets;\n    initialSlots = [];\n    constructor({ numTextureSheets, minTextureSize, maxTextureSize, excludeTexture } = {}, gl) {\n        this.numTextureSheets = numTextureSheets ?? DEFAULT_NUM_TEXTURE_SHEETS;\n        this.minTextureSize = minTextureSize ?? DEFAULT_MIN_TEXTURE_SIZE;\n        this.maxTextureSize = maxTextureSize ?? DEFAULT_MAX_TEXTURE_SIZE;\n        if (gl) {\n            this.numTextureSheets = Math.min(this.numTextureSheets, gl.getParameter(WebGL2RenderingContext.MAX_TEXTURE_IMAGE_UNITS));\n            this.maxTextureSize = Math.min(this.maxTextureSize, gl.getParameter(WebGL2RenderingContext.MAX_TEXTURE_SIZE));\n            this.minTextureSize = Math.min(this.minTextureSize, this.maxTextureSize);\n        }\n        for (let i = 0; i < this.numTextureSheets; i++) {\n            if (excludeTexture?.(i)) {\n                continue;\n            }\n            this.initialSlots.push(new TextureSlot([this.maxTextureSize, this.maxTextureSize], i, undefined, {\n                min: this.minTextureSize,\n                max: this.maxTextureSize,\n            }));\n        }\n        this.initialSlots.forEach(slot => this.textureSlots.insert(slot));\n    }\n    allocate(w, h, count = 1) {\n        const { size, slotNumber, x, y, textureIndex } = this.allocateHelper(w, h, count);\n        return { size, slotNumber, x, y, textureIndex };\n    }\n    deallocate(slot) {\n        if (!this.isSlotUsed(slot)) {\n            throw new Error('Slot is not allocated');\n        }\n        const textureSlot = this.allocatedTextures[TextureSlot.getTag(slot)];\n        this.deallocateHelper(textureSlot);\n    }\n    get countUsedTextureSheets() {\n        return this.initialSlots.filter(slot => this.isSlotUsed(slot)).length;\n    }\n    allocateHelper(w, h, count = 1) {\n        const flexSizes = getFlexSizes(w, h, count, { min: this.minTextureSize, max: this.maxTextureSize });\n        const slot = this.findSlot(flexSizes);\n        if (!slot) {\n            throw new Error(`Could not find a slot for texture to fit ${count} sprites of size ${w}x${h}`);\n        }\n        this.textureSlots.remove(slot);\n        //  Fit the best size into the slot\n        const [bestWidth, bestHeight] = this.bestFit(flexSizes, slot);\n        return this.fitSlot(slot, bestWidth, bestHeight);\n    }\n    findSlot(flexSizes) {\n        for (let i = 0; i < this.textureSlots.size; i++) {\n            const slot = this.textureSlots.at(i);\n            const textureSlot = slot.key;\n            const [w, h] = textureSlot.size;\n            if (flexSizes.get(w) <= h) {\n                return textureSlot;\n            }\n        }\n        return null;\n    }\n    calculateRatio(w, h) {\n        return Math.max(w / h, h / w);\n    }\n    bestFit(flexSizes, slot) {\n        const [slotWidth, slotHeight] = slot.size;\n        let bestWidth = slot.textureSizeLimits.max;\n        flexSizes.forEach((hSize, wSize) => {\n            if (wSize <= slotWidth && hSize <= slotHeight) {\n                const product = wSize * hSize;\n                const bestProduct = flexSizes.get(bestWidth) * bestWidth;\n                if (product < bestProduct) {\n                    bestWidth = wSize;\n                }\n                else if (product === bestProduct) {\n                    const ratio = this.calculateRatio(wSize, hSize);\n                    if (ratio < this.calculateRatio(bestWidth, flexSizes.get(bestWidth))) {\n                        bestWidth = wSize;\n                    }\n                }\n            }\n        });\n        return [bestWidth, flexSizes.get(bestWidth)];\n    }\n    isSlotUsed(slot) {\n        return !!this.allocatedTextures[TextureSlot.getTag(slot)];\n    }\n    deallocateHelper(slot) {\n        //  check if we can merge with the sibbling\n        if (slot.parent && slot.sibbling && !this.isSlotUsed(slot.sibbling)) {\n            const sibbling = slot.sibbling;\n            this.textureSlots.remove(sibbling);\n            if (DEBUG && this.textureSlots.find(slot)) {\n                throw new Error('Slot is not expected to be in the tree');\n            }\n            const parent = slot.parent;\n            this.deallocateHelper(parent);\n            return;\n        }\n        this.textureSlots.insert(slot);\n        delete this.allocatedTextures[slot.getTag()];\n    }\n    trySplitHorizontally(slot, w, h) {\n        if (slot.canSplitHorizontally()) {\n            const [leftColumn, rightColumn] = slot.splitHorizontally();\n            // First try to split vertically\n            if (leftColumn.size[0] >= w) {\n                this.textureSlots.insert(rightColumn);\n                return this.fitSlot(leftColumn, w, h);\n            }\n        }\n        return null;\n    }\n    trySplitVertically(slot, w, h) {\n        if (slot.canSplitVertically()) {\n            const [topRow, bottomRow] = slot.splitVertically();\n            // Then try to split vertically\n            if (topRow.size[1] >= h) {\n                this.textureSlots.insert(bottomRow);\n                return this.fitSlot(topRow, w, h);\n            }\n        }\n        return null;\n    }\n    fitSlot(slot, w, h) {\n        this.allocatedTextures[slot.getTag()] = slot;\n        if (slot.size[0] > slot.size[1]) {\n            const splitAttempt = this.trySplitHorizontally(slot, w, h)\n                ?? this.trySplitVertically(slot, w, h);\n            if (splitAttempt) {\n                return splitAttempt;\n            }\n        }\n        else {\n            const splitAttempt = this.trySplitVertically(slot, w, h)\n                ?? this.trySplitHorizontally(slot, w, h);\n            if (splitAttempt) {\n                return splitAttempt;\n            }\n        }\n        //  Return that slot if we can't split it further\n        return slot;\n    }\n    listSlots() {\n        this.textureSlots.forEach((node) => {\n            console.log(node.key?.getTag());\n        });\n    }\n}\n//# sourceMappingURL=TextureSlotAllocator.js.map",
  "import { GLUniforms } from 'gl/uniforms/GLUniforms';\nimport { Disposable } from '../../lifecycle/Disposable';\nimport { GL, MAX_TEXTURE_SIZE_LOC, TEXTURE_UNIFORM_LOC } from '../attributes/Constants';\nimport { MediaData } from './MediaData';\nimport { Slot, TextureIndex } from \"texture-slot-allocator/dist/src/texture/TextureSlot\";\nimport { TextureSlotAllocator } from 'texture-slot-allocator/dist/src/texture/TextureSlotAllocator';\n\nexport type TextureId = `TEXTURE${TextureIndex}`;\nexport const TEXTURE_INDEX_FOR_VIDEO = 15;\n\nexport type Url = string;\n\nexport class TextureManager extends Disposable {\n  private gl: GL;\n  private uniforms: GLUniforms;\n  private textureBuffers: Record<TextureId | string, WebGLTexture> = {};\n  private tempContext = (new OffscreenCanvas(1, 1)).getContext('2d')!;\n  private textureSlotAllocator = new TextureSlotAllocator({\n    excludeTexture: (tex) => tex === TEXTURE_INDEX_FOR_VIDEO\n  });\n  private textureSlotAllocatorForVideo = new TextureSlotAllocator({\n    excludeTexture: (tex) => tex !== TEXTURE_INDEX_FOR_VIDEO\n  });\n\n  constructor(gl: GL, uniforms: GLUniforms) {\n    super();\n    this.gl = gl;\n    this.uniforms = uniforms;\n    this.tempContext.imageSmoothingEnabled = true;\n  }\n\n  initialize() {\n    this.initTextureUniforms();\n    this.initMaxTexture();\n  }\n\n  private getTexture(textureId: TextureId) {\n    if (!this.textureBuffers[textureId]) {\n      const texture = this.gl.createTexture();\n      if (!texture) {\n        return;\n      }\n      this.gl.bindTexture(GL.TEXTURE_2D, texture);\n      this.gl.texImage2D(\n        GL.TEXTURE_2D,\n        0,\n        GL.RGBA,\n        this.textureSlotAllocator.maxTextureSize,\n        this.textureSlotAllocator.maxTextureSize,\n        0,\n        GL.RGBA,\n        GL.UNSIGNED_BYTE,\n        null,\n      );\n\n      this.textureBuffers[textureId] = texture;\n      this.addOnDestroy(() => this.gl.deleteTexture(texture));\n    }\n    return this.textureBuffers[textureId];\n  }\n\n  private loadTexture(\n    mediaInfo: MediaData,\n    textureId: TextureId,\n    texture: WebGLTexture,\n    sourceRect: [number, number, number, number],\n    destRect: [number, number, number, number],\n  ): void {\n    this.gl.activeTexture(GL[textureId]);\n    this.gl.bindTexture(GL.TEXTURE_2D, texture);\n    this.applyTexImage2d(mediaInfo, sourceRect, destRect);\n    this.gl.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_MIN_FILTER, GL.LINEAR);\n  }\n\n  applyTexImage2d(\n    mediaInfo: MediaData,\n    [srcX, srcY, srcWidth, srcHeight]: number[],\n    [dstX, dstY, dstWidth, dstHeight]: number[],\n  ): void {\n    if (srcWidth === dstWidth && srcHeight === dstHeight && !srcX && !srcY) {\n      this.gl.texSubImage2D(\n        GL.TEXTURE_2D,\n        0,\n        dstX,\n        dstY,\n        dstWidth,\n        dstHeight,\n        GL.RGBA,\n        GL.UNSIGNED_BYTE,\n        mediaInfo.texImgSrc,\n      );\n    } else {\n      const canvas = this.tempContext.canvas;\n      if (mediaInfo.texImgSrc instanceof ImageData) {\n        canvas.width = dstWidth || mediaInfo.width;\n        canvas.height = dstHeight || mediaInfo.height;\n        this.tempContext.putImageData(mediaInfo.texImgSrc, 0, 0);\n        if (srcX || srcY) {\n          console.warn('Offset not available when sending imageData');\n        }\n      } else {\n        const sourceWidth = srcWidth || mediaInfo.width;\n        const sourceHeight = srcHeight || mediaInfo.height;\n        canvas.width = dstWidth || sourceWidth;\n        canvas.height = dstHeight || sourceHeight;\n        this.tempContext.drawImage(\n          mediaInfo.texImgSrc,\n          srcX,\n          srcY,\n          sourceWidth,\n          sourceHeight,\n          0,\n          0,\n          canvas.width,\n          canvas.height,\n        );\n      }\n      this.gl.texSubImage2D(\n        GL.TEXTURE_2D,\n        0,\n        dstX,\n        dstY,\n        canvas.width,\n        canvas.height,\n        GL.RGBA,\n        GL.UNSIGNED_BYTE,\n        canvas,\n      );\n    }\n  }\n\n  allocateSlotForImage(mediaInfo: MediaData): { slot: Slot, refreshCallback: () => void } {\n    const allocator = mediaInfo.isVideo ? this.textureSlotAllocatorForVideo : this.textureSlotAllocator;\n    const slot = allocator.allocate(mediaInfo.width, mediaInfo.height);\n    const textureId: TextureId = `TEXTURE${slot.textureIndex}`;\n    const webGLTexture = this.getTexture(textureId);\n    if (!webGLTexture) {\n      throw new Error(`Invalid texture Id ${textureId}`);\n    }\n\n    const refreshCallback = this.assignImageToTexture(\n      mediaInfo,\n      textureId,\n      webGLTexture,\n      [0, 0, mediaInfo.width, mediaInfo.height],\n      [slot.x, slot.y, ...slot.size],\n    );\n    return { slot, refreshCallback };\n  }\n\n  private assignImageToTexture(\n    imageInfo: MediaData,\n    textureId: TextureId,\n    texture: WebGLTexture,\n    sourceRect?: [number, number, number, number],\n    destRect?: [number, number, number, number],\n  ): () => void {\n    const srcRect = sourceRect ?? [0, 0, imageInfo.width, imageInfo.height];\n    const dstRect = destRect ?? [0, 0, srcRect[2], srcRect[3]];\n    const refreshTexture = () => {\n      this.gl.bindTexture(GL.TEXTURE_2D, texture);\n      this.applyTexImage2d(imageInfo, srcRect, dstRect);\n    };\n\n    if (imageInfo.active) {\n      refreshTexture();\n    } else {\n      this.loadTexture(imageInfo, textureId, texture, srcRect, dstRect);\n      imageInfo.active = true;\n    }\n    return refreshTexture;\n  }\n\n  setupTextureForVideo(textureId: TextureId) {\n    const texture = this.getTexture(textureId);\n    if (texture) {\n      this.gl.activeTexture(GL[textureId]);\n      this.gl.bindTexture(GL.TEXTURE_2D, texture);\n\n      this.gl.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_MIN_FILTER, GL.LINEAR);\n      this.gl.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_MAG_FILTER, GL.LINEAR);\n    }\n  }\n\n  generateMipMap(textureId: TextureId) {\n    const texture = this.getTexture(textureId);\n    if (texture) {\n      this.gl.activeTexture(GL[textureId]);\n      this.gl.bindTexture(GL.TEXTURE_2D, texture);\n\n      this.gl.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_MIN_FILTER, GL.LINEAR_MIPMAP_LINEAR);\n      this.gl.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_MAG_FILTER, GL.LINEAR);\n      this.gl.generateMipmap(GL.TEXTURE_2D);\n    }\n  }\n\n  private initTextureUniforms() {\n    const maxTextureUnits = this.gl.getParameter(GL.MAX_TEXTURE_IMAGE_UNITS);\n    const arrayOfTextureIndex = new Array(maxTextureUnits).fill(null).map((_, index) => index);\t//\t0, 1, 2, 3... 16\n    const textureUniformLocation = this.uniforms.getUniformLocation(TEXTURE_UNIFORM_LOC);\n    this.gl.uniform1iv(textureUniformLocation, arrayOfTextureIndex);\n  }\n\n  private initMaxTexture() {\n    const loc = this.uniforms.getUniformLocation(MAX_TEXTURE_SIZE_LOC);\n    this.gl.uniform1f(loc, this.textureSlotAllocator.maxTextureSize);\n  }\n}\n",
  "import { Refresh } from 'updates/Refresh';\nimport { Disposable } from '../../lifecycle/Disposable';\nimport { Schedule } from 'core/motor/Motor';\n\nexport class MediaData extends Disposable implements Refresh {\n  readonly texImgSrc: TexImageSource;\n  active: boolean = false;\n  readonly width: number;\n  readonly height: number;\n  readonly isVideo: boolean;\n  refreshCallback?(): void;\n  schedule?: Partial<Schedule>;\n\n  constructor(image: TexImageSource, fps?: number) {\n    super();\n    this.texImgSrc = image;\n    const img: any = image;\n    this.isVideo = !!(img.videoWidth || img.videoHeight);\n    this.width = img.naturalWidth ?? img.videoWidth ?? img.displayWidth ?? img.width?.baseValue?.value ?? img.width;\n    this.height = img.naturalHeight ?? img.videoHeight ?? img.displayHeight ?? img.height?.baseValue?.value ?? img.height;\n    this.schedule = fps ? { period: 1000 / fps } : undefined;\n    if (!this.width || !this.height) {\n      throw new Error('Invalid image');\n    }\n  }\n\n  refresh(): void {\n    this.refreshCallback?.();\n  }\n\n  static createFromCanvas(canvas: OffscreenCanvas | HTMLCanvasElement): MediaData {\n    return new MediaData(canvas);\n  }\n\n  static async loadImage(src: string): Promise<MediaData> {\n    const image = await new Promise<HTMLImageElement>((resolve, reject) => {\n      const image = new Image();\n      image.crossOrigin = \"anonymous\";\n      const imageError = (e: ErrorEvent) => reject(e.error);\n      image.addEventListener('error', imageError);\n      image.addEventListener('load', () => resolve(image), { once: true });\n      image.src = src;\n    });\n    return new MediaData(image);\n  }\n\n  static async loadVideo(src: string, volume?: number, fps: number = 30, playSpeed: number = 1): Promise<MediaData> {\n    const video = await new Promise<HTMLVideoElement>((resolve, reject) => {\n      const video = document.createElement('video');\n      video.loop = true;\n      if (volume !== undefined) {\n        video.volume = volume;\n      }\n\n      video.addEventListener('loadedmetadata', () => {\n        video.play();\n        video.playbackRate = playSpeed;\n        resolve(video);\n      }, { once: true });\n      video.addEventListener('error', (e: ErrorEvent) => reject(e.error));\n      video.src = src;\n\n    });\n    const videoInfo = new MediaData(video, fps);\n    videoInfo.addOnDestroy(() => video.pause());\n    return videoInfo;\n  }\n\n  static async loadWebcam(deviceId?: string): Promise<MediaData> {\n    const video = await new Promise<HTMLVideoElement>((resolve, reject) => {\n      const video = document.createElement('video');\n      video.loop = true;\n\n      video.addEventListener('loadedmetadata', () => video.play());\n      video.addEventListener('playing', () => resolve(video), { once: true });\n      video.addEventListener('error', (e: ErrorEvent) => reject(e.error));\n    });\n    const videoInfo = new MediaData(video);\n    let cancelled = false;\n    navigator.mediaDevices\n      .getUserMedia({ video: { deviceId } })\n      .then((stream) => {\n        if (!cancelled) {\n          video.srcObject = stream;\n          videoInfo.addOnDestroy(() =>\n            stream.getTracks().forEach((track) => track.stop()),\n          );\n        }\n      });\n\n    videoInfo.addOnDestroy(() => {\n      cancelled = true;\n      video.pause();\n    });\n    return videoInfo;\n  }\n}\n",
  "import { Disposable } from \"lifecycle/Disposable\";\nimport { Url } from \"./TextureManager\";\nimport { MediaData } from \"./MediaData\";\nimport { CanvasMedia, DrawMedia, ImageMedia, Media, MediaType, VideoMedia, WebcamMedia } from \"./Media\";\n\nexport type MediaId = number;\n\ntype DrawProcedure<T extends Media> = (imageId: MediaId, media: T) => Promise<MediaData>;\n\nfunction createDrawProcedure<T extends Media>(procedure: DrawProcedure<T>): DrawProcedure<T> {\n  return procedure;\n}\n\nexport class ImageManager extends Disposable {\n  private images: Record<MediaId, MediaData> = {};\n  private readonly renderProcedures: Record<MediaType, DrawProcedure<Media>> = {\n    image: createDrawProcedure<ImageMedia>((imageId, media) => this.loadImage(imageId, media.src)) as DrawProcedure<Media>,\n    video: createDrawProcedure<VideoMedia>((imageId, media) => this.loadVideo(imageId, media.src, media.volume, media.fps, media.playSpeed)) as DrawProcedure<Media>,\n    draw: createDrawProcedure<DrawMedia>((imageId, media) => this.drawImage(imageId, media.draw)) as DrawProcedure<Media>,\n    canvas: createDrawProcedure<CanvasMedia>((imageId, media) => this.loadCanvas(imageId, media.canvas)) as DrawProcedure<Media>,\n    webcam: createDrawProcedure<WebcamMedia>((imageId, media) => this.loadWebCam(imageId, media.deviceId)) as DrawProcedure<Media>,\n  };\n\n  hasImageId(imageId: MediaId): boolean {\n    return !!this.getMedia(imageId);\n  }\n\n\n  getMedia(imageId: MediaId): MediaData {\n    return this.images[imageId];\n  }\n\n  setImage(imageId: MediaId, mediaInfo: MediaData): void {\n    this.images[imageId] = mediaInfo;\n  }\n\n  async renderMedia(imageId: MediaId, media: Media): Promise<MediaData> {\n    return this.renderProcedures[media.type](imageId, media);\n  }\n\n  async drawImage(\n    imageId: MediaId,\n    drawProcedure: (context: OffscreenCanvasRenderingContext2D) => void,\n  ): Promise<MediaData> {\n    const canvas = new OffscreenCanvas(1, 1);\n    drawProcedure(canvas.getContext('2d')!);\n    const imageInfo = MediaData.createFromCanvas(canvas);\n    this.images[imageId] = this.own(imageInfo);\n    return imageInfo;\n  }\n\n  async loadCanvas(\n    imageId: MediaId,\n    canvas: HTMLCanvasElement | OffscreenCanvas,\n  ): Promise<MediaData> {\n    const imageInfo = MediaData.createFromCanvas(canvas);\n    canvas.getContext('2d');\n    this.images[imageId] = this.own(imageInfo);\n    return imageInfo;\n  }\n\n  async loadImage(imageId: MediaId, src: Url): Promise<MediaData> {\n    const imageInfo = await MediaData.loadImage(src);\n    this.images[imageId] = this.own(imageInfo);\n    return imageInfo;\n  }\n\n  async loadVideo(\n    imageId: MediaId,\n    src: Url,\n    volume?: number,\n    fps?: number,\n    playSpeed?: number,\n  ): Promise<MediaData> {\n    const videoInfo = await MediaData.loadVideo(src, volume, fps, playSpeed);\n    this.images[imageId] = this.own(videoInfo);\n    return videoInfo;\n  }\n\n  async loadWebCam(\n    imageId: MediaId,\n    deviceId: string | undefined,\n  ): Promise<MediaData> {\n    const videoInfo = await MediaData.loadWebcam(deviceId);\n    this.images[imageId] = this.own(videoInfo);\n    return videoInfo;\n  }\n}\n",
  "#version 300 es\n//  ~{AUTHOR}\n\nprecision highp float;\n\n//  IN\n//  shape\nlayout(location = 0) in vec2 position;\nlayout(location = 1) in mat4 transform;\n//  1, 2, 3, 4 reserved for transform\n//  animation\nlayout(location = 5) in vec2 slotSize_and_number;\n//  instance\nlayout(location = 6) in float instance;\n\n//  UNIFORM\nuniform float maxTextureSize;\nuniform mat4 camPos;\nuniform mat4 camTurn;\nuniform mat4 camTilt;\nuniform mat4 projection;\nuniform float curvature;\n\n//  OUT\nout vec2 vTex;\nout float vTextureIndex;\nout vec3 vInstanceColor;\n\nvoid main() {\n  vec2 tex = position.xy * vec2(0.49, -0.49) + 0.5;\n  vec2 slotSize = vec2(\n    pow(2.0, floor(slotSize_and_number.x / 16.0)),\n    pow(2.0, mod(slotSize_and_number.x, 16.0)));\n  float slotNumber = slotSize_and_number.y;\n  float maxCols = maxTextureSize / slotSize.x;\n  float maxRows = maxTextureSize / slotSize.y;\n  float slotX = mod(slotNumber, maxCols);\n  float slotY = mod(floor(slotNumber / maxCols), maxRows);\n\n  vec4 elemPosition = transform * vec4(position, 0.0, 1.0);\n  // elementPosition => relativePosition\n  vec4 relativePosition = camTilt * camTurn * camPos * elemPosition;\n  relativePosition.y -= curvature * ((relativePosition.z * relativePosition.z) + (relativePosition.x * relativePosition.x) / 4.) / 10.;\n  // relativePosition => gl_Position\n  gl_Position = projection * relativePosition;\n\n\n  vTex = (vec2(slotX, slotY) + tex) * slotSize / maxTextureSize;\n  vTextureIndex = floor(slotNumber / (maxCols * maxRows));\n\n  //  instance\n  float r = fract(instance / (256.0 * 256.0 * 255.0));\n  float g = fract(instance / (256.0 * 255.0));\n  float b = fract(instance / 255.0);\n  vInstanceColor = vec3(r, g, b);\n}\n",
  "#version 300 es\n//  ~{AUTHOR}\nprecision highp float;\n\n//  CONST\nconst int NUM_TEXTURES = 16;\nconst float threshold = 0.00001;\n\n//  IN\n//  texture\nuniform sampler2D uTextures[NUM_TEXTURES];\nin float vTextureIndex;\nin vec2 vTex;\nin float opacity;\nin vec3 vInstanceColor;\n\n//  OUT\nout vec4 fragColor;\n\n//  FUNCTIONS\nvec4 getTextureColor(float textureSlot, vec2 vTexturePoint);\n\nvoid main() {\n  vec4 color = getTextureColor(vTextureIndex, vTex);\n  if (color.a <= .0001) {\n    discard;\n  };\n  fragColor = color;\n//  fragColor = vec4(vInstanceColor.rgb, 1.0);\n}\n\nvec4 getTextureColor(float textureSlot, vec2 vTexturePoint) {\n  if (abs(0.0 - textureSlot) < threshold) {\n    return texture(uTextures[0], vTexturePoint);\n  }\n  if (abs(1.0 - textureSlot) < threshold) {\n    return texture(uTextures[1], vTexturePoint);\n  }\n  if (abs(2.0 - textureSlot) < threshold) {\n    return texture(uTextures[2], vTexturePoint);\n  }\n  if (abs(3.0 - textureSlot) < threshold) {\n    return texture(uTextures[3], vTexturePoint);\n  }\n  if (abs(4.0 - textureSlot) < threshold) {\n    return texture(uTextures[4], vTexturePoint);\n  }\n  if (abs(5.0 - textureSlot) < threshold) {\n    return texture(uTextures[5], vTexturePoint);\n  }\n  if (abs(6.0 - textureSlot) < threshold) {\n    return texture(uTextures[6], vTexturePoint);\n  }\n  if (abs(7.0 - textureSlot) < threshold) {\n    return texture(uTextures[7], vTexturePoint);\n  }\n  if (abs(8.0 - textureSlot) < threshold) {\n    return texture(uTextures[8], vTexturePoint);\n  }\n  if (abs(9.0 - textureSlot) < threshold) {\n    return texture(uTextures[9], vTexturePoint);\n  }\n  if (abs(10.0 - textureSlot) < threshold) {\n    return texture(uTextures[10], vTexturePoint);\n  }\n  if (abs(11.0 - textureSlot) < threshold) {\n    return texture(uTextures[11], vTexturePoint);\n  }\n  if (abs(12.0 - textureSlot) < threshold) {\n    return texture(uTextures[12], vTexturePoint);\n  }\n  if (abs(13.0 - textureSlot) < threshold) {\n    return texture(uTextures[13], vTexturePoint);\n  }\n  if (abs(14.0 - textureSlot) < threshold) {\n    return texture(uTextures[14], vTexturePoint);\n  }\n  if (abs(15.0 - textureSlot) < threshold) {\n    return texture(uTextures[15], vTexturePoint);\n  }\n  return texture(uTextures[0], vTexturePoint);\n}\n",
  "export function replaceTilda(\n  inputString: string,\n  replacementMap?: Record<string, any>,\n) {\n  return inputString.replace(/~\\{(\\w+)\\}/g, (match, variable) => {\n    return replacementMap?.[variable] || match;\n  });\n}\n",
  "/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};",
  "import * as glMatrix from \"./common.js\";\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\n\nexport var sub = subtract;",
  "import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;",
  "import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();",
  "import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();",
  "import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();",
  "import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();",
  "import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();",
  "import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();",
  "import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();",
  "import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();",
  "import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyVec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\n * Gets the angular distance between two unit quaternions\n *\n * @param  {ReadonlyQuat} a     Origin unit quaternion\n * @param  {ReadonlyQuat} b     Destination unit quaternion\n * @return {Number}     Angle, in radians, between the two quaternions\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate W component of\n * @returns {quat} out\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\n * Calculate the exponential of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\n * Calculate the natural logarithm of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\n * Calculate the scalar power of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @param {Number} b amount to scale the quaternion by\n * @returns {quat} out\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\n * Generates a random unit quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate inverse of\n * @returns {quat} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate conjugate of\n * @returns {quat} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyMat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\n * Returns a string representation of a quatenion\n *\n * @param {ReadonlyQuat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var clone = vec4.clone;\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var fromValues = vec4.fromValues;\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the source quaternion\n * @returns {quat} out\n * @function\n */\n\nexport var copy = vec4.copy;\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\n\nexport var set = vec4.set;\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n * @function\n */\n\nexport var add = vec4.add;\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {ReadonlyQuat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\n\nexport var scale = vec4.scale;\n/**\n * Calculates the dot product of two quat's\n *\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = vec4.dot;\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\n\nexport var lerp = vec4.lerp;\n/**\n * Calculates the length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport var length = vec4.length;\n/**\n * Alias for {@link quat.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\n\nexport var normalize = vec4.normalize;\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat} a The first quaternion.\n * @param {ReadonlyQuat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat} a The first vector.\n * @param {ReadonlyQuat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var equals = vec4.equals;\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {ReadonlyVec3} a the initial vector\n * @param {ReadonlyVec3} b the destination vector\n * @returns {quat} out\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {ReadonlyQuat} c the third operand\n * @param {ReadonlyQuat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();",
  "import { mat4, quat, vec3 } from 'gl-matrix';\nimport { IMatrix } from './IMatrix';\nimport { Angle } from 'gl/utils/angleUtils';\n\nconst DEG_TO_RADIANT = Math.PI / 90;\n\nclass Matrix implements IMatrix {\n  private m4 = Float32Array.from(mat4.create());\n\n  constructor() {\n    this.identity();\n  }\n\n  static create() {\n    return new Matrix();\n  }\n\n  public set(matrix: Matrix): Matrix {\n    mat4.copy(this.m4, matrix.getMatrix());\n    return this;\n  }\n\n  public identity(): Matrix {\n    mat4.identity(this.m4);\n    return this;\n  }\n\n  public invert(matrix?: IMatrix): Matrix {\n    mat4.invert(this.m4, matrix?.getMatrix() ?? this.getMatrix());\n    return this;\n  }\n\n  public multiply(matrix: IMatrix): Matrix {\n    mat4.multiply(this.m4, this.m4, matrix.getMatrix());\n    return this;\n  }\n\n  public multiply2(matrix1: IMatrix, matrix2: IMatrix): Matrix {\n    mat4.multiply(this.m4, matrix1.getMatrix(), matrix2.getMatrix());\n    return this;\n  }\n\n  public multiply3(matrix1: IMatrix, matrix2: IMatrix, matrix3: IMatrix): Matrix {\n    this.multiply2(matrix1, matrix2);\n    this.multiply(matrix3);\n    return this;\n  }\n\n  public translate(x: number, y: number, z: number): Matrix {\n    mat4.translate(this.m4, this.m4, [x, y, z]);\n    return this;\n  }\n\n  public translateToMatrix(matrix: Matrix): Matrix {\n    const m4 = matrix.getMatrix();\n    return this.translate(-m4[12], -m4[13], -m4[14]);\n  }\n\n  public rotateX(angle: Angle): Matrix {\n    mat4.rotateX(this.m4, this.m4, angle);\n    return this;\n  }\n\n  public rotateY(angle: Angle): Matrix {\n    mat4.rotateY(this.m4, this.m4, angle);\n    return this;\n  }\n\n  public rotateZ(angle: Angle): Matrix {\n    mat4.rotateZ(this.m4, this.m4, angle);\n    return this;\n  }\n\n  public setXRotation(angle: Angle): Matrix {\n    mat4.fromXRotation(this.getMatrix(), angle);\n    return this;\n  }\n\n  public setYRotation(angle: Angle): Matrix {\n    mat4.fromYRotation(this.getMatrix(), angle);\n    return this;\n  }\n\n  public scale(x: number, y?: number, z?: number): Matrix {\n    mat4.scale(this.m4, this.m4, [x, y ?? x, z ?? x]);\n    return this;\n  }\n\n  public perspective(degAngle: number, ratio: number, near: number, far: number): Matrix {\n    mat4.perspective(\n      this.m4,\n      degAngle * DEG_TO_RADIANT,\n      ratio,\n      near,\n      far,\n    );\n    return this;\n  }\n\n  public ortho(left: number, right: number, bottom: number, top: number, near: number, far: number): Matrix {\n    mat4.ortho(this.m4, left, right, bottom, top, near, far);\n    return this;\n  }\n\n  private static aTemp = mat4.create();\n  private static bTemp = mat4.create();\n  combine(matrix1: Matrix, matrix2: Matrix, level: number = .5): Matrix {\n    mat4.multiplyScalar(Matrix.aTemp, matrix1.getMatrix(), 1 - level);\n    mat4.multiplyScalar(Matrix.bTemp, matrix2.getMatrix(), level);\n    mat4.add(this.m4, Matrix.aTemp, Matrix.bTemp);\n    return this;\n  }\n\n  static tempQuat = quat.create();\n  static tempVec = vec3.create();\n  moveMatrix(x: number, y: number, z: number, turnMatrix?: IMatrix) {\n    const v = Matrix.tempVec;\n    v[0] = x;\n    v[1] = y;\n    v[2] = z;\n    if (turnMatrix) {\n      mat4.getRotation(Matrix.tempQuat, turnMatrix.getMatrix());\n      quat.invert(Matrix.tempQuat, Matrix.tempQuat);\n      vec3.transformQuat(v, v, Matrix.tempQuat);\n    }\n    mat4.translate(this.m4, this.m4, v);\n    return this;\n  }\n\n  //  private static eulerAngles: { x: number, y: number, z: number } = { x: 0, y: 0, z: 0 };\n  getRotationAngle() {\n    mat4.getRotation(Matrix.tempQuat, this.getMatrix());\n    return quat.getAngle(quat.create(), Matrix.tempQuat);\n\n    // const matrix = this.getMatrix();\n    // const sy = Math.sqrt(matrix[0] * matrix[0] + matrix[4] * matrix[4]);\n\n    // let x, y, z;\n\n    // if (sy > 1e-6) {\n    //   x = Math.atan2(matrix[6], matrix[10]);\n    //   y = Math.atan2(-matrix[2], sy);\n    //   z = Math.atan2(matrix[1], matrix[0]);\n    // } else {\n    //   x = Math.atan2(-matrix[9], matrix[5]);\n    //   y = Math.atan2(-matrix[2], sy);\n    //   z = 0;\n    // }\n    // Matrix.eulerAngles.x = x;\n    // Matrix.eulerAngles.y = y;\n    // Matrix.eulerAngles.z = z;\n    // return Matrix.eulerAngles;\n\n  }\n\n  public getMatrix(): Float32Array {\n    return this.m4;\n  }\n}\n\nexport default Matrix;\n",
  "import { IMatrix } from \"./IMatrix\";\nimport Matrix from \"./Matrix\";\n\nexport class ProjectionMatrix implements IMatrix {\n  private readonly baseMatrix = Matrix.create();\n  private readonly perspectiveMatrix = Matrix.create();\n  private readonly orthoMatrix = Matrix.create();\n  private perspectiveLevel = 1;\n\n  private configPerspectiveMatrix(ratio: number) {\n    this.perspectiveMatrix.perspective(45, ratio, 0.01, 100000);\n  }\n\n  private configOrthoMatrix(ratio: number) {\n    this.orthoMatrix.ortho(-ratio, ratio, -1, 1, -100000, 100000);\n  }\n\n  configure(width: number, height: number) {\n    const ratio: number = width / height;\n    this.configPerspectiveMatrix(ratio);\n    this.configOrthoMatrix(ratio);\n  }\n\n  setPerspective(level: number) {\n    this.perspectiveLevel = level;\n  }\n\n  getMatrix(): Float32Array {\n    this.baseMatrix.combine(this.orthoMatrix, this.perspectiveMatrix, this.perspectiveLevel);\n    return this.baseMatrix.getMatrix();\n  }\n}\n",
  "export type Angle = number;\n\nexport function angle(value: number): Angle {\n  return (value + Math.PI) % (2 * Math.PI) - Math.PI;\n}\n\nexport function angleStep(angle: Angle, step: Angle) {\n  return Math.round(angle / step) * step;\n}\n",
  "export class Progressive<T> {\n  private goal: number;\n  private active: boolean = false;\n  private speed: number = 0;\n  private locker?: any;\n  constructor(private element: T, private getValue: (element: T) => number, private apply: (element: T, value: number) => void) {\n    this.goal = this.getValue(element);\n  }\n\n  setGoal(value: number, speed: number, locker?: any) {\n    if (this.locker && this.locker !== locker) {\n      return;\n    }\n    if (this.goal !== value || this.speed !== speed) {\n      this.speed = speed;\n      this.goal = value;\n      this.locker = locker;\n      this.active = true;\n    }\n  }\n\n  update(deltaTime: number): boolean {\n    if (this.active) {\n      const curValue = this.getValue(this.element);\n      const diff = this.goal - curValue;\n      const dDist = Math.min(Math.abs(diff), this.speed * deltaTime);\n      if (dDist <= .01) {\n        this.apply(this.element, this.goal);\n        this.active = false;\n        this.locker = undefined;\n      } else {\n        this.apply(this.element, curValue + dDist * Math.sign(diff));\n      }\n    }\n    return this.active;\n  }\n}\n",
  "import { Angle, angle } from \"gl/utils/angleUtils\";\nimport { IMatrix } from \"./IMatrix\";\nimport Matrix from \"./Matrix\";\nimport { Progressive } from \"core/value/Progressive\";\n\nexport class TiltMatrix implements IMatrix {\n  private matrix: Matrix = Matrix.create();;\n  private _tilt: Angle = 0;\n  progressiveTilt: Progressive<TiltMatrix>;\n\n  constructor(private onChange?: () => void) {\n    this.progressiveTilt = new Progressive<TiltMatrix>(this,\n      (matrix) => matrix.tilt,\n      (matrix, value) => matrix.tilt = value,\n    );\n  }\n\n  get tilt(): Angle {\n    return this._tilt;\n  }\n\n  set tilt(value: number) {\n    this._tilt = angle(value);\n    this.matrix.setXRotation(this._tilt);\n    this.onChange?.();\n  }\n\n  getMatrix(): Float32Array {\n    return this.matrix.getMatrix();\n  }\n}\n",
  "import { Angle, angle } from \"gl/utils/angleUtils\";\nimport { IMatrix } from \"./IMatrix\";\nimport Matrix from \"./Matrix\";\n\nexport class TurnMatrix implements IMatrix {\n  private matrix: Matrix = Matrix.create();;\n  private _turn: Angle = 0;\n\n  constructor(private onChange?: () => void) {\n  }\n\n  get turn(): Angle {\n    return this._turn;\n  }\n\n  set turn(value: number) {\n    this._turn = angle(value);\n    this.matrix.setYRotation(this._turn);\n    this.onChange?.();\n  }\n\n  getMatrix(): Float32Array {\n    return this.matrix.getMatrix();\n  }\n}\n",
  "import { Refresh } from \"./Refresh\";\nimport { CameraMatrixType } from \"gl/camera/Camera\";\nimport { UpdateNotifier } from \"./UpdateNotifier\";\nimport { IGraphicsEngine } from \"core/graphics/IGraphicsEngine\";\nimport { IMotor } from \"core/motor/IMotor\";\n\nexport class CameraUpdate implements Refresh, UpdateNotifier {\n  private readonly updatedTypes: Set<CameraMatrixType> = new Set();\n  constructor(private getCameraMatrix: (type: CameraMatrixType) => Float32Array, private engine: IGraphicsEngine, private motor: IMotor) {\n  }\n\n  informUpdate(type: CameraMatrixType): void {\n    this.motor.registerUpdate(this.withCameraType(type));\n  }\n\n  withCameraType(type: CameraMatrixType): CameraUpdate {\n    this.updatedTypes.add(type);\n    return this;\n  }\n\n  refresh(): void {\n    this.updatedTypes.forEach(type => this.engine.updateCameraMatrix(type, this.getCameraMatrix(type)));\n  }\n}\n",
  "import { Refresh } from \"./Refresh\";\nimport { CameraFloatType } from \"gl/camera/Camera\";\nimport { UpdateNotifier } from \"./UpdateNotifier\";\nimport { IGraphicsEngine } from \"core/graphics/IGraphicsEngine\";\nimport { IMotor } from \"core/motor/IMotor\";\n\nexport class CameraFloatUpdate implements Refresh, UpdateNotifier {\n  private readonly updatedTypes: Set<CameraFloatType> = new Set();\n  constructor(private getCameraFloat: (type: CameraFloatType) => number, private engine: IGraphicsEngine, private motor: IMotor) {\n  }\n\n  informUpdate(type: CameraFloatType): void {\n    this.motor.registerUpdate(this.withCameraType(type));\n  }\n\n  withCameraType(type: CameraFloatType): CameraFloatUpdate {\n    this.updatedTypes.add(type);\n    return this;\n  }\n\n  refresh(): void {\n    this.updatedTypes.forEach(type => this.engine.updateCameraFloat(type, this.getCameraFloat(type)));\n  }\n}\n",
  "import { IMatrix } from \"gl/transform/IMatrix\";\nimport Matrix from \"gl/transform/Matrix\";\nimport { ProjectionMatrix } from \"gl/transform/ProjectionMatrix\";\nimport { TiltMatrix } from \"gl/transform/TiltMatrix\";\nimport { TurnMatrix } from \"gl/transform/TurnMatrix\";\nimport { CameraUpdate } from \"updates/CameraUpdate\";\nimport { CellPos } from \"world/grid/CellPos\";\nimport { ICamera } from \"./ICamera\";\nimport { CameraFloatUpdate } from \"updates/CameraFloatUpdate\";\nimport { IGraphicsEngine } from \"core/graphics/IGraphicsEngine\";\nimport { IMotor } from \"core/motor/IMotor\";\n\nexport enum CameraMatrixType {\n  PROJECTION = 0,\n  POS = 1,\n  TURN = 2,\n  TILT = 3,\n}\n\nexport enum CameraFloatType {\n  CURVATURE = 0,\n}\n\ninterface Props {\n  engine: IGraphicsEngine;\n  motor: IMotor;\n}\n\nexport class Camera implements ICamera {\n  private readonly positionMatrix: Matrix = Matrix.create().translate(0, 0, 0);\n  private readonly camMatrix = Matrix.create();\n  private readonly projectionMatrix = new ProjectionMatrix();\n  readonly tiltMatrix = new TiltMatrix(() => this.updateInformer.informUpdate(CameraMatrixType.TILT));\n  readonly turnMatrix = new TurnMatrix(() => this.updateInformer.informUpdate(CameraMatrixType.TURN));\n  private pespectiveLevel = 1;\n  private curvature = 0;\n  private readonly updateInformer;\n  private readonly updateInformerFloat;\n\n  constructor({ engine, motor }: Props) {\n    this.updateInformer = new CameraUpdate(this.getCameraMatrix.bind(this), engine, motor);\n    this.updateInformerFloat = new CameraFloatUpdate(this.getCameraFloat.bind(this), engine, motor);\n  }\n\n  activate() {\n    this.updatePerspective();\n    this.updateInformer.informUpdate(CameraMatrixType.POS);\n    this.updateInformer.informUpdate(CameraMatrixType.TURN);\n    this.updateInformer.informUpdate(CameraMatrixType.TILT);\n  }\n\n  private readonly cameraMatrices: Record<CameraMatrixType, IMatrix> = {\n    [CameraMatrixType.PROJECTION]: this.projectionMatrix,\n    [CameraMatrixType.POS]: this.camMatrix,\n    [CameraMatrixType.TURN]: this.turnMatrix,\n    [CameraMatrixType.TILT]: this.tiltMatrix,\n  };\n\n  configProjectionMatrix(width: number, height: number) {\n    this.projectionMatrix.configure(width, height);\n    this.updateInformer.informUpdate(CameraMatrixType.PROJECTION);\n  }\n\n  updatePerspective(level?: number) {\n    this.projectionMatrix.setPerspective(level ?? this.pespectiveLevel);\n    this.updateInformer.informUpdate(CameraMatrixType.PROJECTION);\n  }\n\n  updateCurvature(value: number) {\n    this.curvature = value;\n    this.updateInformerFloat.informUpdate(CameraFloatType.CURVATURE);\n  }\n\n  getCameraMatrix(cameraMatrixType: CameraMatrixType): Float32Array {\n    if (cameraMatrixType === CameraMatrixType.POS) {\n      this.camMatrix.invert(this.positionMatrix);\n    }\n    return this.cameraMatrices[cameraMatrixType].getMatrix();\n  }\n\n  getCameraFloat(cameraFloatType: CameraFloatType): number {\n    switch (cameraFloatType) {\n      case CameraFloatType.CURVATURE:\n        return this.curvature;\n    }\n  }\n\n  gotoPos(x: number, y: number, z: number, speed: number = .1) {\n    const curPos = this.getPosition();\n    const dx = x - curPos[0];\n    const dy = y - curPos[1];\n    const dz = z - curPos[2];\n    const dist = Math.sqrt(dx * dx + dy * dy + dz * dz);\n    if (dist) {\n      const sp = Math.min(dist, speed);\n      this.positionMatrix.translate(\n        dx / dist * sp,\n        dy / dist * sp,\n        dz / dist * sp,\n      );\n      this.updateInformer.informUpdate(CameraMatrixType.POS);\n    }\n  }\n\n  moveCam(x: number, y: number, z: number) {\n    this.positionMatrix.moveMatrix(x, y, z, this.turnMatrix);\n    this.updateInformer.informUpdate(CameraMatrixType.POS);\n  }\n\n  //  Turn\n  turn(angle: number) {\n    this.turnMatrix.turn += angle;\n  }\n\n  //  Tilt\n  tilt(angle: number) {\n    this.tiltMatrix.tilt += angle;\n  }\n\n  private static _position: CellPos = [0, 0, 0];\n  getPosition() {\n    const matrix = this.positionMatrix.getMatrix();\n    Camera._position[0] = matrix[12]; // Value in the 4th column, 1st row (indices start from 0)\n    Camera._position[1] = matrix[13]; // Value in the 4th column, 2nd row\n    Camera._position[2] = matrix[14]; // Value in the 4th column, 3rd row\n    return Camera._position;\n  }\n\n  setPosition(x: number, y: number, z: number) {\n    const matrix = this.positionMatrix.getMatrix();\n    matrix[12] = x;\n    matrix[13] = y;\n    matrix[14] = z;\n    this.updateInformer.informUpdate(CameraMatrixType.POS);\n  }\n}\n",
  "// To recognize dom types (see https://bun.sh/docs/typescript#dom-types):\n/// <reference lib=\"dom\" />\n/// <reference lib=\"dom.iterable\" />\n\nimport { GLPrograms } from '../../gl/programs/GLPrograms';\nimport { Disposable } from '../../lifecycle/Disposable';\nimport { VertexArray } from '../../gl/VertexArray';\nimport { GLAttributeBuffers, LocationName } from '../../gl/attributes/GLAttributeBuffers';\nimport { GLUniforms } from '../../gl/uniforms/GLUniforms';\nimport {\n  GL,\n  POSITION_LOC,\n  INDEX_LOC,\n  TRANSFORM_LOC,\n  SLOT_SIZE_LOC,\n  CAM_POS_LOC,\n  CAM_PROJECTION_LOC,\n  INSTANCE_LOC,\n  CAM_TILT_LOC,\n  CAM_TURN_LOC,\n  CAM_CURVATURE_LOC,\n} from '../../gl/attributes/Constants';\nimport { TEXTURE_INDEX_FOR_VIDEO, TextureId, TextureManager } from '../../gl/texture/TextureManager';\nimport { MediaId, ImageManager } from 'gl/texture/ImageManager';\nimport vertexShader from 'generated/src/gl/resources/vertexShader.txt';\nimport fragmentShader from 'generated/src/gl/resources/fragmentShader.txt';\nimport { replaceTilda } from 'gl/utils/replaceTilda';\nimport Matrix from 'gl/transform/Matrix';\nimport { CameraFloatType, CameraMatrixType } from 'gl/camera/Camera';\nimport { mat4 } from 'gl-matrix';\nimport { MediaData } from 'gl/texture/MediaData';\nimport { Media } from 'gl/texture/Media';\nimport { Sprite, SpriteId } from 'world/sprite/Sprite';\nimport { IGraphicsEngine } from './IGraphicsEngine';\n\nconst DEFAULT_ATTRIBUTES: WebGLContextAttributes = {\n  alpha: true,\n  antialias: false,\n  depth: true,\n  desynchronized: true,\n  failIfMajorPerformanceCaveat: undefined,\n  powerPreference: 'default',\n  premultipliedAlpha: true,\n  preserveDrawingBuffer: false,\n  stencil: false,\n};\n\nconst VERTEX_COUNT = 6;\n\nconst LOG_GL = false;\n\nfunction glProxy(gl: GL) {\n  if (!LOG_GL) {\n    return gl;\n  }\n  const proxy = new Proxy<GL>(gl, {\n    get(target, prop) {\n      const t = target as any;\n      const result = t[prop];\n      if (typeof result === 'function') {\n        const f = (...params: any[]) => {\n          const returnValue = result.apply(t, params);\n          console.log(`gl.${String(prop)}(`, params, ') = ', returnValue);\n          return returnValue;\n        };\n        return f;\n      } else {\n        console.log(`gl.${String(prop)} = `, result);\n        return result;\n      }\n    },\n  });\n  return proxy;\n}\n\nexport interface Props {\n  attributes?: WebGLContextAttributes;\n}\n\nexport class GraphicsEngine extends Disposable implements IGraphicsEngine {\n  private gl: GL;\n  private programs: GLPrograms;\n  private attributeBuffers: GLAttributeBuffers;\n  private uniforms: GLUniforms;\n  private canvas: HTMLCanvasElement | OffscreenCanvas;\n\n  private textureManager: TextureManager;\n  private imageManager: ImageManager;\n\n  private textureSlots: Record<MediaId, { buffer: Float32Array }> = {};\n\n  private onResize: Set<(w: number, h: number) => void> = new Set();\n  private pixelListeners: Set<{ x: number; y: number; pixel: number }> = new Set();\n  private spriteCount = 0;\n  private cameraMatrixUniforms: Record<CameraMatrixType | any, WebGLUniformLocation> = {};\n  private cameraFloatUniforms: Record<CameraFloatType | any, WebGLUniformLocation> = {};\n\n  constructor(canvas: HTMLCanvasElement | OffscreenCanvas, {\n    attributes,\n  }: Props = {}) {\n    super();\n    const gl: WebGL2RenderingContext = canvas.getContext('webgl2', { ...DEFAULT_ATTRIBUTES, ...attributes })! as WebGL2RenderingContext;\n    this.gl = glProxy(gl);\n    this.canvas = canvas;\n\n    this.programs = this.own(new GLPrograms(this.gl));\n    this.uniforms = this.own(new GLUniforms(this.gl, this.programs));\n    this.attributeBuffers = this.own(new GLAttributeBuffers(this.gl, this.programs));\n\n    this.textureManager = new TextureManager(this.gl, this.uniforms);\n    this.imageManager = new ImageManager();\n\n    const onResize = this.checkCanvasSize.bind(this);\n    window.addEventListener('resize', onResize);\n    this.addOnDestroy(() => window.removeEventListener('resize', onResize));\n    this.initialize();\n  }\n\n  addResizeListener(listener: (w: number, h: number) => void): () => void {\n    listener(this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n    this.onResize.add(listener);\n    return () => this.removeResizeListener(listener);\n  }\n\n  removeResizeListener(listener: (w: number, h: number) => void): void {\n    this.onResize.delete(listener);\n  }\n\n  clearTextureSlots(): void {\n    for (let i in this.textureSlots) {\n      delete this.textureSlots[i];\n    }\n  }\n\n  checkCanvasSize(): void {\n    if (this.canvas instanceof HTMLCanvasElement) {\n      this.canvas.width = this.canvas.offsetWidth * 2;\n      this.canvas.height = this.canvas.offsetHeight * 2;\n    }\n    this.gl.viewport(0, 0, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n    this.onResize.forEach(callback => callback(this.gl.drawingBufferWidth, this.gl.drawingBufferHeight));\n  }\n\n  private initialize() {\n    const PROGRAM_NAME = 'main';\n    const replacementMap = {\n      AUTHOR: 'Jack le hamster',\n    };\n    this.programs.addProgram(PROGRAM_NAME,\n      replaceTilda(vertexShader, replacementMap),\n      replaceTilda(fragmentShader, replacementMap),\n    );\n\n    this.programs.useProgram(PROGRAM_NAME);\n\n    this.cameraMatrixUniforms[CameraMatrixType.PROJECTION] = this.uniforms.getUniformLocation(CAM_PROJECTION_LOC, PROGRAM_NAME);\n    this.cameraMatrixUniforms[CameraMatrixType.POS] = this.uniforms.getUniformLocation(CAM_POS_LOC, PROGRAM_NAME);\n    this.cameraMatrixUniforms[CameraMatrixType.TURN] = this.uniforms.getUniformLocation(CAM_TURN_LOC, PROGRAM_NAME);\n    this.cameraMatrixUniforms[CameraMatrixType.TILT] = this.uniforms.getUniformLocation(CAM_TILT_LOC, PROGRAM_NAME);\n\n    this.cameraFloatUniforms[CameraFloatType.CURVATURE] = this.uniforms.getUniformLocation(CAM_CURVATURE_LOC, PROGRAM_NAME);\n\n    //  enable depth\n    this.gl.enable(GL.DEPTH_TEST);\n    this.gl.depthFunc(GL.LESS);\n    this.gl.clearDepth(1.0);\n\n    //  enable blend\n    this.gl.enable(GL.BLEND);\n    this.gl.blendFunc(GL.SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA);\n    this.gl.viewport(0, 0, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n\n    // disable face culling\n    this.gl.disable(this.gl.CULL_FACE);\n\n    // clear background color\n    this.gl.clearColor(0.0, 0.0, 0.0, 1.0);\n\n    this.textureManager.initialize();\n    this.checkCanvasSize();\n  }\n\n  activate(): void {\n    this.clearTextureSlots();\n  }\n\n  setMaxSpriteCount(spriteCount: number): void {\n    this.initializeBuffers(spriteCount);\n  }\n\n  private onCleanupBuffers: Set<() => void> = new Set();\n  initializeBuffers(maxSpriteCount: number) {\n    this.onCleanupBuffers.forEach(cleanup => cleanup());\n    this.onCleanupBuffers.clear();\n    if (maxSpriteCount) {\n      const cleanups = [\n        this.initializeIndexBuffer(INDEX_LOC),\n        this.initializePositionBuffer(POSITION_LOC),\n        this.initializeTransformBuffer(TRANSFORM_LOC, maxSpriteCount),\n        this.initializeSlotSizeBuffer(SLOT_SIZE_LOC, maxSpriteCount),\n        this.initializeInstanceBuffer(INSTANCE_LOC, maxSpriteCount),\n        this.initializeFlagBuffer(INSTANCE_LOC, maxSpriteCount),\n      ];\n      cleanups.forEach(cleanup => this.onCleanupBuffers.add(cleanup));\n    }\n  }\n\n  private initializeIndexBuffer(location: LocationName) {\n    /*\n        0  1\n        3  2\n    */\n    const bufferInfo = this.attributeBuffers.createBuffer(location);\n    this.gl.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, bufferInfo.buffer);\n    this.gl.bufferData(GL.ELEMENT_ARRAY_BUFFER,\n      Uint16Array.from([0, 1, 2, 2, 3, 0]),\n      GL.STATIC_DRAW);\n    return () => {\n      this.attributeBuffers.deleteBuffer(location);\n    };\n  }\n\n  private initializePositionBuffer(location: LocationName) {\n    const bufferInfo = this.attributeBuffers.createBuffer(location);\n    this.gl.bindBuffer(GL.ARRAY_BUFFER, bufferInfo.buffer);\n    this.gl.vertexAttribPointer(\n      bufferInfo.location,\n      2,\n      GL.FLOAT,\n      false,\n      0,\n      0,\n    );\n    this.gl.enableVertexAttribArray(bufferInfo.location);\n    this.gl.bufferData(GL.ARRAY_BUFFER,\n      Float32Array.from([-1, -1, 1, -1, 1, 1, -1, 1]),\n      GL.STATIC_DRAW);\n    return () => {\n      this.gl.disableVertexAttribArray(bufferInfo.location);\n      this.attributeBuffers.deleteBuffer(location);\n    };\n  }\n\n  private initializeTransformBuffer(location: LocationName, spriteCount: number) {\n    const bufferInfo = this.attributeBuffers.createBuffer(location);\n    this.gl.bindBuffer(GL.ARRAY_BUFFER, bufferInfo.buffer);\n    const elemCount = 4;\n    const bytesPerRow = elemCount * Float32Array.BYTES_PER_ELEMENT;\n    const bytesPerInstance = 4 * bytesPerRow;\n    for (let i = 0; i < 4; i++) {\n      const loc = bufferInfo.location + i;\n      this.gl.vertexAttribPointer(\n        loc,\n        elemCount,\n        GL.FLOAT,\n        false,\n        bytesPerInstance,\n        i * bytesPerRow,\n      );\n      this.gl.enableVertexAttribArray(loc);\n      this.gl.vertexAttribDivisor(loc, 1);\n    }\n    this.gl.bufferData(GL.ARRAY_BUFFER, spriteCount * bytesPerInstance, GL.DYNAMIC_DRAW);\n    return () => {\n      this.gl.disableVertexAttribArray(bufferInfo.location);\n      this.attributeBuffers.deleteBuffer(location);\n    };\n  }\n\n  private initializeSlotSizeBuffer(location: LocationName, spriteCount: number) {\n    const bufferInfo = this.attributeBuffers.createBuffer(location);\n    this.gl.bindBuffer(GL.ARRAY_BUFFER, bufferInfo.buffer);\n    const loc = bufferInfo.location;\n    const elemCount = 2;\n    const bytesPerInstance = elemCount * Float32Array.BYTES_PER_ELEMENT;\n    this.gl.vertexAttribPointer(\n      loc,\n      elemCount,\n      GL.FLOAT,\n      false,\n      bytesPerInstance,\n      0,\n    );\n    this.gl.enableVertexAttribArray(loc);\n    this.gl.vertexAttribDivisor(loc, 1);\n    this.gl.bufferData(GL.ARRAY_BUFFER, spriteCount * bytesPerInstance, GL.DYNAMIC_DRAW);\n    return () => {\n      this.gl.disableVertexAttribArray(bufferInfo.location);\n      this.attributeBuffers.deleteBuffer(location);\n    };\n  }\n\n  private initializeInstanceBuffer(location: LocationName, instanceCount: number) {\n    const bufferInfo = this.attributeBuffers.createBuffer(location);\n    this.gl.bindBuffer(GL.ARRAY_BUFFER, bufferInfo.buffer);\n    const loc = bufferInfo.location;\n    const elemCount = 1;\n    this.gl.vertexAttribPointer(\n      loc,\n      elemCount,\n      GL.FLOAT,\n      false,\n      elemCount * Float32Array.BYTES_PER_ELEMENT,\n      0,\n    );\n    this.gl.enableVertexAttribArray(loc);\n    this.gl.vertexAttribDivisor(loc, 1);\n    this.gl.bufferData(GL.ARRAY_BUFFER,\n      Float32Array.from(new Array(instanceCount).fill(null).map((_, index) => index)),\n      GL.STATIC_DRAW);\n\n    return () => {\n      this.gl.disableVertexAttribArray(bufferInfo.location);\n      this.attributeBuffers.deleteBuffer(location);\n    };\n  }\n\n  private initializeFlagBuffer(location: LocationName, instanceCount: number) {\n    const bufferInfo = this.attributeBuffers.createBuffer(location);\n    this.gl.bindBuffer(GL.ARRAY_BUFFER, bufferInfo.buffer);\n    const loc = bufferInfo.location;\n    const elemCount = 1;\n    const bytesPerInstance = elemCount * Float32Array.BYTES_PER_ELEMENT;\n    this.gl.vertexAttribPointer(\n      loc,\n      elemCount,\n      GL.FLOAT,\n      false,\n      bytesPerInstance,\n      0,\n    );\n    this.gl.enableVertexAttribArray(loc);\n    this.gl.vertexAttribDivisor(loc, 1);\n    this.gl.bufferData(GL.ARRAY_BUFFER,\n      instanceCount * bytesPerInstance,\n      GL.STATIC_DRAW);\n\n    return () => {\n      this.gl.disableVertexAttribArray(bufferInfo.location);\n      this.attributeBuffers.deleteBuffer(location);\n    };\n  }\n\n  async updateTextures(imageIds: MediaId[], getMedia: (imageId: MediaId) => Media | undefined): Promise<MediaData[]> {\n    const mediaInfos = (await Promise.all(imageIds.map(async imageId => {\n      const media = getMedia(imageId);\n      if (!media) {\n        console.warn(`No media for imageId ${imageId}`);\n        return;\n      }\n      const mediaData = await this.imageManager.renderMedia(imageId, media);\n      return { mediaData, imageId };\n    }))).filter((data): data is { mediaData: MediaData, imageId: MediaId } => !!data);\n    const textureIndices = await Promise.all(mediaInfos.map(async ({ mediaData, imageId }) => {\n      const { slot, refreshCallback } = this.textureManager.allocateSlotForImage(mediaData);\n      const slotW = Math.log2(slot.size[0]), slotH = Math.log2(slot.size[1]);\n      const wh = slotW * 16 + slotH;\n      this.textureSlots[imageId] = {\n        buffer: Float32Array.from([wh, slot.slotNumber]),\n      };\n      mediaData.refreshCallback = refreshCallback;\n      return slot.textureIndex;\n    }));\n    const textureIndicesSet = new Set(textureIndices);\n    textureIndicesSet.forEach(textureIndex => {\n      if (textureIndex === TEXTURE_INDEX_FOR_VIDEO) {\n        this.textureManager.setupTextureForVideo(`TEXTURE${textureIndex}` as TextureId);\n      } else {\n        this.textureManager.generateMipMap(`TEXTURE${textureIndex}` as TextureId);\n      }\n    });\n    return mediaInfos.map(({ mediaData }) => mediaData);;\n  }\n\n  private drawElementsInstanced(vertexCount: GLsizei, instances: GLsizei) {\n    this.gl.drawElementsInstanced(\n      GL.TRIANGLES,\n      vertexCount,\n      GL.UNSIGNED_SHORT,\n      0,\n      instances,\n    );\n  }\n\n  private static readonly spriteMatrix = Matrix.create();\n  updateSpriteTransforms(spriteIds: Set<SpriteId>, getSprite: (spriteId: SpriteId) => Sprite | undefined) {\n    const bufferInfo = this.attributeBuffers.getAttributeBuffer(TRANSFORM_LOC);\n    this.gl.bindBuffer(GL.ARRAY_BUFFER, bufferInfo.buffer);\n    let topVisibleSprite = this.spriteCount - 1;\n    spriteIds.forEach(spriteId => {\n      const matrix = GraphicsEngine.spriteMatrix.identity().getMatrix();\n      const sprite = getSprite(spriteId);\n      sprite?.transforms.forEach(transform => mat4.multiply(matrix, matrix, transform));\n      this.gl.bufferSubData(GL.ARRAY_BUFFER, 4 * 4 * Float32Array.BYTES_PER_ELEMENT * spriteId, matrix);\n      if (sprite) {\n        topVisibleSprite = Math.max(topVisibleSprite, spriteId);\n      }\n    });\n    spriteIds.clear();\n\n    while (topVisibleSprite >= 0 && !getSprite(topVisibleSprite)) {\n      topVisibleSprite--;\n    }\n    this.spriteCount = Math.max(this.spriteCount, topVisibleSprite + 1);\n  }\n\n  updateSpriteAnims(spriteIds: Set<SpriteId>, getSprite: (spriteId: SpriteId) => Sprite | undefined) {\n    const bufferInfo = this.attributeBuffers.getAttributeBuffer(SLOT_SIZE_LOC);\n    this.gl.bindBuffer(GL.ARRAY_BUFFER, bufferInfo.buffer);\n    spriteIds.forEach(spriteId => {\n      const sprite = getSprite(spriteId);\n      const slotObj = this.textureSlots[sprite?.imageId ?? -1];\n      if (slotObj) {\n        const { buffer } = slotObj;\n        this.gl.bufferSubData(GL.ARRAY_BUFFER, 2 * Float32Array.BYTES_PER_ELEMENT * spriteId, buffer);\n        spriteIds.delete(spriteId);\n      }\n    });\n  }\n\n  updateCameraMatrix(type: CameraMatrixType, matrix: Float32Array) {\n    this.gl.uniformMatrix4fv(this.cameraMatrixUniforms[type], false, matrix);\n  }\n\n  updateCameraFloat(type: CameraFloatType, value: number) {\n    this.gl.uniform1f(this.cameraFloatUniforms[type], value);\n  }\n\n  bindVertexArray() {\n    return this.own(new VertexArray(this.gl));\n  }\n\n  addPixelListener(listener: { x: number, y: number, pixel: number }) {\n    this.pixelListeners.add(listener);\n    return () => {\n      this.removePixelListener(listener);\n    };\n  }\n\n  removePixelListener(listener: { x: number, y: number, pixel: number }) {\n    this.pixelListeners.delete(listener);\n  }\n\n  private _pixel: Uint8Array = new Uint8Array(4);\n  private getPixel(x: number, y: number): number {\n    this.gl.readPixels(x, y, 1, 1, this.gl.RGBA, this.gl.UNSIGNED_BYTE, this._pixel);\n    const [r, g, b, _a] = this._pixel;\n    return r * (256 * 256) + g * (256) + b;\n  }\n\n  refresh(): void {\n    // clear background\n    this.gl.clear(GL.COLOR_BUFFER_BIT);\n\n    this.drawElementsInstanced(VERTEX_COUNT, this.spriteCount);\n    for (const listener of this.pixelListeners) {\n      listener.pixel = this.getPixel(listener.x, listener.y);\n    }\n  }\n}\n",
  "import { Time } from \"core/Time\";\nimport { Refresh, UpdatePayload } from \"../../updates/Refresh\";\nimport { IMotor } from \"./IMotor\";\nimport { Duration } from \"core/Time\";\n\n/**\n * Continously runs a loop which feeds a world into the GL Engine.\n */\nconst MAX_DELTA_TIME = 1000 / 20;\n\nexport enum Priority {\n  DEFAULT = 0,\n  LAST = 1,\n};\n\nexport interface Schedule {\n  triggerTime: Time;\n  period: Duration;\n  expirationTime: Time;\n  priority: Priority;\n}\n\nexport class Motor implements IMotor {\n  private readonly updateSchedule: Map<Refresh, Schedule> = new Map();\n  time: Time = 0;\n\n  loop(update: Refresh, frameRate?: number, priority?: number, expirationTime?: Time) {\n    return this.registerUpdate(update, { period: frameRate ? 1000 / frameRate : 1, expirationTime, priority });\n  }\n\n  registerUpdate(update: Refresh, schedule: Partial<Schedule> = {}): () => void {\n    schedule.triggerTime = schedule.triggerTime ?? this.time;\n    schedule.expirationTime = schedule.expirationTime ?? Infinity;\n    schedule.period = schedule.period;\n    schedule.priority = schedule.priority ?? Priority.DEFAULT;\n    this.updateSchedule.set(update, schedule as Schedule);\n    return () => this.deregisterUpdate(update);\n  }\n\n  deregisterUpdate(update: Refresh) {\n    this.updateSchedule.delete(update);\n  }\n\n  activate() {\n    let handle = 0;\n    const updatePayload: UpdatePayload = {\n      time: 0,\n      deltaTime: 0,\n    };\n    const normalUpdates: Refresh[] = [];\n    const lastUpdates: Refresh[] = [];\n    const updateList = [normalUpdates, lastUpdates];\n\n    const loop: FrameRequestCallback = (time: Time) => {\n      updatePayload.deltaTime = Math.min(time - updatePayload.time, MAX_DELTA_TIME);\n      updatePayload.time = time;\n      handle = requestAnimationFrame(loop);\n      this.time = time;\n\n      normalUpdates.length = 0;\n      lastUpdates.length = 0;\n      this.updateSchedule.forEach((schedule, update) => {\n        if (time < schedule.triggerTime) {\n          return;\n        }\n        updateList[schedule.priority].push(update);\n        if (schedule.period && time < schedule.expirationTime) {\n          schedule.triggerTime = Math.max(schedule.triggerTime + schedule.period, time);\n        } else {\n          this.updateSchedule.delete(update);\n        }\n      });\n      updateList.forEach((updates) => updates.forEach((update) => update.refresh(updatePayload)));\n    };\n    requestAnimationFrame(loop);\n    return () => cancelAnimationFrame(handle);\n  }\n}\n",
  "import { ITimeProvider, Time } from \"core/Time\";\nimport { IKeyboard, KeyListener } from \"./IKeyboard\";\n\nconst QUICK_TAP_TIME = 200;\n\nexport class Keyboard implements IKeyboard {\n  readonly keys: Record<string, Time> = {};\n  readonly keysUp: Record<string, Time> = {};\n\n  private readonly keyListener = new Set<KeyListener>();\n  private isActive: boolean = false;\n\n  constructor(private timeProvider: ITimeProvider) {\n    this.keyDown = this.keyDown.bind(this);\n    this.keyUp = this.keyUp.bind(this);\n  }\n\n  private keyDown(e: KeyboardEvent): void {\n    if (!this.keys[e.code]) {\n      this.keys[e.code] = this.timeProvider.time;\n      this.keyListener.forEach(listener => listener.onKeyDown?.(e.code, this.timeProvider.time));\n    }\n    e.preventDefault();\n  }\n\n  private keyUp(e: KeyboardEvent) {\n    const quickTap = this.timeProvider.time - this.keys[e.code] < QUICK_TAP_TIME;\n    this.keysUp[e.code] = this.timeProvider.time;\n    this.keys[e.code] = 0;\n    this.keyListener.forEach(listener => listener.onKeyUp?.(e.code, this.timeProvider.time))\n    if (quickTap) {\n      this.keyListener.forEach(listener => listener.onQuickTap?.(e.code, this.timeProvider.time))\n    }\n  }\n\n  activate(): () => void {\n    this.setActive(true);\n    return () => this.setActive(false);\n  }\n\n  private setActive(value: boolean) {\n    if (this.isActive !== value) {\n      this.isActive = value;\n      document.removeEventListener('keydown', this.keyDown);\n      document.removeEventListener('keyup', this.keyUp);\n      if (this.isActive) {\n        document.addEventListener('keydown', this.keyDown);\n        document.addEventListener('keyup', this.keyUp);\n      }\n    }\n  }\n\n  addListener(listener: KeyListener): () => void {\n    this.keyListener.add(listener);\n    return () => {\n      this.removeListener(listener);\n    };\n  }\n\n  removeListener(listener: KeyListener): void {\n    this.keyListener.delete(listener);\n  }\n}\n",
  "import { IGraphicsEngine } from \"core/graphics/IGraphicsEngine\";\nimport { ICamera } from \"gl/camera/ICamera\";\nimport { Auxiliary } from \"world/aux/Auxiliary\";\n\ninterface Props {\n  engine: IGraphicsEngine;\n  camera: ICamera;\n}\n\nexport class ResizeAux implements Auxiliary {\n  private engine: IGraphicsEngine;\n  private camera: ICamera;\n  constructor({ engine, camera }: Props) {\n    this.engine = engine;\n    this.camera = camera;\n  }\n\n  activate(): void | (() => void) {\n    return this.handleResize();\n  }\n\n  private handleResize() {\n    const { engine } = this;\n    const onResize = (width: number, height: number) => {\n      this.camera.configProjectionMatrix(width, height);\n    };\n    return engine.addResizeListener(onResize);\n  }\n}\n",
  "import IWorld from \"world/IWorld\";\nimport { GraphicsEngine } from \"./graphics/GraphicsEngine\";\nimport { Motor } from \"./motor/Motor\";\nimport { Camera } from \"gl/camera/Camera\";\nimport { Keyboard } from \"controls/Keyboard\";\nimport { AuxiliaryHolder } from \"world/aux/AuxiliaryHolder\";\nimport { IKeyboard } from \"controls/IKeyboard\";\nimport { ResizeAux } from \"./aux/ResizeAux\";\nimport { ICamera } from \"gl/camera/ICamera\";\nimport { IGraphicsEngine } from \"./graphics/IGraphicsEngine\";\nimport { IMotor } from \"./motor/IMotor\";\n\nexport interface Props {\n  motor?: IMotor;\n  canvas?: HTMLCanvasElement | OffscreenCanvas;\n  engine?: IGraphicsEngine;\n  keyboard?: IKeyboard;\n  size?: [number, number];\n  camera?: ICamera;\n}\n\nexport class Core extends AuxiliaryHolder {\n  readonly motor: IMotor;\n  readonly engine: IGraphicsEngine;\n  readonly keyboard: IKeyboard;\n  readonly camera: ICamera;\n\n  constructor({ motor, canvas, engine, keyboard, size, camera }: Props) {\n    super();\n    this.motor = motor ?? new Motor();\n    this.engine = engine ?? new GraphicsEngine(canvas ?? new OffscreenCanvas(size![0], size![1]));\n    this.keyboard = keyboard ?? new Keyboard(this.motor);\n    this.camera = camera ?? new Camera(this);\n  }\n\n  start(world: IWorld) {\n    const { motor, engine, keyboard, camera } = this;\n    const deregisterLoop = motor.loop(this);\n\n    //  Initialize engine buffer\n    engine.setMaxSpriteCount(world.sprites.length);\n\n    this.addAuxiliary(\n      world,\n      motor,\n      engine,\n      keyboard,\n      camera,\n      new ResizeAux(this),\n    );\n\n    const clearActivate = this.activate();\n\n    return () => {\n      deregisterLoop();\n      clearActivate();\n      this.deactivate();\n      this.removeAllAuxiliaries();\n    };\n  }\n}\n",
  "export interface List<T> {\n  readonly length: number;\n  at(index: number): T | undefined;\n}\n\nexport function forEach<T>(list: List<T>, callback: (value: T, index: number) => void): void {\n  for (let i = 0; i < list.length; i++) {\n    const elem = list.at(i);\n    if (elem) {\n      callback(elem, i);\n    }\n  }\n}\n\nexport function map<T, R>(list: List<T>, callback: (value: T, index: number) => R): (R | undefined)[] {\n  const r: (R | undefined)[] = []\n  for (let i = 0; i < list.length; i++) {\n    const elem = list.at(i);\n    r.push(elem ? callback(elem, i) : undefined);\n  }\n  return r;\n}\n",
  "import { List, forEach, map } from \"world/sprite/List\";\nimport { Auxiliary } from \"./Auxiliary\";\nimport { UpdatePayload } from \"updates/Refresh\";\n\nexport class Auxiliaries implements List<Auxiliary>, Auxiliary {\n  private active: boolean = false;\n  constructor(private auxiliaries: List<Auxiliary>) {\n  }\n\n  static from(...aux: Auxiliary[]) {\n    return new Auxiliaries(aux);\n  }\n\n  get length(): number {\n    return this.auxiliaries.length;\n  }\n\n  at(index: number): Auxiliary | undefined {\n    return this.auxiliaries.at(index);\n  }\n\n  refresh?(updatePayload: UpdatePayload): void {\n    forEach(this.auxiliaries, aux => aux.refresh?.(updatePayload));\n  }\n\n  activate?(): void | (() => void) {\n    if (!this.active) {\n      this.active = true;\n      const onDeactivates = map(this.auxiliaries, aux => aux.activate?.());\n      return () => onDeactivates.forEach(d => d?.());\n    }\n  }\n\n  deactivate?(): void {\n    if (this.active) {\n      this.active = false;\n      forEach(this.auxiliaries, aux => aux.deactivate?.());\n    }\n  }\n}\n",
  "import { UpdatePayload } from \"updates/Refresh\";\nimport { Auxiliary } from \"./Auxiliary\";\nimport { IKeyboard } from \"controls/IKeyboard\";\nimport { ICamera } from \"gl/camera/ICamera\";\n\ninterface Props {\n  keyboard: IKeyboard;\n  camera: ICamera;\n}\n\nexport class CamMoveAuxiliary implements Auxiliary {\n  private readonly keyboard: IKeyboard;\n  private readonly camera: ICamera;\n\n  constructor(props: Props) {\n    this.keyboard = props.keyboard;\n    this.camera = props.camera;\n  }\n\n  refresh(update: UpdatePayload): void {\n    const { keys } = this.keyboard;\n    const { deltaTime } = update;\n    const speed = deltaTime / 80;\n    const turnspeed = deltaTime / 400;\n    if (keys.KeyW || keys.ArrowUp && !keys.ShiftRight) {\n      this.camera.moveCam(0, 0, -speed);\n    }\n    if (keys.KeyS || keys.ArrowDown && !keys.ShiftRight) {\n      this.camera.moveCam(0, 0, speed);\n    }\n    if (keys.KeyA || (keys.ArrowLeft && !keys.ShiftRight)) {\n      this.camera.moveCam(-speed, 0, 0);\n    }\n    if (keys.KeyD || (keys.ArrowRight && !keys.ShiftRight)) {\n      this.camera.moveCam(speed, 0, 0);\n    }\n    if (keys.KeyQ || (keys.ArrowLeft && keys.ShiftRight)) {\n      this.camera.turn(-turnspeed);\n    }\n    if (keys.KeyE || (keys.ArrowRight && keys.ShiftRight)) {\n      this.camera.turn(turnspeed);\n    }\n    if (keys.ArrowUp && keys.ShiftRight) {\n      this.camera.tilt(-turnspeed);\n    }\n    if (keys.ArrowDown && keys.ShiftRight) {\n      this.camera.tilt(turnspeed);\n    }\n  }\n}\n",
  "import { UpdatePayload } from \"updates/Refresh\";\nimport { Auxiliary } from \"./Auxiliary\";\nimport { CellPos } from \"world/grid/CellPos\";\nimport { angle, angleStep } from \"gl/utils/angleUtils\";\nimport { IKeyboard } from \"controls/IKeyboard\";\nimport { ICamera } from \"gl/camera/ICamera\";\n\ninterface Props {\n  keyboard: IKeyboard;\n  camera: ICamera;\n}\n\ninterface Config {\n  step: number;\n  turnStep: number;\n  tiltStep: number;\n}\n\nexport class CamStepAuxiliary implements Auxiliary {\n  private readonly keyboard: IKeyboard;\n  private readonly camera: ICamera;\n  private readonly goal: {\n    turn: number;\n    //    tilt: number;\n    pos: CellPos;\n  };\n  private stepCount: number = 0;\n  private turnCount: number = 0;\n  private tiltCount: number = 0;\n  private config: Config;\n\n  constructor({ keyboard, camera }: Props, config: Partial<Config> = {}) {\n    this.keyboard = keyboard;\n    this.camera = camera;\n    const camPos = this.camera.getPosition();\n    this.goal = {\n      turn: this.camera.turnMatrix.turn,\n      //      tilt: this.camera.tiltMatrix.tilt,\n      pos: [...camPos],\n    };\n    this.config = {\n      step: config.step ?? 2,\n      turnStep: config.turnStep ?? Math.PI / 2,\n      tiltStep: config.tiltStep ?? Math.PI / 2,\n    };\n  }\n\n  private readonly prePos: CellPos = [0, 0, 0];\n  refresh(update: UpdatePayload): void {\n    const { keys } = this.keyboard;\n    const { deltaTime } = update;\n\n    const pos = this.camera.getPosition();\n    const { step, turnStep, tiltStep } = this.config;\n    this.prePos[0] = Math.round(pos[0] / step) * step;\n    this.prePos[1] = Math.round(pos[1] / step) * step;\n    this.prePos[2] = Math.round(pos[2] / step) * step;\n\n    let dx = 0, dz = 0;\n    if (keys.KeyW || keys.ArrowUp && !keys.ShiftRight) {\n      dz--;\n    }\n    if (keys.KeyS || keys.ArrowDown && !keys.ShiftRight) {\n      dz++;\n    }\n    if (keys.KeyA || (keys.ArrowLeft && !keys.ShiftRight)) {\n      dx--;\n    }\n    if (keys.KeyD || (keys.ArrowRight && !keys.ShiftRight)) {\n      dx++;\n    }\n    if (dx || dz || this.stepCount > 0) {\n      const relativeDx = dx * Math.cos(this.goal.turn) - dz * Math.sin(this.goal.turn);\n      const relativeDz = dx * Math.sin(this.goal.turn) + dz * Math.cos(this.goal.turn);\n\n      const gx = Math.round(pos[0] / step + relativeDx) * step;\n      const gz = Math.round(pos[2] / step + relativeDz) * step;\n      this.goal.pos[0] = gx;\n      this.goal.pos[2] = gz;\n    }\n\n    if (!dx && !dz) {\n      this.stepCount = 0;\n    }\n    const speed = (dx || dz) ? deltaTime / 150 : deltaTime / 100;\n\n    this.camera.gotoPos(this.goal.pos[0], pos[1], this.goal.pos[2], speed);\n    const newPos = this.camera.getPosition();\n    if (Math.round(newPos[0] / step) * step !== this.prePos[0]\n      || Math.round(newPos[1] / step) * step !== this.prePos[1]\n      || Math.round(newPos[2] / step) * step !== this.prePos[2]) {\n      this.stepCount++;\n    }\n\n    let dTurn = 0;\n    if (keys.KeyQ || (keys.ArrowLeft && keys.ShiftRight)) {\n      dTurn--;\n    }\n    if (keys.KeyE || (keys.ArrowRight && keys.ShiftRight)) {\n      dTurn++;\n    }\n\n    const turn = this.camera.turnMatrix.turn;\n    const preTurn = angleStep(turn, turnStep);\n    if (dTurn || this.turnCount > 0) {\n      this.goal.turn = angleStep(turn + turnStep * dTurn, turnStep);\n    }\n    if (!dTurn) {\n      this.turnCount = 0;\n    }\n    const turnSpeed = dTurn ? deltaTime / 200 : deltaTime / 100;\n    let deltaTurn = angle(this.goal.turn - turn);\n    if (deltaTurn) {\n      const distTurn = Math.abs(deltaTurn);\n      this.camera.turnMatrix.turn = distTurn < .01 ? this.goal.turn : turn + Math.sign(deltaTurn) * Math.min(turnSpeed, distTurn);\n      const newTurn = angleStep(this.camera.turnMatrix.turn, turnStep);\n      if (newTurn !== preTurn) {\n        this.turnCount++;\n      }\n    }\n\n    let dTilt = 0;\n    if (keys.ArrowUp && keys.ShiftRight) {\n      dTilt--;\n    }\n    if (keys.ArrowDown && keys.ShiftRight) {\n      dTilt++;\n    }\n\n    const tilt = this.camera.tiltMatrix.tilt;\n    const preTilt = angleStep(tilt, tiltStep);\n    if (dTilt || this.tiltCount > 0) {\n      this.camera.tiltMatrix.progressiveTilt.setGoal(\n        angleStep(tilt + tiltStep * dTilt, tiltStep),\n        dTilt ? 1 / 400 : 1 / 200,\n        this,\n      );\n    }\n    if (!dTilt) {\n      this.tiltCount = 0;\n    }\n    if (this.camera.tiltMatrix.progressiveTilt.update(deltaTime)) {\n      const newTilt = angleStep(this.camera.tiltMatrix.tilt, tiltStep);\n      if (newTilt !== preTilt) {\n        this.tiltCount++;\n      }\n    }\n  }\n}\n",
  "import { UpdatePayload } from \"updates/Refresh\";\nimport { Auxiliary } from \"./Auxiliary\";\nimport { IKeyboard } from \"controls/IKeyboard\";\nimport { ICamera } from \"gl/camera/ICamera\";\n\ninterface Props {\n  keyboard: IKeyboard;\n  camera: ICamera;\n}\n\ninterface Config {\n  key: string;\n}\n\nexport class CamTiltResetAuxiliary implements Auxiliary {\n  private readonly keyboard: IKeyboard;\n  private readonly camera: ICamera;\n  private key: string;\n  private resetting: boolean = false;\n\n  constructor(props: Props, config: Config) {\n    this.keyboard = props.keyboard;\n    this.camera = props.camera;\n    this.key = config.key;\n  }\n\n  activate(): void | (() => void) {\n    const removeListener = this.keyboard.addListener({\n      onQuickTap: (keyCode) => {\n        if (keyCode === this.key) {\n          this.resetting = true;\n          this.camera.tiltMatrix.progressiveTilt.setGoal(\n            0, 1 / 300, this\n          );\n        }\n      },\n    });\n    return () => removeListener();\n  }\n\n  refresh(update: UpdatePayload): void {\n    if (this.resetting) {\n      const { deltaTime } = update;\n      if (!this.camera.tiltMatrix.progressiveTilt.update(deltaTime)) {\n        this.resetting = false;\n      }\n    }\n  }\n}\n",
  "import { UpdatePayload } from \"updates/Refresh\";\nimport { Auxiliary } from \"./Auxiliary\";\nimport { IKeyboard } from \"controls/IKeyboard\";\nimport { ICamera } from \"gl/camera/ICamera\";\n\ninterface Config {\n  key: string;\n  gravity: number;\n  jump: number;\n  plane: number;\n}\n\ninterface Props {\n  keyboard: IKeyboard;\n  camera: ICamera;\n}\n\nexport class JumpAuxiliary implements Auxiliary {\n  private readonly keyboard: IKeyboard;\n  private readonly camera: ICamera;\n  private key: string;\n  private gravity: number;\n  private dy: number;\n  private jumpStrength = 0;\n  private plane = 1;\n\n  constructor({ keyboard, camera }: Props, config: Partial<Config> = {}) {\n    this.keyboard = keyboard;\n    this.camera = camera;\n    this.key = config.key ?? \"Space\";\n    this.gravity = config.gravity ?? -1;\n    this.jumpStrength = config.jump ?? 2;\n    this.plane = config.plane ?? 10;\n    this.dy = 0;\n  }\n\n  refresh(update: UpdatePayload): void {\n    const { deltaTime } = update;\n\n    this.jump(deltaTime, this.keyboard);\n  }\n\n  jump(deltaTime: number, keyboard: IKeyboard): void {\n    const speed = deltaTime / 80;\n    const acceleration = deltaTime / 80;\n    const { keys } = keyboard;\n    const [_x, y, _z] = this.camera.getPosition();\n    if (y === 0) {\n      if (keys[this.key]) {\n        this.dy = this.jumpStrength;\n        this.camera.moveCam(0, speed * this.dy, 0);\n      }\n    } else {\n      this.camera.moveCam(0, speed * this.dy, 0);\n      const [x, y, z] = this.camera.getPosition();\n      if (y > 0) {\n        const mul = this.dy < 0 ? 1 / this.plane : 1;\n        this.dy += this.gravity * acceleration * mul;\n      } else {\n        this.camera.setPosition(x, 0, z);\n        this.dy = 0;\n      }\n    }\n  }\n}\n",
  "import { UpdatePayload } from \"updates/Refresh\";\nimport { Auxiliary } from \"./Auxiliary\";\nimport { IKeyboard } from \"controls/IKeyboard\";\nimport { ICamera } from \"gl/camera/ICamera\";\n\ninterface Props {\n  keyboard: IKeyboard;\n  camera: ICamera;\n}\n\ninterface Config {\n  key: string;\n}\n\nexport class RiseAuxiliary implements Auxiliary {\n  private readonly keyboard: IKeyboard;\n  private readonly camera: ICamera;\n  private key: string;\n  private dropping: boolean = false;\n\n  constructor({ keyboard, camera }: Props, config: Config = { key: \"Space\" }) {\n    this.keyboard = keyboard;\n    this.camera = camera;\n    this.key = config.key;\n  }\n\n  activate(): void | (() => void) {\n    const removeListener = this.keyboard.addListener({\n      onQuickTap: (keyCode) => {\n        if (keyCode === this.key) {\n          this.dropping = true;\n        }\n      },\n    });\n    return () => removeListener();\n  }\n\n  refresh(update: UpdatePayload): void {\n    const { deltaTime } = update;\n\n    this.riseAndDrop(deltaTime, this.keyboard);\n  }\n\n  riseAndDrop(deltaTime: number, keyboard: IKeyboard): void {\n    const speed = deltaTime / 80;\n    const { keys } = keyboard;\n    if (keys[this.key]) {\n      this.camera.moveCam(0, speed, 0);\n    } else if (this.dropping) {\n      this.camera.moveCam(0, -speed, 0);\n      const [x, y, z] = this.camera.getPosition();\n      if (y < 0) {\n        this.camera.setPosition(x, 0, z);\n        this.dropping = false;\n      }\n    }\n  }\n}\n",
  "import { IKeyboard } from \"controls/IKeyboard\";\nimport { Auxiliary } from \"./Auxiliary\";\nimport { UpdatePayload } from \"updates/Refresh\";\nimport { List, map } from \"world/sprite/List\";\n\ntype KeyMap = { key: string; aux: Auxiliary };\n\ninterface Config {\n  auxiliariesMapping: List<KeyMap>;\n}\n\ninterface Props {\n  keyboard: IKeyboard;\n}\n\nexport class ToggleAuxiliary implements Auxiliary {\n  private keyboard: IKeyboard;\n  private active: boolean = false;\n  private toggleIndex: number = 0;\n  private pendingDeactivate?: (() => void) | void;\n  private keys: (string | undefined)[];\n  private auxiliaries: List<Auxiliary>;\n\n  constructor({ keyboard }: Props, config: Config) {\n    this.keyboard = keyboard;\n    this.keys = map(config.auxiliariesMapping, (({ key }) => key));\n    this.keyboard.addListener({\n      onKeyDown: (keyCode: string) => {\n        if (this.keys.indexOf(keyCode) >= 0) {\n          const wasActive = this.active;\n          this.deactivate();\n          this.toggle(keyCode);\n          if (wasActive) {\n            this.activate();\n          }\n        }\n      },\n    });\n    this.auxiliaries = map(config.auxiliariesMapping, (({ aux }) => aux));\n  }\n\n  private get auxiliary(): Auxiliary | undefined {\n    return this.auxiliaries.at(this.toggleIndex);\n  }\n\n  toggle(key: string) {\n    if (this.keys[this.toggleIndex] !== key) {\n      this.toggleIndex = this.keys.indexOf(key);\n    } else {\n      const nextIndex = this.keys.length ? (this.toggleIndex + 1) % this.keys.length : 0;\n      if (this.keys[nextIndex] === key) {\n        this.toggleIndex = nextIndex;\n      }\n    }\n  }\n\n  refresh(updatePayload: UpdatePayload): void {\n    this.auxiliary?.refresh?.(updatePayload);\n  }\n\n  activate(): (() => void) | void {\n    if (!this.active) {\n      this.active = true;\n      this.pendingDeactivate = this.auxiliary?.activate?.();\n    }\n  }\n\n  deactivate(): void {\n    if (this.active) {\n      this.active = false;\n      this.pendingDeactivate?.();\n      this.auxiliary?.deactivate?.();\n    }\n  }\n}\n",
  "import { Core } from \"core/Core\";\nimport Matrix from \"gl/transform/Matrix\";\nimport { World } from \"index\";\nimport { Auxiliaries } from \"world/aux/Auxiliaries\";\nimport { CamMoveAuxiliary } from \"world/aux/CamMoveAuxiliary\";\nimport { CamStepAuxiliary } from \"world/aux/CamStepAuxiliary\";\nimport { CamTiltResetAuxiliary } from \"world/aux/CamTiltResetAuxiliary\";\nimport { JumpAuxiliary } from \"world/aux/JumpAuxiliary\";\nimport { RiseAuxiliary } from \"world/aux/RiseAuxiliary\";\nimport { ToggleAuxiliary } from \"world/aux/ToggleAuxiliary\";\n\nconst DOBUKI = 0, LOGO = 1, GROUND = 2, VIDEO = 3, GRID = 4, WIREFRAME = 5, GRASS = 6;\nconst LOGO_SIZE = 512;\n\nexport class DemoWorld extends World {\n  readonly hudSpriteId = 0;\n\n  constructor(private core: Core) {\n    super(core);\n\n    this.addMedia(\n      {\n        id: DOBUKI,\n        type: \"image\",\n        src: 'dobuki.png',\n      },\n      {\n        id: LOGO,\n        type: \"draw\",\n        draw: ctx => {\n          const { canvas } = ctx;\n          canvas.width = LOGO_SIZE;\n          canvas.height = LOGO_SIZE;\n          const centerX = canvas.width / 2, centerY = canvas.height / 2;\n          const halfSize = canvas.width / 2;\n          ctx.imageSmoothingEnabled = true;\n          ctx.fillStyle = '#ddd';\n          ctx.lineWidth = canvas.width / 50;\n          ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n          ctx.strokeStyle = 'black';\n          ctx.fillStyle = 'gold';\n\n          //  face\n          ctx.beginPath();\n          ctx.arc(centerX, centerY, halfSize * 0.8, 0, 2 * Math.PI);\n          ctx.fill();\n          ctx.stroke();\n\n          //  smile\n          ctx.beginPath();\n          ctx.arc(centerX, centerY, halfSize * 0.5, 0, Math.PI);\n          ctx.stroke();\n\n          //  left eye\n          ctx.beginPath();\n          ctx.arc(canvas.width / 3, canvas.height / 3, halfSize * 0.1, 0, Math.PI, true);\n          ctx.stroke();\n          ctx.beginPath();\n          ctx.arc((canvas.width / 3) * 2, canvas.height / 3, halfSize * 0.1, 0, Math.PI * 2, true);\n          ctx.stroke();\n        },\n      },\n      {\n        id: GROUND,\n        type: \"draw\",\n        draw: ctx => {\n          const { canvas } = ctx;\n          canvas.width = LOGO_SIZE;\n          canvas.height = LOGO_SIZE;\n          ctx.imageSmoothingEnabled = true;\n          ctx.fillStyle = '#ddd';\n          ctx.lineWidth = canvas.width / 50;\n          ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n          ctx.strokeStyle = 'black';\n          ctx.fillStyle = 'silver';\n\n          ctx.beginPath();\n          ctx.rect(canvas.width * .2, canvas.height * .2, canvas.width * .6, canvas.height * .6);\n          ctx.fill();\n          ctx.stroke();\n        },\n      },\n      {\n        id: VIDEO,\n        type: \"video\",\n        src: 'sample.mp4',\n        volume: 0,\n        fps: 30,\n        playSpeed: .1,\n      },\n      {\n        id: GRID,\n        type: \"draw\",\n        draw: ctx => {\n          const { canvas } = ctx;\n          canvas.width = LOGO_SIZE;\n          canvas.height = LOGO_SIZE;\n          ctx.imageSmoothingEnabled = true;\n          ctx.lineWidth = 5;\n\n          ctx.strokeStyle = 'green';\n\n          ctx.beginPath();\n          ctx.rect(10, 10, canvas.width - 20, canvas.height - 20);\n          ctx.stroke();\n        },\n      },\n      {\n        id: WIREFRAME,\n        type: \"draw\",\n        draw: ctx => {\n          const { canvas } = ctx;\n          canvas.width = LOGO_SIZE;\n          canvas.height = LOGO_SIZE;\n          ctx.imageSmoothingEnabled = true;\n          ctx.lineWidth = 5;\n          ctx.setLineDash([5, 2]);\n\n          ctx.strokeStyle = 'blue';\n\n          ctx.beginPath();\n          ctx.rect(10, 10, canvas.width - 20, canvas.height - 20);\n          ctx.stroke();\n        },\n      },\n      {\n        id: GRASS,\n        type: \"draw\",\n        draw: ctx => {\n          const { canvas } = ctx;\n          canvas.width = LOGO_SIZE;\n          canvas.height = LOGO_SIZE;\n          ctx.imageSmoothingEnabled = true;\n          ctx.fillStyle = 'green';\n          ctx.lineWidth = canvas.width / 50;\n          ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n          ctx.strokeStyle = 'black';\n          ctx.fillStyle = '#4f8';\n\n          ctx.beginPath();\n          ctx.rect(canvas.width * .2, canvas.height * .2, canvas.width * .6, canvas.height * .6);\n          ctx.fill();\n          ctx.stroke();\n        },\n      },\n    );\n\n    this.addSprites(\n      {\n        imageId: DOBUKI,\n        transforms: [\n          Matrix.create().translate(0, 0, -1).getMatrix(),\n        ],\n      },\n      //  side walls\n      ...[\n        Matrix.create().translate(-1, 0, 0).rotateY(Math.PI / 2).scale(1).getMatrix(),\n        Matrix.create().translate(1, 0, 0).rotateY(-Math.PI / 2).scale(1).getMatrix(),\n      ].map(transform => ({ imageId: LOGO, transforms: [transform] })),\n      //  floor\n      ...[\n        Matrix.create().translate(0, -1, 0).rotateX(-Math.PI / 2).scale(1).getMatrix(),\n        Matrix.create().translate(0, -1, 2).rotateX(-Math.PI / 2).scale(1).getMatrix(),\n        Matrix.create().translate(-2, -1, 2).rotateX(-Math.PI / 2).scale(1).getMatrix(),\n        Matrix.create().translate(2, -1, 2).rotateX(-Math.PI / 2).scale(1).getMatrix(),\n      ].map(transform => ({ imageId: GROUND, transforms: [transform] })),\n      {\n        imageId: VIDEO,\n        transforms: [\n          Matrix.create().translate(0, 10000, -50000).scale(480 * 20, 270 * 20, 1).getMatrix(),\n        ],\n      },\n      ...new Array(400).fill(0).map((_, index) =>\n        Matrix.create().translate((index % 20 - 10) * 2, -1.5, (Math.floor(index / 20) - 10) * 2).rotateX(-Math.PI / 2).scale(1).getMatrix(),\n      ).map(transform => ({ imageId: GRID, transforms: [transform] })),\n\n      //  Wireframe\n      //  ground\n      ...new Array(400).fill(0).map((_, index) =>\n        Matrix.create().translate((index % 20 - 10) * 2, -1, (Math.floor(index / 20) - 10) * 2).rotateX(-Math.PI / 2).scale(1).getMatrix(),\n      ).map(transform => ({ imageId: GRASS, transforms: [transform] })),\n      //  ceiling\n      ...new Array(400).fill(0).map((_, index) =>\n        Matrix.create().translate((index % 20 - 10) * 2, 1, (Math.floor(index / 20) - 10) * 2).rotateX(-Math.PI / 2).scale(1).getMatrix(),\n      ).map(transform => ({ imageId: WIREFRAME, transforms: [transform] })),\n      //  face\n      ...new Array(400).fill(0).map((_, index) =>\n        Matrix.create().translate((index % 20 - 10) * 2, 0, (Math.floor(index / 20) - 10) * 2 - 1).getMatrix(),\n      ).map(transform => ({ imageId: WIREFRAME, transforms: [transform] })),\n    );\n  }\n\n  activate(): () => void {\n    const onDeactivate = super.activate();\n\n    const cleanAuxiliary = this.core.addAuxiliary(\n      new ToggleAuxiliary(this.core, {\n        auxiliariesMapping: [\n          {\n            key: \"Tab\", aux: Auxiliaries.from(\n              new CamStepAuxiliary(this.core, { step: 2, turnStep: Math.PI / 2, tiltStep: Math.PI / 4 }),\n              new JumpAuxiliary(this.core),\n              new CamTiltResetAuxiliary(this.core, { key: \"ShiftRight\" }),\n            )\n          },\n          {\n            key: \"Tab\", aux: Auxiliaries.from(\n              new CamMoveAuxiliary(this.core),\n              new RiseAuxiliary(this.core),\n              new CamTiltResetAuxiliary(this.core, { key: \"ShiftRight\" }),\n            )\n          },\n        ],\n      }),\n    );\n\n    return () => {\n      onDeactivate();\n      cleanAuxiliary();\n    };\n  }\n}\n",
  "import { World } from 'world/World';\nimport { Core } from 'core/Core';\nimport { DemoWorld } from 'demo/DemoWorld';\n\nexport async function hello() {\n  console.log('Hello World!');\n}\n\nlet onStop: () => void;\n\nexport async function testCanvas(canvas: HTMLCanvasElement) {\n  canvas.style.border = '2px solid silver';\n  //  canvas.style.cursor = 'grab';\n  canvas.addEventListener('mouseenter', () => {\n    canvas.style.borderColor = 'black';\n  });\n  canvas.addEventListener('mouseleave', () => {\n    canvas.style.borderColor = 'silver';\n  });\n  const pixelListener = { x: 0, y: 0, pixel: 0 };\n  canvas.addEventListener('mousemove', (e) => {\n    const x = (e.pageX - canvas.offsetLeft) * 2;\n    const y = (canvas.offsetHeight - (e.pageY - canvas.offsetTop)) * 2;\n    pixelListener.x = x;\n    pixelListener.y = y;\n  });\n  //  canvas.style.pointerEvents = 'none';\n\n  const core = new Core({\n    canvas,\n  });\n  core.engine.addPixelListener(pixelListener);\n  const world = new DemoWorld(core);\n  onStop = core.start(world);\n  return { core, world };\n}\n\nexport function stop(): void {\n  onStop();\n}\n\nexport { World };\n"
  ],
  "mappings": "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",
  "debugId": "CFF7B26BE5A7DA1164756e2164756e21",
  "names": []
}