{
  "version": 3,
  "sources": ["../src/disposable/Disposable.ts", "../src/gl/programs/GLProgram.ts", "../src/gl/programs/GLPrograms.ts", "../src/gl/VertexArray.ts", "../src/gl/attributes/GLAttributeBuffers.ts", "../src/gl/uniforms/GLUniforms.ts", "../src/gl/attributes/Contants.ts", "../src/GLEngine.ts", "../src/index.tsx"],
  "sourcesContent": [
    "export class Disposable {\n    disposables?: Set<Disposable>;\n\n    own<D extends Disposable>(disposable: D): D {\n        if (!this.disposables) {\n            this.disposables = new Set();\n        }\n        this.disposables.add(disposable);\n        return disposable;\n    }\n\n    destroy() {\n        this.disposables?.forEach(disposable => disposable.destroy());\n    }\n}",
  "import { Disposable } from \"../../disposable/Disposable\";\n\nexport class GLProgram extends Disposable {\n    gl: WebGL2RenderingContext;\n    program: WebGLProgram;\n    constructor(gl: WebGL2RenderingContext, vertex: string, fragment: string) {\n        super();\n        this.gl = gl;\n        this.program = createProgram(gl, vertex.trim(), fragment.trim());\n    }\n\n    use() {\n        this.gl.useProgram(this.program);\n    }\n\n    destroy(): void {\n        super.destroy();\n        deleteProgram(this.gl, this.program);\n    }\n}\n\nfunction createProgram(gl: WebGL2RenderingContext, vertex: string, fragment: string): WebGLProgram {\n    function createShader(shaderSource: string, type: GLenum) {\n        function typeName(type: number) {\n            return type === gl?.VERTEX_SHADER ? \"vertex\" :\n                type === gl?.FRAGMENT_SHADER ? \"fragment\" :\n                undefined;\n        }\n        \n        if (type !== gl.VERTEX_SHADER && type !== gl.FRAGMENT_SHADER) {\n            throw new Error(`Shader error in ${typeName(type)}`);\n        }\n        const shader = gl.createShader(type);\n        if (!shader) {\n            throw new Error(`Unable to generate ${typeName(type)} shader.`);\n        }\n        gl.shaderSource(shader, shaderSource);\n        gl.compileShader(shader);\n    \n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n            // Something went wrong during compilation; get the error\n            console.error(`Shader compile error in ${typeName(type)}:` + gl.getShaderInfoLog(shader));\n        }\n        return shader;      \n    }\n    \n    const program = gl.createProgram();\n    if (!program) {\n        throw new Error(`Unable to create program.`);\n    }\n\n    const vertexShader = createShader(vertex, gl.VERTEX_SHADER)!;\n    const fragmentShader = createShader(fragment, gl.FRAGMENT_SHADER)!;\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    gl.detachShader(program, vertexShader);\n    gl.detachShader(program, fragmentShader);\n    gl.deleteShader(vertexShader);\n    gl.deleteShader(fragmentShader);\n    gl.validateProgram(program);\n\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n        throw new Error(\"Unable to initialize the shader program:\\n\" + gl.getProgramInfoLog(program));\n    }\n    return program;\n}\n\nfunction deleteProgram(gl: WebGL2RenderingContext, program: WebGLProgram) {\n    gl.deleteProgram(program);\n}\n",
  "import { Disposable } from \"../../disposable/Disposable\";\nimport { GLProgram } from \"./GLProgram\";\n\nexport class GLPrograms extends Disposable {\n    activeProgramId: string = \"\";\n    private gl: WebGL2RenderingContext;\n    private programs: Record<string, GLProgram> = {}\n\n    constructor(gl: WebGL2RenderingContext) {\n        super();\n        this.gl = gl;\n    }\n\n    addProgram(id: string, vertex: string, fragment: string) {\n        if (this.programs[id]) {\n            this.removeProgram(id);\n        }\n        this.programs[id] = this.own(new GLProgram(this.gl, vertex, fragment));\n    }\n\n    useProgram(id: string) {\n        if (this.activeProgramId !== id) {\n            this.activeProgramId = id;\n            this.programs[id].use();    \n        }\n    }\n\n    removeProgram(id: string) {\n        this.programs[id].destroy();\n        delete this.programs[id];\n    }\n\n    getProgram(id?: string): WebGLProgram | undefined {\n        return this.programs[id ?? this.activeProgramId]?.program;\n    }\n}",
  "import { Disposable } from \"../disposable/Disposable\";\n\nexport class VertexArray extends Disposable {\n    private gl: WebGL2RenderingContext;\n    private triangleArray: WebGLVertexArrayObject | null;\n\n    constructor(gl: WebGL2RenderingContext) {\n        super();\n        this.gl = gl;\n        this.triangleArray = gl.createVertexArray();\n        gl.bindVertexArray(this.triangleArray);\n    }\n    \n    destroy(): void {\n        this.gl.deleteVertexArray(this.triangleArray);\n    }\n}",
  "import { Disposable } from \"../../disposable/Disposable\";\nimport { GLPrograms } from \"../programs/GLPrograms\";\n\nexport interface BufferInfo {\n    buffer: WebGLBuffer;\n    target?: GLenum;\n    location: number;\n    bufferArray?: TypedArray;\n    bufferSize?: number;\n    usage?: GLenum;\n}\n\nexport type LocationName = string;\n\n\nexport class GLAttributeBuffers extends Disposable {\n    private readonly bufferRecord: Record<LocationName, BufferInfo> = {};\n    private lastBoundBuffer?: BufferInfo;\n    private readonly gl: WebGL2RenderingContext;\n    private readonly programs: GLPrograms;\n\n    constructor(gl: WebGL2RenderingContext, programs: GLPrograms) {\n        super();\n        this.gl = gl;\n        this.programs = programs;\n    }\n\n    getAttributeLocation(name: string, programId?: string): GLint {\n        const program = this.programs.getProgram(programId);\n        return program ? this.gl.getAttribLocation(program, name) ?? -1 : -1;\n    }\n\n    createBuffer(location: LocationName): BufferInfo {\n        this.deleteBuffer(location);\n        const bufferBuffer = this.gl?.createBuffer();\n        if (!bufferBuffer) {\n          throw new Error(`Unable to create buffer \"${location}\"`);\n        }\n        const record = {\n          buffer: bufferBuffer,\n          location: this.getAttributeLocation(location),\n        };\n        this.bufferRecord[location] = record;\n        return record;\n    }\n\n    deleteBuffer(location: LocationName) {\n      if (this.bufferRecord[location]) {\n        this.gl.deleteBuffer(this.bufferRecord[location].buffer);\n        delete this.bufferRecord[location];\n      }\n    }\n\n    getAttributeBuffer(location: LocationName, autoCreate?: boolean): BufferInfo {\n      const attribute = this.bufferRecord[location];\n      if (!attribute) {\n        if (autoCreate) {\n          return this.createBuffer(location);\n        }\n        throw new Error(`Attribute \"${location}\" not created. Make sure \"createBuffer\" is called.`);\n      }\n      return attribute;\n    }\n\n    bufferData(target: GLenum, location: LocationName, bufferArray: TypedArray | undefined, bufferSize: number, glUsage: GLenum) {\n        const bufferInfo = this.getAttributeBuffer(location);\n        if (bufferArray) {\n            this.gl.bufferData(target, bufferArray, glUsage);\n        } else {\n            this.gl.bufferData(target, bufferSize, glUsage);\n        }\n        bufferInfo.bufferSize = bufferSize || bufferArray?.length;\n        bufferInfo.bufferArray = bufferArray ?? new Float32Array(bufferInfo.bufferSize! / Float32Array.BYTES_PER_ELEMENT).fill(0);\n        bufferInfo.usage = glUsage;\n        bufferInfo.target = target;\n    }\n\n    bufferSubData(target: GLenum, bufferArray: TypedArray, dstByteOffset: number, srcOffset?: number, length?: number) {\n        if (srcOffset) {\n            this.gl.bufferSubData(target, dstByteOffset, bufferArray, srcOffset, length);\n        } else {\n            this.gl.bufferSubData(target, dstByteOffset, bufferArray);\n        }\n    }\n\n    bindBuffer(target: GLenum, bufferInfo: BufferInfo) {\n        if (this.lastBoundBuffer !== bufferInfo) {\n          this.lastBoundBuffer = bufferInfo;\n          this.gl.bindBuffer(target, bufferInfo.buffer);\n        }\n    }\n\n    destroy(): void {\n      Object.keys(this.bufferRecord).forEach(location => this.deleteBuffer(location));\n    }\n}",
  "import { Disposable } from \"../../disposable/Disposable\";\nimport { GLPrograms } from \"../programs/GLPrograms\";\n\nexport class GLUniforms extends Disposable {\n    private gl: WebGL2RenderingContext;\n    private programs: GLPrograms;\n\n    constructor(gl: WebGL2RenderingContext, programs: GLPrograms) {\n        super();\n        this.gl = gl;\n        this.programs = programs;\n    }\n\n    getUniformLocation(name: string, programId?: string): WebGLUniformLocation | undefined {\n        const program = this.programs.getProgram(programId);\n        return program ? this.gl.getUniformLocation(program, name) ?? undefined : undefined;\n    }\n}",
  "import { LocationName } from \"./GLAttributeBuffers\";\n\nexport const POSITION_LOC: LocationName = \"position\";\nexport const INDEX_LOC: LocationName = \"index\";\nexport const TRANSFORM_LOC: LocationName = \"transform\";\n\n\n",
  "// To recognize dom types (see https://bun.sh/docs/typescript#dom-types):\n/// <reference lib=\"dom\" />\n/// <reference lib=\"dom.iterable\" />\n\nimport { GLPrograms } from \"./gl/programs/GLPrograms\";\nimport { Disposable } from \"./disposable/Disposable\";\nimport { VertexArray } from \"./gl/VertexArray\";\nimport { GLAttributeBuffers } from \"./gl/attributes/GLAttributeBuffers\";\nimport { GLUniforms } from \"./gl/uniforms/GLUniforms\";\nimport { POSITION_LOC, INDEX_LOC, TRANSFORM_LOC } from \"./gl/attributes/Contants\";\n\nconst DEFAULT_ATTRIBUTES: WebGLContextAttributes = {\n    alpha: true,\n    antialias: false,\n    depth: true,\n    desynchronized: true,\n    failIfMajorPerformanceCaveat: undefined,\n    powerPreference: \"default\",\n    premultipliedAlpha: true,\n    preserveDrawingBuffer: false,\n    stencil: false,\n};\n\nconst GL = WebGL2RenderingContext;\n\nconst MAX_TRIANGLES = 10000;\n\nfunction glProxy(gl: WebGL2RenderingContext) {\n    const proxy = new Proxy<WebGL2RenderingContext>(gl, {\n        get(target, prop) {\n            const t = target as any;\n            const result = t[prop];\n            if (typeof(result) === \"function\") {\n                const f = (...params: any[]) => {\n                    const returnValue = result.apply(t, params);\n                    console.log(`gl.${String(prop)}(`, params, ') = ', returnValue);\n                    return returnValue;\n                };\n                return f;    \n            } else {\n                console.log(`gl.${String(prop)} = `, result);\n                return result;\n            }\n        },\n    });\n    return proxy;\n};\n\n\n\nexport class GLEngine extends Disposable {\n    private gl: WebGL2RenderingContext;\n    programs: GLPrograms;\n    attributeBuffers: GLAttributeBuffers;\n    uniforms: GLUniforms;\n\n    constructor(canvas: HTMLCanvasElement, attributes?: WebGLContextAttributes) {\n        super();\n        this.gl = glProxy(canvas.getContext(\"webgl2\", {...DEFAULT_ATTRIBUTES, ...attributes})!);\n\n\n\n        this.programs = this.own(new GLPrograms(this.gl));\n        this.attributeBuffers = this.own(new GLAttributeBuffers(this.gl, this.programs));\n        this.uniforms = this.own(new GLUniforms(this.gl, this.programs));\n    }\n\n    initialize() {\n        //  enable depth\n        this.gl.enable(GL.DEPTH_TEST);\n        this.gl.depthFunc(GL.LEQUAL);\n        //  enable blend\n        this.gl.enable(GL.BLEND);\n        this.gl.blendFunc(GL.SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA);\n\n\n        this.gl.viewport(0, 0, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n\n        {\n            this.attributeBuffers.createBuffer(INDEX_LOC);\n            const bufferInfo = this.attributeBuffers.getAttributeBuffer(INDEX_LOC);\n            this.attributeBuffers.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, bufferInfo);\n        }\n\n        {\n            this.attributeBuffers.createBuffer(POSITION_LOC);\n            const bufferInfo = this.attributeBuffers.getAttributeBuffer(POSITION_LOC);\n            this.attributeBuffers.bindBuffer(GL.ARRAY_BUFFER, bufferInfo);\n            this.gl.vertexAttribPointer(bufferInfo.location, 3,\n                GL.FLOAT, false, 0, 0);\n            this.gl.enableVertexAttribArray(bufferInfo.location);    \n        }\n\n        // {\n        //     this.attributeBuffers.createBuffer(TRANSFORM_LOC);\n        //     const bufferInfo = this.attributeBuffers.getAttributeBuffer(TRANSFORM_LOC);\n        //     this.attributeBuffers.bindBuffer(GL.ARRAY_BUFFER, bufferInfo);\n        //     for (let i = 0; i < 4; i++) {\n        //         const loc = bufferInfo.location + i;\n        //         this.gl.vertexAttribPointer(loc, 4,\n        //             GL.FLOAT, false, 0, 0);    \n        //         this.gl.enableVertexAttribArray(loc);    \n        //         this.gl.vertexAttribDivisor(loc, 1);\n        //     }\n        // }\n\n        // this.bindVertexArray();\n        this.attributeBuffers.bufferData(\n            GL.ARRAY_BUFFER,\n            POSITION_LOC,\n            Float32Array.from([    \n                1, 1, 0,\n                1, -1, 0,\n                -1, -1, 0,\n                -1, 1, 0,\n            ]),\n            4 * 3 * MAX_TRIANGLES * Float32Array.BYTES_PER_ELEMENT,\n            GL.STATIC_DRAW\n        );\n\n        this.attributeBuffers.bufferData(\n            GL.ELEMENT_ARRAY_BUFFER,\n            INDEX_LOC,\n            Uint16Array.from([\n                0, 1, 2,\n                3, 0, 2\n            ]),\n            0,\n            GL.STATIC_DRAW\n        );\n\n        // this.attributeBuffers.bufferData(\n        //     GL.ARRAY_BUFFER,\n        //     TRANSFORM_LOC,\n        //     Float32Array.from([\n        //         1, 0, 0, 0,\n        //         0, 1, 0, 0,\n        //         0, 0, 1, 0,\n        //         0, 0, 0, 1,\n\n        //         1, 0, 0, 0,\n        //         0, 1, 0, 0,\n        //         0, 0, 1, 0,\n        //         0, 0, 0, 1,\n        //     ]),\n        //     0,\n        //     GL.DYNAMIC_DRAW\n        // );\n    }\n\n    updateTrianglePosition(index: number, vertices: number[]) {\n        const bufferInfo = this.attributeBuffers.getAttributeBuffer(POSITION_LOC);\n        this.attributeBuffers.bindBuffer(GL.ARRAY_BUFFER, bufferInfo);\n        this.attributeBuffers.bufferSubData(GL.ARRAY_BUFFER,\n            Float32Array.from(vertices),\n            index * 4 * 3 * Float32Array.BYTES_PER_ELEMENT);\n    }\n\n    drawArrays(count: GLsizei) {\n        this.gl.drawArrays(GL.TRIANGLES, 0, count);\n    }\n\n    drawElementsInstanced(vertexCount: GLsizei, instances: GLsizei) {\n        this.gl.clear(GL.COLOR_BUFFER_BIT);\n        this.gl.drawElementsInstanced(GL.TRIANGLES, vertexCount, GL.UNSIGNED_SHORT, 0, instances);\n    }\n\n    private bindVertexArray() {\n        this.own(new VertexArray(this.gl));\n    }\n}\n",
  "import { GLEngine } from \"./GLEngine\";\n\nexport function hello() {\n    console.log(\"Hello World!\");\n}\n\nexport function testCanvas(canvas: HTMLCanvasElement) {\n    const engine = new GLEngine(canvas);\n    engine.programs.addProgram(\"test\",\n        `\n            #version 300 es\n\n            precision highp float;\n            \n            layout (location=0) in vec4 position;\n            // layout (location=1) in mat4 transform;\n\n            void main() {\n                // gl_Position = transform * position;\n                gl_Position = position;\n            }\n        `,\n        `\n            #version 300 es\n\n            precision highp float;\n            out vec4 fragColor;\n            \n            void main() {\n                fragColor = vec4(1.0, 0.0, 0.0, 0.5);\n            }\n        `);\n    engine.programs.useProgram(\"test\");\n    engine.initialize();\n    // engine.updateTrianglePosition(0, [\n    //     1, 1, 0,\n    //     1, -1, 0,\n    //     -1, -1, 0,\n    //     -1, 1, 0,\n    //   ]);\n//    engine.drawArrays(3);\n    engine.drawElementsInstanced(6, 2);\n    return engine;\n}\n"
  ],
  "mappings": "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",
  "debugId": "FA334C208030DEC064756e2164756e21",
  "names": []
}