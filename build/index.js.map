{
  "version": 3,
  "sources": ["../src/updates/UpdatableList.ts", "../src/updates/UpdateRegistry.ts", "../src/world/sprite/Medias.ts", "../src/lifecycle/Disposable.ts", "../src/world/aux/AuxiliaryHolder.ts", "../src/world/sprite/List.ts", "../src/world/sprite/update/SpriteUpdateType.ts", "../src/world/sprite/update/SpriteUpdater.ts", "../src/world/sprite/SpriteAccumulator.ts", "../src/world/World.ts", "../src/gl/attributes/Constants.ts", "../src/gl/attributes/Constants.ts", "../src/gl/programs/GLProgram.ts", "../src/gl/programs/GLPrograms.ts", "../src/gl/VertexArray.ts", "../src/gl/attributes/GLAttributeBuffers.ts", "../src/gl/uniforms/GLUniforms.ts", "../node_modules/avl/src/utils.js", "../node_modules/avl/src/index.js", "../node_modules/texture-slot-allocator/dist/src/texture/TextureSlot.js", "../node_modules/texture-slot-allocator/dist/src/texture/TextureUtils.js", "../node_modules/texture-slot-allocator/dist/src/texture/TextureSlotAllocator.js", "../src/gl/texture/TextureManager.ts", "../src/gl/texture/MediaData.ts", "../src/gl/texture/ImageManager.ts", "../src/generated/src/gl/resources/vertexShader.txt", "../src/generated/src/gl/resources/fragmentShader.txt", "../src/gl/utils/replaceTilda.ts", "../node_modules/gl-matrix/esm/common.js", "../node_modules/gl-matrix/esm/mat3.js", "../node_modules/gl-matrix/esm/mat4.js", "../node_modules/gl-matrix/esm/vec3.js", "../node_modules/gl-matrix/esm/vec4.js", "../node_modules/gl-matrix/esm/vec4.js", "../node_modules/gl-matrix/esm/vec4.js", "../node_modules/gl-matrix/esm/vec4.js", "../node_modules/gl-matrix/esm/vec4.js", "../node_modules/gl-matrix/esm/vec4.js", "../node_modules/gl-matrix/esm/vec4.js", "../node_modules/gl-matrix/esm/quat.js", "../src/gl/transform/Matrix.ts", "../src/gl/transform/ProjectionMatrix.ts", "../src/gl/utils/angleUtils.ts", "../src/core/value/Progressive.ts", "../src/gl/transform/TiltMatrix.ts", "../src/gl/transform/TurnMatrix.ts", "../src/updates/CameraUpdate.ts", "../src/updates/CameraFloatUpdate.ts", "../src/world/grid/Position.ts", "../src/gl/transform/PositionMatrix.ts", "../src/gl/camera/Camera.ts", "../src/updates/RefreshOrder.ts", "../src/core/graphics/GraphicsEngine.ts", "../src/core/motor/Motor.ts", "../src/controls/Keyboard.ts", "../src/core/aux/ResizeAux.ts", "../src/core/Core.ts", "../src/world/grid/CellPos.ts", "../src/gl/transform/aux/CellChangeAuxiliary.ts", "../src/world/aux/Auxiliaries.ts", "../src/world/aux/CamMoveAuxiliary.ts", "../src/world/aux/CamStepAuxiliary.ts", "../src/world/aux/CamTiltResetAuxiliary.ts", "../src/world/aux/RiseAuxiliary.ts", "../src/world/aux/ToggleAuxiliary.ts", "../src/world/grid/CellTracker.ts", "../src/world/sprite/aux/SpriteGrid.ts", "../src/world/sprite/aux/FixedSpriteGrid.ts", "../src/demo/DemoWorld.ts", "../src/index.tsx"],
  "sourcesContent": [
    "import { IdType } from \"core/IdType\";\nimport { List } from \"world/sprite/List\";\nimport { UpdateNotifier } from \"./UpdateNotifier\";\n\nexport class UpdatableList<T> implements List<T> {\n  constructor(\n    private readonly array: List<T>,\n    private updateValue: (index: IdType, value?: T) => void,\n    private readonly notifier?: UpdateNotifier) {\n  }\n\n  at(index: number) {\n    return this.array.at(index);\n  }\n\n  get length() {\n    return this.array.length;\n  }\n\n  set(index: IdType, value: T) {\n    this.updateValue(index, value);\n    this.notifier?.informUpdate(index);\n  }\n\n  remove(index: IdType) {\n    this.updateValue(index, undefined);\n    this.notifier?.informUpdate(index);\n  }\n}\n",
  "import { Refresh, UpdatePayload } from \"./Refresh\";\nimport { UpdateNotifier } from \"./UpdateNotifier\";\nimport { IMotor } from \"core/motor/IMotor\";\nimport { IdType } from \"core/IdType\";\n\nexport interface UpdateListener {\n  onUpdate(updatePayload: UpdatePayload): void;\n}\n\nexport class UpdateRegistry implements Refresh, UpdateNotifier {\n  private readonly updatedIds: Set<IdType> = new Set();\n  constructor(private applyUpdate: (ids: Set<IdType>) => void, private motor: IMotor, private readonly updateListener?: UpdateListener) {\n  }\n\n  informUpdate(id: IdType): void {\n    this.addId(id);\n    this.motor.registerUpdate(this);\n  }\n\n  addId(spriteId: IdType): void {\n    this.updatedIds.add(spriteId);\n  }\n\n  refresh(updatePayload: UpdatePayload): void {\n    if (this.updatedIds.size) {\n      this.applyUpdate(this.updatedIds);\n      if (this.updatedIds.size) { //  re-register if some updates are remaining\n        this.motor.registerUpdate(this);\n      }\n      this.updateListener?.onUpdate(updatePayload);\n    }\n  }\n}\n",
  "import { Media } from \"gl/texture/Media\";\nimport { List } from \"./List\";\nimport { UpdatableList } from \"updates/UpdatableList\";\nimport { IGraphicsEngine } from \"core/graphics/IGraphicsEngine\";\nimport { IMotor } from \"core/motor/IMotor\";\nimport { UpdateRegistry } from \"updates/UpdateRegistry\";\n\nexport type Medias = List<Media>;\n\ninterface Props {\n  motor: IMotor;\n  engine: IGraphicsEngine;\n}\n\nexport class UpdatableMedias extends UpdatableList<Media> {\n  constructor({ motor, engine }: Props, medias: (Media | undefined)[] = []) {\n    super(medias, (index, value) => {\n      medias[index] = value;\n      while (!medias[medias.length - 1]) {\n        medias.length--;\n      }\n    },\n      new UpdateRegistry(ids => {\n        const imageIds = Array.from(ids);\n        ids.clear();\n        engine.updateTextures(imageIds, medias.at.bind(medias)).then((mediaInfos) => {\n          mediaInfos.forEach(mediaInfo => {\n            if (mediaInfo.isVideo) {\n              motor.registerUpdate(mediaInfo, mediaInfo.schedule);\n            }\n          });\n        });\n      }, motor),\n    );\n  }\n}\n",
  "interface Destroyable {\n  destroy: () => void;\n}\n\nexport class Disposable {\n  disposables?: Set<Destroyable>;\n\n  own<D extends Disposable>(disposable: D): D {\n    if (!this.disposables) {\n      this.disposables = new Set();\n    }\n    this.disposables.add(disposable);\n    return disposable;\n  }\n\n  addOnDestroy(callback?: () => void) {\n    if (callback) {\n      this.disposables?.add({\n        destroy: callback,\n      });\n    }\n  }\n\n  destroy() {\n    this.disposables?.forEach((disposable) => disposable.destroy());\n  }\n}\n",
  "import { Refresh, UpdatePayload } from \"updates/Refresh\";\nimport { Auxiliary } from \"./Auxiliary\";\nimport { Disposable } from \"lifecycle/Disposable\";\nimport { Cell } from \"world/grid/CellPos\";\nimport { CellTrack } from \"world/grid/CellTracker\";\n\nexport class AuxiliaryHolder extends Disposable implements Auxiliary {\n  private auxiliaries: Auxiliary[] = [];\n  private refreshes: Refresh[] = [];\n  private cellTracks: CellTrack[] = [];\n  constructor() {\n    super();\n  }\n\n  activate(): (() => void) | void {\n    const deactivates = new Set<() => void>();\n    for (const a of this.auxiliaries) {\n      const onDeactivate = a.activate?.();\n      if (onDeactivate) {\n        deactivates.add(onDeactivate);\n      }\n    }\n    return () => {\n      deactivates.forEach(d => d());\n    };\n  }\n\n  deactivate() {\n    for (const a of this.auxiliaries) {\n      a.deactivate?.();\n    }\n  }\n\n  refresh(updatePayload: UpdatePayload): void {\n    for (const r of this.refreshes) {\n      r.refresh(updatePayload);\n    }\n  }\n\n  trackCell(cell: Cell): void {\n    for (const v of this.cellTracks) {\n      v.trackCell!(cell);\n    }\n  }\n\n  untrackCell(cellTag: string): void {\n    for (const v of this.cellTracks) {\n      v.untrackCell!(cellTag);\n    }\n  }\n\n  onAddAuxiliary?(...aux: Auxiliary[]): () => void;\n  addAuxiliary(...aux: Auxiliary[]) {\n    this.auxiliaries.push(...aux);\n    this.onAuxiliariesChange();\n    const onDeactivates = new Set<() => void>();\n    const onAddDeactivate = this.onAddAuxiliary?.(...aux);\n    if (onAddDeactivate) {\n      onDeactivates.add(onAddDeactivate);\n    }\n    return () => {\n      onDeactivates.forEach(d => d());\n      this.removeAllAuxiliaries();\n    };\n  }\n\n  removeAllAuxiliaries() {\n    this.removeAuxiliary(...this.auxiliaries);\n  }\n\n  removeAuxiliary(...aux: Auxiliary[]) {\n    const removeSet = new Set(aux);\n    let j = 0;\n    for (let i = 0; i < this.auxiliaries.length; i++) {\n      if (!removeSet.has(this.auxiliaries[i])) {\n        this.auxiliaries[j] = this.auxiliaries[i];\n        j++;\n      }\n    }\n    this.auxiliaries.length = j;\n    this.onAuxiliariesChange();\n  }\n\n  private onAuxiliariesChange() {\n    this.refreshes = this.auxiliaries.filter((a): a is Refresh => !!a.refresh).sort((a, b) => (a.refreshOrder ?? 0) - (b.refreshOrder ?? 0));\n    this.cellTracks = this.auxiliaries.filter((a): a is CellTrack => !!a.trackCell || !!a.untrackCell);\n  }\n}\n",
  "export interface List<T> {\n  readonly length: number;\n  at(index: number): T | undefined;\n}\n\nexport function forEach<T>(list: List<T> | undefined, callback: (value: T | undefined, index: number) => void): void {\n  if (list) {\n    for (let i = 0; i < list.length; i++) {\n      const elem = list.at(i);\n      callback(elem, i);\n    }\n  }\n}\n\nexport function map<T, R>(list: List<T>, callback: (value: T, index: number) => R): (R | undefined)[] {\n  const r: (R | undefined)[] = []\n  for (let i = 0; i < list.length; i++) {\n    const elem = list.at(i);\n    r.push(elem ? callback(elem, i) : undefined);\n  }\n  return r;\n}\n",
  "\nexport enum SpriteUpdateType {\n  NONE = 0,\n  TRANSFORM = 1,\n  ANIM = 2,\n  ALL = 3\n}\n",
  "import { UpdateNotifier } from \"updates/UpdateNotifier\";\nimport { Sprites } from \"../Sprites\";\nimport { Sprite } from \"../Sprite\";\nimport { IGraphicsEngine } from \"core/graphics/IGraphicsEngine\";\nimport { IMotor } from \"core/motor/IMotor\";\nimport { UpdateListener, UpdateRegistry } from \"updates/UpdateRegistry\";\nimport { SpriteUpdateType } from \"./SpriteUpdateType\";\nimport { UpdatePayload } from \"updates/Refresh\";\n\ninterface Props {\n  engine: IGraphicsEngine;\n  motor: IMotor;\n}\n\nexport abstract class SpriteUpdater implements Sprites, UpdateNotifier, UpdateListener {\n  private readonly spriteTransformUpdate;\n  private readonly spriteAnimUpdate;\n\n  constructor({ engine, motor }: Props) {\n    this.spriteTransformUpdate = new UpdateRegistry((ids) => engine.updateSpriteTransforms(ids, this), motor, this);\n    this.spriteAnimUpdate = new UpdateRegistry((ids) => engine.updateSpriteAnims(ids, this), motor, this);\n  }\n\n  abstract onUpdate(updatePayload: UpdatePayload): void;\n\n  abstract get length(): number;\n  abstract at(index: number): Sprite | undefined;\n\n  informUpdate(id: number, type: number = SpriteUpdateType.ALL): void {\n    if (id < this.length) {\n      if (type & SpriteUpdateType.TRANSFORM) {\n        this.spriteTransformUpdate.informUpdate(id);\n      }\n      if (type & SpriteUpdateType.ANIM) {\n        this.spriteAnimUpdate.informUpdate(id);\n      }\n    }\n  }\n}\n",
  "import { IGraphicsEngine } from \"core/graphics/IGraphicsEngine\";\nimport { Sprite, SpriteId } from \"./Sprite\";\nimport { IMotor } from \"core/motor/IMotor\";\nimport { forEach } from \"./List\";\nimport { Sprites } from \"./Sprites\";\nimport { SpriteUpdater } from \"./update/SpriteUpdater\";\nimport { UpdatePayload } from \"updates/Refresh\";\n\ninterface Props {\n  engine: IGraphicsEngine;\n  motor: IMotor;\n}\n\ninterface Slot {\n  sprites: Sprites;\n  baseIndex: number;\n}\n\nexport class SpritesAccumulator extends SpriteUpdater {\n  private readonly spritesIndices: Slot[] = [];\n\n  constructor({ engine, motor }: Props) {\n    super({ engine, motor });\n  }\n\n  at(spriteId: SpriteId): Sprite | undefined {\n    const slot = this.spritesIndices[spriteId];\n    return slot?.sprites.at(spriteId - slot.baseIndex);\n  }\n\n  get length(): number {\n    return this.spritesIndices.length;\n  }\n\n  add(sprites: Sprites): void {\n    const slot = {\n      sprites,\n      baseIndex: this.spritesIndices.length,\n    };\n    if (sprites.informUpdate) {\n      //  overwrite\n      sprites.informUpdate = (index, type) => {\n        this.informUpdate(slot.baseIndex + index, type);\n      };\n    }\n    forEach(sprites, (_, index) => {\n      this.spritesIndices.push(slot);\n      this.informUpdate(slot.baseIndex + index);\n    });\n  }\n\n  onUpdate(updatePayload: UpdatePayload): void {\n  }\n}\n",
  "import IWorld from \"./IWorld\";\nimport { Sprites } from \"./sprite/Sprites\";\nimport { Media } from \"gl/texture/Media\";\nimport { Auxiliary } from \"./aux/Auxiliary\";\nimport { UpdatableMedias } from \"./sprite/Medias\";\nimport { AuxiliaryHolder } from \"./aux/AuxiliaryHolder\";\nimport { Sprite } from \"./sprite/Sprite\";\nimport { IGraphicsEngine } from \"core/graphics/IGraphicsEngine\";\nimport { IMotor } from \"core/motor/IMotor\";\nimport { SpritesAccumulator } from \"./sprite/SpriteAccumulator\";\n\ninterface Props {\n  engine: IGraphicsEngine;\n  motor: IMotor;\n}\n\nexport abstract class World extends AuxiliaryHolder implements IWorld, Auxiliary {\n  public readonly medias: UpdatableMedias;\n  private readonly spritesAccumulator;\n  protected engine: IGraphicsEngine;\n  protected motor: IMotor;\n\n  constructor(props: Props) {\n    super();\n    const { engine, motor } = props;\n    this.engine = engine;\n    this.motor = motor;\n    this.medias = new UpdatableMedias(props)\n    this.spritesAccumulator = new SpritesAccumulator(props);\n  }\n\n  activate(): void | (() => void) {\n    const deActivate = super.activate();\n    this.engine.setMaxSpriteCount(this.sprites.length);\n    console.log(\"Sprite limit:\", this.sprites.length);\n    return () => deActivate?.();\n  }\n\n  get sprites(): Sprites {\n    return this.spritesAccumulator;\n  }\n\n  addMedia(...medias: Media[]) {\n    medias.forEach(media => {\n      this.medias.set(media.id, media);\n    });\n  }\n\n  addSprites(...sprites: (Sprites | (Sprite & { length?: number }))[]) {\n    sprites.forEach(s => {\n      const spriteList = s.length ? s as Sprites : [s as Sprite];\n      this.spritesAccumulator.add(spriteList);\n    });\n  }\n}\n",
  "// To recognize dom types (see https://bun.sh/docs/typescript#dom-types):\n/// <reference lib=\"dom\" />\n/// <reference lib=\"dom.iterable\" />\n\nimport { LocationName } from './GLAttributeBuffers';\n\n//  GL\nexport type GL = WebGL2RenderingContext;\nexport const GL = globalThis.WebGL2RenderingContext ?? {} as any;\n\n//  Attributes\nexport const POSITION_LOC: LocationName = 'position';\nexport const INDEX_LOC: LocationName = 'index';\nexport const TRANSFORM_LOC: LocationName = 'transform';\nexport const SLOT_SIZE_LOC: LocationName = 'slotSize_and_number';\nexport const INSTANCE_LOC: LocationName = 'instance';\nexport const SPRITE_FLAGS_LOC: LocationName = 'spriteFlag';\n\n//  Uniform\nexport const CAM_POS_LOC: LocationName = 'camPos';\nexport const CAM_TILT_LOC: LocationName = 'camTilt';\nexport const CAM_TURN_LOC: LocationName = 'camTurn';\nexport const CAM_PROJECTION_LOC: LocationName = 'projection';\nexport const CAM_CURVATURE_LOC: LocationName = 'curvature';\nexport const MAX_TEXTURE_SIZE_LOC: LocationName = 'maxTextureSize';\nexport const TEXTURE_UNIFORM_LOC: LocationName = 'uTextures';\n",
  "// To recognize dom types (see https://bun.sh/docs/typescript#dom-types):\n/// <reference lib=\"dom\" />\n/// <reference lib=\"dom.iterable\" />\n\nimport { LocationName } from './GLAttributeBuffers';\n\n//  GL\nexport type GL = WebGL2RenderingContext;\nexport const GL = globalThis.WebGL2RenderingContext ?? {} as any;\n\n//  Attributes\nexport const POSITION_LOC: LocationName = 'position';\nexport const INDEX_LOC: LocationName = 'index';\nexport const TRANSFORM_LOC: LocationName = 'transform';\nexport const SLOT_SIZE_LOC: LocationName = 'slotSize_and_number';\nexport const INSTANCE_LOC: LocationName = 'instance';\nexport const SPRITE_FLAGS_LOC: LocationName = 'spriteFlag';\n\n//  Uniform\nexport const CAM_POS_LOC: LocationName = 'camPos';\nexport const CAM_TILT_LOC: LocationName = 'camTilt';\nexport const CAM_TURN_LOC: LocationName = 'camTurn';\nexport const CAM_PROJECTION_LOC: LocationName = 'projection';\nexport const CAM_CURVATURE_LOC: LocationName = 'curvature';\nexport const MAX_TEXTURE_SIZE_LOC: LocationName = 'maxTextureSize';\nexport const TEXTURE_UNIFORM_LOC: LocationName = 'uTextures';\n",
  "import { GL } from 'gl/attributes/Constants';\nimport { Disposable } from '../../lifecycle/Disposable';\n\nexport class GLProgram extends Disposable {\n  gl: GL;\n  program: WebGLProgram;\n  constructor(gl: GL, vertex: string, fragment: string) {\n    super();\n    this.gl = gl;\n    this.program = createProgram(gl, vertex.trim(), fragment.trim());\n  }\n\n  use() {\n    this.gl.useProgram(this.program);\n  }\n\n  destroy(): void {\n    super.destroy();\n    deleteProgram(this.gl, this.program);\n  }\n}\n\nfunction createProgram(\n  gl: GL,\n  vertex: string,\n  fragment: string,\n): WebGLProgram {\n  function createShader(shaderSource: string, type: GLenum) {\n    function typeName(type: number) {\n      return type === gl?.VERTEX_SHADER\n        ? 'vertex'\n        : type === gl?.FRAGMENT_SHADER\n          ? 'fragment'\n          : undefined;\n    }\n\n    if (type !== gl.VERTEX_SHADER && type !== gl.FRAGMENT_SHADER) {\n      throw new Error(`Shader error in ${typeName(type)}`);\n    }\n    const shader = gl.createShader(type);\n    if (!shader) {\n      throw new Error(`Unable to generate ${typeName(type)} shader.`);\n    }\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      // Something went wrong during compilation; get the error\n      console.error(\n        `Shader compile error in ${typeName(type)}:` +\n        gl.getShaderInfoLog(shader),\n      );\n    }\n    return shader;\n  }\n\n  const program = gl.createProgram();\n  if (!program) {\n    throw new Error(`Unable to create program.`);\n  }\n\n  const vertexShader = createShader(vertex, gl.VERTEX_SHADER)!;\n  const fragmentShader = createShader(fragment, gl.FRAGMENT_SHADER)!;\n  const vertexInfo = gl.getShaderInfoLog(vertexShader),\n    fragmentInfo = gl.getShaderInfoLog(fragmentShader);\n  if (vertexInfo) {\n    console.log('VERTEX', vertexInfo);\n  }\n  if (fragmentInfo) {\n    console.log('FRAGMENT', fragmentInfo);\n  }\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, fragmentShader);\n  gl.linkProgram(program);\n  const programInfo = gl.getProgramInfoLog(program);\n  if (programInfo) {\n    console.log('PROGRAM', programInfo);\n  }\n  gl.detachShader(program, vertexShader);\n  gl.detachShader(program, fragmentShader);\n  gl.deleteShader(vertexShader);\n  gl.deleteShader(fragmentShader);\n  gl.validateProgram(program);\n\n  Object.entries(GL).forEach(([k, value]) => {\n    if (value && gl.getError() === value) {\n      console.log(`gl.${k}`);\n    }\n  });\n\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    throw new Error(\n      'Unable to initialize the shader program:\\n' +\n      gl.getProgramInfoLog(program),\n    );\n  }\n\n  return program;\n}\n\nfunction deleteProgram(gl: GL, program: WebGLProgram) {\n  gl.deleteProgram(program);\n}\n",
  "import { GL } from 'gl/attributes/Constants';\nimport { Disposable } from '../../lifecycle/Disposable';\nimport { GLProgram } from './GLProgram';\n\nexport class GLPrograms extends Disposable {\n  activeProgramId: string = '';\n  private gl: GL;\n  private programs: Record<string, GLProgram> = {};\n\n  constructor(gl: GL) {\n    super();\n    this.gl = gl;\n  }\n\n  addProgram(id: string, vertex: string, fragment: string) {\n    if (this.programs[id]) {\n      this.removeProgram(id);\n    }\n    this.programs[id] = this.own(new GLProgram(this.gl, vertex, fragment));\n  }\n\n  useProgram(id: string) {\n    if (this.activeProgramId !== id) {\n      this.activeProgramId = id;\n      this.programs[id].use();\n    }\n  }\n\n  removeProgram(id: string) {\n    this.programs[id].destroy();\n    delete this.programs[id];\n  }\n\n  getProgram(id?: string): WebGLProgram | undefined {\n    return this.programs[id ?? this.activeProgramId]?.program;\n  }\n}\n",
  "import { Disposable } from '../lifecycle/Disposable';\nimport { GL } from './attributes/Constants';\n\nexport class VertexArray extends Disposable {\n  private gl: GL;\n  private triangleArray: WebGLVertexArrayObject | null;\n\n  constructor(gl: GL) {\n    super();\n    this.gl = gl;\n    this.triangleArray = gl.createVertexArray();\n    gl.bindVertexArray(this.triangleArray);\n  }\n\n  destroy(): void {\n    this.gl.deleteVertexArray(this.triangleArray);\n  }\n}\n",
  "import { Disposable } from '../../lifecycle/Disposable';\nimport { GLPrograms } from '../programs/GLPrograms';\nimport { GL } from './Constants';\n\nexport interface BufferInfo {\n  buffer: WebGLBuffer;\n  // target?: GLenum;\n  location: number;\n  // bufferSize?: number;\n  // usage?: GLenum;\n}\n\nexport type LocationName = string;\n\nexport class GLAttributeBuffers extends Disposable {\n  private readonly bufferRecord: Record<LocationName, BufferInfo> = {};\n  private readonly gl: GL;\n  private readonly programs: GLPrograms;\n\n  constructor(gl: GL, programs: GLPrograms) {\n    super();\n    this.gl = gl;\n    this.programs = programs;\n  }\n\n  getAttributeLocation(name: string, programId?: string): GLint {\n    const program = this.programs.getProgram(programId);\n    return program ? this.gl.getAttribLocation(program, name) ?? -1 : -1;\n  }\n\n  createBuffer(location: LocationName): BufferInfo {\n    this.deleteBuffer(location);\n    const bufferBuffer = this.gl?.createBuffer();\n    if (!bufferBuffer) {\n      throw new Error(`Unable to create buffer \"${location}\"`);\n    }\n    const record = {\n      buffer: bufferBuffer,\n      location: this.getAttributeLocation(location),\n    };\n    this.bufferRecord[location] = record;\n    return record;\n  }\n\n  deleteBuffer(location: LocationName) {\n    if (this.bufferRecord[location]) {\n      this.gl.deleteBuffer(this.bufferRecord[location].buffer);\n      delete this.bufferRecord[location];\n    }\n  }\n\n  getAttributeBuffer(location: LocationName): BufferInfo {\n    const attribute = this.bufferRecord[location];\n    if (!attribute) {\n      throw new Error(\n        `Attribute \"${location}\" not created. Make sure \"createBuffer\" is called.`,\n      );\n    }\n    return attribute;\n  }\n\n  destroy(): void {\n    Object.keys(this.bufferRecord).forEach((location) =>\n      this.deleteBuffer(location),\n    );\n  }\n}\n",
  "import { GL } from 'gl/attributes/Constants';\nimport { Disposable } from '../../lifecycle/Disposable';\nimport { GLPrograms } from '../programs/GLPrograms';\n\nexport class GLUniforms extends Disposable {\n  private gl: GL;\n  private programs: GLPrograms;\n\n  constructor(gl: GL, programs: GLPrograms) {\n    super();\n    this.gl = gl;\n    this.programs = programs;\n  }\n\n  getUniformLocation(\n    name: string,\n    programId?: string,\n  ): WebGLUniformLocation {\n    const program = this.programs.getProgram(programId)!;\n    return this.gl.getUniformLocation(program, name)!;\n  }\n}\n",
  "/**\n * Prints tree horizontally\n * @param  {Node}                       root\n * @param  {Function(node:Node):String} [printNode]\n * @return {String}\n */\nexport function print (root, printNode = (n) => n.key) {\n  var out = [];\n  row(root, '', true, (v) => out.push(v), printNode);\n  return out.join('');\n}\n\n/**\n * Prints level of the tree\n * @param  {Node}                        root\n * @param  {String}                      prefix\n * @param  {Boolean}                     isTail\n * @param  {Function(in:string):void}    out\n * @param  {Function(node:Node):String}  printNode\n */\nfunction row (root, prefix, isTail, out, printNode) {\n  if (root) {\n    out(`${ prefix }${ isTail ? '└── ' : '├── ' }${ printNode(root) }\\n`);\n    const indent = prefix + (isTail ? '    ' : '│   ');\n    if (root.left)  row(root.left,  indent, false, out, printNode);\n    if (root.right) row(root.right, indent, true,  out, printNode);\n  }\n}\n\n/**\n * Is the tree balanced (none of the subtrees differ in height by more than 1)\n * @param  {Node}    root\n * @return {Boolean}\n */\nexport function isBalanced(root) {\n  if (root === null) return true; // If node is empty then return true\n\n  // Get the height of left and right sub trees\n  var lh = height(root.left);\n  var rh = height(root.right);\n\n  if (Math.abs(lh - rh) <= 1 &&\n      isBalanced(root.left)  &&\n      isBalanced(root.right)) return true;\n\n  // If we reach here then tree is not height-balanced\n  return false;\n}\n\n/**\n * The function Compute the 'height' of a tree.\n * Height is the number of nodes along the longest path\n * from the root node down to the farthest leaf node.\n *\n * @param  {Node} node\n * @return {Number}\n */\nfunction height(node) {\n  return node ? (1 + Math.max(height(node.left), height(node.right))) : 0;\n}\n\nexport function loadRecursive (parent, keys, values, start, end) {\n  const size = end - start;\n  if (size > 0) {\n    const middle = start + Math.floor(size / 2);\n    const key    = keys[middle];\n    const data   = values[middle];\n    const node   = { key, data, parent };\n    node.left    = loadRecursive(node, keys, values, start, middle);\n    node.right   = loadRecursive(node, keys, values, middle + 1, end);\n    return node;\n  }\n  return null;\n}\n\nexport function markBalance(node) {\n  if (node === null) return 0;\n  const lh = markBalance(node.left);\n  const rh = markBalance(node.right);\n\n  node.balanceFactor = lh - rh;\n  return Math.max(lh, rh) + 1;\n}\n\nexport function sort(keys, values, left, right, compare) {\n  if (left >= right) return;\n\n  // eslint-disable-next-line no-bitwise\n  const pivot = keys[(left + right) >> 1];\n  let i = left - 1;\n  let j = right + 1;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    do i++; while (compare(keys[i], pivot) < 0);\n    do j--; while (compare(keys[j], pivot) > 0);\n    if (i >= j) break;\n\n    let tmp = keys[i];\n    keys[i] = keys[j];\n    keys[j] = tmp;\n\n    tmp = values[i];\n    values[i] = values[j];\n    values[j] = tmp;\n  }\n\n  sort(keys, values,  left,     j, compare);\n  sort(keys, values, j + 1, right, compare);\n}\n",
  "import { print, isBalanced, loadRecursive, markBalance, sort } from './utils';\n\n// function createNode (parent, left, right, height, key, data) {\n//   return { parent, left, right, balanceFactor: height, key, data };\n// }\n\n/**\n * @typedef {{\n *   parent:        ?Node,\n *   left:          ?Node,\n *   right:         ?Node,\n *   balanceFactor: number,\n *   key:           Key,\n *   data:          Value\n * }} Node\n */\n\n/**\n * @typedef {*} Key\n */\n\n/**\n * @typedef {*} Value\n */\n\n/**\n * Default comparison function\n * @param {Key} a\n * @param {Key} b\n * @returns {number}\n */\nfunction DEFAULT_COMPARE (a, b) { return a > b ? 1 : a < b ? -1 : 0; }\n\n/**\n * Single left rotation\n * @param  {Node} node\n * @return {Node}\n */\nfunction rotateLeft (node) {\n  var rightNode = node.right;\n  node.right    = rightNode.left;\n\n  if (rightNode.left) rightNode.left.parent = node;\n\n  rightNode.parent = node.parent;\n  if (rightNode.parent) {\n    if (rightNode.parent.left === node) {\n      rightNode.parent.left = rightNode;\n    } else {\n      rightNode.parent.right = rightNode;\n    }\n  }\n\n  node.parent    = rightNode;\n  rightNode.left = node;\n\n  node.balanceFactor += 1;\n  if (rightNode.balanceFactor < 0) {\n    node.balanceFactor -= rightNode.balanceFactor;\n  }\n\n  rightNode.balanceFactor += 1;\n  if (node.balanceFactor > 0) {\n    rightNode.balanceFactor += node.balanceFactor;\n  }\n  return rightNode;\n}\n\nfunction rotateRight (node) {\n  var leftNode = node.left;\n  node.left = leftNode.right;\n  if (node.left) node.left.parent = node;\n\n  leftNode.parent = node.parent;\n  if (leftNode.parent) {\n    if (leftNode.parent.left === node) {\n      leftNode.parent.left = leftNode;\n    } else {\n      leftNode.parent.right = leftNode;\n    }\n  }\n\n  node.parent    = leftNode;\n  leftNode.right = node;\n\n  node.balanceFactor -= 1;\n  if (leftNode.balanceFactor > 0) {\n    node.balanceFactor -= leftNode.balanceFactor;\n  }\n\n  leftNode.balanceFactor -= 1;\n  if (node.balanceFactor < 0) {\n    leftNode.balanceFactor += node.balanceFactor;\n  }\n\n  return leftNode;\n}\n\n// function leftBalance (node) {\n//   if (node.left.balanceFactor === -1) rotateLeft(node.left);\n//   return rotateRight(node);\n// }\n\n// function rightBalance (node) {\n//   if (node.right.balanceFactor === 1) rotateRight(node.right);\n//   return rotateLeft(node);\n// }\n\nexport default class AVLTree {\n  /**\n   * Callback for comparator\n   * @callback comparatorCallback\n   * @param {Key} a\n   * @param {Key} b\n   * @returns {number}\n   */\n\n  /**\n   * @class AVLTree\n   * @constructor\n   * @param  {comparatorCallback} [comparator]\n   * @param  {boolean}            [noDuplicates=false] Disallow duplicates\n   */\n  constructor (comparator, noDuplicates = false) {\n    this._comparator = comparator || DEFAULT_COMPARE;\n    this._root = null;\n    this._size = 0;\n    this._noDuplicates = !!noDuplicates;\n  }\n\n  /**\n   * Clear the tree\n   * @return {AVLTree}\n   */\n  destroy() {\n    return this.clear();\n  }\n\n  /**\n   * Clear the tree\n   * @return {AVLTree}\n   */\n  clear() {\n    this._root = null;\n    this._size = 0;\n    return this;\n  }\n\n  /**\n   * Number of nodes\n   * @return {number}\n   */\n  get size () {\n    return this._size;\n  }\n\n  /**\n   * Whether the tree contains a node with the given key\n   * @param  {Key} key\n   * @return {boolean} true/false\n   */\n  contains (key) {\n    if (this._root)  {\n      var node       = this._root;\n      var comparator = this._comparator;\n      while (node)  {\n        var cmp = comparator(key, node.key);\n        if      (cmp === 0) return true;\n        else if (cmp < 0)   node = node.left;\n        else                node = node.right;\n      }\n    }\n    return false;\n  }\n\n  /* eslint-disable class-methods-use-this */\n\n  /**\n   * Successor node\n   * @param  {Node} node\n   * @return {?Node}\n   */\n  next (node) {\n    var successor = node;\n    if (successor) {\n      if (successor.right) {\n        successor = successor.right;\n        while (successor.left) successor = successor.left;\n      } else {\n        successor = node.parent;\n        while (successor && successor.right === node) {\n          node = successor; successor = successor.parent;\n        }\n      }\n    }\n    return successor;\n  }\n\n  /**\n   * Predecessor node\n   * @param  {Node} node\n   * @return {?Node}\n   */\n  prev (node) {\n    var predecessor = node;\n    if (predecessor) {\n      if (predecessor.left) {\n        predecessor = predecessor.left;\n        while (predecessor.right) predecessor = predecessor.right;\n      } else {\n        predecessor = node.parent;\n        while (predecessor && predecessor.left === node) {\n          node = predecessor;\n          predecessor = predecessor.parent;\n        }\n      }\n    }\n    return predecessor;\n  }\n  /* eslint-enable class-methods-use-this */\n\n  /**\n   * Callback for forEach\n   * @callback forEachCallback\n   * @param {Node} node\n   * @param {number} index\n   */\n\n  /**\n   * @param  {forEachCallback} callback\n   * @return {AVLTree}\n   */\n  forEach(callback) {\n    var current = this._root;\n    var s = [], done = false, i = 0;\n\n    while (!done) {\n      // Reach the left most Node of the current Node\n      if (current) {\n        // Place pointer to a tree node on the stack\n        // before traversing the node's left subtree\n        s.push(current);\n        current = current.left;\n      } else {\n        // BackTrack from the empty subtree and visit the Node\n        // at the top of the stack; however, if the stack is\n        // empty you are done\n        if (s.length > 0) {\n          current = s.pop();\n          callback(current, i++);\n\n          // We have visited the node and its left\n          // subtree. Now, it's right subtree's turn\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Walk key range from `low` to `high`. Stops if `fn` returns a value.\n   * @param  {Key}      low\n   * @param  {Key}      high\n   * @param  {Function} fn\n   * @param  {*?}       ctx\n   * @return {SplayTree}\n   */\n  range(low, high, fn, ctx) {\n    const Q = [];\n    const compare = this._comparator;\n    let node = this._root, cmp;\n\n    while (Q.length !== 0 || node) {\n      if (node) {\n        Q.push(node);\n        node = node.left;\n      } else {\n        node = Q.pop();\n        cmp = compare(node.key, high);\n        if (cmp > 0) {\n          break;\n        } else if (compare(node.key, low) >= 0) {\n          if (fn.call(ctx, node)) return this; // stop if smth is returned\n        }\n        node = node.right;\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Returns all keys in order\n   * @return {Array<Key>}\n   */\n  keys () {\n    var current = this._root;\n    var s = [], r = [], done = false;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          r.push(current.key);\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return r;\n  }\n\n  /**\n   * Returns `data` fields of all nodes in order.\n   * @return {Array<Value>}\n   */\n  values () {\n    var current = this._root;\n    var s = [], r = [], done = false;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          r.push(current.data);\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return r;\n  }\n\n  /**\n   * Returns node at given index\n   * @param  {number} index\n   * @return {?Node}\n   */\n  at (index) {\n    // removed after a consideration, more misleading than useful\n    // index = index % this.size;\n    // if (index < 0) index = this.size - index;\n\n    var current = this._root;\n    var s = [], done = false, i = 0;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          if (i === index) return current;\n          i++;\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns node with the minimum key\n   * @return {?Node}\n   */\n  minNode () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.left) node = node.left;\n    return node;\n  }\n\n  /**\n   * Returns node with the max key\n   * @return {?Node}\n   */\n  maxNode () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.right) node = node.right;\n    return node;\n  }\n\n  /**\n   * Min key\n   * @return {?Key}\n   */\n  min () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.left) node = node.left;\n    return node.key;\n  }\n\n  /**\n   * Max key\n   * @return {?Key}\n   */\n  max () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.right) node = node.right;\n    return node.key;\n  }\n\n  /**\n   * @return {boolean} true/false\n   */\n  isEmpty() {\n    return !this._root;\n  }\n\n  /**\n   * Removes and returns the node with smallest key\n   * @return {?Node}\n   */\n  pop () {\n    var node = this._root, returnValue = null;\n    if (node) {\n      while (node.left) node = node.left;\n      returnValue = { key: node.key, data: node.data };\n      this.remove(node.key);\n    }\n    return returnValue;\n  }\n\n  /**\n   * Removes and returns the node with highest key\n   * @return {?Node}\n   */\n  popMax () {\n    var node = this._root, returnValue = null;\n    if (node) {\n      while (node.right) node = node.right;\n      returnValue = { key: node.key, data: node.data };\n      this.remove(node.key);\n    }\n    return returnValue;\n  }\n\n  /**\n   * Find node by key\n   * @param  {Key} key\n   * @return {?Node}\n   */\n  find (key) {\n    var root = this._root;\n    // if (root === null)    return null;\n    // if (key === root.key) return root;\n\n    var subtree = root, cmp;\n    var compare = this._comparator;\n    while (subtree) {\n      cmp = compare(key, subtree.key);\n      if      (cmp === 0) return subtree;\n      else if (cmp < 0)   subtree = subtree.left;\n      else                subtree = subtree.right;\n    }\n\n    return null;\n  }\n\n  /**\n   * Insert a node into the tree\n   * @param  {Key} key\n   * @param  {Value} [data]\n   * @return {?Node}\n   */\n  insert (key, data) {\n    if (!this._root) {\n      this._root = {\n        parent: null, left: null, right: null, balanceFactor: 0,\n        key, data\n      };\n      this._size++;\n      return this._root;\n    }\n\n    var compare = this._comparator;\n    var node    = this._root;\n    var parent  = null;\n    var cmp     = 0;\n\n    if (this._noDuplicates) {\n      while (node) {\n        cmp = compare(key, node.key);\n        parent = node;\n        if      (cmp === 0) return null;\n        else if (cmp < 0)   node = node.left;\n        else                node = node.right;\n      }\n    } else {\n      while (node) {\n        cmp = compare(key, node.key);\n        parent = node;\n        if      (cmp <= 0)  node = node.left; //return null;\n        else                node = node.right;\n      }\n    }\n\n    var newNode = {\n      left: null,\n      right: null,\n      balanceFactor: 0,\n      parent, key, data\n    };\n    var newRoot;\n    if (cmp <= 0) parent.left  = newNode;\n    else         parent.right = newNode;\n\n    while (parent) {\n      cmp = compare(parent.key, key);\n      if (cmp < 0) parent.balanceFactor -= 1;\n      else         parent.balanceFactor += 1;\n\n      if        (parent.balanceFactor === 0) break;\n      else if   (parent.balanceFactor < -1) {\n        // inlined\n        //var newRoot = rightBalance(parent);\n        if (parent.right.balanceFactor === 1) rotateRight(parent.right);\n        newRoot = rotateLeft(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        break;\n      } else if (parent.balanceFactor > 1) {\n        // inlined\n        // var newRoot = leftBalance(parent);\n        if (parent.left.balanceFactor === -1) rotateLeft(parent.left);\n        newRoot = rotateRight(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        break;\n      }\n      parent = parent.parent;\n    }\n\n    this._size++;\n    return newNode;\n  }\n\n  /**\n   * Removes the node from the tree. If not found, returns null.\n   * @param  {Key} key\n   * @return {?Node}\n   */\n  remove (key) {\n    if (!this._root) return null;\n\n    var node = this._root;\n    var compare = this._comparator;\n    var cmp = 0;\n\n    while (node) {\n      cmp = compare(key, node.key);\n      if      (cmp === 0) break;\n      else if (cmp < 0)   node = node.left;\n      else                node = node.right;\n    }\n    if (!node) return null;\n\n    var returnValue = node.key;\n    var max, min;\n\n    if (node.left) {\n      max = node.left;\n\n      while (max.left || max.right) {\n        while (max.right) max = max.right;\n\n        node.key = max.key;\n        node.data = max.data;\n        if (max.left) {\n          node = max;\n          max = max.left;\n        }\n      }\n\n      node.key  = max.key;\n      node.data = max.data;\n      node = max;\n    }\n\n    if (node.right) {\n      min = node.right;\n\n      while (min.left || min.right) {\n        while (min.left) min = min.left;\n\n        node.key  = min.key;\n        node.data = min.data;\n        if (min.right) {\n          node = min;\n          min = min.right;\n        }\n      }\n\n      node.key  = min.key;\n      node.data = min.data;\n      node = min;\n    }\n\n    var parent = node.parent;\n    var pp     = node;\n    var newRoot;\n\n    while (parent) {\n      if (parent.left === pp) parent.balanceFactor -= 1;\n      else                    parent.balanceFactor += 1;\n\n      if        (parent.balanceFactor < -1) {\n        // inlined\n        //var newRoot = rightBalance(parent);\n        if (parent.right.balanceFactor === 1) rotateRight(parent.right);\n        newRoot = rotateLeft(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        parent = newRoot;\n      } else if (parent.balanceFactor > 1) {\n        // inlined\n        // var newRoot = leftBalance(parent);\n        if (parent.left.balanceFactor === -1) rotateLeft(parent.left);\n        newRoot = rotateRight(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        parent = newRoot;\n      }\n\n      if (parent.balanceFactor === -1 || parent.balanceFactor === 1) break;\n\n      pp     = parent;\n      parent = parent.parent;\n    }\n\n    if (node.parent) {\n      if (node.parent.left === node) node.parent.left  = null;\n      else                           node.parent.right = null;\n    }\n\n    if (node === this._root) this._root = null;\n\n    this._size--;\n    return returnValue;\n  }\n\n  /**\n   * Bulk-load items\n   * @param  {Array<Key>}  keys\n   * @param  {Array<Value>}  [values]\n   * @return {AVLTree}\n   */\n  load(keys = [], values = [], presort) {\n    if (this._size !== 0) throw new Error('bulk-load: tree is not empty');\n    const size = keys.length;\n    if (presort) sort(keys, values, 0, size - 1, this._comparator);\n    this._root = loadRecursive(null, keys, values, 0, size);\n    markBalance(this._root);\n    this._size = size;\n    return this;\n  }\n\n  /**\n   * Returns true if the tree is balanced\n   * @return {boolean}\n   */\n  isBalanced() {\n    return isBalanced(this._root);\n  }\n\n  /**\n   * String representation of the tree - primitive horizontal print-out\n   * @param  {Function(Node):string} [printNode]\n   * @return {string}\n   */\n  toString (printNode) {\n    return print(this._root, printNode);\n  }\n}\n\nAVLTree.default = AVLTree;\n",
  "import { DEFAULT_MAX_TEXTURE_SIZE, DEFAULT_MIN_TEXTURE_SIZE } from \"./TextureSlotAllocator\";\nexport class TextureSlot {\n    size;\n    slotNumber;\n    x;\n    y;\n    textureIndex;\n    parent;\n    sibbling;\n    textureSizeLimits;\n    constructor(size, slotNumber, parent, textureSizeLimits) {\n        this.textureSizeLimits = parent?.textureSizeLimits ?? textureSizeLimits ?? { min: DEFAULT_MIN_TEXTURE_SIZE, max: DEFAULT_MAX_TEXTURE_SIZE };\n        this.size = size;\n        this.slotNumber = slotNumber;\n        this.parent = parent;\n        this.sibbling = undefined;\n        const { x, y, textureIndex } = this.calculatePosition(size, slotNumber);\n        this.x = x;\n        this.y = y;\n        this.textureIndex = textureIndex;\n    }\n    calculateTextureIndex(size, slotNumber) {\n        const [w, h] = size;\n        const slotsPerTexture = (this.textureSizeLimits.max / w) * (this.textureSizeLimits.max / h);\n        return Math.floor(slotNumber / slotsPerTexture);\n    }\n    calculatePosition(size, slotNumber) {\n        const [w, h] = size;\n        const slotsPerRow = this.textureSizeLimits.max / w;\n        const slotsPerColumn = this.textureSizeLimits.max / h;\n        const x = (slotNumber % slotsPerRow) * w;\n        const y = (Math.floor(slotNumber / slotsPerRow) % slotsPerColumn) * h;\n        return { x, y, textureIndex: this.calculateTextureIndex(size, slotNumber) };\n    }\n    getTag() {\n        return TextureSlot.getTag(this);\n    }\n    static getTag(slot) {\n        return `${slot.size[0]}x${slot.size[1]}-#${slot.slotNumber}`;\n    }\n    static positionToTextureSlot(x, y, size, textureIndex, parent) {\n        const [w, h] = size;\n        const slotsPerRow = parent.textureSizeLimits.max / w;\n        const slotsPerTexture = (parent.textureSizeLimits.max / w) * (parent.textureSizeLimits.max / h);\n        const slotNumber = slotsPerTexture * textureIndex + (y / h) * slotsPerRow + (x / w);\n        return new TextureSlot(size, slotNumber, parent);\n    }\n    getPosition() {\n        return { x: this.x, y: this.y, size: this.size, textureIndex: this.textureIndex };\n    }\n    canSplitHorizontally() {\n        const [, h] = this.size;\n        return h > this.textureSizeLimits.min;\n    }\n    canSplitVertically() {\n        const [w,] = this.size;\n        return w > this.textureSizeLimits.min;\n    }\n    splitHorizontally() {\n        const { x, y, size, textureIndex } = this;\n        const [w, h] = size;\n        if (!this.canSplitHorizontally()) {\n            throw new Error(`Cannot split texture slot of size ${w} horizontally`);\n        }\n        const halfWidth = w / 2;\n        const left = TextureSlot.positionToTextureSlot(x, y, [halfWidth, h], textureIndex, this);\n        const right = TextureSlot.positionToTextureSlot(x + halfWidth, y, [halfWidth, h], textureIndex, this);\n        left.sibbling = right;\n        right.sibbling = left;\n        return [left, right];\n    }\n    splitVertically() {\n        const { x, y, size, textureIndex } = this;\n        const [w, h] = size;\n        if (!this.canSplitVertically()) {\n            throw new Error(`Cannot split texture slot of size ${h} vertically`);\n        }\n        const halfHeight = h / 2;\n        const top = TextureSlot.positionToTextureSlot(x, y, [w, halfHeight], textureIndex, this);\n        const bottom = TextureSlot.positionToTextureSlot(x, y + halfHeight, [w, halfHeight], textureIndex, this);\n        top.sibbling = bottom;\n        bottom.sibbling = top;\n        return [top, bottom];\n    }\n}\n//# sourceMappingURL=TextureSlot.js.map",
  "//  This returns the smallest size that is a power of 2 and is larger than the given size\nexport function getMinTextureSlotSize(size, minSize) {\n    return Math.max(minSize, Math.pow(2, Math.ceil(Math.log(size) / Math.log(2))));\n}\n//  This rearranges the 'count' sprites into various sprite sheets\nexport function getFlexSizes(w, h, count, textureSizeLimits) {\n    if (count < 1) {\n        throw new Error(\"Invalid count\");\n    }\n    const wFixed = getMinTextureSlotSize(w, textureSizeLimits.min), hFixed = getMinTextureSlotSize(h, textureSizeLimits.min);\n    const flexSizes = new Map();\n    let wSize = textureSizeLimits.min;\n    for (let i = 1; i <= count; i++) {\n        wSize = getMinTextureSlotSize(wFixed * i, textureSizeLimits.min);\n        const hSize = getMinTextureSlotSize(hFixed * Math.ceil(count / i), textureSizeLimits.min);\n        flexSizes.set(wSize, hSize);\n    }\n    for (let size = wSize; size <= textureSizeLimits.max; size *= 2) {\n        if (!flexSizes.has(size)) {\n            flexSizes.set(size, hFixed);\n        }\n    }\n    return flexSizes;\n}\n//# sourceMappingURL=TextureUtils.js.map",
  "// To recognize dom types (see https://bun.sh/docs/typescript#dom-types):\n/// <reference lib=\"dom\" />\n/// <reference lib=\"dom.iterable\" />\nimport AVLTree from 'avl';\nimport { TextureSlot } from './TextureSlot';\nimport { getFlexSizes } from './TextureUtils';\nconst DEBUG = false;\nexport const DEFAULT_MIN_TEXTURE_SIZE = 16;\nexport const DEFAULT_MAX_TEXTURE_SIZE = 4096;\nexport const DEFAULT_NUM_TEXTURE_SHEETS = 16;\nexport class TextureSlotAllocator {\n    //  AVL tree of texture slots, sorted by size\n    textureSlots = new AVLTree((slot1, slot2) => {\n        const sizeDiff = slot1.size[0] * slot1.size[1] - slot2.size[0] * slot2.size[1];\n        if (sizeDiff !== 0) {\n            return sizeDiff;\n        }\n        return slot1.slotNumber - slot2.slotNumber;\n    }, false);\n    allocatedTextures = {};\n    minTextureSize;\n    maxTextureSize;\n    numTextureSheets;\n    initialSlots = [];\n    constructor({ numTextureSheets, minTextureSize, maxTextureSize, excludeTexture } = {}, gl) {\n        this.numTextureSheets = numTextureSheets ?? DEFAULT_NUM_TEXTURE_SHEETS;\n        this.minTextureSize = minTextureSize ?? DEFAULT_MIN_TEXTURE_SIZE;\n        this.maxTextureSize = maxTextureSize ?? DEFAULT_MAX_TEXTURE_SIZE;\n        if (gl) {\n            this.numTextureSheets = Math.min(this.numTextureSheets, gl.getParameter(WebGL2RenderingContext.MAX_TEXTURE_IMAGE_UNITS));\n            this.maxTextureSize = Math.min(this.maxTextureSize, gl.getParameter(WebGL2RenderingContext.MAX_TEXTURE_SIZE));\n            this.minTextureSize = Math.min(this.minTextureSize, this.maxTextureSize);\n        }\n        for (let i = 0; i < this.numTextureSheets; i++) {\n            if (excludeTexture?.(i)) {\n                continue;\n            }\n            this.initialSlots.push(new TextureSlot([this.maxTextureSize, this.maxTextureSize], i, undefined, {\n                min: this.minTextureSize,\n                max: this.maxTextureSize,\n            }));\n        }\n        this.initialSlots.forEach(slot => this.textureSlots.insert(slot));\n    }\n    allocate(w, h, count = 1) {\n        const { size, slotNumber, x, y, textureIndex } = this.allocateHelper(w, h, count);\n        return { size, slotNumber, x, y, textureIndex };\n    }\n    deallocate(slot) {\n        if (!this.isSlotUsed(slot)) {\n            throw new Error('Slot is not allocated');\n        }\n        const textureSlot = this.allocatedTextures[TextureSlot.getTag(slot)];\n        this.deallocateHelper(textureSlot);\n    }\n    get countUsedTextureSheets() {\n        return this.initialSlots.filter(slot => this.isSlotUsed(slot)).length;\n    }\n    allocateHelper(w, h, count = 1) {\n        const flexSizes = getFlexSizes(w, h, count, { min: this.minTextureSize, max: this.maxTextureSize });\n        const slot = this.findSlot(flexSizes);\n        if (!slot) {\n            throw new Error(`Could not find a slot for texture to fit ${count} sprites of size ${w}x${h}`);\n        }\n        this.textureSlots.remove(slot);\n        //  Fit the best size into the slot\n        const [bestWidth, bestHeight] = this.bestFit(flexSizes, slot);\n        return this.fitSlot(slot, bestWidth, bestHeight);\n    }\n    findSlot(flexSizes) {\n        for (let i = 0; i < this.textureSlots.size; i++) {\n            const slot = this.textureSlots.at(i);\n            const textureSlot = slot.key;\n            const [w, h] = textureSlot.size;\n            if (flexSizes.get(w) <= h) {\n                return textureSlot;\n            }\n        }\n        return null;\n    }\n    calculateRatio(w, h) {\n        return Math.max(w / h, h / w);\n    }\n    bestFit(flexSizes, slot) {\n        const [slotWidth, slotHeight] = slot.size;\n        let bestWidth = slot.textureSizeLimits.max;\n        flexSizes.forEach((hSize, wSize) => {\n            if (wSize <= slotWidth && hSize <= slotHeight) {\n                const product = wSize * hSize;\n                const bestProduct = flexSizes.get(bestWidth) * bestWidth;\n                if (product < bestProduct) {\n                    bestWidth = wSize;\n                }\n                else if (product === bestProduct) {\n                    const ratio = this.calculateRatio(wSize, hSize);\n                    if (ratio < this.calculateRatio(bestWidth, flexSizes.get(bestWidth))) {\n                        bestWidth = wSize;\n                    }\n                }\n            }\n        });\n        return [bestWidth, flexSizes.get(bestWidth)];\n    }\n    isSlotUsed(slot) {\n        return !!this.allocatedTextures[TextureSlot.getTag(slot)];\n    }\n    deallocateHelper(slot) {\n        //  check if we can merge with the sibbling\n        if (slot.parent && slot.sibbling && !this.isSlotUsed(slot.sibbling)) {\n            const sibbling = slot.sibbling;\n            this.textureSlots.remove(sibbling);\n            if (DEBUG && this.textureSlots.find(slot)) {\n                throw new Error('Slot is not expected to be in the tree');\n            }\n            const parent = slot.parent;\n            this.deallocateHelper(parent);\n            return;\n        }\n        this.textureSlots.insert(slot);\n        delete this.allocatedTextures[slot.getTag()];\n    }\n    trySplitHorizontally(slot, w, h) {\n        if (slot.canSplitHorizontally()) {\n            const [leftColumn, rightColumn] = slot.splitHorizontally();\n            // First try to split vertically\n            if (leftColumn.size[0] >= w) {\n                this.textureSlots.insert(rightColumn);\n                return this.fitSlot(leftColumn, w, h);\n            }\n        }\n        return null;\n    }\n    trySplitVertically(slot, w, h) {\n        if (slot.canSplitVertically()) {\n            const [topRow, bottomRow] = slot.splitVertically();\n            // Then try to split vertically\n            if (topRow.size[1] >= h) {\n                this.textureSlots.insert(bottomRow);\n                return this.fitSlot(topRow, w, h);\n            }\n        }\n        return null;\n    }\n    fitSlot(slot, w, h) {\n        this.allocatedTextures[slot.getTag()] = slot;\n        if (slot.size[0] > slot.size[1]) {\n            const splitAttempt = this.trySplitHorizontally(slot, w, h)\n                ?? this.trySplitVertically(slot, w, h);\n            if (splitAttempt) {\n                return splitAttempt;\n            }\n        }\n        else {\n            const splitAttempt = this.trySplitVertically(slot, w, h)\n                ?? this.trySplitHorizontally(slot, w, h);\n            if (splitAttempt) {\n                return splitAttempt;\n            }\n        }\n        //  Return that slot if we can't split it further\n        return slot;\n    }\n    listSlots() {\n        this.textureSlots.forEach((node) => {\n            console.log(node.key?.getTag());\n        });\n    }\n}\n//# sourceMappingURL=TextureSlotAllocator.js.map",
  "import { GLUniforms } from 'gl/uniforms/GLUniforms';\nimport { Disposable } from '../../lifecycle/Disposable';\nimport { GL, MAX_TEXTURE_SIZE_LOC, TEXTURE_UNIFORM_LOC } from '../attributes/Constants';\nimport { MediaData } from './MediaData';\nimport { Slot, TextureIndex } from \"texture-slot-allocator/dist/src/texture/TextureSlot\";\nimport { TextureSlotAllocator } from 'texture-slot-allocator/dist/src/texture/TextureSlotAllocator';\n\nexport type TextureId = `TEXTURE${TextureIndex}`;\nexport const TEXTURE_INDEX_FOR_VIDEO = 15;\n\nexport type Url = string;\n\nexport class TextureManager extends Disposable {\n  private gl: GL;\n  private uniforms: GLUniforms;\n  private textureBuffers: Record<TextureId | string, WebGLTexture> = {};\n  private tempContext = (new OffscreenCanvas(1, 1)).getContext('2d')!;\n  private textureSlotAllocator = new TextureSlotAllocator({\n    excludeTexture: (tex) => tex === TEXTURE_INDEX_FOR_VIDEO\n  });\n  private textureSlotAllocatorForVideo = new TextureSlotAllocator({\n    excludeTexture: (tex) => tex !== TEXTURE_INDEX_FOR_VIDEO\n  });\n\n  constructor(gl: GL, uniforms: GLUniforms) {\n    super();\n    this.gl = gl;\n    this.uniforms = uniforms;\n    this.tempContext.imageSmoothingEnabled = true;\n  }\n\n  initialize() {\n    this.initTextureUniforms();\n    this.initMaxTexture();\n  }\n\n  private getTexture(textureId: TextureId) {\n    if (!this.textureBuffers[textureId]) {\n      const texture = this.gl.createTexture();\n      if (!texture) {\n        return;\n      }\n      this.gl.bindTexture(GL.TEXTURE_2D, texture);\n      this.gl.texImage2D(\n        GL.TEXTURE_2D,\n        0,\n        GL.RGBA,\n        this.textureSlotAllocator.maxTextureSize,\n        this.textureSlotAllocator.maxTextureSize,\n        0,\n        GL.RGBA,\n        GL.UNSIGNED_BYTE,\n        null,\n      );\n\n      this.textureBuffers[textureId] = texture;\n      this.addOnDestroy(() => this.gl.deleteTexture(texture));\n    }\n    return this.textureBuffers[textureId];\n  }\n\n  private loadTexture(\n    mediaInfo: MediaData,\n    textureId: TextureId,\n    texture: WebGLTexture,\n    sourceRect: [number, number, number, number],\n    destRect: [number, number, number, number],\n  ): void {\n    this.gl.activeTexture(GL[textureId]);\n    this.gl.bindTexture(GL.TEXTURE_2D, texture);\n    this.applyTexImage2d(mediaInfo, sourceRect, destRect);\n    this.gl.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_MIN_FILTER, GL.LINEAR);\n  }\n\n  applyTexImage2d(\n    mediaInfo: MediaData,\n    [srcX, srcY, srcWidth, srcHeight]: number[],\n    [dstX, dstY, dstWidth, dstHeight]: number[],\n  ): void {\n    if (srcWidth === dstWidth && srcHeight === dstHeight && !srcX && !srcY) {\n      this.gl.texSubImage2D(\n        GL.TEXTURE_2D,\n        0,\n        dstX,\n        dstY,\n        dstWidth,\n        dstHeight,\n        GL.RGBA,\n        GL.UNSIGNED_BYTE,\n        mediaInfo.texImgSrc,\n      );\n    } else {\n      const canvas = this.tempContext.canvas;\n      if (mediaInfo.texImgSrc instanceof ImageData) {\n        canvas.width = dstWidth || mediaInfo.width;\n        canvas.height = dstHeight || mediaInfo.height;\n        this.tempContext.putImageData(mediaInfo.texImgSrc, 0, 0);\n        if (srcX || srcY) {\n          console.warn('Offset not available when sending imageData');\n        }\n      } else {\n        const sourceWidth = srcWidth || mediaInfo.width;\n        const sourceHeight = srcHeight || mediaInfo.height;\n        canvas.width = dstWidth || sourceWidth;\n        canvas.height = dstHeight || sourceHeight;\n        this.tempContext.drawImage(\n          mediaInfo.texImgSrc,\n          srcX,\n          srcY,\n          sourceWidth,\n          sourceHeight,\n          0,\n          0,\n          canvas.width,\n          canvas.height,\n        );\n      }\n      this.gl.texSubImage2D(\n        GL.TEXTURE_2D,\n        0,\n        dstX,\n        dstY,\n        canvas.width,\n        canvas.height,\n        GL.RGBA,\n        GL.UNSIGNED_BYTE,\n        canvas,\n      );\n    }\n  }\n\n  allocateSlotForImage(mediaInfo: MediaData): { slot: Slot, refreshCallback: () => void } {\n    const allocator = mediaInfo.isVideo ? this.textureSlotAllocatorForVideo : this.textureSlotAllocator;\n    const slot = allocator.allocate(mediaInfo.width, mediaInfo.height);\n    const textureId: TextureId = `TEXTURE${slot.textureIndex}`;\n    const webGLTexture = this.getTexture(textureId);\n    if (!webGLTexture) {\n      throw new Error(`Invalid texture Id ${textureId}`);\n    }\n\n    const refreshCallback = this.assignImageToTexture(\n      mediaInfo,\n      textureId,\n      webGLTexture,\n      [0, 0, mediaInfo.width, mediaInfo.height],\n      [slot.x, slot.y, ...slot.size],\n    );\n    return { slot, refreshCallback };\n  }\n\n  private assignImageToTexture(\n    imageInfo: MediaData,\n    textureId: TextureId,\n    texture: WebGLTexture,\n    sourceRect?: [number, number, number, number],\n    destRect?: [number, number, number, number],\n  ): () => void {\n    const srcRect = sourceRect ?? [0, 0, imageInfo.width, imageInfo.height];\n    const dstRect = destRect ?? [0, 0, srcRect[2], srcRect[3]];\n    const refreshTexture = () => {\n      this.gl.bindTexture(GL.TEXTURE_2D, texture);\n      this.applyTexImage2d(imageInfo, srcRect, dstRect);\n    };\n\n    if (imageInfo.active) {\n      refreshTexture();\n    } else {\n      this.loadTexture(imageInfo, textureId, texture, srcRect, dstRect);\n      imageInfo.active = true;\n    }\n    return refreshTexture;\n  }\n\n  setupTextureForVideo(textureId: TextureId) {\n    const texture = this.getTexture(textureId);\n    if (texture) {\n      this.gl.activeTexture(GL[textureId]);\n      this.gl.bindTexture(GL.TEXTURE_2D, texture);\n\n      this.gl.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_MIN_FILTER, GL.LINEAR);\n      this.gl.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_MAG_FILTER, GL.LINEAR);\n    }\n  }\n\n  generateMipMap(textureId: TextureId) {\n    const texture = this.getTexture(textureId);\n    if (texture) {\n      this.gl.activeTexture(GL[textureId]);\n      this.gl.bindTexture(GL.TEXTURE_2D, texture);\n\n      this.gl.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_MIN_FILTER, GL.LINEAR_MIPMAP_LINEAR);\n      this.gl.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_MAG_FILTER, GL.LINEAR);\n      this.gl.generateMipmap(GL.TEXTURE_2D);\n    }\n  }\n\n  private initTextureUniforms() {\n    const maxTextureUnits = this.gl.getParameter(GL.MAX_TEXTURE_IMAGE_UNITS);\n    const arrayOfTextureIndex = new Array(maxTextureUnits).fill(null).map((_, index) => index);\t//\t0, 1, 2, 3... 16\n    const textureUniformLocation = this.uniforms.getUniformLocation(TEXTURE_UNIFORM_LOC);\n    this.gl.uniform1iv(textureUniformLocation, arrayOfTextureIndex);\n  }\n\n  private initMaxTexture() {\n    const loc = this.uniforms.getUniformLocation(MAX_TEXTURE_SIZE_LOC);\n    this.gl.uniform1f(loc, this.textureSlotAllocator.maxTextureSize);\n  }\n}\n",
  "import { Refresh } from 'updates/Refresh';\nimport { Disposable } from '../../lifecycle/Disposable';\nimport { Schedule } from 'core/motor/Motor';\n\nexport class MediaData extends Disposable implements Refresh {\n  readonly texImgSrc: TexImageSource;\n  active: boolean = false;\n  readonly width: number;\n  readonly height: number;\n  readonly isVideo: boolean;\n  refreshCallback?(): void;\n  schedule?: Partial<Schedule>;\n\n  constructor(image: TexImageSource, refreshRate?: number) {\n    super();\n    this.texImgSrc = image;\n    const img: any = image;\n    this.isVideo = !!(img.videoWidth || img.videoHeight);\n    this.width = img.naturalWidth ?? img.videoWidth ?? img.displayWidth ?? img.width?.baseValue?.value ?? img.width;\n    this.height = img.naturalHeight ?? img.videoHeight ?? img.displayHeight ?? img.height?.baseValue?.value ?? img.height;\n    this.schedule = refreshRate ? { period: 1000 / refreshRate } : undefined;\n    if (!this.width || !this.height) {\n      throw new Error('Invalid image');\n    }\n  }\n\n  refresh(): void {\n    this.refreshCallback?.();\n  }\n\n  static createFromCanvas(canvas: OffscreenCanvas | HTMLCanvasElement): MediaData {\n    return new MediaData(canvas);\n  }\n\n  static async loadImage(src: string): Promise<MediaData> {\n    const image = await new Promise<HTMLImageElement>((resolve, reject) => {\n      const image = new Image();\n      image.crossOrigin = \"anonymous\";\n      const imageError = (e: ErrorEvent) => reject(e.error);\n      image.addEventListener('error', imageError);\n      image.addEventListener('load', () => resolve(image), { once: true });\n      image.src = src;\n    });\n    return new MediaData(image);\n  }\n\n  static async loadVideo(src: string, volume?: number, fps: number = 30, playSpeed: number = 1, maxRefreshRate: number = Number.MAX_SAFE_INTEGER): Promise<MediaData> {\n    const video = await new Promise<HTMLVideoElement>((resolve, reject) => {\n      const video = document.createElement('video');\n      video.loop = true;\n      if (volume !== undefined) {\n        video.volume = volume;\n      }\n\n      video.addEventListener('loadedmetadata', () => {\n        video.play();\n        video.playbackRate = playSpeed;\n        resolve(video);\n      }, { once: true });\n      document.addEventListener('focus', () => video.play());\n      video.addEventListener('error', (e: ErrorEvent) => reject(e.error));\n      video.src = src;\n\n    });\n    const videoInfo = new MediaData(video, Math.min(fps * playSpeed, maxRefreshRate));\n    videoInfo.addOnDestroy(() => video.pause());\n    return videoInfo;\n  }\n\n  static async loadWebcam(deviceId?: string): Promise<MediaData> {\n    const video = await new Promise<HTMLVideoElement>((resolve, reject) => {\n      const video = document.createElement('video');\n      video.loop = true;\n\n      video.addEventListener('loadedmetadata', () => video.play());\n      video.addEventListener('playing', () => resolve(video), { once: true });\n      video.addEventListener('error', (e: ErrorEvent) => reject(e.error));\n    });\n    const videoInfo = new MediaData(video);\n    let cancelled = false;\n    navigator.mediaDevices\n      .getUserMedia({ video: { deviceId } })\n      .then((stream) => {\n        if (!cancelled) {\n          video.srcObject = stream;\n          videoInfo.addOnDestroy(() =>\n            stream.getTracks().forEach((track) => track.stop()),\n          );\n        }\n      });\n\n    videoInfo.addOnDestroy(() => {\n      cancelled = true;\n      video.pause();\n    });\n    return videoInfo;\n  }\n}\n",
  "import { Disposable } from \"lifecycle/Disposable\";\nimport { Url } from \"./TextureManager\";\nimport { MediaData } from \"./MediaData\";\nimport { CanvasMedia, DrawMedia, ImageMedia, Media, MediaType, VideoMedia, WebcamMedia } from \"./Media\";\n\nexport type MediaId = number;\n\ntype DrawProcedure<T extends Media> = (imageId: MediaId, media: T) => Promise<MediaData>;\n\nfunction createDrawProcedure<T extends Media>(procedure: DrawProcedure<T>): DrawProcedure<T> {\n  return procedure;\n}\n\nexport class ImageManager extends Disposable {\n  private images: Record<MediaId, MediaData> = {};\n  private readonly renderProcedures: Record<MediaType, DrawProcedure<Media>> = {\n    image: createDrawProcedure<ImageMedia>((imageId, media) => this.loadImage(imageId, media.src)) as DrawProcedure<Media>,\n    video: createDrawProcedure<VideoMedia>((imageId, media) => this.loadVideo(imageId, media.src, media.volume, media.fps, media.playSpeed)) as DrawProcedure<Media>,\n    draw: createDrawProcedure<DrawMedia>((imageId, media) => this.drawImage(imageId, media.draw)) as DrawProcedure<Media>,\n    canvas: createDrawProcedure<CanvasMedia>((imageId, media) => this.loadCanvas(imageId, media.canvas)) as DrawProcedure<Media>,\n    webcam: createDrawProcedure<WebcamMedia>((imageId, media) => this.loadWebCam(imageId, media.deviceId)) as DrawProcedure<Media>,\n  };\n\n  hasImageId(imageId: MediaId): boolean {\n    return !!this.getMedia(imageId);\n  }\n\n\n  getMedia(imageId: MediaId): MediaData {\n    return this.images[imageId];\n  }\n\n  setImage(imageId: MediaId, mediaInfo: MediaData): void {\n    this.images[imageId] = mediaInfo;\n  }\n\n  async renderMedia(imageId: MediaId, media: Media): Promise<MediaData> {\n    return this.renderProcedures[media.type](imageId, media);\n  }\n\n  async drawImage(\n    imageId: MediaId,\n    drawProcedure: (context: OffscreenCanvasRenderingContext2D) => void,\n  ): Promise<MediaData> {\n    const canvas = new OffscreenCanvas(1, 1);\n    drawProcedure(canvas.getContext('2d')!);\n    const imageInfo = MediaData.createFromCanvas(canvas);\n    this.images[imageId] = this.own(imageInfo);\n    return imageInfo;\n  }\n\n  async loadCanvas(\n    imageId: MediaId,\n    canvas: HTMLCanvasElement | OffscreenCanvas,\n  ): Promise<MediaData> {\n    const imageInfo = MediaData.createFromCanvas(canvas);\n    canvas.getContext('2d');\n    this.images[imageId] = this.own(imageInfo);\n    return imageInfo;\n  }\n\n  async loadImage(imageId: MediaId, src: Url): Promise<MediaData> {\n    const imageInfo = await MediaData.loadImage(src);\n    this.images[imageId] = this.own(imageInfo);\n    return imageInfo;\n  }\n\n  async loadVideo(\n    imageId: MediaId,\n    src: Url,\n    volume?: number,\n    fps?: number,\n    playSpeed?: number,\n    maxRefreshRate?: number,\n  ): Promise<MediaData> {\n    const videoInfo = await MediaData.loadVideo(src, volume, fps, playSpeed, maxRefreshRate);\n    this.images[imageId] = this.own(videoInfo);\n    return videoInfo;\n  }\n\n  async loadWebCam(\n    imageId: MediaId,\n    deviceId: string | undefined,\n  ): Promise<MediaData> {\n    const videoInfo = await MediaData.loadWebcam(deviceId);\n    this.images[imageId] = this.own(videoInfo);\n    return videoInfo;\n  }\n}\n",
  "#version 300 es\n//  ~{AUTHOR}\n\nprecision highp float;\n\n//  IN\n//  shape\nlayout(location = 0) in vec2 position;\nlayout(location = 1) in mat4 transform;\n//  1, 2, 3, 4 reserved for transform\n//  animation\nlayout(location = 5) in vec2 slotSize_and_number;\n//  instance\nlayout(location = 6) in float instance;\n\n//  UNIFORM\nuniform float maxTextureSize;\nuniform mat4 camPos;\nuniform mat4 camTurn;\nuniform mat4 camTilt;\nuniform mat4 projection;\nuniform float curvature;\n\n//  OUT\nout vec2 vTex;\nout float vTextureIndex;\nout vec3 vInstanceColor;\n\nvoid main() {\n  vec2 tex = position.xy * vec2(0.49, -0.49) + 0.5;\n  vec2 slotSize = vec2(\n    pow(2.0, floor(slotSize_and_number.x / 16.0)),\n    pow(2.0, mod(slotSize_and_number.x, 16.0)));\n  float slotNumber = slotSize_and_number.y;\n  float maxCols = maxTextureSize / slotSize.x;\n  float maxRows = maxTextureSize / slotSize.y;\n  float slotX = mod(slotNumber, maxCols);\n  float slotY = mod(floor(slotNumber / maxCols), maxRows);\n\n  vec4 elemPosition = transform * vec4(position, 0.0, 1.0);\n  // elementPosition => relativePosition\n  vec4 relativePosition = camTilt * camTurn * camPos * elemPosition;\n  relativePosition.y -= curvature * ((relativePosition.z * relativePosition.z) + (relativePosition.x * relativePosition.x) / 4.) / 10.;\n  // relativePosition => gl_Position\n  gl_Position = projection * relativePosition;\n\n\n  vTex = (vec2(slotX, slotY) + tex) * slotSize / maxTextureSize;\n  vTextureIndex = floor(slotNumber / (maxCols * maxRows));\n\n  //  instance\n  float r = fract(instance / (256.0 * 256.0 * 255.0));\n  float g = fract(instance / (256.0 * 255.0));\n  float b = fract(instance / 255.0);\n  vInstanceColor = vec3(r, g, b);\n}\n",
  "#version 300 es\n//  ~{AUTHOR}\nprecision highp float;\n\n//  CONST\nconst int NUM_TEXTURES = 16;\nconst float threshold = 0.00001;\n\n//  IN\n//  texture\nuniform sampler2D uTextures[NUM_TEXTURES];\nin float vTextureIndex;\nin vec2 vTex;\nin float opacity;\nin vec3 vInstanceColor;\n\n//  OUT\nout vec4 fragColor;\n\n//  FUNCTIONS\nvec4 getTextureColor(float textureSlot, vec2 vTexturePoint);\n\nvoid main() {\n  vec4 color = getTextureColor(vTextureIndex, vTex);\n  if (color.a <= .0001) {\n    discard;\n  };\n  fragColor = color;\n//  fragColor = vec4(vInstanceColor.rgb, 1.0);\n}\n\nvec4 getTextureColor(float textureSlot, vec2 vTexturePoint) {\n  if (abs(0.0 - textureSlot) < threshold) {\n    return texture(uTextures[0], vTexturePoint);\n  }\n  if (abs(1.0 - textureSlot) < threshold) {\n    return texture(uTextures[1], vTexturePoint);\n  }\n  if (abs(2.0 - textureSlot) < threshold) {\n    return texture(uTextures[2], vTexturePoint);\n  }\n  if (abs(3.0 - textureSlot) < threshold) {\n    return texture(uTextures[3], vTexturePoint);\n  }\n  if (abs(4.0 - textureSlot) < threshold) {\n    return texture(uTextures[4], vTexturePoint);\n  }\n  if (abs(5.0 - textureSlot) < threshold) {\n    return texture(uTextures[5], vTexturePoint);\n  }\n  if (abs(6.0 - textureSlot) < threshold) {\n    return texture(uTextures[6], vTexturePoint);\n  }\n  if (abs(7.0 - textureSlot) < threshold) {\n    return texture(uTextures[7], vTexturePoint);\n  }\n  if (abs(8.0 - textureSlot) < threshold) {\n    return texture(uTextures[8], vTexturePoint);\n  }\n  if (abs(9.0 - textureSlot) < threshold) {\n    return texture(uTextures[9], vTexturePoint);\n  }\n  if (abs(10.0 - textureSlot) < threshold) {\n    return texture(uTextures[10], vTexturePoint);\n  }\n  if (abs(11.0 - textureSlot) < threshold) {\n    return texture(uTextures[11], vTexturePoint);\n  }\n  if (abs(12.0 - textureSlot) < threshold) {\n    return texture(uTextures[12], vTexturePoint);\n  }\n  if (abs(13.0 - textureSlot) < threshold) {\n    return texture(uTextures[13], vTexturePoint);\n  }\n  if (abs(14.0 - textureSlot) < threshold) {\n    return texture(uTextures[14], vTexturePoint);\n  }\n  if (abs(15.0 - textureSlot) < threshold) {\n    return texture(uTextures[15], vTexturePoint);\n  }\n  return texture(uTextures[0], vTexturePoint);\n}\n",
  "export function replaceTilda(\n  inputString: string,\n  replacementMap?: Record<string, any>,\n) {\n  return inputString.replace(/~\\{(\\w+)\\}/g, (match, variable) => {\n    return replacementMap?.[variable] || match;\n  });\n}\n",
  "/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};",
  "import * as glMatrix from \"./common.js\";\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\n\nexport var sub = subtract;",
  "import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;",
  "import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();",
  "import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();",
  "import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();",
  "import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();",
  "import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();",
  "import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();",
  "import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();",
  "import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();",
  "import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyVec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\n * Gets the angular distance between two unit quaternions\n *\n * @param  {ReadonlyQuat} a     Origin unit quaternion\n * @param  {ReadonlyQuat} b     Destination unit quaternion\n * @return {Number}     Angle, in radians, between the two quaternions\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate W component of\n * @returns {quat} out\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\n * Calculate the exponential of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\n * Calculate the natural logarithm of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\n * Calculate the scalar power of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @param {Number} b amount to scale the quaternion by\n * @returns {quat} out\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\n * Generates a random unit quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate inverse of\n * @returns {quat} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate conjugate of\n * @returns {quat} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyMat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\n * Returns a string representation of a quatenion\n *\n * @param {ReadonlyQuat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var clone = vec4.clone;\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var fromValues = vec4.fromValues;\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the source quaternion\n * @returns {quat} out\n * @function\n */\n\nexport var copy = vec4.copy;\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\n\nexport var set = vec4.set;\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n * @function\n */\n\nexport var add = vec4.add;\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {ReadonlyQuat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\n\nexport var scale = vec4.scale;\n/**\n * Calculates the dot product of two quat's\n *\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = vec4.dot;\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\n\nexport var lerp = vec4.lerp;\n/**\n * Calculates the length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport var length = vec4.length;\n/**\n * Alias for {@link quat.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\n\nexport var normalize = vec4.normalize;\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat} a The first quaternion.\n * @param {ReadonlyQuat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat} a The first vector.\n * @param {ReadonlyQuat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var equals = vec4.equals;\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {ReadonlyVec3} a the initial vector\n * @param {ReadonlyVec3} b the destination vector\n * @returns {quat} out\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {ReadonlyQuat} c the third operand\n * @param {ReadonlyQuat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();",
  "import { mat4, quat, vec3 } from 'gl-matrix';\nimport { IMatrix } from './IMatrix';\nimport { Angle } from 'gl/utils/angleUtils';\n\nconst DEG_TO_RADIANT = Math.PI / 90;\n\nclass Matrix implements IMatrix {\n  private m4 = Float32Array.from(mat4.create());\n  static readonly HIDDEN = Matrix.create().identity().scale(0, 0, 0);\n  static readonly IDENTITY = Matrix.create().identity();\n\n  constructor() {\n    this.identity();\n  }\n\n  static create() {\n    return new Matrix();\n  }\n\n  public set(matrix: Matrix): Matrix {\n    mat4.copy(this.m4, matrix.getMatrix());\n    return this;\n  }\n\n  public identity(): Matrix {\n    mat4.identity(this.m4);\n    return this;\n  }\n\n  public invert(matrix?: IMatrix): Matrix {\n    mat4.invert(this.m4, matrix?.getMatrix() ?? this.getMatrix());\n    return this;\n  }\n\n  public multiply(matrix: IMatrix): Matrix {\n    mat4.multiply(this.m4, this.m4, matrix.getMatrix());\n    return this;\n  }\n\n  public multiply2(matrix1: IMatrix, matrix2: IMatrix): Matrix {\n    mat4.multiply(this.m4, matrix1.getMatrix(), matrix2.getMatrix());\n    return this;\n  }\n\n  public multiply3(matrix1: IMatrix, matrix2: IMatrix, matrix3: IMatrix): Matrix {\n    this.multiply2(matrix1, matrix2);\n    this.multiply(matrix3);\n    return this;\n  }\n\n  public translate(x: number, y: number, z: number): Matrix {\n    mat4.translate(this.m4, this.m4, [x, y, z]);\n    return this;\n  }\n\n  public translateToMatrix(matrix: Matrix): Matrix {\n    const m4 = matrix.getMatrix();\n    return this.translate(-m4[12], -m4[13], -m4[14]);\n  }\n\n  public rotateX(angle: Angle): Matrix {\n    mat4.rotateX(this.m4, this.m4, angle);\n    return this;\n  }\n\n  public rotateY(angle: Angle): Matrix {\n    mat4.rotateY(this.m4, this.m4, angle);\n    return this;\n  }\n\n  public rotateZ(angle: Angle): Matrix {\n    mat4.rotateZ(this.m4, this.m4, angle);\n    return this;\n  }\n\n  public setXRotation(angle: Angle): Matrix {\n    mat4.fromXRotation(this.getMatrix(), angle);\n    return this;\n  }\n\n  public setYRotation(angle: Angle): Matrix {\n    mat4.fromYRotation(this.getMatrix(), angle);\n    return this;\n  }\n\n  public scale(x: number, y?: number, z?: number): Matrix {\n    mat4.scale(this.m4, this.m4, [x, y ?? x, z ?? x]);\n    return this;\n  }\n\n  public perspective(degAngle: number, ratio: number, near: number, far: number): Matrix {\n    mat4.perspective(\n      this.m4,\n      degAngle * DEG_TO_RADIANT,\n      ratio,\n      near,\n      far,\n    );\n    return this;\n  }\n\n  public ortho(left: number, right: number, bottom: number, top: number, near: number, far: number): Matrix {\n    mat4.ortho(this.m4, left, right, bottom, top, near, far);\n    return this;\n  }\n\n  private static aTemp = mat4.create();\n  private static bTemp = mat4.create();\n  combine(matrix1: Matrix, matrix2: Matrix, level: number = .5): Matrix {\n    mat4.multiplyScalar(Matrix.aTemp, matrix1.getMatrix(), 1 - level);\n    mat4.multiplyScalar(Matrix.bTemp, matrix2.getMatrix(), level);\n    mat4.add(this.m4, Matrix.aTemp, Matrix.bTemp);\n    return this;\n  }\n\n  static tempQuat = quat.create();\n  static tempVec = vec3.create();\n  moveMatrix(x: number, y: number, z: number, turnMatrix?: IMatrix) {\n    const v = Matrix.tempVec;\n    v[0] = x;\n    v[1] = y;\n    v[2] = z;\n    if (turnMatrix) {\n      mat4.getRotation(Matrix.tempQuat, turnMatrix.getMatrix());\n      quat.invert(Matrix.tempQuat, Matrix.tempQuat);\n      vec3.transformQuat(v, v, Matrix.tempQuat);\n    }\n    mat4.translate(this.m4, this.m4, v);\n    return this;\n  }\n\n  setPosition(x: number, y: number, z: number) {\n    this.m4[12] = x;\n    this.m4[13] = y;\n    this.m4[14] = z;\n    return this;\n  }\n\n  getMatrix(): Float32Array {\n    return this.m4;\n  }\n}\n\nexport default Matrix;\n",
  "import { IMatrix } from \"./IMatrix\";\nimport Matrix from \"./Matrix\";\n\nexport class ProjectionMatrix implements IMatrix {\n  private readonly baseMatrix = Matrix.create();\n  private readonly perspectiveMatrix = Matrix.create();\n  private readonly orthoMatrix = Matrix.create();\n  private perspectiveLevel = 1;\n\n  private configPerspectiveMatrix(ratio: number) {\n    this.perspectiveMatrix.perspective(45, ratio, 0.01, 100000);\n  }\n\n  private configOrthoMatrix(ratio: number) {\n    this.orthoMatrix.ortho(-ratio, ratio, -1, 1, -100000, 100000);\n  }\n\n  configure(width: number, height: number) {\n    const ratio: number = width / height;\n    this.configPerspectiveMatrix(ratio);\n    this.configOrthoMatrix(ratio);\n  }\n\n  setPerspective(level: number) {\n    this.perspectiveLevel = level;\n  }\n\n  getMatrix(): Float32Array {\n    this.baseMatrix.combine(this.orthoMatrix, this.perspectiveMatrix, this.perspectiveLevel);\n    return this.baseMatrix.getMatrix();\n  }\n}\n",
  "export type Angle = number;\n\nexport function angle(value: number): Angle {\n  return (value + Math.PI) % (2 * Math.PI) - Math.PI;\n}\n\nexport function angleStep(angle: Angle, step: Angle) {\n  return Math.round(angle / step) * step;\n}\n",
  "export class Progressive<T> {\n  private _goal: number;\n  private active: boolean = false;\n  private speed: number = 0;\n  private locker?: any;\n  constructor(private element: T, private getValue: (element: T) => number, private apply: (element: T, value: number) => void) {\n    this._goal = this.getValue(element);\n  }\n\n  setGoal(value: number, speed: number, locker?: any) {\n    if (this.locker && this.locker !== locker) {\n      return;\n    }\n    if (this._goal !== value || this.speed !== speed) {\n      this.speed = speed;\n      this._goal = value;\n      this.locker = locker;\n      this.active = true;\n    }\n  }\n\n  get goal() {\n    return this._goal;\n  }\n\n  update(deltaTime: number): boolean {\n    if (this.active) {\n      const curValue = this.getValue(this.element);\n      const diff = this.goal - curValue;\n      const dDist = Math.min(Math.abs(diff), this.speed * deltaTime);\n      if (dDist <= .01) {\n        this.apply(this.element, this.goal);\n        this.active = false;\n        this.locker = undefined;\n      } else {\n        this.apply(this.element, curValue + dDist * Math.sign(diff));\n      }\n    }\n    return this.active;\n  }\n}\n",
  "import { Angle, angle } from \"gl/utils/angleUtils\";\nimport { IMatrix } from \"./IMatrix\";\nimport Matrix from \"./Matrix\";\nimport { Progressive } from \"core/value/Progressive\";\n\nexport class TiltMatrix implements IMatrix {\n  private matrix: Matrix = Matrix.create();;\n  private _tilt: Angle = 0;\n  progressive: Progressive<TiltMatrix>;\n\n  constructor(private onChange?: () => void) {\n    this.progressive = new Progressive<TiltMatrix>(this,\n      (matrix) => matrix.tilt,\n      (matrix, value) => matrix.tilt = value,\n    );\n  }\n\n  get tilt(): Angle {\n    return this._tilt;\n  }\n\n  set tilt(value: number) {\n    this._tilt = angle(value);\n    this.matrix.setXRotation(this._tilt);\n    this.onChange?.();\n  }\n\n  getMatrix(): Float32Array {\n    return this.matrix.getMatrix();\n  }\n}\n",
  "import { Angle, angle } from \"gl/utils/angleUtils\";\nimport { IMatrix } from \"./IMatrix\";\nimport Matrix from \"./Matrix\";\nimport { Progressive } from \"core/value/Progressive\";\n\nexport class TurnMatrix implements IMatrix {\n  private matrix: Matrix = Matrix.create();;\n  private _turn: Angle = 0;\n  progressive: Progressive<TurnMatrix>;\n\n  constructor(private onChange?: () => void) {\n    this.progressive = new Progressive<TurnMatrix>(this,\n      (matrix) => matrix.turn,\n      (matrix, value) => matrix.turn = value,\n    );\n  }\n\n  get turn(): Angle {\n    return this._turn;\n  }\n\n  set turn(value: number) {\n    this._turn = angle(value);\n    this.matrix.setYRotation(this._turn);\n    this.onChange?.();\n  }\n\n  getMatrix(): Float32Array {\n    return this.matrix.getMatrix();\n  }\n}\n",
  "import { Refresh } from \"./Refresh\";\nimport { CameraMatrixType } from \"gl/camera/Camera\";\nimport { UpdateNotifier } from \"./UpdateNotifier\";\nimport { IGraphicsEngine } from \"core/graphics/IGraphicsEngine\";\nimport { IMotor } from \"core/motor/IMotor\";\n\nexport class CameraUpdate implements Refresh, UpdateNotifier {\n  private readonly updatedTypes: Set<CameraMatrixType> = new Set();\n  constructor(private getCameraMatrix: (type: CameraMatrixType) => Float32Array, private engine: IGraphicsEngine, private motor: IMotor) {\n  }\n\n  informUpdate(type: CameraMatrixType): void {\n    this.motor.registerUpdate(this.withCameraType(type));\n  }\n\n  withCameraType(type: CameraMatrixType): CameraUpdate {\n    this.updatedTypes.add(type);\n    return this;\n  }\n\n  refresh(): void {\n    this.updatedTypes.forEach(type => this.engine.updateCameraMatrix(type, this.getCameraMatrix(type)));\n  }\n}\n",
  "import { Refresh } from \"./Refresh\";\nimport { CameraFloatType } from \"gl/camera/Camera\";\nimport { UpdateNotifier } from \"./UpdateNotifier\";\nimport { IGraphicsEngine } from \"core/graphics/IGraphicsEngine\";\nimport { IMotor } from \"core/motor/IMotor\";\n\nexport class CameraFloatUpdate implements Refresh, UpdateNotifier {\n  private readonly updatedTypes: Set<CameraFloatType> = new Set();\n  constructor(private getCameraFloat: (type: CameraFloatType) => number, private engine: IGraphicsEngine, private motor: IMotor) {\n  }\n\n  informUpdate(type: CameraFloatType): void {\n    this.motor.registerUpdate(this.withCameraType(type));\n  }\n\n  withCameraType(type: CameraFloatType): CameraFloatUpdate {\n    this.updatedTypes.add(type);\n    return this;\n  }\n\n  refresh(): void {\n    this.updatedTypes.forEach(type => this.engine.updateCameraFloat(type, this.getCameraFloat(type)));\n  }\n}\n",
  "import { IMatrix } from \"gl/transform/IMatrix\";\nimport Matrix from \"gl/transform/Matrix\";\nimport { List, forEach } from \"world/sprite/List\";\n\nexport type Position = [number, number, number];\n\nconst _position: Position = [0, 0, 0];\nconst _matrix: Matrix = Matrix.create();\nexport function transformsToPosition(transforms: List<Matrix>) {\n  _matrix.identity();\n  forEach(transforms, transform => { if (transform) { _matrix.multiply(transform); } });\n  return transformToPosition(_matrix);\n}\n\nexport function transformToPosition(transform: IMatrix, pos: Position = _position) {\n  const m = transform.getMatrix();\n  pos[0] = m[12]; // Value in the 4th column, 1st row (indices start from 0)\n  pos[1] = m[13]; // Value in the 4th column, 2nd row\n  pos[2] = m[14]; // Value in the 4th column, 3rd row\n  return pos;\n}\n",
  "import { Position, transformToPosition } from \"world/grid/Position\";\nimport { IMatrix } from \"./IMatrix\";\nimport Matrix from \"./Matrix\";\nimport { CellPos } from \"world/grid/CellPos\";\n\nexport class PositionMatrix implements IMatrix {\n  private matrix: Matrix = Matrix.create().setPosition(0, 0, 0);\n  private prePosition: Position = [0, 0, 0];\n  private position: Position = [0, 0, 0];\n\n  constructor(private onChange?: (previous: Position) => void) {\n  }\n\n  private changedPosition() {\n    this.prePosition[0] = this.position[0];\n    this.prePosition[1] = this.position[1];\n    this.prePosition[2] = this.position[2];\n    transformToPosition(this.matrix, this.position);\n    this.onChange?.(this.prePosition);\n  }\n\n  moveMatrix(x: number, y: number, z: number, turnMatrix?: IMatrix) {\n    this.matrix.moveMatrix(x, y, z, turnMatrix);\n    this.changedPosition();\n  }\n\n  setPosition(x: number, y: number, z: number) {\n    this.matrix.setPosition(x, y, z);\n    this.changedPosition();\n  }\n\n  getPosition() {\n    return this.position;\n  }\n\n  private static _cellPos: CellPos = [0, 0, 0, 0];\n  getCellPosition(cellSize: number) {\n    return PositionMatrix.getCellPos(this.getPosition(), cellSize);\n  }\n\n  static getCellPos(pos: Position, cellSize: number) {\n    this._cellPos[0] = Math.floor(pos[0] / cellSize);\n    this._cellPos[1] = Math.floor(pos[1] / cellSize);\n    this._cellPos[2] = Math.floor(pos[2] / cellSize);\n    this._cellPos[3] = cellSize;\n    return this._cellPos;\n  }\n\n  public translate(x: number, y: number, z: number) {\n    this.matrix.translate(x, y, z);\n    this.changedPosition();\n  }\n\n  getMatrix(): Float32Array {\n    return this.matrix.getMatrix();\n  }\n}\n",
  "import { IMatrix } from \"gl/transform/IMatrix\";\nimport Matrix from \"gl/transform/Matrix\";\nimport { ProjectionMatrix } from \"gl/transform/ProjectionMatrix\";\nimport { TiltMatrix } from \"gl/transform/TiltMatrix\";\nimport { TurnMatrix } from \"gl/transform/TurnMatrix\";\nimport { CameraUpdate } from \"updates/CameraUpdate\";\nimport { ICamera } from \"./ICamera\";\nimport { CameraFloatUpdate } from \"updates/CameraFloatUpdate\";\nimport { IGraphicsEngine } from \"core/graphics/IGraphicsEngine\";\nimport { IMotor } from \"core/motor/IMotor\";\nimport { PositionMatrix } from \"gl/transform/PositionMatrix\";\n\nexport enum CameraMatrixType {\n  PROJECTION = 0,\n  POS = 1,\n  TURN = 2,\n  TILT = 3,\n}\n\nexport enum CameraFloatType {\n  CURVATURE = 0,\n}\n\ninterface Props {\n  engine: IGraphicsEngine;\n  motor: IMotor;\n}\n\nexport class Camera implements ICamera {\n  private readonly camMatrix = Matrix.create();\n  private readonly projectionMatrix = new ProjectionMatrix();\n  readonly posMatrix = new PositionMatrix(() => this.updateInformer.informUpdate(CameraMatrixType.POS));\n  readonly tiltMatrix = new TiltMatrix(() => this.updateInformer.informUpdate(CameraMatrixType.TILT));\n  readonly turnMatrix = new TurnMatrix(() => this.updateInformer.informUpdate(CameraMatrixType.TURN));\n  private pespectiveLevel = 1;\n  private curvature = 0;\n  private readonly updateInformer;\n  private readonly updateInformerFloat;\n\n  constructor({ engine, motor }: Props) {\n    this.updateInformer = new CameraUpdate(this.getCameraMatrix.bind(this), engine, motor);\n    this.updateInformerFloat = new CameraFloatUpdate(this.getCameraFloat.bind(this), engine, motor);\n  }\n\n  activate() {\n    this.updatePerspective();\n    this.updateInformer.informUpdate(CameraMatrixType.POS);\n    this.updateInformer.informUpdate(CameraMatrixType.TURN);\n    this.updateInformer.informUpdate(CameraMatrixType.TILT);\n  }\n\n  private readonly cameraMatrices: Record<CameraMatrixType, IMatrix> = {\n    [CameraMatrixType.PROJECTION]: this.projectionMatrix,\n    [CameraMatrixType.POS]: this.camMatrix,\n    [CameraMatrixType.TURN]: this.turnMatrix,\n    [CameraMatrixType.TILT]: this.tiltMatrix,\n  };\n\n  configProjectionMatrix(width: number, height: number) {\n    this.projectionMatrix.configure(width, height);\n    this.updateInformer.informUpdate(CameraMatrixType.PROJECTION);\n  }\n\n  updatePerspective(level?: number) {\n    this.projectionMatrix.setPerspective(level ?? this.pespectiveLevel);\n    this.updateInformer.informUpdate(CameraMatrixType.PROJECTION);\n  }\n\n  updateCurvature(value: number) {\n    this.curvature = value;\n    this.updateInformerFloat.informUpdate(CameraFloatType.CURVATURE);\n  }\n\n  getCameraMatrix(cameraMatrixType: CameraMatrixType): Float32Array {\n    if (cameraMatrixType === CameraMatrixType.POS) {\n      this.camMatrix.invert(this.posMatrix);\n    }\n    return this.cameraMatrices[cameraMatrixType].getMatrix();\n  }\n\n  getCameraFloat(cameraFloatType: CameraFloatType): number {\n    switch (cameraFloatType) {\n      case CameraFloatType.CURVATURE:\n        return this.curvature;\n    }\n  }\n\n  gotoPos(x: number, y: number, z: number, speed: number = .1) {\n    const curPos = this.getPosition();\n    const dx = x - curPos[0];\n    const dy = y - curPos[1];\n    const dz = z - curPos[2];\n    const dist = Math.sqrt(dx * dx + dy * dy + dz * dz);\n    if (dist > .01) {\n      const sp = Math.min(dist, speed);\n      this.posMatrix.translate(\n        dx / dist * sp,\n        dy / dist * sp,\n        dz / dist * sp,\n      );\n    } else {\n      this.posMatrix.setPosition(x, y, z);\n    }\n  }\n\n  moveCam(x: number, y: number, z: number) {\n    this.posMatrix.moveMatrix(x, y, z, this.turnMatrix);\n  }\n\n  //  Turn\n  turn(angle: number) {\n    this.turnMatrix.turn += angle;\n  }\n\n  //  Tilt\n  tilt(angle: number) {\n    this.tiltMatrix.tilt += angle;\n  }\n\n  getPosition() {\n    return this.posMatrix.getPosition();\n  }\n\n  setPosition(x: number, y: number, z: number) {\n    this.posMatrix.setPosition(x, y, z);\n  }\n}\n",
  "\nexport enum RefreshOrder {\n  FIRST = Number.MIN_SAFE_INTEGER,\n  DEFAULT = 0,\n  LAST = Number.MAX_SAFE_INTEGER\n}\n",
  "// To recognize dom types (see https://bun.sh/docs/typescript#dom-types):\n/// <reference lib=\"dom\" />\n/// <reference lib=\"dom.iterable\" />\n\nimport { GLPrograms } from '../../gl/programs/GLPrograms';\nimport { Disposable } from '../../lifecycle/Disposable';\nimport { VertexArray } from '../../gl/VertexArray';\nimport { GLAttributeBuffers, LocationName } from '../../gl/attributes/GLAttributeBuffers';\nimport { GLUniforms } from '../../gl/uniforms/GLUniforms';\nimport {\n  GL,\n  POSITION_LOC,\n  INDEX_LOC,\n  TRANSFORM_LOC,\n  SLOT_SIZE_LOC,\n  CAM_POS_LOC,\n  CAM_PROJECTION_LOC,\n  INSTANCE_LOC,\n  CAM_TILT_LOC,\n  CAM_TURN_LOC,\n  CAM_CURVATURE_LOC,\n} from '../../gl/attributes/Constants';\nimport { TEXTURE_INDEX_FOR_VIDEO, TextureId, TextureManager } from '../../gl/texture/TextureManager';\nimport { MediaId, ImageManager } from 'gl/texture/ImageManager';\nimport vertexShader from 'generated/src/gl/resources/vertexShader.txt';\nimport fragmentShader from 'generated/src/gl/resources/fragmentShader.txt';\nimport { replaceTilda } from 'gl/utils/replaceTilda';\nimport Matrix from 'gl/transform/Matrix';\nimport { CameraFloatType, CameraMatrixType } from 'gl/camera/Camera';\nimport { MediaData } from 'gl/texture/MediaData';\nimport { Media } from 'gl/texture/Media';\nimport { SpriteId } from 'world/sprite/Sprite';\nimport { IGraphicsEngine } from './IGraphicsEngine';\nimport { Sprites } from 'world/sprite/Sprites';\nimport { RefreshOrder } from 'updates/RefreshOrder';\n\nconst DEFAULT_ATTRIBUTES: WebGLContextAttributes = {\n  alpha: true,\n  antialias: false,\n  depth: true,\n  desynchronized: true,\n  failIfMajorPerformanceCaveat: undefined,\n  powerPreference: 'default',\n  premultipliedAlpha: true,\n  preserveDrawingBuffer: false,\n  stencil: false,\n};\n\nconst VERTEX_COUNT = 6;\n\nconst LOG_GL = false;\n\nfunction glProxy(gl: GL) {\n  if (!LOG_GL) {\n    return gl;\n  }\n  const proxy = new Proxy<GL>(gl, {\n    get(target, prop) {\n      const t = target as any;\n      const result = t[prop];\n      if (typeof result === 'function') {\n        const f = (...params: any[]) => {\n          const returnValue = result.apply(t, params);\n          console.log(`gl.${String(prop)}(`, params, ') = ', returnValue);\n          return returnValue;\n        };\n        return f;\n      } else {\n        console.log(`gl.${String(prop)} = `, result);\n        return result;\n      }\n    },\n  });\n  return proxy;\n}\n\nexport interface Props {\n  attributes?: WebGLContextAttributes;\n}\n\nexport class GraphicsEngine extends Disposable implements IGraphicsEngine {\n  private gl: GL;\n  private programs: GLPrograms;\n  private attributeBuffers: GLAttributeBuffers;\n  private uniforms: GLUniforms;\n  private canvas: HTMLCanvasElement | OffscreenCanvas;\n\n  private textureManager: TextureManager;\n  private imageManager: ImageManager;\n\n  private textureSlots: Record<MediaId, { buffer: Float32Array }> = {};\n\n  private onResize: Set<(w: number, h: number) => void> = new Set();\n  private pixelListeners: Set<{ x: number; y: number; pixel: number }> = new Set();\n  private spriteCount = 0;\n  private cameraMatrixUniforms: Record<CameraMatrixType | any, WebGLUniformLocation> = {};\n  private cameraFloatUniforms: Record<CameraFloatType | any, WebGLUniformLocation> = {};\n  readonly refreshOrder = RefreshOrder.LAST;\n\n  constructor(canvas: HTMLCanvasElement | OffscreenCanvas, {\n    attributes,\n  }: Props = {}) {\n    super();\n    const gl: WebGL2RenderingContext = canvas.getContext('webgl2', { ...DEFAULT_ATTRIBUTES, ...attributes })! as WebGL2RenderingContext;\n    this.gl = glProxy(gl);\n    this.canvas = canvas;\n\n    this.programs = this.own(new GLPrograms(this.gl));\n    this.uniforms = this.own(new GLUniforms(this.gl, this.programs));\n    this.attributeBuffers = this.own(new GLAttributeBuffers(this.gl, this.programs));\n\n    this.textureManager = new TextureManager(this.gl, this.uniforms);\n    this.imageManager = new ImageManager();\n\n    const onResize = this.checkCanvasSize.bind(this);\n    window.addEventListener('resize', onResize);\n    this.addOnDestroy(() => window.removeEventListener('resize', onResize));\n    this.initialize();\n  }\n\n  addResizeListener(listener: (w: number, h: number) => void): () => void {\n    listener(this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n    this.onResize.add(listener);\n    return () => this.removeResizeListener(listener);\n  }\n\n  removeResizeListener(listener: (w: number, h: number) => void): void {\n    this.onResize.delete(listener);\n  }\n\n  clearTextureSlots(): void {\n    for (let i in this.textureSlots) {\n      delete this.textureSlots[i];\n    }\n  }\n\n  checkCanvasSize(): void {\n    if (this.canvas instanceof HTMLCanvasElement) {\n      this.canvas.width = this.canvas.offsetWidth * 2;\n      this.canvas.height = this.canvas.offsetHeight * 2;\n    }\n    this.gl.viewport(0, 0, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n    this.onResize.forEach(callback => callback(this.gl.drawingBufferWidth, this.gl.drawingBufferHeight));\n  }\n\n  private initialize() {\n    const PROGRAM_NAME = 'main';\n    const replacementMap = {\n      AUTHOR: 'Jack le hamster',\n    };\n    this.programs.addProgram(PROGRAM_NAME,\n      replaceTilda(vertexShader, replacementMap),\n      replaceTilda(fragmentShader, replacementMap),\n    );\n\n    this.programs.useProgram(PROGRAM_NAME);\n\n    this.cameraMatrixUniforms[CameraMatrixType.PROJECTION] = this.uniforms.getUniformLocation(CAM_PROJECTION_LOC, PROGRAM_NAME);\n    this.cameraMatrixUniforms[CameraMatrixType.POS] = this.uniforms.getUniformLocation(CAM_POS_LOC, PROGRAM_NAME);\n    this.cameraMatrixUniforms[CameraMatrixType.TURN] = this.uniforms.getUniformLocation(CAM_TURN_LOC, PROGRAM_NAME);\n    this.cameraMatrixUniforms[CameraMatrixType.TILT] = this.uniforms.getUniformLocation(CAM_TILT_LOC, PROGRAM_NAME);\n\n    this.cameraFloatUniforms[CameraFloatType.CURVATURE] = this.uniforms.getUniformLocation(CAM_CURVATURE_LOC, PROGRAM_NAME);\n\n    //  enable depth\n    this.gl.enable(GL.DEPTH_TEST);\n    this.gl.depthFunc(GL.LESS);\n    this.gl.clearDepth(1.0);\n\n    //  enable blend\n    this.gl.enable(GL.BLEND);\n    this.gl.blendFunc(GL.SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA);\n    this.gl.viewport(0, 0, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n\n    // disable face culling\n    this.gl.disable(this.gl.CULL_FACE);\n\n    // clear background color\n    this.gl.clearColor(0.0, 0.0, 0.0, 1.0);\n\n    this.textureManager.initialize();\n    this.checkCanvasSize();\n  }\n\n  activate(): void {\n    this.clearTextureSlots();\n  }\n\n  setMaxSpriteCount(spriteCount: number): void {\n    this.initializeBuffers(spriteCount);\n  }\n\n  private onCleanupBuffers: Set<() => void> = new Set();\n  initializeBuffers(maxSpriteCount: number) {\n    this.onCleanupBuffers.forEach(cleanup => cleanup());\n    this.onCleanupBuffers.clear();\n    if (maxSpriteCount) {\n      const cleanups = [\n        this.initializeIndexBuffer(INDEX_LOC),\n        this.initializePositionBuffer(POSITION_LOC),\n        this.initializeTransformBuffer(TRANSFORM_LOC, maxSpriteCount),\n        this.initializeSlotSizeBuffer(SLOT_SIZE_LOC, maxSpriteCount),\n        this.initializeInstanceBuffer(INSTANCE_LOC, maxSpriteCount),\n        this.initializeFlagBuffer(INSTANCE_LOC, maxSpriteCount),\n      ];\n      cleanups.forEach(cleanup => this.onCleanupBuffers.add(cleanup));\n    }\n  }\n\n  private initializeIndexBuffer(location: LocationName) {\n    /*\n        0  1\n        3  2\n    */\n    const bufferInfo = this.attributeBuffers.createBuffer(location);\n    this.gl.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, bufferInfo.buffer);\n    this.gl.bufferData(GL.ELEMENT_ARRAY_BUFFER,\n      Uint16Array.from([0, 1, 2, 2, 3, 0]),\n      GL.STATIC_DRAW);\n    return () => {\n      this.attributeBuffers.deleteBuffer(location);\n    };\n  }\n\n  private initializePositionBuffer(location: LocationName) {\n    const bufferInfo = this.attributeBuffers.createBuffer(location);\n    this.gl.bindBuffer(GL.ARRAY_BUFFER, bufferInfo.buffer);\n    this.gl.vertexAttribPointer(\n      bufferInfo.location,\n      2,\n      GL.FLOAT,\n      false,\n      0,\n      0,\n    );\n    this.gl.enableVertexAttribArray(bufferInfo.location);\n    this.gl.bufferData(GL.ARRAY_BUFFER,\n      Float32Array.from([-1, -1, 1, -1, 1, 1, -1, 1]),\n      GL.STATIC_DRAW);\n    return () => {\n      this.gl.disableVertexAttribArray(bufferInfo.location);\n      this.attributeBuffers.deleteBuffer(location);\n    };\n  }\n\n  private initializeTransformBuffer(location: LocationName, spriteCount: number) {\n    const bufferInfo = this.attributeBuffers.createBuffer(location);\n    this.gl.bindBuffer(GL.ARRAY_BUFFER, bufferInfo.buffer);\n    const elemCount = 4;\n    const bytesPerRow = elemCount * Float32Array.BYTES_PER_ELEMENT;\n    const bytesPerInstance = 4 * bytesPerRow;\n    for (let i = 0; i < 4; i++) {\n      const loc = bufferInfo.location + i;\n      this.gl.vertexAttribPointer(\n        loc,\n        elemCount,\n        GL.FLOAT,\n        false,\n        bytesPerInstance,\n        i * bytesPerRow,\n      );\n      this.gl.enableVertexAttribArray(loc);\n      this.gl.vertexAttribDivisor(loc, 1);\n    }\n    this.gl.bufferData(GL.ARRAY_BUFFER, spriteCount * bytesPerInstance, GL.DYNAMIC_DRAW);\n    return () => {\n      this.gl.disableVertexAttribArray(bufferInfo.location);\n      this.attributeBuffers.deleteBuffer(location);\n    };\n  }\n\n  private initializeSlotSizeBuffer(location: LocationName, spriteCount: number) {\n    const bufferInfo = this.attributeBuffers.createBuffer(location);\n    this.gl.bindBuffer(GL.ARRAY_BUFFER, bufferInfo.buffer);\n    const loc = bufferInfo.location;\n    const elemCount = 2;\n    const bytesPerInstance = elemCount * Float32Array.BYTES_PER_ELEMENT;\n    this.gl.vertexAttribPointer(\n      loc,\n      elemCount,\n      GL.FLOAT,\n      false,\n      bytesPerInstance,\n      0,\n    );\n    this.gl.enableVertexAttribArray(loc);\n    this.gl.vertexAttribDivisor(loc, 1);\n    this.gl.bufferData(GL.ARRAY_BUFFER, spriteCount * bytesPerInstance, GL.DYNAMIC_DRAW);\n    return () => {\n      this.gl.disableVertexAttribArray(bufferInfo.location);\n      this.attributeBuffers.deleteBuffer(location);\n    };\n  }\n\n  private initializeInstanceBuffer(location: LocationName, instanceCount: number) {\n    const bufferInfo = this.attributeBuffers.createBuffer(location);\n    this.gl.bindBuffer(GL.ARRAY_BUFFER, bufferInfo.buffer);\n    const loc = bufferInfo.location;\n    const elemCount = 1;\n    this.gl.vertexAttribPointer(\n      loc,\n      elemCount,\n      GL.FLOAT,\n      false,\n      elemCount * Float32Array.BYTES_PER_ELEMENT,\n      0,\n    );\n    this.gl.enableVertexAttribArray(loc);\n    this.gl.vertexAttribDivisor(loc, 1);\n    this.gl.bufferData(GL.ARRAY_BUFFER,\n      Float32Array.from(new Array(instanceCount).fill(null).map((_, index) => index)),\n      GL.STATIC_DRAW);\n\n    return () => {\n      this.gl.disableVertexAttribArray(bufferInfo.location);\n      this.attributeBuffers.deleteBuffer(location);\n    };\n  }\n\n  private initializeFlagBuffer(location: LocationName, instanceCount: number) {\n    const bufferInfo = this.attributeBuffers.createBuffer(location);\n    this.gl.bindBuffer(GL.ARRAY_BUFFER, bufferInfo.buffer);\n    const loc = bufferInfo.location;\n    const elemCount = 1;\n    const bytesPerInstance = elemCount * Float32Array.BYTES_PER_ELEMENT;\n    this.gl.vertexAttribPointer(\n      loc,\n      elemCount,\n      GL.FLOAT,\n      false,\n      bytesPerInstance,\n      0,\n    );\n    this.gl.enableVertexAttribArray(loc);\n    this.gl.vertexAttribDivisor(loc, 1);\n    this.gl.bufferData(GL.ARRAY_BUFFER,\n      instanceCount * bytesPerInstance,\n      GL.STATIC_DRAW);\n\n    return () => {\n      this.gl.disableVertexAttribArray(bufferInfo.location);\n      this.attributeBuffers.deleteBuffer(location);\n    };\n  }\n\n  async updateTextures(imageIds: MediaId[], getMedia: (imageId: MediaId) => Media | undefined): Promise<MediaData[]> {\n    const mediaInfos = (await Promise.all(imageIds.map(async imageId => {\n      const media = getMedia(imageId);\n      if (!media) {\n        console.warn(`No media for imageId ${imageId}`);\n        return;\n      }\n      const mediaData = await this.imageManager.renderMedia(imageId, media);\n      return { mediaData, imageId };\n    }))).filter((data): data is { mediaData: MediaData, imageId: MediaId } => !!data);\n    const textureIndices = await Promise.all(mediaInfos.map(async ({ mediaData, imageId }) => {\n      const { slot, refreshCallback } = this.textureManager.allocateSlotForImage(mediaData);\n      const slotW = Math.log2(slot.size[0]), slotH = Math.log2(slot.size[1]);\n      const wh = slotW * 16 + slotH;\n      this.textureSlots[imageId] = {\n        buffer: Float32Array.from([wh, slot.slotNumber]),\n      };\n      mediaData.refreshCallback = refreshCallback;\n      return slot.textureIndex;\n    }));\n    const textureIndicesSet = new Set(textureIndices);\n    textureIndicesSet.forEach(textureIndex => {\n      if (textureIndex === TEXTURE_INDEX_FOR_VIDEO) {\n        this.textureManager.setupTextureForVideo(`TEXTURE${textureIndex}` as TextureId);\n      } else {\n        this.textureManager.generateMipMap(`TEXTURE${textureIndex}` as TextureId);\n      }\n    });\n    return mediaInfos.map(({ mediaData }) => mediaData);;\n  }\n\n  private drawElementsInstanced(vertexCount: GLsizei, instances: GLsizei) {\n    this.gl.drawElementsInstanced(\n      GL.TRIANGLES,\n      vertexCount,\n      GL.UNSIGNED_SHORT,\n      0,\n      instances,\n    );\n  }\n\n  updateSpriteTransforms(spriteIds: Set<SpriteId>, sprites: Sprites) {\n    const bufferInfo = this.attributeBuffers.getAttributeBuffer(TRANSFORM_LOC);\n    this.gl.bindBuffer(GL.ARRAY_BUFFER, bufferInfo.buffer);\n    let topVisibleSprite = this.spriteCount - 1;\n    spriteIds.forEach(spriteId => {\n      const sprite = sprites.at(spriteId);\n      this.gl.bufferSubData(GL.ARRAY_BUFFER, 4 * 4 * Float32Array.BYTES_PER_ELEMENT * spriteId, (sprite?.transform ?? Matrix.HIDDEN).getMatrix());\n      if (sprite) {\n        topVisibleSprite = Math.max(topVisibleSprite, spriteId);\n      }\n    });\n    spriteIds.clear();\n\n    while (topVisibleSprite >= 0 && !sprites.at(topVisibleSprite)) {\n      topVisibleSprite--;\n    }\n    this.spriteCount = Math.max(this.spriteCount, topVisibleSprite + 1);\n  }\n\n  updateSpriteAnims(spriteIds: Set<SpriteId>, sprites: Sprites) {\n    const bufferInfo = this.attributeBuffers.getAttributeBuffer(SLOT_SIZE_LOC);\n    this.gl.bindBuffer(GL.ARRAY_BUFFER, bufferInfo.buffer);\n    spriteIds.forEach(spriteId => {\n      const sprite = sprites.at(spriteId);\n      const slotObj = this.textureSlots[sprite?.imageId ?? -1];\n      if (slotObj) {\n        const { buffer } = slotObj;\n        this.gl.bufferSubData(GL.ARRAY_BUFFER, 2 * Float32Array.BYTES_PER_ELEMENT * spriteId, buffer);\n        spriteIds.delete(spriteId);\n      }\n    });\n  }\n\n  updateCameraMatrix(type: CameraMatrixType, matrix: Float32Array) {\n    this.gl.uniformMatrix4fv(this.cameraMatrixUniforms[type], false, matrix);\n  }\n\n  updateCameraFloat(type: CameraFloatType, value: number) {\n    this.gl.uniform1f(this.cameraFloatUniforms[type], value);\n  }\n\n  bindVertexArray() {\n    return this.own(new VertexArray(this.gl));\n  }\n\n  addPixelListener(listener: { x: number, y: number, pixel: number }) {\n    this.pixelListeners.add(listener);\n    return () => {\n      this.removePixelListener(listener);\n    };\n  }\n\n  removePixelListener(listener: { x: number, y: number, pixel: number }) {\n    this.pixelListeners.delete(listener);\n  }\n\n  private _pixel: Uint8Array = new Uint8Array(4);\n  private getPixel(x: number, y: number): number {\n    this.gl.readPixels(x, y, 1, 1, this.gl.RGBA, this.gl.UNSIGNED_BYTE, this._pixel);\n    const [r, g, b, _a] = this._pixel;\n    return r * (256 * 256) + g * (256) + b;\n  }\n\n  refresh(): void {\n    // clear background\n    this.gl.clear(GL.COLOR_BUFFER_BIT);\n\n    this.drawElementsInstanced(VERTEX_COUNT, this.spriteCount);\n    for (const listener of this.pixelListeners) {\n      listener.pixel = this.getPixel(listener.x, listener.y);\n    }\n  }\n}\n",
  "import { Time } from \"core/Time\";\nimport { Refresh, UpdatePayload } from \"../../updates/Refresh\";\nimport { IMotor } from \"./IMotor\";\nimport { Duration } from \"core/Time\";\n\n/**\n * Continously runs a loop which feeds a world into the GL Engine.\n */\nconst MAX_DELTA_TIME = 1000 / 20;\n\nexport enum Priority {\n  DEFAULT = 0,\n  LAST = 1,\n};\n\nexport interface Schedule {\n  triggerTime: Time;\n  period: Duration;\n  expirationTime: Time;\n  priority: Priority;\n}\n\nexport class Motor implements IMotor {\n  private readonly updateSchedule: Map<Refresh, Schedule> = new Map();\n  time: Time = 0;\n\n  loop(update: Refresh, frameRate?: number, priority?: number, expirationTime?: Time) {\n    return this.registerUpdate(update, { period: frameRate ? 1000 / frameRate : 1, expirationTime, priority });\n  }\n\n  registerUpdate(update: Refresh, schedule: Partial<Schedule> = {}): () => void {\n    schedule.triggerTime = schedule.triggerTime ?? this.time;\n    schedule.expirationTime = schedule.expirationTime ?? Infinity;\n    schedule.period = schedule.period;\n    schedule.priority = schedule.priority ?? Priority.DEFAULT;\n    this.updateSchedule.set(update, schedule as Schedule);\n    return () => this.deregisterUpdate(update);\n  }\n\n  deregisterUpdate(update: Refresh) {\n    this.updateSchedule.delete(update);\n  }\n\n  activate() {\n    let handle = 0;\n    const updatePayload: UpdatePayload = {\n      time: 0,\n      deltaTime: 0,\n    };\n    const normalUpdates: Refresh[] = [];\n    const lastUpdates: Refresh[] = [];\n    const updateList = [normalUpdates, lastUpdates];\n\n    const loop: FrameRequestCallback = (time: Time) => {\n      updatePayload.deltaTime = Math.min(time - updatePayload.time, MAX_DELTA_TIME);\n      updatePayload.time = time;\n      handle = requestAnimationFrame(loop);\n      this.time = time;\n\n      normalUpdates.length = 0;\n      lastUpdates.length = 0;\n      this.updateSchedule.forEach((schedule, update) => {\n        if (time < schedule.triggerTime) {\n          return;\n        }\n        updateList[schedule.priority].push(update);\n        if (schedule.period && time < schedule.expirationTime) {\n          schedule.triggerTime = Math.max(schedule.triggerTime + schedule.period, time);\n        } else {\n          this.updateSchedule.delete(update);\n        }\n      });\n      updateList.forEach((updates) => updates.forEach((update) => update.refresh(updatePayload)));\n    };\n    requestAnimationFrame(loop);\n    return () => cancelAnimationFrame(handle);\n  }\n}\n",
  "import { ITimeProvider, Time } from \"core/Time\";\nimport { IKeyboard, KeyListener } from \"./IKeyboard\";\n\nconst QUICK_TAP_TIME = 200;\n\nexport class Keyboard implements IKeyboard {\n  readonly keys: Record<string, Time> = {};\n  readonly keysUp: Record<string, Time> = {};\n\n  private readonly keyDownListener = new Set<KeyListener>();\n  private readonly keyUpListener = new Set<KeyListener>();\n  private readonly quickTapListener = new Set<KeyListener>();\n\n  private isActive: boolean = false;\n\n  constructor(private timeProvider: ITimeProvider) {\n    this.keyDown = this.keyDown.bind(this);\n    this.keyUp = this.keyUp.bind(this);\n  }\n\n  private keyDown(e: KeyboardEvent): void {\n    if (!this.keys[e.code]) {\n      const time = this.timeProvider.time;\n      this.keys[e.code] = time;\n      this.keyDownListener.forEach(listener => listener.onKeyDown?.(e.code, time));\n    }\n    e.preventDefault();\n  }\n\n  private keyUp(e: KeyboardEvent) {\n    const quickTap = this.timeProvider.time - this.keys[e.code] < QUICK_TAP_TIME;\n    this.keysUp[e.code] = this.timeProvider.time;\n    this.keys[e.code] = 0;\n    this.keyUpListener.forEach(listener => listener.onKeyUp?.(e.code, this.timeProvider.time))\n    if (quickTap) {\n      this.quickTapListener.forEach(listener => listener.onQuickTap?.(e.code, this.timeProvider.time))\n    }\n  }\n\n  activate(): () => void {\n    this.setActive(true);\n    return () => this.setActive(false);\n  }\n\n  private setActive(value: boolean) {\n    if (this.isActive !== value) {\n      this.isActive = value;\n      document.removeEventListener('keydown', this.keyDown);\n      document.removeEventListener('keyup', this.keyUp);\n      if (this.isActive) {\n        document.addEventListener('keydown', this.keyDown);\n        document.addEventListener('keyup', this.keyUp);\n      }\n    }\n  }\n\n  addListener(listener: KeyListener): () => void {\n    if (listener.onKeyDown) {\n      this.keyDownListener.add(listener);\n    }\n    if (listener.onKeyUp) {\n      this.keyUpListener.add(listener);\n    }\n    if (listener.onQuickTap) {\n      this.quickTapListener.add(listener);\n    }\n    return () => {\n      this.removeListener(listener);\n    };\n  }\n\n  removeListener(listener: KeyListener): void {\n    this.keyDownListener.delete(listener);\n    this.keyUpListener.delete(listener);\n    this.quickTapListener.delete(listener);\n  }\n}\n",
  "import { IGraphicsEngine } from \"core/graphics/IGraphicsEngine\";\nimport { ICamera } from \"gl/camera/ICamera\";\nimport { Auxiliary } from \"world/aux/Auxiliary\";\n\ninterface Props {\n  engine: IGraphicsEngine;\n  camera: ICamera;\n}\n\nexport class ResizeAux implements Auxiliary {\n  private engine: IGraphicsEngine;\n  private camera: ICamera;\n  constructor({ engine, camera }: Props) {\n    this.engine = engine;\n    this.camera = camera;\n  }\n\n  activate(): void | (() => void) {\n    return this.handleResize();\n  }\n\n  private handleResize() {\n    const { engine } = this;\n    const onResize = (width: number, height: number) => {\n      this.camera.configProjectionMatrix(width, height);\n    };\n    return engine.addResizeListener(onResize);\n  }\n}\n",
  "import IWorld from \"world/IWorld\";\nimport { GraphicsEngine } from \"./graphics/GraphicsEngine\";\nimport { Motor } from \"./motor/Motor\";\nimport { Camera } from \"gl/camera/Camera\";\nimport { Keyboard } from \"controls/Keyboard\";\nimport { AuxiliaryHolder } from \"world/aux/AuxiliaryHolder\";\nimport { IKeyboard } from \"controls/IKeyboard\";\nimport { ResizeAux } from \"./aux/ResizeAux\";\nimport { ICamera } from \"gl/camera/ICamera\";\nimport { IGraphicsEngine } from \"./graphics/IGraphicsEngine\";\nimport { IMotor } from \"./motor/IMotor\";\n\nexport interface Props {\n  motor?: IMotor;\n  canvas?: HTMLCanvasElement | OffscreenCanvas;\n  engine?: IGraphicsEngine;\n  keyboard?: IKeyboard;\n  size?: [number, number];\n  camera?: ICamera;\n}\n\nexport class Core extends AuxiliaryHolder {\n  readonly motor: IMotor;\n  readonly engine: IGraphicsEngine;\n  readonly keyboard: IKeyboard;\n  readonly camera: ICamera;\n\n  constructor({ motor, canvas, engine, keyboard, size, camera }: Props) {\n    super();\n    this.motor = motor ?? new Motor();\n    this.engine = engine ?? new GraphicsEngine(canvas ?? new OffscreenCanvas(size![0], size![1]));\n    this.keyboard = keyboard ?? new Keyboard(this.motor);\n    this.camera = camera ?? new Camera(this);\n  }\n\n  start(world: IWorld) {\n    const { motor, engine, keyboard, camera } = this;\n    const deregisterLoop = motor.loop(this);\n\n    const onRemoveAux = this.addAuxiliary(\n      world,\n      motor,\n      engine,\n      keyboard,\n      camera,\n      new ResizeAux(this),\n    );\n    const clearActivate = this.activate();\n\n    return () => {\n      deregisterLoop();\n      onRemoveAux();\n      clearActivate?.();\n      this.deactivate();\n    };\n  }\n}\n",
  "export type CellPos = [number, number, number, number];\nexport type Cell = {\n  pos: CellPos;\n  tag: string;\n}\n\nexport function cellTag(x: number, y: number, z: number, cellSize: number) {\n  return `(${x},${y},${z})_${cellSize}`;\n}\n",
  "import { Auxiliary } from \"world/aux/Auxiliary\";\nimport { PositionMatrix } from \"../PositionMatrix\";\nimport { Cell, cellTag } from \"world/grid/CellPos\";\nimport { VisitCell } from \"../../../world/grid/VisitCell\";\nimport { UpdatePayload } from \"updates/Refresh\";\nimport { RefreshOrder } from \"updates/RefreshOrder\";\n\ninterface Props {\n  matrix: PositionMatrix;\n  visitCell: VisitCell;\n}\n\ninterface Config {\n  cellSize?: number;\n}\n\nexport class CellChangeAuxiliary implements Auxiliary {\n  private matrix: PositionMatrix;\n  private cellSize: number;\n  private cell: Cell;\n  private visitCellObj: VisitCell;\n  readonly refreshOrder = RefreshOrder.FIRST;\n\n  constructor({ matrix, visitCell }: Props, config?: Config) {\n    this.matrix = matrix;\n    this.cellSize = config?.cellSize ?? 1;\n    this.visitCellObj = visitCell;\n    this.cell = { pos: [0, 0, 0, this.cellSize], tag: \"\" };\n    const cellPos = matrix.getCellPosition(this.cellSize);\n    this.cell.pos[0] = cellPos[0];\n    this.cell.pos[1] = cellPos[1];\n    this.cell.pos[2] = cellPos[2];\n    this.cell.tag = cellTag(...this.cell.pos);\n  }\n\n  activate(): void | (() => void) {\n    this.visitCellObj.visitCell(this.cell);\n  }\n\n  refresh(updatePayload: UpdatePayload): void {\n    const [x, y, z] = this.matrix.getCellPosition(this.cellSize);\n    if (this.cell.pos[0] !== x || this.cell.pos[1] !== y || this.cell.pos[2] !== z) {\n      this.cell.pos[0] = x;\n      this.cell.pos[1] = y;\n      this.cell.pos[2] = z;\n      this.cell.tag = cellTag(...this.cell.pos);\n      this.visitCellObj.visitCell(this.cell, updatePayload);\n    }\n  }\n}\n",
  "import { List, forEach, map } from \"world/sprite/List\";\nimport { Auxiliary } from \"./Auxiliary\";\nimport { UpdatePayload } from \"updates/Refresh\";\n\nexport class Auxiliaries implements List<Auxiliary>, Auxiliary {\n  private active: boolean = false;\n  constructor(private auxiliaries: List<Auxiliary>) {\n  }\n\n  static from(...aux: Auxiliary[]) {\n    return new Auxiliaries(aux);\n  }\n\n  get length(): number {\n    return this.auxiliaries.length;\n  }\n\n  at(index: number): Auxiliary | undefined {\n    return this.auxiliaries.at(index);\n  }\n\n  refresh?(updatePayload: UpdatePayload): void {\n    forEach(this.auxiliaries, aux => aux.refresh?.(updatePayload));\n  }\n\n  activate?(): void | (() => void) {\n    if (!this.active) {\n      this.active = true;\n      const onDeactivates = map(this.auxiliaries, aux => aux.activate?.());\n      return () => onDeactivates.forEach(d => d?.());\n    }\n  }\n\n  deactivate?(): void {\n    if (this.active) {\n      this.active = false;\n      forEach(this.auxiliaries, aux => aux.deactivate?.());\n    }\n  }\n}\n",
  "import { UpdatePayload } from \"updates/Refresh\";\nimport { Auxiliary } from \"./Auxiliary\";\nimport { IKeyboard } from \"controls/IKeyboard\";\nimport { ICamera } from \"gl/camera/ICamera\";\n\ninterface Props {\n  keyboard: IKeyboard;\n  camera: ICamera;\n}\n\ninterface Config {\n  speed: number;\n}\n\nexport class CamMoveAuxiliary implements Auxiliary {\n  private readonly keyboard: IKeyboard;\n  private readonly camera: ICamera;\n  private config: Config;\n\n  constructor(props: Props, config?: Partial<Config>) {\n    this.keyboard = props.keyboard;\n    this.camera = props.camera;\n    this.config = {\n      speed: config?.speed ?? 1,\n    };\n  }\n\n  refresh(update: UpdatePayload): void {\n    const { keys } = this.keyboard;\n    const { deltaTime } = update;\n    const speed = deltaTime / 80 * this.config.speed;\n    const turnspeed = deltaTime / 400;\n    if (keys.KeyW || keys.ArrowUp && !keys.ShiftRight) {\n      this.camera.moveCam(0, 0, -speed);\n    }\n    if (keys.KeyS || keys.ArrowDown && !keys.ShiftRight) {\n      this.camera.moveCam(0, 0, speed);\n    }\n    if (keys.KeyA || (keys.ArrowLeft && !keys.ShiftRight)) {\n      this.camera.moveCam(-speed, 0, 0);\n    }\n    if (keys.KeyD || (keys.ArrowRight && !keys.ShiftRight)) {\n      this.camera.moveCam(speed, 0, 0);\n    }\n    if (keys.KeyQ || (keys.ArrowLeft && keys.ShiftRight)) {\n      this.camera.turn(-turnspeed);\n    }\n    if (keys.KeyE || (keys.ArrowRight && keys.ShiftRight)) {\n      this.camera.turn(turnspeed);\n    }\n    if (keys.ArrowUp && keys.ShiftRight) {\n      this.camera.tilt(-turnspeed);\n    }\n    if (keys.ArrowDown && keys.ShiftRight) {\n      this.camera.tilt(turnspeed);\n    }\n  }\n}\n",
  "import { UpdatePayload } from \"updates/Refresh\";\nimport { Auxiliary } from \"./Auxiliary\";\nimport { Position } from \"world/grid/Position\";\nimport { angleStep } from \"gl/utils/angleUtils\";\nimport { IKeyboard } from \"controls/IKeyboard\";\nimport { ICamera } from \"gl/camera/ICamera\";\n\ninterface Props {\n  keyboard: IKeyboard;\n  camera: ICamera;\n}\n\ninterface Config {\n  step: number;\n  turnStep: number;\n  tiltStep: number;\n  speed: number;\n}\n\nexport class CamStepAuxiliary implements Auxiliary {\n  private readonly keyboard: IKeyboard;\n  private readonly camera: ICamera;\n  private readonly goalPos: Position;\n  private stepCount: number = 0;\n  private turnCount: number = 0;\n  private tiltCount: number = 0;\n  private config: Config;\n\n  constructor({ keyboard, camera }: Props, config: Partial<Config> = {}) {\n    this.keyboard = keyboard;\n    this.camera = camera;\n    const camPos = this.camera.getPosition();\n    this.goalPos = [...camPos];\n    this.config = {\n      step: config.step ?? 2,\n      turnStep: config.turnStep ?? Math.PI / 2,\n      tiltStep: config.tiltStep ?? Math.PI / 2,\n      speed: config.speed ?? 1,\n    };\n  }\n\n  private readonly prePos: Position = [0, 0, 0];\n  refresh(update: UpdatePayload): void {\n    const { keys } = this.keyboard;\n    const { deltaTime } = update;\n\n    const pos = this.camera.getPosition();\n    const { step, turnStep, tiltStep } = this.config;\n    this.prePos[0] = Math.round(pos[0] / step) * step;\n    this.prePos[1] = Math.round(pos[1] / step) * step;\n    this.prePos[2] = Math.round(pos[2] / step) * step;\n\n    let dx = 0, dz = 0;\n    if (keys.KeyW || keys.ArrowUp && !keys.ShiftRight) {\n      dz--;\n    }\n    if (keys.KeyS || keys.ArrowDown && !keys.ShiftRight) {\n      dz++;\n    }\n    if (keys.KeyA || (keys.ArrowLeft && !keys.ShiftRight)) {\n      dx--;\n    }\n    if (keys.KeyD || (keys.ArrowRight && !keys.ShiftRight)) {\n      dx++;\n    }\n    const turnGoal = this.camera.turnMatrix.progressive.goal;\n    if (dx || dz || this.stepCount > 0) {\n      const relativeDx = dx * Math.cos(turnGoal) - dz * Math.sin(turnGoal);\n      const relativeDz = dx * Math.sin(turnGoal) + dz * Math.cos(turnGoal);\n\n      const gx = Math.round(pos[0] / step + relativeDx) * step;\n      const gz = Math.round(pos[2] / step + relativeDz) * step;\n      this.goalPos[0] = gx;\n      this.goalPos[2] = gz;\n    }\n\n    if (!dx && !dz) {\n      this.stepCount = 0;\n    }\n    const speed = ((dx || dz) ? deltaTime / 150 : deltaTime / 100) * this.config.speed;\n\n    this.camera.gotoPos(this.goalPos[0], pos[1], this.goalPos[2], speed);\n    const newPos = this.camera.getPosition();\n    if (Math.round(newPos[0] / step) * step !== this.prePos[0]\n      || Math.round(newPos[1] / step) * step !== this.prePos[1]\n      || Math.round(newPos[2] / step) * step !== this.prePos[2]) {\n      this.stepCount++;\n    }\n\n    let dTurn = 0;\n    if (keys.KeyQ || (keys.ArrowLeft && keys.ShiftRight)) {\n      dTurn--;\n    }\n    if (keys.KeyE || (keys.ArrowRight && keys.ShiftRight)) {\n      dTurn++;\n    }\n\n    const turn = angleStep(this.camera.turnMatrix.turn, turnStep);\n    if (dTurn || this.turnCount > 0) {\n      this.camera.turnMatrix.progressive.setGoal(\n        angleStep(turn + turnStep * dTurn, turnStep),\n        dTurn ? 1 / 200 : 1 / 100, this);\n    }\n    if (!dTurn) {\n      this.turnCount = 0;\n    }\n    if (this.camera.turnMatrix.progressive.update(deltaTime)) {\n      const newTurn = angleStep(this.camera.turnMatrix.turn, turnStep);\n      if (newTurn !== turn) {\n        this.turnCount++;\n      }\n    }\n\n    let dTilt = 0;\n    if (keys.ArrowUp && keys.ShiftRight) {\n      dTilt--;\n    }\n    if (keys.ArrowDown && keys.ShiftRight) {\n      dTilt++;\n    }\n\n    const tilt = angleStep(this.camera.tiltMatrix.tilt, tiltStep);\n    if (dTilt || this.tiltCount > 0) {\n      this.camera.tiltMatrix.progressive.setGoal(\n        angleStep(tilt + tiltStep * dTilt, tiltStep),\n        dTilt ? 1 / 400 : 1 / 200,\n        this,\n      );\n    }\n    if (!dTilt) {\n      this.tiltCount = 0;\n    }\n    if (this.camera.tiltMatrix.progressive.update(deltaTime)) {\n      const newTilt = angleStep(this.camera.tiltMatrix.tilt, tiltStep);\n      if (newTilt !== tilt) {\n        this.tiltCount++;\n      }\n    }\n  }\n}\n",
  "import { UpdatePayload } from \"updates/Refresh\";\nimport { Auxiliary } from \"./Auxiliary\";\nimport { IKeyboard } from \"controls/IKeyboard\";\nimport { ICamera } from \"gl/camera/ICamera\";\n\ninterface Props {\n  keyboard: IKeyboard;\n  camera: ICamera;\n}\n\ninterface Config {\n  key: string;\n}\n\nexport class CamTiltResetAuxiliary implements Auxiliary {\n  private readonly keyboard: IKeyboard;\n  private readonly camera: ICamera;\n  private key: string;\n  private resetting: boolean = false;\n\n  constructor(props: Props, config: Config) {\n    this.keyboard = props.keyboard;\n    this.camera = props.camera;\n    this.key = config.key;\n  }\n\n  activate(): void | (() => void) {\n    const removeListener = this.keyboard.addListener({\n      onQuickTap: (keyCode) => {\n        if (keyCode === this.key) {\n          this.resetting = true;\n          this.camera.tiltMatrix.progressive.setGoal(\n            0, 1 / 300, this\n          );\n        }\n      },\n    });\n    return () => removeListener();\n  }\n\n  refresh(update: UpdatePayload): void {\n    if (this.resetting) {\n      const { deltaTime } = update;\n      if (!this.camera.tiltMatrix.progressive.update(deltaTime)) {\n        this.resetting = false;\n      }\n    }\n  }\n}\n",
  "import { UpdatePayload } from \"updates/Refresh\";\nimport { Auxiliary } from \"./Auxiliary\";\nimport { IKeyboard } from \"controls/IKeyboard\";\nimport { ICamera } from \"gl/camera/ICamera\";\n\ninterface Props {\n  keyboard: IKeyboard;\n  camera: ICamera;\n}\n\ninterface Config {\n  key: string;\n}\n\nexport class RiseAuxiliary implements Auxiliary {\n  private readonly keyboard: IKeyboard;\n  private readonly camera: ICamera;\n  private key: string;\n  private dropping: boolean = false;\n\n  constructor({ keyboard, camera }: Props, config: Config = { key: \"Space\" }) {\n    this.keyboard = keyboard;\n    this.camera = camera;\n    this.key = config.key;\n  }\n\n  activate(): void | (() => void) {\n    const removeListener = this.keyboard.addListener({\n      onQuickTap: (keyCode) => {\n        if (keyCode === this.key) {\n          this.dropping = true;\n        }\n      },\n    });\n    return () => removeListener();\n  }\n\n  refresh(update: UpdatePayload): void {\n    const { deltaTime } = update;\n\n    this.riseAndDrop(deltaTime, this.keyboard);\n  }\n\n  riseAndDrop(deltaTime: number, keyboard: IKeyboard): void {\n    const speed = deltaTime / 80;\n    const { keys } = keyboard;\n    if (keys[this.key]) {\n      this.camera.moveCam(0, speed, 0);\n    } else if (this.dropping) {\n      this.camera.moveCam(0, -speed, 0);\n      const [x, y, z] = this.camera.getPosition();\n      if (y < 0) {\n        this.camera.setPosition(x, 0, z);\n        this.dropping = false;\n      }\n    }\n  }\n}\n",
  "import { IKeyboard } from \"controls/IKeyboard\";\nimport { Auxiliary } from \"./Auxiliary\";\nimport { UpdatePayload } from \"updates/Refresh\";\nimport { List, map } from \"world/sprite/List\";\n\ntype KeyMap = { key: string; aux: Auxiliary };\n\ninterface Config {\n  auxiliariesMapping: List<KeyMap>;\n}\n\ninterface Props {\n  keyboard: IKeyboard;\n}\n\nexport class ToggleAuxiliary implements Auxiliary {\n  private keyboard: IKeyboard;\n  private active: boolean = false;\n  private toggleIndex: number = 0;\n  private pendingDeactivate?: (() => void) | void;\n  private keys: (string | undefined)[];\n  private auxiliaries: List<Auxiliary>;\n\n  constructor({ keyboard }: Props, config: Config) {\n    this.keyboard = keyboard;\n    this.keys = map(config.auxiliariesMapping, (({ key }) => key));\n    this.keyboard.addListener({\n      onKeyDown: (keyCode: string) => {\n        if (this.keys.indexOf(keyCode) >= 0) {\n          const wasActive = this.active;\n          this.deactivate();\n          this.toggle(keyCode);\n          if (wasActive) {\n            this.activate();\n          }\n        }\n      },\n    });\n    this.auxiliaries = map(config.auxiliariesMapping, (({ aux }) => aux));\n  }\n\n  private get auxiliary(): Auxiliary | undefined {\n    return this.auxiliaries.at(this.toggleIndex);\n  }\n\n  toggle(key: string) {\n    if (this.keys[this.toggleIndex] !== key) {\n      this.toggleIndex = this.keys.indexOf(key);\n    } else {\n      const nextIndex = this.keys.length ? (this.toggleIndex + 1) % this.keys.length : 0;\n      if (this.keys[nextIndex] === key) {\n        this.toggleIndex = nextIndex;\n      }\n    }\n  }\n\n  refresh(updatePayload: UpdatePayload): void {\n    this.auxiliary?.refresh?.(updatePayload);\n  }\n\n  activate(): (() => void) | void {\n    if (!this.active) {\n      this.active = true;\n      this.pendingDeactivate = this.auxiliary?.activate?.();\n    }\n  }\n\n  deactivate(): void {\n    if (this.active) {\n      this.active = false;\n      this.pendingDeactivate?.();\n      this.auxiliary?.deactivate?.();\n    }\n  }\n}\n",
  "import { List } from \"world/sprite/List\";\nimport { Cell, cellTag } from \"./CellPos\";\nimport { VisitCell } from \"./VisitCell\";\n\ninterface Config {\n  range?: [number, number, number];\n  cellLimit?: number;\n  cellSize?: number;\n}\n\ninterface DoubleList<T> {\n  value: T;\n  prev?: DoubleList<T>;\n  next?: DoubleList<T>;\n}\n\nexport interface CellTrack {\n  trackCell?(cell: Cell): void;\n  untrackCell?(cellTag: string): void;\n}\n\nexport class CellTracker implements VisitCell {\n  private range: [number, number, number];\n  private base: [number, number, number];\n  private cellLimit: number;\n  private cellSize: number;\n  private tempCell: Cell;\n\n  private readonly cellTagVisitsStart: DoubleList<string>;\n  private readonly cellTagVisitsEnd: DoubleList<string>;\n  private cellTagMap: Map<string, DoubleList<string>> = new Map();\n\n  constructor(private cellTrack: CellTrack, { range, cellLimit, cellSize = 1 }: Config = {}) {\n    this.range = [range?.[0] ?? 3, range?.[1] ?? 3, range?.[2] ?? 3];\n    this.base = this.range.map(r => Math.ceil(-r / 2)) as [number, number, number];\n\n    this.cellLimit = Math.max(0, cellLimit ?? 10);\n    this.cellSize = cellSize ?? 1;\n    this.cellTagVisitsStart = { value: \"start\" };\n    this.cellTagVisitsEnd = { value: \"end\" };\n    this.cellTagVisitsStart.next = this.cellTagVisitsEnd;\n    this.cellTagVisitsEnd.prev = this.cellTagVisitsStart;\n    this.tempCell = {\n      pos: [0, 0, 0, this.cellSize],\n      tag: \"\",\n    };\n  }\n\n  getCellTags(): List<string> {\n    const tags: string[] = [];\n    for (let e = this.cellTagVisitsStart.next; e !== this.cellTagVisitsEnd; e = e!.next) {\n      tags.push(e!.value);\n    }\n    return tags;\n  }\n\n  iterateCells(visitedCell: Cell, callback: (cell: Cell) => void) {\n    const { range, base, tempCell } = this;\n    const { pos } = visitedCell;\n    for (let z = 0; z < range[0]; z++) {\n      for (let x = 0; x < range[2]; x++) {\n        for (let y = 0; y < range[1]; y++) {\n          tempCell.pos[0] = pos[0] + x + base[0];\n          tempCell.pos[1] = pos[1] + y + base[1];\n          tempCell.pos[2] = pos[2] + z + base[2];\n          tempCell.tag = cellTag(...tempCell.pos);\n          callback(tempCell);\n        }\n      }\n    }\n  }\n\n  visitCell(visitedCell: Cell): void {\n    this.iterateCells(visitedCell, cell => {\n      let entry = this.cellTagMap.get(cell.tag);\n      if (entry) {\n        //  remove to add at the end later\n        if (entry.prev) {\n          entry.prev.next = entry.next;\n        }\n        if (entry.next) {\n          entry.next.prev = entry.prev;\n        }\n        entry.prev = undefined;\n        entry.next = undefined;\n      } else {\n        //  create and track\n        this.cellTrack.trackCell?.(cell);\n        entry = { value: cell.tag };\n        this.cellTagMap.set(cell.tag, entry);\n      }\n\n      //  add at the end\n      entry.prev = this.cellTagVisitsEnd.prev;\n      entry.prev!.next = entry;\n      this.cellTagVisitsEnd.prev = entry;\n      entry.next = this.cellTagVisitsEnd;\n    });\n\n    //  remove any excess cells\n    while (this.cellTagMap.size > this.cellLimit && this.cellTagVisitsStart) {\n      const entryToRemove = this.cellTagVisitsStart.next!;\n      const newFirstEntry = entryToRemove.next!;\n      this.cellTagMap.delete(entryToRemove.value);\n      this.cellTagVisitsStart.next = newFirstEntry;\n      newFirstEntry.prev = this.cellTagVisitsStart;\n      this.cellTrack.untrackCell?.(entryToRemove.value);\n    }\n  }\n}\n",
  "import { Sprite } from \"../Sprite\";\nimport { Cell } from \"world/grid/CellPos\";\nimport { SpriteUpdateType } from \"../update/SpriteUpdateType\";\nimport { Auxiliary } from \"world/aux/Auxiliary\";\nimport { Sprites } from \"../Sprites\";\nimport { forEach } from \"../List\";\nimport { UpdateNotifier } from \"updates/UpdateNotifier\";\n\ninterface Config {\n  spriteLimit?: number;\n  xRange?: [number, number],\n  yRange?: [number, number],\n  zRange?: [number, number],\n}\n\ninterface Slot {\n  sprite: Sprite;\n  tag: string;\n}\n\nexport class SpriteGrid implements Auxiliary, UpdateNotifier {\n  private slots: Slot[] = [];\n  private spriteLimit: number;\n  private ranges: [[number, number], [number, number], [number, number]];\n\n  informUpdate(_id: number, _type?: number | undefined): void {\n  }\n\n  constructor(config?: Config, private getSpritesAtCell: (cell: Cell) => Sprites = () => []) {\n    this.spriteLimit = config?.spriteLimit ?? 100;\n    this.ranges = [\n      config?.xRange ?? [Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER],\n      config?.yRange ?? [Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER],\n      config?.zRange ?? [Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER],\n    ];\n  }\n\n  get length(): number {\n    return this.spriteLimit;\n  }\n\n  at(index: number): Sprite | undefined {\n    return index < this.length ? this.slots[index]?.sprite : undefined;\n  }\n\n  trackCell(cell: Cell): void {\n    const [[minX, maxX], [minY, maxY], [minZ, maxZ]] = this.ranges;\n    const [x, y, z] = cell.pos;\n    if (x < minX || maxX < x || y < minY || maxY < y || z < minZ || maxZ < z) {\n      return;\n    }\n\n    forEach(this.getSpritesAtCell(cell), sprite => {\n      if (sprite) {\n        this.informUpdate(this.slots.length);\n        this.slots.push({\n          sprite,\n          tag: cell.tag,\n        });\n      }\n    });\n  }\n\n  untrackCell(cellTag: string): void {\n    for (let i = this.slots.length - 1; i >= 0; i--) {\n      const slot = this.slots[i];\n      if (slot.tag === cellTag) {\n        this.informUpdate(i, SpriteUpdateType.ALL);\n        this.informUpdate(this.slots.length - 1, SpriteUpdateType.TRANSFORM);\n        this.slots[i] = this.slots[this.slots.length - 1];\n        this.slots.pop();\n      }\n    }\n  }\n}\n",
  "import { SpriteGrid } from \"./SpriteGrid\";\nimport { Sprites } from \"../Sprites\";\nimport { Sprite } from \"../Sprite\";\nimport { forEach } from \"../List\";\nimport { transformToPosition } from \"world/grid/Position\";\nimport { PositionMatrix } from \"gl/transform/PositionMatrix\";\nimport { cellTag } from \"world/grid/CellPos\";\n\ninterface Config {\n  cellSize?: number;\n  spriteLimit?: number;\n}\n\nconst EMPTY: Sprite[] = [];\n\nexport class FixedSpriteGrid extends SpriteGrid {\n  private cellSize: number;\n  private spritesPerCell: Record<string, Sprite[]> = {};\n\n  constructor(config: Config, private sprites: Sprites) {\n    super({ spriteLimit: config.spriteLimit ?? sprites.length }, cell => {\n      return this.spritesPerCell[cell.tag] ?? EMPTY\n    });\n    this.cellSize = config.cellSize ?? 1;\n  }\n\n  activate(): void | (() => void) {\n    forEach(this.sprites, (sprite) => {\n      if (sprite) {\n        const pos = transformToPosition(sprite.transform);\n        const cellPos = PositionMatrix.getCellPos(pos, this.cellSize);\n        const tag = cellTag(...cellPos);\n        this.spritesPerCell[tag] = this.spritesPerCell[tag] ?? [];\n        this.spritesPerCell[tag].push(sprite);\n      }\n    });\n  }\n}\n",
  "import { Core } from \"core/Core\";\nimport Matrix from \"gl/transform/Matrix\";\nimport { CellChangeAuxiliary } from \"gl/transform/aux/CellChangeAuxiliary\";\nimport { World } from \"index\";\nimport { Auxiliaries } from \"world/aux/Auxiliaries\";\nimport { CamMoveAuxiliary } from \"world/aux/CamMoveAuxiliary\";\nimport { CamStepAuxiliary } from \"world/aux/CamStepAuxiliary\";\nimport { CamTiltResetAuxiliary } from \"world/aux/CamTiltResetAuxiliary\";\nimport { RiseAuxiliary } from \"world/aux/RiseAuxiliary\";\nimport { ToggleAuxiliary } from \"world/aux/ToggleAuxiliary\";\nimport { CellTracker } from \"world/grid/CellTracker\";\nimport { FixedSpriteGrid } from \"world/sprite/aux/FixedSpriteGrid\";\nimport { SpriteGrid } from \"world/sprite/aux/SpriteGrid\";\n\nconst DOBUKI = 0, LOGO = 1, GROUND = 2, VIDEO = 3, WIREFRAME = 4, GRASS = 5;\nconst LOGO_SIZE = 512;\nconst CELLSIZE = 2;\nconst SPRITE_LIMIT = 10000;\n\nexport class DemoWorld extends World {\n  constructor(private core: Core) {\n    super(core);\n\n    this.addMedia(\n      {\n        id: DOBUKI,\n        type: \"image\",\n        src: 'dobuki.png',\n      },\n      {\n        id: LOGO,\n        type: \"draw\",\n        draw: ctx => {\n          const { canvas } = ctx;\n          canvas.width = LOGO_SIZE;\n          canvas.height = LOGO_SIZE;\n          const centerX = canvas.width / 2, centerY = canvas.height / 2;\n          const halfSize = canvas.width / 2;\n          ctx.imageSmoothingEnabled = true;\n          ctx.fillStyle = '#ddd';\n          ctx.lineWidth = canvas.width / 50;\n          ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n          ctx.strokeStyle = 'black';\n          ctx.fillStyle = 'gold';\n\n          //  face\n          ctx.beginPath();\n          ctx.arc(centerX, centerY, halfSize * 0.8, 0, 2 * Math.PI);\n          ctx.fill();\n          ctx.stroke();\n\n          //  smile\n          ctx.beginPath();\n          ctx.arc(centerX, centerY, halfSize * 0.5, 0, Math.PI);\n          ctx.stroke();\n\n          //  left eye\n          ctx.beginPath();\n          ctx.arc(canvas.width / 3, canvas.height / 3, halfSize * 0.1, 0, Math.PI, true);\n          ctx.stroke();\n          ctx.beginPath();\n          ctx.arc((canvas.width / 3) * 2, canvas.height / 3, halfSize * 0.1, 0, Math.PI * 2, true);\n          ctx.stroke();\n        },\n      },\n      {\n        id: GROUND,\n        type: \"draw\",\n        draw: ctx => {\n          const { canvas } = ctx;\n          canvas.width = LOGO_SIZE;\n          canvas.height = LOGO_SIZE;\n          ctx.imageSmoothingEnabled = true;\n          ctx.fillStyle = '#ddd';\n          ctx.lineWidth = canvas.width / 50;\n          ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n          ctx.strokeStyle = 'black';\n          ctx.fillStyle = 'silver';\n\n          ctx.beginPath();\n          ctx.rect(canvas.width * .2, canvas.height * .2, canvas.width * .6, canvas.height * .6);\n          ctx.fill();\n          ctx.stroke();\n        },\n      },\n      {\n        id: VIDEO,\n        type: \"video\",\n        src: 'sample.mp4',\n        volume: 0,\n        fps: 30,\n        playSpeed: .1,\n        maxRefreshRate: 30,\n      },\n      {\n        id: WIREFRAME,\n        type: \"draw\",\n        draw: ctx => {\n          const { canvas } = ctx;\n          canvas.width = LOGO_SIZE;\n          canvas.height = LOGO_SIZE;\n          ctx.imageSmoothingEnabled = true;\n          ctx.lineWidth = 5;\n          ctx.setLineDash([5, 2]);\n\n          ctx.strokeStyle = 'blue';\n\n          ctx.beginPath();\n          ctx.rect(10, 10, canvas.width - 20, canvas.height - 20);\n          ctx.stroke();\n        },\n      },\n      {\n        id: GRASS,\n        type: \"draw\",\n        draw: ctx => {\n          const { canvas } = ctx;\n          canvas.width = LOGO_SIZE;\n          canvas.height = LOGO_SIZE;\n          ctx.imageSmoothingEnabled = true;\n          ctx.fillStyle = 'green';\n          ctx.lineWidth = canvas.width / 50;\n          ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n          ctx.strokeStyle = 'black';\n          ctx.fillStyle = '#4f8';\n\n          ctx.beginPath();\n          ctx.rect(canvas.width * .2, canvas.height * .2, canvas.width * .6, canvas.height * .6);\n          ctx.fill();\n          ctx.stroke();\n        },\n      },\n    );\n\n    const spriteGrid = new FixedSpriteGrid(\n      { cellSize: CELLSIZE },\n      [\n        {\n          imageId: DOBUKI,\n          transform: Matrix.create().translate(0, 0, -1),\n        },\n        //  side walls\n        ...[\n          Matrix.create().translate(-1, 0, 0).rotateY(Math.PI / 2).scale(1),\n          Matrix.create().translate(1, 0, 0).rotateY(-Math.PI / 2).scale(1),\n        ].map(transform => ({ imageId: LOGO, transform })),\n        //  floor\n        ...[\n          Matrix.create().translate(0, -1, 0).rotateX(-Math.PI / 2).scale(1),\n          Matrix.create().translate(0, -1, 2).rotateX(-Math.PI / 2).scale(1),\n          Matrix.create().translate(-2, -1, 2).rotateX(-Math.PI / 2).scale(1),\n          Matrix.create().translate(2, -1, 2).rotateX(-Math.PI / 2).scale(1),\n        ].map(transform => ({ imageId: GROUND, transform })),\n      ]);\n    this.addAuxiliary(spriteGrid);\n\n    const wireframeGrid = new SpriteGrid(\n      { spriteLimit: SPRITE_LIMIT, yRange: [0, 0] },\n      cell => [\n        { //  ground\n          name: `${cell.pos[0]}_${cell.pos[2]}`,\n          imageId: GRASS,\n          transform: Matrix.create().translate(cell.pos[0] * cell.pos[3], -1, cell.pos[2] * cell.pos[3]).rotateX(-Math.PI / 2).scale(1)\n        },\n        { //  ceiling\n          imageId: WIREFRAME,\n          transform: Matrix.create().translate(cell.pos[0] * cell.pos[3], 1, cell.pos[2] * cell.pos[3]).rotateX(-Math.PI / 2).scale(1)\n        },\n        { //  front\n          imageId: WIREFRAME,\n          transform: Matrix.create().translate(cell.pos[0] * cell.pos[3], 0, cell.pos[2] * cell.pos[3] - 1).scale(1)\n        }\n      ]);\n    this.addAuxiliary(wireframeGrid);\n\n    this.addSprites(spriteGrid, {\n      imageId: VIDEO,\n      transform: Matrix.create()\n        .translate(0, 10000, -50000)\n        .scale(480 * 20, 270 * 20, 1),\n    }, wireframeGrid);\n  }\n\n  activate(): () => void {\n    const cleanAuxiliary = this.addAuxiliary(\n      new ToggleAuxiliary(this.core, {\n        auxiliariesMapping: [\n          {\n            key: \"Tab\", aux: Auxiliaries.from(\n              new CamStepAuxiliary(this.core, { step: 2, turnStep: Math.PI / 2, tiltStep: Math.PI / 4 }),\n              new CamTiltResetAuxiliary(this.core, { key: \"ShiftRight\" }),\n            )\n          },\n          {\n            key: \"Tab\", aux: Auxiliaries.from(\n              new CamMoveAuxiliary(this.core),\n              new RiseAuxiliary(this.core),\n              new CamTiltResetAuxiliary(this.core, { key: \"ShiftRight\" }),\n            )\n          },\n        ],\n      }),\n\n      new CellChangeAuxiliary({\n        matrix: this.core.camera.posMatrix,\n        visitCell: new CellTracker(this, {\n          cellLimit: 1000,\n          range: [5, 3, 5],\n          cellSize: CELLSIZE,\n        })\n      }, {\n        cellSize: CELLSIZE,\n      }),\n    );\n\n    const onDeactivate = super.activate();\n\n    return () => {\n      onDeactivate?.();\n      cleanAuxiliary();\n    };\n  }\n}\n",
  "import { World } from 'world/World';\nimport { Core } from 'core/Core';\nimport { DemoWorld } from 'demo/DemoWorld';\n\nexport async function hello() {\n  console.log('Hello World!');\n}\n\nlet onStop: () => void;\n\nexport async function testCanvas(canvas: HTMLCanvasElement) {\n  canvas.style.border = '2px solid silver';\n  //  canvas.style.cursor = 'grab';\n  canvas.addEventListener('mouseenter', () => {\n    canvas.style.borderColor = 'black';\n  });\n  canvas.addEventListener('mouseleave', () => {\n    canvas.style.borderColor = 'silver';\n  });\n  const pixelListener = { x: 0, y: 0, pixel: 0 };\n  canvas.addEventListener('mousemove', (e) => {\n    const x = (e.pageX - canvas.offsetLeft) * 2;\n    const y = (canvas.offsetHeight - (e.pageY - canvas.offsetTop)) * 2;\n    pixelListener.x = x;\n    pixelListener.y = y;\n  });\n  //  canvas.style.pointerEvents = 'none';\n\n  const core = new Core({\n    canvas,\n  });\n  core.engine.addPixelListener(pixelListener);\n  const world = new DemoWorld(core);\n  onStop = core.start(world);\n  return { core, world };\n}\n\nexport function stop(): void {\n  onStop();\n}\n\nexport { World };\n"
  ],
  "mappings": "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",
  "debugId": "19DEB41A21709D6464756e2164756e21",
  "names": []
}